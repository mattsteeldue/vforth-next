

\ build 20200514
First working  DOSCALL that uses NEXTZXOS primitives.


\ build 20200529
Tentative project branch to use IX as return-stack-pointer (RP).
This test shows that there is no speed nor room improvement in using IX instead of a fixed memory location.
More, I found IX useful as a spare couple of registers, (but see below what IX is useful for now)


\ build 20200608
SP register must be below C000 in  INKEY  and  SELECT  too.
Removed  floating-point primitives to save room, these will be reintroduced later as libraries to be included.
LOAD  now can be interrupted using Break key.


\ build 20200619
Changed behaviour of  WORD  to return the value of HERE. This is a discontinuity from evious versions.
Removed  CALL#   from core and left only in Screens library (later in NEEDS library)
Replacing  DO  with  ?DO  in  TYPE  and  SPACES
Introducing  PICK  at  Scr# 209, planning to put it in the core.
Fixed  ?STACK  to ignore errors when DP is beyond S0: purpose is to use higher 8K RAM as vocabulary extension.


\ build 20200624
Removed  MOVE-SP,  MOVE-RP,  MOVE-LIMIT  from core and moved to  Blocks  library  at Screen # 220-223
Removed 128-RAM bank switch  (BANK!)  from core in perspective to abandon all references to non-Next version.
Fixed  SEE  to detect  ?DO  when on decompiling.
Fixed  BLEEP  and introduced  some BLEEP-CALC  and  BEEP-PITCH  to cope with it.
Experiment on  MMU7  and corrections on  MOVE-SP,  MOVE-RP,  MOVE-LIMIT 
Experiment on  UPPER with the purpose to make this Forth Case-Insensitive (if one need to).


\ build 20200628
Introducing  AUTOEXEC  for the first time: now at first startup  AUTOEXEC is executed first. 
Changed "name" to  "Next Forth" and removed references to Microdrive.
Improving  MMU7  banking study using words  >FAR  and moved away previous example from screen #290 to #300 
Bakup of first 350 screens to 10001 onward, just to be safe. Accessing high number Screens is much slower.


\ build 20200702
Introduced a quick'n'dirty audible click on  KEY.
Word  BASIC, on returning to Basic, retuns the value currently on top-of-stack. Useful to return ORIGIN and make faster rebuild.
Test on  AUTOEXEC  in core, run 11 LOAD. Useful at startup, as already seen..
Verified and corrected words MOVE-SP; copied words MOVE-SP, MOVE-RP, MOVE-LIMIT to screen 220-223: useful to free MMU7 last 8K bank (D000-FFFF)
Introduced screen #100 to compile the whole ASSEMBLER (screens 101-162). And Screen #9 too.


\ build 20200705
Finally fixed  AUTOEXEC  in core, to correctly run 11 LOAD. This is my definitive choice.
Added NIP and TUCK to core, this will save a few bytes in the future.
SP register to be below C000 in  ?TERMINAL  and  KEY  too.
Fixed  RND  in !blocks.bin library and told Marcus Cruz to correct his GitHub's Afera library.
Improving MMU7 banking using words  >FAR <FAR. Moved previous example of FAR-HL from screen #290 to #300 
Finally fixed the Z80N  NEXTREG op-code  to use "N," commaer instead of the duplicated "V,"
Experiment on  .RESET  to force a soft-reset. Maybe this could become a dot-command if there isn't any yet.


\ build 20200714
Introducing case-insensitive vocabulary search (FIND). Wow! this is an achievement.
Two new words CASEON to enable and CASEOFF to disable case-sensitive.


\ build 20200717
Removed a nasty bug: when you typed  LIT  alone, the system crashed.
Resolved adding a NOOP after EXECUTE in INTERPRET definition.
This shows how easily we can rebuild this system !


\ build 20200721
Fixed v-Forth name in spash screen.
Restored flashing cursor. Improved SEE.
Fixed CASEOFF and CASEON to accept lower-case input.


\ build 20200808
Introducing FAR address and POINTER based on MMU7.
System now starts with a write-only OPEN#13 stream attached to file "c:/tools\vFORTH/output.txt": 
text file to collect any output redirected to device #13 via some   13 SELECT   followed by some output word. See Screen#252 to see an example of it.
This release comes in two version: 
- forth15a.bin : as usual
- forth15e.bin : with upper 8K RAM freed to experiment with MMU7.


\ build 20200830
Introduction of LAYER 1,2 graphic resolution, this now allows screen size 1024 bytes, twice than previous releases.
KEY cursor must be displayed via software-loop instead of "flash" attribute (which is no more using LAYER 1,2)
Continuing studying POINTER address for heap memory via MMU7 and experimenting with ASSEMBLER vocabulary on MMU7 page.


\ build 20200907
Faster LOAD of external text source file by disabling echoing to video.
Improvement in DOSCALL to allow A register to be passed along.


\ build 20200912
IX register now holds NEXT address: this makes inner-interpreter 2 T-states faster than before...
Many Library Screens had to be checked to be IX-compliant
Introducing RECURSE in core dictionary.


\ build 20200923
Optimization of some definitions that used IX as temporary register.
To interact with Next's hardware there are new definitions: REG@ and REG! 
To better interact with higher RAM there are new definitions: MMU7@ and MMU7!
Implemented a heap-based string S" storage system using FAR on MMU7.
Stable version of POINTER.


\ build 20200928
Test "Heap Memory Management" to store counted-string, i.e. strings 255 bytes in length. 
In Screens #80-85 there is some definitions: FAR HP@ POINTER HEAP H" S"
I put in this this release a simple pacman style game written in Forth that explores how to use Heap Memory to store data.
This is the first step into Next's Hardware: hopefully next will be sprites.


\ build 20201017
Now the following word are available: M_P3DOS  F_SYNC  F_OPEN  F_CLOSE  F_READ  F_WRITE  F_SEEK  that use RST 8 calls for NextZXOS interaction, fast and neat indeed since there is no more need for BANK paging during DOSCALL.
Screens/Blocks system doesn't need  OPEN# from Basic anymore, instead Block's file is opened during COLD or WARM and closed during  BYE.
Now CREATE is more ISO compliant and a new MARKER definition is now available.
Also, a better compiled strings are now available to create string to hold a filename. Still, an  USE or NEEDS  definition is lacking, ... la prochaine fois.
ASSEMBLER vocabulary doesn't occupy Dictionary space anymore, instead it uses some HEAP VOCABULARY extending what I am already doing with HEAP STRINGs. 


\ build 20201031
Introducing a new Full-Screen Editor available at startup or after AUTOEXEC. See Screens 190-196.
Line-Editor is moved to Screens 90-95
Renamed  IN   into  >IN  to be more ANS compliant.
Defined DEFER, at last.
Documentation upgraded and revised.


\ build 20201115
Bugfix: DO ... +LOOP structure with negative step that crosses the 0 boundary behaves in a buggy way. The bug is in (LOOP) definition that does a JP C instead of a JP M.
Changed   STRING"   into   ,"    Ã  la  Forth Inc. style.
Re-introduced  PICK  INVV  TRUV, but planne to move them in include directory.
Introducing a new  Full Screen Editor  that can be loaded from library.
Attached block-system file  !Blocks64.bin  has become integral part of this Forth system, since many features come along with it.
   20: SEE debugger facility
   80: String on Heap Memory Management
   90: Line Editor
  100: Z80 Assembler
  190: Full Screen Editor
But, as already stated, I have plans to move them into include directory.  


\ build 20201129
Introducing F_GETLINE and first version of INCLUDE definition. Introducing also 
SOURCE-ID user variable to keep track of nested calls to INCLUDE definition.
This - and this is a real big leap - allows interpreting any source file.
AUTOEXEC now loads Screen # 11. This frees the first 3 Screen for any other 
purpose.


\ build 20210131
Improved F_GETLINE and EMIT to handle 0x0A more friendly.
The (COMPARE) definition is now case sensitive or not based on CASEON and CASEOFF.
A working LOCATE definition is now available in Screens # 70-76 
DOSCALL definition is now removed since a better M_P3DOS is now available.


\ build 20210215
Everything is moved in  C:/tools/vForth to avoid future collisions with C:/forth.
Again, introducing example game "Chomp" in blocks 600-670. It's a PacMan style.
Once AUTOEXEC completes its LOAD, give 600 LOAD, then GAME.
Cursor keys (or Cursor Joystick maybe)
It's a work-in-progress though.


\ build 20210328
Using Visual Studio Code with some "Next extension", I've ported the whole source
code into a new project that produce the very same output as before.
This opens the way to change the Forth's core in a more effective way.


\ build 20210407
minor fix and docs.


\ build 20210416
Introducing NEEDS definition and the corresponding inc/ including directory.
( Reading source file via OPEN# stream is now deemed obsolete and deprecated )


\ build 20210425
Bugfix on NEEDS and INCLUDE definitions.
Bugfix on PITCH-BEND (Screen# 52) credits: Derek Bolli).
First experiment on TRACE definitions (Screen# 260)


\ build 20210430
Improved NEEDS to cope with invalid "WinDOS Filename Characters".
introducing (MAP) to help substitute such invalid characters.
Substituting every SWAP DROP sequence by equivalent NIP definition.
VALUE, TO, >FAR and <FAR definition removed from core and available via NEEDS


\ build 20210509
Now unsigned multiplication UM* uses native Z80N opcode "mul".
Now HEAP uses pages $20-$27 instead of $40-47. Anyway this is an easy change.
Improved F_GETLINE and F_INCLUDE
Recompilation of the whole system is now possible simply via  10 LOAD
Added LAYER 2 Color-Picker in Screen # 520 onward.


\ build 20210529
Latest brush hits on F_GETLINE and F_INCLUDE.
Color-Picker in Screen # 520 onward now returns the chosen byte.


\ build 20210606
In addition to  inc/  now NEEDS searches  lib/  too.
  inc/ should hold single word definitions.
  lib/ should keep large library files to be included with the same semantic.

In this picture, I moved from   inc/   to   lib/   the following files:
    needs.f
    edit.f
    see.f
    locate.f
    bsearch.f
    heap.f
    assembler.f
    dummy.f

Introducing a mixed scaling-operator  M*/  as described in https://specnext.dev/blog/2021/06/05/programming-the-80s-way-3/  
To be more ANS compliant, I renamed some words:
 R to R@ (but I left both in dictionary, for now),
 MINUS to NEGATE and DMINUS to DNEGATE.


\ build 20210627
Fixed some bugs in  NEEDS. Introducing  BOUNDS used by TYPE.
Improved VALUE TO and +TO.
First re-introduction of Floatin-Point Option.
Testing for a "standard" POSTPONE...


\ build 20210708
Introducing  IM 2  Interrupt: See Screens# 60-69 for an example.
IM2 Vector Table is placed at $6200-6300 and Interrupt Routine will be at $6363 where is room for an unconditional JUMP to the "Forth Interrupt Handler": this is a word that can be defined to be run during an Interrput allowing some background program-execution, paying attention to not screw the system...


\ build 20210719
Introduced INTERRUPT vocabulary to hold  IM 2  Interrupt Service Routine (ISR)
ISR tested to move a couple of sprite (Screen # 412 and  https://www.youtube.com/watch?v=gRZfHnZ7eDQ )
Fixed character "£" as invalid "NEXTZXOS Filename Character".
Introducing EDITOR vocabulay to collect some EDITOR words.
