# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.8 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20250315
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2025 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     1   // .dot
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  89  0000 ~            Heap_offset     defl    $2000
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  96  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  97  0000 ~            Heap_Ptr        defl    $0002
  98  0000 ~            Heap_offset     defl     0
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000              ORIGIN          equ     $2000                   // for .dot
 105  0000              Heap_Ptr        defl    $0002
 106  0000              Heap_offset     defl     0
 107  0000
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  2000
 115  2000                              if ( -1 == DEBUGGING )
 116  2000 ~                            ds 128                            // for binary comparison
 117  2000                              endif
 118  2000
 119  2000              //  ______________________________________________________________________
 120  2000              //
 121  2000              //  Naming convention for Label vs Forth correspondance
 122  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  2000              //    - Leading "0" is converted into "Z_"
 124  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  2000              //    - Equal sign "=" is converted in EQUAL
 131  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  2000              //    - Exclamation mark "!" is converted in STORE
 135  2000              //    - At-Sign "@" is converted in FETCH
 136  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  2000
 138  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/system.asm
 139  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 F1 32                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 F1 32                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 01 01        SP_Basic:       dw      $0101               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C ED 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 D9 31        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 FB 0C        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6B                           db      107
  66+ E003 20 76 2D 46                  db      " v-Forth 1.8 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 38
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 44 6F 74                  db      " Dot-command - build 2025-03-15 ", $0D  // 33
  67+ E028 2D 63 6F 6D
  67+ E02C 6D 61 6E 64
  67+ E030 20 2D 20 62
  67+ E034 75 69 6C 64
  67+ E038 20 32 30 32
  67+ E03C 35 2D 30 33
  67+ E040 2D 31 35 20
  67+ E044 0D
  68+ E045 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E049 20 4C 69 63
  68+ E04D 65 6E 73 65
  68+ E051 20 7F
  69+ E053 20 31 39 39                  db      " 1990-2025 Matteo Vitturi ", $0D            // 27
  69+ E057 30 2D 32 30
  69+ E05B 32 35 20 4D
  69+ E05F 61 74 74 65
  69+ E063 6F 20 56 69
  69+ E067 74 74 75 72
  69+ E06B 69 20 0D
  70+ E06E                              End_Heap
  70+ E06E             >Heap_Ptr        defl    $ - $E000
  70+ E06E             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E06E             >
 124+ E06E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E06E             >Latest_Definition defl  Heap_Ptr
 124+ E06E             >
 124+ E06E             >                // dummy db directives used to calculate length of namec
 124+ E06E 4C 49 54    >                db      "LIT"
 124+ E071             >len_NFA         defl    $ - temp_NFA
 124+ E071             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E06E             >
 124+ E06E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E06F 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E072             >                org     $-1                 // alter last byte of Name just above to set
 124+ E071 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E072             >
 124+ E072 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E074             >Prev_Ptr        defl    Heap_Ptr
 124+ E074             >
 124+ E074             >mirror_Ptr      defl    $
 124+ E074             >
 124+ E074 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E076             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E076             >
 124+ E076             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E076             >
 124+ E076             >//              ______________________________________________________________________
 124+ E076             >//              Dictionary part
 124+ E076             >
 124+ E076             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 74 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E076             >
 140+ E076             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E076             >Latest_Definition defl  Heap_Ptr
 140+ E076             >
 140+ E076             >                // dummy db directives used to calculate length of namec
 140+ E076 45 58 45 43 >                db      "EXECUTE"
 140+ E07A 55 54 45    >
 140+ E07D             >len_NFA         defl    $ - temp_NFA
 140+ E07D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E076             >
 140+ E076 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E077 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07B 55 54 45    >
 140+ E07E             >                org     $-1                 // alter last byte of Name just above to set
 140+ E07D C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E07E             >
 140+ E07E 6E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E080             >Prev_Ptr        defl    Heap_Ptr
 140+ E080             >
 140+ E080             >mirror_Ptr      defl    $
 140+ E080             >
 140+ E080 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E082             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E082             >
 140+ E082             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E082             >
 140+ E082             >//              ______________________________________________________________________
 140+ E082             >//              Dictionary part
 140+ E082             >
 140+ E082             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 80 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E082             >
 160+ E082             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E082             >Latest_Definition defl  Heap_Ptr
 160+ E082             >
 160+ E082             >                // dummy db directives used to calculate length of namec
 160+ E082 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E086 4F 50 29    >
 160+ E089             >len_NFA         defl    $ - temp_NFA
 160+ E089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E082             >
 160+ E082 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E083 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E087 4F 50 29    >
 160+ E08A             >                org     $-1                 // alter last byte of Name just above to set
 160+ E089 A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08A             >
 160+ E08A 76 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08C             >Prev_Ptr        defl    Heap_Ptr
 160+ E08C             >
 160+ E08C             >mirror_Ptr      defl    $
 160+ E08C             >
 160+ E08C 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E08E             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E08E             >
 160+ E08E             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E08E             >
 160+ E08E             >//              ______________________________________________________________________
 160+ E08E             >//              Dictionary part
 160+ E08E             >
 160+ E08E             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8C 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B D5                           push    de
 164+ 204C D9                           exx
 165+ 204D E1                           pop     hl                  // HL is RP
 166+ 204E D1                           pop     de                  // DE get increment
 167+ 204F 42                           ld      b, d                // bc is increment also
 168+ 2050 4B                           ld      c, e
 169+ 2051
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 0C                        jr      c, Loop_Endif
 196+ 206B D9                               exx                     // restore IP and RP
 197+ 206C              Branch_Ptr:
 198+ 206C 0A                               ld      a, (bc)
 199+ 206D 6F                               ld      l, a
 200+ 206E 03                               inc     bc
 201+ 206F 0A                               ld      a, (bc)
 202+ 2070 67                               ld      h, a
 203+ 2071 0B                               dec     bc
 204+ 2072 09                               add     hl, bc
 205+ 2073 4D                               ld      c, l
 206+ 2074 44                               ld      b, h
 207+ 2075                                  next
 207+ 2075 DD E9       >                jp      (ix)
 208+ 2077              Loop_Endif:
 209+ 2077 13                           inc     de                  // keep    RP+4 (exit from loop)
 210+ 2078 D5                           push    de
 211+ 2079 D9                           exx
 212+ 207A D1                           pop     de
 213+ 207B              End_Loop_Ptr:
 214+ 207B 03                           inc     bc                  // skip branch-style offset
 215+ 207C 03                           inc     bc
 216+ 207D                              next
 216+ 207D DD E9       >                jp      (ix)
 217+ 207F
 218+ 207F              //  ______________________________________________________________________
 219+ 207F              //
 220+ 207F              // (loop)       n --
 221+ 207F              // same as (LOOP) but index is incremented by 1
 222+ 207F              // compiled by LOOP.
 223+ 207F                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 223+ 207F             >
 223+ 207F             >Dict_Ptr        defl    $
 223+ 207F             >
 223+ 207F             >//              ______________________________________________________________________
 223+ 207F             >//              Heap part
 223+ 207F             >
 223+ 207F             >
 223+ 207F             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E08E             >
 223+ E08E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E08E             >Latest_Definition defl  Heap_Ptr
 223+ E08E             >
 223+ E08E             >                // dummy db directives used to calculate length of namec
 223+ E08E 28 4C 4F 4F >                db      "(LOOP)"
 223+ E092 50 29       >
 223+ E094             >len_NFA         defl    $ - temp_NFA
 223+ E094             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E08E             >
 223+ E08E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E08F 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 223+ E093 50 29       >
 223+ E095             >                org     $-1                 // alter last byte of Name just above to set
 223+ E094 A9          >                db      {b $} | END_BIT     // msb as name end
 223+ E095             >
 223+ E095 82 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E097             >Prev_Ptr        defl    Heap_Ptr
 223+ E097             >
 223+ E097             >mirror_Ptr      defl    $
 223+ E097             >
 223+ E097 81 20       >                dw      Dict_Ptr + 2        // xt
 223+ E099             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E099             >
 223+ E099             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E099             >
 223+ E099             >//              ______________________________________________________________________
 223+ E099             >//              Dictionary part
 223+ E099             >
 223+ E099             >                org     Dict_Ptr
 223+ 207F             >
 223+ 207F 97 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 2081             >
 223+ 2081             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 2081 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 2081 ~           >
 223+ 2081 ~           >
 223+ 2081             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 2081             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 2081             >
 223+ 2081             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 2081 ED 8A 00 01                  push    1
 225+ 2085 18 C4                        jr      Loop_Ptr
 226+ 2087
 227+ 2087              //  ______________________________________________________________________
 228+ 2087              //
 229+ 2087              // branch       --
 230+ 2087              // unconditional branch in colon definition using the following cell as an offset from current IP value
 231+ 2087              // compiled by ELSE, AGAIN and some other immediate words
 232+ 2087
 233+ 2087                              New_Def BRANCH, "BRANCH", is_code, is_normal
 233+ 2087             >
 233+ 2087             >Dict_Ptr        defl    $
 233+ 2087             >
 233+ 2087             >//              ______________________________________________________________________
 233+ 2087             >//              Heap part
 233+ 2087             >
 233+ 2087             >
 233+ 2087             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E099             >
 233+ E099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E099             >Latest_Definition defl  Heap_Ptr
 233+ E099             >
 233+ E099             >                // dummy db directives used to calculate length of namec
 233+ E099 42 52 41 4E >                db      "BRANCH"
 233+ E09D 43 48       >
 233+ E09F             >len_NFA         defl    $ - temp_NFA
 233+ E09F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E099             >
 233+ E099 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E09A 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 233+ E09E 43 48       >
 233+ E0A0             >                org     $-1                 // alter last byte of Name just above to set
 233+ E09F C8          >                db      {b $} | END_BIT     // msb as name end
 233+ E0A0             >
 233+ E0A0 8E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E0A2             >Prev_Ptr        defl    Heap_Ptr
 233+ E0A2             >
 233+ E0A2             >mirror_Ptr      defl    $
 233+ E0A2             >
 233+ E0A2 89 20       >                dw      Dict_Ptr + 2        // xt
 233+ E0A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E0A4             >
 233+ E0A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E0A4             >
 233+ E0A4             >//              ______________________________________________________________________
 233+ E0A4             >//              Dictionary part
 233+ E0A4             >
 233+ E0A4             >                org     Dict_Ptr
 233+ 2087             >
 233+ 2087 A2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 2089             >
 233+ 2089             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 2089 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 2089 ~           >
 233+ 2089 ~           >
 233+ 2089             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 2089             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 2089             >
 233+ 2089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 2089 18 E1                        jr Branch_Ptr
 235+ 208B
 236+ 208B
 237+ 208B              //  ______________________________________________________________________
 238+ 208B              //
 239+ 208B              // 0branch      f --
 240+ 208B              // conditional branch if the top-of-stack is ZERO or FALSE.
 241+ 208B              // compiled by IF, UNTIL and some other immediate words
 242+ 208B
 243+ 208B                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 243+ 208B             >
 243+ 208B             >Dict_Ptr        defl    $
 243+ 208B             >
 243+ 208B             >//              ______________________________________________________________________
 243+ 208B             >//              Heap part
 243+ 208B             >
 243+ 208B             >
 243+ 208B             >                org     (Heap_Ptr & $1FFF) + $E000
 243+ E0A4             >
 243+ E0A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ E0A4             >Latest_Definition defl  Heap_Ptr
 243+ E0A4             >
 243+ E0A4             >                // dummy db directives used to calculate length of namec
 243+ E0A4 30 42 52 41 >                db      "0BRANCH"
 243+ E0A8 4E 43 48    >
 243+ E0AB             >len_NFA         defl    $ - temp_NFA
 243+ E0AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ E0A4             >
 243+ E0A4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ E0A5 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 243+ E0A9 4E 43 48    >
 243+ E0AC             >                org     $-1                 // alter last byte of Name just above to set
 243+ E0AB C8          >                db      {b $} | END_BIT     // msb as name end
 243+ E0AC             >
 243+ E0AC 99 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243+ E0AE             >Prev_Ptr        defl    Heap_Ptr
 243+ E0AE             >
 243+ E0AE             >mirror_Ptr      defl    $
 243+ E0AE             >
 243+ E0AE 8D 20       >                dw      Dict_Ptr + 2        // xt
 243+ E0B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 243+ E0B0             >
 243+ E0B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 243+ E0B0             >
 243+ E0B0             >//              ______________________________________________________________________
 243+ E0B0             >//              Dictionary part
 243+ E0B0             >
 243+ E0B0             >                org     Dict_Ptr
 243+ 208B             >
 243+ 208B AE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 243+ 208D             >
 243+ 208D             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 208D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243+ 208D ~           >
 243+ 208D ~           >
 243+ 208D             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 208D             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 208D             >
 243+ 208D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 208D              ZBranch_Ptr:
 245+ 208D E1                           pop     hl
 246+ 208E 7D                           ld      a, l
 247+ 208F B4                           or      h
 248+ 2090 28 DA                        jr      z, Branch_Ptr
 249+ 2092 18 E7                        jr      End_Loop_Ptr
 250+ 2094              //              inc     bc                  // skip branch-style offseet
 251+ 2094              //              inc     bc
 252+ 2094              //              next
 253+ 2094
 254+ 2094              //  ______________________________________________________________________
 255+ 2094              //
 256+ 2094              // (leave)        --
 257+ 2094              // compiled by LEAVE
 258+ 2094              // this forces to exit from loop and jump past
 259+ 2094                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 259+ 2094             >
 259+ 2094             >Dict_Ptr        defl    $
 259+ 2094             >
 259+ 2094             >//              ______________________________________________________________________
 259+ 2094             >//              Heap part
 259+ 2094             >
 259+ 2094             >
 259+ 2094             >                org     (Heap_Ptr & $1FFF) + $E000
 259+ E0B0             >
 259+ E0B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 259+ E0B0             >Latest_Definition defl  Heap_Ptr
 259+ E0B0             >
 259+ E0B0             >                // dummy db directives used to calculate length of namec
 259+ E0B0 28 4C 45 41 >                db      "(LEAVE)"
 259+ E0B4 56 45 29    >
 259+ E0B7             >len_NFA         defl    $ - temp_NFA
 259+ E0B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 259+ E0B0             >
 259+ E0B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 259+ E0B1 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 259+ E0B5 56 45 29    >
 259+ E0B8             >                org     $-1                 // alter last byte of Name just above to set
 259+ E0B7 A9          >                db      {b $} | END_BIT     // msb as name end
 259+ E0B8             >
 259+ E0B8 A4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 259+ E0BA             >Prev_Ptr        defl    Heap_Ptr
 259+ E0BA             >
 259+ E0BA             >mirror_Ptr      defl    $
 259+ E0BA             >
 259+ E0BA 96 20       >                dw      Dict_Ptr + 2        // xt
 259+ E0BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 259+ E0BC             >
 259+ E0BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 259+ E0BC             >
 259+ E0BC             >//              ______________________________________________________________________
 259+ E0BC             >//              Dictionary part
 259+ E0BC             >
 259+ E0BC             >                org     Dict_Ptr
 259+ 2094             >
 259+ 2094 BA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 259+ 2096             >
 259+ 2096             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 259+ 2096 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 259+ 2096 ~           >
 259+ 2096 ~           >
 259+ 2096             >                endif           ; ok        // for other definitions it "points" the correct handler
 259+ 2096             >                // Use of "; ok" to suppress "warning[fwdref]"
 259+ 2096             >
 259+ 2096             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 260+ 2096                              // ex      de, hl
 261+ 2096                              // *** ldhlrp
 262+ 2096 3E 04                        ld      a, 4
 263+ 2098 ED 32                        add     de, a
 264+ 209A                              // *** ldrphl
 265+ 209A                              // ex      de, hl
 266+ 209A 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 267+ 209C                              next
 267+ 209C DD E9       >                jp      (ix)
 268+ 209E
 269+ 209E              //  ______________________________________________________________________
 270+ 209E              //
 271+ 209E              // (?do)        lim ind --
 272+ 209E              // compiled by ?DO to make a loop checking for lim == ind first
 273+ 209E              // at run-time (?DO) must be followed by a BRANCH offset
 274+ 209E              // used to skip the loop if lim == ind
 275+ 209E                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 275+ 209E             >
 275+ 209E             >Dict_Ptr        defl    $
 275+ 209E             >
 275+ 209E             >//              ______________________________________________________________________
 275+ 209E             >//              Heap part
 275+ 209E             >
 275+ 209E             >
 275+ 209E             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E0BC             >
 275+ E0BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E0BC             >Latest_Definition defl  Heap_Ptr
 275+ E0BC             >
 275+ E0BC             >                // dummy db directives used to calculate length of namec
 275+ E0BC 28 3F 44 4F >                db      "(?DO)"
 275+ E0C0 29          >
 275+ E0C1             >len_NFA         defl    $ - temp_NFA
 275+ E0C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E0BC             >
 275+ E0BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E0BD 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 275+ E0C1 29          >
 275+ E0C2             >                org     $-1                 // alter last byte of Name just above to set
 275+ E0C1 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ E0C2             >
 275+ E0C2 B0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 275+ E0C4             >Prev_Ptr        defl    Heap_Ptr
 275+ E0C4             >
 275+ E0C4             >mirror_Ptr      defl    $
 275+ E0C4             >
 275+ E0C4 A0 20       >                dw      Dict_Ptr + 2        // xt
 275+ E0C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E0C6             >
 275+ E0C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E0C6             >
 275+ E0C6             >//              ______________________________________________________________________
 275+ E0C6             >//              Dictionary part
 275+ E0C6             >
 275+ E0C6             >                org     Dict_Ptr
 275+ 209E             >
 275+ 209E C4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 275+ 20A0             >
 275+ 20A0             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 20A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 20A0 ~           >
 275+ 20A0 ~           >
 275+ 20A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 20A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 20A0             >
 275+ 20A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 20A0 D9                           exx
 277+ 20A1 D1                            pop     de                  // de has the index
 278+ 20A2 E1                            pop     hl                  // hl has the limit
 279+ 20A3 44                            ld      b, h
 280+ 20A4 4D                            ld      c, l
 281+ 20A5 E5                            push    hl                  // put them back to stack for later
 282+ 20A6 D5                            push    de
 283+ 20A7 A7                            and     a                   // reset carry flag
 284+ 20A8 ED 52                         sbc     hl, de              // compute limit - index
 285+ 20AA D9                           exx
 286+ 20AB 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 287+ 20AD E1                               pop     hl
 288+ 20AE E1                               pop     hl
 289+ 20AF 18 BB                            jr      Branch_Ptr          // perform branch consuming following cell
 290+ 20B1              Do_Ptr:
 291+ 20B1                              // *** ldhlrp                 // prepare RP
 292+ 20B1                              // *** ex      de, hl
 293+ 20B1                              // dec     de
 294+ 20B1                              // dec     de
 295+ 20B1                              // dec     de
 296+ 20B1                              // dec     de
 297+ 20B1 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 298+ 20B5 D5                           push    de                  // pass it to h'l'
 299+ 20B6                              // *** ex      de, hl
 300+ 20B6                              // *** ldrphl
 301+ 20B6 D9                           exx
 302+ 20B7 E1                            pop     hl
 303+ 20B8
 304+ 20B8                               // store index as top RP
 305+ 20B8 D1                            pop     de
 306+ 20B9 73                            ld      (hl), e
 307+ 20BA 23                            inc     hl
 308+ 20BB 72                            ld      (hl), d
 309+ 20BC 23                            inc     hl
 310+ 20BD                               // stores lim as second from top RP
 311+ 20BD D1                            pop     de
 312+ 20BE 73                            ld      (hl), e
 313+ 20BF 23                            inc     hl
 314+ 20C0 72                            ld      (hl), d
 315+ 20C1 D9                           exx
 316+ 20C2 18 B7                        jr      End_Loop_Ptr
 317+ 20C4                              // skip branch-style offseet
 318+ 20C4                          //  inc     bc
 319+ 20C4                          //  inc     bc
 320+ 20C4                          //  next
 321+ 20C4
 322+ 20C4              //  ______________________________________________________________________
 323+ 20C4              //
 324+ 20C4              // (do)        lim ind --
 325+ 20C4              // compiled by DO to make a loop checking for lim == ind first
 326+ 20C4              // this is a simpler version of (?DO)
 327+ 20C4                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20C4             >
 327+ 20C4             >Dict_Ptr        defl    $
 327+ 20C4             >
 327+ 20C4             >//              ______________________________________________________________________
 327+ 20C4             >//              Heap part
 327+ 20C4             >
 327+ 20C4             >
 327+ 20C4             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C6             >
 327+ E0C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C6             >Latest_Definition defl  Heap_Ptr
 327+ E0C6             >
 327+ E0C6             >                // dummy db directives used to calculate length of namec
 327+ E0C6 28 44 4F 29 >                db      "(DO)"
 327+ E0CA             >len_NFA         defl    $ - temp_NFA
 327+ E0CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C6             >
 327+ E0C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0C7 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CB             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CA A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CB             >
 327+ E0CB BC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0CD             >Prev_Ptr        defl    Heap_Ptr
 327+ E0CD             >
 327+ E0CD             >mirror_Ptr      defl    $
 327+ E0CD             >
 327+ E0CD C6 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0CF             >
 327+ E0CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0CF             >
 327+ E0CF             >//              ______________________________________________________________________
 327+ E0CF             >//              Dictionary part
 327+ E0CF             >
 327+ E0CF             >                org     Dict_Ptr
 327+ 20C4             >
 327+ 20C4 CD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20C6             >
 327+ 20C6             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20C6 ~           >
 327+ 20C6 ~           >
 327+ 20C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20C6             >
 327+ 20C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20C6 0B                           dec     bc                  // prepare IP beforehand
 329+ 20C7 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 20C8 18 E7                        jr      Do_Ptr
 331+ 20CA
 332+ 20CA              //  ______________________________________________________________________
 333+ 20CA              //
 334+ 20CA              // i            -- n
 335+ 20CA              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20CA              // the current value of the index-loop
 337+ 20CA                              New_Def I, "I", is_code, is_normal
 337+ 20CA             >
 337+ 20CA             >Dict_Ptr        defl    $
 337+ 20CA             >
 337+ 20CA             >//              ______________________________________________________________________
 337+ 20CA             >//              Heap part
 337+ 20CA             >
 337+ 20CA             >
 337+ 20CA             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0CF             >
 337+ E0CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0CF             >Latest_Definition defl  Heap_Ptr
 337+ E0CF             >
 337+ E0CF             >                // dummy db directives used to calculate length of namec
 337+ E0CF 49          >                db      "I"
 337+ E0D0             >len_NFA         defl    $ - temp_NFA
 337+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0CF             >
 337+ E0CF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D0 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D0 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D1             >
 337+ E0D1 C6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D3             >
 337+ E0D3             >mirror_Ptr      defl    $
 337+ E0D3             >
 337+ E0D3 CC 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D5             >
 337+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D5             >
 337+ E0D5             >//              ______________________________________________________________________
 337+ E0D5             >//              Dictionary part
 337+ E0D5             >
 337+ E0D5             >                org     Dict_Ptr
 337+ 20CA             >
 337+ 20CA D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20CC             >
 337+ 20CC             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20CC ~           >
 337+ 20CC ~           >
 337+ 20CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20CC             >
 337+ 20CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20CC              I_Ptr:
 339+ 20CC 62                           ld      h, d
 340+ 20CD 6B                           ld      l, e
 341+ 20CE                              // *** ldhlrp
 342+ 20CE              I_Ptr_prime:
 343+ 20CE 7E                           ld      a, (hl)
 344+ 20CF 23                           inc     hl
 345+ 20D0 66                           ld      h, (hl)
 346+ 20D1 6F                           ld      l, a
 347+ 20D2 E5                           push    hl
 348+ 20D3                              next
 348+ 20D3 DD E9       >                jp      (ix)
 349+ 20D5
 350+ 20D5
 351+ 20D5              //  ______________________________________________________________________
 352+ 20D5              //
 353+ 20D5              // i'            -- n
 354+ 20D5              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20D5              // the limit of the index-loop
 356+ 20D5
 357+ 20D5                              New_Def II, "I'", is_code, is_normal
 357+ 20D5             >
 357+ 20D5             >Dict_Ptr        defl    $
 357+ 20D5             >
 357+ 20D5             >//              ______________________________________________________________________
 357+ 20D5             >//              Heap part
 357+ 20D5             >
 357+ 20D5             >
 357+ 20D5             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D5             >
 357+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D5             >Latest_Definition defl  Heap_Ptr
 357+ E0D5             >
 357+ E0D5             >                // dummy db directives used to calculate length of namec
 357+ E0D5 49 27       >                db      "I'"
 357+ E0D7             >len_NFA         defl    $ - temp_NFA
 357+ E0D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D5             >
 357+ E0D5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D6 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0D8             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0D7 A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0D8             >
 357+ E0D8 CF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DA             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DA             >
 357+ E0DA             >mirror_Ptr      defl    $
 357+ E0DA             >
 357+ E0DA D7 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DC             >
 357+ E0DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DC             >
 357+ E0DC             >//              ______________________________________________________________________
 357+ E0DC             >//              Dictionary part
 357+ E0DC             >
 357+ E0DC             >                org     Dict_Ptr
 357+ 20D5             >
 357+ 20D5 DA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20D7             >
 357+ 20D7             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20D7 ~           >
 357+ 20D7 ~           >
 357+ 20D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20D7             >
 357+ 20D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20D7 62                           ld      h, d
 359+ 20D8 6B                           ld      l, e
 360+ 20D9                              // *** ldhlrp
 361+ 20D9 23                           inc     hl
 362+ 20DA 23                           inc     hl
 363+ 20DB 18 F1                        jr      I_Ptr_prime
 364+ 20DD
 365+ 20DD
 366+ 20DD              //  ______________________________________________________________________
 367+ 20DD              //
 368+ 20DD              // digit        c n -- u tf  |  ff
 369+ 20DD              // convert a character c using base n
 370+ 20DD              // returns a unsigned number and a true flag
 371+ 20DD              // or just a false flag if the conversion fails
 372+ 20DD                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20DD             >
 372+ 20DD             >Dict_Ptr        defl    $
 372+ 20DD             >
 372+ 20DD             >//              ______________________________________________________________________
 372+ 20DD             >//              Heap part
 372+ 20DD             >
 372+ 20DD             >
 372+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DC             >
 372+ E0DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DC             >Latest_Definition defl  Heap_Ptr
 372+ E0DC             >
 372+ E0DC             >                // dummy db directives used to calculate length of namec
 372+ E0DC 44 49 47 49 >                db      "DIGIT"
 372+ E0E0 54          >
 372+ E0E1             >len_NFA         defl    $ - temp_NFA
 372+ E0E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DC             >
 372+ E0DC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0DD 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E1 54          >
 372+ E0E2             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E1 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E2             >
 372+ E0E2 D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E4             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E4             >
 372+ E0E4             >mirror_Ptr      defl    $
 372+ E0E4             >
 372+ E0E4 DF 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E6             >
 372+ E0E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E6             >
 372+ E0E6             >//              ______________________________________________________________________
 372+ E0E6             >//              Dictionary part
 372+ E0E6             >
 372+ E0E6             >                org     Dict_Ptr
 372+ 20DD             >
 372+ 20DD E4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20DF             >
 372+ 20DF             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20DF ~           >
 372+ 20DF ~           >
 372+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20DF             >
 372+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20DF D9                           exx
 374+ 20E0 E1                           pop     hl                  // l has the base
 375+ 20E1 D1                           pop     de                  // e has the digit
 376+ 20E2 7B                           ld      a, e
 377+ 20E3 FE 60                        cp      $60                 // check if lowercase
 378+ 20E5 38 02                        jr      c, Digit_Uppercase
 379+ 20E7 D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20E9              Digit_Uppercase:
 381+ 20E9 D6 30                        sub     $30
 382+ 20EB 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20ED FE 0A                            cp      $0A
 384+ 20EF 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F1 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20F3 FE 0A                                cp      $0A
 387+ 20F5 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20F7
 389+ 20F7              Digit_Decimal:
 390+ 20F7                              // compare digit
 391+ 20F7 BD                           cp      l                   // compare with base
 392+ 20F8 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 20FA 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 20FB                              //  ld      hl, -1
 395+ 20FB ED 62                            sbc     hl, hl
 396+ 20FD D5                               push    de
 397+ 20FE E5                               push    hl
 398+ 20FF D9                               exx
 399+ 2100                                  next
 399+ 2100 DD E9       >                jp      (ix)
 400+ 2102              Digit_Fail:
 401+ 2102 21 00 00                     ld      hl, 0
 402+ 2105 E5                           push    hl
 403+ 2106 D9                           exx
 404+ 2107                              next
 404+ 2107 DD E9       >                jp      (ix)
 405+ 2109
 406+ 2109              //  ______________________________________________________________________
 407+ 2109              //
 408+ 2109              //  parametric uppercase routine
 409+ 2109              //  depending on the following op-code the routine can be by-passed
 410+ 2109              //  changing the behaviour of some callers.
 411+ 2109              //  If it is "ret" then the system is Case-Sensitive
 412+ 2109              //  If it is "Nop" then the system is Case-Insensitive
 413+ 2109              //  Only A register is touched.
 414+ 2109 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 210A              Case_Upper:
 416+ 210A FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 210C D8                           ret     c                   // no change if A < "a"
 418+ 210D FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 210F D0                           ret     nc                  // no change if A > "z"
 420+ 2110 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 2112 C9                           ret
 422+ 2113
 423+ 2113              //  ______________________________________________________________________
 424+ 2113              //
 425+ 2113              //  caseon      --
 426+ 2113              // set system case-sensitivity on
 427+ 2113              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 2113                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 2113             >
 428+ 2113             >Dict_Ptr        defl    $
 428+ 2113             >
 428+ 2113             >//              ______________________________________________________________________
 428+ 2113             >//              Heap part
 428+ 2113             >
 428+ 2113             >
 428+ 2113             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0E6             >
 428+ E0E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0E6             >Latest_Definition defl  Heap_Ptr
 428+ E0E6             >
 428+ E0E6             >                // dummy db directives used to calculate length of namec
 428+ E0E6 43 41 53 45 >                db      "CASEON"
 428+ E0EA 4F 4E       >
 428+ E0EC             >len_NFA         defl    $ - temp_NFA
 428+ E0EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0E6             >
 428+ E0E6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0E7 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EB 4F 4E       >
 428+ E0ED             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0EC CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0ED             >
 428+ E0ED DC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0EF             >Prev_Ptr        defl    Heap_Ptr
 428+ E0EF             >
 428+ E0EF             >mirror_Ptr      defl    $
 428+ E0EF             >
 428+ E0EF 15 21       >                dw      Dict_Ptr + 2        // xt
 428+ E0F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F1             >
 428+ E0F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F1             >
 428+ E0F1             >//              ______________________________________________________________________
 428+ E0F1             >//              Dictionary part
 428+ E0F1             >
 428+ E0F1             >                org     Dict_Ptr
 428+ 2113             >
 428+ 2113 EF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 2115             >
 428+ 2115             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 2115 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 2115 ~           >
 428+ 2115 ~           >
 428+ 2115             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 2115             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 2115             >
 428+ 2115             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 2115 3E C9                        ld      a, $C9              // "ret"
 430+ 2117 32 09 21                     ld      (Case_Sensitive), a
 431+ 211A                              next
 431+ 211A DD E9       >                jp      (ix)
 432+ 211C
 433+ 211C              //  ______________________________________________________________________
 434+ 211C              //
 435+ 211C              //  caseoff     --
 436+ 211C              // set system case-sensitivity on
 437+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 211C                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 211C             >
 438+ 211C             >Dict_Ptr        defl    $
 438+ 211C             >
 438+ 211C             >//              ______________________________________________________________________
 438+ 211C             >//              Heap part
 438+ 211C             >
 438+ 211C             >
 438+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F1             >
 438+ E0F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F1             >Latest_Definition defl  Heap_Ptr
 438+ E0F1             >
 438+ E0F1             >                // dummy db directives used to calculate length of namec
 438+ E0F1 43 41 53 45 >                db      "CASEOFF"
 438+ E0F5 4F 46 46    >
 438+ E0F8             >len_NFA         defl    $ - temp_NFA
 438+ E0F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F1             >
 438+ E0F1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F2 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0F6 4F 46 46    >
 438+ E0F9             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0F8 C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0F9             >
 438+ E0F9 E6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FB             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FB             >
 438+ E0FB             >mirror_Ptr      defl    $
 438+ E0FB             >
 438+ E0FB 1E 21       >                dw      Dict_Ptr + 2        // xt
 438+ E0FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E0FD             >
 438+ E0FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E0FD             >
 438+ E0FD             >//              ______________________________________________________________________
 438+ E0FD             >//              Dictionary part
 438+ E0FD             >
 438+ E0FD             >                org     Dict_Ptr
 438+ 211C             >
 438+ 211C FB 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 211E             >
 438+ 211E             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 211E ~           >
 438+ 211E ~           >
 438+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 211E             >
 438+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 211E 3E 00                        ld      a, $00              // "nop"
 440+ 2120 32 09 21                     ld      (Case_Sensitive), a
 441+ 2123                              next
 441+ 2123 DD E9       >                jp      (ix)
 442+ 2125
 443+ 2125              //  ______________________________________________________________________
 444+ 2125              //
 445+ 2125              //  upper       c1 -- c1 | c2
 446+ 2125              // character on top of stack is forced to Uppercase.
 447+ 2125                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 2125             >
 447+ 2125             >Dict_Ptr        defl    $
 447+ 2125             >
 447+ 2125             >//              ______________________________________________________________________
 447+ 2125             >//              Heap part
 447+ 2125             >
 447+ 2125             >
 447+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E0FD             >
 447+ E0FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E0FD             >Latest_Definition defl  Heap_Ptr
 447+ E0FD             >
 447+ E0FD             >                // dummy db directives used to calculate length of namec
 447+ E0FD 55 50 50 45 >                db      "UPPER"
 447+ E101 52          >
 447+ E102             >len_NFA         defl    $ - temp_NFA
 447+ E102             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E0FD             >
 447+ E0FD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E0FE 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E102 52          >
 447+ E103             >                org     $-1                 // alter last byte of Name just above to set
 447+ E102 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E103             >
 447+ E103 F1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E105             >Prev_Ptr        defl    Heap_Ptr
 447+ E105             >
 447+ E105             >mirror_Ptr      defl    $
 447+ E105             >
 447+ E105 27 21       >                dw      Dict_Ptr + 2        // xt
 447+ E107             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E107             >
 447+ E107             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E107             >
 447+ E107             >//              ______________________________________________________________________
 447+ E107             >//              Dictionary part
 447+ E107             >
 447+ E107             >                org     Dict_Ptr
 447+ 2125             >
 447+ 2125 05 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 2127             >
 447+ 2127             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 2127 ~           >
 447+ 2127 ~           >
 447+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 2127             >
 447+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 2127 E1                           pop     hl
 449+ 2128 7D                           ld      a, l
 450+ 2129 CD 0A 21                     call    Case_Upper
 451+ 212C 6F                           ld      l, a
 452+ 212D
 453+ 212D                              psh1
 453+ 212D E5          >                push    hl
 453+ 212E DD E9       >                jp      (ix)
 454+ 2130
 455+ 2130              //  ______________________________________________________________________
 456+ 2130
 457+ 2130              // This routine must be called with alternate registers active
 458+ 2130              // input: None
 459+ 2130              // Output: A = 8k-page number currently fitted at MMU7
 460+ 2130              MMU7_read:
 461+ 2130 3E 57                        ld      a, 87
 462+ 2132              NEXTREG_read:
 463+ 2132 01 3B 24                     ld      bc, $243B
 464+ 2135 ED 79                        out     (c), a
 465+ 2137 04                           inc     b
 466+ 2138 ED 78                        in      a, (c)
 467+ 213A C9                           ret
 468+ 213B
 469+ 213B              //  ______________________________________________________________________
 470+ 213B
 471+ 213B              // given an HP-pointer in input, turn it into page + offset
 472+ 213B              // Input: HL = hp-pointer
 473+ 213B              // Output: A = page,  HL = offset
 474+ 213B              TO_FAR_rout:
 475+ 213B 7C                           ld      a, h
 476+ 213C 08                           ex      af, af
 477+ 213D 7C                           ld      a, h
 478+ 213E F6 E0                        or      $E0
 479+ 2140 67                           ld      h, a
 480+ 2141 08                           ex      af, af
 481+ 2142 07                           rlca
 482+ 2143 07                           rlca
 483+ 2144 07                           rlca
 484+ 2145 E6 07                        and     $07
 485+ 2147 C6 20                        add     $20
 486+ 2149 C9                           ret
 487+ 214A
 488+ 214A
 489+ 214A              //  ______________________________________________________________________
 490+ 214A              //
 491+ 214A              // (find)       addr voc -- 0 | cfa b 1
 492+ 214A              // vocabulary search,
 493+ 214A              // - voc is starting word's NFA
 494+ 214A              // - addr is the string to be searched for
 495+ 214A              // On success, it returns the CFA of found word, the first NFA byte
 496+ 214A              // (which contains length and some flags) and a true flag.
 497+ 214A              // On fail, a false flag  (no more: leaves addr unchanged)
 498+ 214A                              New_Def C_FIND, "(FIND)", is_code, is_normal
 498+ 214A             >
 498+ 214A             >Dict_Ptr        defl    $
 498+ 214A             >
 498+ 214A             >//              ______________________________________________________________________
 498+ 214A             >//              Heap part
 498+ 214A             >
 498+ 214A             >
 498+ 214A             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E107             >
 498+ E107             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E107             >Latest_Definition defl  Heap_Ptr
 498+ E107             >
 498+ E107             >                // dummy db directives used to calculate length of namec
 498+ E107 28 46 49 4E >                db      "(FIND)"
 498+ E10B 44 29       >
 498+ E10D             >len_NFA         defl    $ - temp_NFA
 498+ E10D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E107             >
 498+ E107 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E108 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 498+ E10C 44 29       >
 498+ E10E             >                org     $-1                 // alter last byte of Name just above to set
 498+ E10D A9          >                db      {b $} | END_BIT     // msb as name end
 498+ E10E             >
 498+ E10E FD 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E110             >Prev_Ptr        defl    Heap_Ptr
 498+ E110             >
 498+ E110             >mirror_Ptr      defl    $
 498+ E110             >
 498+ E110 4C 21       >                dw      Dict_Ptr + 2        // xt
 498+ E112             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E112             >
 498+ E112             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E112             >
 498+ E112             >//              ______________________________________________________________________
 498+ E112             >//              Dictionary part
 498+ E112             >
 498+ E112             >                org     Dict_Ptr
 498+ 214A             >
 498+ 214A 10 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 214C             >
 498+ 214C             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 214C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 498+ 214C ~           >
 498+ 214C ~           >
 498+ 214C             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 214C             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 214C             >
 498+ 214C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 214C D9                           exx
 500+ 214D CD 30 21                     call    MMU7_read
 501+ 2150 D9                           exx
 502+ 2151 6F                           ld      l, a
 503+ 2152 D9                           exx
 504+ 2153
 505+ 2153 D1                           pop     de                      // de has dictionary pointer
 506+ 2154              Find_VocabularyLoop:
 507+ 2154 7A                               ld      a, d
 508+ 2155 D6 60                            sub     $60
 509+ 2157 30 08                            jr      nc, Find_far_endif
 510+ 2159 EB                                   ex      de, hl
 511+ 215A CD 3B 21                             call    TO_FAR_rout
 512+ 215D EB                                   ex      de, hl
 513+ 215E ED 92 57                             nextreg 87, a
 514+ 2161              Find_far_endif:
 515+ 2161 E1                               pop     hl                  // string pointer to search for
 516+ 2162 E5                               push    hl                  // keep it on stack too for the end.
 517+ 2163 1A                               ld      a, (de)             // save NFA length byte
 518+ 2164 08                               ex      af,af'              // for later use (!)
 519+ 2165 1A                               ld      a, (de)             // reload NFA length byte
 520+ 2166 AE                               xor     (hl)                // check if same length
 521+ 2167 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 522+ 2169                                  // word and text haven't the same length, skip to next vocabulary entry
 523+ 2169 20 33                            jr      nz, Find_DifferentLenght
 524+ 216B
 525+ 216B              Find_ThisWord:      // begin loop
 526+ 216B 23                                   inc     hl
 527+ 216C 13                                   inc     de
 528+ 216D 1A                                   ld      a, (de)
 529+ 216E                                      // case insensitive option - begin
 530+ 216E                                      // push    bc
 531+ 216E E6 80                                and     $80                 // split A in msb and the rest
 532+ 2170 47                                   ld      b, a
 533+ 2171 1A                                   ld      a, (de)
 534+ 2172 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 535+ 2174 CD 09 21                             call    Case_Sensitive      // uppercase routine
 536+ 2177 4F                                   ld      c, a
 537+ 2178 7E                                   ld      a, (hl)
 538+ 2179 CD 09 21                             call    Case_Sensitive      // uppercase routine
 539+ 217C A9                                   xor     c
 540+ 217D A8                                   xor     b
 541+ 217E                                      // pop     bc
 542+ 217E                                      // case insensitive option - end
 543+ 217E 87                                   add     a                   // ignore msb during compare
 544+ 217F 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 545+ 2181
 546+ 2181                                  // loop back until last byte msb is found set
 547+ 2181                                  // that bit marks the ending char of this word
 548+ 2181 30 E8                            jr      nc, Find_ThisWord
 549+ 2183
 550+ 2183                                  // match found !
 551+ 2183 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 552+ 2186 19                               add     hl, de
 553+ 2187
 554+ 2187 5E                                       ld      e, (hl)
 555+ 2188 23                                       inc     hl
 556+ 2189 56                                       ld      d, (hl)
 557+ 218A EB                                       ex      de, hl
 558+ 218B              //Non_MMU7:
 559+ 218B E3                               ex      (sp), hl            // CFA on stack and drop addr
 560+ 218C 08                               ex      af, af'             // retrieve NFA byte (!)
 561+ 218D 5F                               ld      e, a
 562+ 218E 16 00                            ld      d, 0
 563+ 2190 21 FF FF                         ld      hl, -1
 564+ 2193 D5                               push    de
 565+ 2194 E5                               push    hl
 566+ 2195 D9                               exx
 567+ 2196 7D                               ld      a, l
 568+ 2197 ED 92 57                         nextreg 87, a
 569+ 219A                                  next
 569+ 219A DD E9       >                jp      (ix)
 570+ 219C
 571+ 219C              Find_DidntMatch: // didn't match (*)
 572+ 219C 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 573+ 219E
 574+ 219E              Find_DifferentLenght:
 575+ 219E                                  // consume chars until the end of the word
 576+ 219E                                  // that is last byte msb is found set
 577+ 219E 13                                   inc     de
 578+ 219F 1A                                   ld      a, (de)
 579+ 21A0 87                                   add     a, a
 580+ 21A1 30 FB                            jr      nc, Find_DifferentLenght
 581+ 21A3
 582+ 21A3              Find_WordEnd:   // word-end  found (**)
 583+ 21A3                                  // take LFA and use it
 584+ 21A3 13                               inc     de
 585+ 21A4 EB                               ex      de, hl
 586+ 21A5 5E                               ld      e, (hl)
 587+ 21A6 23                               inc     hl
 588+ 21A7 56                               ld      d, (hl)
 589+ 21A8 7A                               ld      a, d
 590+ 21A9 B3                               or      e
 591+ 21AA
 592+ 21AA                              // loop until end of vocabulary
 593+ 21AA 20 A8                        jr      nz, Find_VocabularyLoop
 594+ 21AC
 595+ 21AC E1                           pop     hl              // without this, leaves addr unchanged
 596+ 21AD 21 00 00                     ld      hl, 0
 597+ 21B0 E5                           push    hl
 598+ 21B1 D9                           exx
 599+ 21B2 7D                           ld      a, l
 600+ 21B3 ED 92 57                     nextreg 87, a
 601+ 21B6                              next
 601+ 21B6 DD E9       >                jp      (ix)
 602+ 21B8
 603+ 21B8              //  ______________________________________________________________________
 604+ 21B8              //
 605+ 21B8              // enclose      a c -- a  n1 n2 n3
 606+ 21B8              // starting from a, using delimiter c, determines the offsets:
 607+ 21B8              //   n1   the first character non-delimiter
 608+ 21B8              //   n2   the first delimiter after the text
 609+ 21B8              //   n3   the first character non enclosed.
 610+ 21B8              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 611+ 21B8              // an uncoditional delimiter.
 612+ 21B8              // Examples:
 613+ 21B8              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 614+ 21B8              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 615+ 21B8              // iii:	c  c  'nul'          -- 2  3  2
 616+ 21B8                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 616+ 21B8             >
 616+ 21B8             >Dict_Ptr        defl    $
 616+ 21B8             >
 616+ 21B8             >//              ______________________________________________________________________
 616+ 21B8             >//              Heap part
 616+ 21B8             >
 616+ 21B8             >
 616+ 21B8             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E112             >
 616+ E112             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E112             >Latest_Definition defl  Heap_Ptr
 616+ E112             >
 616+ E112             >                // dummy db directives used to calculate length of namec
 616+ E112 45 4E 43 4C >                db      "ENCLOSE"
 616+ E116 4F 53 45    >
 616+ E119             >len_NFA         defl    $ - temp_NFA
 616+ E119             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E112             >
 616+ E112 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E113 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 616+ E117 4F 53 45    >
 616+ E11A             >                org     $-1                 // alter last byte of Name just above to set
 616+ E119 C5          >                db      {b $} | END_BIT     // msb as name end
 616+ E11A             >
 616+ E11A 07 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E11C             >Prev_Ptr        defl    Heap_Ptr
 616+ E11C             >
 616+ E11C             >mirror_Ptr      defl    $
 616+ E11C             >
 616+ E11C BA 21       >                dw      Dict_Ptr + 2        // xt
 616+ E11E             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E11E             >
 616+ E11E             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E11E             >
 616+ E11E             >//              ______________________________________________________________________
 616+ E11E             >//              Dictionary part
 616+ E11E             >
 616+ E11E             >                org     Dict_Ptr
 616+ 21B8             >
 616+ 21B8 1C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 21BA             >
 616+ 21BA             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 21BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 616+ 21BA ~           >
 616+ 21BA ~           >
 616+ 21BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 21BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 21BA             >
 616+ 21BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 21BA D9                           exx
 618+ 21BB D1                           pop     de                  //  e has the character
 619+ 21BC E1                           pop     hl                  // hl has the string address
 620+ 21BD E5                           push    hl
 621+ 21BE 7B                           ld      a, e
 622+ 21BF 11 FF FF                     ld      de, -1              // let's start from -1
 623+ 21C2 2B                           dec     hl
 624+ 21C3              Enclose_NonDelimiter:
 625+ 21C3                              // find first non delimiter
 626+ 21C3 23                               inc     hl
 627+ 21C4 13                               inc     de
 628+ 21C5 BE                               cp      (hl)
 629+ 21C6 28 FB                        jr      z, Enclose_NonDelimiter
 630+ 21C8 D5                           push    de
 631+ 21C9
 632+ 21C9                              // push    bc                  // save Instruction Pointer
 633+ 21C9
 634+ 21C9 4F                           ld      c, a                // save char
 635+ 21CA 7E                           ld      a, (hl)
 636+ 21CB A7                           and     a                   // stop if 0x00
 637+ 21CC 20 05                        jr      nz, Enclose_NextChar
 638+ 21CE                              /// case iii. no more character in string
 639+ 21CE                                  // pop     bc                  // restore Instruction Pointer
 640+ 21CE 13                               inc     de
 641+ 21CF D5                               push    de
 642+ 21D0 1B                               dec     de
 643+ 21D1 18 0F                            jr      Enclose_common_ending
 644+ 21D3                              //  push    de
 645+ 21D3                              //  exx
 646+ 21D3                              //  next
 647+ 21D3              Enclose_NextChar:
 648+ 21D3 79                               ld      a, c
 649+ 21D4 23                               inc     hl
 650+ 21D5 13                               inc     de
 651+ 21D6 BE                               cp      (hl)
 652+ 21D7 20 04                            jr      nz, Enclose_NonSeparator
 653+ 21D9                                      // case i. first non enclosed
 654+ 21D9                                      // pop     bc                  // restore Instruction Pointer
 655+ 21D9 D5                                   push    de
 656+ 21DA 13                                   inc     de
 657+ 21DB 18 05                                jr      Enclose_common_ending
 658+ 21DD                              //      push    de
 659+ 21DD                              //      exx
 660+ 21DD                              //      next
 661+ 21DD              Enclose_NonSeparator:
 662+ 21DD 7E                               ld      a, (hl)
 663+ 21DE A7                               and     a
 664+ 21DF 20 F2                        jr      nz, Enclose_NextChar
 665+ 21E1
 666+ 21E1                              // case ii. separator & terminator
 667+ 21E1                              // pop     bc                  // restore Instruction Pointer
 668+ 21E1 D5                           push    de
 669+ 21E2              Enclose_common_ending:
 670+ 21E2 D5                           push    de
 671+ 21E3 D9                           exx
 672+ 21E4                              next
 672+ 21E4 DD E9       >                jp      (ix)
 673+ 21E6
 674+ 21E6              //  ______________________________________________________________________
 675+ 21E6              //
 676+ 21E6              // (map)        a2 a1 n c1 -- c2
 677+ 21E6              // translate character c1 using mapping string a2 and a2
 678+ 21E6              // if c1 is not present within string a1 then
 679+ 21E6              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 680+ 21E6                              New_Def C_MAP, "(MAP)", is_code, is_normal
 680+ 21E6             >
 680+ 21E6             >Dict_Ptr        defl    $
 680+ 21E6             >
 680+ 21E6             >//              ______________________________________________________________________
 680+ 21E6             >//              Heap part
 680+ 21E6             >
 680+ 21E6             >
 680+ 21E6             >                org     (Heap_Ptr & $1FFF) + $E000
 680+ E11E             >
 680+ E11E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ E11E             >Latest_Definition defl  Heap_Ptr
 680+ E11E             >
 680+ E11E             >                // dummy db directives used to calculate length of namec
 680+ E11E 28 4D 41 50 >                db      "(MAP)"
 680+ E122 29          >
 680+ E123             >len_NFA         defl    $ - temp_NFA
 680+ E123             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ E11E             >
 680+ E11E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ E11F 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 680+ E123 29          >
 680+ E124             >                org     $-1                 // alter last byte of Name just above to set
 680+ E123 A9          >                db      {b $} | END_BIT     // msb as name end
 680+ E124             >
 680+ E124 12 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 680+ E126             >Prev_Ptr        defl    Heap_Ptr
 680+ E126             >
 680+ E126             >mirror_Ptr      defl    $
 680+ E126             >
 680+ E126 E8 21       >                dw      Dict_Ptr + 2        // xt
 680+ E128             >Heap_Ptr        defl    $ - $E000           // save current HP
 680+ E128             >
 680+ E128             >Current_HP      defl  $ - $E000             // used to set HP once!
 680+ E128             >
 680+ E128             >//              ______________________________________________________________________
 680+ E128             >//              Dictionary part
 680+ E128             >
 680+ E128             >                org     Dict_Ptr
 680+ 21E6             >
 680+ 21E6 26 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 680+ 21E8             >
 680+ 21E8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 21E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 680+ 21E8 ~           >
 680+ 21E8 ~           >
 680+ 21E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 21E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 21E8             >
 680+ 21E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 21E8 D9                           exx
 682+ 21E9 E1                           pop     hl
 683+ 21EA 7D                           ld      a, l
 684+ 21EB C1                           pop     bc
 685+ 21EC E1                           pop     hl
 686+ 21ED 50                           ld      d, b
 687+ 21EE 59                           ld      e, c
 688+ 21EF ED B1                        cpir
 689+ 21F1 E1                           pop     hl
 690+ 21F2 20 05                        jr      nz, C_Map_Then
 690+ 21F4
 691+ 21F4 19                               add     hl, de
 692+ 21F5 2B                               dec     hl
 693+ 21F6 ED 42                            sbc     hl, bc
 694+ 21F8 7E                               ld      a, (hl)
 695+ 21F9              C_Map_Then:
 696+ 21F9 6F                           ld      l, a
 697+ 21FA 26 00                        ld      h, 0
 698+ 21FC E5                           push    hl
 699+ 21FD D9                           exx
 700+ 21FE                              next
 700+ 21FE DD E9       >                jp      (ix)
 701+ 2200
 702+ 2200              //  ______________________________________________________________________
 703+ 2200              //
 704+ 2200              // (compare)    a1 a2 n -- b
 705+ 2200              // this word performs a lexicographic compare of n bytes of text at address a1
 706+ 2200              // with n bytes of text at address a2. It returns numeric a value:
 707+ 2200              //  0 : if strings are equal
 708+ 2200              // +1 : if string at a1 greater than string at a2
 709+ 2200              // -1 : if string at a1 less than string at a2
 710+ 2200              // strings can be 256 bytes in length at most.
 711+ 2200                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 711+ 2200             >
 711+ 2200             >Dict_Ptr        defl    $
 711+ 2200             >
 711+ 2200             >//              ______________________________________________________________________
 711+ 2200             >//              Heap part
 711+ 2200             >
 711+ 2200             >
 711+ 2200             >                org     (Heap_Ptr & $1FFF) + $E000
 711+ E128             >
 711+ E128             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ E128             >Latest_Definition defl  Heap_Ptr
 711+ E128             >
 711+ E128             >                // dummy db directives used to calculate length of namec
 711+ E128 28 43 4F 4D >                db      "(COMPARE)"
 711+ E12C 50 41 52 45 >
 711+ E130 29          >
 711+ E131             >len_NFA         defl    $ - temp_NFA
 711+ E131             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ E128             >
 711+ E128 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ E129 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 711+ E12D 50 41 52 45 >
 711+ E131 29          >
 711+ E132             >                org     $-1                 // alter last byte of Name just above to set
 711+ E131 A9          >                db      {b $} | END_BIT     // msb as name end
 711+ E132             >
 711+ E132 1E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 711+ E134             >Prev_Ptr        defl    Heap_Ptr
 711+ E134             >
 711+ E134             >mirror_Ptr      defl    $
 711+ E134             >
 711+ E134 02 22       >                dw      Dict_Ptr + 2        // xt
 711+ E136             >Heap_Ptr        defl    $ - $E000           // save current HP
 711+ E136             >
 711+ E136             >Current_HP      defl  $ - $E000             // used to set HP once!
 711+ E136             >
 711+ E136             >//              ______________________________________________________________________
 711+ E136             >//              Dictionary part
 711+ E136             >
 711+ E136             >                org     Dict_Ptr
 711+ 2200             >
 711+ 2200 34 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 711+ 2202             >
 711+ 2202             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 2202 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 711+ 2202 ~           >
 711+ 2202 ~           >
 711+ 2202             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 2202             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 2202             >
 711+ 2202             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 2202 D9                           exx
 713+ 2203 E1                           pop     hl                  // Number of bytes
 714+ 2204 7D                           ld      a, l
 715+ 2205 E1                           pop     hl                  // hl points string a2
 716+ 2206 D1                           pop     de                  // hl points string a1
 717+ 2207              //              push    bc                  // Instruction pointer on stack
 718+ 2207 47                           ld      b, a
 719+ 2208              C_Compare_Loop:
 720+ 2208 7E                               ld      a, (hl)
 721+ 2209 CD 09 21                         call    Case_Sensitive
 722+ 220C 4F                               ld      c, a
 723+ 220D 1A                               ld      a, (de)
 724+ 220E CD 09 21                         call    Case_Sensitive
 725+ 2211 B9                               cp      c
 726+ 2212 13                               inc     de
 727+ 2213 23                               inc     hl
 728+ 2214 28 0A                            jr      z, C_Compare_Equal
 729+ 2216 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 730+ 2218 21 01 00                                 ld      hl, 1               // a1 gt a2
 731+ 221B 18 08                                jr      C_Compare_common_ending
 732+ 221D                                  //  jr      C_Compare_Then      // Else
 733+ 221D              C_Compare_NotLessThan:
 734+ 221D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 735+ 2220              // C_Compare_Then:                                 // Endif
 736+ 2220              //                      pop     bc              // restore Instruction Pointer
 737+ 2220              //                      jr      C_Compare_common_ending
 738+ 2220                                  //  push    hl
 739+ 2220                                  //  exx
 740+ 2220                                  //  next
 741+ 2220
 742+ 2220              C_Compare_Equal:
 743+ 2220 10 E6                        djnz    C_Compare_Loop
 744+ 2222 21 00 00                     ld      hl, 0               // a1 eq a2
 745+ 2225              //              pop     bc                  // restore Instruction Pointer
 746+ 2225              C_Compare_common_ending:
 747+ 2225 E5                           push    hl
 748+ 2226 D9                           exx
 749+ 2227
 750+ 2227                              next
 750+ 2227 DD E9       >                jp      (ix)
 751+ 2229
 752+ 2229              //  ______________________________________________________________________
 753+ 2229              //
 754+ 2229              // emitc        c --
 755+ 2229              // low level emit, calls ROM routine at #10 to send a character to
 756+ 2229              // the the current channel (see SELECT to change stream-channel)
 757+ 2229                              New_Def EMITC, "EMITC", is_code, is_normal
 757+ 2229             >
 757+ 2229             >Dict_Ptr        defl    $
 757+ 2229             >
 757+ 2229             >//              ______________________________________________________________________
 757+ 2229             >//              Heap part
 757+ 2229             >
 757+ 2229             >
 757+ 2229             >                org     (Heap_Ptr & $1FFF) + $E000
 757+ E136             >
 757+ E136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 757+ E136             >Latest_Definition defl  Heap_Ptr
 757+ E136             >
 757+ E136             >                // dummy db directives used to calculate length of namec
 757+ E136 45 4D 49 54 >                db      "EMITC"
 757+ E13A 43          >
 757+ E13B             >len_NFA         defl    $ - temp_NFA
 757+ E13B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 757+ E136             >
 757+ E136 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 757+ E137 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 757+ E13B 43          >
 757+ E13C             >                org     $-1                 // alter last byte of Name just above to set
 757+ E13B C3          >                db      {b $} | END_BIT     // msb as name end
 757+ E13C             >
 757+ E13C 28 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 757+ E13E             >Prev_Ptr        defl    Heap_Ptr
 757+ E13E             >
 757+ E13E             >mirror_Ptr      defl    $
 757+ E13E             >
 757+ E13E 2B 22       >                dw      Dict_Ptr + 2        // xt
 757+ E140             >Heap_Ptr        defl    $ - $E000           // save current HP
 757+ E140             >
 757+ E140             >Current_HP      defl  $ - $E000             // used to set HP once!
 757+ E140             >
 757+ E140             >//              ______________________________________________________________________
 757+ E140             >//              Dictionary part
 757+ E140             >
 757+ E140             >                org     Dict_Ptr
 757+ 2229             >
 757+ 2229 3E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 757+ 222B             >
 757+ 222B             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 757+ 222B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 757+ 222B ~           >
 757+ 222B ~           >
 757+ 222B             >                endif           ; ok        // for other definitions it "points" the correct handler
 757+ 222B             >                // Use of "; ok" to suppress "warning[fwdref]"
 757+ 222B             >
 757+ 222B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 758+ 222B E1                           pop     hl
 759+ 222C 7D                           ld      a, l
 760+ 222D              Emitc_Ptr:
 761+ 222D C5                           push    bc
 762+ 222E D5                           push    de
 763+ 222F DD E5                        push    ix
 764+ 2231 F3                           di
 765+ 2232 D7                           rst     $10
 766+ 2233 FB                           ei
 767+ 2234 DD E1                        pop     ix
 768+ 2236 D1                           pop     de
 769+ 2237 C1                           pop     bc
 770+ 2238 3E FF                        ld      a, 255            // max possible
 771+ 223A 32 8C 5C                     ld      (SCR_CT), a
 772+ 223D                              next
 772+ 223D DD E9       >                jp      (ix)
 773+ 223F
 774+ 223F              //  ______________________________________________________________________
 775+ 223F              //
 776+ 223F              // cr           --
 777+ 223F              // send a CR via EMITC
 778+ 223F                              New_Def CR, "CR", is_code, is_normal
 778+ 223F             >
 778+ 223F             >Dict_Ptr        defl    $
 778+ 223F             >
 778+ 223F             >//              ______________________________________________________________________
 778+ 223F             >//              Heap part
 778+ 223F             >
 778+ 223F             >
 778+ 223F             >                org     (Heap_Ptr & $1FFF) + $E000
 778+ E140             >
 778+ E140             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ E140             >Latest_Definition defl  Heap_Ptr
 778+ E140             >
 778+ E140             >                // dummy db directives used to calculate length of namec
 778+ E140 43 52       >                db      "CR"
 778+ E142             >len_NFA         defl    $ - temp_NFA
 778+ E142             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ E140             >
 778+ E140 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ E141 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 778+ E143             >                org     $-1                 // alter last byte of Name just above to set
 778+ E142 D2          >                db      {b $} | END_BIT     // msb as name end
 778+ E143             >
 778+ E143 36 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 778+ E145             >Prev_Ptr        defl    Heap_Ptr
 778+ E145             >
 778+ E145             >mirror_Ptr      defl    $
 778+ E145             >
 778+ E145 41 22       >                dw      Dict_Ptr + 2        // xt
 778+ E147             >Heap_Ptr        defl    $ - $E000           // save current HP
 778+ E147             >
 778+ E147             >Current_HP      defl  $ - $E000             // used to set HP once!
 778+ E147             >
 778+ E147             >//              ______________________________________________________________________
 778+ E147             >//              Dictionary part
 778+ E147             >
 778+ E147             >                org     Dict_Ptr
 778+ 223F             >
 778+ 223F 45 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 778+ 2241             >
 778+ 2241             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 2241 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 778+ 2241 ~           >
 778+ 2241 ~           >
 778+ 2241             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 2241             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 2241             >
 778+ 2241             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 2241
 780+ 2241 3E 0D                        ld      a, CR_CHAR
 781+ 2243 18 E8                        jr      Emitc_Ptr
 782+ 2245
 783+ 2245              Emitc_Vec:
 784+ 2245 7E 22                        dw      C_Emit_Printable  // comma
 785+ 2247 85 22                        dw      C_Emit_Bel        // bel
 786+ 2249 7E 22                        dw      C_Emit_Printable  // bs
 787+ 224B 9F 22                        dw      C_Emit_Tab        // tab
 788+ 224D 7E 22                        dw      C_Emit_Printable  // cr
 789+ 224F A3 22                        dw      C_Emit_NL         // lf (unix newline)
 790+ 2251 7E 22                        dw      C_Emit_Printable  // blank
 791+ 2253 7E 22                        dw      C_Emit_Printable  // blank
 792+ 2255
 793+ 2255              Emit_Selector_Start:
 794+ 2255 06                           db      $06                 // comma
 795+ 2256 07                           db      $07                 // bel
 796+ 2257 08                           db      $08                 // bs
 797+ 2258 09                           db      $09                 // tab
 798+ 2259 0D                           db      $0D                 // cr
 799+ 225A 0A                           db      $0A                 // lf (unix newline)
 800+ 225B 20                           db      $20
 801+ 225C              Emit_Selector_End:
 802+ 225C 20                           db      $20
 803+ 225D
 804+ 225D              //  ______________________________________________________________________
 805+ 225D              //
 806+ 225D              // (?emit)      c1 -- c2 | c1
 807+ 225D              // decode a character to be sent via EMIT
 808+ 225D              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 809+ 225D              // the routine should resolve anything and convert the character anyway.
 810+ 225D                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 810+ 225D             >
 810+ 225D             >Dict_Ptr        defl    $
 810+ 225D             >
 810+ 225D             >//              ______________________________________________________________________
 810+ 225D             >//              Heap part
 810+ 225D             >
 810+ 225D             >
 810+ 225D             >                org     (Heap_Ptr & $1FFF) + $E000
 810+ E147             >
 810+ E147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 810+ E147             >Latest_Definition defl  Heap_Ptr
 810+ E147             >
 810+ E147             >                // dummy db directives used to calculate length of namec
 810+ E147 28 3F 45 4D >                db      "(?EMIT)"
 810+ E14B 49 54 29    >
 810+ E14E             >len_NFA         defl    $ - temp_NFA
 810+ E14E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 810+ E147             >
 810+ E147 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 810+ E148 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 810+ E14C 49 54 29    >
 810+ E14F             >                org     $-1                 // alter last byte of Name just above to set
 810+ E14E A9          >                db      {b $} | END_BIT     // msb as name end
 810+ E14F             >
 810+ E14F 40 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 810+ E151             >Prev_Ptr        defl    Heap_Ptr
 810+ E151             >
 810+ E151             >mirror_Ptr      defl    $
 810+ E151             >
 810+ E151 5F 22       >                dw      Dict_Ptr + 2        // xt
 810+ E153             >Heap_Ptr        defl    $ - $E000           // save current HP
 810+ E153             >
 810+ E153             >Current_HP      defl  $ - $E000             // used to set HP once!
 810+ E153             >
 810+ E153             >//              ______________________________________________________________________
 810+ E153             >//              Dictionary part
 810+ E153             >
 810+ E153             >                org     Dict_Ptr
 810+ 225D             >
 810+ 225D 51 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 810+ 225F             >
 810+ 225F             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 810+ 225F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 810+ 225F ~           >
 810+ 225F ~           >
 810+ 225F             >                endif           ; ok        // for other definitions it "points" the correct handler
 810+ 225F             >                // Use of "; ok" to suppress "warning[fwdref]"
 810+ 225F             >
 810+ 225F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 811+ 225F D9                           exx
 812+ 2260 D1                           pop     de
 813+ 2261 7B                           ld      a, e                //  de has c1
 814+ 2262 E6 7F                        and     $7F                 // 7-bit ascii only
 815+ 2264                              // push    bc                  // save Instruction Pointer
 816+ 2264 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 817+ 2267 21 5C 22                     ld      hl, Emit_Selector_End
 818+ 226A ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 819+ 226C 20 0A                        jr      nz, C_Emit_Not_Found
 820+ 226E                                  // Found then decode it
 821+ 226E 21 45 22                         ld      hl, Emitc_Vec
 822+ 2271 09                               add     hl, bc
 823+ 2272 09                               add     hl, bc
 824+ 2273 5E                               ld      e, (hl)
 825+ 2274 23                               inc     hl
 826+ 2275 56                               ld      d, (hl)
 827+ 2276 EB                               ex      de, hl
 828+ 2277                                  // pop     bc                  // restore Instruction Pointer
 829+ 2277 E9                               jp      (hl)                // one of the following labels
 830+ 2278              C_Emit_Not_Found:
 831+ 2278                              // pop     bc                  // restore Instruction Pointer
 832+ 2278 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 833+ 227A 30 02                        jr      nc, C_Emit_Printable
 834+ 227C 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 835+ 227E              C_Emit_Printable:
 836+ 227E 6F                           ld      l, a
 837+ 227F 26 00                        ld      h, 0
 838+ 2281 E5                           push    hl
 839+ 2282 D9                           exx
 840+ 2283                              next
 840+ 2283 DD E9       >                jp      (ix)
 841+ 2285
 842+ 2285              C_Emit_Bel:
 843+ 2285 D9                            exx
 844+ 2286 C5                           push    bc                  // save Instruction Pointer
 845+ 2287 D5                           push    de
 846+ 2288 11 00 01                     ld      de, $0100
 847+ 228B 21 00 02                     ld      hl, $0200
 848+ 228E DD E5                        push    ix                  // save Next Pointer
 849+ 2290                              // call    $03B6               // bleep Standard-ROM routine
 850+ 2290 F3                           di
 851+ 2291 DF                           rst     $18
 852+ 2292 B6 03                        defw    $03B6
 853+ 2294 FB                           ei
 854+ 2295 DD E1                        pop     ix                  // restore Next Pointer
 855+ 2297 D1                           pop     de
 856+ 2298 C1                           pop     bc                  // restore Instruction Pointer
 857+ 2299 21 00 00                     ld      hl, NUL_CHAR
 858+ 229C E5                           push    hl
 859+ 229D                              next
 859+ 229D DD E9       >                jp      (ix)
 860+ 229F
 861+ 229F 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 862+ 22A1 18 DB                        jr      C_Emit_Printable
 863+ 22A3                          //  push    hl
 864+ 22A3                          //  exx
 865+ 22A3                          //  next
 866+ 22A3
 867+ 22A3 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 868+ 22A5 18 D7                        jr      C_Emit_Printable
 869+ 22A7                          //  push    hl
 870+ 22A7                          //  exx
 871+ 22A7                          //  next
 872+ 22A7
 873+ 22A7              //  ______________________________________________________________________
 874+ 22A7
 875+ 22A7              Key_Table:
 876+ 22A7 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 877+ 22A8 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 878+ 22A9 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 879+ 22AA CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 880+ 22AB CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 881+ 22AC C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 882+ 22AD C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 883+ 22AE AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 884+ 22AF C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 885+ 22B0 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 886+ 22B1 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 887+ 22B2              Key_MapTo:
 888+ 22B2 18                           db      $18                 // 10: ^X
 889+ 22B3 03                           db      $03                 //  9: ^C
 890+ 22B4 1A                           db      $1A                 //  8: ^Z
 891+ 22B5 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 892+ 22B6 5D                           db      $5D                 //  6: SYMBOL+U : ]
 893+ 22B7 5B                           db      $5B                 //  5: SYMBOL+Y : [
 894+ 22B8 7D                           db      $7D                 //  4: SYMBOL+G : }
 895+ 22B9 7B                           db      $7B                 //  3: SYMBOL+F : {
 896+ 22BA 5C                           db      $5C                 //  2: SYMBOl+D : //
 897+ 22BB 7C                           db      $7C                 //  1: SYMBOL+S : |
 898+ 22BC 7E                           db      $7E                 //  0: SYMBOL+A : ~
 899+ 22BD
 900+ 22BD              //  ______________________________________________________________________
 901+ 22BD              //
 902+ 22BD              // curs         -- c
 903+ 22BD              // wait for a keypress
 904+ 22BD              // This definition need Standard ROM Interrupt to be served
 905+ 22BD
 906+ 22BD                              New_Def CUR, "CURS", is_code, is_normal
 906+ 22BD             >
 906+ 22BD             >Dict_Ptr        defl    $
 906+ 22BD             >
 906+ 22BD             >//              ______________________________________________________________________
 906+ 22BD             >//              Heap part
 906+ 22BD             >
 906+ 22BD             >
 906+ 22BD             >                org     (Heap_Ptr & $1FFF) + $E000
 906+ E153             >
 906+ E153             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ E153             >Latest_Definition defl  Heap_Ptr
 906+ E153             >
 906+ E153             >                // dummy db directives used to calculate length of namec
 906+ E153 43 55 52 53 >                db      "CURS"
 906+ E157             >len_NFA         defl    $ - temp_NFA
 906+ E157             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ E153             >
 906+ E153 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ E154 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 906+ E158             >                org     $-1                 // alter last byte of Name just above to set
 906+ E157 D3          >                db      {b $} | END_BIT     // msb as name end
 906+ E158             >
 906+ E158 47 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 906+ E15A             >Prev_Ptr        defl    Heap_Ptr
 906+ E15A             >
 906+ E15A             >mirror_Ptr      defl    $
 906+ E15A             >
 906+ E15A BF 22       >                dw      Dict_Ptr + 2        // xt
 906+ E15C             >Heap_Ptr        defl    $ - $E000           // save current HP
 906+ E15C             >
 906+ E15C             >Current_HP      defl  $ - $E000             // used to set HP once!
 906+ E15C             >
 906+ E15C             >//              ______________________________________________________________________
 906+ E15C             >//              Dictionary part
 906+ E15C             >
 906+ E15C             >                org     Dict_Ptr
 906+ 22BD             >
 906+ 22BD 5A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 906+ 22BF             >
 906+ 22BF             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 22BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 906+ 22BF ~           >
 906+ 22BF ~           >
 906+ 22BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 22BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 22BF             >
 906+ 22BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 22BF
 908+ 22BF C5                           push    bc                  // save Instruction Pointer
 909+ 22C0 D5                           push    de                  // save Return Stack Pointer
 910+ 22C1 DD E5                        push    ix
 911+ 22C3 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 912+ 22C7                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 913+ 22C7 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 914+ 22CA FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 915+ 22CE
 916+ 22CE              Cur_Wait:
 917+ 22CE 76                               halt
 918+ 22CF 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 919+ 22D1                              //  call    $1601               // SELECT Standard-ROM Routine
 920+ 22D1 DF                               rst     $18
 921+ 22D2 01 16                            dw      $1601
 922+ 22D4
 923+ 22D4                                  // software-flash: flips face every 320 ms
 924+ 22D4 3E 20                            ld      a, $20              // Timing based
 925+ 22D6 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 926+ 22D9
 927+ 22D9 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 928+ 22DC 20 0C                            jr      nz, Cur_Cursor
 929+ 22DE 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 930+ 22E1 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 931+ 22E5 28 03                                jr      z, Cur_Cursor
 932+ 22E7 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 933+ 22EA              Cur_Cursor:
 934+ 22EA D7                               rst     $10
 935+ 22EB 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 936+ 22ED D7                               rst     $10
 937+ 22EE FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 938+ 22F2 28 DA                        jr      z, Cur_Wait
 939+ 22F4
 940+ 22F4 76                           halt    // this is to sync flashing cursor.
 941+ 22F5
 942+ 22F5 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 943+ 22F7 D7                           rst     $10
 944+ 22F8 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 945+ 22FA D7                           rst     $10
 946+ 22FB
 947+ 22FB ED 7B 2C 20                  ld      sp, (SP_Saved)
 948+ 22FF
 949+ 22FF DD E1                        pop     ix
 950+ 2301 D1                           pop     de                  // Restore Return Stack Pointer
 951+ 2302 C1                           pop     bc                  // Restore Instruction Pointer
 952+ 2303                              next
 952+ 2303 DD E9       >                jp      (ix)
 953+ 2305
 954+ 2305
 955+ 2305              //  ______________________________________________________________________
 956+ 2305              //
 957+ 2305              // key          -- c
 958+ 2305              // This definition need Standard ROM Interrupt to be served
 959+ 2305
 960+ 2305                              New_Def KEY, "KEY", is_code, is_normal
 960+ 2305             >
 960+ 2305             >Dict_Ptr        defl    $
 960+ 2305             >
 960+ 2305             >//              ______________________________________________________________________
 960+ 2305             >//              Heap part
 960+ 2305             >
 960+ 2305             >
 960+ 2305             >                org     (Heap_Ptr & $1FFF) + $E000
 960+ E15C             >
 960+ E15C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ E15C             >Latest_Definition defl  Heap_Ptr
 960+ E15C             >
 960+ E15C             >                // dummy db directives used to calculate length of namec
 960+ E15C 4B 45 59    >                db      "KEY"
 960+ E15F             >len_NFA         defl    $ - temp_NFA
 960+ E15F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ E15C             >
 960+ E15C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ E15D 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 960+ E160             >                org     $-1                 // alter last byte of Name just above to set
 960+ E15F D9          >                db      {b $} | END_BIT     // msb as name end
 960+ E160             >
 960+ E160 53 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 960+ E162             >Prev_Ptr        defl    Heap_Ptr
 960+ E162             >
 960+ E162             >mirror_Ptr      defl    $
 960+ E162             >
 960+ E162 07 23       >                dw      Dict_Ptr + 2        // xt
 960+ E164             >Heap_Ptr        defl    $ - $E000           // save current HP
 960+ E164             >
 960+ E164             >Current_HP      defl  $ - $E000             // used to set HP once!
 960+ E164             >
 960+ E164             >//              ______________________________________________________________________
 960+ E164             >//              Dictionary part
 960+ E164             >
 960+ E164             >                org     Dict_Ptr
 960+ 2305             >
 960+ 2305 62 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 960+ 2307             >
 960+ 2307             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 2307 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 960+ 2307 ~           >
 960+ 2307 ~           >
 960+ 2307             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 2307             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 2307             >
 960+ 2307             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 2307
 962+ 2307 C5                           push    bc                  // Save Instruction Pointer
 963+ 2308
 964+ 2308              Key_Wait:
 965+ 2308 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 966+ 230C 28 FA                        jr      z, Key_Wait
 967+ 230E
 968+ 230E 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 969+ 2311
 970+ 2311                              // decode character from above table
 971+ 2311 21 A7 22                     ld      hl, Key_Table
 972+ 2314 01 0B 00                     ld      bc, $000B
 973+ 2317 ED B1                        cpir
 974+ 2319 20 05                        jr      nz, Key_DontMap
 975+ 231B 21 B2 22                         ld      hl, Key_MapTo
 976+ 231E 09                               add     hl, bc
 977+ 231F 7E                               ld      a, (hl)
 978+ 2320 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 979+ 2322 20 09                        jr      nz, Key_NoCapsLock
 980+ 2324 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 981+ 2327 7E                               ld      a, (hl)
 982+ 2328 EE 08                            xor     $08
 983+ 232A 77                               ld      (hl), a
 984+ 232B 3E 00                            ld      a, NUL_CHAR
 985+ 232D 6F           Key_NoCapsLock: ld      l, a
 986+ 232E 26 00                        ld      h, 0                // Prepare TOS
 987+ 2330
 988+ 2330 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 989+ 2334
 990+ 2334 C1                           pop     bc                  // Restore Instruction Pointer
 991+ 2335
 992+ 2335                              psh1
 992+ 2335 E5          >                push    hl
 992+ 2336 DD E9       >                jp      (ix)
 993+ 2338
 994+ 2338
 995+ 2338              //  ______________________________________________________________________
 996+ 2338              //
 997+ 2338              // click        --
 998+ 2338              // This definition need Standard ROM Interrupt to be served
 999+ 2338              //
1000+ 2338              //              New_Def CLICK, "CLICK", is_code, is_normal
1001+ 2338              //
1002+ 2338              //                push    bc
1003+ 2338              //              ld      a, ($5C48)          // BORDCR system variable
1004+ 2338              //              rra
1005+ 2338              //              rra
1006+ 2338              //              rra
1007+ 2338              //              or      $18                 // quick'n'dirty click
1008+ 2338              //              out     ($fe), a
1009+ 2338              //              ld      b, 0
1010+ 2338              //              djnz    $                   // wait loop
1011+ 2338              //              xor     $18
1012+ 2338              //              out     ($fe), a
1013+ 2338              //                pop     bc
1014+ 2338
1015+ 2338              //              next
1016+ 2338
1017+ 2338              //  ______________________________________________________________________
1018+ 2338              //
1019+ 2338              // key?         -- f
1020+ 2338              // key available
1021+ 2338              //
1022+ 2338              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1023+ 2338              //
1024+ 2338              //              ld      hl, 0000
1025+ 2338              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1026+ 2338              //              jr      z, Key_Q
1027+ 2338              //                  dec     hl
1028+ 2338              // Key_Q:
1029+ 2338              //                psh1
1030+ 2338              //              next
1031+ 2338
1032+ 2338              //  ______________________________________________________________________
1033+ 2338              //
1034+ 2338              // ?terminal    -- FALSE | TRUE
1035+ 2338              // test for BREAK keypress
1036+ 2338                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1036+ 2338             >
1036+ 2338             >Dict_Ptr        defl    $
1036+ 2338             >
1036+ 2338             >//              ______________________________________________________________________
1036+ 2338             >//              Heap part
1036+ 2338             >
1036+ 2338             >
1036+ 2338             >                org     (Heap_Ptr & $1FFF) + $E000
1036+ E164             >
1036+ E164             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ E164             >Latest_Definition defl  Heap_Ptr
1036+ E164             >
1036+ E164             >                // dummy db directives used to calculate length of namec
1036+ E164 3F 54 45 52 >                db      "?TERMINAL"
1036+ E168 4D 49 4E 41 >
1036+ E16C 4C          >
1036+ E16D             >len_NFA         defl    $ - temp_NFA
1036+ E16D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ E164             >
1036+ E164 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ E165 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1036+ E169 4D 49 4E 41 >
1036+ E16D 4C          >
1036+ E16E             >                org     $-1                 // alter last byte of Name just above to set
1036+ E16D CC          >                db      {b $} | END_BIT     // msb as name end
1036+ E16E             >
1036+ E16E 5C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1036+ E170             >Prev_Ptr        defl    Heap_Ptr
1036+ E170             >
1036+ E170             >mirror_Ptr      defl    $
1036+ E170             >
1036+ E170 3A 23       >                dw      Dict_Ptr + 2        // xt
1036+ E172             >Heap_Ptr        defl    $ - $E000           // save current HP
1036+ E172             >
1036+ E172             >Current_HP      defl  $ - $E000             // used to set HP once!
1036+ E172             >
1036+ E172             >//              ______________________________________________________________________
1036+ E172             >//              Dictionary part
1036+ E172             >
1036+ E172             >                org     Dict_Ptr
1036+ 2338             >
1036+ 2338 70 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1036+ 233A             >
1036+ 233A             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 233A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1036+ 233A ~           >
1036+ 233A ~           >
1036+ 233A             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 233A             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 233A             >
1036+ 233A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 233A D9                           exx
1038+ 233B 01 FE 7F                     ld      bc, $7ffe
1039+ 233E ED 50                        in      d, (c)
1040+ 2340 41                           ld      b, c
1041+ 2341 ED 78                        in      a, (c)
1042+ 2343 B2                           or       d
1043+ 2344 1F                           rra
1044+ 2345 3F                           ccf
1045+ 2346 ED 62                        sbc     hl, hl
1046+ 2348 E5                           push    hl
1047+ 2349 D9                           exx
1048+ 234A                              next
1048+ 234A DD E9       >                jp      (ix)
1049+ 234C
1050+ 234C
1051+ 234C              //  ______________________________________________________________________
1052+ 234C              //
1053+ 234C              // inkey        -- c | 0
1054+ 234C              // call ROM inkey$ routine, returns c or "zero".
1055+ 234C              //
1056+ 234C              //              New_Def INKEY, "INKEY", is_code, is_normal
1057+ 234C              //              push    bc
1058+ 234C              //              push    de
1059+ 234C              //              ld      (SP_Saved), sp
1060+ 234C              //              ld      sp, Cold_origin - 5
1061+ 234C              //              ld      sp, TSTACK           // Carefully balanced from startup
1062+ 234C              //              push    ix
1063+ 234C              //              di
1064+ 234C              //              call    $15E6                   // instead of 15E9
1065+ 234C              //              ei
1066+ 234C              //              pop     ix
1067+ 234C              //              ld      sp, (SP_Saved)
1068+ 234C              //              ld      l, a
1069+ 234C              //              ld      h, 0
1070+ 234C              //              pop     de
1071+ 234C              //              pop     bc
1072+ 234C              //              psh1
1073+ 234C
1074+ 234C              //  ______________________________________________________________________
1075+ 234C              //
1076+ 234C              // select      n --
1077+ 234C              // selects the given channel number
1078+ 234C
1079+ 234C                              New_Def SELECT, "SELECT", is_code, is_normal
1079+ 234C             >
1079+ 234C             >Dict_Ptr        defl    $
1079+ 234C             >
1079+ 234C             >//              ______________________________________________________________________
1079+ 234C             >//              Heap part
1079+ 234C             >
1079+ 234C             >
1079+ 234C             >                org     (Heap_Ptr & $1FFF) + $E000
1079+ E172             >
1079+ E172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1079+ E172             >Latest_Definition defl  Heap_Ptr
1079+ E172             >
1079+ E172             >                // dummy db directives used to calculate length of namec
1079+ E172 53 45 4C 45 >                db      "SELECT"
1079+ E176 43 54       >
1079+ E178             >len_NFA         defl    $ - temp_NFA
1079+ E178             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1079+ E172             >
1079+ E172 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1079+ E173 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1079+ E177 43 54       >
1079+ E179             >                org     $-1                 // alter last byte of Name just above to set
1079+ E178 D4          >                db      {b $} | END_BIT     // msb as name end
1079+ E179             >
1079+ E179 64 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1079+ E17B             >Prev_Ptr        defl    Heap_Ptr
1079+ E17B             >
1079+ E17B             >mirror_Ptr      defl    $
1079+ E17B             >
1079+ E17B 4E 23       >                dw      Dict_Ptr + 2        // xt
1079+ E17D             >Heap_Ptr        defl    $ - $E000           // save current HP
1079+ E17D             >
1079+ E17D             >Current_HP      defl  $ - $E000             // used to set HP once!
1079+ E17D             >
1079+ E17D             >//              ______________________________________________________________________
1079+ E17D             >//              Dictionary part
1079+ E17D             >
1079+ E17D             >                org     Dict_Ptr
1079+ 234C             >
1079+ 234C 7B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1079+ 234E             >
1079+ 234E             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1079+ 234E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1079+ 234E ~           >
1079+ 234E ~           >
1079+ 234E             >                endif           ; ok        // for other definitions it "points" the correct handler
1079+ 234E             >                // Use of "; ok" to suppress "warning[fwdref]"
1079+ 234E             >
1079+ 234E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1080+ 234E E1                           pop     hl
1081+ 234F C5                           push    bc
1082+ 2350 D5                           push    de
1083+ 2351 7D                           ld      a, l
1084+ 2352 ED 73 2C 20                  ld      (SP_Saved), sp
1085+ 2356                          //  ld      sp, Cold_origin - 5
1086+ 2356 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1087+ 2359 DD E5                        push    ix
1088+ 235B                          //  call    $1601
1089+ 235B F3                           di
1090+ 235C DF                           rst     $18
1091+ 235D 01 16                        dw      $1601
1092+ 235F FB                           ei
1093+ 2360 DD E1                        pop     ix
1094+ 2362 ED 7B 2C 20                  ld      sp, (SP_Saved)
1095+ 2366 D1                           pop     de
1096+ 2367 C1                           pop     bc
1097+ 2368                              next
1097+ 2368 DD E9       >                jp      (ix)
1098+ 236A
1099+ 236A              //  ______________________________________________________________________
1100+ 236A              //
1101+ 236A              // ZX Spectrum Next - Low Level disk primitives.
1102+ 236A              // this include is "here" for backward compatibility
1103+ 236A
1104+ 236A                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt0.asm
   1++236A              //  ______________________________________________________________________
   2++236A              //
   3++236A              //  next-opt.asm
   4++236A              //
   5++236A              //  ZX Spectrum Next - peculiar definitions
   6++236A              //  ______________________________________________________________________
   7++236A
   8++236A              //  ______________________________________________________________________
   9++236A              //
  10++236A              // f_seek       d u -- f
  11++236A              // Seek to position d in file-handle u.
  12++236A              // Return a false-flag 0 on success, True flag on error
  13++236A                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++236A             >
  13++236A             >Dict_Ptr        defl    $
  13++236A             >
  13++236A             >//              ______________________________________________________________________
  13++236A             >//              Heap part
  13++236A             >
  13++236A             >
  13++236A             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E17D             >
  13++E17D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E17D             >Latest_Definition defl  Heap_Ptr
  13++E17D             >
  13++E17D             >                // dummy db directives used to calculate length of namec
  13++E17D 46 5F 53 45 >                db      "F_SEEK"
  13++E181 45 4B       >
  13++E183             >len_NFA         defl    $ - temp_NFA
  13++E183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E17D             >
  13++E17D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E17E 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E182 45 4B       >
  13++E184             >                org     $-1                 // alter last byte of Name just above to set
  13++E183 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E184             >
  13++E184 72 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E186             >Prev_Ptr        defl    Heap_Ptr
  13++E186             >
  13++E186             >mirror_Ptr      defl    $
  13++E186             >
  13++E186 6C 23       >                dw      Dict_Ptr + 2        // xt
  13++E188             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E188             >
  13++E188             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E188             >
  13++E188             >//              ______________________________________________________________________
  13++E188             >//              Dictionary part
  13++E188             >
  13++E188             >                org     Dict_Ptr
  13++236A             >
  13++236A 86 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++236C             >
  13++236C             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++236C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++236C ~           >
  13++236C ~           >
  13++236C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++236C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++236C             >
  13++236C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++236C D9                            exx
  15++236D E1                            pop     hl                  // file-handle
  16++236E 7D                            ld      a, l
  17++236F C1                            pop     bc                  // bc has high-word of d
  18++2370 D1                            pop     de
  19++2371 D9                           exx
  20++2372 DD E5                        push    ix
  21++2374 D5                           push    de
  22++2375 C5                           push    bc                  // save Instruction Pointer
  23++2376 D9                            exx
  24++2377 21 00 00                      ld      hl, 0 // ix, 0
  25++237A F3                            di
  26++237B CF                            rst     $08
  27++237C 9F                            db      $9F
  28++237D              F_Seek_Exit:
  29++237D FB                           ei
  30++237E C1                           pop     bc                  // restore Instruction Pointer
  31++237F D1                           pop     de
  32++2380 DD E1                        pop     ix
  33++2382 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++2384                              psh1
  34++2384 E5          >                push    hl
  34++2385 DD E9       >                jp      (ix)
  35++2387
  36++2387              //  ______________________________________________________________________
  37++2387              //
  38++2387              // f_close      u -- f
  39++2387              // Close file-handle u.
  40++2387              // Return 0 on success, True flag on error
  41++2387
  42++2387                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++2387             >
  42++2387             >Dict_Ptr        defl    $
  42++2387             >
  42++2387             >//              ______________________________________________________________________
  42++2387             >//              Heap part
  42++2387             >
  42++2387             >
  42++2387             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E188             >
  42++E188             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E188             >Latest_Definition defl  Heap_Ptr
  42++E188             >
  42++E188             >                // dummy db directives used to calculate length of namec
  42++E188 46 5F 43 4C >                db      "F_CLOSE"
  42++E18C 4F 53 45    >
  42++E18F             >len_NFA         defl    $ - temp_NFA
  42++E18F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E188             >
  42++E188 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E189 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E18D 4F 53 45    >
  42++E190             >                org     $-1                 // alter last byte of Name just above to set
  42++E18F C5          >                db      {b $} | END_BIT     // msb as name end
  42++E190             >
  42++E190 7D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E192             >Prev_Ptr        defl    Heap_Ptr
  42++E192             >
  42++E192             >mirror_Ptr      defl    $
  42++E192             >
  42++E192 89 23       >                dw      Dict_Ptr + 2        // xt
  42++E194             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E194             >
  42++E194             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E194             >
  42++E194             >//              ______________________________________________________________________
  42++E194             >//              Dictionary part
  42++E194             >
  42++E194             >                org     Dict_Ptr
  42++2387             >
  42++2387 92 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++2389             >
  42++2389             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++2389 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++2389 ~           >
  42++2389 ~           >
  42++2389             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++2389             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++2389             >
  42++2389             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++2389
  44++2389 E1                           pop     hl
  45++238A 7D                           ld      a, l                // file-handle
  46++238B DD E5                        push    ix
  47++238D D5                           push    de
  48++238E C5                           push    bc                  // Save Instruction pointer
  49++238F F3                           di
  50++2390 CF                           rst     $08
  51++2391 9B                           db      $9B
  52++2392 18 E9                        jr      F_Seek_Exit
  53++2394              //              ei
  54++2394              //              pop     de
  55++2394              //              pop     bc
  56++2394              //              pop     ix
  57++2394              //              sbc     hl, hl
  58++2394              //              psh1
  59++2394
  60++2394              //  ______________________________________________________________________
  61++2394              //
  62++2394              // f_sync      u -- f
  63++2394              // Close file-handle u.
  64++2394              // Return 0 on success, True flag on error
  65++2394
  66++2394                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++2394             >
  66++2394             >Dict_Ptr        defl    $
  66++2394             >
  66++2394             >//              ______________________________________________________________________
  66++2394             >//              Heap part
  66++2394             >
  66++2394             >
  66++2394             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E194             >
  66++E194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E194             >Latest_Definition defl  Heap_Ptr
  66++E194             >
  66++E194             >                // dummy db directives used to calculate length of namec
  66++E194 46 5F 53 59 >                db      "F_SYNC"
  66++E198 4E 43       >
  66++E19A             >len_NFA         defl    $ - temp_NFA
  66++E19A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E194             >
  66++E194 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E195 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E199 4E 43       >
  66++E19B             >                org     $-1                 // alter last byte of Name just above to set
  66++E19A C3          >                db      {b $} | END_BIT     // msb as name end
  66++E19B             >
  66++E19B 88 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E19D             >Prev_Ptr        defl    Heap_Ptr
  66++E19D             >
  66++E19D             >mirror_Ptr      defl    $
  66++E19D             >
  66++E19D 96 23       >                dw      Dict_Ptr + 2        // xt
  66++E19F             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E19F             >
  66++E19F             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E19F             >
  66++E19F             >//              ______________________________________________________________________
  66++E19F             >//              Dictionary part
  66++E19F             >
  66++E19F             >                org     Dict_Ptr
  66++2394             >
  66++2394 9D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++2396             >
  66++2396             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++2396 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++2396 ~           >
  66++2396 ~           >
  66++2396             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++2396             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++2396             >
  66++2396             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++2396 E1                           pop     hl
  68++2397 7D                           ld      a, l                // file-handle
  69++2398 DD E5                        push    ix
  70++239A D5                           push    de
  71++239B C5                           push    bc
  72++239C F3                           di
  73++239D CF                           rst     $08
  74++239E 9C                           db      $9C
  75++239F 18 DC                        jr      F_Seek_Exit
  76++23A1              //              ei
  77++23A1              //              pop     de
  78++23A1              //              pop     bc
  79++23A1              //              pop     ix
  80++23A1              //              sbc     hl, hl
  81++23A1              //              psh1
  82++23A1
  83++23A1              //  ______________________________________________________________________
  84++23A1              //
  85++23A1              // f_fgetpos    u -- d f
  86++23A1              // Seek to position d in file-handle u.
  87++23A1              // Return a false-flag 0 on success, True flag on error
  88++23A1                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++23A1             >
  88++23A1             >Dict_Ptr        defl    $
  88++23A1             >
  88++23A1             >//              ______________________________________________________________________
  88++23A1             >//              Heap part
  88++23A1             >
  88++23A1             >
  88++23A1             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E19F             >
  88++E19F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E19F             >Latest_Definition defl  Heap_Ptr
  88++E19F             >
  88++E19F             >                // dummy db directives used to calculate length of namec
  88++E19F 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A3 45 54 50 4F >
  88++E1A7 53          >
  88++E1A8             >len_NFA         defl    $ - temp_NFA
  88++E1A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E19F             >
  88++E19F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A0 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1A4 45 54 50 4F >
  88++E1A8 53          >
  88++E1A9             >                org     $-1                 // alter last byte of Name just above to set
  88++E1A8 D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1A9             >
  88++E1A9 94 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1AB             >Prev_Ptr        defl    Heap_Ptr
  88++E1AB             >
  88++E1AB             >mirror_Ptr      defl    $
  88++E1AB             >
  88++E1AB A3 23       >                dw      Dict_Ptr + 2        // xt
  88++E1AD             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1AD             >
  88++E1AD             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1AD             >
  88++E1AD             >//              ______________________________________________________________________
  88++E1AD             >//              Dictionary part
  88++E1AD             >
  88++E1AD             >                org     Dict_Ptr
  88++23A1             >
  88++23A1 AB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++23A3             >
  88++23A3             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++23A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++23A3 ~           >
  88++23A3 ~           >
  88++23A3             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++23A3             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++23A3             >
  88++23A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++23A3 E1                            pop     hl
  90++23A4 7D                            ld      a, l                // file-handle
  91++23A5 DD E5                         push    ix
  92++23A7 D5                            push    de
  93++23A8 C5                            push    bc
  94++23A9 F3                            di
  95++23AA CF                            rst     $08
  96++23AB A0                            db      $A0
  97++23AC FB                            ei
  98++23AD D9                           exx
  99++23AE C1                           pop     bc                  // IP
 100++23AF D1                           pop     de                  // Return Stack Pointer
 101++23B0 DD E1                        pop     ix
 102++23B2 D9                            exx
 103++23B3 D5                            push    de
 104++23B4 C5                            push    bc
 105++23B5 ED 62                         sbc     hl, hl
 106++23B7 E5                            push    hl
 107++23B8 D9                           exx
 108++23B9                              next
 108++23B9 DD E9       >                jp      (ix)
 109++23BB
 110++23BB              //  ______________________________________________________________________
 111++23BB              //
 112++23BB              // f_read       a b u -- n f
 113++23BB              // Read b bytes from file-handle u to address a
 114++23BB              // Return the actual number n of bytes read
 115++23BB              // Return 0 on success, True flag on error
 116++23BB                              New_Def F_READ, "F_READ", is_code, is_normal
 116++23BB             >
 116++23BB             >Dict_Ptr        defl    $
 116++23BB             >
 116++23BB             >//              ______________________________________________________________________
 116++23BB             >//              Heap part
 116++23BB             >
 116++23BB             >
 116++23BB             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1AD             >
 116++E1AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1AD             >Latest_Definition defl  Heap_Ptr
 116++E1AD             >
 116++E1AD             >                // dummy db directives used to calculate length of namec
 116++E1AD 46 5F 52 45 >                db      "F_READ"
 116++E1B1 41 44       >
 116++E1B3             >len_NFA         defl    $ - temp_NFA
 116++E1B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1AD             >
 116++E1AD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1AE 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B2 41 44       >
 116++E1B4             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B3 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1B4             >
 116++E1B4 9F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1B6             >Prev_Ptr        defl    Heap_Ptr
 116++E1B6             >
 116++E1B6             >mirror_Ptr      defl    $
 116++E1B6             >
 116++E1B6 BD 23       >                dw      Dict_Ptr + 2        // xt
 116++E1B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1B8             >
 116++E1B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1B8             >
 116++E1B8             >//              ______________________________________________________________________
 116++E1B8             >//              Dictionary part
 116++E1B8             >
 116++E1B8             >                org     Dict_Ptr
 116++23BB             >
 116++23BB B6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++23BD             >
 116++23BD             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++23BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++23BD ~           >
 116++23BD ~           >
 116++23BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++23BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++23BD             >
 116++23BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++23BD D9                            exx
 118++23BE E1                            pop     hl
 119++23BF 7D                            ld      a, l                // file-handle
 120++23C0 C1                            pop     bc                  // bc has bytes to read
 121++23C1 DD E3                         ex      (sp), ix            // ix has address
 122++23C3 DD E5                         push    ix
 123++23C5 E1                            pop     hl
 124++23C6 D9                           exx
 125++23C7 D5                           push    de                  // Save Return Stack pointer
 126++23C8 C5                           push    bc                  // Save Instruction pointer
 127++23C9 D9                            exx
 128++23CA F3                            di
 129++23CB CF                            rst     $08
 130++23CC 9D                            db      $9D
 131++23CD              F_Read_Exit:
 132++23CD FB                           ei
 133++23CE D9                           exx
 134++23CF C1                           pop     bc                  // Restore Instruction pointer
 135++23D0 D1                           pop     de                  // Restore Return Stack pointer
 136++23D1 DD E1                        pop     ix                  // Restore ix
 137++23D3 D9                            exx
 138++23D4 D5                            push    de                  // bytes involved in i/o operation
 139++23D5 ED 62                         sbc     hl, hl
 140++23D7 E5                            push    hl
 141++23D8 D9                           exx
 142++23D9                              next
 142++23D9 DD E9       >                jp      (ix)
 143++23DB
 144++23DB              //  ______________________________________________________________________
 145++23DB              //
 146++23DB              // f_write      a b u -- n f
 147++23DB              // Write bytes currently stored at address a to file-handle u.
 148++23DB              // Return the actual n bytes written and 0 on success, True flag on error.
 149++23DB                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 149++23DB             >
 149++23DB             >Dict_Ptr        defl    $
 149++23DB             >
 149++23DB             >//              ______________________________________________________________________
 149++23DB             >//              Heap part
 149++23DB             >
 149++23DB             >
 149++23DB             >                org     (Heap_Ptr & $1FFF) + $E000
 149++E1B8             >
 149++E1B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149++E1B8             >Latest_Definition defl  Heap_Ptr
 149++E1B8             >
 149++E1B8             >                // dummy db directives used to calculate length of namec
 149++E1B8 46 5F 57 52 >                db      "F_WRITE"
 149++E1BC 49 54 45    >
 149++E1BF             >len_NFA         defl    $ - temp_NFA
 149++E1BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149++E1B8             >
 149++E1B8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149++E1B9 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 149++E1BD 49 54 45    >
 149++E1C0             >                org     $-1                 // alter last byte of Name just above to set
 149++E1BF C5          >                db      {b $} | END_BIT     // msb as name end
 149++E1C0             >
 149++E1C0 AD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 149++E1C2             >Prev_Ptr        defl    Heap_Ptr
 149++E1C2             >
 149++E1C2             >mirror_Ptr      defl    $
 149++E1C2             >
 149++E1C2 DD 23       >                dw      Dict_Ptr + 2        // xt
 149++E1C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 149++E1C4             >
 149++E1C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 149++E1C4             >
 149++E1C4             >//              ______________________________________________________________________
 149++E1C4             >//              Dictionary part
 149++E1C4             >
 149++E1C4             >                org     Dict_Ptr
 149++23DB             >
 149++23DB C2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 149++23DD             >
 149++23DD             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 149++23DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 149++23DD ~           >
 149++23DD ~           >
 149++23DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 149++23DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 149++23DD             >
 149++23DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150++23DD D9                            exx
 151++23DE E1                            pop     hl
 152++23DF 7D                            ld      a, l                // file-handle
 153++23E0 C1                            pop     bc                  // bc has bytes to read
 154++23E1 DD E3                         ex      (sp), ix            // ix has address
 155++23E3 DD E5                         push    ix
 156++23E5 E1                            pop     hl
 157++23E6 D9                           exx
 158++23E7 D5                           push    de                  // Save Return Stack pointer
 159++23E8 C5                           push    bc                  // Save Instruction pointer
 160++23E9 D9                            exx
 161++23EA F3                            di
 162++23EB CF                            rst     $08
 163++23EC 9E                            db      $9E
 164++23ED 18 DE                         jr F_Read_Exit
 165++23EF              //                ei
 166++23EF              //                exx
 167++23EF              //                pop     de                  // Restore Return Stack pointer
 168++23EF              //                pop     bc                  // Restore Instruction pointer
 169++23EF              //                pop     ix                  // Restore ix
 170++23EF              //                 exx
 171++23EF              //                 push    de                  // bytes involved in i/o operation
 172++23EF              //                 sbc     hl, hl
 173++23EF              //                 push    hl
 174++23EF              //                exx
 175++23EF              //                next
 176++23EF
 177++23EF              //  ______________________________________________________________________
 178++23EF              //
 179++23EF              // f_open       a1 a2 b -- u f
 180++23EF              // open a file
 181++23EF              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 182++23EF              // a2 is address to an 8-byte header data used in some cases.
 183++23EF              // b is access mode-byte, that is a combination of:
 184++23EF              // any/all of:
 185++23EF              //   esx_mode_read          $01 request read access
 186++23EF              //   esx_mode_write         $02 request write access
 187++23EF              //   esx_mode_use_header    $40 read/write +3DOS header
 188++23EF              // plus one of:
 189++23EF              //   esx_mode_open_exist    $00 only open existing file
 190++23EF              //   esx_mode_open_creat    $08 open existing or create file
 191++23EF              //   esx_mode_creat_noexist $04 create new file, error if exists
 192++23EF              //   esx_mode_creat_trunc   $0c create new file, delete existing
 193++23EF              // Return file-handle u and 0 on success, True flag on error
 194++23EF                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 194++23EF             >
 194++23EF             >Dict_Ptr        defl    $
 194++23EF             >
 194++23EF             >//              ______________________________________________________________________
 194++23EF             >//              Heap part
 194++23EF             >
 194++23EF             >
 194++23EF             >                org     (Heap_Ptr & $1FFF) + $E000
 194++E1C4             >
 194++E1C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194++E1C4             >Latest_Definition defl  Heap_Ptr
 194++E1C4             >
 194++E1C4             >                // dummy db directives used to calculate length of namec
 194++E1C4 46 5F 4F 50 >                db      "F_OPEN"
 194++E1C8 45 4E       >
 194++E1CA             >len_NFA         defl    $ - temp_NFA
 194++E1CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194++E1C4             >
 194++E1C4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194++E1C5 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 194++E1C9 45 4E       >
 194++E1CB             >                org     $-1                 // alter last byte of Name just above to set
 194++E1CA CE          >                db      {b $} | END_BIT     // msb as name end
 194++E1CB             >
 194++E1CB B8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194++E1CD             >Prev_Ptr        defl    Heap_Ptr
 194++E1CD             >
 194++E1CD             >mirror_Ptr      defl    $
 194++E1CD             >
 194++E1CD F1 23       >                dw      Dict_Ptr + 2        // xt
 194++E1CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 194++E1CF             >
 194++E1CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 194++E1CF             >
 194++E1CF             >//              ______________________________________________________________________
 194++E1CF             >//              Dictionary part
 194++E1CF             >
 194++E1CF             >                org     Dict_Ptr
 194++23EF             >
 194++23EF CD 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 194++23F1             >
 194++23F1             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 194++23F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 194++23F1 ~           >
 194++23F1 ~           >
 194++23F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 194++23F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 194++23F1             >
 194++23F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195++23F1 D9                            exx
 196++23F2 C1                            pop     bc                  // file-mode
 197++23F3 41                            ld      b, c                // file-mode
 198++23F4 D1                            pop     de                  // 8-bytes buffer if any
 199++23F5 DD E3                         ex      (sp), ix            // filespec nul-terminated
 200++23F7 DD E5                         push    ix
 201++23F9 E1                            pop     hl
 202++23FA D9                           exx
 203++23FB D5                           push    de                  // Save Return Stack pointer
 204++23FC C5                           push    bc                  // Save Instruction pointer
 205++23FD D9                            exx
 206++23FE 3E 2A                         ld      a, "*"
 207++2400 F3                            di
 208++2401 CF                            rst     $08
 209++2402 9A                            db      $9A
 210++2403              F_Open_Exit:
 211++2403              //               ei                         // removed because is repeated in f_read_exit
 212++2403 5F                            ld      e, a                // return the handle-number
 213++2404 16 00                         ld      d, 0
 214++2406 18 C5                        jr F_Read_Exit
 215++2408
 216++2408              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 217++2408              //   \ FILENAME 1+ PAD 1 F_OPEN
 218++2408              //   \ DROP
 219++2408              //   \ F_CLOSE
 220++2408
 221++2408
 222++2408              //  ______________________________________________________________________
 223++2408              //
 224++2408              // f_opendir    a1 -- u f
 225++2408              // open a file
 226++2408                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 226++2408             >
 226++2408             >Dict_Ptr        defl    $
 226++2408             >
 226++2408             >//              ______________________________________________________________________
 226++2408             >//              Heap part
 226++2408             >
 226++2408             >
 226++2408             >                org     (Heap_Ptr & $1FFF) + $E000
 226++E1CF             >
 226++E1CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226++E1CF             >Latest_Definition defl  Heap_Ptr
 226++E1CF             >
 226++E1CF             >                // dummy db directives used to calculate length of namec
 226++E1CF 46 5F 4F 50 >                db      "F_OPENDIR"
 226++E1D3 45 4E 44 49 >
 226++E1D7 52          >
 226++E1D8             >len_NFA         defl    $ - temp_NFA
 226++E1D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226++E1CF             >
 226++E1CF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226++E1D0 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 226++E1D4 45 4E 44 49 >
 226++E1D8 52          >
 226++E1D9             >                org     $-1                 // alter last byte of Name just above to set
 226++E1D8 D2          >                db      {b $} | END_BIT     // msb as name end
 226++E1D9             >
 226++E1D9 C4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 226++E1DB             >Prev_Ptr        defl    Heap_Ptr
 226++E1DB             >
 226++E1DB             >mirror_Ptr      defl    $
 226++E1DB             >
 226++E1DB 0A 24       >                dw      Dict_Ptr + 2        // xt
 226++E1DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 226++E1DD             >
 226++E1DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 226++E1DD             >
 226++E1DD             >//              ______________________________________________________________________
 226++E1DD             >//              Dictionary part
 226++E1DD             >
 226++E1DD             >                org     Dict_Ptr
 226++2408             >
 226++2408 DB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 226++240A             >
 226++240A             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226++240A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226++240A ~           >
 226++240A ~           >
 226++240A             >                endif           ; ok        // for other definitions it "points" the correct handler
 226++240A             >                // Use of "; ok" to suppress "warning[fwdref]"
 226++240A             >
 226++240A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227++240A DD E3                        ex      (sp), ix            // filespec nul-terminated
 228++240C DD E5                        push    ix
 229++240E E1                           pop     hl
 230++240F D5                           push    de                  // Save Return Stack pointer
 231++2410 C5                           push    bc                  // Save Instruction pointer
 232++2411 06 10                        ld      b, $10              // file-mode
 233++2413 3E 43                        ld      a, "C"
 234++2415 CF                           rst     $08
 235++2416 A3                           db      $A3
 236++2417 18 EA                        jr      F_Open_Exit
 237++2419
 238++2419
 239++2419              //  ______________________________________________________________________
 240++2419              //
 241++2419              // f_readdir    a1 a2 b -- u f
 242++2419              // open a file
 243++2419                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 243++2419             >
 243++2419             >Dict_Ptr        defl    $
 243++2419             >
 243++2419             >//              ______________________________________________________________________
 243++2419             >//              Heap part
 243++2419             >
 243++2419             >
 243++2419             >                org     (Heap_Ptr & $1FFF) + $E000
 243++E1DD             >
 243++E1DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243++E1DD             >Latest_Definition defl  Heap_Ptr
 243++E1DD             >
 243++E1DD             >                // dummy db directives used to calculate length of namec
 243++E1DD 46 5F 52 45 >                db      "F_READDIR"
 243++E1E1 41 44 44 49 >
 243++E1E5 52          >
 243++E1E6             >len_NFA         defl    $ - temp_NFA
 243++E1E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243++E1DD             >
 243++E1DD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243++E1DE 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 243++E1E2 41 44 44 49 >
 243++E1E6 52          >
 243++E1E7             >                org     $-1                 // alter last byte of Name just above to set
 243++E1E6 D2          >                db      {b $} | END_BIT     // msb as name end
 243++E1E7             >
 243++E1E7 CF 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243++E1E9             >Prev_Ptr        defl    Heap_Ptr
 243++E1E9             >
 243++E1E9             >mirror_Ptr      defl    $
 243++E1E9             >
 243++E1E9 1B 24       >                dw      Dict_Ptr + 2        // xt
 243++E1EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 243++E1EB             >
 243++E1EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 243++E1EB             >
 243++E1EB             >//              ______________________________________________________________________
 243++E1EB             >//              Dictionary part
 243++E1EB             >
 243++E1EB             >                org     Dict_Ptr
 243++2419             >
 243++2419 E9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 243++241B             >
 243++241B             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243++241B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243++241B ~           >
 243++241B ~           >
 243++241B             >                endif           ; ok        // for other definitions it "points" the correct handler
 243++241B             >                // Use of "; ok" to suppress "warning[fwdref]"
 243++241B             >
 243++241B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244++241B D9                            exx
 245++241C E1                            pop     hl
 246++241D 7D                            ld      a, l
 247++241E D1                            pop     de
 248++241F DD E3                         ex      (sp), ix            // filespec nul-terminated
 249++2421 DD E5                         push    ix
 250++2423 E1                            pop     hl
 251++2424 D9                           exx
 252++2425 D5                           push    de                  // Save Return Stack pointer
 253++2426 C5                           push    bc                  // Save Instruction pointer
 254++2427 D9                            exx
 255++2428 CF                            rst     $08
 256++2429 A4                            db      $A4
 257++242A 18 D7                         jr      F_Open_Exit
 258++242C
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt0.asm
1105+ 242C
1106+ 242C
1107+ 242C              //  ______________________________________________________________________
1108+ 242C              //
1109+ 242C              // cmove    a1 a2 u --
1110+ 242C              // If u > 0, moves memory content starting at address a1 for n bytes long
1111+ 242C              // storing then starting at address addr2.
1112+ 242C              // The content of a1 is moved first. See CMOVE> also.
1113+ 242C                              New_Def CMOVE, "CMOVE", is_code, is_normal
1113+ 242C             >
1113+ 242C             >Dict_Ptr        defl    $
1113+ 242C             >
1113+ 242C             >//              ______________________________________________________________________
1113+ 242C             >//              Heap part
1113+ 242C             >
1113+ 242C             >
1113+ 242C             >                org     (Heap_Ptr & $1FFF) + $E000
1113+ E1EB             >
1113+ E1EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1113+ E1EB             >Latest_Definition defl  Heap_Ptr
1113+ E1EB             >
1113+ E1EB             >                // dummy db directives used to calculate length of namec
1113+ E1EB 43 4D 4F 56 >                db      "CMOVE"
1113+ E1EF 45          >
1113+ E1F0             >len_NFA         defl    $ - temp_NFA
1113+ E1F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1113+ E1EB             >
1113+ E1EB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1113+ E1EC 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1113+ E1F0 45          >
1113+ E1F1             >                org     $-1                 // alter last byte of Name just above to set
1113+ E1F0 C5          >                db      {b $} | END_BIT     // msb as name end
1113+ E1F1             >
1113+ E1F1 DD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1113+ E1F3             >Prev_Ptr        defl    Heap_Ptr
1113+ E1F3             >
1113+ E1F3             >mirror_Ptr      defl    $
1113+ E1F3             >
1113+ E1F3 2E 24       >                dw      Dict_Ptr + 2        // xt
1113+ E1F5             >Heap_Ptr        defl    $ - $E000           // save current HP
1113+ E1F5             >
1113+ E1F5             >Current_HP      defl  $ - $E000             // used to set HP once!
1113+ E1F5             >
1113+ E1F5             >//              ______________________________________________________________________
1113+ E1F5             >//              Dictionary part
1113+ E1F5             >
1113+ E1F5             >                org     Dict_Ptr
1113+ 242C             >
1113+ 242C F3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1113+ 242E             >
1113+ 242E             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1113+ 242E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1113+ 242E ~           >
1113+ 242E ~           >
1113+ 242E             >                endif           ; ok        // for other definitions it "points" the correct handler
1113+ 242E             >                // Use of "; ok" to suppress "warning[fwdref]"
1113+ 242E             >
1113+ 242E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1114+ 242E D9                           exx
1115+ 242F
1116+ 242F C1                           pop     bc                  // bc has counter
1117+ 2430 D1                           pop     de                  // de now has dest
1118+ 2431 E1                           pop     hl                 // hl has source, save Instruction Pointer
1119+ 2432 78                           ld      a, b
1120+ 2433 B1                           or      c
1121+ 2434 28 02                        jr      z, Cmove_NoMove
1122+ 2436 ED B0                            ldir
1123+ 2438              Cmove_NoMove:
1124+ 2438 D9                           exx
1125+ 2439
1126+ 2439                              next
1126+ 2439 DD E9       >                jp      (ix)
1127+ 243B
1128+ 243B              //  ______________________________________________________________________
1129+ 243B              //
1130+ 243B              // cmove>    a1 a2 u --
1131+ 243B              // If u > 0, moves memory content starting at address a1 for n bytes long
1132+ 243B              // storing then starting at address addr2.
1133+ 243B              // The content of a1 is moved last. See cmove.
1134+ 243B                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1134+ 243B             >
1134+ 243B             >Dict_Ptr        defl    $
1134+ 243B             >
1134+ 243B             >//              ______________________________________________________________________
1134+ 243B             >//              Heap part
1134+ 243B             >
1134+ 243B             >
1134+ 243B             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E1F5             >
1134+ E1F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E1F5             >Latest_Definition defl  Heap_Ptr
1134+ E1F5             >
1134+ E1F5             >                // dummy db directives used to calculate length of namec
1134+ E1F5 43 4D 4F 56 >                db      "CMOVE>"
1134+ E1F9 45 3E       >
1134+ E1FB             >len_NFA         defl    $ - temp_NFA
1134+ E1FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E1F5             >
1134+ E1F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E1F6 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1134+ E1FA 45 3E       >
1134+ E1FC             >                org     $-1                 // alter last byte of Name just above to set
1134+ E1FB BE          >                db      {b $} | END_BIT     // msb as name end
1134+ E1FC             >
1134+ E1FC EB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E1FE             >Prev_Ptr        defl    Heap_Ptr
1134+ E1FE             >
1134+ E1FE             >mirror_Ptr      defl    $
1134+ E1FE             >
1134+ E1FE 3D 24       >                dw      Dict_Ptr + 2        // xt
1134+ E200             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E200             >
1134+ E200             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E200             >
1134+ E200             >//              ______________________________________________________________________
1134+ E200             >//              Dictionary part
1134+ E200             >
1134+ E200             >                org     Dict_Ptr
1134+ 243B             >
1134+ 243B FE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 243D             >
1134+ 243D             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 243D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1134+ 243D ~           >
1134+ 243D ~           >
1134+ 243D             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 243D             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 243D             >
1134+ 243D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 243D D9                           exx
1136+ 243E
1137+ 243E C1                           pop     bc                  // bc has counter
1138+ 243F D1                           pop     de                  // de has dest
1139+ 2440 E1                           pop     hl                  // hl has source, save Instruction Pointer
1140+ 2441 78                           ld      a, b
1141+ 2442 B1                           or      c
1142+ 2443 28 F3                        jr      z, Cmove_NoMove  // CmoveV_NoMove
1143+ 2445 EB                               ex      de, hl              // compute address to
1144+ 2446 09                               add     hl, bc              // operate backward
1145+ 2447 2B                               dec     hl
1146+ 2448 EB                               ex      de, hl
1147+ 2449 09                               add     hl, bc
1148+ 244A 2B                               dec     hl
1149+ 244B ED B8                            lddr                        // backward
1150+ 244D 18 E9                            jr      Cmove_NoMove
1151+ 244F              // CmoveV_NoMove:
1152+ 244F                          //  exx
1153+ 244F
1154+ 244F                          //  next
1155+ 244F
1156+ 244F              //  ______________________________________________________________________
1157+ 244F              //
1158+ 244F              // um*      u1 u2 -- ud
1159+ 244F              // Unsigned multiplication
1160+ 244F              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1161+ 244F              // On the stack a double number is treated as two single numbers
1162+ 244F              // where DE is on the top of the stack and HL is the second from top,
1163+ 244F              // Instead, in 2VARIABLE a double number is stored as EDLH.
1164+ 244F              // this definition could use "MUL" Z80N new op-code.
1165+ 244F                              New_Def UM_MUL, "UM*", is_code, is_normal
1165+ 244F             >
1165+ 244F             >Dict_Ptr        defl    $
1165+ 244F             >
1165+ 244F             >//              ______________________________________________________________________
1165+ 244F             >//              Heap part
1165+ 244F             >
1165+ 244F             >
1165+ 244F             >                org     (Heap_Ptr & $1FFF) + $E000
1165+ E200             >
1165+ E200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ E200             >Latest_Definition defl  Heap_Ptr
1165+ E200             >
1165+ E200             >                // dummy db directives used to calculate length of namec
1165+ E200 55 4D 2A    >                db      "UM*"
1165+ E203             >len_NFA         defl    $ - temp_NFA
1165+ E203             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ E200             >
1165+ E200 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ E201 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1165+ E204             >                org     $-1                 // alter last byte of Name just above to set
1165+ E203 AA          >                db      {b $} | END_BIT     // msb as name end
1165+ E204             >
1165+ E204 F5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1165+ E206             >Prev_Ptr        defl    Heap_Ptr
1165+ E206             >
1165+ E206             >mirror_Ptr      defl    $
1165+ E206             >
1165+ E206 51 24       >                dw      Dict_Ptr + 2        // xt
1165+ E208             >Heap_Ptr        defl    $ - $E000           // save current HP
1165+ E208             >
1165+ E208             >Current_HP      defl  $ - $E000             // used to set HP once!
1165+ E208             >
1165+ E208             >//              ______________________________________________________________________
1165+ E208             >//              Dictionary part
1165+ E208             >
1165+ E208             >                org     Dict_Ptr
1165+ 244F             >
1165+ 244F 06 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1165+ 2451             >
1165+ 2451             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 2451 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1165+ 2451 ~           >
1165+ 2451 ~           >
1165+ 2451             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 2451             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 2451             >
1165+ 2451             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 2451 D9                           exx
1167+ 2452 D1                           pop     de                    // de has u2 operand
1168+ 2453 E1                           pop     hl                    // hl has u1 operand
1169+ 2454 45                           ld      b, l
1170+ 2455 4B                           ld      c, e
1171+ 2456 5D                           ld      e, l
1172+ 2457 6A                           ld      l, d
1173+ 2458 E5                           push    hl
1174+ 2459 69                           ld      l, c
1175+ 245A ED 30                        mul
1176+ 245C EB                           ex      de, hl
1177+ 245D ED 30                        mul
1178+ 245F AF                           xor     a
1179+ 2460 19                           add     hl, de
1180+ 2461 8F                           adc     a
1181+ 2462 59                           ld      e, c
1182+ 2463 50                           ld      d, b
1183+ 2464 ED 30                        mul
1184+ 2466 47                           ld      b, a
1185+ 2467 4C                           ld      c, h
1186+ 2468 7A                           ld      a, d
1187+ 2469 85                           add     l
1188+ 246A 67                           ld      h, a
1189+ 246B 6B                           ld      l, e
1190+ 246C D1                           pop     de
1191+ 246D ED 30                        mul
1192+ 246F EB                           ex      de, hl
1193+ 2470 ED 4A                        adc     hl, bc
1194+ 2472              Mul_Bailout:
1195+ 2472 D5                           push    de
1196+ 2473 E5                           push    hl
1197+ 2474 D9                           exx
1198+ 2475                              next
1198+ 2475 DD E9       >                jp      (ix)
1199+ 2477
1200+ 2477              //  ______________________________________________________________________
1201+ 2477              //
1202+ 2477              // um/mod      ud u1 -- q r
1203+ 2477              // divides ud into u1 giving quotient q and remainder r
1204+ 2477              // algorithm takes 16 bit at a time starting from msb
1205+ 2477              // DE grows from lsb upward with quotient result
1206+ 2477              // HL keeps the remainder at each stage of division
1207+ 2477              // each loop 'lowers' the next binary digit to form the current dividend
1208+ 2477                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1208+ 2477             >
1208+ 2477             >Dict_Ptr        defl    $
1208+ 2477             >
1208+ 2477             >//              ______________________________________________________________________
1208+ 2477             >//              Heap part
1208+ 2477             >
1208+ 2477             >
1208+ 2477             >                org     (Heap_Ptr & $1FFF) + $E000
1208+ E208             >
1208+ E208             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ E208             >Latest_Definition defl  Heap_Ptr
1208+ E208             >
1208+ E208             >                // dummy db directives used to calculate length of namec
1208+ E208 55 4D 2F 4D >                db      "UM/MOD"
1208+ E20C 4F 44       >
1208+ E20E             >len_NFA         defl    $ - temp_NFA
1208+ E20E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ E208             >
1208+ E208 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ E209 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1208+ E20D 4F 44       >
1208+ E20F             >                org     $-1                 // alter last byte of Name just above to set
1208+ E20E C4          >                db      {b $} | END_BIT     // msb as name end
1208+ E20F             >
1208+ E20F 00 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1208+ E211             >Prev_Ptr        defl    Heap_Ptr
1208+ E211             >
1208+ E211             >mirror_Ptr      defl    $
1208+ E211             >
1208+ E211 79 24       >                dw      Dict_Ptr + 2        // xt
1208+ E213             >Heap_Ptr        defl    $ - $E000           // save current HP
1208+ E213             >
1208+ E213             >Current_HP      defl  $ - $E000             // used to set HP once!
1208+ E213             >
1208+ E213             >//              ______________________________________________________________________
1208+ E213             >//              Dictionary part
1208+ E213             >
1208+ E213             >                org     Dict_Ptr
1208+ 2477             >
1208+ 2477 11 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1208+ 2479             >
1208+ 2479             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 2479 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1208+ 2479 ~           >
1208+ 2479 ~           >
1208+ 2479             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 2479             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 2479             >
1208+ 2479             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 2479 D9                           exx
1210+ 247A C1                           pop     bc                      // divisor
1211+ 247B
1212+ 247B E1                           pop     hl                      // < high part
1213+ 247C D1                           pop     de                      // < low part and
1214+ 247D
1215+ 247D 7D                           ld      a, l                    // check without changing arguments
1216+ 247E 91                           sub     c                       // if divisor is greater than high part
1217+ 247F 7C                           ld      a, h                    // so quotient will be in range
1218+ 2480 98                           sbc     a, b
1219+ 2481 30 1D                        jr      nc, Um_DivMod_OutOfRange
1220+ 2483 3E 10                            ld      a, 16
1221+ 2485              Um_DivMod_Loop:
1222+ 2485 CB 23                                sla     e
1223+ 2487 CB 12                                rl      d
1224+ 2489 ED 6A                                adc     hl, hl
1225+ 248B 30 05                                jr      nc, Um_DivMod_Carry
1226+ 248D A7                                       and     a
1227+ 248E ED 42                                    sbc     hl, bc
1228+ 2490 18 07                                jr      Um_DivMod_Endif    // else
1229+ 2492              Um_DivMod_Carry:
1230+ 2492 A7                                       and     a
1231+ 2493 ED 42                                    sbc     hl, bc
1232+ 2495 30 02                                    jr      nc, Um_DivMod_Endif
1233+ 2497 09                                           add     hl, bc
1234+ 2498 1B                                           dec     de
1235+ 2499              Um_DivMod_Endif:                                   // endif
1236+ 2499 13                                   inc     de
1237+ 249A 3D                                   dec     a
1238+ 249B 20 E8                            jr      nz, Um_DivMod_Loop
1239+ 249D EB                               ex      de, hl
1240+ 249E 18 D2                            jr      Mul_Bailout
1241+ 24A0              // Um_DivMod_Bailout:
1242+ 24A0                              //  push    de                  // de := remanider
1243+ 24A0                              //  push    hl                  // hl := quotient
1244+ 24A0                              //  exx
1245+ 24A0                              //  next
1246+ 24A0
1247+ 24A0              Um_DivMod_OutOfRange:
1248+ 24A0 21 FF FF                     ld      hl, -1
1249+ 24A3 54                           ld      d, h
1250+ 24A4 5D                           ld      e, l
1251+ 24A5 18 CB                        jr      Mul_Bailout
1252+ 24A7
1253+ 24A7              //  ______________________________________________________________________
1254+ 24A7              //
1255+ 24A7              // and          n1 n2 -- n3
1256+ 24A7              // bit logical AND. Returns n3 as n1 & n2
1257+ 24A7                              New_Def AND_OP, "AND", is_code, is_normal
1257+ 24A7             >
1257+ 24A7             >Dict_Ptr        defl    $
1257+ 24A7             >
1257+ 24A7             >//              ______________________________________________________________________
1257+ 24A7             >//              Heap part
1257+ 24A7             >
1257+ 24A7             >
1257+ 24A7             >                org     (Heap_Ptr & $1FFF) + $E000
1257+ E213             >
1257+ E213             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ E213             >Latest_Definition defl  Heap_Ptr
1257+ E213             >
1257+ E213             >                // dummy db directives used to calculate length of namec
1257+ E213 41 4E 44    >                db      "AND"
1257+ E216             >len_NFA         defl    $ - temp_NFA
1257+ E216             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ E213             >
1257+ E213 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ E214 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1257+ E217             >                org     $-1                 // alter last byte of Name just above to set
1257+ E216 C4          >                db      {b $} | END_BIT     // msb as name end
1257+ E217             >
1257+ E217 08 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1257+ E219             >Prev_Ptr        defl    Heap_Ptr
1257+ E219             >
1257+ E219             >mirror_Ptr      defl    $
1257+ E219             >
1257+ E219 A9 24       >                dw      Dict_Ptr + 2        // xt
1257+ E21B             >Heap_Ptr        defl    $ - $E000           // save current HP
1257+ E21B             >
1257+ E21B             >Current_HP      defl  $ - $E000             // used to set HP once!
1257+ E21B             >
1257+ E21B             >//              ______________________________________________________________________
1257+ E21B             >//              Dictionary part
1257+ E21B             >
1257+ E21B             >                org     Dict_Ptr
1257+ 24A7             >
1257+ 24A7 19 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1257+ 24A9             >
1257+ 24A9             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 24A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1257+ 24A9 ~           >
1257+ 24A9 ~           >
1257+ 24A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 24A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 24A9             >
1257+ 24A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 24A9 D9                           exx
1259+ 24AA D1                           pop     de
1260+ 24AB E1                           pop     hl
1261+ 24AC 7B                           ld      a, e
1262+ 24AD A5                           and     l
1263+ 24AE 6F                           ld      l, a
1264+ 24AF 7A                           ld      a, d
1265+ 24B0 A4                           and     h
1266+ 24B1              Boolean_exit:
1267+ 24B1 67                           ld      h, a
1268+ 24B2 E5                           push    hl
1269+ 24B3 D9                           exx
1270+ 24B4                              next
1270+ 24B4 DD E9       >                jp      (ix)
1271+ 24B6
1272+ 24B6              //  ______________________________________________________________________
1273+ 24B6              //
1274+ 24B6              // or           n1 n2 -- n3
1275+ 24B6              // bit logical OR. Returns n3 as n1 | n2
1276+ 24B6                              New_Def OR_OP, "OR", is_code, is_normal
1276+ 24B6             >
1276+ 24B6             >Dict_Ptr        defl    $
1276+ 24B6             >
1276+ 24B6             >//              ______________________________________________________________________
1276+ 24B6             >//              Heap part
1276+ 24B6             >
1276+ 24B6             >
1276+ 24B6             >                org     (Heap_Ptr & $1FFF) + $E000
1276+ E21B             >
1276+ E21B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1276+ E21B             >Latest_Definition defl  Heap_Ptr
1276+ E21B             >
1276+ E21B             >                // dummy db directives used to calculate length of namec
1276+ E21B 4F 52       >                db      "OR"
1276+ E21D             >len_NFA         defl    $ - temp_NFA
1276+ E21D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1276+ E21B             >
1276+ E21B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1276+ E21C 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1276+ E21E             >                org     $-1                 // alter last byte of Name just above to set
1276+ E21D D2          >                db      {b $} | END_BIT     // msb as name end
1276+ E21E             >
1276+ E21E 13 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1276+ E220             >Prev_Ptr        defl    Heap_Ptr
1276+ E220             >
1276+ E220             >mirror_Ptr      defl    $
1276+ E220             >
1276+ E220 B8 24       >                dw      Dict_Ptr + 2        // xt
1276+ E222             >Heap_Ptr        defl    $ - $E000           // save current HP
1276+ E222             >
1276+ E222             >Current_HP      defl  $ - $E000             // used to set HP once!
1276+ E222             >
1276+ E222             >//              ______________________________________________________________________
1276+ E222             >//              Dictionary part
1276+ E222             >
1276+ E222             >                org     Dict_Ptr
1276+ 24B6             >
1276+ 24B6 20 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1276+ 24B8             >
1276+ 24B8             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1276+ 24B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1276+ 24B8 ~           >
1276+ 24B8 ~           >
1276+ 24B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1276+ 24B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1276+ 24B8             >
1276+ 24B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1277+ 24B8 D9                           exx
1278+ 24B9 D1                           pop     de
1279+ 24BA E1                           pop     hl
1280+ 24BB 7B                           ld      a, e
1281+ 24BC B5                           or      l
1282+ 24BD 6F                           ld      l, a
1283+ 24BE 7A                           ld      a, d
1284+ 24BF B4                           or      h
1285+ 24C0 18 EF                        jr      Boolean_exit
1286+ 24C2                        //    ld      h, a
1287+ 24C2                        //    push    hl
1288+ 24C2                        //    exx
1289+ 24C2                        //    next
1290+ 24C2
1291+ 24C2              //  ______________________________________________________________________
1292+ 24C2              //
1293+ 24C2              // xor          n1 n2 -- n3
1294+ 24C2              // bit logical OR. Returns n3 as n1 ^ n2
1295+ 24C2                              New_Def XOR_OP, "XOR", is_code, is_normal
1295+ 24C2             >
1295+ 24C2             >Dict_Ptr        defl    $
1295+ 24C2             >
1295+ 24C2             >//              ______________________________________________________________________
1295+ 24C2             >//              Heap part
1295+ 24C2             >
1295+ 24C2             >
1295+ 24C2             >                org     (Heap_Ptr & $1FFF) + $E000
1295+ E222             >
1295+ E222             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1295+ E222             >Latest_Definition defl  Heap_Ptr
1295+ E222             >
1295+ E222             >                // dummy db directives used to calculate length of namec
1295+ E222 58 4F 52    >                db      "XOR"
1295+ E225             >len_NFA         defl    $ - temp_NFA
1295+ E225             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1295+ E222             >
1295+ E222 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1295+ E223 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1295+ E226             >                org     $-1                 // alter last byte of Name just above to set
1295+ E225 D2          >                db      {b $} | END_BIT     // msb as name end
1295+ E226             >
1295+ E226 1B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1295+ E228             >Prev_Ptr        defl    Heap_Ptr
1295+ E228             >
1295+ E228             >mirror_Ptr      defl    $
1295+ E228             >
1295+ E228 C4 24       >                dw      Dict_Ptr + 2        // xt
1295+ E22A             >Heap_Ptr        defl    $ - $E000           // save current HP
1295+ E22A             >
1295+ E22A             >Current_HP      defl  $ - $E000             // used to set HP once!
1295+ E22A             >
1295+ E22A             >//              ______________________________________________________________________
1295+ E22A             >//              Dictionary part
1295+ E22A             >
1295+ E22A             >                org     Dict_Ptr
1295+ 24C2             >
1295+ 24C2 28 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1295+ 24C4             >
1295+ 24C4             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1295+ 24C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1295+ 24C4 ~           >
1295+ 24C4 ~           >
1295+ 24C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1295+ 24C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1295+ 24C4             >
1295+ 24C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1296+ 24C4 D9                           exx
1297+ 24C5 D1                           pop     de
1298+ 24C6 E1                           pop     hl
1299+ 24C7 7B                           ld      a, e
1300+ 24C8 AD                           xor     l
1301+ 24C9 6F                           ld      l, a
1302+ 24CA 7A                           ld      a, d
1303+ 24CB AC                           xor     h
1304+ 24CC 18 E3                        jr      Boolean_exit
1305+ 24CE                        //    ld      h, a
1306+ 24CE                        //    push    hl
1307+ 24CE                        //    exx
1308+ 24CE                        //    next
1309+ 24CE
1310+ 24CE              //  ______________________________________________________________________
1311+ 24CE              //
1312+ 24CE              // sp@      -- a
1313+ 24CE              // returns on top of stack the value of SP before execution
1314+ 24CE                              New_Def SPFETCH, "SP@", is_code, is_normal
1314+ 24CE             >
1314+ 24CE             >Dict_Ptr        defl    $
1314+ 24CE             >
1314+ 24CE             >//              ______________________________________________________________________
1314+ 24CE             >//              Heap part
1314+ 24CE             >
1314+ 24CE             >
1314+ 24CE             >                org     (Heap_Ptr & $1FFF) + $E000
1314+ E22A             >
1314+ E22A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ E22A             >Latest_Definition defl  Heap_Ptr
1314+ E22A             >
1314+ E22A             >                // dummy db directives used to calculate length of namec
1314+ E22A 53 50 40    >                db      "SP@"
1314+ E22D             >len_NFA         defl    $ - temp_NFA
1314+ E22D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ E22A             >
1314+ E22A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ E22B 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1314+ E22E             >                org     $-1                 // alter last byte of Name just above to set
1314+ E22D C0          >                db      {b $} | END_BIT     // msb as name end
1314+ E22E             >
1314+ E22E 22 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1314+ E230             >Prev_Ptr        defl    Heap_Ptr
1314+ E230             >
1314+ E230             >mirror_Ptr      defl    $
1314+ E230             >
1314+ E230 D0 24       >                dw      Dict_Ptr + 2        // xt
1314+ E232             >Heap_Ptr        defl    $ - $E000           // save current HP
1314+ E232             >
1314+ E232             >Current_HP      defl  $ - $E000             // used to set HP once!
1314+ E232             >
1314+ E232             >//              ______________________________________________________________________
1314+ E232             >//              Dictionary part
1314+ E232             >
1314+ E232             >                org     Dict_Ptr
1314+ 24CE             >
1314+ 24CE 30 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1314+ 24D0             >
1314+ 24D0             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 24D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 24D0 ~           >
1314+ 24D0 ~           >
1314+ 24D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 24D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 24D0             >
1314+ 24D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 24D0
1316+ 24D0 21 00 00                     ld      hl, 0
1317+ 24D3 39                           add     hl, sp
1318+ 24D4
1319+ 24D4                              psh1
1319+ 24D4 E5          >                push    hl
1319+ 24D5 DD E9       >                jp      (ix)
1320+ 24D7
1321+ 24D7              //  ______________________________________________________________________
1322+ 24D7              //
1323+ 24D7              // sp!      a --
1324+ 24D7              // restore SP to the initial value passed
1325+ 24D7              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1326+ 24D7                              New_Def SPSTORE, "SP!", is_code, is_normal
1326+ 24D7             >
1326+ 24D7             >Dict_Ptr        defl    $
1326+ 24D7             >
1326+ 24D7             >//              ______________________________________________________________________
1326+ 24D7             >//              Heap part
1326+ 24D7             >
1326+ 24D7             >
1326+ 24D7             >                org     (Heap_Ptr & $1FFF) + $E000
1326+ E232             >
1326+ E232             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1326+ E232             >Latest_Definition defl  Heap_Ptr
1326+ E232             >
1326+ E232             >                // dummy db directives used to calculate length of namec
1326+ E232 53 50 21    >                db      "SP!"
1326+ E235             >len_NFA         defl    $ - temp_NFA
1326+ E235             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1326+ E232             >
1326+ E232 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1326+ E233 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1326+ E236             >                org     $-1                 // alter last byte of Name just above to set
1326+ E235 A1          >                db      {b $} | END_BIT     // msb as name end
1326+ E236             >
1326+ E236 2A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1326+ E238             >Prev_Ptr        defl    Heap_Ptr
1326+ E238             >
1326+ E238             >mirror_Ptr      defl    $
1326+ E238             >
1326+ E238 D9 24       >                dw      Dict_Ptr + 2        // xt
1326+ E23A             >Heap_Ptr        defl    $ - $E000           // save current HP
1326+ E23A             >
1326+ E23A             >Current_HP      defl  $ - $E000             // used to set HP once!
1326+ E23A             >
1326+ E23A             >//              ______________________________________________________________________
1326+ E23A             >//              Dictionary part
1326+ E23A             >
1326+ E23A             >                org     Dict_Ptr
1326+ 24D7             >
1326+ 24D7 38 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1326+ 24D9             >
1326+ 24D9             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1326+ 24D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1326+ 24D9 ~           >
1326+ 24D9 ~           >
1326+ 24D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1326+ 24D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1326+ 24D9             >
1326+ 24D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1327+ 24D9 E1                           pop     hl
1328+ 24DA F9                           ld      sp, hl
1329+ 24DB
1330+ 24DB                              next
1330+ 24DB DD E9       >                jp      (ix)
1331+ 24DD
1332+ 24DD              //  ______________________________________________________________________
1333+ 24DD              //
1334+ 24DD              // rp@      -- a
1335+ 24DD              // returns on top of stack the value of Return-Pointer
1336+ 24DD                              New_Def RPFETCH, "RP@", is_code, is_normal
1336+ 24DD             >
1336+ 24DD             >Dict_Ptr        defl    $
1336+ 24DD             >
1336+ 24DD             >//              ______________________________________________________________________
1336+ 24DD             >//              Heap part
1336+ 24DD             >
1336+ 24DD             >
1336+ 24DD             >                org     (Heap_Ptr & $1FFF) + $E000
1336+ E23A             >
1336+ E23A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1336+ E23A             >Latest_Definition defl  Heap_Ptr
1336+ E23A             >
1336+ E23A             >                // dummy db directives used to calculate length of namec
1336+ E23A 52 50 40    >                db      "RP@"
1336+ E23D             >len_NFA         defl    $ - temp_NFA
1336+ E23D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1336+ E23A             >
1336+ E23A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1336+ E23B 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1336+ E23E             >                org     $-1                 // alter last byte of Name just above to set
1336+ E23D C0          >                db      {b $} | END_BIT     // msb as name end
1336+ E23E             >
1336+ E23E 32 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1336+ E240             >Prev_Ptr        defl    Heap_Ptr
1336+ E240             >
1336+ E240             >mirror_Ptr      defl    $
1336+ E240             >
1336+ E240 DF 24       >                dw      Dict_Ptr + 2        // xt
1336+ E242             >Heap_Ptr        defl    $ - $E000           // save current HP
1336+ E242             >
1336+ E242             >Current_HP      defl  $ - $E000             // used to set HP once!
1336+ E242             >
1336+ E242             >//              ______________________________________________________________________
1336+ E242             >//              Dictionary part
1336+ E242             >
1336+ E242             >                org     Dict_Ptr
1336+ 24DD             >
1336+ 24DD 40 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1336+ 24DF             >
1336+ 24DF             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1336+ 24DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1336+ 24DF ~           >
1336+ 24DF ~           >
1336+ 24DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1336+ 24DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1336+ 24DF             >
1336+ 24DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1337+ 24DF
1338+ 24DF                              // *** ldhlrp
1339+ 24DF                              // *** ex      de, hl
1340+ 24DF D5                           push de
1341+ 24E0
1342+ 24E0                              next
1342+ 24E0 DD E9       >                jp      (ix)
1343+ 24E2
1344+ 24E2              //  ______________________________________________________________________
1345+ 24E2              //
1346+ 24E2              // rp!      a --
1347+ 24E2              // restore RP to the initial value passed
1348+ 24E2              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1349+ 24E2                              New_Def RPSTORE, "RP!", is_code, is_normal
1349+ 24E2             >
1349+ 24E2             >Dict_Ptr        defl    $
1349+ 24E2             >
1349+ 24E2             >//              ______________________________________________________________________
1349+ 24E2             >//              Heap part
1349+ 24E2             >
1349+ 24E2             >
1349+ 24E2             >                org     (Heap_Ptr & $1FFF) + $E000
1349+ E242             >
1349+ E242             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1349+ E242             >Latest_Definition defl  Heap_Ptr
1349+ E242             >
1349+ E242             >                // dummy db directives used to calculate length of namec
1349+ E242 52 50 21    >                db      "RP!"
1349+ E245             >len_NFA         defl    $ - temp_NFA
1349+ E245             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1349+ E242             >
1349+ E242 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1349+ E243 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1349+ E246             >                org     $-1                 // alter last byte of Name just above to set
1349+ E245 A1          >                db      {b $} | END_BIT     // msb as name end
1349+ E246             >
1349+ E246 3A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1349+ E248             >Prev_Ptr        defl    Heap_Ptr
1349+ E248             >
1349+ E248             >mirror_Ptr      defl    $
1349+ E248             >
1349+ E248 E4 24       >                dw      Dict_Ptr + 2        // xt
1349+ E24A             >Heap_Ptr        defl    $ - $E000           // save current HP
1349+ E24A             >
1349+ E24A             >Current_HP      defl  $ - $E000             // used to set HP once!
1349+ E24A             >
1349+ E24A             >//              ______________________________________________________________________
1349+ E24A             >//              Dictionary part
1349+ E24A             >
1349+ E24A             >                org     Dict_Ptr
1349+ 24E2             >
1349+ 24E2 48 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1349+ 24E4             >
1349+ 24E4             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1349+ 24E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1349+ 24E4 ~           >
1349+ 24E4 ~           >
1349+ 24E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1349+ 24E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1349+ 24E4             >
1349+ 24E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1350+ 24E4 D1                           pop     de
1351+ 24E5                              // *** ex      de, hl
1352+ 24E5                              // *** ldrphl
1353+ 24E5
1354+ 24E5                              next
1354+ 24E5 DD E9       >                jp      (ix)
1355+ 24E7
1356+ 24E7              //  ______________________________________________________________________
1357+ 24E7              //
1358+ 24E7              // exit       --
1359+ 24E7              // exits back to the caller word
1360+ 24E7                              New_Def EXIT, "EXIT", is_code, is_normal
1360+ 24E7             >
1360+ 24E7             >Dict_Ptr        defl    $
1360+ 24E7             >
1360+ 24E7             >//              ______________________________________________________________________
1360+ 24E7             >//              Heap part
1360+ 24E7             >
1360+ 24E7             >
1360+ 24E7             >                org     (Heap_Ptr & $1FFF) + $E000
1360+ E24A             >
1360+ E24A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1360+ E24A             >Latest_Definition defl  Heap_Ptr
1360+ E24A             >
1360+ E24A             >                // dummy db directives used to calculate length of namec
1360+ E24A 45 58 49 54 >                db      "EXIT"
1360+ E24E             >len_NFA         defl    $ - temp_NFA
1360+ E24E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1360+ E24A             >
1360+ E24A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1360+ E24B 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1360+ E24F             >                org     $-1                 // alter last byte of Name just above to set
1360+ E24E D4          >                db      {b $} | END_BIT     // msb as name end
1360+ E24F             >
1360+ E24F 42 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1360+ E251             >Prev_Ptr        defl    Heap_Ptr
1360+ E251             >
1360+ E251             >mirror_Ptr      defl    $
1360+ E251             >
1360+ E251 E9 24       >                dw      Dict_Ptr + 2        // xt
1360+ E253             >Heap_Ptr        defl    $ - $E000           // save current HP
1360+ E253             >
1360+ E253             >Current_HP      defl  $ - $E000             // used to set HP once!
1360+ E253             >
1360+ E253             >//              ______________________________________________________________________
1360+ E253             >//              Dictionary part
1360+ E253             >
1360+ E253             >                org     Dict_Ptr
1360+ 24E7             >
1360+ 24E7 51 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1360+ 24E9             >
1360+ 24E9             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1360+ 24E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1360+ 24E9 ~           >
1360+ 24E9 ~           >
1360+ 24E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1360+ 24E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1360+ 24E9             >
1360+ 24E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1361+ 24E9 EB                           ex      de, hl
1362+ 24EA                              // *** ldhlrp                      // Get Return Stack Pointer
1363+ 24EA 4E                           ld      c, (hl)             // pop Instruction Pointer
1364+ 24EB 23                           inc     hl                  // from Return Stack
1365+ 24EC 46                           ld      b, (hl)
1366+ 24ED 23                           inc     hl
1367+ 24EE                              // *** ldrphl                      // Set Return Stack Pointer
1368+ 24EE EB                           ex      de, hl
1369+ 24EF                              next
1369+ 24EF DD E9       >                jp      (ix)
1370+ 24F1
1371+ 24F1              //  ______________________________________________________________________
1372+ 24F1              //
1373+ 24F1              // lastl      --
1374+ 24F1              // exits back to the caller word
1375+ 24F1              //              New_Def EXIT, "LASTL", is_code, is_normal
1376+ 24F1              //              push    de
1377+ 24F1              //              ex      de, hl //**
1378+ 24F1              //              // *** ldhlrp                      // Get Return Stack Pointer
1379+ 24F1              //              ld      e, (hl)             // pop Instruction Pointer
1380+ 24F1              //              inc     hl                  // from Return Stack
1381+ 24F1              //              ld      d, (hl)
1382+ 24F1              //              inc     hl
1383+ 24F1              //              ld      (hl), e
1384+ 24F1              //              inc     hl
1385+ 24F1              //              ld      (hl), d
1386+ 24F1              //              add     hl, -3
1387+ 24F1              //              pop     de
1388+ 24F1              //              next
1389+ 24F1
1390+ 24F1              //  ______________________________________________________________________
1391+ 24F1              //
1392+ 24F1              // >r      n --
1393+ 24F1              // pop from calculator-stack and push into return-stack
1394+ 24F1                              New_Def TO_R, ">R", is_code, is_normal
1394+ 24F1             >
1394+ 24F1             >Dict_Ptr        defl    $
1394+ 24F1             >
1394+ 24F1             >//              ______________________________________________________________________
1394+ 24F1             >//              Heap part
1394+ 24F1             >
1394+ 24F1             >
1394+ 24F1             >                org     (Heap_Ptr & $1FFF) + $E000
1394+ E253             >
1394+ E253             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1394+ E253             >Latest_Definition defl  Heap_Ptr
1394+ E253             >
1394+ E253             >                // dummy db directives used to calculate length of namec
1394+ E253 3E 52       >                db      ">R"
1394+ E255             >len_NFA         defl    $ - temp_NFA
1394+ E255             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1394+ E253             >
1394+ E253 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1394+ E254 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1394+ E256             >                org     $-1                 // alter last byte of Name just above to set
1394+ E255 D2          >                db      {b $} | END_BIT     // msb as name end
1394+ E256             >
1394+ E256 4A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1394+ E258             >Prev_Ptr        defl    Heap_Ptr
1394+ E258             >
1394+ E258             >mirror_Ptr      defl    $
1394+ E258             >
1394+ E258 F3 24       >                dw      Dict_Ptr + 2        // xt
1394+ E25A             >Heap_Ptr        defl    $ - $E000           // save current HP
1394+ E25A             >
1394+ E25A             >Current_HP      defl  $ - $E000             // used to set HP once!
1394+ E25A             >
1394+ E25A             >//              ______________________________________________________________________
1394+ E25A             >//              Dictionary part
1394+ E25A             >
1394+ E25A             >                org     Dict_Ptr
1394+ 24F1             >
1394+ 24F1 58 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1394+ 24F3             >
1394+ 24F3             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1394+ 24F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1394+ 24F3 ~           >
1394+ 24F3 ~           >
1394+ 24F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1394+ 24F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1394+ 24F3             >
1394+ 24F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1395+ 24F3 E1                           pop     hl
1396+ 24F4 EB                           ex      de, hl //**
1397+ 24F5                              // *** ldhlrp
1398+ 24F5 2B                           dec     hl
1399+ 24F6 72                           ld      (hl), d             // store current TOS
1400+ 24F7 2B                           dec     hl                  // to Return Stack
1401+ 24F8 73                           ld      (hl), e
1402+ 24F9                              // *** ldrphl
1403+ 24F9 EB                           ex      de, hl //**
1404+ 24FA                              next
1404+ 24FA DD E9       >                jp      (ix)
1405+ 24FC
1406+ 24FC              //  ______________________________________________________________________
1407+ 24FC              //
1408+ 24FC              // r>      -- n
1409+ 24FC              // pop from return-stack and push into calculator-stack
1410+ 24FC                              New_Def R_TO, "R>", is_code, is_normal
1410+ 24FC             >
1410+ 24FC             >Dict_Ptr        defl    $
1410+ 24FC             >
1410+ 24FC             >//              ______________________________________________________________________
1410+ 24FC             >//              Heap part
1410+ 24FC             >
1410+ 24FC             >
1410+ 24FC             >                org     (Heap_Ptr & $1FFF) + $E000
1410+ E25A             >
1410+ E25A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ E25A             >Latest_Definition defl  Heap_Ptr
1410+ E25A             >
1410+ E25A             >                // dummy db directives used to calculate length of namec
1410+ E25A 52 3E       >                db      "R>"
1410+ E25C             >len_NFA         defl    $ - temp_NFA
1410+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ E25A             >
1410+ E25A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ E25B 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1410+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1410+ E25C BE          >                db      {b $} | END_BIT     // msb as name end
1410+ E25D             >
1410+ E25D 53 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1410+ E25F             >Prev_Ptr        defl    Heap_Ptr
1410+ E25F             >
1410+ E25F             >mirror_Ptr      defl    $
1410+ E25F             >
1410+ E25F FE 24       >                dw      Dict_Ptr + 2        // xt
1410+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1410+ E261             >
1410+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1410+ E261             >
1410+ E261             >//              ______________________________________________________________________
1410+ E261             >//              Dictionary part
1410+ E261             >
1410+ E261             >                org     Dict_Ptr
1410+ 24FC             >
1410+ 24FC 5F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1410+ 24FE             >
1410+ 24FE             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 24FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1410+ 24FE ~           >
1410+ 24FE ~           >
1410+ 24FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 24FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 24FE             >
1410+ 24FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 24FE
1412+ 24FE EB                           ex      de, hl //**
1413+ 24FF                              // *** ldhlrp
1414+ 24FF 5E                           ld      e, (hl)             // retrieve from Return Stack
1415+ 2500 23                           inc     hl
1416+ 2501 56                           ld      d, (hl)
1417+ 2502 23                           inc     hl
1418+ 2503                              // *** ldrphl
1419+ 2503 EB                           ex      de, hl //**
1420+ 2504 E5                           push    hl
1421+ 2505                              next
1421+ 2505 DD E9       >                jp      (ix)
1422+ 2507
1423+ 2507              //  ______________________________________________________________________
1424+ 2507              //
1425+ 2507              // r@           -- n
1426+ 2507              // return on top of stack the value of top of return-stack
1427+ 2507              // Since this is the same as I, we alter R's CFA to jump there
1428+ 2507                              New_Def R_OP, "R@", is_code, is_normal
1428+ 2507             >
1428+ 2507             >Dict_Ptr        defl    $
1428+ 2507             >
1428+ 2507             >//              ______________________________________________________________________
1428+ 2507             >//              Heap part
1428+ 2507             >
1428+ 2507             >
1428+ 2507             >                org     (Heap_Ptr & $1FFF) + $E000
1428+ E261             >
1428+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1428+ E261             >Latest_Definition defl  Heap_Ptr
1428+ E261             >
1428+ E261             >                // dummy db directives used to calculate length of namec
1428+ E261 52 40       >                db      "R@"
1428+ E263             >len_NFA         defl    $ - temp_NFA
1428+ E263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1428+ E261             >
1428+ E261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1428+ E262 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1428+ E264             >                org     $-1                 // alter last byte of Name just above to set
1428+ E263 C0          >                db      {b $} | END_BIT     // msb as name end
1428+ E264             >
1428+ E264 5A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1428+ E266             >Prev_Ptr        defl    Heap_Ptr
1428+ E266             >
1428+ E266             >mirror_Ptr      defl    $
1428+ E266             >
1428+ E266 09 25       >                dw      Dict_Ptr + 2        // xt
1428+ E268             >Heap_Ptr        defl    $ - $E000           // save current HP
1428+ E268             >
1428+ E268             >Current_HP      defl  $ - $E000             // used to set HP once!
1428+ E268             >
1428+ E268             >//              ______________________________________________________________________
1428+ E268             >//              Dictionary part
1428+ E268             >
1428+ E268             >                org     Dict_Ptr
1428+ 2507             >
1428+ 2507 66 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1428+ 2509             >
1428+ 2509             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1428+ 2509 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1428+ 2509 ~           >
1428+ 2509 ~           >
1428+ 2509             >                endif           ; ok        // for other definitions it "points" the correct handler
1428+ 2509             >                // Use of "; ok" to suppress "warning[fwdref]"
1428+ 2509             >
1428+ 2509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1429+ 2509                          //  Behave  I_Ptr
1430+ 2509 C3 CC 20                     jp      I_Ptr
1431+ 250C
1432+ 250C              //  ______________________________________________________________________
1433+ 250C              //
1434+ 250C              // r            -- n
1435+ 250C              // return on top of stack the value of top of return-stack
1436+ 250C              // Since this is the same as I, we alter R's CFA to jump there
1437+ 250C              //              New_Def R_OLD, "R", is_code, is_normal
1438+ 250C              //              jp      I_Ptr
1439+ 250C
1440+ 250C              //  ______________________________________________________________________
1441+ 250C              //
1442+ 250C              // 0=           n -- f
1443+ 250C              // true (non zero) if n is zero, false (0) elsewere
1444+ 250C                              New_Def ZEQUAL, "0=", is_code, is_normal
1444+ 250C             >
1444+ 250C             >Dict_Ptr        defl    $
1444+ 250C             >
1444+ 250C             >//              ______________________________________________________________________
1444+ 250C             >//              Heap part
1444+ 250C             >
1444+ 250C             >
1444+ 250C             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E268             >
1444+ E268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E268             >Latest_Definition defl  Heap_Ptr
1444+ E268             >
1444+ E268             >                // dummy db directives used to calculate length of namec
1444+ E268 30 3D       >                db      "0="
1444+ E26A             >len_NFA         defl    $ - temp_NFA
1444+ E26A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E268             >
1444+ E268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E269 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1444+ E26B             >                org     $-1                 // alter last byte of Name just above to set
1444+ E26A BD          >                db      {b $} | END_BIT     // msb as name end
1444+ E26B             >
1444+ E26B 61 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E26D             >Prev_Ptr        defl    Heap_Ptr
1444+ E26D             >
1444+ E26D             >mirror_Ptr      defl    $
1444+ E26D             >
1444+ E26D 0E 25       >                dw      Dict_Ptr + 2        // xt
1444+ E26F             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E26F             >
1444+ E26F             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E26F             >
1444+ E26F             >//              ______________________________________________________________________
1444+ E26F             >//              Dictionary part
1444+ E26F             >
1444+ E26F             >                org     Dict_Ptr
1444+ 250C             >
1444+ 250C 6D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 250E             >
1444+ 250E             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 250E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1444+ 250E ~           >
1444+ 250E ~           >
1444+ 250E             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 250E             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 250E             >
1444+ 250E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 250E              Zero_Equal:
1446+ 250E E1                           pop     hl
1447+ 250F 7D                           ld      a, l
1448+ 2510 B4                           or      h
1449+ 2511 20 01                        jr      nz, ZEqual_Skip
1450+ 2513 3F                               ccf
1451+ 2514              ZEqual_Skip:
1452+ 2514 ED 62                        sbc     hl, hl
1453+ 2516                              psh1
1453+ 2516 E5          >                push    hl
1453+ 2517 DD E9       >                jp      (ix)
1454+ 2519
1455+ 2519              //  ______________________________________________________________________
1456+ 2519              //
1457+ 2519              // not         a1 -- a2
1458+ 2519              // increment by 2 top of stack
1459+ 2519                              New_Def NOT_OP, "NOT", is_code, is_normal
1459+ 2519             >
1459+ 2519             >Dict_Ptr        defl    $
1459+ 2519             >
1459+ 2519             >//              ______________________________________________________________________
1459+ 2519             >//              Heap part
1459+ 2519             >
1459+ 2519             >
1459+ 2519             >                org     (Heap_Ptr & $1FFF) + $E000
1459+ E26F             >
1459+ E26F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ E26F             >Latest_Definition defl  Heap_Ptr
1459+ E26F             >
1459+ E26F             >                // dummy db directives used to calculate length of namec
1459+ E26F 4E 4F 54    >                db      "NOT"
1459+ E272             >len_NFA         defl    $ - temp_NFA
1459+ E272             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ E26F             >
1459+ E26F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ E270 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1459+ E273             >                org     $-1                 // alter last byte of Name just above to set
1459+ E272 D4          >                db      {b $} | END_BIT     // msb as name end
1459+ E273             >
1459+ E273 68 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1459+ E275             >Prev_Ptr        defl    Heap_Ptr
1459+ E275             >
1459+ E275             >mirror_Ptr      defl    $
1459+ E275             >
1459+ E275 1B 25       >                dw      Dict_Ptr + 2        // xt
1459+ E277             >Heap_Ptr        defl    $ - $E000           // save current HP
1459+ E277             >
1459+ E277             >Current_HP      defl  $ - $E000             // used to set HP once!
1459+ E277             >
1459+ E277             >//              ______________________________________________________________________
1459+ E277             >//              Dictionary part
1459+ E277             >
1459+ E277             >                org     Dict_Ptr
1459+ 2519             >
1459+ 2519 75 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1459+ 251B             >
1459+ 251B             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 251B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1459+ 251B ~           >
1459+ 251B ~           >
1459+ 251B             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 251B             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 251B             >
1459+ 251B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 251B                          //  Behave  Zero_Equal
1461+ 251B 18 F1                        jr      Zero_Equal
1462+ 251D
1463+ 251D              //  ______________________________________________________________________
1464+ 251D              //
1465+ 251D              // 0<           n -- f
1466+ 251D              // true (non zero) if n is less than zero, false (0) elsewere
1467+ 251D                              New_Def ZLESS, "0<", is_code, is_normal
1467+ 251D             >
1467+ 251D             >Dict_Ptr        defl    $
1467+ 251D             >
1467+ 251D             >//              ______________________________________________________________________
1467+ 251D             >//              Heap part
1467+ 251D             >
1467+ 251D             >
1467+ 251D             >                org     (Heap_Ptr & $1FFF) + $E000
1467+ E277             >
1467+ E277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1467+ E277             >Latest_Definition defl  Heap_Ptr
1467+ E277             >
1467+ E277             >                // dummy db directives used to calculate length of namec
1467+ E277 30 3C       >                db      "0<"
1467+ E279             >len_NFA         defl    $ - temp_NFA
1467+ E279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1467+ E277             >
1467+ E277 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1467+ E278 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1467+ E27A             >                org     $-1                 // alter last byte of Name just above to set
1467+ E279 BC          >                db      {b $} | END_BIT     // msb as name end
1467+ E27A             >
1467+ E27A 6F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1467+ E27C             >Prev_Ptr        defl    Heap_Ptr
1467+ E27C             >
1467+ E27C             >mirror_Ptr      defl    $
1467+ E27C             >
1467+ E27C 1F 25       >                dw      Dict_Ptr + 2        // xt
1467+ E27E             >Heap_Ptr        defl    $ - $E000           // save current HP
1467+ E27E             >
1467+ E27E             >Current_HP      defl  $ - $E000             // used to set HP once!
1467+ E27E             >
1467+ E27E             >//              ______________________________________________________________________
1467+ E27E             >//              Dictionary part
1467+ E27E             >
1467+ E27E             >                org     Dict_Ptr
1467+ 251D             >
1467+ 251D 7C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1467+ 251F             >
1467+ 251F             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1467+ 251F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1467+ 251F ~           >
1467+ 251F ~           >
1467+ 251F             >                endif           ; ok        // for other definitions it "points" the correct handler
1467+ 251F             >                // Use of "; ok" to suppress "warning[fwdref]"
1467+ 251F             >
1467+ 251F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1468+ 251F E1                           pop     hl
1469+ 2520 29                           add     hl, hl
1470+ 2521 ED 62                        sbc     hl, hl
1471+ 2523                              psh1
1471+ 2523 E5          >                push    hl
1471+ 2524 DD E9       >                jp      (ix)
1472+ 2526
1473+ 2526              //  ______________________________________________________________________
1474+ 2526              //
1475+ 2526              // 0>           n -- f
1476+ 2526              // true (non zero) if n is less than zero, false (0) elsewere
1477+ 2526                              New_Def ZGREATER, "0>", is_code, is_normal
1477+ 2526             >
1477+ 2526             >Dict_Ptr        defl    $
1477+ 2526             >
1477+ 2526             >//              ______________________________________________________________________
1477+ 2526             >//              Heap part
1477+ 2526             >
1477+ 2526             >
1477+ 2526             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E27E             >
1477+ E27E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E27E             >Latest_Definition defl  Heap_Ptr
1477+ E27E             >
1477+ E27E             >                // dummy db directives used to calculate length of namec
1477+ E27E 30 3E       >                db      "0>"
1477+ E280             >len_NFA         defl    $ - temp_NFA
1477+ E280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E27E             >
1477+ E27E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E27F 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1477+ E281             >                org     $-1                 // alter last byte of Name just above to set
1477+ E280 BE          >                db      {b $} | END_BIT     // msb as name end
1477+ E281             >
1477+ E281 77 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E283             >Prev_Ptr        defl    Heap_Ptr
1477+ E283             >
1477+ E283             >mirror_Ptr      defl    $
1477+ E283             >
1477+ E283 28 25       >                dw      Dict_Ptr + 2        // xt
1477+ E285             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E285             >
1477+ E285             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E285             >
1477+ E285             >//              ______________________________________________________________________
1477+ E285             >//              Dictionary part
1477+ E285             >
1477+ E285             >                org     Dict_Ptr
1477+ 2526             >
1477+ 2526 83 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 2528             >
1477+ 2528             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 2528 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1477+ 2528 ~           >
1477+ 2528 ~           >
1477+ 2528             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 2528             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 2528             >
1477+ 2528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 2528 E1                           pop     hl
1479+ 2529 7D                           ld      a, l
1480+ 252A B4                           or      h
1481+ 252B 28 04                        jr      z, ZGreater_Skip
1482+ 252D 29                           add     hl, hl
1483+ 252E 3F                           ccf
1484+ 252F ED 62                        sbc     hl, hl
1485+ 2531              ZGreater_Skip:
1486+ 2531                              psh1
1486+ 2531 E5          >                push    hl
1486+ 2532 DD E9       >                jp      (ix)
1487+ 2534
1488+ 2534              //  ______________________________________________________________________
1489+ 2534              //
1490+ 2534              // +            n1 n2 -- n3
1491+ 2534              // returns the unsigned sum of two top values
1492+ 2534                              New_Def PLUS, "+", is_code, is_normal
1492+ 2534             >
1492+ 2534             >Dict_Ptr        defl    $
1492+ 2534             >
1492+ 2534             >//              ______________________________________________________________________
1492+ 2534             >//              Heap part
1492+ 2534             >
1492+ 2534             >
1492+ 2534             >                org     (Heap_Ptr & $1FFF) + $E000
1492+ E285             >
1492+ E285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1492+ E285             >Latest_Definition defl  Heap_Ptr
1492+ E285             >
1492+ E285             >                // dummy db directives used to calculate length of namec
1492+ E285 2B          >                db      "+"
1492+ E286             >len_NFA         defl    $ - temp_NFA
1492+ E286             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1492+ E285             >
1492+ E285 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1492+ E286 2B          >                db      "+"               // name string in 7-bit ascii, but
1492+ E287             >                org     $-1                 // alter last byte of Name just above to set
1492+ E286 AB          >                db      {b $} | END_BIT     // msb as name end
1492+ E287             >
1492+ E287 7E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1492+ E289             >Prev_Ptr        defl    Heap_Ptr
1492+ E289             >
1492+ E289             >mirror_Ptr      defl    $
1492+ E289             >
1492+ E289 36 25       >                dw      Dict_Ptr + 2        // xt
1492+ E28B             >Heap_Ptr        defl    $ - $E000           // save current HP
1492+ E28B             >
1492+ E28B             >Current_HP      defl  $ - $E000             // used to set HP once!
1492+ E28B             >
1492+ E28B             >//              ______________________________________________________________________
1492+ E28B             >//              Dictionary part
1492+ E28B             >
1492+ E28B             >                org     Dict_Ptr
1492+ 2534             >
1492+ 2534 89 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1492+ 2536             >
1492+ 2536             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1492+ 2536 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1492+ 2536 ~           >
1492+ 2536 ~           >
1492+ 2536             >                endif           ; ok        // for other definitions it "points" the correct handler
1492+ 2536             >                // Use of "; ok" to suppress "warning[fwdref]"
1492+ 2536             >
1492+ 2536             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1493+ 2536 D9                           exx
1494+ 2537 E1                           pop     hl
1495+ 2538 D1                           pop     de
1496+ 2539 19                           add     hl, de
1497+ 253A E5                           push    hl
1498+ 253B D9                           exx
1499+ 253C                              next
1499+ 253C DD E9       >                jp      (ix)
1500+ 253E
1501+ 253E
1502+ 253E              //  ______________________________________________________________________
1503+ 253E              //
1504+ 253E              // d+           d1 d2 -- d3
1505+ 253E              // returns the unsigned sum of two top double-numbers
1506+ 253E              //      d2  d1
1507+ 253E              //      h l h l
1508+ 253E              // SP   LHEDLHED
1509+ 253E              // SP  +01234567
1510+ 253E                              New_Def DPLUS, "D+", is_code, is_normal
1510+ 253E             >
1510+ 253E             >Dict_Ptr        defl    $
1510+ 253E             >
1510+ 253E             >//              ______________________________________________________________________
1510+ 253E             >//              Heap part
1510+ 253E             >
1510+ 253E             >
1510+ 253E             >                org     (Heap_Ptr & $1FFF) + $E000
1510+ E28B             >
1510+ E28B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1510+ E28B             >Latest_Definition defl  Heap_Ptr
1510+ E28B             >
1510+ E28B             >                // dummy db directives used to calculate length of namec
1510+ E28B 44 2B       >                db      "D+"
1510+ E28D             >len_NFA         defl    $ - temp_NFA
1510+ E28D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1510+ E28B             >
1510+ E28B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1510+ E28C 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1510+ E28E             >                org     $-1                 // alter last byte of Name just above to set
1510+ E28D AB          >                db      {b $} | END_BIT     // msb as name end
1510+ E28E             >
1510+ E28E 85 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1510+ E290             >Prev_Ptr        defl    Heap_Ptr
1510+ E290             >
1510+ E290             >mirror_Ptr      defl    $
1510+ E290             >
1510+ E290 40 25       >                dw      Dict_Ptr + 2        // xt
1510+ E292             >Heap_Ptr        defl    $ - $E000           // save current HP
1510+ E292             >
1510+ E292             >Current_HP      defl  $ - $E000             // used to set HP once!
1510+ E292             >
1510+ E292             >//              ______________________________________________________________________
1510+ E292             >//              Dictionary part
1510+ E292             >
1510+ E292             >                org     Dict_Ptr
1510+ 253E             >
1510+ 253E 90 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1510+ 2540             >
1510+ 2540             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1510+ 2540 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1510+ 2540 ~           >
1510+ 2540 ~           >
1510+ 2540             >                endif           ; ok        // for other definitions it "points" the correct handler
1510+ 2540             >                // Use of "; ok" to suppress "warning[fwdref]"
1510+ 2540             >
1510+ 2540             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1511+ 2540
1512+ 2540 D9                           exx
1513+ 2541 C1                           pop     bc                  // bc := d2.H
1514+ 2542 D1                           pop     de                  // hl := d2.L
1515+ 2543 E1                           pop     hl                  // d1.H
1516+ 2544 E3                           ex      (sp), hl            // d1.L
1517+ 2545 19                           add     hl, de              // hl := d2.L + d1.L
1518+ 2546 E3                           ex      (sp), hl            // d1.H
1519+ 2547 ED 4A                        adc     hl, bc              // d1.H + d2.H
1520+ 2549 E5                           push    hl
1521+ 254A D9                           exx
1522+ 254B                              next
1522+ 254B DD E9       >                jp      (ix)
1523+ 254D
1524+ 254D              //  ______________________________________________________________________
1525+ 254D              //
1526+ 254D              // 1+           n1 -- n2
1527+ 254D              // increment by 1 top of stack
1528+ 254D                              New_Def ONE_PLUS, "1+", is_code, is_normal
1528+ 254D             >
1528+ 254D             >Dict_Ptr        defl    $
1528+ 254D             >
1528+ 254D             >//              ______________________________________________________________________
1528+ 254D             >//              Heap part
1528+ 254D             >
1528+ 254D             >
1528+ 254D             >                org     (Heap_Ptr & $1FFF) + $E000
1528+ E292             >
1528+ E292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1528+ E292             >Latest_Definition defl  Heap_Ptr
1528+ E292             >
1528+ E292             >                // dummy db directives used to calculate length of namec
1528+ E292 31 2B       >                db      "1+"
1528+ E294             >len_NFA         defl    $ - temp_NFA
1528+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1528+ E292             >
1528+ E292 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1528+ E293 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1528+ E295             >                org     $-1                 // alter last byte of Name just above to set
1528+ E294 AB          >                db      {b $} | END_BIT     // msb as name end
1528+ E295             >
1528+ E295 8B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1528+ E297             >Prev_Ptr        defl    Heap_Ptr
1528+ E297             >
1528+ E297             >mirror_Ptr      defl    $
1528+ E297             >
1528+ E297 4F 25       >                dw      Dict_Ptr + 2        // xt
1528+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1528+ E299             >
1528+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1528+ E299             >
1528+ E299             >//              ______________________________________________________________________
1528+ E299             >//              Dictionary part
1528+ E299             >
1528+ E299             >                org     Dict_Ptr
1528+ 254D             >
1528+ 254D 97 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1528+ 254F             >
1528+ 254F             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1528+ 254F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1528+ 254F ~           >
1528+ 254F ~           >
1528+ 254F             >                endif           ; ok        // for other definitions it "points" the correct handler
1528+ 254F             >                // Use of "; ok" to suppress "warning[fwdref]"
1528+ 254F             >
1528+ 254F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1529+ 254F E1                           pop     hl
1530+ 2550 23                           inc     hl
1531+ 2551
1532+ 2551                              psh1
1532+ 2551 E5          >                push    hl
1532+ 2552 DD E9       >                jp      (ix)
1533+ 2554
1534+ 2554              //  ______________________________________________________________________
1535+ 2554              //
1536+ 2554              // 1-           n1 -- n2
1537+ 2554              // decrement by 1 top of stack
1538+ 2554                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1538+ 2554             >
1538+ 2554             >Dict_Ptr        defl    $
1538+ 2554             >
1538+ 2554             >//              ______________________________________________________________________
1538+ 2554             >//              Heap part
1538+ 2554             >
1538+ 2554             >
1538+ 2554             >                org     (Heap_Ptr & $1FFF) + $E000
1538+ E299             >
1538+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ E299             >Latest_Definition defl  Heap_Ptr
1538+ E299             >
1538+ E299             >                // dummy db directives used to calculate length of namec
1538+ E299 31 2D       >                db      "1-"
1538+ E29B             >len_NFA         defl    $ - temp_NFA
1538+ E29B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ E299             >
1538+ E299 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ E29A 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1538+ E29C             >                org     $-1                 // alter last byte of Name just above to set
1538+ E29B AD          >                db      {b $} | END_BIT     // msb as name end
1538+ E29C             >
1538+ E29C 92 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1538+ E29E             >Prev_Ptr        defl    Heap_Ptr
1538+ E29E             >
1538+ E29E             >mirror_Ptr      defl    $
1538+ E29E             >
1538+ E29E 56 25       >                dw      Dict_Ptr + 2        // xt
1538+ E2A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1538+ E2A0             >
1538+ E2A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1538+ E2A0             >
1538+ E2A0             >//              ______________________________________________________________________
1538+ E2A0             >//              Dictionary part
1538+ E2A0             >
1538+ E2A0             >                org     Dict_Ptr
1538+ 2554             >
1538+ 2554 9E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1538+ 2556             >
1538+ 2556             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 2556 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 2556 ~           >
1538+ 2556 ~           >
1538+ 2556             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 2556             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 2556             >
1538+ 2556             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 2556 E1                           pop     hl
1540+ 2557 2B                           dec     hl
1541+ 2558
1542+ 2558                              psh1
1542+ 2558 E5          >                push    hl
1542+ 2559 DD E9       >                jp      (ix)
1543+ 255B
1544+ 255B              //  ______________________________________________________________________
1545+ 255B              //
1546+ 255B              // 2+           n1 -- n2
1547+ 255B              // increment by 2 top of stack
1548+ 255B                              New_Def TWO_PLUS, "2+", is_code, is_normal
1548+ 255B             >
1548+ 255B             >Dict_Ptr        defl    $
1548+ 255B             >
1548+ 255B             >//              ______________________________________________________________________
1548+ 255B             >//              Heap part
1548+ 255B             >
1548+ 255B             >
1548+ 255B             >                org     (Heap_Ptr & $1FFF) + $E000
1548+ E2A0             >
1548+ E2A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1548+ E2A0             >Latest_Definition defl  Heap_Ptr
1548+ E2A0             >
1548+ E2A0             >                // dummy db directives used to calculate length of namec
1548+ E2A0 32 2B       >                db      "2+"
1548+ E2A2             >len_NFA         defl    $ - temp_NFA
1548+ E2A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1548+ E2A0             >
1548+ E2A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1548+ E2A1 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1548+ E2A3             >                org     $-1                 // alter last byte of Name just above to set
1548+ E2A2 AB          >                db      {b $} | END_BIT     // msb as name end
1548+ E2A3             >
1548+ E2A3 99 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1548+ E2A5             >Prev_Ptr        defl    Heap_Ptr
1548+ E2A5             >
1548+ E2A5             >mirror_Ptr      defl    $
1548+ E2A5             >
1548+ E2A5 5D 25       >                dw      Dict_Ptr + 2        // xt
1548+ E2A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1548+ E2A7             >
1548+ E2A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1548+ E2A7             >
1548+ E2A7             >//              ______________________________________________________________________
1548+ E2A7             >//              Dictionary part
1548+ E2A7             >
1548+ E2A7             >                org     Dict_Ptr
1548+ 255B             >
1548+ 255B A5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1548+ 255D             >
1548+ 255D             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1548+ 255D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1548+ 255D ~           >
1548+ 255D ~           >
1548+ 255D             >                endif           ; ok        // for other definitions it "points" the correct handler
1548+ 255D             >                // Use of "; ok" to suppress "warning[fwdref]"
1548+ 255D             >
1548+ 255D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1549+ 255D              Two_Plus:
1550+ 255D E1                           pop     hl
1551+ 255E 23                           inc     hl
1552+ 255F 23                           inc     hl
1553+ 2560
1554+ 2560                              psh1
1554+ 2560 E5          >                push    hl
1554+ 2561 DD E9       >                jp      (ix)
1555+ 2563
1556+ 2563              //  ______________________________________________________________________
1557+ 2563              //
1558+ 2563              // cell+        a1 -- a2
1559+ 2563              // increment by 2 top of stack
1560+ 2563                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1560+ 2563             >
1560+ 2563             >Dict_Ptr        defl    $
1560+ 2563             >
1560+ 2563             >//              ______________________________________________________________________
1560+ 2563             >//              Heap part
1560+ 2563             >
1560+ 2563             >
1560+ 2563             >                org     (Heap_Ptr & $1FFF) + $E000
1560+ E2A7             >
1560+ E2A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1560+ E2A7             >Latest_Definition defl  Heap_Ptr
1560+ E2A7             >
1560+ E2A7             >                // dummy db directives used to calculate length of namec
1560+ E2A7 43 45 4C 4C >                db      "CELL+"
1560+ E2AB 2B          >
1560+ E2AC             >len_NFA         defl    $ - temp_NFA
1560+ E2AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1560+ E2A7             >
1560+ E2A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1560+ E2A8 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1560+ E2AC 2B          >
1560+ E2AD             >                org     $-1                 // alter last byte of Name just above to set
1560+ E2AC AB          >                db      {b $} | END_BIT     // msb as name end
1560+ E2AD             >
1560+ E2AD A0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1560+ E2AF             >Prev_Ptr        defl    Heap_Ptr
1560+ E2AF             >
1560+ E2AF             >mirror_Ptr      defl    $
1560+ E2AF             >
1560+ E2AF 65 25       >                dw      Dict_Ptr + 2        // xt
1560+ E2B1             >Heap_Ptr        defl    $ - $E000           // save current HP
1560+ E2B1             >
1560+ E2B1             >Current_HP      defl  $ - $E000             // used to set HP once!
1560+ E2B1             >
1560+ E2B1             >//              ______________________________________________________________________
1560+ E2B1             >//              Dictionary part
1560+ E2B1             >
1560+ E2B1             >                org     Dict_Ptr
1560+ 2563             >
1560+ 2563 AF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1560+ 2565             >
1560+ 2565             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1560+ 2565 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1560+ 2565 ~           >
1560+ 2565 ~           >
1560+ 2565             >                endif           ; ok        // for other definitions it "points" the correct handler
1560+ 2565             >                // Use of "; ok" to suppress "warning[fwdref]"
1560+ 2565             >
1560+ 2565             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1561+ 2565 18 F6                        jr      Two_Plus
1562+ 2567
1563+ 2567              //  ______________________________________________________________________
1564+ 2567              //
1565+ 2567              // align        a1 -- a2
1566+ 2567              // align memory : not used
1567+ 2567              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1568+ 2567              //            next
1569+ 2567
1570+ 2567              //  ______________________________________________________________________
1571+ 2567              //
1572+ 2567              // cell-        a1 -- a2
1573+ 2567              // decrement by 2 top of stack
1574+ 2567                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1574+ 2567             >
1574+ 2567             >Dict_Ptr        defl    $
1574+ 2567             >
1574+ 2567             >//              ______________________________________________________________________
1574+ 2567             >//              Heap part
1574+ 2567             >
1574+ 2567             >
1574+ 2567             >                org     (Heap_Ptr & $1FFF) + $E000
1574+ E2B1             >
1574+ E2B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1574+ E2B1             >Latest_Definition defl  Heap_Ptr
1574+ E2B1             >
1574+ E2B1             >                // dummy db directives used to calculate length of namec
1574+ E2B1 43 45 4C 4C >                db      "CELL-"
1574+ E2B5 2D          >
1574+ E2B6             >len_NFA         defl    $ - temp_NFA
1574+ E2B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1574+ E2B1             >
1574+ E2B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1574+ E2B2 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1574+ E2B6 2D          >
1574+ E2B7             >                org     $-1                 // alter last byte of Name just above to set
1574+ E2B6 AD          >                db      {b $} | END_BIT     // msb as name end
1574+ E2B7             >
1574+ E2B7 A7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1574+ E2B9             >Prev_Ptr        defl    Heap_Ptr
1574+ E2B9             >
1574+ E2B9             >mirror_Ptr      defl    $
1574+ E2B9             >
1574+ E2B9 69 25       >                dw      Dict_Ptr + 2        // xt
1574+ E2BB             >Heap_Ptr        defl    $ - $E000           // save current HP
1574+ E2BB             >
1574+ E2BB             >Current_HP      defl  $ - $E000             // used to set HP once!
1574+ E2BB             >
1574+ E2BB             >//              ______________________________________________________________________
1574+ E2BB             >//              Dictionary part
1574+ E2BB             >
1574+ E2BB             >                org     Dict_Ptr
1574+ 2567             >
1574+ 2567 B9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1574+ 2569             >
1574+ 2569             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1574+ 2569 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1574+ 2569 ~           >
1574+ 2569 ~           >
1574+ 2569             >                endif           ; ok        // for other definitions it "points" the correct handler
1574+ 2569             >                // Use of "; ok" to suppress "warning[fwdref]"
1574+ 2569             >
1574+ 2569             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1575+ 2569              CellMinus:
1576+ 2569 E1                           pop     hl
1577+ 256A 2B                           dec     hl
1578+ 256B 2B                           dec     hl
1579+ 256C
1580+ 256C                              psh1
1580+ 256C E5          >                push    hl
1580+ 256D DD E9       >                jp      (ix)
1581+ 256F
1582+ 256F              //  ______________________________________________________________________
1583+ 256F              //
1584+ 256F              // 2-           a1 -- a2
1585+ 256F              // decrement by 2 top of stack
1586+ 256F                              New_Def TWO_MINUS, "2-", is_code, is_normal
1586+ 256F             >
1586+ 256F             >Dict_Ptr        defl    $
1586+ 256F             >
1586+ 256F             >//              ______________________________________________________________________
1586+ 256F             >//              Heap part
1586+ 256F             >
1586+ 256F             >
1586+ 256F             >                org     (Heap_Ptr & $1FFF) + $E000
1586+ E2BB             >
1586+ E2BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ E2BB             >Latest_Definition defl  Heap_Ptr
1586+ E2BB             >
1586+ E2BB             >                // dummy db directives used to calculate length of namec
1586+ E2BB 32 2D       >                db      "2-"
1586+ E2BD             >len_NFA         defl    $ - temp_NFA
1586+ E2BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ E2BB             >
1586+ E2BB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ E2BC 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1586+ E2BE             >                org     $-1                 // alter last byte of Name just above to set
1586+ E2BD AD          >                db      {b $} | END_BIT     // msb as name end
1586+ E2BE             >
1586+ E2BE B1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1586+ E2C0             >Prev_Ptr        defl    Heap_Ptr
1586+ E2C0             >
1586+ E2C0             >mirror_Ptr      defl    $
1586+ E2C0             >
1586+ E2C0 71 25       >                dw      Dict_Ptr + 2        // xt
1586+ E2C2             >Heap_Ptr        defl    $ - $E000           // save current HP
1586+ E2C2             >
1586+ E2C2             >Current_HP      defl  $ - $E000             // used to set HP once!
1586+ E2C2             >
1586+ E2C2             >//              ______________________________________________________________________
1586+ E2C2             >//              Dictionary part
1586+ E2C2             >
1586+ E2C2             >                org     Dict_Ptr
1586+ 256F             >
1586+ 256F C0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1586+ 2571             >
1586+ 2571             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 2571 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1586+ 2571 ~           >
1586+ 2571 ~           >
1586+ 2571             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 2571             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 2571             >
1586+ 2571             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 2571 C3 69 25                     jp      CellMinus
1588+ 2574
1589+ 2574              //  ______________________________________________________________________
1590+ 2574              //
1591+ 2574              // negate       n1 -- n2
1592+ 2574              // change the sign of number
1593+ 2574                              New_Def MINUS, "NEGATE", is_code, is_normal
1593+ 2574             >
1593+ 2574             >Dict_Ptr        defl    $
1593+ 2574             >
1593+ 2574             >//              ______________________________________________________________________
1593+ 2574             >//              Heap part
1593+ 2574             >
1593+ 2574             >
1593+ 2574             >                org     (Heap_Ptr & $1FFF) + $E000
1593+ E2C2             >
1593+ E2C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1593+ E2C2             >Latest_Definition defl  Heap_Ptr
1593+ E2C2             >
1593+ E2C2             >                // dummy db directives used to calculate length of namec
1593+ E2C2 4E 45 47 41 >                db      "NEGATE"
1593+ E2C6 54 45       >
1593+ E2C8             >len_NFA         defl    $ - temp_NFA
1593+ E2C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1593+ E2C2             >
1593+ E2C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1593+ E2C3 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1593+ E2C7 54 45       >
1593+ E2C9             >                org     $-1                 // alter last byte of Name just above to set
1593+ E2C8 C5          >                db      {b $} | END_BIT     // msb as name end
1593+ E2C9             >
1593+ E2C9 BB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1593+ E2CB             >Prev_Ptr        defl    Heap_Ptr
1593+ E2CB             >
1593+ E2CB             >mirror_Ptr      defl    $
1593+ E2CB             >
1593+ E2CB 76 25       >                dw      Dict_Ptr + 2        // xt
1593+ E2CD             >Heap_Ptr        defl    $ - $E000           // save current HP
1593+ E2CD             >
1593+ E2CD             >Current_HP      defl  $ - $E000             // used to set HP once!
1593+ E2CD             >
1593+ E2CD             >//              ______________________________________________________________________
1593+ E2CD             >//              Dictionary part
1593+ E2CD             >
1593+ E2CD             >                org     Dict_Ptr
1593+ 2574             >
1593+ 2574 CB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1593+ 2576             >
1593+ 2576             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1593+ 2576 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1593+ 2576 ~           >
1593+ 2576 ~           >
1593+ 2576             >                endif           ; ok        // for other definitions it "points" the correct handler
1593+ 2576             >                // Use of "; ok" to suppress "warning[fwdref]"
1593+ 2576             >
1593+ 2576             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1594+ 2576 D9                           exx
1595+ 2577 D1                           pop     de
1596+ 2578 AF                           xor     a
1597+ 2579              Negate_Ptr:
1598+ 2579 67                           ld      h, a
1599+ 257A 6F                           ld      l, a
1600+ 257B ED 52                        sbc     hl, de
1601+ 257D E5                           push    hl
1602+ 257E D9                           exx
1603+ 257F                              next
1603+ 257F DD E9       >                jp      (ix)
1604+ 2581
1605+ 2581              //  ______________________________________________________________________
1606+ 2581              //
1607+ 2581              // dnegate      d1 -- d2
1608+ 2581              // change the sign of a double number
1609+ 2581                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1609+ 2581             >
1609+ 2581             >Dict_Ptr        defl    $
1609+ 2581             >
1609+ 2581             >//              ______________________________________________________________________
1609+ 2581             >//              Heap part
1609+ 2581             >
1609+ 2581             >
1609+ 2581             >                org     (Heap_Ptr & $1FFF) + $E000
1609+ E2CD             >
1609+ E2CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1609+ E2CD             >Latest_Definition defl  Heap_Ptr
1609+ E2CD             >
1609+ E2CD             >                // dummy db directives used to calculate length of namec
1609+ E2CD 44 4E 45 47 >                db      "DNEGATE"
1609+ E2D1 41 54 45    >
1609+ E2D4             >len_NFA         defl    $ - temp_NFA
1609+ E2D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1609+ E2CD             >
1609+ E2CD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1609+ E2CE 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1609+ E2D2 41 54 45    >
1609+ E2D5             >                org     $-1                 // alter last byte of Name just above to set
1609+ E2D4 C5          >                db      {b $} | END_BIT     // msb as name end
1609+ E2D5             >
1609+ E2D5 C2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1609+ E2D7             >Prev_Ptr        defl    Heap_Ptr
1609+ E2D7             >
1609+ E2D7             >mirror_Ptr      defl    $
1609+ E2D7             >
1609+ E2D7 83 25       >                dw      Dict_Ptr + 2        // xt
1609+ E2D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1609+ E2D9             >
1609+ E2D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1609+ E2D9             >
1609+ E2D9             >//              ______________________________________________________________________
1609+ E2D9             >//              Dictionary part
1609+ E2D9             >
1609+ E2D9             >                org     Dict_Ptr
1609+ 2581             >
1609+ 2581 D7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1609+ 2583             >
1609+ 2583             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1609+ 2583 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1609+ 2583 ~           >
1609+ 2583 ~           >
1609+ 2583             >                endif           ; ok        // for other definitions it "points" the correct handler
1609+ 2583             >                // Use of "; ok" to suppress "warning[fwdref]"
1609+ 2583             >
1609+ 2583             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1610+ 2583 D9                           exx
1611+ 2584 D1                           pop     de                  // d1.H
1612+ 2585 C1                           pop     bc                  // d1.L
1613+ 2586 AF                           xor     a
1614+ 2587 67                           ld      h, a
1615+ 2588 6F                           ld      l, a
1616+ 2589 ED 42                        sbc     hl, bc              // subtact from zero
1617+ 258B E5                           push    hl                  // > d2-L
1618+ 258C
1619+ 258C 18 EB                        jr      Negate_Ptr
1620+ 258E              //              ld      h, a
1621+ 258E              //              ld      l, a
1622+ 258E              //              sbc     hl, de              // subtract from zero with carry
1623+ 258E                                                          // > d2-H
1624+ 258E              //              push    hl
1625+ 258E              //              exx
1626+ 258E              //              next
1627+ 258E
1628+ 258E              //  ______________________________________________________________________
1629+ 258E              //
1630+ 258E              // over         n1 n2 -- n1 n2 n1
1631+ 258E              // copy the second value of stack and put it on top.
1632+ 258E                              New_Def OVER, "OVER", is_code, is_normal
1632+ 258E             >
1632+ 258E             >Dict_Ptr        defl    $
1632+ 258E             >
1632+ 258E             >//              ______________________________________________________________________
1632+ 258E             >//              Heap part
1632+ 258E             >
1632+ 258E             >
1632+ 258E             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E2D9             >
1632+ E2D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E2D9             >Latest_Definition defl  Heap_Ptr
1632+ E2D9             >
1632+ E2D9             >                // dummy db directives used to calculate length of namec
1632+ E2D9 4F 56 45 52 >                db      "OVER"
1632+ E2DD             >len_NFA         defl    $ - temp_NFA
1632+ E2DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E2D9             >
1632+ E2D9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E2DA 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1632+ E2DE             >                org     $-1                 // alter last byte of Name just above to set
1632+ E2DD D2          >                db      {b $} | END_BIT     // msb as name end
1632+ E2DE             >
1632+ E2DE CD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E2E0             >Prev_Ptr        defl    Heap_Ptr
1632+ E2E0             >
1632+ E2E0             >mirror_Ptr      defl    $
1632+ E2E0             >
1632+ E2E0 90 25       >                dw      Dict_Ptr + 2        // xt
1632+ E2E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E2E2             >
1632+ E2E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E2E2             >
1632+ E2E2             >//              ______________________________________________________________________
1632+ E2E2             >//              Dictionary part
1632+ E2E2             >
1632+ E2E2             >                org     Dict_Ptr
1632+ 258E             >
1632+ 258E E0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 2590             >
1632+ 2590             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 2590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1632+ 2590 ~           >
1632+ 2590 ~           >
1632+ 2590             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 2590             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 2590             >
1632+ 2590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 2590                              // exx     // we can use af instead OPTIMIZATION possible
1634+ 2590 F1                           pop     af                  //   n2
1635+ 2591 E1                           pop     hl                  // < n1
1636+ 2592 E5                           push    hl                  // > n1
1637+ 2593 F5                           push    af                  // > n2
1638+ 2594 E5                           push    hl                  // > n1
1639+ 2595                              // exx
1640+ 2595                              next
1640+ 2595 DD E9       >                jp      (ix)
1641+ 2597
1642+ 2597              //  ______________________________________________________________________
1643+ 2597              //
1644+ 2597              // drop         n1 --
1645+ 2597              // drops the top of stack
1646+ 2597                              New_Def DROP, "DROP", is_code, is_normal
1646+ 2597             >
1646+ 2597             >Dict_Ptr        defl    $
1646+ 2597             >
1646+ 2597             >//              ______________________________________________________________________
1646+ 2597             >//              Heap part
1646+ 2597             >
1646+ 2597             >
1646+ 2597             >                org     (Heap_Ptr & $1FFF) + $E000
1646+ E2E2             >
1646+ E2E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1646+ E2E2             >Latest_Definition defl  Heap_Ptr
1646+ E2E2             >
1646+ E2E2             >                // dummy db directives used to calculate length of namec
1646+ E2E2 44 52 4F 50 >                db      "DROP"
1646+ E2E6             >len_NFA         defl    $ - temp_NFA
1646+ E2E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1646+ E2E2             >
1646+ E2E2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1646+ E2E3 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1646+ E2E7             >                org     $-1                 // alter last byte of Name just above to set
1646+ E2E6 D0          >                db      {b $} | END_BIT     // msb as name end
1646+ E2E7             >
1646+ E2E7 D9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1646+ E2E9             >Prev_Ptr        defl    Heap_Ptr
1646+ E2E9             >
1646+ E2E9             >mirror_Ptr      defl    $
1646+ E2E9             >
1646+ E2E9 99 25       >                dw      Dict_Ptr + 2        // xt
1646+ E2EB             >Heap_Ptr        defl    $ - $E000           // save current HP
1646+ E2EB             >
1646+ E2EB             >Current_HP      defl  $ - $E000             // used to set HP once!
1646+ E2EB             >
1646+ E2EB             >//              ______________________________________________________________________
1646+ E2EB             >//              Dictionary part
1646+ E2EB             >
1646+ E2EB             >                org     Dict_Ptr
1646+ 2597             >
1646+ 2597 E9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1646+ 2599             >
1646+ 2599             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1646+ 2599 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1646+ 2599 ~           >
1646+ 2599 ~           >
1646+ 2599             >                endif           ; ok        // for other definitions it "points" the correct handler
1646+ 2599             >                // Use of "; ok" to suppress "warning[fwdref]"
1646+ 2599             >
1646+ 2599             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1647+ 2599 E1                           pop     hl                  // < n1 and discard previous TOS
1648+ 259A                              next
1648+ 259A DD E9       >                jp      (ix)
1649+ 259C
1650+ 259C              //  ______________________________________________________________________
1651+ 259C              //
1652+ 259C              // nip          n1 n2 -- n2
1653+ 259C              // drops the second elemento on the stack
1654+ 259C                              New_Def NIP, "NIP", is_code, is_normal
1654+ 259C             >
1654+ 259C             >Dict_Ptr        defl    $
1654+ 259C             >
1654+ 259C             >//              ______________________________________________________________________
1654+ 259C             >//              Heap part
1654+ 259C             >
1654+ 259C             >
1654+ 259C             >                org     (Heap_Ptr & $1FFF) + $E000
1654+ E2EB             >
1654+ E2EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1654+ E2EB             >Latest_Definition defl  Heap_Ptr
1654+ E2EB             >
1654+ E2EB             >                // dummy db directives used to calculate length of namec
1654+ E2EB 4E 49 50    >                db      "NIP"
1654+ E2EE             >len_NFA         defl    $ - temp_NFA
1654+ E2EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1654+ E2EB             >
1654+ E2EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1654+ E2EC 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1654+ E2EF             >                org     $-1                 // alter last byte of Name just above to set
1654+ E2EE D0          >                db      {b $} | END_BIT     // msb as name end
1654+ E2EF             >
1654+ E2EF E2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1654+ E2F1             >Prev_Ptr        defl    Heap_Ptr
1654+ E2F1             >
1654+ E2F1             >mirror_Ptr      defl    $
1654+ E2F1             >
1654+ E2F1 9E 25       >                dw      Dict_Ptr + 2        // xt
1654+ E2F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1654+ E2F3             >
1654+ E2F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1654+ E2F3             >
1654+ E2F3             >//              ______________________________________________________________________
1654+ E2F3             >//              Dictionary part
1654+ E2F3             >
1654+ E2F3             >                org     Dict_Ptr
1654+ 259C             >
1654+ 259C F1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1654+ 259E             >
1654+ 259E             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1654+ 259E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1654+ 259E ~           >
1654+ 259E ~           >
1654+ 259E             >                endif           ; ok        // for other definitions it "points" the correct handler
1654+ 259E             >                // Use of "; ok" to suppress "warning[fwdref]"
1654+ 259E             >
1654+ 259E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1655+ 259E
1656+ 259E E1                           pop     hl                  // < n1 discarded
1657+ 259F E3                           ex      (sp), hl
1658+ 25A0                              next
1658+ 25A0 DD E9       >                jp      (ix)
1659+ 25A2
1660+ 25A2              //  ______________________________________________________________________
1661+ 25A2              //
1662+ 25A2              // tuck         n1 n2 -- n2 n1 n2
1663+ 25A2              // copy the top element after the second.
1664+ 25A2                              New_Def TUCK, "TUCK", is_code, is_normal
1664+ 25A2             >
1664+ 25A2             >Dict_Ptr        defl    $
1664+ 25A2             >
1664+ 25A2             >//              ______________________________________________________________________
1664+ 25A2             >//              Heap part
1664+ 25A2             >
1664+ 25A2             >
1664+ 25A2             >                org     (Heap_Ptr & $1FFF) + $E000
1664+ E2F3             >
1664+ E2F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1664+ E2F3             >Latest_Definition defl  Heap_Ptr
1664+ E2F3             >
1664+ E2F3             >                // dummy db directives used to calculate length of namec
1664+ E2F3 54 55 43 4B >                db      "TUCK"
1664+ E2F7             >len_NFA         defl    $ - temp_NFA
1664+ E2F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1664+ E2F3             >
1664+ E2F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1664+ E2F4 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1664+ E2F8             >                org     $-1                 // alter last byte of Name just above to set
1664+ E2F7 CB          >                db      {b $} | END_BIT     // msb as name end
1664+ E2F8             >
1664+ E2F8 EB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1664+ E2FA             >Prev_Ptr        defl    Heap_Ptr
1664+ E2FA             >
1664+ E2FA             >mirror_Ptr      defl    $
1664+ E2FA             >
1664+ E2FA A4 25       >                dw      Dict_Ptr + 2        // xt
1664+ E2FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1664+ E2FC             >
1664+ E2FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1664+ E2FC             >
1664+ E2FC             >//              ______________________________________________________________________
1664+ E2FC             >//              Dictionary part
1664+ E2FC             >
1664+ E2FC             >                org     Dict_Ptr
1664+ 25A2             >
1664+ 25A2 FA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1664+ 25A4             >
1664+ 25A4             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1664+ 25A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1664+ 25A4 ~           >
1664+ 25A4 ~           >
1664+ 25A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1664+ 25A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1664+ 25A4             >
1664+ 25A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1665+ 25A4 E1                           pop     hl
1666+ 25A5 F1                           pop     af                  // < n1
1667+ 25A6 E5                           push    hl                  // > n2  and TOS
1668+ 25A7 F5                           push    af                  // > n1
1669+ 25A8 E5                           push    hl
1670+ 25A9                              next
1670+ 25A9 DD E9       >                jp      (ix)
1671+ 25AB
1672+ 25AB              //  ______________________________________________________________________
1673+ 25AB              //
1674+ 25AB              // swap         n1 n2 -- n2 n1
1675+ 25AB              // swaps the two values on top of stack
1676+ 25AB                              New_Def SWAP, "SWAP", is_code, is_normal
1676+ 25AB             >
1676+ 25AB             >Dict_Ptr        defl    $
1676+ 25AB             >
1676+ 25AB             >//              ______________________________________________________________________
1676+ 25AB             >//              Heap part
1676+ 25AB             >
1676+ 25AB             >
1676+ 25AB             >                org     (Heap_Ptr & $1FFF) + $E000
1676+ E2FC             >
1676+ E2FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1676+ E2FC             >Latest_Definition defl  Heap_Ptr
1676+ E2FC             >
1676+ E2FC             >                // dummy db directives used to calculate length of namec
1676+ E2FC 53 57 41 50 >                db      "SWAP"
1676+ E300             >len_NFA         defl    $ - temp_NFA
1676+ E300             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1676+ E2FC             >
1676+ E2FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1676+ E2FD 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1676+ E301             >                org     $-1                 // alter last byte of Name just above to set
1676+ E300 D0          >                db      {b $} | END_BIT     // msb as name end
1676+ E301             >
1676+ E301 F3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1676+ E303             >Prev_Ptr        defl    Heap_Ptr
1676+ E303             >
1676+ E303             >mirror_Ptr      defl    $
1676+ E303             >
1676+ E303 AD 25       >                dw      Dict_Ptr + 2        // xt
1676+ E305             >Heap_Ptr        defl    $ - $E000           // save current HP
1676+ E305             >
1676+ E305             >Current_HP      defl  $ - $E000             // used to set HP once!
1676+ E305             >
1676+ E305             >//              ______________________________________________________________________
1676+ E305             >//              Dictionary part
1676+ E305             >
1676+ E305             >                org     Dict_Ptr
1676+ 25AB             >
1676+ 25AB 03 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1676+ 25AD             >
1676+ 25AD             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1676+ 25AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1676+ 25AD ~           >
1676+ 25AD ~           >
1676+ 25AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1676+ 25AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1676+ 25AD             >
1676+ 25AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1677+ 25AD E1                           pop     hl                  // < n1
1678+ 25AE E3                           ex      (sp),hl             // > n2
1679+ 25AF E5                           push    hl                  // copy n1 to TOS
1680+ 25B0                              next
1680+ 25B0 DD E9       >                jp      (ix)
1681+ 25B2
1682+ 25B2              //  ______________________________________________________________________
1683+ 25B2              //
1684+ 25B2              // dup         n -- n n
1685+ 25B2              // duplicates the top value of stack
1686+ 25B2                              New_Def DUP, "DUP", is_code, is_normal
1686+ 25B2             >
1686+ 25B2             >Dict_Ptr        defl    $
1686+ 25B2             >
1686+ 25B2             >//              ______________________________________________________________________
1686+ 25B2             >//              Heap part
1686+ 25B2             >
1686+ 25B2             >
1686+ 25B2             >                org     (Heap_Ptr & $1FFF) + $E000
1686+ E305             >
1686+ E305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1686+ E305             >Latest_Definition defl  Heap_Ptr
1686+ E305             >
1686+ E305             >                // dummy db directives used to calculate length of namec
1686+ E305 44 55 50    >                db      "DUP"
1686+ E308             >len_NFA         defl    $ - temp_NFA
1686+ E308             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1686+ E305             >
1686+ E305 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1686+ E306 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1686+ E309             >                org     $-1                 // alter last byte of Name just above to set
1686+ E308 D0          >                db      {b $} | END_BIT     // msb as name end
1686+ E309             >
1686+ E309 FC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1686+ E30B             >Prev_Ptr        defl    Heap_Ptr
1686+ E30B             >
1686+ E30B             >mirror_Ptr      defl    $
1686+ E30B             >
1686+ E30B B4 25       >                dw      Dict_Ptr + 2        // xt
1686+ E30D             >Heap_Ptr        defl    $ - $E000           // save current HP
1686+ E30D             >
1686+ E30D             >Current_HP      defl  $ - $E000             // used to set HP once!
1686+ E30D             >
1686+ E30D             >//              ______________________________________________________________________
1686+ E30D             >//              Dictionary part
1686+ E30D             >
1686+ E30D             >                org     Dict_Ptr
1686+ 25B2             >
1686+ 25B2 0B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1686+ 25B4             >
1686+ 25B4             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1686+ 25B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1686+ 25B4 ~           >
1686+ 25B4 ~           >
1686+ 25B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1686+ 25B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1686+ 25B4             >
1686+ 25B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1687+ 25B4 E1                           pop     hl
1688+ 25B5 E5                           push    hl                  // > n duplicate TOS
1689+ 25B6 E5                           push    hl
1690+ 25B7                              next
1690+ 25B7 DD E9       >                jp      (ix)
1691+ 25B9
1692+ 25B9              //  ______________________________________________________________________
1693+ 25B9              //
1694+ 25B9              // rot         n1 n2 n3 -- n2 n3 n1
1695+ 25B9              // Rotates the 3 top values of stack by picking the 3rd in access-order
1696+ 25B9              // and putting it on top. The other two are shifted down one place.
1697+ 25B9                              New_Def ROT, "ROT", is_code, is_normal
1697+ 25B9             >
1697+ 25B9             >Dict_Ptr        defl    $
1697+ 25B9             >
1697+ 25B9             >//              ______________________________________________________________________
1697+ 25B9             >//              Heap part
1697+ 25B9             >
1697+ 25B9             >
1697+ 25B9             >                org     (Heap_Ptr & $1FFF) + $E000
1697+ E30D             >
1697+ E30D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ E30D             >Latest_Definition defl  Heap_Ptr
1697+ E30D             >
1697+ E30D             >                // dummy db directives used to calculate length of namec
1697+ E30D 52 4F 54    >                db      "ROT"
1697+ E310             >len_NFA         defl    $ - temp_NFA
1697+ E310             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ E30D             >
1697+ E30D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ E30E 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1697+ E311             >                org     $-1                 // alter last byte of Name just above to set
1697+ E310 D4          >                db      {b $} | END_BIT     // msb as name end
1697+ E311             >
1697+ E311 05 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1697+ E313             >Prev_Ptr        defl    Heap_Ptr
1697+ E313             >
1697+ E313             >mirror_Ptr      defl    $
1697+ E313             >
1697+ E313 BB 25       >                dw      Dict_Ptr + 2        // xt
1697+ E315             >Heap_Ptr        defl    $ - $E000           // save current HP
1697+ E315             >
1697+ E315             >Current_HP      defl  $ - $E000             // used to set HP once!
1697+ E315             >
1697+ E315             >//              ______________________________________________________________________
1697+ E315             >//              Dictionary part
1697+ E315             >
1697+ E315             >                org     Dict_Ptr
1697+ 25B9             >
1697+ 25B9 13 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1697+ 25BB             >
1697+ 25BB             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 25BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1697+ 25BB ~           >
1697+ 25BB ~           >
1697+ 25BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 25BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 25BB             >
1697+ 25BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 25BB                          //  exx
1699+ 25BB F1                           pop     af                  // < n3
1700+ 25BC E1                           pop     hl                  // < n2
1701+ 25BD E3                           ex      (sp),hl             // > n2 < n1
1702+ 25BE F5                           push    af                  // > n3
1703+ 25BF E5                           push    hl                  // copy n1 to TOS
1704+ 25C0                          //  exx
1705+ 25C0                              next
1705+ 25C0 DD E9       >                jp      (ix)
1706+ 25C2
1707+ 25C2              //  ______________________________________________________________________
1708+ 25C2              //
1709+ 25C2              // -rot         n1 n2 n3 -- n3 n1 n2
1710+ 25C2              // Rotates the 3 top values of stack by picking the 1st in access-order
1711+ 25C2              // and putting back to 3rd place. The other two are shifted down one place.
1712+ 25C2                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1712+ 25C2             >
1712+ 25C2             >Dict_Ptr        defl    $
1712+ 25C2             >
1712+ 25C2             >//              ______________________________________________________________________
1712+ 25C2             >//              Heap part
1712+ 25C2             >
1712+ 25C2             >
1712+ 25C2             >                org     (Heap_Ptr & $1FFF) + $E000
1712+ E315             >
1712+ E315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1712+ E315             >Latest_Definition defl  Heap_Ptr
1712+ E315             >
1712+ E315             >                // dummy db directives used to calculate length of namec
1712+ E315 2D 52 4F 54 >                db      "-ROT"
1712+ E319             >len_NFA         defl    $ - temp_NFA
1712+ E319             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1712+ E315             >
1712+ E315 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1712+ E316 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1712+ E31A             >                org     $-1                 // alter last byte of Name just above to set
1712+ E319 D4          >                db      {b $} | END_BIT     // msb as name end
1712+ E31A             >
1712+ E31A 0D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1712+ E31C             >Prev_Ptr        defl    Heap_Ptr
1712+ E31C             >
1712+ E31C             >mirror_Ptr      defl    $
1712+ E31C             >
1712+ E31C C4 25       >                dw      Dict_Ptr + 2        // xt
1712+ E31E             >Heap_Ptr        defl    $ - $E000           // save current HP
1712+ E31E             >
1712+ E31E             >Current_HP      defl  $ - $E000             // used to set HP once!
1712+ E31E             >
1712+ E31E             >//              ______________________________________________________________________
1712+ E31E             >//              Dictionary part
1712+ E31E             >
1712+ E31E             >                org     Dict_Ptr
1712+ 25C2             >
1712+ 25C2 1C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1712+ 25C4             >
1712+ 25C4             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1712+ 25C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1712+ 25C4 ~           >
1712+ 25C4 ~           >
1712+ 25C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1712+ 25C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1712+ 25C4             >
1712+ 25C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1713+ 25C4                          //  exx
1714+ 25C4 E1                           pop     hl                  // < n3
1715+ 25C5 F1                           pop     af                  // < n2
1716+ 25C6 E3                           ex      (sp),hl             // > n3 < n1
1717+ 25C7 E5                           push    hl                  // > n1
1718+ 25C8 F5                           push    af                  // copy n3 to TOS
1719+ 25C9                          //  exx
1720+ 25C9                              next
1720+ 25C9 DD E9       >                jp      (ix)
1721+ 25CB
1722+ 25CB              //  ______________________________________________________________________
1723+ 25CB              //
1724+ 25CB              // pick        n1 -- nx
1725+ 25CB              // picks the nth element from TOS
1726+ 25CB                              New_Def PICK, "PICK", is_code, is_normal
1726+ 25CB             >
1726+ 25CB             >Dict_Ptr        defl    $
1726+ 25CB             >
1726+ 25CB             >//              ______________________________________________________________________
1726+ 25CB             >//              Heap part
1726+ 25CB             >
1726+ 25CB             >
1726+ 25CB             >                org     (Heap_Ptr & $1FFF) + $E000
1726+ E31E             >
1726+ E31E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1726+ E31E             >Latest_Definition defl  Heap_Ptr
1726+ E31E             >
1726+ E31E             >                // dummy db directives used to calculate length of namec
1726+ E31E 50 49 43 4B >                db      "PICK"
1726+ E322             >len_NFA         defl    $ - temp_NFA
1726+ E322             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1726+ E31E             >
1726+ E31E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1726+ E31F 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1726+ E323             >                org     $-1                 // alter last byte of Name just above to set
1726+ E322 CB          >                db      {b $} | END_BIT     // msb as name end
1726+ E323             >
1726+ E323 15 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1726+ E325             >Prev_Ptr        defl    Heap_Ptr
1726+ E325             >
1726+ E325             >mirror_Ptr      defl    $
1726+ E325             >
1726+ E325 CD 25       >                dw      Dict_Ptr + 2        // xt
1726+ E327             >Heap_Ptr        defl    $ - $E000           // save current HP
1726+ E327             >
1726+ E327             >Current_HP      defl  $ - $E000             // used to set HP once!
1726+ E327             >
1726+ E327             >//              ______________________________________________________________________
1726+ E327             >//              Dictionary part
1726+ E327             >
1726+ E327             >                org     Dict_Ptr
1726+ 25CB             >
1726+ 25CB 25 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1726+ 25CD             >
1726+ 25CD             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1726+ 25CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1726+ 25CD ~           >
1726+ 25CD ~           >
1726+ 25CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1726+ 25CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1726+ 25CD             >
1726+ 25CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1727+ 25CD E1                           pop     hl                  // take TOS as index
1728+ 25CE 29                           add     hl, hl              // as cells
1729+ 25CF 39                           add     hl, sp              // from Stack Pointer
1730+ 25D0 7E                           ld      a, (hl)             // replace TOS
1731+ 25D1 23                           inc     hl
1732+ 25D2 66                           ld      h, (hl)
1733+ 25D3 6F                           ld      l, a
1734+ 25D4 E5                           push    hl
1735+ 25D5                              next
1735+ 25D5 DD E9       >                jp      (ix)
1736+ 25D7
1737+ 25D7
1738+ 25D7              //  ______________________________________________________________________
1739+ 25D7              //
1740+ 25D7              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1741+ 25D7              // picks the nth element from TOS
1742+ 25D7              //              New_Def ROLL, "ROLL", is_code, is_normal
1743+ 25D7              //              exx                     // we need all registers free
1744+ 25D7              //              pop     hl              // number of cells to roll
1745+ 25D7              //              ld      a, h
1746+ 25D7              //              or       l
1747+ 25D7              //              jr      z, Roll_Zero
1748+ 25D7              //                  add     hl, hl              // number of bytes to move
1749+ 25D7              //                  ld      b, h
1750+ 25D7              //                  ld      c, l
1751+ 25D7              //                  add     hl, sp          // address of n1
1752+ 25D7              //                  ld      a, (hl)         // take n1 into a and a,
1753+ 25D7              //                  inc     hl
1754+ 25D7              //                  ex      af, af'
1755+ 25D7              //                  ld      a, (hl)         // take n1 into a and a,
1756+ 25D7              //                  ld      d, h
1757+ 25D7              //                  ld      e, l
1758+ 25D7              //                  dec     hl
1759+ 25D7              //                  dec     hl
1760+ 25D7              //                  lddr
1761+ 25D7              //                  ex      de, hl
1762+ 25D7              //                  ld      (hl), a
1763+ 25D7              //                  dec     hl
1764+ 25D7              //                  ex      af, af'
1765+ 25D7              //                  ld      (hl), a
1766+ 25D7              //Roll_Zero:
1767+ 25D7              //              exx
1768+ 25D7              //              next
1769+ 25D7
1770+ 25D7
1771+ 25D7              //  ______________________________________________________________________
1772+ 25D7              //
1773+ 25D7              // 2over        d1 d2 -- d1 d2 d1
1774+ 25D7              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1775+ 25D7              // copy the second double of stack and put on top.
1776+ 25D7                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1776+ 25D7             >
1776+ 25D7             >Dict_Ptr        defl    $
1776+ 25D7             >
1776+ 25D7             >//              ______________________________________________________________________
1776+ 25D7             >//              Heap part
1776+ 25D7             >
1776+ 25D7             >
1776+ 25D7             >                org     (Heap_Ptr & $1FFF) + $E000
1776+ E327             >
1776+ E327             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1776+ E327             >Latest_Definition defl  Heap_Ptr
1776+ E327             >
1776+ E327             >                // dummy db directives used to calculate length of namec
1776+ E327 32 4F 56 45 >                db      "2OVER"
1776+ E32B 52          >
1776+ E32C             >len_NFA         defl    $ - temp_NFA
1776+ E32C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1776+ E327             >
1776+ E327 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1776+ E328 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1776+ E32C 52          >
1776+ E32D             >                org     $-1                 // alter last byte of Name just above to set
1776+ E32C D2          >                db      {b $} | END_BIT     // msb as name end
1776+ E32D             >
1776+ E32D 1E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1776+ E32F             >Prev_Ptr        defl    Heap_Ptr
1776+ E32F             >
1776+ E32F             >mirror_Ptr      defl    $
1776+ E32F             >
1776+ E32F D9 25       >                dw      Dict_Ptr + 2        // xt
1776+ E331             >Heap_Ptr        defl    $ - $E000           // save current HP
1776+ E331             >
1776+ E331             >Current_HP      defl  $ - $E000             // used to set HP once!
1776+ E331             >
1776+ E331             >//              ______________________________________________________________________
1776+ E331             >//              Dictionary part
1776+ E331             >
1776+ E331             >                org     Dict_Ptr
1776+ 25D7             >
1776+ 25D7 2F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1776+ 25D9             >
1776+ 25D9             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1776+ 25D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1776+ 25D9 ~           >
1776+ 25D9 ~           >
1776+ 25D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1776+ 25D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1776+ 25D9             >
1776+ 25D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1777+ 25D9 D9                           exx
1778+ 25DA E1                           pop     hl      // n4
1779+ 25DB D1                           pop     de      // n3 : d2
1780+ 25DC C1                           pop     bc      // n2
1781+ 25DD F1                           pop     af      // n1 : d1
1782+ 25DE F5                           push    af      // n1
1783+ 25DF C5                           push    bc      // n2 : d1
1784+ 25E0 D5                           push    de      // n3
1785+ 25E1 E5                           push    hl      // n4 : d2
1786+ 25E2 F5                           push    af      // n1
1787+ 25E3 C5                           push    bc      // n2 : d1
1788+ 25E4 D9                           exx
1789+ 25E5                              next
1789+ 25E5 DD E9       >                jp      (ix)
1790+ 25E7
1791+ 25E7              //  ______________________________________________________________________
1792+ 25E7              //
1793+ 25E7              // 2drop        d --
1794+ 25E7              //              n1 n2 --
1795+ 25E7              // drops the top double from stack
1796+ 25E7                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1796+ 25E7             >
1796+ 25E7             >Dict_Ptr        defl    $
1796+ 25E7             >
1796+ 25E7             >//              ______________________________________________________________________
1796+ 25E7             >//              Heap part
1796+ 25E7             >
1796+ 25E7             >
1796+ 25E7             >                org     (Heap_Ptr & $1FFF) + $E000
1796+ E331             >
1796+ E331             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1796+ E331             >Latest_Definition defl  Heap_Ptr
1796+ E331             >
1796+ E331             >                // dummy db directives used to calculate length of namec
1796+ E331 32 44 52 4F >                db      "2DROP"
1796+ E335 50          >
1796+ E336             >len_NFA         defl    $ - temp_NFA
1796+ E336             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1796+ E331             >
1796+ E331 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1796+ E332 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1796+ E336 50          >
1796+ E337             >                org     $-1                 // alter last byte of Name just above to set
1796+ E336 D0          >                db      {b $} | END_BIT     // msb as name end
1796+ E337             >
1796+ E337 27 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1796+ E339             >Prev_Ptr        defl    Heap_Ptr
1796+ E339             >
1796+ E339             >mirror_Ptr      defl    $
1796+ E339             >
1796+ E339 E9 25       >                dw      Dict_Ptr + 2        // xt
1796+ E33B             >Heap_Ptr        defl    $ - $E000           // save current HP
1796+ E33B             >
1796+ E33B             >Current_HP      defl  $ - $E000             // used to set HP once!
1796+ E33B             >
1796+ E33B             >//              ______________________________________________________________________
1796+ E33B             >//              Dictionary part
1796+ E33B             >
1796+ E33B             >                org     Dict_Ptr
1796+ 25E7             >
1796+ 25E7 39 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1796+ 25E9             >
1796+ 25E9             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1796+ 25E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1796+ 25E9 ~           >
1796+ 25E9 ~           >
1796+ 25E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1796+ 25E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1796+ 25E9             >
1796+ 25E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1797+ 25E9 E1                           pop     hl
1798+ 25EA E1                           pop     hl
1799+ 25EB                              next
1799+ 25EB DD E9       >                jp      (ix)
1800+ 25ED
1801+ 25ED              //  ______________________________________________________________________
1802+ 25ED              //
1803+ 25ED              // 2nip         d1 d2 -- d2
1804+ 25ED              //              n1 n2 n3 n4 -- n3 n4
1805+ 25ED              // drops the second double on the stack
1806+ 25ED              //              New_Def TWO_NIP, 4, "2nip"
1807+ 25ED              //              ...
1808+ 25ED
1809+ 25ED              //  ______________________________________________________________________
1810+ 25ED              //
1811+ 25ED              // 2tuck         d1 d2 -- d2 d1 d2
1812+ 25ED              // copy the top element after the second.
1813+ 25ED              //              New_Def TWO_TUCK, 5, "2tuck"
1814+ 25ED              //              ...
1815+ 25ED
1816+ 25ED              //  ______________________________________________________________________
1817+ 25ED              //
1818+ 25ED              // 2swap         d1 d2 -- d2 d1
1819+ 25ED              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1820+ 25ED              // swaps the two doubles on top of stack
1821+ 25ED                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1821+ 25ED             >
1821+ 25ED             >Dict_Ptr        defl    $
1821+ 25ED             >
1821+ 25ED             >//              ______________________________________________________________________
1821+ 25ED             >//              Heap part
1821+ 25ED             >
1821+ 25ED             >
1821+ 25ED             >                org     (Heap_Ptr & $1FFF) + $E000
1821+ E33B             >
1821+ E33B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1821+ E33B             >Latest_Definition defl  Heap_Ptr
1821+ E33B             >
1821+ E33B             >                // dummy db directives used to calculate length of namec
1821+ E33B 32 53 57 41 >                db      "2SWAP"
1821+ E33F 50          >
1821+ E340             >len_NFA         defl    $ - temp_NFA
1821+ E340             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1821+ E33B             >
1821+ E33B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1821+ E33C 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1821+ E340 50          >
1821+ E341             >                org     $-1                 // alter last byte of Name just above to set
1821+ E340 D0          >                db      {b $} | END_BIT     // msb as name end
1821+ E341             >
1821+ E341 31 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1821+ E343             >Prev_Ptr        defl    Heap_Ptr
1821+ E343             >
1821+ E343             >mirror_Ptr      defl    $
1821+ E343             >
1821+ E343 EF 25       >                dw      Dict_Ptr + 2        // xt
1821+ E345             >Heap_Ptr        defl    $ - $E000           // save current HP
1821+ E345             >
1821+ E345             >Current_HP      defl  $ - $E000             // used to set HP once!
1821+ E345             >
1821+ E345             >//              ______________________________________________________________________
1821+ E345             >//              Dictionary part
1821+ E345             >
1821+ E345             >                org     Dict_Ptr
1821+ 25ED             >
1821+ 25ED 43 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1821+ 25EF             >
1821+ 25EF             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1821+ 25EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1821+ 25EF ~           >
1821+ 25EF ~           >
1821+ 25EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1821+ 25EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1821+ 25EF             >
1821+ 25EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1822+ 25EF D9                           exx
1823+ 25F0 F1                           pop     af                  // < d2-H
1824+ 25F1 E1                           pop     hl                  // < d2-L
1825+ 25F2 D1                           pop     de                  // < d1-H
1826+ 25F3 E3                           ex      (sp), hl            // < d1-L > d2-L
1827+ 25F4 F5                           push    af                  //        > d2-H
1828+ 25F5 E5                           push    hl                  //        > d1-L
1829+ 25F6 D5                           push    de                  //        > d1-H
1830+ 25F7 D9                           exx
1831+ 25F8                              next
1831+ 25F8 DD E9       >                jp      (ix)
1832+ 25FA
1833+ 25FA              //  ______________________________________________________________________
1834+ 25FA              //
1835+ 25FA              // 2dup         d -- d d
1836+ 25FA              //              n1 n2 -- n1 n2 n1 n2
1837+ 25FA              // duplicates the top double of stack
1838+ 25FA                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1838+ 25FA             >
1838+ 25FA             >Dict_Ptr        defl    $
1838+ 25FA             >
1838+ 25FA             >//              ______________________________________________________________________
1838+ 25FA             >//              Heap part
1838+ 25FA             >
1838+ 25FA             >
1838+ 25FA             >                org     (Heap_Ptr & $1FFF) + $E000
1838+ E345             >
1838+ E345             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1838+ E345             >Latest_Definition defl  Heap_Ptr
1838+ E345             >
1838+ E345             >                // dummy db directives used to calculate length of namec
1838+ E345 32 44 55 50 >                db      "2DUP"
1838+ E349             >len_NFA         defl    $ - temp_NFA
1838+ E349             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1838+ E345             >
1838+ E345 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1838+ E346 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1838+ E34A             >                org     $-1                 // alter last byte of Name just above to set
1838+ E349 D0          >                db      {b $} | END_BIT     // msb as name end
1838+ E34A             >
1838+ E34A 3B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1838+ E34C             >Prev_Ptr        defl    Heap_Ptr
1838+ E34C             >
1838+ E34C             >mirror_Ptr      defl    $
1838+ E34C             >
1838+ E34C FC 25       >                dw      Dict_Ptr + 2        // xt
1838+ E34E             >Heap_Ptr        defl    $ - $E000           // save current HP
1838+ E34E             >
1838+ E34E             >Current_HP      defl  $ - $E000             // used to set HP once!
1838+ E34E             >
1838+ E34E             >//              ______________________________________________________________________
1838+ E34E             >//              Dictionary part
1838+ E34E             >
1838+ E34E             >                org     Dict_Ptr
1838+ 25FA             >
1838+ 25FA 4C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1838+ 25FC             >
1838+ 25FC             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1838+ 25FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1838+ 25FC ~           >
1838+ 25FC ~           >
1838+ 25FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1838+ 25FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1838+ 25FC             >
1838+ 25FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1839+ 25FC E1                           pop     hl                  // < d-H
1840+ 25FD F1                           pop     af                  // < d-L
1841+ 25FE F5                           push    af                  // < d-L
1842+ 25FF E5                           push    hl                  //       > d-H
1843+ 2600 F5                           push    af                  //       > d-L
1844+ 2601 E5                           push    hl                  //       > d-H
1845+ 2602                              next
1845+ 2602 DD E9       >                jp      (ix)
1846+ 2604
1847+ 2604              //  ______________________________________________________________________
1848+ 2604              //
1849+ 2604              // 2rot         d1 d2 d3 -- d2 d3 d1
1850+ 2604              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1851+ 2604              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1852+ 2604              // and putting it on top. The other two are shifted down one place.
1853+ 2604              //              New_Def TWO?ROT, 4, "2rot"
1854+ 2604              //              ...
1855+ 2604              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1856+ 2604              //
1857+ 2604              //      d3  |d2  |d1  |
1858+ 2604              //      h l |h l |h l |
1859+ 2604              // SP   LHED|LHED|LHED|
1860+ 2604              // SP  +0123|4567|89ab|
1861+ 2604              //              ld      hl, $000B
1862+ 2604              //              add     hl, sp
1863+ 2604              //              ld      d, (hl)
1864+ 2604              //              dec     hl
1865+ 2604              //              ld      e, (hl)
1866+ 2604              //              dec     hl
1867+ 2604              //              push    de
1868+ 2604              //              ld      d, (hl)
1869+ 2604              //              dec     hl
1870+ 2604              //              ld      e, (hl)
1871+ 2604              //              dec     hl
1872+ 2604              //              push    de
1873+ 2604
1874+ 2604              //      d1  |d3  |d2  |d1  |
1875+ 2604              //      h l |h l |h l |h l |
1876+ 2604              // SP   LHED|LHED|LHED|LHED|
1877+ 2604              // SP       +0123|4567|89ab|
1878+ 2604
1879+ 2604              //              ld      d, h
1880+ 2604              //              ld      e, l
1881+ 2604              //              inc     de
1882+ 2604              //              inc     de
1883+ 2604              //              inc     de
1884+ 2604              //              inc     de
1885+ 2604              //              push    bc
1886+ 2604              //              ld      bc, $000C
1887+ 2604              //              lddr
1888+ 2604              //              pop     bc
1889+ 2604              //              pop     de
1890+ 2604              //              pop     de
1891+ 2604              //
1892+ 2604              //              next
1893+ 2604
1894+ 2604
1895+ 2604              //  ______________________________________________________________________
1896+ 2604              //
1897+ 2604              // +!           n a --
1898+ 2604              // Sums to the content of address a the number n.
1899+ 2604              // It is the same of  a @ n + a !
1900+ 2604                              New_Def PLUSSTORE, "+!", is_code, is_normal
1900+ 2604             >
1900+ 2604             >Dict_Ptr        defl    $
1900+ 2604             >
1900+ 2604             >//              ______________________________________________________________________
1900+ 2604             >//              Heap part
1900+ 2604             >
1900+ 2604             >
1900+ 2604             >                org     (Heap_Ptr & $1FFF) + $E000
1900+ E34E             >
1900+ E34E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1900+ E34E             >Latest_Definition defl  Heap_Ptr
1900+ E34E             >
1900+ E34E             >                // dummy db directives used to calculate length of namec
1900+ E34E 2B 21       >                db      "+!"
1900+ E350             >len_NFA         defl    $ - temp_NFA
1900+ E350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1900+ E34E             >
1900+ E34E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1900+ E34F 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1900+ E351             >                org     $-1                 // alter last byte of Name just above to set
1900+ E350 A1          >                db      {b $} | END_BIT     // msb as name end
1900+ E351             >
1900+ E351 45 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1900+ E353             >Prev_Ptr        defl    Heap_Ptr
1900+ E353             >
1900+ E353             >mirror_Ptr      defl    $
1900+ E353             >
1900+ E353 06 26       >                dw      Dict_Ptr + 2        // xt
1900+ E355             >Heap_Ptr        defl    $ - $E000           // save current HP
1900+ E355             >
1900+ E355             >Current_HP      defl  $ - $E000             // used to set HP once!
1900+ E355             >
1900+ E355             >//              ______________________________________________________________________
1900+ E355             >//              Dictionary part
1900+ E355             >
1900+ E355             >                org     Dict_Ptr
1900+ 2604             >
1900+ 2604 53 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1900+ 2606             >
1900+ 2606             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1900+ 2606 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1900+ 2606 ~           >
1900+ 2606 ~           >
1900+ 2606             >                endif           ; ok        // for other definitions it "points" the correct handler
1900+ 2606             >                // Use of "; ok" to suppress "warning[fwdref]"
1900+ 2606             >
1900+ 2606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1901+ 2606 D9                           exx
1902+ 2607 E1                           pop     hl                  // hl is the address
1903+ 2608 D1                           pop     de                  // de is the number
1904+ 2609 7E                           ld      a, (hl)
1905+ 260A 83                           add     e
1906+ 260B 77                           ld      (hl), a
1907+ 260C 23                           inc     hl
1908+ 260D 7E                           ld      a, (hl)
1909+ 260E 8A                           adc     d
1910+ 260F 77                           ld      (hl), a
1911+ 2610 D9                           exx
1912+ 2611                              next
1912+ 2611 DD E9       >                jp      (ix)
1913+ 2613
1914+ 2613              //  ______________________________________________________________________
1915+ 2613              //
1916+ 2613              // toggle       a n --
1917+ 2613              // Complements (xor) the byte at addrress  a  with the model n.
1918+ 2613                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1918+ 2613             >
1918+ 2613             >Dict_Ptr        defl    $
1918+ 2613             >
1918+ 2613             >//              ______________________________________________________________________
1918+ 2613             >//              Heap part
1918+ 2613             >
1918+ 2613             >
1918+ 2613             >                org     (Heap_Ptr & $1FFF) + $E000
1918+ E355             >
1918+ E355             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1918+ E355             >Latest_Definition defl  Heap_Ptr
1918+ E355             >
1918+ E355             >                // dummy db directives used to calculate length of namec
1918+ E355 54 4F 47 47 >                db      "TOGGLE"
1918+ E359 4C 45       >
1918+ E35B             >len_NFA         defl    $ - temp_NFA
1918+ E35B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1918+ E355             >
1918+ E355 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1918+ E356 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1918+ E35A 4C 45       >
1918+ E35C             >                org     $-1                 // alter last byte of Name just above to set
1918+ E35B C5          >                db      {b $} | END_BIT     // msb as name end
1918+ E35C             >
1918+ E35C 4E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1918+ E35E             >Prev_Ptr        defl    Heap_Ptr
1918+ E35E             >
1918+ E35E             >mirror_Ptr      defl    $
1918+ E35E             >
1918+ E35E 15 26       >                dw      Dict_Ptr + 2        // xt
1918+ E360             >Heap_Ptr        defl    $ - $E000           // save current HP
1918+ E360             >
1918+ E360             >Current_HP      defl  $ - $E000             // used to set HP once!
1918+ E360             >
1918+ E360             >//              ______________________________________________________________________
1918+ E360             >//              Dictionary part
1918+ E360             >
1918+ E360             >                org     Dict_Ptr
1918+ 2613             >
1918+ 2613 5E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1918+ 2615             >
1918+ 2615             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1918+ 2615 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1918+ 2615 ~           >
1918+ 2615 ~           >
1918+ 2615             >                endif           ; ok        // for other definitions it "points" the correct handler
1918+ 2615             >                // Use of "; ok" to suppress "warning[fwdref]"
1918+ 2615             >
1918+ 2615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1919+ 2615 E1                           pop     hl
1920+ 2616 7D                           ld      a, l
1921+ 2617 E1                           pop     hl
1922+ 2618 AE                           xor     (hl)
1923+ 2619 77                           ld      (hl), a
1924+ 261A
1925+ 261A                              next
1925+ 261A DD E9       >                jp      (ix)
1926+ 261C
1927+ 261C              //  ______________________________________________________________________
1928+ 261C              //
1929+ 261C              // @            a -- n
1930+ 261C              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1931+ 261C                              New_Def FETCH, "@", is_code, is_normal
1931+ 261C             >
1931+ 261C             >Dict_Ptr        defl    $
1931+ 261C             >
1931+ 261C             >//              ______________________________________________________________________
1931+ 261C             >//              Heap part
1931+ 261C             >
1931+ 261C             >
1931+ 261C             >                org     (Heap_Ptr & $1FFF) + $E000
1931+ E360             >
1931+ E360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1931+ E360             >Latest_Definition defl  Heap_Ptr
1931+ E360             >
1931+ E360             >                // dummy db directives used to calculate length of namec
1931+ E360 40          >                db      "@"
1931+ E361             >len_NFA         defl    $ - temp_NFA
1931+ E361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1931+ E360             >
1931+ E360 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1931+ E361 40          >                db      "@"               // name string in 7-bit ascii, but
1931+ E362             >                org     $-1                 // alter last byte of Name just above to set
1931+ E361 C0          >                db      {b $} | END_BIT     // msb as name end
1931+ E362             >
1931+ E362 55 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1931+ E364             >Prev_Ptr        defl    Heap_Ptr
1931+ E364             >
1931+ E364             >mirror_Ptr      defl    $
1931+ E364             >
1931+ E364 1E 26       >                dw      Dict_Ptr + 2        // xt
1931+ E366             >Heap_Ptr        defl    $ - $E000           // save current HP
1931+ E366             >
1931+ E366             >Current_HP      defl  $ - $E000             // used to set HP once!
1931+ E366             >
1931+ E366             >//              ______________________________________________________________________
1931+ E366             >//              Dictionary part
1931+ E366             >
1931+ E366             >                org     Dict_Ptr
1931+ 261C             >
1931+ 261C 64 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1931+ 261E             >
1931+ 261E             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1931+ 261E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1931+ 261E ~           >
1931+ 261E ~           >
1931+ 261E             >                endif           ; ok        // for other definitions it "points" the correct handler
1931+ 261E             >                // Use of "; ok" to suppress "warning[fwdref]"
1931+ 261E             >
1931+ 261E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1932+ 261E E1                           pop     hl
1933+ 261F 7E                           ld      a, (hl)             // low-byte
1934+ 2620 23                           inc     hl
1935+ 2621 66                           ld      h, (hl)             // high-byte
1936+ 2622 6F                           ld      l, a
1937+ 2623 E5                           push    hl
1938+ 2624                              next
1938+ 2624 DD E9       >                jp      (ix)
1939+ 2626
1940+ 2626              //  ______________________________________________________________________
1941+ 2626              //
1942+ 2626              // !            n a --
1943+ 2626              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1944+ 2626                              New_Def STORE, "!", is_code, is_normal
1944+ 2626             >
1944+ 2626             >Dict_Ptr        defl    $
1944+ 2626             >
1944+ 2626             >//              ______________________________________________________________________
1944+ 2626             >//              Heap part
1944+ 2626             >
1944+ 2626             >
1944+ 2626             >                org     (Heap_Ptr & $1FFF) + $E000
1944+ E366             >
1944+ E366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1944+ E366             >Latest_Definition defl  Heap_Ptr
1944+ E366             >
1944+ E366             >                // dummy db directives used to calculate length of namec
1944+ E366 21          >                db      "!"
1944+ E367             >len_NFA         defl    $ - temp_NFA
1944+ E367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1944+ E366             >
1944+ E366 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1944+ E367 21          >                db      "!"               // name string in 7-bit ascii, but
1944+ E368             >                org     $-1                 // alter last byte of Name just above to set
1944+ E367 A1          >                db      {b $} | END_BIT     // msb as name end
1944+ E368             >
1944+ E368 60 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1944+ E36A             >Prev_Ptr        defl    Heap_Ptr
1944+ E36A             >
1944+ E36A             >mirror_Ptr      defl    $
1944+ E36A             >
1944+ E36A 28 26       >                dw      Dict_Ptr + 2        // xt
1944+ E36C             >Heap_Ptr        defl    $ - $E000           // save current HP
1944+ E36C             >
1944+ E36C             >Current_HP      defl  $ - $E000             // used to set HP once!
1944+ E36C             >
1944+ E36C             >//              ______________________________________________________________________
1944+ E36C             >//              Dictionary part
1944+ E36C             >
1944+ E36C             >                org     Dict_Ptr
1944+ 2626             >
1944+ 2626 6A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1944+ 2628             >
1944+ 2628             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1944+ 2628 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1944+ 2628 ~           >
1944+ 2628 ~           >
1944+ 2628             >                endif           ; ok        // for other definitions it "points" the correct handler
1944+ 2628             >                // Use of "; ok" to suppress "warning[fwdref]"
1944+ 2628             >
1944+ 2628             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1945+ 2628 D9                           exx
1946+ 2629 E1                           pop     hl                  // address
1947+ 262A D1                           pop     de                  // < n
1948+ 262B              Store_end:
1949+ 262B 73                           ld      (hl), e             // low-byte
1950+ 262C 23                           inc     hl
1951+ 262D 72                           ld      (hl), d             // high-byte
1952+ 262E D9                           exx
1953+ 262F                              next
1953+ 262F DD E9       >                jp      (ix)
1954+ 2631
1955+ 2631              //  ______________________________________________________________________
1956+ 2631              //
1957+ 2631              // c@           a -- c
1958+ 2631              // fetch a character n from address a
1959+ 2631                              New_Def CFETCH, "C@", is_code, is_normal
1959+ 2631             >
1959+ 2631             >Dict_Ptr        defl    $
1959+ 2631             >
1959+ 2631             >//              ______________________________________________________________________
1959+ 2631             >//              Heap part
1959+ 2631             >
1959+ 2631             >
1959+ 2631             >                org     (Heap_Ptr & $1FFF) + $E000
1959+ E36C             >
1959+ E36C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1959+ E36C             >Latest_Definition defl  Heap_Ptr
1959+ E36C             >
1959+ E36C             >                // dummy db directives used to calculate length of namec
1959+ E36C 43 40       >                db      "C@"
1959+ E36E             >len_NFA         defl    $ - temp_NFA
1959+ E36E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1959+ E36C             >
1959+ E36C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1959+ E36D 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1959+ E36F             >                org     $-1                 // alter last byte of Name just above to set
1959+ E36E C0          >                db      {b $} | END_BIT     // msb as name end
1959+ E36F             >
1959+ E36F 66 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1959+ E371             >Prev_Ptr        defl    Heap_Ptr
1959+ E371             >
1959+ E371             >mirror_Ptr      defl    $
1959+ E371             >
1959+ E371 33 26       >                dw      Dict_Ptr + 2        // xt
1959+ E373             >Heap_Ptr        defl    $ - $E000           // save current HP
1959+ E373             >
1959+ E373             >Current_HP      defl  $ - $E000             // used to set HP once!
1959+ E373             >
1959+ E373             >//              ______________________________________________________________________
1959+ E373             >//              Dictionary part
1959+ E373             >
1959+ E373             >                org     Dict_Ptr
1959+ 2631             >
1959+ 2631 71 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1959+ 2633             >
1959+ 2633             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1959+ 2633 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1959+ 2633 ~           >
1959+ 2633 ~           >
1959+ 2633             >                endif           ; ok        // for other definitions it "points" the correct handler
1959+ 2633             >                // Use of "; ok" to suppress "warning[fwdref]"
1959+ 2633             >
1959+ 2633             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1960+ 2633 E1                           pop     hl
1961+ 2634 6E                           ld      l, (hl)             // low-byte
1962+ 2635 26 00                        ld      h, 0
1963+ 2637
1964+ 2637                              psh1
1964+ 2637 E5          >                push    hl
1964+ 2638 DD E9       >                jp      (ix)
1965+ 263A
1966+ 263A              //  ______________________________________________________________________
1967+ 263A              //
1968+ 263A              // c!           c a --
1969+ 263A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1970+ 263A                              New_Def CSTORE, "C!", is_code, is_normal
1970+ 263A             >
1970+ 263A             >Dict_Ptr        defl    $
1970+ 263A             >
1970+ 263A             >//              ______________________________________________________________________
1970+ 263A             >//              Heap part
1970+ 263A             >
1970+ 263A             >
1970+ 263A             >                org     (Heap_Ptr & $1FFF) + $E000
1970+ E373             >
1970+ E373             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1970+ E373             >Latest_Definition defl  Heap_Ptr
1970+ E373             >
1970+ E373             >                // dummy db directives used to calculate length of namec
1970+ E373 43 21       >                db      "C!"
1970+ E375             >len_NFA         defl    $ - temp_NFA
1970+ E375             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1970+ E373             >
1970+ E373 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1970+ E374 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1970+ E376             >                org     $-1                 // alter last byte of Name just above to set
1970+ E375 A1          >                db      {b $} | END_BIT     // msb as name end
1970+ E376             >
1970+ E376 6C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1970+ E378             >Prev_Ptr        defl    Heap_Ptr
1970+ E378             >
1970+ E378             >mirror_Ptr      defl    $
1970+ E378             >
1970+ E378 3C 26       >                dw      Dict_Ptr + 2        // xt
1970+ E37A             >Heap_Ptr        defl    $ - $E000           // save current HP
1970+ E37A             >
1970+ E37A             >Current_HP      defl  $ - $E000             // used to set HP once!
1970+ E37A             >
1970+ E37A             >//              ______________________________________________________________________
1970+ E37A             >//              Dictionary part
1970+ E37A             >
1970+ E37A             >                org     Dict_Ptr
1970+ 263A             >
1970+ 263A 78 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1970+ 263C             >
1970+ 263C             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1970+ 263C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1970+ 263C ~           >
1970+ 263C ~           >
1970+ 263C             >                endif           ; ok        // for other definitions it "points" the correct handler
1970+ 263C             >                // Use of "; ok" to suppress "warning[fwdref]"
1970+ 263C             >
1970+ 263C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1971+ 263C D9                           exx
1972+ 263D E1                           pop     hl                  // < address
1973+ 263E D1                           pop     de
1974+ 263F 73                           ld      (hl), e             // low-byte
1975+ 2640 D9                           exx
1976+ 2641                              next
1976+ 2641 DD E9       >                jp      (ix)
1977+ 2643
1978+ 2643              //  ______________________________________________________________________
1979+ 2643              //
1980+ 2643              // 2@           a -- d
1981+ 2643              // fetch a 32 bits number d from address a and leaves it on top of the
1982+ 2643              // stack as two single numbers, high part as top of the stack.
1983+ 2643              // A double number is normally kept in CPU registers as HLDE.
1984+ 2643              // On stack a double number is treated as two single numbers
1985+ 2643              // where BC is on the top of the stack and HL is the second from top,
1986+ 2643              // so the sign of the number can be checked on top of stack
1987+ 2643              // and in the stack memory it appears as LHED.
1988+ 2643                              New_Def TWO_FETCH, "2@", is_code, is_normal
1988+ 2643             >
1988+ 2643             >Dict_Ptr        defl    $
1988+ 2643             >
1988+ 2643             >//              ______________________________________________________________________
1988+ 2643             >//              Heap part
1988+ 2643             >
1988+ 2643             >
1988+ 2643             >                org     (Heap_Ptr & $1FFF) + $E000
1988+ E37A             >
1988+ E37A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1988+ E37A             >Latest_Definition defl  Heap_Ptr
1988+ E37A             >
1988+ E37A             >                // dummy db directives used to calculate length of namec
1988+ E37A 32 40       >                db      "2@"
1988+ E37C             >len_NFA         defl    $ - temp_NFA
1988+ E37C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1988+ E37A             >
1988+ E37A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1988+ E37B 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1988+ E37D             >                org     $-1                 // alter last byte of Name just above to set
1988+ E37C C0          >                db      {b $} | END_BIT     // msb as name end
1988+ E37D             >
1988+ E37D 73 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1988+ E37F             >Prev_Ptr        defl    Heap_Ptr
1988+ E37F             >
1988+ E37F             >mirror_Ptr      defl    $
1988+ E37F             >
1988+ E37F 45 26       >                dw      Dict_Ptr + 2        // xt
1988+ E381             >Heap_Ptr        defl    $ - $E000           // save current HP
1988+ E381             >
1988+ E381             >Current_HP      defl  $ - $E000             // used to set HP once!
1988+ E381             >
1988+ E381             >//              ______________________________________________________________________
1988+ E381             >//              Dictionary part
1988+ E381             >
1988+ E381             >                org     Dict_Ptr
1988+ 2643             >
1988+ 2643 7F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1988+ 2645             >
1988+ 2645             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1988+ 2645 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1988+ 2645 ~           >
1988+ 2645 ~           >
1988+ 2645             >                endif           ; ok        // for other definitions it "points" the correct handler
1988+ 2645             >                // Use of "; ok" to suppress "warning[fwdref]"
1988+ 2645             >
1988+ 2645             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1989+ 2645 D9                           exx
1990+ 2646 E1                           pop     hl                  // address
1991+ 2647 5E                           ld      e, (hl)             // low-byte
1992+ 2648 23                           inc     hl
1993+ 2649 56                           ld      d, (hl)             // high-byte
1994+ 264A 23                           inc     hl
1995+ 264B 4E                           ld      c, (hl)             // low-byte
1996+ 264C 23                           inc     hl
1997+ 264D 46                           ld      b, (hl)             // high-byte
1998+ 264E C5                           push    bc
1999+ 264F D5                           push    de
2000+ 2650 D9                           exx
2001+ 2651                              next
2001+ 2651 DD E9       >                jp      (ix)
2002+ 2653
2003+ 2653              //  ______________________________________________________________________
2004+ 2653              //
2005+ 2653              // 2!           d a --
2006+ 2653              // stores a 32 bits number d from address a and leaves it on top of the
2007+ 2653              // stack as two single numbers, high part as top of the stack.
2008+ 2653              // A double number is normally kept in CPU registers as HLDE.
2009+ 2653              // On stack a double number is treated as two single numbers
2010+ 2653              // where BC is on the top of the stack and HL is the second from top,
2011+ 2653              // so the sign of the number can be checked on top of stack
2012+ 2653              // and in the stack memory it appears as LHED.
2013+ 2653                              New_Def TWO_STORE, "2!", is_code, is_normal
2013+ 2653             >
2013+ 2653             >Dict_Ptr        defl    $
2013+ 2653             >
2013+ 2653             >//              ______________________________________________________________________
2013+ 2653             >//              Heap part
2013+ 2653             >
2013+ 2653             >
2013+ 2653             >                org     (Heap_Ptr & $1FFF) + $E000
2013+ E381             >
2013+ E381             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2013+ E381             >Latest_Definition defl  Heap_Ptr
2013+ E381             >
2013+ E381             >                // dummy db directives used to calculate length of namec
2013+ E381 32 21       >                db      "2!"
2013+ E383             >len_NFA         defl    $ - temp_NFA
2013+ E383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2013+ E381             >
2013+ E381 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2013+ E382 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2013+ E384             >                org     $-1                 // alter last byte of Name just above to set
2013+ E383 A1          >                db      {b $} | END_BIT     // msb as name end
2013+ E384             >
2013+ E384 7A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2013+ E386             >Prev_Ptr        defl    Heap_Ptr
2013+ E386             >
2013+ E386             >mirror_Ptr      defl    $
2013+ E386             >
2013+ E386 55 26       >                dw      Dict_Ptr + 2        // xt
2013+ E388             >Heap_Ptr        defl    $ - $E000           // save current HP
2013+ E388             >
2013+ E388             >Current_HP      defl  $ - $E000             // used to set HP once!
2013+ E388             >
2013+ E388             >//              ______________________________________________________________________
2013+ E388             >//              Dictionary part
2013+ E388             >
2013+ E388             >                org     Dict_Ptr
2013+ 2653             >
2013+ 2653 86 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2013+ 2655             >
2013+ 2655             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2013+ 2655 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2013+ 2655 ~           >
2013+ 2655 ~           >
2013+ 2655             >                endif           ; ok        // for other definitions it "points" the correct handler
2013+ 2655             >                // Use of "; ok" to suppress "warning[fwdref]"
2013+ 2655             >
2013+ 2655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2014+ 2655 D9                           exx
2015+ 2656 E1                           pop     hl                  // address
2016+ 2657 C1                           pop     bc                  // < high-part
2017+ 2658 D1                           pop     de                  // < low-part
2018+ 2659 71                           ld      (hl), c
2019+ 265A 23                           inc     hl
2020+ 265B 70                           ld      (hl), b
2021+ 265C 23                           inc     hl
2022+ 265D 18 CC                        jr      Store_end
2023+ 265F                          //  ld      (hl), e
2024+ 265F                          //  inc     hl
2025+ 265F                          //  ld      (hl), d
2026+ 265F                          //  exx
2027+ 265F                          //  next
2028+ 265F
2029+ 265F              //  ______________________________________________________________________
2030+ 265F              //
2031+ 265F              // p@           a -- c
2032+ 265F              // Read one byte from port a and leave the result on top of stack
2033+ 265F                              New_Def PFETCH, "P@", is_code, is_normal
2033+ 265F             >
2033+ 265F             >Dict_Ptr        defl    $
2033+ 265F             >
2033+ 265F             >//              ______________________________________________________________________
2033+ 265F             >//              Heap part
2033+ 265F             >
2033+ 265F             >
2033+ 265F             >                org     (Heap_Ptr & $1FFF) + $E000
2033+ E388             >
2033+ E388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2033+ E388             >Latest_Definition defl  Heap_Ptr
2033+ E388             >
2033+ E388             >                // dummy db directives used to calculate length of namec
2033+ E388 50 40       >                db      "P@"
2033+ E38A             >len_NFA         defl    $ - temp_NFA
2033+ E38A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2033+ E388             >
2033+ E388 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2033+ E389 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2033+ E38B             >                org     $-1                 // alter last byte of Name just above to set
2033+ E38A C0          >                db      {b $} | END_BIT     // msb as name end
2033+ E38B             >
2033+ E38B 81 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2033+ E38D             >Prev_Ptr        defl    Heap_Ptr
2033+ E38D             >
2033+ E38D             >mirror_Ptr      defl    $
2033+ E38D             >
2033+ E38D 61 26       >                dw      Dict_Ptr + 2        // xt
2033+ E38F             >Heap_Ptr        defl    $ - $E000           // save current HP
2033+ E38F             >
2033+ E38F             >Current_HP      defl  $ - $E000             // used to set HP once!
2033+ E38F             >
2033+ E38F             >//              ______________________________________________________________________
2033+ E38F             >//              Dictionary part
2033+ E38F             >
2033+ E38F             >                org     Dict_Ptr
2033+ 265F             >
2033+ 265F 8D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2033+ 2661             >
2033+ 2661             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2033+ 2661 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2033+ 2661 ~           >
2033+ 2661 ~           >
2033+ 2661             >                endif           ; ok        // for other definitions it "points" the correct handler
2033+ 2661             >                // Use of "; ok" to suppress "warning[fwdref]"
2033+ 2661             >
2033+ 2661             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2034+ 2661 D9                           exx
2035+ 2662 C1                           pop     bc
2036+ 2663 26 00                        ld      h, 0
2037+ 2665 ED 68                        in      l, (c)
2038+ 2667 E5                           push    hl
2039+ 2668 D9                           exx
2040+ 2669                              next
2040+ 2669 DD E9       >                jp      (ix)
2041+ 266B
2042+ 266B              //  ______________________________________________________________________
2043+ 266B              //
2044+ 266B              // p!           c a --
2045+ 266B              // Send one byte (top of stack) to port a
2046+ 266B                              New_Def PSTORE, "P!", is_code, is_normal
2046+ 266B             >
2046+ 266B             >Dict_Ptr        defl    $
2046+ 266B             >
2046+ 266B             >//              ______________________________________________________________________
2046+ 266B             >//              Heap part
2046+ 266B             >
2046+ 266B             >
2046+ 266B             >                org     (Heap_Ptr & $1FFF) + $E000
2046+ E38F             >
2046+ E38F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2046+ E38F             >Latest_Definition defl  Heap_Ptr
2046+ E38F             >
2046+ E38F             >                // dummy db directives used to calculate length of namec
2046+ E38F 50 21       >                db      "P!"
2046+ E391             >len_NFA         defl    $ - temp_NFA
2046+ E391             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2046+ E38F             >
2046+ E38F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2046+ E390 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2046+ E392             >                org     $-1                 // alter last byte of Name just above to set
2046+ E391 A1          >                db      {b $} | END_BIT     // msb as name end
2046+ E392             >
2046+ E392 88 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2046+ E394             >Prev_Ptr        defl    Heap_Ptr
2046+ E394             >
2046+ E394             >mirror_Ptr      defl    $
2046+ E394             >
2046+ E394 6D 26       >                dw      Dict_Ptr + 2        // xt
2046+ E396             >Heap_Ptr        defl    $ - $E000           // save current HP
2046+ E396             >
2046+ E396             >Current_HP      defl  $ - $E000             // used to set HP once!
2046+ E396             >
2046+ E396             >//              ______________________________________________________________________
2046+ E396             >//              Dictionary part
2046+ E396             >
2046+ E396             >                org     Dict_Ptr
2046+ 266B             >
2046+ 266B 94 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2046+ 266D             >
2046+ 266D             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2046+ 266D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2046+ 266D ~           >
2046+ 266D ~           >
2046+ 266D             >                endif           ; ok        // for other definitions it "points" the correct handler
2046+ 266D             >                // Use of "; ok" to suppress "warning[fwdref]"
2046+ 266D             >
2046+ 266D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2047+ 266D D9                           exx
2048+ 266E C1                           pop     bc
2049+ 266F E1                           pop     hl                  // < c
2050+ 2670 ED 69                        out     (c), l              // low-byte
2051+ 2672 D9                           exx
2052+ 2673                              next
2052+ 2673 DD E9       >                jp      (ix)
2053+ 2675
2054+ 2675
2055+ 2675              //  ______________________________________________________________________
2056+ 2675              //
2057+ 2675              // 2*           n1 -- n2
2058+ 2675              // doubles the number at top of stack
2059+ 2675                              New_Def TWO_MUL, "2*", is_code, is_normal
2059+ 2675             >
2059+ 2675             >Dict_Ptr        defl    $
2059+ 2675             >
2059+ 2675             >//              ______________________________________________________________________
2059+ 2675             >//              Heap part
2059+ 2675             >
2059+ 2675             >
2059+ 2675             >                org     (Heap_Ptr & $1FFF) + $E000
2059+ E396             >
2059+ E396             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2059+ E396             >Latest_Definition defl  Heap_Ptr
2059+ E396             >
2059+ E396             >                // dummy db directives used to calculate length of namec
2059+ E396 32 2A       >                db      "2*"
2059+ E398             >len_NFA         defl    $ - temp_NFA
2059+ E398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2059+ E396             >
2059+ E396 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2059+ E397 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2059+ E399             >                org     $-1                 // alter last byte of Name just above to set
2059+ E398 AA          >                db      {b $} | END_BIT     // msb as name end
2059+ E399             >
2059+ E399 8F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2059+ E39B             >Prev_Ptr        defl    Heap_Ptr
2059+ E39B             >
2059+ E39B             >mirror_Ptr      defl    $
2059+ E39B             >
2059+ E39B 77 26       >                dw      Dict_Ptr + 2        // xt
2059+ E39D             >Heap_Ptr        defl    $ - $E000           // save current HP
2059+ E39D             >
2059+ E39D             >Current_HP      defl  $ - $E000             // used to set HP once!
2059+ E39D             >
2059+ E39D             >//              ______________________________________________________________________
2059+ E39D             >//              Dictionary part
2059+ E39D             >
2059+ E39D             >                org     Dict_Ptr
2059+ 2675             >
2059+ 2675 9B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2059+ 2677             >
2059+ 2677             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2059+ 2677 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2059+ 2677 ~           >
2059+ 2677 ~           >
2059+ 2677             >                endif           ; ok        // for other definitions it "points" the correct handler
2059+ 2677             >                // Use of "; ok" to suppress "warning[fwdref]"
2059+ 2677             >
2059+ 2677             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2060+ 2677              Two_Mul_Ptr:
2061+ 2677 E1                           pop     hl
2062+ 2678 29                           add     hl, hl
2063+ 2679
2064+ 2679                              psh1
2064+ 2679 E5          >                push    hl
2064+ 267A DD E9       >                jp      (ix)
2065+ 267C
2066+ 267C              //  ______________________________________________________________________
2067+ 267C              //
2068+ 267C              // 2/           n1 -- n2
2069+ 267C              // halves the top of stack, sign is unchanged
2070+ 267C                              New_Def TWO_DIV, "2/", is_code, is_normal
2070+ 267C             >
2070+ 267C             >Dict_Ptr        defl    $
2070+ 267C             >
2070+ 267C             >//              ______________________________________________________________________
2070+ 267C             >//              Heap part
2070+ 267C             >
2070+ 267C             >
2070+ 267C             >                org     (Heap_Ptr & $1FFF) + $E000
2070+ E39D             >
2070+ E39D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2070+ E39D             >Latest_Definition defl  Heap_Ptr
2070+ E39D             >
2070+ E39D             >                // dummy db directives used to calculate length of namec
2070+ E39D 32 2F       >                db      "2/"
2070+ E39F             >len_NFA         defl    $ - temp_NFA
2070+ E39F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2070+ E39D             >
2070+ E39D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2070+ E39E 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2070+ E3A0             >                org     $-1                 // alter last byte of Name just above to set
2070+ E39F AF          >                db      {b $} | END_BIT     // msb as name end
2070+ E3A0             >
2070+ E3A0 96 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2070+ E3A2             >Prev_Ptr        defl    Heap_Ptr
2070+ E3A2             >
2070+ E3A2             >mirror_Ptr      defl    $
2070+ E3A2             >
2070+ E3A2 7E 26       >                dw      Dict_Ptr + 2        // xt
2070+ E3A4             >Heap_Ptr        defl    $ - $E000           // save current HP
2070+ E3A4             >
2070+ E3A4             >Current_HP      defl  $ - $E000             // used to set HP once!
2070+ E3A4             >
2070+ E3A4             >//              ______________________________________________________________________
2070+ E3A4             >//              Dictionary part
2070+ E3A4             >
2070+ E3A4             >                org     Dict_Ptr
2070+ 267C             >
2070+ 267C A2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2070+ 267E             >
2070+ 267E             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2070+ 267E ~           >                call    runcode ; ok        // for primitive definitions  actual code
2070+ 267E ~           >
2070+ 267E ~           >
2070+ 267E             >                endif           ; ok        // for other definitions it "points" the correct handler
2070+ 267E             >                // Use of "; ok" to suppress "warning[fwdref]"
2070+ 267E             >
2070+ 267E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2071+ 267E E1                           pop     hl
2072+ 267F CB 2C                        sra     h
2073+ 2681 CB 1D                        rr      l
2074+ 2683
2075+ 2683                              psh1
2075+ 2683 E5          >                push    hl
2075+ 2684 DD E9       >                jp      (ix)
2076+ 2686
2077+ 2686              //  ______________________________________________________________________
2078+ 2686              //
2079+ 2686              // lshift       n1 u -- n2
2080+ 2686              // bit left shift of u bits
2081+ 2686                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2081+ 2686             >
2081+ 2686             >Dict_Ptr        defl    $
2081+ 2686             >
2081+ 2686             >//              ______________________________________________________________________
2081+ 2686             >//              Heap part
2081+ 2686             >
2081+ 2686             >
2081+ 2686             >                org     (Heap_Ptr & $1FFF) + $E000
2081+ E3A4             >
2081+ E3A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2081+ E3A4             >Latest_Definition defl  Heap_Ptr
2081+ E3A4             >
2081+ E3A4             >                // dummy db directives used to calculate length of namec
2081+ E3A4 4C 53 48 49 >                db      "LSHIFT"
2081+ E3A8 46 54       >
2081+ E3AA             >len_NFA         defl    $ - temp_NFA
2081+ E3AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2081+ E3A4             >
2081+ E3A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2081+ E3A5 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2081+ E3A9 46 54       >
2081+ E3AB             >                org     $-1                 // alter last byte of Name just above to set
2081+ E3AA D4          >                db      {b $} | END_BIT     // msb as name end
2081+ E3AB             >
2081+ E3AB 9D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2081+ E3AD             >Prev_Ptr        defl    Heap_Ptr
2081+ E3AD             >
2081+ E3AD             >mirror_Ptr      defl    $
2081+ E3AD             >
2081+ E3AD 88 26       >                dw      Dict_Ptr + 2        // xt
2081+ E3AF             >Heap_Ptr        defl    $ - $E000           // save current HP
2081+ E3AF             >
2081+ E3AF             >Current_HP      defl  $ - $E000             // used to set HP once!
2081+ E3AF             >
2081+ E3AF             >//              ______________________________________________________________________
2081+ E3AF             >//              Dictionary part
2081+ E3AF             >
2081+ E3AF             >                org     Dict_Ptr
2081+ 2686             >
2081+ 2686 AD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2081+ 2688             >
2081+ 2688             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2081+ 2688 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2081+ 2688 ~           >
2081+ 2688 ~           >
2081+ 2688             >                endif           ; ok        // for other definitions it "points" the correct handler
2081+ 2688             >                // Use of "; ok" to suppress "warning[fwdref]"
2081+ 2688             >
2081+ 2688             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2082+ 2688 D9                           exx
2083+ 2689 C1                           pop     bc
2084+ 268A 41                           ld      b, c
2085+ 268B D1                           pop     de
2086+ 268C ED 28                        bsla    de, b
2087+ 268E D5                           push    de
2088+ 268F D9                           exx
2089+ 2690                              next
2089+ 2690 DD E9       >                jp      (ix)
2090+ 2692
2091+ 2692              //  ______________________________________________________________________
2092+ 2692              //
2093+ 2692              // rshift       n1 u -- n2
2094+ 2692              // bit right shift of u bits
2095+ 2692                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2095+ 2692             >
2095+ 2692             >Dict_Ptr        defl    $
2095+ 2692             >
2095+ 2692             >//              ______________________________________________________________________
2095+ 2692             >//              Heap part
2095+ 2692             >
2095+ 2692             >
2095+ 2692             >                org     (Heap_Ptr & $1FFF) + $E000
2095+ E3AF             >
2095+ E3AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2095+ E3AF             >Latest_Definition defl  Heap_Ptr
2095+ E3AF             >
2095+ E3AF             >                // dummy db directives used to calculate length of namec
2095+ E3AF 52 53 48 49 >                db      "RSHIFT"
2095+ E3B3 46 54       >
2095+ E3B5             >len_NFA         defl    $ - temp_NFA
2095+ E3B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2095+ E3AF             >
2095+ E3AF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2095+ E3B0 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2095+ E3B4 46 54       >
2095+ E3B6             >                org     $-1                 // alter last byte of Name just above to set
2095+ E3B5 D4          >                db      {b $} | END_BIT     // msb as name end
2095+ E3B6             >
2095+ E3B6 A4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2095+ E3B8             >Prev_Ptr        defl    Heap_Ptr
2095+ E3B8             >
2095+ E3B8             >mirror_Ptr      defl    $
2095+ E3B8             >
2095+ E3B8 94 26       >                dw      Dict_Ptr + 2        // xt
2095+ E3BA             >Heap_Ptr        defl    $ - $E000           // save current HP
2095+ E3BA             >
2095+ E3BA             >Current_HP      defl  $ - $E000             // used to set HP once!
2095+ E3BA             >
2095+ E3BA             >//              ______________________________________________________________________
2095+ E3BA             >//              Dictionary part
2095+ E3BA             >
2095+ E3BA             >                org     Dict_Ptr
2095+ 2692             >
2095+ 2692 B8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2095+ 2694             >
2095+ 2694             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2095+ 2694 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2095+ 2694 ~           >
2095+ 2694 ~           >
2095+ 2694             >                endif           ; ok        // for other definitions it "points" the correct handler
2095+ 2694             >                // Use of "; ok" to suppress "warning[fwdref]"
2095+ 2694             >
2095+ 2694             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2096+ 2694 D9                           exx
2097+ 2695 C1                           pop     bc
2098+ 2696 41                           ld      b, c
2099+ 2697 D1                           pop     de
2100+ 2698 ED 2A                        bsrl    de, b
2101+ 269A D5                           push    de
2102+ 269B D9                           exx
2103+ 269C                              next
2103+ 269C DD E9       >                jp      (ix)
2104+ 269E
2105+ 269E              //  ______________________________________________________________________
2106+ 269E              //
2107+ 269E              // cells        n1 -- n2
2108+ 269E              // decrement by 2 top of stack
2109+ 269E                              New_Def CELLS, "CELLS", is_code, is_normal
2109+ 269E             >
2109+ 269E             >Dict_Ptr        defl    $
2109+ 269E             >
2109+ 269E             >//              ______________________________________________________________________
2109+ 269E             >//              Heap part
2109+ 269E             >
2109+ 269E             >
2109+ 269E             >                org     (Heap_Ptr & $1FFF) + $E000
2109+ E3BA             >
2109+ E3BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2109+ E3BA             >Latest_Definition defl  Heap_Ptr
2109+ E3BA             >
2109+ E3BA             >                // dummy db directives used to calculate length of namec
2109+ E3BA 43 45 4C 4C >                db      "CELLS"
2109+ E3BE 53          >
2109+ E3BF             >len_NFA         defl    $ - temp_NFA
2109+ E3BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2109+ E3BA             >
2109+ E3BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2109+ E3BB 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2109+ E3BF 53          >
2109+ E3C0             >                org     $-1                 // alter last byte of Name just above to set
2109+ E3BF D3          >                db      {b $} | END_BIT     // msb as name end
2109+ E3C0             >
2109+ E3C0 AF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2109+ E3C2             >Prev_Ptr        defl    Heap_Ptr
2109+ E3C2             >
2109+ E3C2             >mirror_Ptr      defl    $
2109+ E3C2             >
2109+ E3C2 A0 26       >                dw      Dict_Ptr + 2        // xt
2109+ E3C4             >Heap_Ptr        defl    $ - $E000           // save current HP
2109+ E3C4             >
2109+ E3C4             >Current_HP      defl  $ - $E000             // used to set HP once!
2109+ E3C4             >
2109+ E3C4             >//              ______________________________________________________________________
2109+ E3C4             >//              Dictionary part
2109+ E3C4             >
2109+ E3C4             >                org     Dict_Ptr
2109+ 269E             >
2109+ 269E C2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2109+ 26A0             >
2109+ 26A0             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2109+ 26A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2109+ 26A0 ~           >
2109+ 26A0 ~           >
2109+ 26A0             >                endif           ; ok        // for other definitions it "points" the correct handler
2109+ 26A0             >                // Use of "; ok" to suppress "warning[fwdref]"
2109+ 26A0             >
2109+ 26A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2110+ 26A0 18 D5                        jr      Two_Mul_Ptr
2111+ 26A2
2112+ 26A2
2113+ 26A2              //  ______________________________________________________________________
2114+ 26A2
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L0.asm
 140  26A2                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L1.asm
   1+ 26A2              //  ______________________________________________________________________
   2+ 26A2              //
   3+ 26A2              //  L1.asm
   4+ 26A2              //
   5+ 26A2              //  Level-1 definitions and derivate
   6+ 26A2              //  ______________________________________________________________________
   7+ 26A2
   8+ 26A2              //  ______________________________________________________________________
   9+ 26A2              //
  10+ 26A2              // :            -- cccc     ( compile time )
  11+ 26A2              //              i*x -- j*x  ( run time )
  12+ 26A2              // Colon Definition
  13+ 26A2                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26A2             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26A2             >
  13+ 26A2             >Dict_Ptr        defl    $
  13+ 26A2             >
  13+ 26A2             >//              ______________________________________________________________________
  13+ 26A2             >//              Heap part
  13+ 26A2             >
  13+ 26A2             >
  13+ 26A2             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C4             >
  13+ E3C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C4             >Latest_Definition defl  Heap_Ptr
  13+ E3C4             >
  13+ E3C4             >                // dummy db directives used to calculate length of namec
  13+ E3C4 3A          >                db      ":"
  13+ E3C5             >len_NFA         defl    $ - temp_NFA
  13+ E3C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C4             >
  13+ E3C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C5 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C6             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C5 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C6             >
  13+ E3C6 BA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3C8             >Prev_Ptr        defl    Heap_Ptr
  13+ E3C8             >
  13+ E3C8             >mirror_Ptr      defl    $
  13+ E3C8             >
  13+ E3C8 A4 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CA             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CA             >
  13+ E3CA             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CA             >
  13+ E3CA             >//              ______________________________________________________________________
  13+ E3CA             >//              Dictionary part
  13+ E3CA             >
  13+ E3CA             >                org     Dict_Ptr
  13+ 26A2             >
  13+ 26A2 C8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26A4             >
  13+ 26A4             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26A4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26A7             >
  13+ 26A7             >
  13+ 26A7             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26A7             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26A7             >
  13+ 26A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26A7
  15+ 26A7 91 2A                        dw      QEXEC                   // ?exec
  16+ 26A9 5C 2A                        dw      STORE_CSP               // !csp
  17+ 26AB D5 27 1E 26                  dw      CURRENT, FETCH          // current @
  18+ 26AF CF 27 28 26                  dw      CONTEXT, STORE          // context !
  19+ 26B3 88 30                        dw      CREATE                  // create  ( forward )
  20+ 26B5 13 2B                        dw      SMUDGE                  // dmudge
  21+ 26B7 04 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26B9 4F 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26BB                                                              // ... immediate
  24+ 26BB              Enter_Ptr:
  25+ 26BB                              // via call coded in CFA
  26+ 26BB EB                           ex      de, hl //**
  27+ 26BC                              // *** ldhlrp
  28+ 26BC 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26BD 70                           ld      (hl), b
  30+ 26BE 2B                           dec     hl
  31+ 26BF 71                           ld      (hl), c
  32+ 26C0                              // *** ldrphl
  33+ 26C0 EB                           ex      de, hl //**
  34+ 26C1
  35+ 26C1
  36+ 26C1 C1                           pop     bc                  // points to PFA of "this" word
  37+ 26C2                              next
  37+ 26C2 DD E9       >                jp      (ix)
  38+ 26C4
  39+ 26C4              //  ______________________________________________________________________
  40+ 26C4              //
  41+ 26C4              // ;            --
  42+ 26C4              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26C4                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26C4             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26C4             >
  43+ 26C4             >Dict_Ptr        defl    $
  43+ 26C4             >
  43+ 26C4             >//              ______________________________________________________________________
  43+ 26C4             >//              Heap part
  43+ 26C4             >
  43+ 26C4             >
  43+ 26C4             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CA             >
  43+ E3CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CA             >Latest_Definition defl  Heap_Ptr
  43+ E3CA             >
  43+ E3CA             >                // dummy db directives used to calculate length of namec
  43+ E3CA 3B          >                db      ";"
  43+ E3CB             >len_NFA         defl    $ - temp_NFA
  43+ E3CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CA             >
  43+ E3CA C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CB 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CC             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CB BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CC             >
  43+ E3CC C4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3CE             >Prev_Ptr        defl    Heap_Ptr
  43+ E3CE             >
  43+ E3CE             >mirror_Ptr      defl    $
  43+ E3CE             >
  43+ E3CE C6 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D0             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D0             >
  43+ E3D0             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D0             >
  43+ E3D0             >//              ______________________________________________________________________
  43+ E3D0             >//              Dictionary part
  43+ E3D0             >
  43+ E3D0             >                org     Dict_Ptr
  43+ 26C4             >
  43+ 26C4 CE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26C6             >
  43+ 26C6             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26C6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26C9             >
  43+ 26C9             >
  43+ 26C9             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26C9             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26C9             >
  43+ 26C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26C9
  45+ 26C9 B1 2A                        dw      QCSP                    // ?csp
  46+ 26CB D9 2A E9 24                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26CF 13 2B                        dw      SMUDGE                  // smudge
  48+ 26D1 F7 2A                        dw      SQUARED_OPEN            // [
  49+ 26D3 E9 24                        dw      EXIT                    // ; immediate
  50+ 26D5
  51+ 26D5              //  ______________________________________________________________________
  52+ 26D5              //
  53+ 26D5              // noop         --
  54+ 26D5
  55+ 26D5                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 26D5             >
  55+ 26D5             >Dict_Ptr        defl    $
  55+ 26D5             >
  55+ 26D5             >//              ______________________________________________________________________
  55+ 26D5             >//              Heap part
  55+ 26D5             >
  55+ 26D5             >
  55+ 26D5             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D0             >
  55+ E3D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D0             >Latest_Definition defl  Heap_Ptr
  55+ E3D0             >
  55+ E3D0             >                // dummy db directives used to calculate length of namec
  55+ E3D0 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D4             >len_NFA         defl    $ - temp_NFA
  55+ E3D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D0             >
  55+ E3D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D1 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D5             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D4 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D5             >
  55+ E3D5 CA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3D7             >Prev_Ptr        defl    Heap_Ptr
  55+ E3D7             >
  55+ E3D7             >mirror_Ptr      defl    $
  55+ E3D7             >
  55+ E3D7 D7 26       >                dw      Dict_Ptr + 2        // xt
  55+ E3D9             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3D9             >
  55+ E3D9             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3D9             >
  55+ E3D9             >//              ______________________________________________________________________
  55+ E3D9             >//              Dictionary part
  55+ E3D9             >
  55+ E3D9             >                org     Dict_Ptr
  55+ 26D5             >
  55+ 26D5 D7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 26D7             >
  55+ 26D7             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 26D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 26D7 ~           >
  55+ 26D7 ~           >
  55+ 26D7             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 26D7             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 26D7             >
  55+ 26D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 26D7                              next
  56+ 26D7 DD E9       >                jp      (ix)
  57+ 26D9
  58+ 26D9              //  ______________________________________________________________________
  59+ 26D9              //
  60+ 26D9              // constant     n -- cccc     ( compile time )
  61+ 26D9              //              -- n          ( run time )
  62+ 26D9              // Constant definition.
  63+ 26D9                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 26D9             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 26D9             >
  63+ 26D9             >Dict_Ptr        defl    $
  63+ 26D9             >
  63+ 26D9             >//              ______________________________________________________________________
  63+ 26D9             >//              Heap part
  63+ 26D9             >
  63+ 26D9             >
  63+ 26D9             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3D9             >
  63+ E3D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3D9             >Latest_Definition defl  Heap_Ptr
  63+ E3D9             >
  63+ E3D9             >                // dummy db directives used to calculate length of namec
  63+ E3D9 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3DD 54 41 4E 54 >
  63+ E3E1             >len_NFA         defl    $ - temp_NFA
  63+ E3E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3D9             >
  63+ E3D9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DA 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3DE 54 41 4E 54 >
  63+ E3E2             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E1 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E2             >
  63+ E3E2 D0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E4             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E4             >
  63+ E3E4             >mirror_Ptr      defl    $
  63+ E3E4             >
  63+ E3E4 DB 26       >                dw      Dict_Ptr + 2        // xt
  63+ E3E6             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E6             >
  63+ E3E6             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E6             >
  63+ E3E6             >//              ______________________________________________________________________
  63+ E3E6             >//              Dictionary part
  63+ E3E6             >
  63+ E3E6             >                org     Dict_Ptr
  63+ 26D9             >
  63+ 26D9 E4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 26DB             >
  63+ 26DB             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 26DB CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 26DE             >
  63+ 26DE             >
  63+ 26DE             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 26DE             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 26DE             >
  63+ 26DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 26DE 88 30                        dw      CREATE                  // create
  65+ 26E0 4B 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 26E2 4F 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 26E4              Constant_Ptr:
  68+ 26E4
  69+ 26E4
  70+ 26E4 E1                           pop     hl
  71+ 26E5
  72+ 26E5 7E                           ld      a, (hl)
  73+ 26E6 23                           inc     hl
  74+ 26E7 66                           ld      h, (hl)
  75+ 26E8 6F                           ld      l, a
  76+ 26E9 E5                           push    hl
  77+ 26EA                              next
  77+ 26EA DD E9       >                jp      (ix)
  78+ 26EC
  79+ 26EC              //  ______________________________________________________________________
  80+ 26EC              //
  81+ 26EC              // variable     n -- cccc     ( compile time )
  82+ 26EC              //              -- a          ( run time )
  83+ 26EC              // Variable definition, n is the initial value.
  84+ 26EC                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 26EC             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 26EC             >
  84+ 26EC             >Dict_Ptr        defl    $
  84+ 26EC             >
  84+ 26EC             >//              ______________________________________________________________________
  84+ 26EC             >//              Heap part
  84+ 26EC             >
  84+ 26EC             >
  84+ 26EC             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E6             >
  84+ E3E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E6             >Latest_Definition defl  Heap_Ptr
  84+ E3E6             >
  84+ E3E6             >                // dummy db directives used to calculate length of namec
  84+ E3E6 56 41 52 49 >                db      "VARIABLE"
  84+ E3EA 41 42 4C 45 >
  84+ E3EE             >len_NFA         defl    $ - temp_NFA
  84+ E3EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E6             >
  84+ E3E6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3E7 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EB 41 42 4C 45 >
  84+ E3EF             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3EE C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3EF             >
  84+ E3EF D9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F1             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F1             >
  84+ E3F1             >mirror_Ptr      defl    $
  84+ E3F1             >
  84+ E3F1 EE 26       >                dw      Dict_Ptr + 2        // xt
  84+ E3F3             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F3             >
  84+ E3F3             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F3             >
  84+ E3F3             >//              ______________________________________________________________________
  84+ E3F3             >//              Dictionary part
  84+ E3F3             >
  84+ E3F3             >                org     Dict_Ptr
  84+ 26EC             >
  84+ 26EC F1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 26EE             >
  84+ 26EE             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 26EE CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 26F1             >
  84+ 26F1             >
  84+ 26F1             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 26F1             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 26F1             >
  84+ 26F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 26F1
  86+ 26F1 10 27                        dw      ZERO
  87+ 26F3 DB 26                        dw      CONSTANT                // constant
  88+ 26F5 4F 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 26F7              Variable_Ptr:
  90+ 26F7
  91+ 26F7
  92+ 26F7
  93+ 26F7
  94+ 26F7                              next
  94+ 26F7 DD E9       >                jp      (ix)
  95+ 26F9
  96+ 26F9              //  ______________________________________________________________________
  97+ 26F9              //
  98+ 26F9              // user         b -- cccc     ( compile time )
  99+ 26F9              //              -- a          ( run time )
 100+ 26F9              // User variable definition
 101+ 26F9                              Colon_Def USER, "USER", is_normal
 101+ 26F9             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 26F9             >
 101+ 26F9             >Dict_Ptr        defl    $
 101+ 26F9             >
 101+ 26F9             >//              ______________________________________________________________________
 101+ 26F9             >//              Heap part
 101+ 26F9             >
 101+ 26F9             >
 101+ 26F9             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F3             >
 101+ E3F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F3             >Latest_Definition defl  Heap_Ptr
 101+ E3F3             >
 101+ E3F3             >                // dummy db directives used to calculate length of namec
 101+ E3F3 55 53 45 52 >                db      "USER"
 101+ E3F7             >len_NFA         defl    $ - temp_NFA
 101+ E3F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F3             >
 101+ E3F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F4 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3F8             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3F7 D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3F8             >
 101+ E3F8 E6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FA             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FA             >
 101+ E3FA             >mirror_Ptr      defl    $
 101+ E3FA             >
 101+ E3FA FB 26       >                dw      Dict_Ptr + 2        // xt
 101+ E3FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FC             >
 101+ E3FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FC             >
 101+ E3FC             >//              ______________________________________________________________________
 101+ E3FC             >//              Dictionary part
 101+ E3FC             >
 101+ E3FC             >                org     Dict_Ptr
 101+ 26F9             >
 101+ 26F9 FA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 26FB             >
 101+ 26FB             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 26FB CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 26FE             >
 101+ 26FE             >
 101+ 26FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 26FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 26FE             >
 101+ 26FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 26FE
 103+ 26FE 88 30                        dw      CREATE                  // create
 104+ 2700 5A 28                        dw      CCOMMA                  // c,
 105+ 2702 4F 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 2704
 107+ 2704
 108+ 2704              User_Ptr:
 109+ 2704                              // via call coded in CFA
 110+ 2704 E1                           pop     hl
 111+ 2705
 112+ 2705 7E                           ld      a, (hl)
 113+ 2706 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2709 ED 31                        add     hl, a
 115+ 270B E5                           push    hl
 116+ 270C                              next
 116+ 270C DD E9       >                jp      (ix)
 117+ 270E
 118+ 270E              //  ______________________________________________________________________
 119+ 270E              //
 120+ 270E                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 270E             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 270E             >
 120+ 270E             >Dict_Ptr        defl    $
 120+ 270E             >
 120+ 270E             >//              ______________________________________________________________________
 120+ 270E             >//              Heap part
 120+ 270E             >
 120+ 270E             >
 120+ 270E             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FC             >
 120+ E3FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FC             >Latest_Definition defl  Heap_Ptr
 120+ E3FC             >
 120+ E3FC             >                // dummy db directives used to calculate length of namec
 120+ E3FC 30          >                db      "0"
 120+ E3FD             >len_NFA         defl    $ - temp_NFA
 120+ E3FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FC             >
 120+ E3FC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E3FD 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E3FE             >                org     $-1                 // alter last byte of Name just above to set
 120+ E3FD B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E3FE             >
 120+ E3FE F3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E400             >Prev_Ptr        defl    Heap_Ptr
 120+ E400             >
 120+ E400             >mirror_Ptr      defl    $
 120+ E400             >
 120+ E400 10 27       >                dw      Dict_Ptr + 2        // xt
 120+ E402             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E402             >
 120+ E402             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E402             >
 120+ E402             >//              ______________________________________________________________________
 120+ E402             >//              Dictionary part
 120+ E402             >
 120+ E402             >                org     Dict_Ptr
 120+ 270E             >
 120+ 270E 00 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 2710             >
 120+ 2710             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 2710 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 2713             >
 120+ 2713             >
 120+ 2713             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 2713             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 2713             >
 120+ 2713             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 2713 00 00       >                dw      0
 121+ 2715                              Constant_Def ONE        ,   "1"     ,   1
 121+ 2715             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 2715             >
 121+ 2715             >Dict_Ptr        defl    $
 121+ 2715             >
 121+ 2715             >//              ______________________________________________________________________
 121+ 2715             >//              Heap part
 121+ 2715             >
 121+ 2715             >
 121+ 2715             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E402             >
 121+ E402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E402             >Latest_Definition defl  Heap_Ptr
 121+ E402             >
 121+ E402             >                // dummy db directives used to calculate length of namec
 121+ E402 31          >                db      "1"
 121+ E403             >len_NFA         defl    $ - temp_NFA
 121+ E403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E402             >
 121+ E402 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E403 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E404             >                org     $-1                 // alter last byte of Name just above to set
 121+ E403 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E404             >
 121+ E404 FC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E406             >Prev_Ptr        defl    Heap_Ptr
 121+ E406             >
 121+ E406             >mirror_Ptr      defl    $
 121+ E406             >
 121+ E406 17 27       >                dw      Dict_Ptr + 2        // xt
 121+ E408             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E408             >
 121+ E408             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E408             >
 121+ E408             >//              ______________________________________________________________________
 121+ E408             >//              Dictionary part
 121+ E408             >
 121+ E408             >                org     Dict_Ptr
 121+ 2715             >
 121+ 2715 06 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 2717             >
 121+ 2717             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 2717 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 271A             >
 121+ 271A             >
 121+ 271A             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 271A             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 271A             >
 121+ 271A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 271A 01 00       >                dw      1
 122+ 271C                              Constant_Def TWO        ,   "2"     ,   2
 122+ 271C             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 271C             >
 122+ 271C             >Dict_Ptr        defl    $
 122+ 271C             >
 122+ 271C             >//              ______________________________________________________________________
 122+ 271C             >//              Heap part
 122+ 271C             >
 122+ 271C             >
 122+ 271C             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E408             >
 122+ E408             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E408             >Latest_Definition defl  Heap_Ptr
 122+ E408             >
 122+ E408             >                // dummy db directives used to calculate length of namec
 122+ E408 32          >                db      "2"
 122+ E409             >len_NFA         defl    $ - temp_NFA
 122+ E409             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E408             >
 122+ E408 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E409 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40A             >                org     $-1                 // alter last byte of Name just above to set
 122+ E409 B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40A             >
 122+ E40A 02 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40C             >Prev_Ptr        defl    Heap_Ptr
 122+ E40C             >
 122+ E40C             >mirror_Ptr      defl    $
 122+ E40C             >
 122+ E40C 1E 27       >                dw      Dict_Ptr + 2        // xt
 122+ E40E             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E40E             >
 122+ E40E             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E40E             >
 122+ E40E             >//              ______________________________________________________________________
 122+ E40E             >//              Dictionary part
 122+ E40E             >
 122+ E40E             >                org     Dict_Ptr
 122+ 271C             >
 122+ 271C 0C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 271E             >
 122+ 271E             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 271E CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 2721             >
 122+ 2721             >
 122+ 2721             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 2721             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 2721             >
 122+ 2721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 2721 02 00       >                dw      2
 123+ 2723                              Constant_Def THREE      ,   "3"     ,   3
 123+ 2723             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 2723             >
 123+ 2723             >Dict_Ptr        defl    $
 123+ 2723             >
 123+ 2723             >//              ______________________________________________________________________
 123+ 2723             >//              Heap part
 123+ 2723             >
 123+ 2723             >
 123+ 2723             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E40E             >
 123+ E40E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E40E             >Latest_Definition defl  Heap_Ptr
 123+ E40E             >
 123+ E40E             >                // dummy db directives used to calculate length of namec
 123+ E40E 33          >                db      "3"
 123+ E40F             >len_NFA         defl    $ - temp_NFA
 123+ E40F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E40E             >
 123+ E40E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E40F 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E410             >                org     $-1                 // alter last byte of Name just above to set
 123+ E40F B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E410             >
 123+ E410 08 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E412             >Prev_Ptr        defl    Heap_Ptr
 123+ E412             >
 123+ E412             >mirror_Ptr      defl    $
 123+ E412             >
 123+ E412 25 27       >                dw      Dict_Ptr + 2        // xt
 123+ E414             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E414             >
 123+ E414             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E414             >
 123+ E414             >//              ______________________________________________________________________
 123+ E414             >//              Dictionary part
 123+ E414             >
 123+ E414             >                org     Dict_Ptr
 123+ 2723             >
 123+ 2723 12 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 2725             >
 123+ 2725             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 2725 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 2728             >
 123+ 2728             >
 123+ 2728             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 2728             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 2728             >
 123+ 2728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 2728 03 00       >                dw      3
 124+ 272A                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 272A             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 272A             >
 124+ 272A             >Dict_Ptr        defl    $
 124+ 272A             >
 124+ 272A             >//              ______________________________________________________________________
 124+ 272A             >//              Heap part
 124+ 272A             >
 124+ 272A             >
 124+ 272A             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E414             >
 124+ E414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E414             >Latest_Definition defl  Heap_Ptr
 124+ E414             >
 124+ E414             >                // dummy db directives used to calculate length of namec
 124+ E414 2D 31       >                db      "-1"
 124+ E416             >len_NFA         defl    $ - temp_NFA
 124+ E416             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E414             >
 124+ E414 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E415 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E417             >                org     $-1                 // alter last byte of Name just above to set
 124+ E416 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E417             >
 124+ E417 0E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E419             >Prev_Ptr        defl    Heap_Ptr
 124+ E419             >
 124+ E419             >mirror_Ptr      defl    $
 124+ E419             >
 124+ E419 2C 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41B             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41B             >
 124+ E41B             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41B             >
 124+ E41B             >//              ______________________________________________________________________
 124+ E41B             >//              Dictionary part
 124+ E41B             >
 124+ E41B             >                org     Dict_Ptr
 124+ 272A             >
 124+ 272A 19 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 272C             >
 124+ 272C             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 272C CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 272F             >
 124+ 272F             >
 124+ 272F             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 272F             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 272F             >
 124+ 272F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 272F FF FF       >                dw      -1
 125+ 2731                              Constant_Def BL         ,   "BL"    , $20
 125+ 2731             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2731             >
 125+ 2731             >Dict_Ptr        defl    $
 125+ 2731             >
 125+ 2731             >//              ______________________________________________________________________
 125+ 2731             >//              Heap part
 125+ 2731             >
 125+ 2731             >
 125+ 2731             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41B             >
 125+ E41B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41B             >Latest_Definition defl  Heap_Ptr
 125+ E41B             >
 125+ E41B             >                // dummy db directives used to calculate length of namec
 125+ E41B 42 4C       >                db      "BL"
 125+ E41D             >len_NFA         defl    $ - temp_NFA
 125+ E41D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41B             >
 125+ E41B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41C 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E41E             >                org     $-1                 // alter last byte of Name just above to set
 125+ E41D CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E41E             >
 125+ E41E 14 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E420             >Prev_Ptr        defl    Heap_Ptr
 125+ E420             >
 125+ E420             >mirror_Ptr      defl    $
 125+ E420             >
 125+ E420 33 27       >                dw      Dict_Ptr + 2        // xt
 125+ E422             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E422             >
 125+ E422             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E422             >
 125+ E422             >//              ______________________________________________________________________
 125+ E422             >//              Dictionary part
 125+ E422             >
 125+ E422             >                org     Dict_Ptr
 125+ 2731             >
 125+ 2731 20 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 2733             >
 125+ 2733             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 2733 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 2736             >
 125+ 2736             >
 125+ 2736             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 2736             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 2736             >
 125+ 2736             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 2736 20 00       >                dw      $20
 126+ 2738                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 2738             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 2738             >
 126+ 2738             >Dict_Ptr        defl    $
 126+ 2738             >
 126+ 2738             >//              ______________________________________________________________________
 126+ 2738             >//              Heap part
 126+ 2738             >
 126+ 2738             >
 126+ 2738             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E422             >
 126+ E422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E422             >Latest_Definition defl  Heap_Ptr
 126+ E422             >
 126+ E422             >                // dummy db directives used to calculate length of namec
 126+ E422 43 2F 4C    >                db      "C/L"
 126+ E425             >len_NFA         defl    $ - temp_NFA
 126+ E425             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E422             >
 126+ E422 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E423 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E426             >                org     $-1                 // alter last byte of Name just above to set
 126+ E425 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E426             >
 126+ E426 1B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E428             >Prev_Ptr        defl    Heap_Ptr
 126+ E428             >
 126+ E428             >mirror_Ptr      defl    $
 126+ E428             >
 126+ E428 3A 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42A             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42A             >
 126+ E42A             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42A             >
 126+ E42A             >//              ______________________________________________________________________
 126+ E42A             >//              Dictionary part
 126+ E42A             >
 126+ E42A             >                org     Dict_Ptr
 126+ 2738             >
 126+ 2738 28 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 273A             >
 126+ 273A             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 273A CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 273D             >
 126+ 273D             >
 126+ 273D             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 273D             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 273D             >
 126+ 273D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 273D 40 00       >                dw      64
 127+ 273F                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 273F             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 273F             >
 127+ 273F             >Dict_Ptr        defl    $
 127+ 273F             >
 127+ 273F             >//              ______________________________________________________________________
 127+ 273F             >//              Heap part
 127+ 273F             >
 127+ 273F             >
 127+ 273F             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42A             >
 127+ E42A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42A             >Latest_Definition defl  Heap_Ptr
 127+ E42A             >
 127+ E42A             >                // dummy db directives used to calculate length of namec
 127+ E42A 42 2F 42 55 >                db      "B/BUF"
 127+ E42E 46          >
 127+ E42F             >len_NFA         defl    $ - temp_NFA
 127+ E42F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42A             >
 127+ E42A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42B 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E42F 46          >
 127+ E430             >                org     $-1                 // alter last byte of Name just above to set
 127+ E42F C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E430             >
 127+ E430 22 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E432             >Prev_Ptr        defl    Heap_Ptr
 127+ E432             >
 127+ E432             >mirror_Ptr      defl    $
 127+ E432             >
 127+ E432 41 27       >                dw      Dict_Ptr + 2        // xt
 127+ E434             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E434             >
 127+ E434             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E434             >
 127+ E434             >//              ______________________________________________________________________
 127+ E434             >//              Dictionary part
 127+ E434             >
 127+ E434             >                org     Dict_Ptr
 127+ 273F             >
 127+ 273F 32 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2741             >
 127+ 2741             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2741 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 2744             >
 127+ 2744             >
 127+ 2744             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 2744             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 2744             >
 127+ 2744             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 2744 00 02       >                dw      512
 128+ 2746                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 2746             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 2746             >
 128+ 2746             >Dict_Ptr        defl    $
 128+ 2746             >
 128+ 2746             >//              ______________________________________________________________________
 128+ 2746             >//              Heap part
 128+ 2746             >
 128+ 2746             >
 128+ 2746             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E434             >
 128+ E434             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E434             >Latest_Definition defl  Heap_Ptr
 128+ E434             >
 128+ E434             >                // dummy db directives used to calculate length of namec
 128+ E434 42 2F 53 43 >                db      "B/SCR"
 128+ E438 52          >
 128+ E439             >len_NFA         defl    $ - temp_NFA
 128+ E439             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E434             >
 128+ E434 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E435 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E439 52          >
 128+ E43A             >                org     $-1                 // alter last byte of Name just above to set
 128+ E439 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43A             >
 128+ E43A 2A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43C             >Prev_Ptr        defl    Heap_Ptr
 128+ E43C             >
 128+ E43C             >mirror_Ptr      defl    $
 128+ E43C             >
 128+ E43C 48 27       >                dw      Dict_Ptr + 2        // xt
 128+ E43E             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E43E             >
 128+ E43E             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E43E             >
 128+ E43E             >//              ______________________________________________________________________
 128+ E43E             >//              Dictionary part
 128+ E43E             >
 128+ E43E             >                org     Dict_Ptr
 128+ 2746             >
 128+ 2746 3C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 2748             >
 128+ 2748             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 2748 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 274B             >
 128+ 274B             >
 128+ 274B             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 274B             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 274B             >
 128+ 274B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 274B 02 00       >                dw      2
 129+ 274D                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 274D             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 274D             >
 129+ 274D             >Dict_Ptr        defl    $
 129+ 274D             >
 129+ 274D             >//              ______________________________________________________________________
 129+ 274D             >//              Heap part
 129+ 274D             >
 129+ 274D             >
 129+ 274D             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E43E             >
 129+ E43E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E43E             >Latest_Definition defl  Heap_Ptr
 129+ E43E             >
 129+ E43E             >                // dummy db directives used to calculate length of namec
 129+ E43E 4C 2F 53 43 >                db      "L/SCR"
 129+ E442 52          >
 129+ E443             >len_NFA         defl    $ - temp_NFA
 129+ E443             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E43E             >
 129+ E43E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E43F 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E443 52          >
 129+ E444             >                org     $-1                 // alter last byte of Name just above to set
 129+ E443 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E444             >
 129+ E444 34 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E446             >Prev_Ptr        defl    Heap_Ptr
 129+ E446             >
 129+ E446             >mirror_Ptr      defl    $
 129+ E446             >
 129+ E446 4F 27       >                dw      Dict_Ptr + 2        // xt
 129+ E448             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E448             >
 129+ E448             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E448             >
 129+ E448             >//              ______________________________________________________________________
 129+ E448             >//              Dictionary part
 129+ E448             >
 129+ E448             >                org     Dict_Ptr
 129+ 274D             >
 129+ 274D 46 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 274F             >
 129+ 274F             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 274F CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2752             >
 129+ 2752             >
 129+ 2752             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2752             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2752             >
 129+ 2752             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2752 10 00       >                dw      16
 130+ 2754
 131+ 2754              //  ______________________________________________________________________
 132+ 2754              //
 133+ 2754              // +origin         --
 134+ 2754              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 2754              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 2754              //              dw      PLUS                    // +
 137+ 2754              //              dw      EXIT                    // ;
 138+ 2754                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 2754             >
 138+ 2754             >Dict_Ptr        defl    $
 138+ 2754             >
 138+ 2754             >//              ______________________________________________________________________
 138+ 2754             >//              Heap part
 138+ 2754             >
 138+ 2754             >
 138+ 2754             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E448             >
 138+ E448             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E448             >Latest_Definition defl  Heap_Ptr
 138+ E448             >
 138+ E448             >                // dummy db directives used to calculate length of namec
 138+ E448 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44C 47 49 4E    >
 138+ E44F             >len_NFA         defl    $ - temp_NFA
 138+ E44F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E448             >
 138+ E448 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E449 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E44D 47 49 4E    >
 138+ E450             >                org     $-1                 // alter last byte of Name just above to set
 138+ E44F CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E450             >
 138+ E450 3E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E452             >Prev_Ptr        defl    Heap_Ptr
 138+ E452             >
 138+ E452             >mirror_Ptr      defl    $
 138+ E452             >
 138+ E452 56 27       >                dw      Dict_Ptr + 2        // xt
 138+ E454             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E454             >
 138+ E454             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E454             >
 138+ E454             >//              ______________________________________________________________________
 138+ E454             >//              Dictionary part
 138+ E454             >
 138+ E454             >                org     Dict_Ptr
 138+ 2754             >
 138+ 2754 52 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 2756             >
 138+ 2756             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 2756 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 2756 ~           >
 138+ 2756 ~           >
 138+ 2756             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 2756             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 2756             >
 138+ 2756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 2756 D9                           exx
 140+ 2757 E1                           pop     hl
 141+ 2758 11 00 20                     ld      de, Cold_origin
 142+ 275B 19                           add     hl, de
 143+ 275C E5                           push    hl
 144+ 275D D9                           exx
 145+ 275E                              next
 145+ 275E DD E9       >                jp      (ix)
 146+ 2760
 147+ 2760
 148+ 2760              //  ______________________________________________________________________
 149+ 2760              //
 150+ 2760                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 2760             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 2760             >
 150+ 2760             >Dict_Ptr        defl    $
 150+ 2760             >
 150+ 2760             >//              ______________________________________________________________________
 150+ 2760             >//              Heap part
 150+ 2760             >
 150+ 2760             >
 150+ 2760             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E454             >
 150+ E454             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E454             >Latest_Definition defl  Heap_Ptr
 150+ E454             >
 150+ E454             >                // dummy db directives used to calculate length of namec
 150+ E454 28 4E 45 58 >                db      "(NEXT)"
 150+ E458 54 29       >
 150+ E45A             >len_NFA         defl    $ - temp_NFA
 150+ E45A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E454             >
 150+ E454 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E455 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E459 54 29       >
 150+ E45B             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45A A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45B             >
 150+ E45B 48 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E45D             >Prev_Ptr        defl    Heap_Ptr
 150+ E45D             >
 150+ E45D             >mirror_Ptr      defl    $
 150+ E45D             >
 150+ E45D 62 27       >                dw      Dict_Ptr + 2        // xt
 150+ E45F             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E45F             >
 150+ E45F             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E45F             >
 150+ E45F             >//              ______________________________________________________________________
 150+ E45F             >//              Dictionary part
 150+ E45F             >
 150+ E45F             >                org     Dict_Ptr
 150+ 2760             >
 150+ 2760 5D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2762             >
 150+ 2762             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2762 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 2765             >
 150+ 2765             >
 150+ 2765             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 2765             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 2765             >
 150+ 2765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 2765 34 20       >                dw      Next_Ptr
 151+ 2767
 152+ 2767              //  ______________________________________________________________________
 153+ 2767              //
 154+ 2767
 155+ 2767                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 2767             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 2767             >
 155+ 2767             >Dict_Ptr        defl    $
 155+ 2767             >
 155+ 2767             >//              ______________________________________________________________________
 155+ 2767             >//              Heap part
 155+ 2767             >
 155+ 2767             >
 155+ 2767             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E45F             >
 155+ E45F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E45F             >Latest_Definition defl  Heap_Ptr
 155+ E45F             >
 155+ E45F             >                // dummy db directives used to calculate length of namec
 155+ E45F 53 30       >                db      "S0"
 155+ E461             >len_NFA         defl    $ - temp_NFA
 155+ E461             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E45F             >
 155+ E45F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E460 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E462             >                org     $-1                 // alter last byte of Name just above to set
 155+ E461 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E462             >
 155+ E462 54 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E464             >Prev_Ptr        defl    Heap_Ptr
 155+ E464             >
 155+ E464             >mirror_Ptr      defl    $
 155+ E464             >
 155+ E464 69 27       >                dw      Dict_Ptr + 2        // xt
 155+ E466             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E466             >
 155+ E466             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E466             >
 155+ E466             >//              ______________________________________________________________________
 155+ E466             >//              Dictionary part
 155+ E466             >
 155+ E466             >                org     Dict_Ptr
 155+ 2767             >
 155+ 2767 64 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 2769             >
 155+ 2769             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 2769 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 276C             >
 155+ 276C             >
 155+ 276C             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 276C             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 276C             >
 155+ 276C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 276C 06          >                db      06
 156+ 276D                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 276D             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 276D             >
 156+ 276D             >Dict_Ptr        defl    $
 156+ 276D             >
 156+ 276D             >//              ______________________________________________________________________
 156+ 276D             >//              Heap part
 156+ 276D             >
 156+ 276D             >
 156+ 276D             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E466             >
 156+ E466             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E466             >Latest_Definition defl  Heap_Ptr
 156+ E466             >
 156+ E466             >                // dummy db directives used to calculate length of namec
 156+ E466 52 30       >                db      "R0"
 156+ E468             >len_NFA         defl    $ - temp_NFA
 156+ E468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E466             >
 156+ E466 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E467 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E469             >                org     $-1                 // alter last byte of Name just above to set
 156+ E468 B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E469             >
 156+ E469 5F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46B             >Prev_Ptr        defl    Heap_Ptr
 156+ E46B             >
 156+ E46B             >mirror_Ptr      defl    $
 156+ E46B             >
 156+ E46B 6F 27       >                dw      Dict_Ptr + 2        // xt
 156+ E46D             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E46D             >
 156+ E46D             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E46D             >
 156+ E46D             >//              ______________________________________________________________________
 156+ E46D             >//              Dictionary part
 156+ E46D             >
 156+ E46D             >                org     Dict_Ptr
 156+ 276D             >
 156+ 276D 6B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 276F             >
 156+ 276F             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 276F CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 2772             >
 156+ 2772             >
 156+ 2772             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 2772             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 2772             >
 156+ 2772             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 2772 08          >                db      08
 157+ 2773                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 2773             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 2773             >
 157+ 2773             >Dict_Ptr        defl    $
 157+ 2773             >
 157+ 2773             >//              ______________________________________________________________________
 157+ 2773             >//              Heap part
 157+ 2773             >
 157+ 2773             >
 157+ 2773             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E46D             >
 157+ E46D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E46D             >Latest_Definition defl  Heap_Ptr
 157+ E46D             >
 157+ E46D             >                // dummy db directives used to calculate length of namec
 157+ E46D 54 49 42    >                db      "TIB"
 157+ E470             >len_NFA         defl    $ - temp_NFA
 157+ E470             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E46D             >
 157+ E46D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E46E 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E471             >                org     $-1                 // alter last byte of Name just above to set
 157+ E470 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E471             >
 157+ E471 66 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E473             >Prev_Ptr        defl    Heap_Ptr
 157+ E473             >
 157+ E473             >mirror_Ptr      defl    $
 157+ E473             >
 157+ E473 75 27       >                dw      Dict_Ptr + 2        // xt
 157+ E475             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E475             >
 157+ E475             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E475             >
 157+ E475             >//              ______________________________________________________________________
 157+ E475             >//              Dictionary part
 157+ E475             >
 157+ E475             >                org     Dict_Ptr
 157+ 2773             >
 157+ 2773 73 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 2775             >
 157+ 2775             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 2775 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 2778             >
 157+ 2778             >
 157+ 2778             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 2778             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 2778             >
 157+ 2778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 2778 0A          >                db      10
 158+ 2779                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 2779             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 2779             >
 158+ 2779             >Dict_Ptr        defl    $
 158+ 2779             >
 158+ 2779             >//              ______________________________________________________________________
 158+ 2779             >//              Heap part
 158+ 2779             >
 158+ 2779             >
 158+ 2779             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E475             >
 158+ E475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E475             >Latest_Definition defl  Heap_Ptr
 158+ E475             >
 158+ E475             >                // dummy db directives used to calculate length of namec
 158+ E475 57 49 44 54 >                db      "WIDTH"
 158+ E479 48          >
 158+ E47A             >len_NFA         defl    $ - temp_NFA
 158+ E47A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E475             >
 158+ E475 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E476 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47A 48          >
 158+ E47B             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47A C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47B             >
 158+ E47B 6D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E47D             >Prev_Ptr        defl    Heap_Ptr
 158+ E47D             >
 158+ E47D             >mirror_Ptr      defl    $
 158+ E47D             >
 158+ E47D 7B 27       >                dw      Dict_Ptr + 2        // xt
 158+ E47F             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E47F             >
 158+ E47F             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E47F             >
 158+ E47F             >//              ______________________________________________________________________
 158+ E47F             >//              Dictionary part
 158+ E47F             >
 158+ E47F             >                org     Dict_Ptr
 158+ 2779             >
 158+ 2779 7D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 277B             >
 158+ 277B             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 277B CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 277E             >
 158+ 277E             >
 158+ 277E             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 277E             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 277E             >
 158+ 277E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 277E 0C          >                db      12
 159+ 277F                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 277F             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 277F             >
 159+ 277F             >Dict_Ptr        defl    $
 159+ 277F             >
 159+ 277F             >//              ______________________________________________________________________
 159+ 277F             >//              Heap part
 159+ 277F             >
 159+ 277F             >
 159+ 277F             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E47F             >
 159+ E47F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E47F             >Latest_Definition defl  Heap_Ptr
 159+ E47F             >
 159+ E47F             >                // dummy db directives used to calculate length of namec
 159+ E47F 57 41 52 4E >                db      "WARNING"
 159+ E483 49 4E 47    >
 159+ E486             >len_NFA         defl    $ - temp_NFA
 159+ E486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E47F             >
 159+ E47F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E480 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E484 49 4E 47    >
 159+ E487             >                org     $-1                 // alter last byte of Name just above to set
 159+ E486 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E487             >
 159+ E487 75 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E489             >Prev_Ptr        defl    Heap_Ptr
 159+ E489             >
 159+ E489             >mirror_Ptr      defl    $
 159+ E489             >
 159+ E489 81 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48B             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48B             >
 159+ E48B             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48B             >
 159+ E48B             >//              ______________________________________________________________________
 159+ E48B             >//              Dictionary part
 159+ E48B             >
 159+ E48B             >                org     Dict_Ptr
 159+ 277F             >
 159+ 277F 89 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 2781             >
 159+ 2781             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 2781 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 2784             >
 159+ 2784             >
 159+ 2784             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 2784             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 2784             >
 159+ 2784             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 2784 0E          >                db      14
 160+ 2785                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 2785             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 2785             >
 160+ 2785             >Dict_Ptr        defl    $
 160+ 2785             >
 160+ 2785             >//              ______________________________________________________________________
 160+ 2785             >//              Heap part
 160+ 2785             >
 160+ 2785             >
 160+ 2785             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48B             >
 160+ E48B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48B             >Latest_Definition defl  Heap_Ptr
 160+ E48B             >
 160+ E48B             >                // dummy db directives used to calculate length of namec
 160+ E48B 46 45 4E 43 >                db      "FENCE"
 160+ E48F 45          >
 160+ E490             >len_NFA         defl    $ - temp_NFA
 160+ E490             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48B             >
 160+ E48B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48C 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E490 45          >
 160+ E491             >                org     $-1                 // alter last byte of Name just above to set
 160+ E490 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E491             >
 160+ E491 7F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E493             >Prev_Ptr        defl    Heap_Ptr
 160+ E493             >
 160+ E493             >mirror_Ptr      defl    $
 160+ E493             >
 160+ E493 87 27       >                dw      Dict_Ptr + 2        // xt
 160+ E495             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E495             >
 160+ E495             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E495             >
 160+ E495             >//              ______________________________________________________________________
 160+ E495             >//              Dictionary part
 160+ E495             >
 160+ E495             >                org     Dict_Ptr
 160+ 2785             >
 160+ 2785 93 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 2787             >
 160+ 2787             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 2787 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 278A             >
 160+ 278A             >
 160+ 278A             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 278A             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 278A             >
 160+ 278A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 278A 10          >                db      16
 161+ 278B                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 278B             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 278B             >
 161+ 278B             >Dict_Ptr        defl    $
 161+ 278B             >
 161+ 278B             >//              ______________________________________________________________________
 161+ 278B             >//              Heap part
 161+ 278B             >
 161+ 278B             >
 161+ 278B             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E495             >
 161+ E495             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E495             >Latest_Definition defl  Heap_Ptr
 161+ E495             >
 161+ E495             >                // dummy db directives used to calculate length of namec
 161+ E495 44 50       >                db      "DP"
 161+ E497             >len_NFA         defl    $ - temp_NFA
 161+ E497             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E495             >
 161+ E495 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E496 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E498             >                org     $-1                 // alter last byte of Name just above to set
 161+ E497 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E498             >
 161+ E498 8B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49A             >Prev_Ptr        defl    Heap_Ptr
 161+ E49A             >
 161+ E49A             >mirror_Ptr      defl    $
 161+ E49A             >
 161+ E49A 8D 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49C             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49C             >
 161+ E49C             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49C             >
 161+ E49C             >//              ______________________________________________________________________
 161+ E49C             >//              Dictionary part
 161+ E49C             >
 161+ E49C             >                org     Dict_Ptr
 161+ 278B             >
 161+ 278B 9A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 278D             >
 161+ 278D             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 278D CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 2790             >
 161+ 2790             >
 161+ 2790             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 2790             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 2790             >
 161+ 2790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 2790 12          >                db      18
 162+ 2791                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 2791             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 2791             >
 162+ 2791             >Dict_Ptr        defl    $
 162+ 2791             >
 162+ 2791             >//              ______________________________________________________________________
 162+ 2791             >//              Heap part
 162+ 2791             >
 162+ 2791             >
 162+ 2791             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49C             >
 162+ E49C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49C             >Latest_Definition defl  Heap_Ptr
 162+ E49C             >
 162+ E49C             >                // dummy db directives used to calculate length of namec
 162+ E49C 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A0 4C 49 4E 4B >
 162+ E4A4             >len_NFA         defl    $ - temp_NFA
 162+ E4A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49C             >
 162+ E49C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E49D 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A1 4C 49 4E 4B >
 162+ E4A5             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A4 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A5             >
 162+ E4A5 95 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4A7             >Prev_Ptr        defl    Heap_Ptr
 162+ E4A7             >
 162+ E4A7             >mirror_Ptr      defl    $
 162+ E4A7             >
 162+ E4A7 93 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4A9             >
 162+ E4A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4A9             >
 162+ E4A9             >//              ______________________________________________________________________
 162+ E4A9             >//              Dictionary part
 162+ E4A9             >
 162+ E4A9             >                org     Dict_Ptr
 162+ 2791             >
 162+ 2791 A7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2793             >
 162+ 2793             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 2793 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 2796             >
 162+ 2796             >
 162+ 2796             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 2796             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 2796             >
 162+ 2796             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 2796 14          >                db      20
 163+ 2797                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 2797             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 2797             >
 163+ 2797             >Dict_Ptr        defl    $
 163+ 2797             >
 163+ 2797             >//              ______________________________________________________________________
 163+ 2797             >//              Heap part
 163+ 2797             >
 163+ 2797             >
 163+ 2797             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4A9             >
 163+ E4A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4A9             >Latest_Definition defl  Heap_Ptr
 163+ E4A9             >
 163+ E4A9             >                // dummy db directives used to calculate length of namec
 163+ E4A9 46 49 52 53 >                db      "FIRST"
 163+ E4AD 54          >
 163+ E4AE             >len_NFA         defl    $ - temp_NFA
 163+ E4AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4A9             >
 163+ E4A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AA 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4AE 54          >
 163+ E4AF             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4AE D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4AF             >
 163+ E4AF 9C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B1             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B1             >
 163+ E4B1             >mirror_Ptr      defl    $
 163+ E4B1             >
 163+ E4B1 99 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B3             >
 163+ E4B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B3             >
 163+ E4B3             >//              ______________________________________________________________________
 163+ E4B3             >//              Dictionary part
 163+ E4B3             >
 163+ E4B3             >                org     Dict_Ptr
 163+ 2797             >
 163+ 2797 B1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 2799             >
 163+ 2799             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 2799 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 279C             >
 163+ 279C             >
 163+ 279C             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 279C             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 279C             >
 163+ 279C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 279C 16          >                db      22
 164+ 279D                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 279D             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 279D             >
 164+ 279D             >Dict_Ptr        defl    $
 164+ 279D             >
 164+ 279D             >//              ______________________________________________________________________
 164+ 279D             >//              Heap part
 164+ 279D             >
 164+ 279D             >
 164+ 279D             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B3             >
 164+ E4B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B3             >Latest_Definition defl  Heap_Ptr
 164+ E4B3             >
 164+ E4B3             >                // dummy db directives used to calculate length of namec
 164+ E4B3 4C 49 4D 49 >                db      "LIMIT"
 164+ E4B7 54          >
 164+ E4B8             >len_NFA         defl    $ - temp_NFA
 164+ E4B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B3             >
 164+ E4B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B4 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4B8 54          >
 164+ E4B9             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4B8 D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4B9             >
 164+ E4B9 A9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BB             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BB             >
 164+ E4BB             >mirror_Ptr      defl    $
 164+ E4BB             >
 164+ E4BB 9F 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4BD             >
 164+ E4BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4BD             >
 164+ E4BD             >//              ______________________________________________________________________
 164+ E4BD             >//              Dictionary part
 164+ E4BD             >
 164+ E4BD             >                org     Dict_Ptr
 164+ 279D             >
 164+ 279D BB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 279F             >
 164+ 279F             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 279F CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27A2             >
 164+ 27A2             >
 164+ 27A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27A2             >
 164+ 27A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27A2 18          >                db      24
 165+ 27A3                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27A3             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27A3             >
 165+ 27A3             >Dict_Ptr        defl    $
 165+ 27A3             >
 165+ 27A3             >//              ______________________________________________________________________
 165+ 27A3             >//              Heap part
 165+ 27A3             >
 165+ 27A3             >
 165+ 27A3             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4BD             >
 165+ E4BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4BD             >Latest_Definition defl  Heap_Ptr
 165+ E4BD             >
 165+ E4BD             >                // dummy db directives used to calculate length of namec
 165+ E4BD 48 50       >                db      "HP"
 165+ E4BF             >len_NFA         defl    $ - temp_NFA
 165+ E4BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4BD             >
 165+ E4BD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4BE 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C0             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4BF D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C0             >
 165+ E4C0 B3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C2             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C2             >
 165+ E4C2             >mirror_Ptr      defl    $
 165+ E4C2             >
 165+ E4C2 A5 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C4             >
 165+ E4C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C4             >
 165+ E4C4             >//              ______________________________________________________________________
 165+ E4C4             >//              Dictionary part
 165+ E4C4             >
 165+ E4C4             >                org     Dict_Ptr
 165+ 27A3             >
 165+ 27A3 C2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27A5             >
 165+ 27A5             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27A5 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27A8             >
 165+ 27A8             >
 165+ 27A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27A8             >
 165+ 27A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27A8 1A          >                db      26
 166+ 27A9                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27A9             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27A9             >
 166+ 27A9             >Dict_Ptr        defl    $
 166+ 27A9             >
 166+ 27A9             >//              ______________________________________________________________________
 166+ 27A9             >//              Heap part
 166+ 27A9             >
 166+ 27A9             >
 166+ 27A9             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C4             >
 166+ E4C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C4             >Latest_Definition defl  Heap_Ptr
 166+ E4C4             >
 166+ E4C4             >                // dummy db directives used to calculate length of namec
 166+ E4C4 4E 4D 4F 44 >                db      "NMODE"
 166+ E4C8 45          >
 166+ E4C9             >len_NFA         defl    $ - temp_NFA
 166+ E4C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C4             >
 166+ E4C4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C5 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4C9 45          >
 166+ E4CA             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4C9 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CA             >
 166+ E4CA BD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CC             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CC             >
 166+ E4CC             >mirror_Ptr      defl    $
 166+ E4CC             >
 166+ E4CC AB 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4CE             >
 166+ E4CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4CE             >
 166+ E4CE             >//              ______________________________________________________________________
 166+ E4CE             >//              Dictionary part
 166+ E4CE             >
 166+ E4CE             >                org     Dict_Ptr
 166+ 27A9             >
 166+ 27A9 CC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27AB             >
 166+ 27AB             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27AB CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27AE             >
 166+ 27AE             >
 166+ 27AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27AE             >
 166+ 27AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27AE 1C          >                db      28
 167+ 27AF                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27AF             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27AF             >
 167+ 27AF             >Dict_Ptr        defl    $
 167+ 27AF             >
 167+ 27AF             >//              ______________________________________________________________________
 167+ 27AF             >//              Heap part
 167+ 27AF             >
 167+ 27AF             >
 167+ 27AF             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4CE             >
 167+ E4CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4CE             >Latest_Definition defl  Heap_Ptr
 167+ E4CE             >
 167+ E4CE             >                // dummy db directives used to calculate length of namec
 167+ E4CE 42 4C 4B    >                db      "BLK"
 167+ E4D1             >len_NFA         defl    $ - temp_NFA
 167+ E4D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4CE             >
 167+ E4CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4CF 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D2             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D1 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D2             >
 167+ E4D2 C4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D4             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D4             >
 167+ E4D4             >mirror_Ptr      defl    $
 167+ E4D4             >
 167+ E4D4 B1 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D6             >
 167+ E4D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D6             >
 167+ E4D6             >//              ______________________________________________________________________
 167+ E4D6             >//              Dictionary part
 167+ E4D6             >
 167+ E4D6             >                org     Dict_Ptr
 167+ 27AF             >
 167+ 27AF D4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27B1             >
 167+ 27B1             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27B1 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27B4             >
 167+ 27B4             >
 167+ 27B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27B4             >
 167+ 27B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27B4 1E          >                db      30
 168+ 27B5                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27B5             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27B5             >
 168+ 27B5             >Dict_Ptr        defl    $
 168+ 27B5             >
 168+ 27B5             >//              ______________________________________________________________________
 168+ 27B5             >//              Heap part
 168+ 27B5             >
 168+ 27B5             >
 168+ 27B5             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D6             >
 168+ E4D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D6             >Latest_Definition defl  Heap_Ptr
 168+ E4D6             >
 168+ E4D6             >                // dummy db directives used to calculate length of namec
 168+ E4D6 3E 49 4E    >                db      ">IN"
 168+ E4D9             >len_NFA         defl    $ - temp_NFA
 168+ E4D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D6             >
 168+ E4D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4D7 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DA             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4D9 CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DA             >
 168+ E4DA CE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DC             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DC             >
 168+ E4DC             >mirror_Ptr      defl    $
 168+ E4DC             >
 168+ E4DC B7 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4DE             >
 168+ E4DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4DE             >
 168+ E4DE             >//              ______________________________________________________________________
 168+ E4DE             >//              Dictionary part
 168+ E4DE             >
 168+ E4DE             >                org     Dict_Ptr
 168+ 27B5             >
 168+ 27B5 DC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27B7             >
 168+ 27B7             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27B7 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27BA             >
 168+ 27BA             >
 168+ 27BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27BA             >
 168+ 27BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27BA 20          >                db      32
 169+ 27BB                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27BB             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27BB             >
 169+ 27BB             >Dict_Ptr        defl    $
 169+ 27BB             >
 169+ 27BB             >//              ______________________________________________________________________
 169+ 27BB             >//              Heap part
 169+ 27BB             >
 169+ 27BB             >
 169+ 27BB             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4DE             >
 169+ E4DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4DE             >Latest_Definition defl  Heap_Ptr
 169+ E4DE             >
 169+ E4DE             >                // dummy db directives used to calculate length of namec
 169+ E4DE 4F 55 54    >                db      "OUT"
 169+ E4E1             >len_NFA         defl    $ - temp_NFA
 169+ E4E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4DE             >
 169+ E4DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4DF 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E2             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E1 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E2             >
 169+ E4E2 D6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E4             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E4             >
 169+ E4E4             >mirror_Ptr      defl    $
 169+ E4E4             >
 169+ E4E4 BD 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E6             >
 169+ E4E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E6             >
 169+ E4E6             >//              ______________________________________________________________________
 169+ E4E6             >//              Dictionary part
 169+ E4E6             >
 169+ E4E6             >                org     Dict_Ptr
 169+ 27BB             >
 169+ 27BB E4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27BD             >
 169+ 27BD             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27BD CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27C0             >
 169+ 27C0             >
 169+ 27C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27C0             >
 169+ 27C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27C0 22          >                db      34
 170+ 27C1                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27C1             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27C1             >
 170+ 27C1             >Dict_Ptr        defl    $
 170+ 27C1             >
 170+ 27C1             >//              ______________________________________________________________________
 170+ 27C1             >//              Heap part
 170+ 27C1             >
 170+ 27C1             >
 170+ 27C1             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E6             >
 170+ E4E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E6             >Latest_Definition defl  Heap_Ptr
 170+ E4E6             >
 170+ E4E6             >                // dummy db directives used to calculate length of namec
 170+ E4E6 53 43 52    >                db      "SCR"
 170+ E4E9             >len_NFA         defl    $ - temp_NFA
 170+ E4E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E6             >
 170+ E4E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4E7 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EA             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4E9 D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EA             >
 170+ E4EA DE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EC             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EC             >
 170+ E4EC             >mirror_Ptr      defl    $
 170+ E4EC             >
 170+ E4EC C3 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4EE             >
 170+ E4EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4EE             >
 170+ E4EE             >//              ______________________________________________________________________
 170+ E4EE             >//              Dictionary part
 170+ E4EE             >
 170+ E4EE             >                org     Dict_Ptr
 170+ 27C1             >
 170+ 27C1 EC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27C3             >
 170+ 27C3             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27C3 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27C6             >
 170+ 27C6             >
 170+ 27C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27C6             >
 170+ 27C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27C6 24          >                db      36
 171+ 27C7                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27C7             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27C7             >
 171+ 27C7             >Dict_Ptr        defl    $
 171+ 27C7             >
 171+ 27C7             >//              ______________________________________________________________________
 171+ 27C7             >//              Heap part
 171+ 27C7             >
 171+ 27C7             >
 171+ 27C7             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4EE             >
 171+ E4EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4EE             >Latest_Definition defl  Heap_Ptr
 171+ E4EE             >
 171+ E4EE             >                // dummy db directives used to calculate length of namec
 171+ E4EE 4F 46 46 53 >                db      "OFFSET"
 171+ E4F2 45 54       >
 171+ E4F4             >len_NFA         defl    $ - temp_NFA
 171+ E4F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4EE             >
 171+ E4EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4EF 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F3 45 54       >
 171+ E4F5             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F4 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F5             >
 171+ E4F5 E6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4F7             >Prev_Ptr        defl    Heap_Ptr
 171+ E4F7             >
 171+ E4F7             >mirror_Ptr      defl    $
 171+ E4F7             >
 171+ E4F7 C9 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4F9             >
 171+ E4F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4F9             >
 171+ E4F9             >//              ______________________________________________________________________
 171+ E4F9             >//              Dictionary part
 171+ E4F9             >
 171+ E4F9             >                org     Dict_Ptr
 171+ 27C7             >
 171+ 27C7 F7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27C9             >
 171+ 27C9             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27C9 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27CC             >
 171+ 27CC             >
 171+ 27CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27CC             >
 171+ 27CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27CC 26          >                db      38
 172+ 27CD                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27CD             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27CD             >
 172+ 27CD             >Dict_Ptr        defl    $
 172+ 27CD             >
 172+ 27CD             >//              ______________________________________________________________________
 172+ 27CD             >//              Heap part
 172+ 27CD             >
 172+ 27CD             >
 172+ 27CD             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4F9             >
 172+ E4F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4F9             >Latest_Definition defl  Heap_Ptr
 172+ E4F9             >
 172+ E4F9             >                // dummy db directives used to calculate length of namec
 172+ E4F9 43 4F 4E 54 >                db      "CONTEXT"
 172+ E4FD 45 58 54    >
 172+ E500             >len_NFA         defl    $ - temp_NFA
 172+ E500             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4F9             >
 172+ E4F9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FA 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E4FE 45 58 54    >
 172+ E501             >                org     $-1                 // alter last byte of Name just above to set
 172+ E500 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E501             >
 172+ E501 EE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E503             >Prev_Ptr        defl    Heap_Ptr
 172+ E503             >
 172+ E503             >mirror_Ptr      defl    $
 172+ E503             >
 172+ E503 CF 27       >                dw      Dict_Ptr + 2        // xt
 172+ E505             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E505             >
 172+ E505             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E505             >
 172+ E505             >//              ______________________________________________________________________
 172+ E505             >//              Dictionary part
 172+ E505             >
 172+ E505             >                org     Dict_Ptr
 172+ 27CD             >
 172+ 27CD 03 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27CF             >
 172+ 27CF             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27CF CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 27D2             >
 172+ 27D2             >
 172+ 27D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 27D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 27D2             >
 172+ 27D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 27D2 28          >                db      40
 173+ 27D3                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 27D3             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 27D3             >
 173+ 27D3             >Dict_Ptr        defl    $
 173+ 27D3             >
 173+ 27D3             >//              ______________________________________________________________________
 173+ 27D3             >//              Heap part
 173+ 27D3             >
 173+ 27D3             >
 173+ 27D3             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E505             >
 173+ E505             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E505             >Latest_Definition defl  Heap_Ptr
 173+ E505             >
 173+ E505             >                // dummy db directives used to calculate length of namec
 173+ E505 43 55 52 52 >                db      "CURRENT"
 173+ E509 45 4E 54    >
 173+ E50C             >len_NFA         defl    $ - temp_NFA
 173+ E50C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E505             >
 173+ E505 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E506 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50A 45 4E 54    >
 173+ E50D             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50C D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E50D             >
 173+ E50D F9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E50F             >Prev_Ptr        defl    Heap_Ptr
 173+ E50F             >
 173+ E50F             >mirror_Ptr      defl    $
 173+ E50F             >
 173+ E50F D5 27       >                dw      Dict_Ptr + 2        // xt
 173+ E511             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E511             >
 173+ E511             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E511             >
 173+ E511             >//              ______________________________________________________________________
 173+ E511             >//              Dictionary part
 173+ E511             >
 173+ E511             >                org     Dict_Ptr
 173+ 27D3             >
 173+ 27D3 0F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 27D5             >
 173+ 27D5             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 27D5 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 27D8             >
 173+ 27D8             >
 173+ 27D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 27D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 27D8             >
 173+ 27D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 27D8 2A          >                db      42
 174+ 27D9                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 27D9             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 27D9             >
 174+ 27D9             >Dict_Ptr        defl    $
 174+ 27D9             >
 174+ 27D9             >//              ______________________________________________________________________
 174+ 27D9             >//              Heap part
 174+ 27D9             >
 174+ 27D9             >
 174+ 27D9             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E511             >
 174+ E511             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E511             >Latest_Definition defl  Heap_Ptr
 174+ E511             >
 174+ E511             >                // dummy db directives used to calculate length of namec
 174+ E511 53 54 41 54 >                db      "STATE"
 174+ E515 45          >
 174+ E516             >len_NFA         defl    $ - temp_NFA
 174+ E516             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E511             >
 174+ E511 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E512 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E516 45          >
 174+ E517             >                org     $-1                 // alter last byte of Name just above to set
 174+ E516 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E517             >
 174+ E517 05 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E519             >Prev_Ptr        defl    Heap_Ptr
 174+ E519             >
 174+ E519             >mirror_Ptr      defl    $
 174+ E519             >
 174+ E519 DB 27       >                dw      Dict_Ptr + 2        // xt
 174+ E51B             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51B             >
 174+ E51B             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51B             >
 174+ E51B             >//              ______________________________________________________________________
 174+ E51B             >//              Dictionary part
 174+ E51B             >
 174+ E51B             >                org     Dict_Ptr
 174+ 27D9             >
 174+ 27D9 19 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 27DB             >
 174+ 27DB             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 27DB CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 27DE             >
 174+ 27DE             >
 174+ 27DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 27DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 27DE             >
 174+ 27DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 27DE 2C          >                db      44
 175+ 27DF                              User_Def BASE       , "BASE"      , 46 //
 175+ 27DF             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 27DF             >
 175+ 27DF             >Dict_Ptr        defl    $
 175+ 27DF             >
 175+ 27DF             >//              ______________________________________________________________________
 175+ 27DF             >//              Heap part
 175+ 27DF             >
 175+ 27DF             >
 175+ 27DF             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51B             >
 175+ E51B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51B             >Latest_Definition defl  Heap_Ptr
 175+ E51B             >
 175+ E51B             >                // dummy db directives used to calculate length of namec
 175+ E51B 42 41 53 45 >                db      "BASE"
 175+ E51F             >len_NFA         defl    $ - temp_NFA
 175+ E51F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51B             >
 175+ E51B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51C 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E520             >                org     $-1                 // alter last byte of Name just above to set
 175+ E51F C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E520             >
 175+ E520 11 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E522             >Prev_Ptr        defl    Heap_Ptr
 175+ E522             >
 175+ E522             >mirror_Ptr      defl    $
 175+ E522             >
 175+ E522 E1 27       >                dw      Dict_Ptr + 2        // xt
 175+ E524             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E524             >
 175+ E524             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E524             >
 175+ E524             >//              ______________________________________________________________________
 175+ E524             >//              Dictionary part
 175+ E524             >
 175+ E524             >                org     Dict_Ptr
 175+ 27DF             >
 175+ 27DF 22 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 27E1             >
 175+ 27E1             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 27E1 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 27E4             >
 175+ 27E4             >
 175+ 27E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 27E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 27E4             >
 175+ 27E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 27E4 2E          >                db      46
 176+ 27E5                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 27E5             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 27E5             >
 176+ 27E5             >Dict_Ptr        defl    $
 176+ 27E5             >
 176+ 27E5             >//              ______________________________________________________________________
 176+ 27E5             >//              Heap part
 176+ 27E5             >
 176+ 27E5             >
 176+ 27E5             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E524             >
 176+ E524             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E524             >Latest_Definition defl  Heap_Ptr
 176+ E524             >
 176+ E524             >                // dummy db directives used to calculate length of namec
 176+ E524 44 50 4C    >                db      "DPL"
 176+ E527             >len_NFA         defl    $ - temp_NFA
 176+ E527             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E524             >
 176+ E524 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E525 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E528             >                org     $-1                 // alter last byte of Name just above to set
 176+ E527 CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E528             >
 176+ E528 1B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52A             >Prev_Ptr        defl    Heap_Ptr
 176+ E52A             >
 176+ E52A             >mirror_Ptr      defl    $
 176+ E52A             >
 176+ E52A E7 27       >                dw      Dict_Ptr + 2        // xt
 176+ E52C             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52C             >
 176+ E52C             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52C             >
 176+ E52C             >//              ______________________________________________________________________
 176+ E52C             >//              Dictionary part
 176+ E52C             >
 176+ E52C             >                org     Dict_Ptr
 176+ 27E5             >
 176+ 27E5 2A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 27E7             >
 176+ 27E7             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 27E7 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 27EA             >
 176+ 27EA             >
 176+ 27EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 27EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 27EA             >
 176+ 27EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 27EA 30          >                db      48
 177+ 27EB                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 27EB             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 27EB             >
 177+ 27EB             >Dict_Ptr        defl    $
 177+ 27EB             >
 177+ 27EB             >//              ______________________________________________________________________
 177+ 27EB             >//              Heap part
 177+ 27EB             >
 177+ 27EB             >
 177+ 27EB             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52C             >
 177+ E52C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52C             >Latest_Definition defl  Heap_Ptr
 177+ E52C             >
 177+ E52C             >                // dummy db directives used to calculate length of namec
 177+ E52C 46 4C 44    >                db      "FLD"
 177+ E52F             >len_NFA         defl    $ - temp_NFA
 177+ E52F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52C             >
 177+ E52C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E52D 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E530             >                org     $-1                 // alter last byte of Name just above to set
 177+ E52F C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E530             >
 177+ E530 24 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E532             >Prev_Ptr        defl    Heap_Ptr
 177+ E532             >
 177+ E532             >mirror_Ptr      defl    $
 177+ E532             >
 177+ E532 ED 27       >                dw      Dict_Ptr + 2        // xt
 177+ E534             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E534             >
 177+ E534             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E534             >
 177+ E534             >//              ______________________________________________________________________
 177+ E534             >//              Dictionary part
 177+ E534             >
 177+ E534             >                org     Dict_Ptr
 177+ 27EB             >
 177+ 27EB 32 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 27ED             >
 177+ 27ED             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 27ED CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 27F0             >
 177+ 27F0             >
 177+ 27F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 27F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 27F0             >
 177+ 27F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 27F0 32          >                db      50
 178+ 27F1                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 27F1             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 27F1             >
 178+ 27F1             >Dict_Ptr        defl    $
 178+ 27F1             >
 178+ 27F1             >//              ______________________________________________________________________
 178+ 27F1             >//              Heap part
 178+ 27F1             >
 178+ 27F1             >
 178+ 27F1             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E534             >
 178+ E534             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E534             >Latest_Definition defl  Heap_Ptr
 178+ E534             >
 178+ E534             >                // dummy db directives used to calculate length of namec
 178+ E534 43 53 50    >                db      "CSP"
 178+ E537             >len_NFA         defl    $ - temp_NFA
 178+ E537             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E534             >
 178+ E534 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E535 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E538             >                org     $-1                 // alter last byte of Name just above to set
 178+ E537 D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E538             >
 178+ E538 2C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53A             >Prev_Ptr        defl    Heap_Ptr
 178+ E53A             >
 178+ E53A             >mirror_Ptr      defl    $
 178+ E53A             >
 178+ E53A F3 27       >                dw      Dict_Ptr + 2        // xt
 178+ E53C             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53C             >
 178+ E53C             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53C             >
 178+ E53C             >//              ______________________________________________________________________
 178+ E53C             >//              Dictionary part
 178+ E53C             >
 178+ E53C             >                org     Dict_Ptr
 178+ 27F1             >
 178+ 27F1 3A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 27F3             >
 178+ 27F3             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 27F3 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 27F6             >
 178+ 27F6             >
 178+ 27F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 27F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 27F6             >
 178+ 27F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 27F6 34          >                db      52
 179+ 27F7                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 27F7             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 27F7             >
 179+ 27F7             >Dict_Ptr        defl    $
 179+ 27F7             >
 179+ 27F7             >//              ______________________________________________________________________
 179+ 27F7             >//              Heap part
 179+ 27F7             >
 179+ 27F7             >
 179+ 27F7             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53C             >
 179+ E53C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53C             >Latest_Definition defl  Heap_Ptr
 179+ E53C             >
 179+ E53C             >                // dummy db directives used to calculate length of namec
 179+ E53C 52 23       >                db      "R#"
 179+ E53E             >len_NFA         defl    $ - temp_NFA
 179+ E53E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53C             >
 179+ E53C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E53D 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E53F             >                org     $-1                 // alter last byte of Name just above to set
 179+ E53E A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E53F             >
 179+ E53F 34 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E541             >Prev_Ptr        defl    Heap_Ptr
 179+ E541             >
 179+ E541             >mirror_Ptr      defl    $
 179+ E541             >
 179+ E541 F9 27       >                dw      Dict_Ptr + 2        // xt
 179+ E543             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E543             >
 179+ E543             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E543             >
 179+ E543             >//              ______________________________________________________________________
 179+ E543             >//              Dictionary part
 179+ E543             >
 179+ E543             >                org     Dict_Ptr
 179+ 27F7             >
 179+ 27F7 41 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 27F9             >
 179+ 27F9             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 27F9 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 27FC             >
 179+ 27FC             >
 179+ 27FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 27FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 27FC             >
 179+ 27FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 27FC 36          >                db      54
 180+ 27FD                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 27FD             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 27FD             >
 180+ 27FD             >Dict_Ptr        defl    $
 180+ 27FD             >
 180+ 27FD             >//              ______________________________________________________________________
 180+ 27FD             >//              Heap part
 180+ 27FD             >
 180+ 27FD             >
 180+ 27FD             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E543             >
 180+ E543             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E543             >Latest_Definition defl  Heap_Ptr
 180+ E543             >
 180+ E543             >                // dummy db directives used to calculate length of namec
 180+ E543 48 4C 44    >                db      "HLD"
 180+ E546             >len_NFA         defl    $ - temp_NFA
 180+ E546             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E543             >
 180+ E543 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E544 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E547             >                org     $-1                 // alter last byte of Name just above to set
 180+ E546 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E547             >
 180+ E547 3C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E549             >Prev_Ptr        defl    Heap_Ptr
 180+ E549             >
 180+ E549             >mirror_Ptr      defl    $
 180+ E549             >
 180+ E549 FF 27       >                dw      Dict_Ptr + 2        // xt
 180+ E54B             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54B             >
 180+ E54B             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54B             >
 180+ E54B             >//              ______________________________________________________________________
 180+ E54B             >//              Dictionary part
 180+ E54B             >
 180+ E54B             >                org     Dict_Ptr
 180+ 27FD             >
 180+ 27FD 49 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 27FF             >
 180+ 27FF             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 27FF CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 2802             >
 180+ 2802             >
 180+ 2802             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 2802             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 2802             >
 180+ 2802             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 2802 38          >                db      56
 181+ 2803                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 2803             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 2803             >
 181+ 2803             >Dict_Ptr        defl    $
 181+ 2803             >
 181+ 2803             >//              ______________________________________________________________________
 181+ 2803             >//              Heap part
 181+ 2803             >
 181+ 2803             >
 181+ 2803             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54B             >
 181+ E54B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54B             >Latest_Definition defl  Heap_Ptr
 181+ E54B             >
 181+ E54B             >                // dummy db directives used to calculate length of namec
 181+ E54B 55 53 45 44 >                db      "USED"
 181+ E54F             >len_NFA         defl    $ - temp_NFA
 181+ E54F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54B             >
 181+ E54B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54C 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E550             >                org     $-1                 // alter last byte of Name just above to set
 181+ E54F C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E550             >
 181+ E550 43 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E552             >Prev_Ptr        defl    Heap_Ptr
 181+ E552             >
 181+ E552             >mirror_Ptr      defl    $
 181+ E552             >
 181+ E552 05 28       >                dw      Dict_Ptr + 2        // xt
 181+ E554             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E554             >
 181+ E554             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E554             >
 181+ E554             >//              ______________________________________________________________________
 181+ E554             >//              Dictionary part
 181+ E554             >
 181+ E554             >                org     Dict_Ptr
 181+ 2803             >
 181+ 2803 52 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 2805             >
 181+ 2805             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 2805 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 2808             >
 181+ 2808             >
 181+ 2808             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 2808             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 2808             >
 181+ 2808             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 2808 3A          >                db      58
 182+ 2809                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2809             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2809             >
 182+ 2809             >Dict_Ptr        defl    $
 182+ 2809             >
 182+ 2809             >//              ______________________________________________________________________
 182+ 2809             >//              Heap part
 182+ 2809             >
 182+ 2809             >
 182+ 2809             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E554             >
 182+ E554             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E554             >Latest_Definition defl  Heap_Ptr
 182+ E554             >
 182+ E554             >                // dummy db directives used to calculate length of namec
 182+ E554 50 52 45 56 >                db      "PREV"
 182+ E558             >len_NFA         defl    $ - temp_NFA
 182+ E558             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E554             >
 182+ E554 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E555 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E559             >                org     $-1                 // alter last byte of Name just above to set
 182+ E558 D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E559             >
 182+ E559 4B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55B             >Prev_Ptr        defl    Heap_Ptr
 182+ E55B             >
 182+ E55B             >mirror_Ptr      defl    $
 182+ E55B             >
 182+ E55B 0B 28       >                dw      Dict_Ptr + 2        // xt
 182+ E55D             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E55D             >
 182+ E55D             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E55D             >
 182+ E55D             >//              ______________________________________________________________________
 182+ E55D             >//              Dictionary part
 182+ E55D             >
 182+ E55D             >                org     Dict_Ptr
 182+ 2809             >
 182+ 2809 5B 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 280B             >
 182+ 280B             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 280B CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 280E             >
 182+ 280E             >
 182+ 280E             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 280E             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 280E             >
 182+ 280E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 280E 3C          >                db      60
 183+ 280F                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 280F             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 280F             >
 183+ 280F             >Dict_Ptr        defl    $
 183+ 280F             >
 183+ 280F             >//              ______________________________________________________________________
 183+ 280F             >//              Heap part
 183+ 280F             >
 183+ 280F             >
 183+ 280F             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E55D             >
 183+ E55D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E55D             >Latest_Definition defl  Heap_Ptr
 183+ E55D             >
 183+ E55D             >                // dummy db directives used to calculate length of namec
 183+ E55D 4C 50       >                db      "LP"
 183+ E55F             >len_NFA         defl    $ - temp_NFA
 183+ E55F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E55D             >
 183+ E55D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E55E 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E560             >                org     $-1                 // alter last byte of Name just above to set
 183+ E55F D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E560             >
 183+ E560 54 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E562             >Prev_Ptr        defl    Heap_Ptr
 183+ E562             >
 183+ E562             >mirror_Ptr      defl    $
 183+ E562             >
 183+ E562 11 28       >                dw      Dict_Ptr + 2        // xt
 183+ E564             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E564             >
 183+ E564             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E564             >
 183+ E564             >//              ______________________________________________________________________
 183+ E564             >//              Dictionary part
 183+ E564             >
 183+ E564             >                org     Dict_Ptr
 183+ 280F             >
 183+ 280F 62 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 2811             >
 183+ 2811             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 2811 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 2814             >
 183+ 2814             >
 183+ 2814             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 2814             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 2814             >
 183+ 2814             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 2814 3E          >                db      62
 184+ 2815                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 2815             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 2815             >
 184+ 2815             >Dict_Ptr        defl    $
 184+ 2815             >
 184+ 2815             >//              ______________________________________________________________________
 184+ 2815             >//              Heap part
 184+ 2815             >
 184+ 2815             >
 184+ 2815             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E564             >
 184+ E564             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E564             >Latest_Definition defl  Heap_Ptr
 184+ E564             >
 184+ E564             >                // dummy db directives used to calculate length of namec
 184+ E564 50 4C 41 43 >                db      "PLACE"
 184+ E568 45          >
 184+ E569             >len_NFA         defl    $ - temp_NFA
 184+ E569             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E564             >
 184+ E564 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E565 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E569 45          >
 184+ E56A             >                org     $-1                 // alter last byte of Name just above to set
 184+ E569 C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56A             >
 184+ E56A 5D 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56C             >Prev_Ptr        defl    Heap_Ptr
 184+ E56C             >
 184+ E56C             >mirror_Ptr      defl    $
 184+ E56C             >
 184+ E56C 17 28       >                dw      Dict_Ptr + 2        // xt
 184+ E56E             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E56E             >
 184+ E56E             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E56E             >
 184+ E56E             >//              ______________________________________________________________________
 184+ E56E             >//              Dictionary part
 184+ E56E             >
 184+ E56E             >                org     Dict_Ptr
 184+ 2815             >
 184+ 2815 6C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 2817             >
 184+ 2817             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 2817 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 281A             >
 184+ 281A             >
 184+ 281A             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 281A             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 281A             >
 184+ 281A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 281A 40          >                db      64
 185+ 281B                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 281B             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 281B             >
 185+ 281B             >Dict_Ptr        defl    $
 185+ 281B             >
 185+ 281B             >//              ______________________________________________________________________
 185+ 281B             >//              Heap part
 185+ 281B             >
 185+ 281B             >
 185+ 281B             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E56E             >
 185+ E56E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E56E             >Latest_Definition defl  Heap_Ptr
 185+ E56E             >
 185+ E56E             >                // dummy db directives used to calculate length of namec
 185+ E56E 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E572 43 45 2D 49 >
 185+ E576 44          >
 185+ E577             >len_NFA         defl    $ - temp_NFA
 185+ E577             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E56E             >
 185+ E56E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E56F 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E573 43 45 2D 49 >
 185+ E577 44          >
 185+ E578             >                org     $-1                 // alter last byte of Name just above to set
 185+ E577 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E578             >
 185+ E578 64 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57A             >Prev_Ptr        defl    Heap_Ptr
 185+ E57A             >
 185+ E57A             >mirror_Ptr      defl    $
 185+ E57A             >
 185+ E57A 1D 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57C             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57C             >
 185+ E57C             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57C             >
 185+ E57C             >//              ______________________________________________________________________
 185+ E57C             >//              Dictionary part
 185+ E57C             >
 185+ E57C             >                org     Dict_Ptr
 185+ 281B             >
 185+ 281B 7A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 281D             >
 185+ 281D             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 281D CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 2820             >
 185+ 2820             >
 185+ 2820             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 2820             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 2820             >
 185+ 2820             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 2820 42          >                db      66
 186+ 2821                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 2821             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 2821             >
 186+ 2821             >Dict_Ptr        defl    $
 186+ 2821             >
 186+ 2821             >//              ______________________________________________________________________
 186+ 2821             >//              Heap part
 186+ 2821             >
 186+ 2821             >
 186+ 2821             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57C             >
 186+ E57C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57C             >Latest_Definition defl  Heap_Ptr
 186+ E57C             >
 186+ E57C             >                // dummy db directives used to calculate length of namec
 186+ E57C 53 50 41 4E >                db      "SPAN"
 186+ E580             >len_NFA         defl    $ - temp_NFA
 186+ E580             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57C             >
 186+ E57C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E57D 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E581             >                org     $-1                 // alter last byte of Name just above to set
 186+ E580 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E581             >
 186+ E581 6E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E583             >Prev_Ptr        defl    Heap_Ptr
 186+ E583             >
 186+ E583             >mirror_Ptr      defl    $
 186+ E583             >
 186+ E583 23 28       >                dw      Dict_Ptr + 2        // xt
 186+ E585             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E585             >
 186+ E585             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E585             >
 186+ E585             >//              ______________________________________________________________________
 186+ E585             >//              Dictionary part
 186+ E585             >
 186+ E585             >                org     Dict_Ptr
 186+ 2821             >
 186+ 2821 83 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 2823             >
 186+ 2823             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 2823 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 2826             >
 186+ 2826             >
 186+ 2826             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 2826             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 2826             >
 186+ 2826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 2826 44          >                db      68
 187+ 2827                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 2827             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 2827             >
 187+ 2827             >Dict_Ptr        defl    $
 187+ 2827             >
 187+ 2827             >//              ______________________________________________________________________
 187+ 2827             >//              Heap part
 187+ 2827             >
 187+ 2827             >
 187+ 2827             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E585             >
 187+ E585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E585             >Latest_Definition defl  Heap_Ptr
 187+ E585             >
 187+ E585             >                // dummy db directives used to calculate length of namec
 187+ E585 48 41 4E 44 >                db      "HANDLER"
 187+ E589 4C 45 52    >
 187+ E58C             >len_NFA         defl    $ - temp_NFA
 187+ E58C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E585             >
 187+ E585 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E586 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58A 4C 45 52    >
 187+ E58D             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58C D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E58D             >
 187+ E58D 7C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E58F             >Prev_Ptr        defl    Heap_Ptr
 187+ E58F             >
 187+ E58F             >mirror_Ptr      defl    $
 187+ E58F             >
 187+ E58F 29 28       >                dw      Dict_Ptr + 2        // xt
 187+ E591             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E591             >
 187+ E591             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E591             >
 187+ E591             >//              ______________________________________________________________________
 187+ E591             >//              Dictionary part
 187+ E591             >
 187+ E591             >                org     Dict_Ptr
 187+ 2827             >
 187+ 2827 8F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2829             >
 187+ 2829             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2829 CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 282C             >
 187+ 282C             >
 187+ 282C             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 282C             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 282C             >
 187+ 282C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 282C 46          >                db      70
 188+ 282D                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 282D             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 282D             >
 188+ 282D             >Dict_Ptr        defl    $
 188+ 282D             >
 188+ 282D             >//              ______________________________________________________________________
 188+ 282D             >//              Heap part
 188+ 282D             >
 188+ 282D             >
 188+ 282D             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E591             >
 188+ E591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E591             >Latest_Definition defl  Heap_Ptr
 188+ E591             >
 188+ E591             >                // dummy db directives used to calculate length of namec
 188+ E591 45 58 50    >                db      "EXP"
 188+ E594             >len_NFA         defl    $ - temp_NFA
 188+ E594             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E591             >
 188+ E591 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E592 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E595             >                org     $-1                 // alter last byte of Name just above to set
 188+ E594 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E595             >
 188+ E595 85 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E597             >Prev_Ptr        defl    Heap_Ptr
 188+ E597             >
 188+ E597             >mirror_Ptr      defl    $
 188+ E597             >
 188+ E597 2F 28       >                dw      Dict_Ptr + 2        // xt
 188+ E599             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E599             >
 188+ E599             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E599             >
 188+ E599             >//              ______________________________________________________________________
 188+ E599             >//              Dictionary part
 188+ E599             >
 188+ E599             >                org     Dict_Ptr
 188+ 282D             >
 188+ 282D 97 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 282F             >
 188+ 282F             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 282F CD 04 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2832             >
 188+ 2832             >
 188+ 2832             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2832             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2832             >
 188+ 2832             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2832 48          >                db      72
 189+ 2833
 190+ 2833              //  ______________________________________________________________________
 191+ 2833              //
 192+ 2833              // here         -- a
 193+ 2833                              Colon_Def HERE, "HERE", is_normal
 193+ 2833             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 2833             >
 193+ 2833             >Dict_Ptr        defl    $
 193+ 2833             >
 193+ 2833             >//              ______________________________________________________________________
 193+ 2833             >//              Heap part
 193+ 2833             >
 193+ 2833             >
 193+ 2833             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E599             >
 193+ E599             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E599             >Latest_Definition defl  Heap_Ptr
 193+ E599             >
 193+ E599             >                // dummy db directives used to calculate length of namec
 193+ E599 48 45 52 45 >                db      "HERE"
 193+ E59D             >len_NFA         defl    $ - temp_NFA
 193+ E59D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E599             >
 193+ E599 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59A 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E59E             >                org     $-1                 // alter last byte of Name just above to set
 193+ E59D C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E59E             >
 193+ E59E 91 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A0             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A0             >
 193+ E5A0             >mirror_Ptr      defl    $
 193+ E5A0             >
 193+ E5A0 35 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A2             >
 193+ E5A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A2             >
 193+ E5A2             >//              ______________________________________________________________________
 193+ E5A2             >//              Dictionary part
 193+ E5A2             >
 193+ E5A2             >                org     Dict_Ptr
 193+ 2833             >
 193+ 2833 A0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 2835             >
 193+ 2835             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 2835 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 2838             >
 193+ 2838             >
 193+ 2838             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 2838             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 2838             >
 193+ 2838             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 2838 8D 27 1E 26                  dw      DP, FETCH               // dp @
 195+ 283C E9 24                        dw      EXIT                    // ;
 196+ 283E
 197+ 283E              //  ______________________________________________________________________
 198+ 283E              //
 199+ 283E              // allot        n --
 200+ 283E                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 283E             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 283E             >
 200+ 283E             >Dict_Ptr        defl    $
 200+ 283E             >
 200+ 283E             >//              ______________________________________________________________________
 200+ 283E             >//              Heap part
 200+ 283E             >
 200+ 283E             >
 200+ 283E             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A2             >
 200+ E5A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A2             >Latest_Definition defl  Heap_Ptr
 200+ E5A2             >
 200+ E5A2             >                // dummy db directives used to calculate length of namec
 200+ E5A2 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A6 54          >
 200+ E5A7             >len_NFA         defl    $ - temp_NFA
 200+ E5A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A2             >
 200+ E5A2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A3 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5A7 54          >
 200+ E5A8             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5A7 D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5A8             >
 200+ E5A8 99 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AA             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AA             >
 200+ E5AA             >mirror_Ptr      defl    $
 200+ E5AA             >
 200+ E5AA 40 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AC             >
 200+ E5AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AC             >
 200+ E5AC             >//              ______________________________________________________________________
 200+ E5AC             >//              Dictionary part
 200+ E5AC             >
 200+ E5AC             >                org     Dict_Ptr
 200+ 283E             >
 200+ 283E AA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 2840             >
 200+ 2840             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 2840 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 2843             >
 200+ 2843             >
 200+ 2843             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 2843             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 2843             >
 200+ 2843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 2843 8D 27 06 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 2847 E9 24                        dw      EXIT                    // ;
 203+ 2849
 204+ 2849              //  ______________________________________________________________________
 205+ 2849              //
 206+ 2849              // comma        n --
 207+ 2849                              Colon_Def COMMA, ",", is_normal
 207+ 2849             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2849             >
 207+ 2849             >Dict_Ptr        defl    $
 207+ 2849             >
 207+ 2849             >//              ______________________________________________________________________
 207+ 2849             >//              Heap part
 207+ 2849             >
 207+ 2849             >
 207+ 2849             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AC             >
 207+ E5AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AC             >Latest_Definition defl  Heap_Ptr
 207+ E5AC             >
 207+ E5AC             >                // dummy db directives used to calculate length of namec
 207+ E5AC 2C          >                db      ","
 207+ E5AD             >len_NFA         defl    $ - temp_NFA
 207+ E5AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AC             >
 207+ E5AC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5AD 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5AE             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5AD AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5AE             >
 207+ E5AE A2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B0             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B0             >
 207+ E5B0             >mirror_Ptr      defl    $
 207+ E5B0             >
 207+ E5B0 4B 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B2             >
 207+ E5B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B2             >
 207+ E5B2             >//              ______________________________________________________________________
 207+ E5B2             >//              Dictionary part
 207+ E5B2             >
 207+ E5B2             >                org     Dict_Ptr
 207+ 2849             >
 207+ 2849 B0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 284B             >
 207+ 284B             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 284B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 284E             >
 207+ 284E             >
 207+ 284E             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 284E             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 284E             >
 207+ 284E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 284E 35 28 28 26                  dw      HERE, STORE             // here !
 209+ 2852 1E 27 40 28                  dw      TWO, ALLOT              // 2 allot
 210+ 2856 E9 24                        dw      EXIT                    // ;
 211+ 2858
 212+ 2858              //  ______________________________________________________________________
 213+ 2858              //
 214+ 2858              // ccomma       c --
 215+ 2858                              Colon_Def CCOMMA, "C,", is_normal
 215+ 2858             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 2858             >
 215+ 2858             >Dict_Ptr        defl    $
 215+ 2858             >
 215+ 2858             >//              ______________________________________________________________________
 215+ 2858             >//              Heap part
 215+ 2858             >
 215+ 2858             >
 215+ 2858             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B2             >
 215+ E5B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B2             >Latest_Definition defl  Heap_Ptr
 215+ E5B2             >
 215+ E5B2             >                // dummy db directives used to calculate length of namec
 215+ E5B2 43 2C       >                db      "C,"
 215+ E5B4             >len_NFA         defl    $ - temp_NFA
 215+ E5B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B2             >
 215+ E5B2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B3 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B5             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B4 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B5             >
 215+ E5B5 AC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5B7             >Prev_Ptr        defl    Heap_Ptr
 215+ E5B7             >
 215+ E5B7             >mirror_Ptr      defl    $
 215+ E5B7             >
 215+ E5B7 5A 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5B9             >
 215+ E5B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5B9             >
 215+ E5B9             >//              ______________________________________________________________________
 215+ E5B9             >//              Dictionary part
 215+ E5B9             >
 215+ E5B9             >                org     Dict_Ptr
 215+ 2858             >
 215+ 2858 B7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 285A             >
 215+ 285A             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 285A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 285D             >
 215+ 285D             >
 215+ 285D             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 285D             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 285D             >
 215+ 285D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 285D 35 28 3C 26                  dw      HERE, CSTORE            // here c!
 217+ 2861 17 27 40 28                  dw      ONE, ALLOT              // 1 allot
 218+ 2865 E9 24                        dw      EXIT                    // ;
 219+ 2867
 220+ 2867              //  ______________________________________________________________________
 221+ 2867              //
 222+ 2867              // hpcomma      n --
 223+ 2867              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 2867              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 2867              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 2867              //              dw      EXIT                    // ;
 227+ 2867
 228+ 2867              //  ______________________________________________________________________
 229+ 2867              //
 230+ 2867              // s>d          n -- d
 231+ 2867              // converts a single precision integer in a double precision
 232+ 2867                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 2867             >
 232+ 2867             >Dict_Ptr        defl    $
 232+ 2867             >
 232+ 2867             >//              ______________________________________________________________________
 232+ 2867             >//              Heap part
 232+ 2867             >
 232+ 2867             >
 232+ 2867             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5B9             >
 232+ E5B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5B9             >Latest_Definition defl  Heap_Ptr
 232+ E5B9             >
 232+ E5B9             >                // dummy db directives used to calculate length of namec
 232+ E5B9 53 3E 44    >                db      "S>D"
 232+ E5BC             >len_NFA         defl    $ - temp_NFA
 232+ E5BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5B9             >
 232+ E5B9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BA 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5BD             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BC C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5BD             >
 232+ E5BD B2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5BF             >Prev_Ptr        defl    Heap_Ptr
 232+ E5BF             >
 232+ E5BF             >mirror_Ptr      defl    $
 232+ E5BF             >
 232+ E5BF 69 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C1             >
 232+ E5C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C1             >
 232+ E5C1             >//              ______________________________________________________________________
 232+ E5C1             >//              Dictionary part
 232+ E5C1             >
 232+ E5C1             >                org     Dict_Ptr
 232+ 2867             >
 232+ 2867 BF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 2869             >
 232+ 2869             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 2869 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 2869 ~           >
 232+ 2869 ~           >
 232+ 2869             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 2869             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 2869             >
 232+ 2869             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 2869 E1                           pop     hl
 234+ 286A 7C                           ld      a, h
 235+ 286B E5                           push    hl
 236+ 286C 17                           rla
 237+ 286D ED 62                        sbc     hl, hl
 238+ 286F E5                           push    hl
 239+ 2870                              next
 239+ 2870 DD E9       >                jp      (ix)
 240+ 2872
 241+ 2872              //  ______________________________________________________________________
 242+ 2872              //
 243+ 2872              // -            n1 n2 -- n3
 244+ 2872              // subtraction
 245+ 2872                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 2872             >
 245+ 2872             >Dict_Ptr        defl    $
 245+ 2872             >
 245+ 2872             >//              ______________________________________________________________________
 245+ 2872             >//              Heap part
 245+ 2872             >
 245+ 2872             >
 245+ 2872             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C1             >
 245+ E5C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C1             >Latest_Definition defl  Heap_Ptr
 245+ E5C1             >
 245+ E5C1             >                // dummy db directives used to calculate length of namec
 245+ E5C1 2D          >                db      "-"
 245+ E5C2             >len_NFA         defl    $ - temp_NFA
 245+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C1             >
 245+ E5C1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C2 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C2 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C3             >
 245+ E5C3 B9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C5             >
 245+ E5C5             >mirror_Ptr      defl    $
 245+ E5C5             >
 245+ E5C5 74 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5C7             >
 245+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5C7             >
 245+ E5C7             >//              ______________________________________________________________________
 245+ E5C7             >//              Dictionary part
 245+ E5C7             >
 245+ E5C7             >                org     Dict_Ptr
 245+ 2872             >
 245+ 2872 C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 2874             >
 245+ 2874             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 2874 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 2874 ~           >
 245+ 2874 ~           >
 245+ 2874             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 2874             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 2874             >
 245+ 2874             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 2874 D9                           exx
 247+ 2875 D1                           pop     de
 248+ 2876 E1                           pop     hl
 249+ 2877 A7                           and     a
 250+ 2878 ED 52                        sbc     hl, de
 251+ 287A E5                           push    hl
 252+ 287B D9                           exx
 253+ 287C                              next
 253+ 287C DD E9       >                jp      (ix)
 254+ 287E
 255+ 287E
 256+ 287E              //  ______________________________________________________________________
 257+ 287E              //
 258+ 287E              // =            n1 n2 -- n3
 259+ 287E              // equals
 260+ 287E                              Colon_Def EQUALS, "=", is_normal
 260+ 287E             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 287E             >
 260+ 287E             >Dict_Ptr        defl    $
 260+ 287E             >
 260+ 287E             >//              ______________________________________________________________________
 260+ 287E             >//              Heap part
 260+ 287E             >
 260+ 287E             >
 260+ 287E             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5C7             >
 260+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5C7             >Latest_Definition defl  Heap_Ptr
 260+ E5C7             >
 260+ E5C7             >                // dummy db directives used to calculate length of namec
 260+ E5C7 3D          >                db      "="
 260+ E5C8             >len_NFA         defl    $ - temp_NFA
 260+ E5C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5C7             >
 260+ E5C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5C8 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5C9             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5C8 BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5C9             >
 260+ E5C9 C1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CB             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CB             >
 260+ E5CB             >mirror_Ptr      defl    $
 260+ E5CB             >
 260+ E5CB 80 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5CD             >
 260+ E5CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5CD             >
 260+ E5CD             >//              ______________________________________________________________________
 260+ E5CD             >//              Dictionary part
 260+ E5CD             >
 260+ E5CD             >                org     Dict_Ptr
 260+ 287E             >
 260+ 287E CB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 2880             >
 260+ 2880             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 2880 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 2883             >
 260+ 2883             >
 260+ 2883             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 2883             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 2883             >
 260+ 2883             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 2883 74 28 0E 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 2887 E9 24                        dw      EXIT                    // ;
 263+ 2889
 264+ 2889              //  ______________________________________________________________________
 265+ 2889              //
 266+ 2889              // u<           u1 u2 -- u3
 267+ 2889              // unsigned less-than
 268+ 2889                              New_Def ULESS, "U<", is_code, is_normal
 268+ 2889             >
 268+ 2889             >Dict_Ptr        defl    $
 268+ 2889             >
 268+ 2889             >//              ______________________________________________________________________
 268+ 2889             >//              Heap part
 268+ 2889             >
 268+ 2889             >
 268+ 2889             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5CD             >
 268+ E5CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5CD             >Latest_Definition defl  Heap_Ptr
 268+ E5CD             >
 268+ E5CD             >                // dummy db directives used to calculate length of namec
 268+ E5CD 55 3C       >                db      "U<"
 268+ E5CF             >len_NFA         defl    $ - temp_NFA
 268+ E5CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5CD             >
 268+ E5CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5CE 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D0             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5CF BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D0             >
 268+ E5D0 C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D2             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D2             >
 268+ E5D2             >mirror_Ptr      defl    $
 268+ E5D2             >
 268+ E5D2 8B 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D4             >
 268+ E5D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D4             >
 268+ E5D4             >//              ______________________________________________________________________
 268+ E5D4             >//              Dictionary part
 268+ E5D4             >
 268+ E5D4             >                org     Dict_Ptr
 268+ 2889             >
 268+ 2889 D2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 288B             >
 268+ 288B             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 288B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 288B ~           >
 268+ 288B ~           >
 268+ 288B             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 288B             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 288B             >
 268+ 288B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 288B D9                           exx
 270+ 288C D1                           pop     de
 271+ 288D E1                           pop     hl
 272+ 288E              Unsigned_Less_Exit:
 273+ 288E A7                           and     a
 274+ 288F ED 52                        sbc     hl, de
 275+ 2891 ED 62                        sbc     hl, hl
 276+ 2893 E5                           push    hl
 277+ 2894 D9                           exx
 278+ 2895                              next
 278+ 2895 DD E9       >                jp      (ix)
 279+ 2897
 280+ 2897              //  ______________________________________________________________________
 281+ 2897              //
 282+ 2897              // <           n1 n2 -- n3
 283+ 2897              // less-than
 284+ 2897                              New_Def LESS, "<", is_code, is_normal
 284+ 2897             >
 284+ 2897             >Dict_Ptr        defl    $
 284+ 2897             >
 284+ 2897             >//              ______________________________________________________________________
 284+ 2897             >//              Heap part
 284+ 2897             >
 284+ 2897             >
 284+ 2897             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5D4             >
 284+ E5D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5D4             >Latest_Definition defl  Heap_Ptr
 284+ E5D4             >
 284+ E5D4             >                // dummy db directives used to calculate length of namec
 284+ E5D4 3C          >                db      "<"
 284+ E5D5             >len_NFA         defl    $ - temp_NFA
 284+ E5D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5D4             >
 284+ E5D4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5D5 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5D6             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5D5 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5D6             >
 284+ E5D6 CD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5D8             >Prev_Ptr        defl    Heap_Ptr
 284+ E5D8             >
 284+ E5D8             >mirror_Ptr      defl    $
 284+ E5D8             >
 284+ E5D8 99 28       >                dw      Dict_Ptr + 2        // xt
 284+ E5DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5DA             >
 284+ E5DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5DA             >
 284+ E5DA             >//              ______________________________________________________________________
 284+ E5DA             >//              Dictionary part
 284+ E5DA             >
 284+ E5DA             >                org     Dict_Ptr
 284+ 2897             >
 284+ 2897 D8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 2899             >
 284+ 2899             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 2899 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 2899 ~           >
 284+ 2899 ~           >
 284+ 2899             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 2899             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 2899             >
 284+ 2899             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 2899 D9                           exx
 286+ 289A E1                           pop     hl
 287+ 289B D1                           pop     de
 288+ 289C 01 00 80                     ld      bc, $8000
 289+ 289F 09                           add     hl, bc
 290+ 28A0 EB                           ex      de, hl
 291+ 28A1 09                           add     hl, bc
 292+ 28A2 18 EA                        jr      Unsigned_Less_Exit
 293+ 28A4              //              and     a
 294+ 28A4              //              sbc     hl, de
 295+ 28A4              //              sbc     hl, hl
 296+ 28A4              //              push    hl
 297+ 28A4              //              exx
 298+ 28A4              //              next
 299+ 28A4
 300+ 28A4              //  ______________________________________________________________________
 301+ 28A4              //
 302+ 28A4              // >            n1 n2 -- n3
 303+ 28A4              // greater than
 304+ 28A4                              Colon_Def GREATER, ">", is_normal
 304+ 28A4             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28A4             >
 304+ 28A4             >Dict_Ptr        defl    $
 304+ 28A4             >
 304+ 28A4             >//              ______________________________________________________________________
 304+ 28A4             >//              Heap part
 304+ 28A4             >
 304+ 28A4             >
 304+ 28A4             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DA             >
 304+ E5DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DA             >Latest_Definition defl  Heap_Ptr
 304+ E5DA             >
 304+ E5DA             >                // dummy db directives used to calculate length of namec
 304+ E5DA 3E          >                db      ">"
 304+ E5DB             >len_NFA         defl    $ - temp_NFA
 304+ E5DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DA             >
 304+ E5DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DB 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DC             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DB BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DC             >
 304+ E5DC D4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5DE             >Prev_Ptr        defl    Heap_Ptr
 304+ E5DE             >
 304+ E5DE             >mirror_Ptr      defl    $
 304+ E5DE             >
 304+ E5DE A6 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E0             >
 304+ E5E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E0             >
 304+ E5E0             >//              ______________________________________________________________________
 304+ E5E0             >//              Dictionary part
 304+ E5E0             >
 304+ E5E0             >                org     Dict_Ptr
 304+ 28A4             >
 304+ 28A4 DE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28A6             >
 304+ 28A6             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28A6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28A9             >
 304+ 28A9             >
 304+ 28A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28A9             >
 304+ 28A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28A9 AD 25 99 28                  dw      SWAP, LESS              // swap <
 306+ 28AD E9 24                        dw      EXIT                    // ;
 307+ 28AF              //  ______________________________________________________________________
 308+ 28AF              //
 309+ 28AF              // min          n1 n2 -- n3
 310+ 28AF              // minimum between n1 and n2
 311+ 28AF                              Colon_Def MIN, "MIN" , is_normal
 311+ 28AF             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28AF             >
 311+ 28AF             >Dict_Ptr        defl    $
 311+ 28AF             >
 311+ 28AF             >//              ______________________________________________________________________
 311+ 28AF             >//              Heap part
 311+ 28AF             >
 311+ 28AF             >
 311+ 28AF             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E0             >
 311+ E5E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E0             >Latest_Definition defl  Heap_Ptr
 311+ E5E0             >
 311+ E5E0             >                // dummy db directives used to calculate length of namec
 311+ E5E0 4D 49 4E    >                db      "MIN"
 311+ E5E3             >len_NFA         defl    $ - temp_NFA
 311+ E5E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E0             >
 311+ E5E0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E1 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E4             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E3 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E4             >
 311+ E5E4 DA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E6             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E6             >
 311+ E5E6             >mirror_Ptr      defl    $
 311+ E5E6             >
 311+ E5E6 B1 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5E8             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5E8             >
 311+ E5E8             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5E8             >
 311+ E5E8             >//              ______________________________________________________________________
 311+ E5E8             >//              Dictionary part
 311+ E5E8             >
 311+ E5E8             >                org     Dict_Ptr
 311+ 28AF             >
 311+ 28AF E6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28B1             >
 311+ 28B1             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28B1 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28B4             >
 311+ 28B4             >
 311+ 28B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28B4             >
 311+ 28B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28B4 FC 25                        dw      TWO_DUP                 // 2dup
 313+ 28B6 A6 28                        dw      GREATER                 // >
 314+ 28B8 8D 20                        dw      ZBRANCH
 315+ 28BA 04 00                        dw      Min_Skip - $   // if
 316+ 28BC AD 25                        dw          SWAP                //      swap
 317+ 28BE              Min_Skip:                                       // endif
 318+ 28BE 99 25                        dw      DROP                    // drop
 319+ 28C0 E9 24                        dw      EXIT                    // ;
 320+ 28C2
 321+ 28C2              //  ______________________________________________________________________
 322+ 28C2              //
 323+ 28C2              // max          n1 n2 -- n3
 324+ 28C2              // maximum between n1 and n2
 325+ 28C2                              Colon_Def MAX, "MAX", is_normal
 325+ 28C2             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28C2             >
 325+ 28C2             >Dict_Ptr        defl    $
 325+ 28C2             >
 325+ 28C2             >//              ______________________________________________________________________
 325+ 28C2             >//              Heap part
 325+ 28C2             >
 325+ 28C2             >
 325+ 28C2             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5E8             >
 325+ E5E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5E8             >Latest_Definition defl  Heap_Ptr
 325+ E5E8             >
 325+ E5E8             >                // dummy db directives used to calculate length of namec
 325+ E5E8 4D 41 58    >                db      "MAX"
 325+ E5EB             >len_NFA         defl    $ - temp_NFA
 325+ E5EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5E8             >
 325+ E5E8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5E9 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EC             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EB D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EC             >
 325+ E5EC E0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5EE             >Prev_Ptr        defl    Heap_Ptr
 325+ E5EE             >
 325+ E5EE             >mirror_Ptr      defl    $
 325+ E5EE             >
 325+ E5EE C4 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F0             >
 325+ E5F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F0             >
 325+ E5F0             >//              ______________________________________________________________________
 325+ E5F0             >//              Dictionary part
 325+ E5F0             >
 325+ E5F0             >                org     Dict_Ptr
 325+ 28C2             >
 325+ 28C2 EE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 28C4             >
 325+ 28C4             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 28C4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 28C7             >
 325+ 28C7             >
 325+ 28C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 28C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 28C7             >
 325+ 28C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 28C7 FC 25                        dw      TWO_DUP                 // 2dup
 327+ 28C9 99 28                        dw      LESS                    // <
 328+ 28CB 8D 20                        dw      ZBRANCH
 329+ 28CD 04 00                        dw      Max_Skip - $   // if
 330+ 28CF AD 25                        dw          SWAP                //      swap
 331+ 28D1              Max_Skip:                                       // endif
 332+ 28D1 99 25                        dw      DROP                    // drop
 333+ 28D3 E9 24                        dw      EXIT                    // ;
 334+ 28D5
 335+ 28D5              //  ______________________________________________________________________
 336+ 28D5              //
 337+ 28D5              // ?dup         n -- 0 | n n
 338+ 28D5              // duplicate if not zero
 339+ 28D5                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 28D5             >
 339+ 28D5             >Dict_Ptr        defl    $
 339+ 28D5             >
 339+ 28D5             >//              ______________________________________________________________________
 339+ 28D5             >//              Heap part
 339+ 28D5             >
 339+ 28D5             >
 339+ 28D5             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F0             >
 339+ E5F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F0             >Latest_Definition defl  Heap_Ptr
 339+ E5F0             >
 339+ E5F0             >                // dummy db directives used to calculate length of namec
 339+ E5F0 3F 44 55 50 >                db      "?DUP"
 339+ E5F4             >len_NFA         defl    $ - temp_NFA
 339+ E5F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F0             >
 339+ E5F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F1 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F5             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F4 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F5             >
 339+ E5F5 E8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5F7             >Prev_Ptr        defl    Heap_Ptr
 339+ E5F7             >
 339+ E5F7             >mirror_Ptr      defl    $
 339+ E5F7             >
 339+ E5F7 D7 28       >                dw      Dict_Ptr + 2        // xt
 339+ E5F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5F9             >
 339+ E5F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5F9             >
 339+ E5F9             >//              ______________________________________________________________________
 339+ E5F9             >//              Dictionary part
 339+ E5F9             >
 339+ E5F9             >                org     Dict_Ptr
 339+ 28D5             >
 339+ 28D5 F7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 28D7             >
 339+ 28D7             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 28D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 28D7 ~           >
 339+ 28D7 ~           >
 339+ 28D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 28D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 28D7             >
 339+ 28D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 28D7              QDup_Ptr:
 341+ 28D7 E1                           pop     hl
 342+ 28D8 7C                           ld      a, h
 343+ 28D9 B5                           or      l
 344+ 28DA 28 01                        jr      z, QDup_Skip
 345+ 28DC E5                               push    hl
 346+ 28DD              QDup_Skip:
 347+ 28DD                              psh1
 347+ 28DD E5          >                push    hl
 347+ 28DE DD E9       >                jp      (ix)
 348+ 28E0
 349+ 28E0              //  ______________________________________________________________________
 350+ 28E0              //
 351+ 28E0              // -dup         n -- 0 | n n
 352+ 28E0              // duplicate if not zero
 353+ 28E0                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 28E0             >
 353+ 28E0             >Dict_Ptr        defl    $
 353+ 28E0             >
 353+ 28E0             >//              ______________________________________________________________________
 353+ 28E0             >//              Heap part
 353+ 28E0             >
 353+ 28E0             >
 353+ 28E0             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5F9             >
 353+ E5F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5F9             >Latest_Definition defl  Heap_Ptr
 353+ E5F9             >
 353+ E5F9             >                // dummy db directives used to calculate length of namec
 353+ E5F9 2D 44 55 50 >                db      "-DUP"
 353+ E5FD             >len_NFA         defl    $ - temp_NFA
 353+ E5FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5F9             >
 353+ E5F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FA 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E5FE             >                org     $-1                 // alter last byte of Name just above to set
 353+ E5FD D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E5FE             >
 353+ E5FE F0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E600             >Prev_Ptr        defl    Heap_Ptr
 353+ E600             >
 353+ E600             >mirror_Ptr      defl    $
 353+ E600             >
 353+ E600 E2 28       >                dw      Dict_Ptr + 2        // xt
 353+ E602             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E602             >
 353+ E602             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E602             >
 353+ E602             >//              ______________________________________________________________________
 353+ E602             >//              Dictionary part
 353+ E602             >
 353+ E602             >                org     Dict_Ptr
 353+ 28E0             >
 353+ 28E0 00 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 28E2             >
 353+ 28E2             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 28E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 28E2 ~           >
 353+ 28E2 ~           >
 353+ 28E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 28E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 28E2             >
 353+ 28E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 28E2 C3 D7 28                     jp      QDup_Ptr
 355+ 28E5
 356+ 28E5              //  ______________________________________________________________________
 357+ 28E5              //
 358+ 28E5              // emit         c --
 359+ 28E5                              Colon_Def EMIT, "EMIT", is_normal
 359+ 28E5             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 28E5             >
 359+ 28E5             >Dict_Ptr        defl    $
 359+ 28E5             >
 359+ 28E5             >//              ______________________________________________________________________
 359+ 28E5             >//              Heap part
 359+ 28E5             >
 359+ 28E5             >
 359+ 28E5             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E602             >
 359+ E602             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E602             >Latest_Definition defl  Heap_Ptr
 359+ E602             >
 359+ E602             >                // dummy db directives used to calculate length of namec
 359+ E602 45 4D 49 54 >                db      "EMIT"
 359+ E606             >len_NFA         defl    $ - temp_NFA
 359+ E606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E602             >
 359+ E602 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E603 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E607             >                org     $-1                 // alter last byte of Name just above to set
 359+ E606 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E607             >
 359+ E607 F9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E609             >Prev_Ptr        defl    Heap_Ptr
 359+ E609             >
 359+ E609             >mirror_Ptr      defl    $
 359+ E609             >
 359+ E609 E7 28       >                dw      Dict_Ptr + 2        // xt
 359+ E60B             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60B             >
 359+ E60B             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60B             >
 359+ E60B             >//              ______________________________________________________________________
 359+ E60B             >//              Dictionary part
 359+ E60B             >
 359+ E60B             >                org     Dict_Ptr
 359+ 28E5             >
 359+ 28E5 09 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 28E7             >
 359+ 28E7             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 28E7 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 28EA             >
 359+ 28EA             >
 359+ 28EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 28EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 28EA             >
 359+ 28EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 28EA 5F 22                        dw      C_EMIT                      // (?emit)
 361+ 28EC D7 28                        dw      QDUP                        // ?dup
 362+ 28EE                                                                  // if
 363+ 28EE 8D 20                        dw      ZBRANCH
 364+ 28F0 0A 00                        dw      Emit_Skip - $
 365+ 28F2 2B 22                        dw          EMITC                   //      emitc
 366+ 28F4 17 27                        dw          ONE                     //      1
 367+ 28F6 BD 27 06 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 28FA              Emit_Skip:                                          // endif
 369+ 28FA E9 24                        dw      EXIT                        // ;
 370+ 28FC
 371+ 28FC              //  ______________________________________________________________________
 372+ 28FC              //
 373+ 28FC              // space        --
 374+ 28FC                              Colon_Def SPACE, "SPACE", is_normal
 374+ 28FC             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 28FC             >
 374+ 28FC             >Dict_Ptr        defl    $
 374+ 28FC             >
 374+ 28FC             >//              ______________________________________________________________________
 374+ 28FC             >//              Heap part
 374+ 28FC             >
 374+ 28FC             >
 374+ 28FC             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60B             >
 374+ E60B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60B             >Latest_Definition defl  Heap_Ptr
 374+ E60B             >
 374+ E60B             >                // dummy db directives used to calculate length of namec
 374+ E60B 53 50 41 43 >                db      "SPACE"
 374+ E60F 45          >
 374+ E610             >len_NFA         defl    $ - temp_NFA
 374+ E610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60B             >
 374+ E60B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60C 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E610 45          >
 374+ E611             >                org     $-1                 // alter last byte of Name just above to set
 374+ E610 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E611             >
 374+ E611 02 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E613             >Prev_Ptr        defl    Heap_Ptr
 374+ E613             >
 374+ E613             >mirror_Ptr      defl    $
 374+ E613             >
 374+ E613 FE 28       >                dw      Dict_Ptr + 2        // xt
 374+ E615             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E615             >
 374+ E615             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E615             >
 374+ E615             >//              ______________________________________________________________________
 374+ E615             >//              Dictionary part
 374+ E615             >
 374+ E615             >                org     Dict_Ptr
 374+ 28FC             >
 374+ 28FC 13 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 28FE             >
 374+ 28FE             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 28FE CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 2901             >
 374+ 2901             >
 374+ 2901             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 2901             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 2901             >
 374+ 2901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 2901 33 27 E7 28                  dw      BL, EMIT                // bl emit
 376+ 2905 E9 24                        dw      EXIT                    // ;
 377+ 2907
 378+ 2907              //  ______________________________________________________________________
 379+ 2907              //
 380+ 2907              // traverse     a n -- a
 381+ 2907              // A dictionary entry is structured as follows
 382+ 2907              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 2907              //      +1   word name, last character is toggled with $80
 384+ 2907              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 2907              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 2907              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 2907              //
 388+ 2907                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 2907             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 2907             >
 388+ 2907             >Dict_Ptr        defl    $
 388+ 2907             >
 388+ 2907             >//              ______________________________________________________________________
 388+ 2907             >//              Heap part
 388+ 2907             >
 388+ 2907             >
 388+ 2907             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E615             >
 388+ E615             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E615             >Latest_Definition defl  Heap_Ptr
 388+ E615             >
 388+ E615             >                // dummy db directives used to calculate length of namec
 388+ E615 54 52 41 56 >                db      "TRAVERSE"
 388+ E619 45 52 53 45 >
 388+ E61D             >len_NFA         defl    $ - temp_NFA
 388+ E61D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E615             >
 388+ E615 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E616 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61A 45 52 53 45 >
 388+ E61E             >                org     $-1                 // alter last byte of Name just above to set
 388+ E61D C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E61E             >
 388+ E61E 0B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E620             >Prev_Ptr        defl    Heap_Ptr
 388+ E620             >
 388+ E620             >mirror_Ptr      defl    $
 388+ E620             >
 388+ E620 09 29       >                dw      Dict_Ptr + 2        // xt
 388+ E622             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E622             >
 388+ E622             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E622             >
 388+ E622             >//              ______________________________________________________________________
 388+ E622             >//              Dictionary part
 388+ E622             >
 388+ E622             >                org     Dict_Ptr
 388+ 2907             >
 388+ 2907 20 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2909             >
 388+ 2909             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2909 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 290C             >
 388+ 290C             >
 388+ 290C             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 290C             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 290C             >
 388+ 290C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 290C AD 25                        dw      SWAP                    // swap
 390+ 290E              Traverse_Begin:                                 // begin
 391+ 290E 90 25 36 25                  dw          OVER, PLUS          //      over +
 392+ 2912 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2916 90 25 33 26                  dw          OVER, CFETCH        //      over @
 394+ 291A 99 28                        dw          LESS                //      <
 395+ 291C                                                              // until
 396+ 291C 8D 20                        dw      ZBRANCH
 397+ 291E F0 FF                        dw      Traverse_Begin - $
 398+ 2920 9E 25                        dw      NIP                     //  nip
 399+ 2922 E9 24                        dw      EXIT                    //  ;
 400+ 2924
 401+ 2924              //  ______________________________________________________________________
 402+ 2924              //
 403+ 2924              // mmu7@        -- n
 404+ 2924              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2924
 406+ 2924                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2924             >
 406+ 2924             >Dict_Ptr        defl    $
 406+ 2924             >
 406+ 2924             >//              ______________________________________________________________________
 406+ 2924             >//              Heap part
 406+ 2924             >
 406+ 2924             >
 406+ 2924             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E622             >
 406+ E622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E622             >Latest_Definition defl  Heap_Ptr
 406+ E622             >
 406+ E622             >                // dummy db directives used to calculate length of namec
 406+ E622 4D 4D 55 37 >                db      "MMU7@"
 406+ E626 40          >
 406+ E627             >len_NFA         defl    $ - temp_NFA
 406+ E627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E622             >
 406+ E622 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E623 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E627 40          >
 406+ E628             >                org     $-1                 // alter last byte of Name just above to set
 406+ E627 C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E628             >
 406+ E628 15 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62A             >Prev_Ptr        defl    Heap_Ptr
 406+ E62A             >
 406+ E62A             >mirror_Ptr      defl    $
 406+ E62A             >
 406+ E62A 26 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62C             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62C             >
 406+ E62C             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62C             >
 406+ E62C             >//              ______________________________________________________________________
 406+ E62C             >//              Dictionary part
 406+ E62C             >
 406+ E62C             >                org     Dict_Ptr
 406+ 2924             >
 406+ 2924 2A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2926             >
 406+ 2926             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2926 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2926 ~           >
 406+ 2926 ~           >
 406+ 2926             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2926             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2926             >
 406+ 2926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2926 D9                           exx
 408+ 2927 CD 30 21                     call    MMU7_read
 409+ 292A D9                           exx
 410+ 292B 6F                           ld      l, a
 411+ 292C 26 00                        ld      h, 0
 412+ 292E E5                           push    hl
 413+ 292F                              next
 413+ 292F DD E9       >                jp      (ix)
 414+ 2931
 415+ 2931              //  ______________________________________________________________________
 416+ 2931              //
 417+ 2931              // mmu7!        n --
 418+ 2931              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 2931              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 2931
 421+ 2931                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 2931             >
 421+ 2931             >Dict_Ptr        defl    $
 421+ 2931             >
 421+ 2931             >//              ______________________________________________________________________
 421+ 2931             >//              Heap part
 421+ 2931             >
 421+ 2931             >
 421+ 2931             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62C             >
 421+ E62C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62C             >Latest_Definition defl  Heap_Ptr
 421+ E62C             >
 421+ E62C             >                // dummy db directives used to calculate length of namec
 421+ E62C 4D 4D 55 37 >                db      "MMU7!"
 421+ E630 21          >
 421+ E631             >len_NFA         defl    $ - temp_NFA
 421+ E631             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62C             >
 421+ E62C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E62D 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E631 21          >
 421+ E632             >                org     $-1                 // alter last byte of Name just above to set
 421+ E631 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E632             >
 421+ E632 22 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E634             >Prev_Ptr        defl    Heap_Ptr
 421+ E634             >
 421+ E634             >mirror_Ptr      defl    $
 421+ E634             >
 421+ E634 33 29       >                dw      Dict_Ptr + 2        // xt
 421+ E636             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E636             >
 421+ E636             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E636             >
 421+ E636             >//              ______________________________________________________________________
 421+ E636             >//              Dictionary part
 421+ E636             >
 421+ E636             >                org     Dict_Ptr
 421+ 2931             >
 421+ 2931 34 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2933             >
 421+ 2933             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2933 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2933 ~           >
 421+ 2933 ~           >
 421+ 2933             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2933             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2933             >
 421+ 2933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2933 E1                           pop     hl
 423+ 2934 7D                           ld      a, l
 424+ 2935 ED 92 57                     nextreg 87, a
 425+ 2938
 426+ 2938                              next
 426+ 2938 DD E9       >                jp      (ix)
 427+ 293A
 428+ 293A              //  ______________________________________________________________________
 429+ 293A              //
 430+ 293A              // >far         ha -- a n
 431+ 293A              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 293A              // take lower bits of H and L as an offset from E000h
 433+ 293A              // then return address  a  between E000h-FFFFh
 434+ 293A              // and page number n  between 64-71 (40h-47h)
 435+ 293A              // For example, in hex:
 436+ 293A              //   0000 >FAR  gives  40.E000
 437+ 293A              //   1FFF >FAR  gives  40.FFFF
 438+ 293A              //   2000 >FAR  gives  41.E000
 439+ 293A              //   3FFF >FAR  gives  41.FFFF
 440+ 293A              //   EFFF >FAR  gives  47.EFFF
 441+ 293A              //   FFFF >FAR  gives  47.FFFF
 442+ 293A                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 293A             >
 442+ 293A             >Dict_Ptr        defl    $
 442+ 293A             >
 442+ 293A             >//              ______________________________________________________________________
 442+ 293A             >//              Heap part
 442+ 293A             >
 442+ 293A             >
 442+ 293A             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E636             >
 442+ E636             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E636             >Latest_Definition defl  Heap_Ptr
 442+ E636             >
 442+ E636             >                // dummy db directives used to calculate length of namec
 442+ E636 3E 46 41 52 >                db      ">FAR"
 442+ E63A             >len_NFA         defl    $ - temp_NFA
 442+ E63A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E636             >
 442+ E636 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E637 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63B             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63A D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63B             >
 442+ E63B 2C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E63D             >Prev_Ptr        defl    Heap_Ptr
 442+ E63D             >
 442+ E63D             >mirror_Ptr      defl    $
 442+ E63D             >
 442+ E63D 3C 29       >                dw      Dict_Ptr + 2        // xt
 442+ E63F             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E63F             >
 442+ E63F             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E63F             >
 442+ E63F             >//              ______________________________________________________________________
 442+ E63F             >//              Dictionary part
 442+ E63F             >
 442+ E63F             >                org     Dict_Ptr
 442+ 293A             >
 442+ 293A 3D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 293C             >
 442+ 293C             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 293C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 293C ~           >
 442+ 293C ~           >
 442+ 293C             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 293C             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 293C             >
 442+ 293C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 293C E1                           pop     hl
 444+ 293D CD 3B 21                     call    TO_FAR_rout
 445+ 2940 E5                           push    hl
 446+ 2941 6F                           ld      l, a
 447+ 2942 26 00                        ld      h, 0
 448+ 2944 E5                           push    hl
 449+ 2945                              next
 449+ 2945 DD E9       >                jp      (ix)
 450+ 2947
 451+ 2947              //  ______________________________________________________________________
 452+ 2947              //
 453+ 2947              // <far         a n  -- ha
 454+ 2947              // given an address E000-FFFF and a page number n (32-39 or 20h-27h)
 455+ 2947              // reverse of >FAR: encodes a FAR address compressing
 456+ 2947              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 2947                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 2947             >
 457+ 2947             >Dict_Ptr        defl    $
 457+ 2947             >
 457+ 2947             >//              ______________________________________________________________________
 457+ 2947             >//              Heap part
 457+ 2947             >
 457+ 2947             >
 457+ 2947             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E63F             >
 457+ E63F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E63F             >Latest_Definition defl  Heap_Ptr
 457+ E63F             >
 457+ E63F             >                // dummy db directives used to calculate length of namec
 457+ E63F 3C 46 41 52 >                db      "<FAR"
 457+ E643             >len_NFA         defl    $ - temp_NFA
 457+ E643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E63F             >
 457+ E63F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E640 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E644             >                org     $-1                 // alter last byte of Name just above to set
 457+ E643 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E644             >
 457+ E644 36 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E646             >Prev_Ptr        defl    Heap_Ptr
 457+ E646             >
 457+ E646             >mirror_Ptr      defl    $
 457+ E646             >
 457+ E646 49 29       >                dw      Dict_Ptr + 2        // xt
 457+ E648             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E648             >
 457+ E648             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E648             >
 457+ E648             >//              ______________________________________________________________________
 457+ E648             >//              Dictionary part
 457+ E648             >
 457+ E648             >                org     Dict_Ptr
 457+ 2947             >
 457+ 2947 46 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2949             >
 457+ 2949             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2949 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2949 ~           >
 457+ 2949 ~           >
 457+ 2949             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2949             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2949             >
 457+ 2949             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2949 E1                           pop     hl                  // page number in l
 459+ 294A 7D                           ld      a, l
 460+ 294B E6 07                        and     07
 461+ 294D 0F                           rrca
 462+ 294E 0F                           rrca
 463+ 294F 0F                           rrca
 464+ 2950 08                           ex      af, af
 465+ 2951 E1                           pop     hl                  // address in hl
 466+ 2952 7C                           ld      a, h
 467+ 2953 E6 1F                        and     $1F
 468+ 2955 67                           ld      h, a
 469+ 2956 08                           ex      af, af
 470+ 2957 B4                           or      h
 471+ 2958 67                           ld      h, a
 472+ 2959                              psh1
 472+ 2959 E5          >                push    hl
 472+ 295A DD E9       >                jp      (ix)
 473+ 295C
 474+ 295C              //  ______________________________________________________________________
 475+ 295C              //
 476+ 295C              // ?IN_MMU7        a -- f
 477+ 295C              // check if address lies on MMU7
 478+ 295C              // tf is passed address is on MMU7
 479+ 295C                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 295C             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 295C             >
 479+ 295C             >Dict_Ptr        defl    $
 479+ 295C             >
 479+ 295C             >//              ______________________________________________________________________
 479+ 295C             >//              Heap part
 479+ 295C             >
 479+ 295C             >
 479+ 295C             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E648             >
 479+ E648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E648             >Latest_Definition defl  Heap_Ptr
 479+ E648             >
 479+ E648             >                // dummy db directives used to calculate length of namec
 479+ E648 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E64C 4D 4D 55 37 >
 479+ E650             >len_NFA         defl    $ - temp_NFA
 479+ E650             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E648             >
 479+ E648 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E649 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E64D 4D 4D 55 37 >
 479+ E651             >                org     $-1                 // alter last byte of Name just above to set
 479+ E650 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E651             >
 479+ E651 3F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E653             >Prev_Ptr        defl    Heap_Ptr
 479+ E653             >
 479+ E653             >mirror_Ptr      defl    $
 479+ E653             >
 479+ E653 5E 29       >                dw      Dict_Ptr + 2        // xt
 479+ E655             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E655             >
 479+ E655             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E655             >
 479+ E655             >//              ______________________________________________________________________
 479+ E655             >//              Dictionary part
 479+ E655             >
 479+ E655             >                org     Dict_Ptr
 479+ 295C             >
 479+ 295C 53 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 295E             >
 479+ 295E             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 295E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 2961             >
 479+ 2961             >
 479+ 2961             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 2961             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 2961             >
 479+ 2961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 2961 B4 25                        dw      DUP
 481+ 2963 3D 20 00 E0                  dw      LIT, $E000
 482+ 2967 8B 28                        dw      ULESS
 483+ 2969 1B 25                        dw      NOT_OP
 484+ 296B E9 24                        dw      EXIT
 485+ 296D
 486+ 296D              //  ______________________________________________________________________
 487+ 296D              //
 488+ 296D              // far          hp -- ha
 489+ 296D              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 296D              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 296D              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 296D                              Colon_Def FAR, "FAR", is_normal
 492+ 296D             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 296D             >
 492+ 296D             >Dict_Ptr        defl    $
 492+ 296D             >
 492+ 296D             >//              ______________________________________________________________________
 492+ 296D             >//              Heap part
 492+ 296D             >
 492+ 296D             >
 492+ 296D             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E655             >
 492+ E655             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E655             >Latest_Definition defl  Heap_Ptr
 492+ E655             >
 492+ E655             >                // dummy db directives used to calculate length of namec
 492+ E655 46 41 52    >                db      "FAR"
 492+ E658             >len_NFA         defl    $ - temp_NFA
 492+ E658             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E655             >
 492+ E655 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E656 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E659             >                org     $-1                 // alter last byte of Name just above to set
 492+ E658 D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E659             >
 492+ E659 48 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E65B             >Prev_Ptr        defl    Heap_Ptr
 492+ E65B             >
 492+ E65B             >mirror_Ptr      defl    $
 492+ E65B             >
 492+ E65B 6F 29       >                dw      Dict_Ptr + 2        // xt
 492+ E65D             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E65D             >
 492+ E65D             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E65D             >
 492+ E65D             >//              ______________________________________________________________________
 492+ E65D             >//              Dictionary part
 492+ E65D             >
 492+ E65D             >                org     Dict_Ptr
 492+ 296D             >
 492+ 296D 5B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 296F             >
 492+ 296F             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 296F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 2972             >
 492+ 2972             >
 492+ 2972             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 2972             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 2972             >
 492+ 2972             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 2972 3C 29                        dw      TO_FAR
 494+ 2974 33 29                        dw      MMU7_STORE
 495+ 2976 E9 24                        dw      EXIT
 496+ 2978
 497+ 2978              //  ______________________________________________________________________
 498+ 2978              //
 499+ 2978              // ?HEAP_PTR       n -- n f
 500+ 2978              // check if it's a non-zero heap-pointer or less than $6300
 501+ 2978              // tf if passed argument is an hp
 502+ 2978              // ff if passed argument isn't hp
 503+ 2978                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 2978             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 2978             >
 503+ 2978             >Dict_Ptr        defl    $
 503+ 2978             >
 503+ 2978             >//              ______________________________________________________________________
 503+ 2978             >//              Heap part
 503+ 2978             >
 503+ 2978             >
 503+ 2978             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E65D             >
 503+ E65D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E65D             >Latest_Definition defl  Heap_Ptr
 503+ E65D             >
 503+ E65D             >                // dummy db directives used to calculate length of namec
 503+ E65D 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E661 50 5F 50 54 >
 503+ E665 52          >
 503+ E666             >len_NFA         defl    $ - temp_NFA
 503+ E666             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E65D             >
 503+ E65D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E65E 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E662 50 5F 50 54 >
 503+ E666 52          >
 503+ E667             >                org     $-1                 // alter last byte of Name just above to set
 503+ E666 D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E667             >
 503+ E667 55 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E669             >Prev_Ptr        defl    Heap_Ptr
 503+ E669             >
 503+ E669             >mirror_Ptr      defl    $
 503+ E669             >
 503+ E669 7A 29       >                dw      Dict_Ptr + 2        // xt
 503+ E66B             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E66B             >
 503+ E66B             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E66B             >
 503+ E66B             >//              ______________________________________________________________________
 503+ E66B             >//              Dictionary part
 503+ E66B             >
 503+ E66B             >                org     Dict_Ptr
 503+ 2978             >
 503+ 2978 69 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 297A             >
 503+ 297A             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 297A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 297D             >
 503+ 297D             >
 503+ 297D             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 297D             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 297D             >
 503+ 297D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 297D B4 25                        dw      DUP
 505+ 297F 8D 20                        dw      ZBRANCH
 506+ 2981 08 00                        dw      QHeap_Skip - $
 507+ 2983 3D 20 00 63                  dw          LIT, $6300
 508+ 2987 8B 28                        dw          ULESS
 509+ 2989              QHeap_Skip:                                          // endif
 510+ 2989 E9 24                        dw      EXIT                        // ;
 511+ 298B
 512+ 298B              //  ______________________________________________________________________
 513+ 298B              //
 514+ 298B              // ?>heap       n1 -- n2
 515+ 298B              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 298B              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 298B              // and converted to heap address updating MMU7 via FAR
 518+ 298B                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 298B             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 298B             >
 518+ 298B             >Dict_Ptr        defl    $
 518+ 298B             >
 518+ 298B             >//              ______________________________________________________________________
 518+ 298B             >//              Heap part
 518+ 298B             >
 518+ 298B             >
 518+ 298B             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E66B             >
 518+ E66B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E66B             >Latest_Definition defl  Heap_Ptr
 518+ E66B             >
 518+ E66B             >                // dummy db directives used to calculate length of namec
 518+ E66B 3F 3E 48 45 >                db      "?>HEAP"
 518+ E66F 41 50       >
 518+ E671             >len_NFA         defl    $ - temp_NFA
 518+ E671             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E66B             >
 518+ E66B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E66C 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E670 41 50       >
 518+ E672             >                org     $-1                 // alter last byte of Name just above to set
 518+ E671 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E672             >
 518+ E672 5D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E674             >Prev_Ptr        defl    Heap_Ptr
 518+ E674             >
 518+ E674             >mirror_Ptr      defl    $
 518+ E674             >
 518+ E674 8D 29       >                dw      Dict_Ptr + 2        // xt
 518+ E676             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E676             >
 518+ E676             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E676             >
 518+ E676             >//              ______________________________________________________________________
 518+ E676             >//              Dictionary part
 518+ E676             >
 518+ E676             >                org     Dict_Ptr
 518+ 298B             >
 518+ 298B 74 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 298D             >
 518+ 298D             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 298D CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 2990             >
 518+ 2990             >
 518+ 2990             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 2990             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 2990             >
 518+ 2990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 2990 B4 25                        dw      DUP
 520+ 2992 7A 29                        dw      QHEAPP
 521+ 2994 8D 20                        dw      ZBRANCH
 522+ 2996 04 00                        dw      Q2Heap_Skip - $
 523+ 2998 6F 29                        dw          FAR
 524+ 299A              Q2Heap_Skip:                                          // endif
 525+ 299A E9 24                        dw      EXIT                        // ;
 526+ 299C
 527+ 299C              //  ______________________________________________________________________
 528+ 299C              //
 529+ 299C              // hp_fetch     -- a
 530+ 299C                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 299C             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 299C             >
 530+ 299C             >Dict_Ptr        defl    $
 530+ 299C             >
 530+ 299C             >//              ______________________________________________________________________
 530+ 299C             >//              Heap part
 530+ 299C             >
 530+ 299C             >
 530+ 299C             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E676             >
 530+ E676             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E676             >Latest_Definition defl  Heap_Ptr
 530+ E676             >
 530+ E676             >                // dummy db directives used to calculate length of namec
 530+ E676 48 50 40    >                db      "HP@"
 530+ E679             >len_NFA         defl    $ - temp_NFA
 530+ E679             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E676             >
 530+ E676 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E677 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E67A             >                org     $-1                 // alter last byte of Name just above to set
 530+ E679 C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E67A             >
 530+ E67A 6B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E67C             >Prev_Ptr        defl    Heap_Ptr
 530+ E67C             >
 530+ E67C             >mirror_Ptr      defl    $
 530+ E67C             >
 530+ E67C 9E 29       >                dw      Dict_Ptr + 2        // xt
 530+ E67E             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E67E             >
 530+ E67E             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E67E             >
 530+ E67E             >//              ______________________________________________________________________
 530+ E67E             >//              Dictionary part
 530+ E67E             >
 530+ E67E             >                org     Dict_Ptr
 530+ 299C             >
 530+ 299C 7C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 299E             >
 530+ 299E             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 299E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 29A1             >
 530+ 29A1             >
 530+ 29A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 29A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 29A1             >
 530+ 29A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29A1 A5 27 1E 26                  dw      HP, FETCH               // hp @
 532+ 29A5 E9 24                        dw      EXIT                    // ;
 533+ 29A7
 534+ 29A7              //  ______________________________________________________________________
 535+ 29A7              //
 536+ 29A7              // page-watermark   -- n
 537+ 29A7              // how much a 8K page can be filled..
 538+ 29A7                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 29A7             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 29A7             >
 538+ 29A7             >Dict_Ptr        defl    $
 538+ 29A7             >
 538+ 29A7             >//              ______________________________________________________________________
 538+ 29A7             >//              Heap part
 538+ 29A7             >
 538+ 29A7             >
 538+ 29A7             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E67E             >
 538+ E67E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E67E             >Latest_Definition defl  Heap_Ptr
 538+ E67E             >
 538+ E67E             >                // dummy db directives used to calculate length of namec
 538+ E67E 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E682 2D 57 41 54 >
 538+ E686 45 52 4D 41 >
 538+ E68A 52 4B       >
 538+ E68C             >len_NFA         defl    $ - temp_NFA
 538+ E68C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E67E             >
 538+ E67E 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E67F 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E683 2D 57 41 54 >
 538+ E687 45 52 4D 41 >
 538+ E68B 52 4B       >
 538+ E68D             >                org     $-1                 // alter last byte of Name just above to set
 538+ E68C CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E68D             >
 538+ E68D 76 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E68F             >Prev_Ptr        defl    Heap_Ptr
 538+ E68F             >
 538+ E68F             >mirror_Ptr      defl    $
 538+ E68F             >
 538+ E68F A9 29       >                dw      Dict_Ptr + 2        // xt
 538+ E691             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E691             >
 538+ E691             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E691             >
 538+ E691             >//              ______________________________________________________________________
 538+ E691             >//              Dictionary part
 538+ E691             >
 538+ E691             >                org     Dict_Ptr
 538+ 29A7             >
 538+ 29A7 8F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 29A9             >
 538+ 29A9             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 29A9 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 29AC             >
 538+ 29AC             >
 538+ 29AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 29AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 29AC             >
 538+ 29AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 29AC 80 1F       >                dw      $1F80
 539+ 29AE
 540+ 29AE              //  ______________________________________________________________________
 541+ 29AE              //
 542+ 29AE              // skip-hp-page ha -- a
 543+ 29AE                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 29AE             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 29AE             >
 543+ 29AE             >Dict_Ptr        defl    $
 543+ 29AE             >
 543+ 29AE             >//              ______________________________________________________________________
 543+ 29AE             >//              Heap part
 543+ 29AE             >
 543+ 29AE             >
 543+ 29AE             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E691             >
 543+ E691             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E691             >Latest_Definition defl  Heap_Ptr
 543+ E691             >
 543+ E691             >                // dummy db directives used to calculate length of namec
 543+ E691 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E695 2D 48 50 2D >
 543+ E699 50 41 47 45 >
 543+ E69D             >len_NFA         defl    $ - temp_NFA
 543+ E69D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E691             >
 543+ E691 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E692 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E696 2D 48 50 2D >
 543+ E69A 50 41 47 45 >
 543+ E69E             >                org     $-1                 // alter last byte of Name just above to set
 543+ E69D C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E69E             >
 543+ E69E 7E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A0             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A0             >
 543+ E6A0             >mirror_Ptr      defl    $
 543+ E6A0             >
 543+ E6A0 B0 29       >                dw      Dict_Ptr + 2        // xt
 543+ E6A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A2             >
 543+ E6A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A2             >
 543+ E6A2             >//              ______________________________________________________________________
 543+ E6A2             >//              Dictionary part
 543+ E6A2             >
 543+ E6A2             >                org     Dict_Ptr
 543+ 29AE             >
 543+ 29AE A0 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 29B0             >
 543+ 29B0             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 29B0 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 29B3             >
 543+ 29B3             >
 543+ 29B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 29B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 29B3             >
 543+ 29B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 29B3 9E 29                        dw      HP_FETCH                // hp@
 545+ 29B5 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 29B9 A9 24
 546+ 29BB 36 25                        dw      PLUS
 547+ 29BD A9 29                        dw      PAGE_WATERMARK
 548+ 29BF A6 28                        dw      GREATER
 549+ 29C1 8D 20                        dw      ZBRANCH
 550+ 29C3 12 00                        dw      Skip_Skip - $   // if
 551+ 29C5 9E 29                        dw      HP_FETCH
 552+ 29C7 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 29CB B8 24
 553+ 29CD 4F 25 5D 25                  dw      ONE_PLUS, TWO_PLUS
 554+ 29D1 A5 27 28 26                  dw      HP, STORE
 555+ 29D5              Skip_Skip:
 556+ 29D5 E9 24                        dw      EXIT                    // ;
 557+ 29D7              //  ______________________________________________________________________
 558+ 29D7              //
 559+ 29D7              // latest       -- nfa
 560+ 29D7                              Colon_Def LATEST, "LATEST", is_normal
 560+ 29D7             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 29D7             >
 560+ 29D7             >Dict_Ptr        defl    $
 560+ 29D7             >
 560+ 29D7             >//              ______________________________________________________________________
 560+ 29D7             >//              Heap part
 560+ 29D7             >
 560+ 29D7             >
 560+ 29D7             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A2             >
 560+ E6A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A2             >Latest_Definition defl  Heap_Ptr
 560+ E6A2             >
 560+ E6A2             >                // dummy db directives used to calculate length of namec
 560+ E6A2 4C 41 54 45 >                db      "LATEST"
 560+ E6A6 53 54       >
 560+ E6A8             >len_NFA         defl    $ - temp_NFA
 560+ E6A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A2             >
 560+ E6A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A3 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6A7 53 54       >
 560+ E6A9             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6A8 D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6A9             >
 560+ E6A9 91 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6AB             >Prev_Ptr        defl    Heap_Ptr
 560+ E6AB             >
 560+ E6AB             >mirror_Ptr      defl    $
 560+ E6AB             >
 560+ E6AB D9 29       >                dw      Dict_Ptr + 2        // xt
 560+ E6AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6AD             >
 560+ E6AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6AD             >
 560+ E6AD             >//              ______________________________________________________________________
 560+ E6AD             >//              Dictionary part
 560+ E6AD             >
 560+ E6AD             >                org     Dict_Ptr
 560+ 29D7             >
 560+ 29D7 AB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 29D9             >
 560+ 29D9             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 29D9 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 29DC             >
 560+ 29DC             >
 560+ 29DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 29DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 29DC             >
 560+ 29DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 29DC D5 27                        dw      CURRENT                 // current
 562+ 29DE 1E 26 1E 26                  dw      FETCH, FETCH            // @ @
 563+ 29E2 6F 29                        dw      FAR // Q TO HEAP
 564+ 29E4 E9 24                        dw      EXIT                    // ;
 565+ 29E6
 566+ 29E6              //  ______________________________________________________________________
 567+ 29E6              //
 568+ 29E6              // >body        cfa -- pfa
 569+ 29E6                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 29E6             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 29E6             >
 569+ 29E6             >Dict_Ptr        defl    $
 569+ 29E6             >
 569+ 29E6             >//              ______________________________________________________________________
 569+ 29E6             >//              Heap part
 569+ 29E6             >
 569+ 29E6             >
 569+ 29E6             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6AD             >
 569+ E6AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6AD             >Latest_Definition defl  Heap_Ptr
 569+ E6AD             >
 569+ E6AD             >                // dummy db directives used to calculate length of namec
 569+ E6AD 3E 42 4F 44 >                db      ">BODY"
 569+ E6B1 59          >
 569+ E6B2             >len_NFA         defl    $ - temp_NFA
 569+ E6B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6AD             >
 569+ E6AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6AE 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B2 59          >
 569+ E6B3             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B2 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B3             >
 569+ E6B3 A2 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6B5             >Prev_Ptr        defl    Heap_Ptr
 569+ E6B5             >
 569+ E6B5             >mirror_Ptr      defl    $
 569+ E6B5             >
 569+ E6B5 E8 29       >                dw      Dict_Ptr + 2        // xt
 569+ E6B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6B7             >
 569+ E6B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6B7             >
 569+ E6B7             >//              ______________________________________________________________________
 569+ E6B7             >//              Dictionary part
 569+ E6B7             >
 569+ E6B7             >                org     Dict_Ptr
 569+ 29E6             >
 569+ 29E6 B5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 29E8             >
 569+ 29E8             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 29E8 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 29EB             >
 569+ 29EB             >
 569+ 29EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 29EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 29EB             >
 569+ 29EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 29EB 25 27 36 25                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 29EF E9 24                        dw      EXIT                    // ;
 572+ 29F1
 573+ 29F1              //  ______________________________________________________________________
 574+ 29F1              //
 575+ 29F1              // <name        cfa -- nfa
 576+ 29F1                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 29F1             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 29F1             >
 576+ 29F1             >Dict_Ptr        defl    $
 576+ 29F1             >
 576+ 29F1             >//              ______________________________________________________________________
 576+ 29F1             >//              Heap part
 576+ 29F1             >
 576+ 29F1             >
 576+ 29F1             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6B7             >
 576+ E6B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6B7             >Latest_Definition defl  Heap_Ptr
 576+ E6B7             >
 576+ E6B7             >                // dummy db directives used to calculate length of namec
 576+ E6B7 3C 4E 41 4D >                db      "<NAME"
 576+ E6BB 45          >
 576+ E6BC             >len_NFA         defl    $ - temp_NFA
 576+ E6BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6B7             >
 576+ E6B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6B8 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6BC 45          >
 576+ E6BD             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6BC C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6BD             >
 576+ E6BD AD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6BF             >Prev_Ptr        defl    Heap_Ptr
 576+ E6BF             >
 576+ E6BF             >mirror_Ptr      defl    $
 576+ E6BF             >
 576+ E6BF F3 29       >                dw      Dict_Ptr + 2        // xt
 576+ E6C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C1             >
 576+ E6C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C1             >
 576+ E6C1             >//              ______________________________________________________________________
 576+ E6C1             >//              Dictionary part
 576+ E6C1             >
 576+ E6C1             >                org     Dict_Ptr
 576+ 29F1             >
 576+ 29F1 BF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 29F3             >
 576+ 29F3             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 29F3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 29F6             >
 576+ 29F6             >
 576+ 29F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 29F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 29F6             >
 576+ 29F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 29F6 69 25                        dw      CELL_MINUS              // cell-
 578+ 29F8 B4 25 1E 26                  dw      DUP, FETCH
 579+ 29FC 7A 29                        dw      QHEAPP
 580+ 29FE 8D 20                        dw      ZBRANCH
 581+ 2A00 08 00                        dw      ToName_Skip - $
 582+ 2A02 1E 26 6F 29                  dw          FETCH, FAR
 583+ 2A06 69 25                        dw          CELL_MINUS
 584+ 2A08              ToName_Skip:                                    // endif
 585+ 2A08
 586+ 2A08 56 25                        dw      ONE_SUBTRACT            // 1-
 587+ 2A0A 2C 27                        dw      NEG_ONE                 // -1
 588+ 2A0C 09 29                        dw      TRAVERSE                // traverse
 589+ 2A0E E9 24                        dw      EXIT                    // ;
 590+ 2A10
 591+ 2A10              //  ______________________________________________________________________
 592+ 2A10              //
 593+ 2A10              // cfa          pfa -- cfa
 594+ 2A10                              Colon_Def CFA, "CFA", is_normal
 594+ 2A10             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 2A10             >
 594+ 2A10             >Dict_Ptr        defl    $
 594+ 2A10             >
 594+ 2A10             >//              ______________________________________________________________________
 594+ 2A10             >//              Heap part
 594+ 2A10             >
 594+ 2A10             >
 594+ 2A10             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C1             >
 594+ E6C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C1             >Latest_Definition defl  Heap_Ptr
 594+ E6C1             >
 594+ E6C1             >                // dummy db directives used to calculate length of namec
 594+ E6C1 43 46 41    >                db      "CFA"
 594+ E6C4             >len_NFA         defl    $ - temp_NFA
 594+ E6C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C1             >
 594+ E6C1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C2 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6C5             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6C4 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6C5             >
 594+ E6C5 B7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6C7             >Prev_Ptr        defl    Heap_Ptr
 594+ E6C7             >
 594+ E6C7             >mirror_Ptr      defl    $
 594+ E6C7             >
 594+ E6C7 12 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6C9             >
 594+ E6C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6C9             >
 594+ E6C9             >//              ______________________________________________________________________
 594+ E6C9             >//              Dictionary part
 594+ E6C9             >
 594+ E6C9             >                org     Dict_Ptr
 594+ 2A10             >
 594+ 2A10 C7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A12             >
 594+ 2A12             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A12 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A15             >
 594+ 2A15             >
 594+ 2A15             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A15             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A15             >
 594+ 2A15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A15 25 27 74 28                  dw      THREE, SUBTRACT         // 3 -
 596+ 2A19 E9 24                        dw      EXIT                    // ;
 597+ 2A1B
 598+ 2A1B              //  ______________________________________________________________________
 599+ 2A1B              //
 600+ 2A1B              // nfa          pfa -- nfa
 601+ 2A1B                              Colon_Def NFA, "NFA", is_normal
 601+ 2A1B             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 2A1B             >
 601+ 2A1B             >Dict_Ptr        defl    $
 601+ 2A1B             >
 601+ 2A1B             >//              ______________________________________________________________________
 601+ 2A1B             >//              Heap part
 601+ 2A1B             >
 601+ 2A1B             >
 601+ 2A1B             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6C9             >
 601+ E6C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6C9             >Latest_Definition defl  Heap_Ptr
 601+ E6C9             >
 601+ E6C9             >                // dummy db directives used to calculate length of namec
 601+ E6C9 4E 46 41    >                db      "NFA"
 601+ E6CC             >len_NFA         defl    $ - temp_NFA
 601+ E6CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6C9             >
 601+ E6C9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6CA 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6CD             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6CC C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6CD             >
 601+ E6CD C1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6CF             >Prev_Ptr        defl    Heap_Ptr
 601+ E6CF             >
 601+ E6CF             >mirror_Ptr      defl    $
 601+ E6CF             >
 601+ E6CF 1D 2A       >                dw      Dict_Ptr + 2        // xt
 601+ E6D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D1             >
 601+ E6D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D1             >
 601+ E6D1             >//              ______________________________________________________________________
 601+ E6D1             >//              Dictionary part
 601+ E6D1             >
 601+ E6D1             >                org     Dict_Ptr
 601+ 2A1B             >
 601+ 2A1B CF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 2A1D             >
 601+ 2A1D             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 2A1D CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 2A20             >
 601+ 2A20             >
 601+ 2A20             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 2A20             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 2A20             >
 601+ 2A20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 2A20 12 2A                        dw      CFA                     // cfa
 603+ 2A22 F3 29                        dw      TO_NAME                 // traverse
 604+ 2A24 E9 24                        dw      EXIT                    // ;
 605+ 2A26
 606+ 2A26              //  ______________________________________________________________________
 607+ 2A26              //
 608+ 2A26              // lfa          pfa -- lfa
 609+ 2A26                              Colon_Def LFA, "LFA", is_normal
 609+ 2A26             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 2A26             >
 609+ 2A26             >Dict_Ptr        defl    $
 609+ 2A26             >
 609+ 2A26             >//              ______________________________________________________________________
 609+ 2A26             >//              Heap part
 609+ 2A26             >
 609+ 2A26             >
 609+ 2A26             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D1             >
 609+ E6D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D1             >Latest_Definition defl  Heap_Ptr
 609+ E6D1             >
 609+ E6D1             >                // dummy db directives used to calculate length of namec
 609+ E6D1 4C 46 41    >                db      "LFA"
 609+ E6D4             >len_NFA         defl    $ - temp_NFA
 609+ E6D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D1             >
 609+ E6D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D2 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6D5             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6D4 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6D5             >
 609+ E6D5 C9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6D7             >Prev_Ptr        defl    Heap_Ptr
 609+ E6D7             >
 609+ E6D7             >mirror_Ptr      defl    $
 609+ E6D7             >
 609+ E6D7 28 2A       >                dw      Dict_Ptr + 2        // xt
 609+ E6D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6D9             >
 609+ E6D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6D9             >
 609+ E6D9             >//              ______________________________________________________________________
 609+ E6D9             >//              Dictionary part
 609+ E6D9             >
 609+ E6D9             >                org     Dict_Ptr
 609+ 2A26             >
 609+ 2A26 D7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 2A28             >
 609+ 2A28             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 2A28 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 2A2B             >
 609+ 2A2B             >
 609+ 2A2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 2A2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 2A2B             >
 609+ 2A2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 2A2B 1D 2A                        dw      NFA                     // nfa
 611+ 2A2D 17 27                        dw      ONE                     // 1
 612+ 2A2F 09 29                        dw      TRAVERSE                // traverse
 613+ 2A31 4F 25                        dw      ONE_PLUS                // 1+
 614+ 2A33 E9 24                        dw      EXIT                    // ;
 615+ 2A35
 616+ 2A35              //  ______________________________________________________________________
 617+ 2A35              //
 618+ 2A35              // pfa          nfa -- pfa
 619+ 2A35                              Colon_Def PFA, "PFA", is_normal
 619+ 2A35             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 2A35             >
 619+ 2A35             >Dict_Ptr        defl    $
 619+ 2A35             >
 619+ 2A35             >//              ______________________________________________________________________
 619+ 2A35             >//              Heap part
 619+ 2A35             >
 619+ 2A35             >
 619+ 2A35             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6D9             >
 619+ E6D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6D9             >Latest_Definition defl  Heap_Ptr
 619+ E6D9             >
 619+ E6D9             >                // dummy db directives used to calculate length of namec
 619+ E6D9 50 46 41    >                db      "PFA"
 619+ E6DC             >len_NFA         defl    $ - temp_NFA
 619+ E6DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6D9             >
 619+ E6D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6DA 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6DD             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6DC C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6DD             >
 619+ E6DD D1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6DF             >Prev_Ptr        defl    Heap_Ptr
 619+ E6DF             >
 619+ E6DF             >mirror_Ptr      defl    $
 619+ E6DF             >
 619+ E6DF 37 2A       >                dw      Dict_Ptr + 2        // xt
 619+ E6E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E1             >
 619+ E6E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E1             >
 619+ E6E1             >//              ______________________________________________________________________
 619+ E6E1             >//              Dictionary part
 619+ E6E1             >
 619+ E6E1             >                org     Dict_Ptr
 619+ 2A35             >
 619+ 2A35 DF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 2A37             >
 619+ 2A37             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 2A37 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 2A3A             >
 619+ 2A3A             >
 619+ 2A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 2A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 2A3A             >
 619+ 2A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 2A3A 8D 29                        dw      QTOHEAP
 621+ 2A3C 17 27                        dw      ONE                     // 1
 622+ 2A3E 09 29                        dw      TRAVERSE                // traverse
 623+ 2A40 4F 25                        dw      ONE_PLUS                // 1+
 624+ 2A42 65 25                        dw      CELL_PLUS               // cell+
 625+ 2A44 5E 29                        dw      QMMU7
 626+ 2A46 8D 20                        dw      ZBRANCH
 627+ 2A48 0E 00                        dw      PFA_Skip - $
 628+ 2A4A 26 29                        dw          MMU7_FETCH
 629+ 2A4C 17 27 74 28                  dw          ONE, SUBTRACT
 630+ 2A50 8D 20                        dw          ZBRANCH
 631+ 2A52 04 00                        dw          PFA_Skip - $
 632+ 2A54 1E 26                        dw              FETCH
 633+ 2A56              PFA_Skip:                                    // endif
 634+ 2A56 E8 29                        dw      TO_BODY                 // >body
 635+ 2A58 E9 24                        dw      EXIT                    // ;
 636+ 2A5A
 637+ 2A5A              //  ______________________________________________________________________
 638+ 2A5A              //
 639+ 2A5A              // !csp         --
 640+ 2A5A              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 2A5A                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 2A5A             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 2A5A             >
 641+ 2A5A             >Dict_Ptr        defl    $
 641+ 2A5A             >
 641+ 2A5A             >//              ______________________________________________________________________
 641+ 2A5A             >//              Heap part
 641+ 2A5A             >
 641+ 2A5A             >
 641+ 2A5A             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E1             >
 641+ E6E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E1             >Latest_Definition defl  Heap_Ptr
 641+ E6E1             >
 641+ E6E1             >                // dummy db directives used to calculate length of namec
 641+ E6E1 21 43 53 50 >                db      "!CSP"
 641+ E6E5             >len_NFA         defl    $ - temp_NFA
 641+ E6E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E1             >
 641+ E6E1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E2 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6E6             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6E5 D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6E6             >
 641+ E6E6 D9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6E8             >Prev_Ptr        defl    Heap_Ptr
 641+ E6E8             >
 641+ E6E8             >mirror_Ptr      defl    $
 641+ E6E8             >
 641+ E6E8 5C 2A       >                dw      Dict_Ptr + 2        // xt
 641+ E6EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6EA             >
 641+ E6EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6EA             >
 641+ E6EA             >//              ______________________________________________________________________
 641+ E6EA             >//              Dictionary part
 641+ E6EA             >
 641+ E6EA             >                org     Dict_Ptr
 641+ 2A5A             >
 641+ 2A5A E8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 2A5C             >
 641+ 2A5C             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 2A5C CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 2A5F             >
 641+ 2A5F             >
 641+ 2A5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 2A5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 2A5F             >
 641+ 2A5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 2A5F D0 24                        dw      SPFETCH                 // sp@
 643+ 2A61 F3 27 28 26                  dw      CSP, STORE              // csp !
 644+ 2A65 E9 24                        dw      EXIT                    // ;
 645+ 2A67
 646+ 2A67              //  ______________________________________________________________________
 647+ 2A67              //
 648+ 2A67              // ?error       f n --
 649+ 2A67              // raise error n if flag f it true
 650+ 2A67                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 2A67             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 2A67             >
 650+ 2A67             >Dict_Ptr        defl    $
 650+ 2A67             >
 650+ 2A67             >//              ______________________________________________________________________
 650+ 2A67             >//              Heap part
 650+ 2A67             >
 650+ 2A67             >
 650+ 2A67             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6EA             >
 650+ E6EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6EA             >Latest_Definition defl  Heap_Ptr
 650+ E6EA             >
 650+ E6EA             >                // dummy db directives used to calculate length of namec
 650+ E6EA 3F 45 52 52 >                db      "?ERROR"
 650+ E6EE 4F 52       >
 650+ E6F0             >len_NFA         defl    $ - temp_NFA
 650+ E6F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6EA             >
 650+ E6EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6EB 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6EF 4F 52       >
 650+ E6F1             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F0 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F1             >
 650+ E6F1 E1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F3             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F3             >
 650+ E6F3             >mirror_Ptr      defl    $
 650+ E6F3             >
 650+ E6F3 69 2A       >                dw      Dict_Ptr + 2        // xt
 650+ E6F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6F5             >
 650+ E6F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6F5             >
 650+ E6F5             >//              ______________________________________________________________________
 650+ E6F5             >//              Dictionary part
 650+ E6F5             >
 650+ E6F5             >                org     Dict_Ptr
 650+ 2A67             >
 650+ 2A67 F3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 2A69             >
 650+ 2A69             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 2A69 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 2A6C             >
 650+ 2A6C             >
 650+ 2A6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 2A6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 2A6C             >
 650+ 2A6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 2A6C AD 25                        dw      SWAP                    // swap
 652+ 2A6E                                                              // if
 653+ 2A6E 8D 20                        dw      ZBRANCH
 654+ 2A70 08 00                        dw      QError_Else - $
 655+ 2A72 AC 2F                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 2A74                                                              // else
 657+ 2A74 89 20                        dw      BRANCH
 658+ 2A76 04 00                        dw      QError_Endif - $
 659+ 2A78              QError_Else:
 660+ 2A78 99 25                        dw          DROP                //      drop
 661+ 2A7A              QError_Endif:                                   // endif
 662+ 2A7A E9 24                        dw      EXIT                    // ;
 663+ 2A7C
 664+ 2A7C              //  ______________________________________________________________________
 665+ 2A7C              //
 666+ 2A7C              // ?comp       --
 667+ 2A7C              // raise msg #17 if not compiling
 668+ 2A7C                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 2A7C             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 2A7C             >
 668+ 2A7C             >Dict_Ptr        defl    $
 668+ 2A7C             >
 668+ 2A7C             >//              ______________________________________________________________________
 668+ 2A7C             >//              Heap part
 668+ 2A7C             >
 668+ 2A7C             >
 668+ 2A7C             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6F5             >
 668+ E6F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6F5             >Latest_Definition defl  Heap_Ptr
 668+ E6F5             >
 668+ E6F5             >                // dummy db directives used to calculate length of namec
 668+ E6F5 3F 43 4F 4D >                db      "?COMP"
 668+ E6F9 50          >
 668+ E6FA             >len_NFA         defl    $ - temp_NFA
 668+ E6FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6F5             >
 668+ E6F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6F6 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E6FA 50          >
 668+ E6FB             >                org     $-1                 // alter last byte of Name just above to set
 668+ E6FA D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E6FB             >
 668+ E6FB EA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E6FD             >Prev_Ptr        defl    Heap_Ptr
 668+ E6FD             >
 668+ E6FD             >mirror_Ptr      defl    $
 668+ E6FD             >
 668+ E6FD 7E 2A       >                dw      Dict_Ptr + 2        // xt
 668+ E6FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E6FF             >
 668+ E6FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E6FF             >
 668+ E6FF             >//              ______________________________________________________________________
 668+ E6FF             >//              Dictionary part
 668+ E6FF             >
 668+ E6FF             >                org     Dict_Ptr
 668+ 2A7C             >
 668+ 2A7C FD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 2A7E             >
 668+ 2A7E             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 2A7E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 2A81             >
 668+ 2A81             >
 668+ 2A81             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 2A81             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 2A81             >
 668+ 2A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 2A81 DB 27 1E 26                  dw      STATE, FETCH            // state @
 670+ 2A85 0E 25                        dw      ZEQUAL                  // 0=
 671+ 2A87 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 2A8B 69 2A                        dw      QERROR                  // ?error
 673+ 2A8D E9 24                        dw      EXIT                    // ;
 674+ 2A8F
 675+ 2A8F              //  ______________________________________________________________________
 676+ 2A8F              //
 677+ 2A8F              // ?exec       --
 678+ 2A8F              // raise msg #18 if compiling
 679+ 2A8F                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 2A8F             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 2A8F             >
 679+ 2A8F             >Dict_Ptr        defl    $
 679+ 2A8F             >
 679+ 2A8F             >//              ______________________________________________________________________
 679+ 2A8F             >//              Heap part
 679+ 2A8F             >
 679+ 2A8F             >
 679+ 2A8F             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E6FF             >
 679+ E6FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E6FF             >Latest_Definition defl  Heap_Ptr
 679+ E6FF             >
 679+ E6FF             >                // dummy db directives used to calculate length of namec
 679+ E6FF 3F 45 58 45 >                db      "?EXEC"
 679+ E703 43          >
 679+ E704             >len_NFA         defl    $ - temp_NFA
 679+ E704             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E6FF             >
 679+ E6FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E700 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E704 43          >
 679+ E705             >                org     $-1                 // alter last byte of Name just above to set
 679+ E704 C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E705             >
 679+ E705 F5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E707             >Prev_Ptr        defl    Heap_Ptr
 679+ E707             >
 679+ E707             >mirror_Ptr      defl    $
 679+ E707             >
 679+ E707 91 2A       >                dw      Dict_Ptr + 2        // xt
 679+ E709             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E709             >
 679+ E709             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E709             >
 679+ E709             >//              ______________________________________________________________________
 679+ E709             >//              Dictionary part
 679+ E709             >
 679+ E709             >                org     Dict_Ptr
 679+ 2A8F             >
 679+ 2A8F 07 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 2A91             >
 679+ 2A91             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 2A91 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 2A94             >
 679+ 2A94             >
 679+ 2A94             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 2A94             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 2A94             >
 679+ 2A94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 2A94 DB 27 1E 26                  dw      STATE, FETCH            // state @
 681+ 2A98 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 2A9C 69 2A                        dw      QERROR                  // ?error
 683+ 2A9E E9 24                        dw      EXIT                    // ;
 684+ 2AA0
 685+ 2AA0              //  ______________________________________________________________________
 686+ 2AA0              //
 687+ 2AA0              // ?pairs       n1 n2 --
 688+ 2AA0              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 2AA0                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 2AA0             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 2AA0             >
 689+ 2AA0             >Dict_Ptr        defl    $
 689+ 2AA0             >
 689+ 2AA0             >//              ______________________________________________________________________
 689+ 2AA0             >//              Heap part
 689+ 2AA0             >
 689+ 2AA0             >
 689+ 2AA0             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E709             >
 689+ E709             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E709             >Latest_Definition defl  Heap_Ptr
 689+ E709             >
 689+ E709             >                // dummy db directives used to calculate length of namec
 689+ E709 3F 50 41 49 >                db      "?PAIRS"
 689+ E70D 52 53       >
 689+ E70F             >len_NFA         defl    $ - temp_NFA
 689+ E70F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E709             >
 689+ E709 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E70A 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E70E 52 53       >
 689+ E710             >                org     $-1                 // alter last byte of Name just above to set
 689+ E70F D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E710             >
 689+ E710 FF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E712             >Prev_Ptr        defl    Heap_Ptr
 689+ E712             >
 689+ E712             >mirror_Ptr      defl    $
 689+ E712             >
 689+ E712 A2 2A       >                dw      Dict_Ptr + 2        // xt
 689+ E714             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E714             >
 689+ E714             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E714             >
 689+ E714             >//              ______________________________________________________________________
 689+ E714             >//              Dictionary part
 689+ E714             >
 689+ E714             >                org     Dict_Ptr
 689+ 2AA0             >
 689+ 2AA0 12 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 2AA2             >
 689+ 2AA2             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 2AA2 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 2AA5             >
 689+ 2AA5             >
 689+ 2AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 2AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 2AA5             >
 689+ 2AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 2AA5 74 28                        dw      SUBTRACT                // -
 691+ 2AA7 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 2AAB 69 2A                        dw      QERROR                  // ?error
 693+ 2AAD E9 24                        dw      EXIT                    // ;
 694+ 2AAF
 695+ 2AAF              //  ______________________________________________________________________
 696+ 2AAF              //
 697+ 2AAF              // ?csp       --
 698+ 2AAF              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 2AAF              // Compiler relies on that for  syntax checking of structures
 700+ 2AAF                              Colon_Def QCSP, "?CSP", is_normal
 700+ 2AAF             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 2AAF             >
 700+ 2AAF             >Dict_Ptr        defl    $
 700+ 2AAF             >
 700+ 2AAF             >//              ______________________________________________________________________
 700+ 2AAF             >//              Heap part
 700+ 2AAF             >
 700+ 2AAF             >
 700+ 2AAF             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E714             >
 700+ E714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E714             >Latest_Definition defl  Heap_Ptr
 700+ E714             >
 700+ E714             >                // dummy db directives used to calculate length of namec
 700+ E714 3F 43 53 50 >                db      "?CSP"
 700+ E718             >len_NFA         defl    $ - temp_NFA
 700+ E718             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E714             >
 700+ E714 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E715 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E719             >                org     $-1                 // alter last byte of Name just above to set
 700+ E718 D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E719             >
 700+ E719 09 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E71B             >Prev_Ptr        defl    Heap_Ptr
 700+ E71B             >
 700+ E71B             >mirror_Ptr      defl    $
 700+ E71B             >
 700+ E71B B1 2A       >                dw      Dict_Ptr + 2        // xt
 700+ E71D             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E71D             >
 700+ E71D             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E71D             >
 700+ E71D             >//              ______________________________________________________________________
 700+ E71D             >//              Dictionary part
 700+ E71D             >
 700+ E71D             >                org     Dict_Ptr
 700+ 2AAF             >
 700+ 2AAF 1B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 2AB1             >
 700+ 2AB1             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 2AB1 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 2AB4             >
 700+ 2AB4             >
 700+ 2AB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 2AB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 2AB4             >
 700+ 2AB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 2AB4 D0 24                        dw      SPFETCH                 // sp@
 702+ 2AB6 F3 27 1E 26                  dw      CSP, FETCH              // csp @
 703+ 2ABA 74 28                        dw      SUBTRACT                // -
 704+ 2ABC 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 2AC0 69 2A                        dw      QERROR                  // ?error
 706+ 2AC2 E9 24                        dw      EXIT                    // ;
 707+ 2AC4
 708+ 2AC4              //  ______________________________________________________________________
 709+ 2AC4              //
 710+ 2AC4              // ?loading      --
 711+ 2AC4              // raise msg #22 if not loading
 712+ 2AC4                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 2AC4             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 2AC4             >
 712+ 2AC4             >Dict_Ptr        defl    $
 712+ 2AC4             >
 712+ 2AC4             >//              ______________________________________________________________________
 712+ 2AC4             >//              Heap part
 712+ 2AC4             >
 712+ 2AC4             >
 712+ 2AC4             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E71D             >
 712+ E71D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E71D             >Latest_Definition defl  Heap_Ptr
 712+ E71D             >
 712+ E71D             >                // dummy db directives used to calculate length of namec
 712+ E71D 3F 4C 4F 41 >                db      "?LOADING"
 712+ E721 44 49 4E 47 >
 712+ E725             >len_NFA         defl    $ - temp_NFA
 712+ E725             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E71D             >
 712+ E71D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E71E 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E722 44 49 4E 47 >
 712+ E726             >                org     $-1                 // alter last byte of Name just above to set
 712+ E725 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E726             >
 712+ E726 14 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E728             >Prev_Ptr        defl    Heap_Ptr
 712+ E728             >
 712+ E728             >mirror_Ptr      defl    $
 712+ E728             >
 712+ E728 C6 2A       >                dw      Dict_Ptr + 2        // xt
 712+ E72A             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E72A             >
 712+ E72A             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E72A             >
 712+ E72A             >//              ______________________________________________________________________
 712+ E72A             >//              Dictionary part
 712+ E72A             >
 712+ E72A             >                org     Dict_Ptr
 712+ 2AC4             >
 712+ 2AC4 28 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 2AC6             >
 712+ 2AC6             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 2AC6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 2AC9             >
 712+ 2AC9             >
 712+ 2AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 2AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 2AC9             >
 712+ 2AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 2AC9 B1 27 1E 26                  dw      BLK, FETCH              // blk @
 714+ 2ACD 0E 25                        dw      ZEQUAL                  // 0=
 715+ 2ACF 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 2AD3 69 2A                        dw      QERROR                  // ?error
 717+ 2AD5 E9 24                        dw      EXIT                    // ;
 718+ 2AD7
 719+ 2AD7              //  ______________________________________________________________________
 720+ 2AD7              //
 721+ 2AD7              // compile      --
 722+ 2AD7              // compiles the following word
 723+ 2AD7                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 2AD7             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 2AD7             >
 723+ 2AD7             >Dict_Ptr        defl    $
 723+ 2AD7             >
 723+ 2AD7             >//              ______________________________________________________________________
 723+ 2AD7             >//              Heap part
 723+ 2AD7             >
 723+ 2AD7             >
 723+ 2AD7             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E72A             >
 723+ E72A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E72A             >Latest_Definition defl  Heap_Ptr
 723+ E72A             >
 723+ E72A             >                // dummy db directives used to calculate length of namec
 723+ E72A 43 4F 4D 50 >                db      "COMPILE"
 723+ E72E 49 4C 45    >
 723+ E731             >len_NFA         defl    $ - temp_NFA
 723+ E731             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E72A             >
 723+ E72A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E72B 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E72F 49 4C 45    >
 723+ E732             >                org     $-1                 // alter last byte of Name just above to set
 723+ E731 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E732             >
 723+ E732 1D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E734             >Prev_Ptr        defl    Heap_Ptr
 723+ E734             >
 723+ E734             >mirror_Ptr      defl    $
 723+ E734             >
 723+ E734 D9 2A       >                dw      Dict_Ptr + 2        // xt
 723+ E736             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E736             >
 723+ E736             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E736             >
 723+ E736             >//              ______________________________________________________________________
 723+ E736             >//              Dictionary part
 723+ E736             >
 723+ E736             >                org     Dict_Ptr
 723+ 2AD7             >
 723+ 2AD7 34 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 2AD9             >
 723+ 2AD9             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 2AD9 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 2ADC             >
 723+ 2ADC             >
 723+ 2ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 2ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 2ADC             >
 723+ 2ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 2ADC 7E 2A                        dw      QCOMP                   // ?comp
 725+ 2ADE FE 24                        dw      R_TO                    // r>
 726+ 2AE0 B4 25 65 25                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 2AE4 F3 24                        dw      TO_R                    // >r
 728+ 2AE6 1E 26 4B 28                  dw      FETCH, COMMA            // @ ,
 729+ 2AEA E9 24                        dw      EXIT                    // ;
 730+ 2AEC
 731+ 2AEC              //  ______________________________________________________________________
 732+ 2AEC              //
 733+ 2AEC              // compile,     --
 734+ 2AEC              // compiles the following word
 735+ 2AEC                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 2AEC             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 2AEC             >
 735+ 2AEC             >Dict_Ptr        defl    $
 735+ 2AEC             >
 735+ 2AEC             >//              ______________________________________________________________________
 735+ 2AEC             >//              Heap part
 735+ 2AEC             >
 735+ 2AEC             >
 735+ 2AEC             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E736             >
 735+ E736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E736             >Latest_Definition defl  Heap_Ptr
 735+ E736             >
 735+ E736             >                // dummy db directives used to calculate length of namec
 735+ E736 43 4F 4D 50 >                db      "COMPILE,"
 735+ E73A 49 4C 45 2C >
 735+ E73E             >len_NFA         defl    $ - temp_NFA
 735+ E73E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E736             >
 735+ E736 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E737 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E73B 49 4C 45 2C >
 735+ E73F             >                org     $-1                 // alter last byte of Name just above to set
 735+ E73E AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E73F             >
 735+ E73F 2A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E741             >Prev_Ptr        defl    Heap_Ptr
 735+ E741             >
 735+ E741             >mirror_Ptr      defl    $
 735+ E741             >
 735+ E741 EE 2A       >                dw      Dict_Ptr + 2        // xt
 735+ E743             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E743             >
 735+ E743             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E743             >
 735+ E743             >//              ______________________________________________________________________
 735+ E743             >//              Dictionary part
 735+ E743             >
 735+ E743             >                org     Dict_Ptr
 735+ 2AEC             >
 735+ 2AEC 41 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 2AEE             >
 735+ 2AEE             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 2AEE CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 2AF1             >
 735+ 2AF1             >
 735+ 2AF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 2AF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 2AF1             >
 735+ 2AF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 2AF1              //              dw      QCOMP                   // ?comp
 737+ 2AF1 4B 28                        dw      COMMA                   // ,
 738+ 2AF3 E9 24                        dw      EXIT                    // ;
 739+ 2AF5
 740+ 2AF5              //  ______________________________________________________________________
 741+ 2AF5              //
 742+ 2AF5              // [            --
 743+ 2AF5              // stop compilation
 744+ 2AF5                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 2AF5             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 2AF5             >
 744+ 2AF5             >Dict_Ptr        defl    $
 744+ 2AF5             >
 744+ 2AF5             >//              ______________________________________________________________________
 744+ 2AF5             >//              Heap part
 744+ 2AF5             >
 744+ 2AF5             >
 744+ 2AF5             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E743             >
 744+ E743             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E743             >Latest_Definition defl  Heap_Ptr
 744+ E743             >
 744+ E743             >                // dummy db directives used to calculate length of namec
 744+ E743 5B          >                db      "["
 744+ E744             >len_NFA         defl    $ - temp_NFA
 744+ E744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E743             >
 744+ E743 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E744 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E745             >                org     $-1                 // alter last byte of Name just above to set
 744+ E744 DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E745             >
 744+ E745 36 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E747             >Prev_Ptr        defl    Heap_Ptr
 744+ E747             >
 744+ E747             >mirror_Ptr      defl    $
 744+ E747             >
 744+ E747 F7 2A       >                dw      Dict_Ptr + 2        // xt
 744+ E749             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E749             >
 744+ E749             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E749             >
 744+ E749             >//              ______________________________________________________________________
 744+ E749             >//              Dictionary part
 744+ E749             >
 744+ E749             >                org     Dict_Ptr
 744+ 2AF5             >
 744+ 2AF5 47 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 2AF7             >
 744+ 2AF7             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 2AF7 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 2AFA             >
 744+ 2AFA             >
 744+ 2AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 2AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 2AFA             >
 744+ 2AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 2AFA 10 27                        dw      ZERO                    // 0
 746+ 2AFC DB 27 28 26                  dw      STATE, STORE            // state !
 747+ 2B00 E9 24                        dw      EXIT                    // ; immediate
 748+ 2B02
 749+ 2B02              //  ______________________________________________________________________
 750+ 2B02              //
 751+ 2B02              // ]            --
 752+ 2B02              // start compilation
 753+ 2B02                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 2B02             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 2B02             >
 753+ 2B02             >Dict_Ptr        defl    $
 753+ 2B02             >
 753+ 2B02             >//              ______________________________________________________________________
 753+ 2B02             >//              Heap part
 753+ 2B02             >
 753+ 2B02             >
 753+ 2B02             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E749             >
 753+ E749             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E749             >Latest_Definition defl  Heap_Ptr
 753+ E749             >
 753+ E749             >                // dummy db directives used to calculate length of namec
 753+ E749 5D          >                db      "]"
 753+ E74A             >len_NFA         defl    $ - temp_NFA
 753+ E74A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E749             >
 753+ E749 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E74A 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E74B             >                org     $-1                 // alter last byte of Name just above to set
 753+ E74A DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E74B             >
 753+ E74B 43 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E74D             >Prev_Ptr        defl    Heap_Ptr
 753+ E74D             >
 753+ E74D             >mirror_Ptr      defl    $
 753+ E74D             >
 753+ E74D 04 2B       >                dw      Dict_Ptr + 2        // xt
 753+ E74F             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E74F             >
 753+ E74F             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E74F             >
 753+ E74F             >//              ______________________________________________________________________
 753+ E74F             >//              Dictionary part
 753+ E74F             >
 753+ E74F             >                org     Dict_Ptr
 753+ 2B02             >
 753+ 2B02 4D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 2B04             >
 753+ 2B04             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 2B04 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 2B07             >
 753+ 2B07             >
 753+ 2B07             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 2B07             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 2B07             >
 753+ 2B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 2B07 3D 20 C0 00                  dw      LIT, $C0                // 192
 755+ 2B0B DB 27 28 26                  dw      STATE, STORE            // state !
 756+ 2B0F E9 24                        dw      EXIT                    // ;
 757+ 2B11
 758+ 2B11              //  ______________________________________________________________________
 759+ 2B11              //
 760+ 2B11              // smudge       --
 761+ 2B11              // toggle smudge bit of latest definition
 762+ 2B11                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 2B11             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 2B11             >
 762+ 2B11             >Dict_Ptr        defl    $
 762+ 2B11             >
 762+ 2B11             >//              ______________________________________________________________________
 762+ 2B11             >//              Heap part
 762+ 2B11             >
 762+ 2B11             >
 762+ 2B11             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E74F             >
 762+ E74F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E74F             >Latest_Definition defl  Heap_Ptr
 762+ E74F             >
 762+ E74F             >                // dummy db directives used to calculate length of namec
 762+ E74F 53 4D 55 44 >                db      "SMUDGE"
 762+ E753 47 45       >
 762+ E755             >len_NFA         defl    $ - temp_NFA
 762+ E755             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E74F             >
 762+ E74F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E750 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E754 47 45       >
 762+ E756             >                org     $-1                 // alter last byte of Name just above to set
 762+ E755 C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E756             >
 762+ E756 49 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E758             >Prev_Ptr        defl    Heap_Ptr
 762+ E758             >
 762+ E758             >mirror_Ptr      defl    $
 762+ E758             >
 762+ E758 13 2B       >                dw      Dict_Ptr + 2        // xt
 762+ E75A             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E75A             >
 762+ E75A             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E75A             >
 762+ E75A             >//              ______________________________________________________________________
 762+ E75A             >//              Dictionary part
 762+ E75A             >
 762+ E75A             >                org     Dict_Ptr
 762+ 2B11             >
 762+ 2B11 58 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 2B13             >
 762+ 2B13             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 2B13 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 2B16             >
 762+ 2B16             >
 762+ 2B16             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 2B16             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 2B16             >
 762+ 2B16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 2B16 D9 29                        dw      LATEST                  // latest
 764+ 2B18 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 2B1C 15 26                        dw      TOGGLE                  // toggle
 766+ 2B1E E9 24                        dw      EXIT                    // ;
 767+ 2B20
 768+ 2B20              //  ______________________________________________________________________
 769+ 2B20              //
 770+ 2B20              // immediate    --
 771+ 2B20              // make immediate the latest definition
 772+ 2B20                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 2B20             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 2B20             >
 772+ 2B20             >Dict_Ptr        defl    $
 772+ 2B20             >
 772+ 2B20             >//              ______________________________________________________________________
 772+ 2B20             >//              Heap part
 772+ 2B20             >
 772+ 2B20             >
 772+ 2B20             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E75A             >
 772+ E75A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E75A             >Latest_Definition defl  Heap_Ptr
 772+ E75A             >
 772+ E75A             >                // dummy db directives used to calculate length of namec
 772+ E75A 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E75E 44 49 41 54 >
 772+ E762 45          >
 772+ E763             >len_NFA         defl    $ - temp_NFA
 772+ E763             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E75A             >
 772+ E75A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E75B 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E75F 44 49 41 54 >
 772+ E763 45          >
 772+ E764             >                org     $-1                 // alter last byte of Name just above to set
 772+ E763 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E764             >
 772+ E764 4F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E766             >Prev_Ptr        defl    Heap_Ptr
 772+ E766             >
 772+ E766             >mirror_Ptr      defl    $
 772+ E766             >
 772+ E766 22 2B       >                dw      Dict_Ptr + 2        // xt
 772+ E768             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E768             >
 772+ E768             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E768             >
 772+ E768             >//              ______________________________________________________________________
 772+ E768             >//              Dictionary part
 772+ E768             >
 772+ E768             >                org     Dict_Ptr
 772+ 2B20             >
 772+ 2B20 66 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 2B22             >
 772+ 2B22             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 2B22 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 2B25             >
 772+ 2B25             >
 772+ 2B25             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 2B25             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 2B25             >
 772+ 2B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 2B25 D9 29                        dw      LATEST                  // latest
 774+ 2B27 3D 20 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 775+ 2B2B 15 26                        dw      TOGGLE                  // toggle
 776+ 2B2D E9 24                        dw      EXIT                    // ;
 777+ 2B2F
 778+ 2B2F              //  ______________________________________________________________________
 779+ 2B2F              //
 780+ 2B2F              // hex          --
 781+ 2B2F              // change numeration base
 782+ 2B2F                              Colon_Def HEX, "HEX", is_normal
 782+ 2B2F             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 2B2F             >
 782+ 2B2F             >Dict_Ptr        defl    $
 782+ 2B2F             >
 782+ 2B2F             >//              ______________________________________________________________________
 782+ 2B2F             >//              Heap part
 782+ 2B2F             >
 782+ 2B2F             >
 782+ 2B2F             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E768             >
 782+ E768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E768             >Latest_Definition defl  Heap_Ptr
 782+ E768             >
 782+ E768             >                // dummy db directives used to calculate length of namec
 782+ E768 48 45 58    >                db      "HEX"
 782+ E76B             >len_NFA         defl    $ - temp_NFA
 782+ E76B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E768             >
 782+ E768 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E769 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E76C             >                org     $-1                 // alter last byte of Name just above to set
 782+ E76B D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E76C             >
 782+ E76C 5A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E76E             >Prev_Ptr        defl    Heap_Ptr
 782+ E76E             >
 782+ E76E             >mirror_Ptr      defl    $
 782+ E76E             >
 782+ E76E 31 2B       >                dw      Dict_Ptr + 2        // xt
 782+ E770             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E770             >
 782+ E770             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E770             >
 782+ E770             >//              ______________________________________________________________________
 782+ E770             >//              Dictionary part
 782+ E770             >
 782+ E770             >                org     Dict_Ptr
 782+ 2B2F             >
 782+ 2B2F 6E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 2B31             >
 782+ 2B31             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 2B31 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 2B34             >
 782+ 2B34             >
 782+ 2B34             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 2B34             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 2B34             >
 782+ 2B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 2B34 3D 20 10 00                  dw      LIT, 16                 // 16
 784+ 2B38 E1 27 28 26                  dw      BASE, STORE             // base !
 785+ 2B3C E9 24                        dw      EXIT                    // ;
 786+ 2B3E
 787+ 2B3E              //  ______________________________________________________________________
 788+ 2B3E              //
 789+ 2B3E              // decimal      --
 790+ 2B3E              // change numeration base
 791+ 2B3E                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 2B3E             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 2B3E             >
 791+ 2B3E             >Dict_Ptr        defl    $
 791+ 2B3E             >
 791+ 2B3E             >//              ______________________________________________________________________
 791+ 2B3E             >//              Heap part
 791+ 2B3E             >
 791+ 2B3E             >
 791+ 2B3E             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E770             >
 791+ E770             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E770             >Latest_Definition defl  Heap_Ptr
 791+ E770             >
 791+ E770             >                // dummy db directives used to calculate length of namec
 791+ E770 44 45 43 49 >                db      "DECIMAL"
 791+ E774 4D 41 4C    >
 791+ E777             >len_NFA         defl    $ - temp_NFA
 791+ E777             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E770             >
 791+ E770 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E771 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E775 4D 41 4C    >
 791+ E778             >                org     $-1                 // alter last byte of Name just above to set
 791+ E777 CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E778             >
 791+ E778 68 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E77A             >Prev_Ptr        defl    Heap_Ptr
 791+ E77A             >
 791+ E77A             >mirror_Ptr      defl    $
 791+ E77A             >
 791+ E77A 40 2B       >                dw      Dict_Ptr + 2        // xt
 791+ E77C             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E77C             >
 791+ E77C             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E77C             >
 791+ E77C             >//              ______________________________________________________________________
 791+ E77C             >//              Dictionary part
 791+ E77C             >
 791+ E77C             >                org     Dict_Ptr
 791+ 2B3E             >
 791+ 2B3E 7A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 2B40             >
 791+ 2B40             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 2B40 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 2B43             >
 791+ 2B43             >
 791+ 2B43             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 2B43             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 2B43             >
 791+ 2B43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 2B43 3D 20 0A 00                  dw      LIT, 10                 // 10
 793+ 2B47 E1 27 28 26                  dw      BASE, STORE             // base !
 794+ 2B4B E9 24                        dw      EXIT                    // ;
 795+ 2B4D
 796+ 2B4D              //  ______________________________________________________________________
 797+ 2B4D              //
 798+ 2B4D              // (;code)       --
 799+ 2B4D              // patch to CFA to call/jump to the "following code"
 800+ 2B4D                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 2B4D             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 2B4D             >
 800+ 2B4D             >Dict_Ptr        defl    $
 800+ 2B4D             >
 800+ 2B4D             >//              ______________________________________________________________________
 800+ 2B4D             >//              Heap part
 800+ 2B4D             >
 800+ 2B4D             >
 800+ 2B4D             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E77C             >
 800+ E77C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E77C             >Latest_Definition defl  Heap_Ptr
 800+ E77C             >
 800+ E77C             >                // dummy db directives used to calculate length of namec
 800+ E77C 28 3B 43 4F >                db      "(;CODE)"
 800+ E780 44 45 29    >
 800+ E783             >len_NFA         defl    $ - temp_NFA
 800+ E783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E77C             >
 800+ E77C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E77D 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E781 44 45 29    >
 800+ E784             >                org     $-1                 // alter last byte of Name just above to set
 800+ E783 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E784             >
 800+ E784 70 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E786             >Prev_Ptr        defl    Heap_Ptr
 800+ E786             >
 800+ E786             >mirror_Ptr      defl    $
 800+ E786             >
 800+ E786 4F 2B       >                dw      Dict_Ptr + 2        // xt
 800+ E788             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E788             >
 800+ E788             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E788             >
 800+ E788             >//              ______________________________________________________________________
 800+ E788             >//              Dictionary part
 800+ E788             >
 800+ E788             >                org     Dict_Ptr
 800+ 2B4D             >
 800+ 2B4D 86 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 2B4F             >
 800+ 2B4F             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 2B4F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 2B52             >
 800+ 2B52             >
 800+ 2B52             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 2B52             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 2B52             >
 800+ 2B52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 2B52 FE 24                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 2B54 D9 29                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 2B56 37 2A 12 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 2B5A
 805+ 2B5A 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 2B5E 90 25 3C 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 2B62 4F 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 2B64
 809+ 2B64 28 26                        dw      STORE                   // !
 810+ 2B66 E9 24                        dw      EXIT                    // ;
 811+ 2B68
 812+ 2B68              //  ______________________________________________________________________
 813+ 2B68              //
 814+ 2B68              // ;code        --
 815+ 2B68                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 2B68             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 2B68             >
 815+ 2B68             >Dict_Ptr        defl    $
 815+ 2B68             >
 815+ 2B68             >//              ______________________________________________________________________
 815+ 2B68             >//              Heap part
 815+ 2B68             >
 815+ 2B68             >
 815+ 2B68             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E788             >
 815+ E788             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E788             >Latest_Definition defl  Heap_Ptr
 815+ E788             >
 815+ E788             >                // dummy db directives used to calculate length of namec
 815+ E788 3B 43 4F 44 >                db      ";CODE"
 815+ E78C 45          >
 815+ E78D             >len_NFA         defl    $ - temp_NFA
 815+ E78D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E788             >
 815+ E788 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E789 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E78D 45          >
 815+ E78E             >                org     $-1                 // alter last byte of Name just above to set
 815+ E78D C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E78E             >
 815+ E78E 7C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E790             >Prev_Ptr        defl    Heap_Ptr
 815+ E790             >
 815+ E790             >mirror_Ptr      defl    $
 815+ E790             >
 815+ E790 6A 2B       >                dw      Dict_Ptr + 2        // xt
 815+ E792             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E792             >
 815+ E792             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E792             >
 815+ E792             >//              ______________________________________________________________________
 815+ E792             >//              Dictionary part
 815+ E792             >
 815+ E792             >                org     Dict_Ptr
 815+ 2B68             >
 815+ 2B68 90 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 2B6A             >
 815+ 2B6A             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 2B6A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 2B6D             >
 815+ 2B6D             >
 815+ 2B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 2B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 2B6D             >
 815+ 2B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 2B6D B1 2A                        dw      QCSP                    // ?csp
 817+ 2B6F D9 2A                        dw      COMPILE                 // compile
 818+ 2B71 4F 2B                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 2B73 F7 2A                        dw      SQUARED_OPEN            // [
 820+ 2B75 D7 26                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 2B77 E9 24                        dw      EXIT                    // ; immediate
 822+ 2B79
 823+ 2B79              //  ______________________________________________________________________
 824+ 2B79              //
 825+ 2B79              // recurse      --
 826+ 2B79              //              Colon_Def RECURSE, "RECURSE", is_immediate
 827+ 2B79              //              dw      QCOMP                   // ?comp
 828+ 2B79              //              dw      LATEST                  // latest
 829+ 2B79              //              dw      PFA, CFA                // pfa cfa
 830+ 2B79              //              dw      COMMA                   // ,
 831+ 2B79              //              dw      EXIT                    // ; immediate
 832+ 2B79
 833+ 2B79              //  ______________________________________________________________________
 834+ 2B79              //
 835+ 2B79              // <builds      --
 836+ 2B79                              Colon_Def CBUILDS, "<BUILDS", is_normal
 836+ 2B79             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 836+ 2B79             >
 836+ 2B79             >Dict_Ptr        defl    $
 836+ 2B79             >
 836+ 2B79             >//              ______________________________________________________________________
 836+ 2B79             >//              Heap part
 836+ 2B79             >
 836+ 2B79             >
 836+ 2B79             >                org     (Heap_Ptr & $1FFF) + $E000
 836+ E792             >
 836+ E792             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ E792             >Latest_Definition defl  Heap_Ptr
 836+ E792             >
 836+ E792             >                // dummy db directives used to calculate length of namec
 836+ E792 3C 42 55 49 >                db      "<BUILDS"
 836+ E796 4C 44 53    >
 836+ E799             >len_NFA         defl    $ - temp_NFA
 836+ E799             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ E792             >
 836+ E792 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ E793 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 836+ E797 4C 44 53    >
 836+ E79A             >                org     $-1                 // alter last byte of Name just above to set
 836+ E799 D3          >                db      {b $} | END_BIT     // msb as name end
 836+ E79A             >
 836+ E79A 88 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 836+ E79C             >Prev_Ptr        defl    Heap_Ptr
 836+ E79C             >
 836+ E79C             >mirror_Ptr      defl    $
 836+ E79C             >
 836+ E79C 7B 2B       >                dw      Dict_Ptr + 2        // xt
 836+ E79E             >Heap_Ptr        defl    $ - $E000           // save current HP
 836+ E79E             >
 836+ E79E             >Current_HP      defl  $ - $E000             // used to set HP once!
 836+ E79E             >
 836+ E79E             >//              ______________________________________________________________________
 836+ E79E             >//              Dictionary part
 836+ E79E             >
 836+ E79E             >                org     Dict_Ptr
 836+ 2B79             >
 836+ 2B79 9C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 836+ 2B7B             >
 836+ 2B7B             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 2B7B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 836+ 2B7E             >
 836+ 2B7E             >
 836+ 2B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 2B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 2B7E             >
 836+ 2B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 2B7E 88 30                        dw      CREATE                  // CREATE
 838+ 2B80 E9 24                        dw      EXIT                    // ;
 839+ 2B82
 840+ 2B82              //  ______________________________________________________________________
 841+ 2B82              //
 842+ 2B82              // _does>_     --
 843+ 2B82                              Colon_Def C_DOES, "_DOES>_", is_normal
 843+ 2B82             >                New_Def  C_DOES, "_DOES>_", Enter_Ptr, is_normal ; ok
 843+ 2B82             >
 843+ 2B82             >Dict_Ptr        defl    $
 843+ 2B82             >
 843+ 2B82             >//              ______________________________________________________________________
 843+ 2B82             >//              Heap part
 843+ 2B82             >
 843+ 2B82             >
 843+ 2B82             >                org     (Heap_Ptr & $1FFF) + $E000
 843+ E79E             >
 843+ E79E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 843+ E79E             >Latest_Definition defl  Heap_Ptr
 843+ E79E             >
 843+ E79E             >                // dummy db directives used to calculate length of namec
 843+ E79E 5F 44 4F 45 >                db      "_DOES>_"
 843+ E7A2 53 3E 5F    >
 843+ E7A5             >len_NFA         defl    $ - temp_NFA
 843+ E7A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 843+ E79E             >
 843+ E79E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 843+ E79F 5F 44 4F 45 >                db      "_DOES>_"               // name string in 7-bit ascii, but
 843+ E7A3 53 3E 5F    >
 843+ E7A6             >                org     $-1                 // alter last byte of Name just above to set
 843+ E7A5 DF          >                db      {b $} | END_BIT     // msb as name end
 843+ E7A6             >
 843+ E7A6 92 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 843+ E7A8             >Prev_Ptr        defl    Heap_Ptr
 843+ E7A8             >
 843+ E7A8             >mirror_Ptr      defl    $
 843+ E7A8             >
 843+ E7A8 84 2B       >                dw      Dict_Ptr + 2        // xt
 843+ E7AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 843+ E7AA             >
 843+ E7AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 843+ E7AA             >
 843+ E7AA             >//              ______________________________________________________________________
 843+ E7AA             >//              Dictionary part
 843+ E7AA             >
 843+ E7AA             >                org     Dict_Ptr
 843+ 2B82             >
 843+ 2B82 A8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 843+ 2B84             >
 843+ 2B84             >C_DOES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 843+ 2B84 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 843+ 2B87             >
 843+ 2B87             >
 843+ 2B87             >                endif           ; ok        // for other definitions it "points" the correct handler
 843+ 2B87             >                // Use of "; ok" to suppress "warning[fwdref]"
 843+ 2B87             >
 843+ 2B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 844+ 2B87 FE 24                        dw      R_TO                    // r>
 845+ 2B89 D9 29                        dw      LATEST                  // latest
 846+ 2B8B 37 2A                        dw      PFA                     // pfa
 847+ 2B8D 12 2A 4F 25                  dw      CFA, ONE_PLUS           // cfa 1+
 848+ 2B91 28 26                        dw      STORE                   // !
 849+ 2B93 E9 24                        dw      EXIT                    // ;
 850+ 2B95
 851+ 2B95              //  ______________________________________________________________________
 852+ 2B95              //
 853+ 2B95              // does>     --
 854+ 2B95                              Colon_Def DOES_TO, "DOES>", is_immediate
 854+ 2B95             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_immediate ; ok
 854+ 2B95             >
 854+ 2B95             >Dict_Ptr        defl    $
 854+ 2B95             >
 854+ 2B95             >//              ______________________________________________________________________
 854+ 2B95             >//              Heap part
 854+ 2B95             >
 854+ 2B95             >
 854+ 2B95             >                org     (Heap_Ptr & $1FFF) + $E000
 854+ E7AA             >
 854+ E7AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ E7AA             >Latest_Definition defl  Heap_Ptr
 854+ E7AA             >
 854+ E7AA             >                // dummy db directives used to calculate length of namec
 854+ E7AA 44 4F 45 53 >                db      "DOES>"
 854+ E7AE 3E          >
 854+ E7AF             >len_NFA         defl    $ - temp_NFA
 854+ E7AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ E7AA             >
 854+ E7AA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ E7AB 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 854+ E7AF 3E          >
 854+ E7B0             >                org     $-1                 // alter last byte of Name just above to set
 854+ E7AF BE          >                db      {b $} | END_BIT     // msb as name end
 854+ E7B0             >
 854+ E7B0 9E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 854+ E7B2             >Prev_Ptr        defl    Heap_Ptr
 854+ E7B2             >
 854+ E7B2             >mirror_Ptr      defl    $
 854+ E7B2             >
 854+ E7B2 97 2B       >                dw      Dict_Ptr + 2        // xt
 854+ E7B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 854+ E7B4             >
 854+ E7B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 854+ E7B4             >
 854+ E7B4             >//              ______________________________________________________________________
 854+ E7B4             >//              Dictionary part
 854+ E7B4             >
 854+ E7B4             >                org     Dict_Ptr
 854+ 2B95             >
 854+ 2B95 B2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 854+ 2B97             >
 854+ 2B97             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 2B97 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 2B9A             >
 854+ 2B9A             >
 854+ 2B9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 2B9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 2B9A             >
 854+ 2B9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 2B9A D9 2A 84 2B                  dw      COMPILE,  C_DOES
 856+ 2B9E 3D 20 CD 00                  dw      LIT, $CD, CCOMMA
 856+ 2BA2 5A 28
 857+ 2BA4 3D 20 BB 26                  dw      LIT, Enter_Ptr, COMMA
 857+ 2BA8 4B 28
 858+ 2BAA E9 24                        dw      EXIT
 859+ 2BAC
 860+ 2BAC              //  ______________________________________________________________________
 861+ 2BAC              //
 862+ 2BAC              // count        a -- a2 n
 863+ 2BAC              // expects a counted string at address a, returns string address and counter
 864+ 2BAC                              New_Def COUNT, "COUNT", is_code, is_normal
 864+ 2BAC             >
 864+ 2BAC             >Dict_Ptr        defl    $
 864+ 2BAC             >
 864+ 2BAC             >//              ______________________________________________________________________
 864+ 2BAC             >//              Heap part
 864+ 2BAC             >
 864+ 2BAC             >
 864+ 2BAC             >                org     (Heap_Ptr & $1FFF) + $E000
 864+ E7B4             >
 864+ E7B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ E7B4             >Latest_Definition defl  Heap_Ptr
 864+ E7B4             >
 864+ E7B4             >                // dummy db directives used to calculate length of namec
 864+ E7B4 43 4F 55 4E >                db      "COUNT"
 864+ E7B8 54          >
 864+ E7B9             >len_NFA         defl    $ - temp_NFA
 864+ E7B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ E7B4             >
 864+ E7B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ E7B5 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 864+ E7B9 54          >
 864+ E7BA             >                org     $-1                 // alter last byte of Name just above to set
 864+ E7B9 D4          >                db      {b $} | END_BIT     // msb as name end
 864+ E7BA             >
 864+ E7BA AA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 864+ E7BC             >Prev_Ptr        defl    Heap_Ptr
 864+ E7BC             >
 864+ E7BC             >mirror_Ptr      defl    $
 864+ E7BC             >
 864+ E7BC AE 2B       >                dw      Dict_Ptr + 2        // xt
 864+ E7BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 864+ E7BE             >
 864+ E7BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 864+ E7BE             >
 864+ E7BE             >//              ______________________________________________________________________
 864+ E7BE             >//              Dictionary part
 864+ E7BE             >
 864+ E7BE             >                org     Dict_Ptr
 864+ 2BAC             >
 864+ 2BAC BC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 864+ 2BAE             >
 864+ 2BAE             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 2BAE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 864+ 2BAE ~           >
 864+ 2BAE ~           >
 864+ 2BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 2BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 2BAE             >
 864+ 2BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 2BAE D9                           exx
 866+ 2BAF E1                           pop     hl
 867+ 2BB0 5E                           ld      e, (hl)
 868+ 2BB1 16 00                        ld      d, 0
 869+ 2BB3 23                           inc     hl
 870+ 2BB4              Count_Here:
 871+ 2BB4 E5                           push    hl
 872+ 2BB5 D5                           push    de
 873+ 2BB6 D9                           exx
 874+ 2BB7                              next
 874+ 2BB7 DD E9       >                jp      (ix)
 875+ 2BB9              //                pop     hl
 876+ 2BB9              //                ld      a, (hl)
 877+ 2BB9              //                inc     hl
 878+ 2BB9              //                push    hl
 879+ 2BB9              //                ld      h, 0
 880+ 2BB9              //                ld      l, a
 881+ 2BB9              //                push    hl
 882+ 2BB9              //                next
 883+ 2BB9
 884+ 2BB9              //  ______________________________________________________________________
 885+ 2BB9              //
 886+ 2BB9              // bounds       a n -- a+n n
 887+ 2BB9              // given an address and a length ( a n ) calculate the bound addresses
 888+ 2BB9              // suitable for DO-LOOP
 889+ 2BB9                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 889+ 2BB9             >
 889+ 2BB9             >Dict_Ptr        defl    $
 889+ 2BB9             >
 889+ 2BB9             >//              ______________________________________________________________________
 889+ 2BB9             >//              Heap part
 889+ 2BB9             >
 889+ 2BB9             >
 889+ 2BB9             >                org     (Heap_Ptr & $1FFF) + $E000
 889+ E7BE             >
 889+ E7BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ E7BE             >Latest_Definition defl  Heap_Ptr
 889+ E7BE             >
 889+ E7BE             >                // dummy db directives used to calculate length of namec
 889+ E7BE 42 4F 55 4E >                db      "BOUNDS"
 889+ E7C2 44 53       >
 889+ E7C4             >len_NFA         defl    $ - temp_NFA
 889+ E7C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ E7BE             >
 889+ E7BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ E7BF 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 889+ E7C3 44 53       >
 889+ E7C5             >                org     $-1                 // alter last byte of Name just above to set
 889+ E7C4 D3          >                db      {b $} | END_BIT     // msb as name end
 889+ E7C5             >
 889+ E7C5 B4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 889+ E7C7             >Prev_Ptr        defl    Heap_Ptr
 889+ E7C7             >
 889+ E7C7             >mirror_Ptr      defl    $
 889+ E7C7             >
 889+ E7C7 BB 2B       >                dw      Dict_Ptr + 2        // xt
 889+ E7C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 889+ E7C9             >
 889+ E7C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 889+ E7C9             >
 889+ E7C9             >//              ______________________________________________________________________
 889+ E7C9             >//              Dictionary part
 889+ E7C9             >
 889+ E7C9             >                org     Dict_Ptr
 889+ 2BB9             >
 889+ 2BB9 C7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 889+ 2BBB             >
 889+ 2BBB             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 2BBB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 889+ 2BBB ~           >
 889+ 2BBB ~           >
 889+ 2BBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 2BBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 2BBB             >
 889+ 2BBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 2BBB D9                           exx
 891+ 2BBC E1                           pop     hl
 892+ 2BBD D1                           pop     de
 893+ 2BBE 19                           add     hl, de
 894+ 2BBF 18 F3                        jr      Count_Here
 895+ 2BC1                              // push    hl
 896+ 2BC1                              // push    de
 897+ 2BC1                              // exx
 898+ 2BC1                              // next
 899+ 2BC1
 900+ 2BC1              //  ______________________________________________________________________
 901+ 2BC1              //
 902+ 2BC1              // leave        --
 903+ 2BC1              // Compile (leave) to leave current LOOP and jump just after it
 904+ 2BC1                              Colon_Def LEAVE, "LEAVE", is_immediate
 904+ 2BC1             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 904+ 2BC1             >
 904+ 2BC1             >Dict_Ptr        defl    $
 904+ 2BC1             >
 904+ 2BC1             >//              ______________________________________________________________________
 904+ 2BC1             >//              Heap part
 904+ 2BC1             >
 904+ 2BC1             >
 904+ 2BC1             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ E7C9             >
 904+ E7C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ E7C9             >Latest_Definition defl  Heap_Ptr
 904+ E7C9             >
 904+ E7C9             >                // dummy db directives used to calculate length of namec
 904+ E7C9 4C 45 41 56 >                db      "LEAVE"
 904+ E7CD 45          >
 904+ E7CE             >len_NFA         defl    $ - temp_NFA
 904+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ E7C9             >
 904+ E7C9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ E7CA 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 904+ E7CE 45          >
 904+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 904+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 904+ E7CF             >
 904+ E7CF BE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 904+ E7D1             >
 904+ E7D1             >mirror_Ptr      defl    $
 904+ E7D1             >
 904+ E7D1 C3 2B       >                dw      Dict_Ptr + 2        // xt
 904+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ E7D3             >
 904+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ E7D3             >
 904+ E7D3             >//              ______________________________________________________________________
 904+ E7D3             >//              Dictionary part
 904+ E7D3             >
 904+ E7D3             >                org     Dict_Ptr
 904+ 2BC1             >
 904+ 2BC1 D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 2BC3             >
 904+ 2BC3             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 2BC3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 2BC6             >
 904+ 2BC6             >
 904+ 2BC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 2BC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 2BC6             >
 904+ 2BC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 2BC6 D9 2A 96 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 906+ 2BCA 35 28 F3 24                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 906+ 2BCE 10 27 4B 28
 907+ 2BD2 10 27 10 27                  dw      ZERO, ZERO
 908+ 2BD6 D0 24 B4 25                  dw      SPFETCH, DUP
 909+ 2BDA 65 25 65 25                  dw      CELL_PLUS, CELL_PLUS
 910+ 2BDE A4 25                        dw      TUCK
 911+ 2BE0 F3 27 1E 26                  dw      CSP, FETCH
 912+ 2BE4 AD 25 74 28                  dw      SWAP, SUBTRACT
 913+ 2BE8 2E 24                        dw      CMOVE
 914+ 2BEA F3 27 1E 26                  dw      CSP, FETCH, CELL_MINUS
 914+ 2BEE 69 25
 915+ 2BF0 FE 24 90 25                  dw      R_TO, OVER, STORE
 915+ 2BF4 28 26
 916+ 2BF6 69 25 10 27                  dw      CELL_MINUS, ZERO
 917+ 2BFA AD 25 28 26                  dw      SWAP, STORE
 918+ 2BFE E9 24                        dw      EXIT                    // ;
 919+ 2C00
 920+ 2C00              //  ______________________________________________________________________
 921+ 2C00              //
 922+ 2C00              // type         a n --
 923+ 2C00              // Sends to current output channel n characters starting at address a.
 924+ 2C00                              Colon_Def TYPE, "TYPE", is_normal
 924+ 2C00             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 924+ 2C00             >
 924+ 2C00             >Dict_Ptr        defl    $
 924+ 2C00             >
 924+ 2C00             >//              ______________________________________________________________________
 924+ 2C00             >//              Heap part
 924+ 2C00             >
 924+ 2C00             >
 924+ 2C00             >                org     (Heap_Ptr & $1FFF) + $E000
 924+ E7D3             >
 924+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ E7D3             >Latest_Definition defl  Heap_Ptr
 924+ E7D3             >
 924+ E7D3             >                // dummy db directives used to calculate length of namec
 924+ E7D3 54 59 50 45 >                db      "TYPE"
 924+ E7D7             >len_NFA         defl    $ - temp_NFA
 924+ E7D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ E7D3             >
 924+ E7D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ E7D4 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 924+ E7D8             >                org     $-1                 // alter last byte of Name just above to set
 924+ E7D7 C5          >                db      {b $} | END_BIT     // msb as name end
 924+ E7D8             >
 924+ E7D8 C9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 924+ E7DA             >Prev_Ptr        defl    Heap_Ptr
 924+ E7DA             >
 924+ E7DA             >mirror_Ptr      defl    $
 924+ E7DA             >
 924+ E7DA 02 2C       >                dw      Dict_Ptr + 2        // xt
 924+ E7DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 924+ E7DC             >
 924+ E7DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 924+ E7DC             >
 924+ E7DC             >//              ______________________________________________________________________
 924+ E7DC             >//              Dictionary part
 924+ E7DC             >
 924+ E7DC             >                org     Dict_Ptr
 924+ 2C00             >
 924+ 2C00 DA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 924+ 2C02             >
 924+ 2C02             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 2C02 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 924+ 2C05             >
 924+ 2C05             >
 924+ 2C05             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 2C05             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 2C05             >
 924+ 2C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 2C05 BB 2B                        dw      BOUNDS                  // bounds
 926+ 2C07 A0 20                        dw      C_Q_DO                  // ?do
 927+ 2C09 0C 00                        dw      Type_Skip - $
 928+ 2C0B              Type_Loop:
 929+ 2C0B CC 20 33 26                  dw          I, CFETCH           //      i c@
 930+ 2C0F E7 28                        dw          EMIT                //      emit
 931+ 2C11 81 20                        dw      C_LOOP                  // loop
 932+ 2C13 F8 FF                        dw      Type_Loop - $
 933+ 2C15              Type_Skip:
 934+ 2C15 E9 24                        dw      EXIT                    // ;
 935+ 2C17
 936+ 2C17              //  ______________________________________________________________________
 937+ 2C17              //
 938+ 2C17              // -trailing    a n1 -- a n2
 939+ 2C17              // Assumes that an n1 bytes-long string is stored at address a
 940+ 2C17              // and the string contains a space delimited word,
 941+ 2C17              // Finds n2 as the position of the first character after the word.
 942+ 2C17                              Colon_Def LTRAILING, "-TRAILING", is_normal
 942+ 2C17             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 942+ 2C17             >
 942+ 2C17             >Dict_Ptr        defl    $
 942+ 2C17             >
 942+ 2C17             >//              ______________________________________________________________________
 942+ 2C17             >//              Heap part
 942+ 2C17             >
 942+ 2C17             >
 942+ 2C17             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ E7DC             >
 942+ E7DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ E7DC             >Latest_Definition defl  Heap_Ptr
 942+ E7DC             >
 942+ E7DC             >                // dummy db directives used to calculate length of namec
 942+ E7DC 2D 54 52 41 >                db      "-TRAILING"
 942+ E7E0 49 4C 49 4E >
 942+ E7E4 47          >
 942+ E7E5             >len_NFA         defl    $ - temp_NFA
 942+ E7E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ E7DC             >
 942+ E7DC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ E7DD 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 942+ E7E1 49 4C 49 4E >
 942+ E7E5 47          >
 942+ E7E6             >                org     $-1                 // alter last byte of Name just above to set
 942+ E7E5 C7          >                db      {b $} | END_BIT     // msb as name end
 942+ E7E6             >
 942+ E7E6 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ E7E8             >Prev_Ptr        defl    Heap_Ptr
 942+ E7E8             >
 942+ E7E8             >mirror_Ptr      defl    $
 942+ E7E8             >
 942+ E7E8 19 2C       >                dw      Dict_Ptr + 2        // xt
 942+ E7EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ E7EA             >
 942+ E7EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ E7EA             >
 942+ E7EA             >//              ______________________________________________________________________
 942+ E7EA             >//              Dictionary part
 942+ E7EA             >
 942+ E7EA             >                org     Dict_Ptr
 942+ 2C17             >
 942+ 2C17 E8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 2C19             >
 942+ 2C19             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 2C19 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 2C1C             >
 942+ 2C1C             >
 942+ 2C1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 2C1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 2C1C             >
 942+ 2C1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 2C1C B4 25 10 27                  dw      DUP, ZERO               // dup 0
 944+ 2C20                                                              // do
 945+ 2C20 A0 20                        dw      C_Q_DO
 946+ 2C22 20 00                        dw      LTrailing_Leave - $
 947+ 2C24              LTrailing_Loop:
 948+ 2C24 FC 25 36 25                  dw          TWO_DUP, PLUS       //      2dup +
 949+ 2C28 56 25                        dw          ONE_SUBTRACT        //      1-
 950+ 2C2A 33 26                        dw          CFETCH              //      c@
 951+ 2C2C 33 27 74 28                  dw          BL, SUBTRACT        //      bl -
 952+ 2C30                                                              //      if
 953+ 2C30 8D 20                        dw          ZBRANCH
 954+ 2C32 0A 00                        dw          LTrailing_Else - $
 955+ 2C34 96 20                        dw              C_LEAVE         //          leave
 956+ 2C36 0C 00                        dw              LTrailing_Leave - $
 957+ 2C38 89 20                        dw          BRANCH              //      else
 958+ 2C3A 04 00                        dw          LTrailing_Endif - $
 959+ 2C3C              LTrailing_Else:
 960+ 2C3C 56 25                        dw              ONE_SUBTRACT    //          1-
 961+ 2C3E              LTrailing_Endif:                                //      endif
 962+ 2C3E                                                              // loop
 963+ 2C3E 81 20                        dw      C_LOOP
 964+ 2C40 E4 FF                        dw      LTrailing_Loop - $
 965+ 2C42              LTrailing_Leave:
 966+ 2C42 E9 24                        dw      EXIT                    // ;
 967+ 2C44
 968+ 2C44              //  ______________________________________________________________________
 969+ 2C44              //
 970+ 2C44              // accept       a n1 -- n2
 971+ 2C44              // Accepts at most n1 characters from terminal and stores them at address a
 972+ 2C44              // CR stops input. A 'nul' is added as trailer.
 973+ 2C44              // n2 is the string length. n2 is kept in span user variable also.
 974+ 2C44                              Colon_Def ACCEPT, "ACCEPT", is_normal
 974+ 2C44             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 974+ 2C44             >
 974+ 2C44             >Dict_Ptr        defl    $
 974+ 2C44             >
 974+ 2C44             >//              ______________________________________________________________________
 974+ 2C44             >//              Heap part
 974+ 2C44             >
 974+ 2C44             >
 974+ 2C44             >                org     (Heap_Ptr & $1FFF) + $E000
 974+ E7EA             >
 974+ E7EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ E7EA             >Latest_Definition defl  Heap_Ptr
 974+ E7EA             >
 974+ E7EA             >                // dummy db directives used to calculate length of namec
 974+ E7EA 41 43 43 45 >                db      "ACCEPT"
 974+ E7EE 50 54       >
 974+ E7F0             >len_NFA         defl    $ - temp_NFA
 974+ E7F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ E7EA             >
 974+ E7EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ E7EB 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 974+ E7EF 50 54       >
 974+ E7F1             >                org     $-1                 // alter last byte of Name just above to set
 974+ E7F0 D4          >                db      {b $} | END_BIT     // msb as name end
 974+ E7F1             >
 974+ E7F1 DC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 974+ E7F3             >Prev_Ptr        defl    Heap_Ptr
 974+ E7F3             >
 974+ E7F3             >mirror_Ptr      defl    $
 974+ E7F3             >
 974+ E7F3 46 2C       >                dw      Dict_Ptr + 2        // xt
 974+ E7F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 974+ E7F5             >
 974+ E7F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 974+ E7F5             >
 974+ E7F5             >//              ______________________________________________________________________
 974+ E7F5             >//              Dictionary part
 974+ E7F5             >
 974+ E7F5             >                org     Dict_Ptr
 974+ 2C44             >
 974+ 2C44 F3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 974+ 2C46             >
 974+ 2C46             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 2C46 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 2C49             >
 974+ 2C49             >
 974+ 2C49             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 2C49             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 2C49             >
 974+ 2C49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 2C49 90 25 36 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 975+ 2C4D 90 25
 976+ 2C4F 10 27 C4 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 977+ 2C53                                                              // do
 978+ 2C53 A0 20                        dw      C_Q_DO
 979+ 2C55 8C 00                        dw      Accept_Leave - $
 980+ 2C57              Accept_Loop:
 981+ 2C57 BF 22                        dw          CUR                 //      cur             ( a  0 )
 982+ 2C59 99 25 07 23                  dw          DROP, KEY           //      drop key        ( a  c )
 983+ 2C5D B4 25                        dw          DUP                 //      dup             ( a  c  c )
 984+ 2C5F 3D 20 0E 00                  dw          LIT, $0E            //      0E
 985+ 2C63 56 27                        dw          PLUS_ORIGIN         //      +origin
 986+ 2C65 1E 26                        dw          FETCH               //      @               ( a  c  c  del )
 987+ 2C67 80 28                        dw          EQUALS              //      =               ( a  c  c==del )
 988+ 2C69                                                              //      if
 989+ 2C69 8D 20                        dw          ZBRANCH
 990+ 2C6B 2C 00                        dw          Accept_Else_0 - $
 991+ 2C6D 99 25                        dw              DROP            //          drop        ( a  )
 992+ 2C6F B4 25 CC 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 992+ 2C73 80 28
 993+ 2C75 17 27 A9 24                  dw              ONE, AND_OP     //          1 and
 994+ 2C79 B4 25                        dw              DUP             //          dup         ( a  a==i  a==i )
 995+ 2C7B FE 24                        dw              R_TO            //          r> 2 - + r>
 996+ 2C7D 71 25 36 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 997+ 2C81 F3 24                        dw              TO_R            //
 998+ 2C83                                                              //          if
 999+ 2C83 8D 20                        dw              ZBRANCH
1000+ 2C85 0A 00                        dw              Accept_Else_1 - $
1001+ 2C87 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1002+ 2C8B                                                              //          else
1003+ 2C8B 89 20                        dw              BRANCH
1004+ 2C8D 06 00                        dw              Accept_Endif_1 - $
1005+ 2C8F              Accept_Else_1:
1006+ 2C8F 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1007+ 2C93              Accept_Endif_1:                                 //          endif
1008+ 2C93 89 20                        dw          BRANCH
1009+ 2C95 2E 00                        dw          Accept_Endif_0 - $
1010+ 2C97              Accept_Else_0:                                  //      else
1011+ 2C97 B4 25                        dw              DUP             //          dup         ( a  c  c )
1012+ 2C99 3D 20 0D 00                  dw              LIT, 13         //          13
1013+ 2C9D 80 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1014+ 2C9F                                                              //          if
1015+ 2C9F 8D 20                        dw              ZBRANCH
1016+ 2CA1 0C 00                        dw              Accept_Else_2 - $
1017+ 2CA3 99 25 33 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1018+ 2CA7 10 27                        dw                  ZERO        //              0       ( a  c  0 )
1019+ 2CA9                                                              //          else
1020+ 2CA9 89 20                        dw              BRANCH
1021+ 2CAB 04 00                        dw              Accept_Endif_2 - $
1022+ 2CAD              Accept_Else_2:
1023+ 2CAD B4 25                        dw                  DUP         //              dup     ( a  c  c )
1024+ 2CAF                                                              //          endif
1025+ 2CAF              Accept_Endif_2:
1026+ 2CAF CC 20 3C 26                  dw              I, CSTORE       //          i           ( a  c )
1027+ 2CB3 B4 25 33 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1027+ 2CB7 99 28
1028+ 2CB9                                                              //          if
1029+ 2CB9 8D 20                        dw              ZBRANCH
1030+ 2CBB 08 00                        dw              Accept_Endif_3 - $
1031+ 2CBD FE 24                        dw                  R_TO        //              r>
1032+ 2CBF 56 25                        dw                  ONE_SUBTRACT//              1-
1033+ 2CC1 F3 24                        dw                  TO_R        //              >r
1034+ 2CC3                                                              //          endif
1035+ 2CC3              Accept_Endif_3:
1036+ 2CC3              Accept_Endif_0:                                 //      endif
1037+ 2CC3 E7 28                        dw          EMIT                //      emit            ( a )
1038+ 2CC5
1039+ 2CC5 10 27 CC 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1039+ 2CC9 4F 25
1040+ 2CCB 28 26                        dw          STORE               //          ( zero pad )
1041+ 2CCD CC 20                        dw          I                   //      i
1042+ 2CCF CC 20 33 26                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1042+ 2CD3 0E 25
1043+ 2CD5 8D 20                        dw          ZBRANCH             //
1044+ 2CD7 06 00                        dw              Accept_Endif_4 - $
1045+ 2CD9 96 20                        dw                  C_LEAVE     //              leave
1046+ 2CDB 06 00                        dw                  Accept_Leave - $
1047+ 2CDD              Accept_Endif_4:                                 //      endif
1048+ 2CDD                                                              // loop
1049+ 2CDD 81 20                        dw      C_LOOP
1050+ 2CDF 78 FF                        dw      Accept_Loop - $
1051+ 2CE1              Accept_Leave:
1052+ 2CE1 AD 25 74 28                  dw      SWAP, SUBTRACT          // swap -
1053+ 2CE5 4F 25                        dw      ONE_PLUS                // 1+
1054+ 2CE7 B4 25 23 28                  dw      DUP, SPAN, STORE        // dup span !
1054+ 2CEB 28 26
1055+ 2CED E9 24                        dw      EXIT                    // ;
1056+ 2CEF
1057+ 2CEF              //  ______________________________________________________________________
1058+ 2CEF              //
1059+ 2CEF              // expect      a n --
1060+ 2CEF              // Accepts at most n1 characters from terminal and stores them at address a
1061+ 2CEF              // CR stops input. A 'nul' is added as trailer.
1062+ 2CEF              // n2 is the string length. n2 is kept in span user variable also.
1063+ 2CEF              //              Colon_Def EXPECT, "EXPECT", is_normal
1064+ 2CEF              //              dw      ACCEPT, DROP            // accept drop
1065+ 2CEF              //              dw      EXIT                    // ;
1066+ 2CEF
1067+ 2CEF              //  ______________________________________________________________________
1068+ 2CEF              //
1069+ 2CEF              // query        --
1070+ 2CEF              // Accept at most 80 character from console. CR stops.
1071+ 2CEF              // Text is stored in TIB. Variable IN is zeroed.
1072+ 2CEF                              Colon_Def QUERY, "QUERY", is_normal
1072+ 2CEF             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1072+ 2CEF             >
1072+ 2CEF             >Dict_Ptr        defl    $
1072+ 2CEF             >
1072+ 2CEF             >//              ______________________________________________________________________
1072+ 2CEF             >//              Heap part
1072+ 2CEF             >
1072+ 2CEF             >
1072+ 2CEF             >                org     (Heap_Ptr & $1FFF) + $E000
1072+ E7F5             >
1072+ E7F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ E7F5             >Latest_Definition defl  Heap_Ptr
1072+ E7F5             >
1072+ E7F5             >                // dummy db directives used to calculate length of namec
1072+ E7F5 51 55 45 52 >                db      "QUERY"
1072+ E7F9 59          >
1072+ E7FA             >len_NFA         defl    $ - temp_NFA
1072+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ E7F5             >
1072+ E7F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ E7F6 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1072+ E7FA 59          >
1072+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1072+ E7FA D9          >                db      {b $} | END_BIT     // msb as name end
1072+ E7FB             >
1072+ E7FB EA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1072+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1072+ E7FD             >
1072+ E7FD             >mirror_Ptr      defl    $
1072+ E7FD             >
1072+ E7FD F1 2C       >                dw      Dict_Ptr + 2        // xt
1072+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1072+ E7FF             >
1072+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1072+ E7FF             >
1072+ E7FF             >//              ______________________________________________________________________
1072+ E7FF             >//              Dictionary part
1072+ E7FF             >
1072+ E7FF             >                org     Dict_Ptr
1072+ 2CEF             >
1072+ 2CEF FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1072+ 2CF1             >
1072+ 2CF1             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 2CF1 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1072+ 2CF4             >
1072+ 2CF4             >
1072+ 2CF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 2CF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 2CF4             >
1072+ 2CF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 2CF4 75 27 1E 26                  dw      TIB, FETCH              // tib @
1074+ 2CF8 3D 20 50 00                  dw      LIT, 80                 // 80
1075+ 2CFC 46 2C 99 25                  dw      ACCEPT, DROP            // accept drop
1076+ 2D00 10 27 B7 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1076+ 2D04 28 26
1077+ 2D06 E9 24                        dw      EXIT                    // ;
1078+ 2D08
1079+ 2D08              //  ______________________________________________________________________
1080+ 2D08              //
1081+ 2D08              // fill        a n c --
1082+ 2D08              // If n > 0, fills n locations starting from address a with the value c.
1083+ 2D08                              New_Def FILL, "FILL", is_code, is_normal
1083+ 2D08             >
1083+ 2D08             >Dict_Ptr        defl    $
1083+ 2D08             >
1083+ 2D08             >//              ______________________________________________________________________
1083+ 2D08             >//              Heap part
1083+ 2D08             >
1083+ 2D08             >
1083+ 2D08             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E7FF             >
1083+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E7FF             >Latest_Definition defl  Heap_Ptr
1083+ E7FF             >
1083+ E7FF             >                // dummy db directives used to calculate length of namec
1083+ E7FF 46 49 4C 4C >                db      "FILL"
1083+ E803             >len_NFA         defl    $ - temp_NFA
1083+ E803             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E7FF             >
1083+ E7FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E800 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1083+ E804             >                org     $-1                 // alter last byte of Name just above to set
1083+ E803 CC          >                db      {b $} | END_BIT     // msb as name end
1083+ E804             >
1083+ E804 F5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E806             >Prev_Ptr        defl    Heap_Ptr
1083+ E806             >
1083+ E806             >mirror_Ptr      defl    $
1083+ E806             >
1083+ E806 0A 2D       >                dw      Dict_Ptr + 2        // xt
1083+ E808             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E808             >
1083+ E808             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E808             >
1083+ E808             >//              ______________________________________________________________________
1083+ E808             >//              Dictionary part
1083+ E808             >
1083+ E808             >                org     Dict_Ptr
1083+ 2D08             >
1083+ 2D08 06 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 2D0A             >
1083+ 2D0A             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 2D0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1083+ 2D0A ~           >
1083+ 2D0A ~           >
1083+ 2D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 2D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 2D0A             >
1083+ 2D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 2D0A D9                           exx
1085+ 2D0B D1                           pop     de                  // de has character
1086+ 2D0C C1                           pop     bc                  // bc has counter
1087+ 2D0D E1                           pop     hl                  // hl has address, save Instruction Pointer
1088+ 2D0E              Fill_Loop:
1089+ 2D0E 78                               ld      a, b
1090+ 2D0F B1                               or      c
1091+ 2D10 28 05                        jr      z, Fill_While_End
1092+ 2D12 73                               ld      (hl), e
1093+ 2D13 0B                               dec     bc
1094+ 2D14 23                               inc     hl
1095+ 2D15 18 F7                        jr      Fill_Loop
1096+ 2D17              Fill_While_End:
1097+ 2D17 D9                           exx
1098+ 2D18                              next
1098+ 2D18 DD E9       >                jp      (ix)
1099+ 2D1A
1100+ 2D1A              //  ______________________________________________________________________
1101+ 2D1A              //
1102+ 2D1A              // erase        a n --
1103+ 2D1A              // If n > 0, fills n locations starting from address a with 'nul' characters.
1104+ 2D1A                              Colon_Def ERASE, "ERASE", is_normal
1104+ 2D1A             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1104+ 2D1A             >
1104+ 2D1A             >Dict_Ptr        defl    $
1104+ 2D1A             >
1104+ 2D1A             >//              ______________________________________________________________________
1104+ 2D1A             >//              Heap part
1104+ 2D1A             >
1104+ 2D1A             >
1104+ 2D1A             >                org     (Heap_Ptr & $1FFF) + $E000
1104+ E808             >
1104+ E808             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1104+ E808             >Latest_Definition defl  Heap_Ptr
1104+ E808             >
1104+ E808             >                // dummy db directives used to calculate length of namec
1104+ E808 45 52 41 53 >                db      "ERASE"
1104+ E80C 45          >
1104+ E80D             >len_NFA         defl    $ - temp_NFA
1104+ E80D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1104+ E808             >
1104+ E808 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1104+ E809 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1104+ E80D 45          >
1104+ E80E             >                org     $-1                 // alter last byte of Name just above to set
1104+ E80D C5          >                db      {b $} | END_BIT     // msb as name end
1104+ E80E             >
1104+ E80E FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1104+ E810             >Prev_Ptr        defl    Heap_Ptr
1104+ E810             >
1104+ E810             >mirror_Ptr      defl    $
1104+ E810             >
1104+ E810 1C 2D       >                dw      Dict_Ptr + 2        // xt
1104+ E812             >Heap_Ptr        defl    $ - $E000           // save current HP
1104+ E812             >
1104+ E812             >Current_HP      defl  $ - $E000             // used to set HP once!
1104+ E812             >
1104+ E812             >//              ______________________________________________________________________
1104+ E812             >//              Dictionary part
1104+ E812             >
1104+ E812             >                org     Dict_Ptr
1104+ 2D1A             >
1104+ 2D1A 10 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1104+ 2D1C             >
1104+ 2D1C             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1104+ 2D1C CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1104+ 2D1F             >
1104+ 2D1F             >
1104+ 2D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1104+ 2D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1104+ 2D1F             >
1104+ 2D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1105+ 2D1F 10 27 0A 2D                  dw      ZERO, FILL              // 0 fill
1106+ 2D23 E9 24                        dw      EXIT                    // ;
1107+ 2D25
1108+ 2D25              //  ______________________________________________________________________
1109+ 2D25              //
1110+ 2D25              // blank        a n --
1111+ 2D25              // If n > 0, fills n locations starting from address a with 'nul' characters.
1112+ 2D25                              Colon_Def BLANK, "BLANK", is_normal
1112+ 2D25             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1112+ 2D25             >
1112+ 2D25             >Dict_Ptr        defl    $
1112+ 2D25             >
1112+ 2D25             >//              ______________________________________________________________________
1112+ 2D25             >//              Heap part
1112+ 2D25             >
1112+ 2D25             >
1112+ 2D25             >                org     (Heap_Ptr & $1FFF) + $E000
1112+ E812             >
1112+ E812             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ E812             >Latest_Definition defl  Heap_Ptr
1112+ E812             >
1112+ E812             >                // dummy db directives used to calculate length of namec
1112+ E812 42 4C 41 4E >                db      "BLANK"
1112+ E816 4B          >
1112+ E817             >len_NFA         defl    $ - temp_NFA
1112+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ E812             >
1112+ E812 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ E813 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1112+ E817 4B          >
1112+ E818             >                org     $-1                 // alter last byte of Name just above to set
1112+ E817 CB          >                db      {b $} | END_BIT     // msb as name end
1112+ E818             >
1112+ E818 08 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1112+ E81A             >Prev_Ptr        defl    Heap_Ptr
1112+ E81A             >
1112+ E81A             >mirror_Ptr      defl    $
1112+ E81A             >
1112+ E81A 27 2D       >                dw      Dict_Ptr + 2        // xt
1112+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1112+ E81C             >
1112+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1112+ E81C             >
1112+ E81C             >//              ______________________________________________________________________
1112+ E81C             >//              Dictionary part
1112+ E81C             >
1112+ E81C             >                org     Dict_Ptr
1112+ 2D25             >
1112+ 2D25 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1112+ 2D27             >
1112+ 2D27             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 2D27 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1112+ 2D2A             >
1112+ 2D2A             >
1112+ 2D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 2D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 2D2A             >
1112+ 2D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 2D2A 33 27 0A 2D                  dw      BL, FILL                // bl fill
1114+ 2D2E E9 24                        dw      EXIT                    // ;
1115+ 2D30
1116+ 2D30              //  ______________________________________________________________________
1117+ 2D30              //
1118+ 2D30              // hold         c --
1119+ 2D30              // Used between <# and #> to insert a character c in numeric formatting.
1120+ 2D30                              Colon_Def HOLD, "HOLD", is_normal
1120+ 2D30             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1120+ 2D30             >
1120+ 2D30             >Dict_Ptr        defl    $
1120+ 2D30             >
1120+ 2D30             >//              ______________________________________________________________________
1120+ 2D30             >//              Heap part
1120+ 2D30             >
1120+ 2D30             >
1120+ 2D30             >                org     (Heap_Ptr & $1FFF) + $E000
1120+ E81C             >
1120+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ E81C             >Latest_Definition defl  Heap_Ptr
1120+ E81C             >
1120+ E81C             >                // dummy db directives used to calculate length of namec
1120+ E81C 48 4F 4C 44 >                db      "HOLD"
1120+ E820             >len_NFA         defl    $ - temp_NFA
1120+ E820             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ E81C             >
1120+ E81C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ E81D 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1120+ E821             >                org     $-1                 // alter last byte of Name just above to set
1120+ E820 C4          >                db      {b $} | END_BIT     // msb as name end
1120+ E821             >
1120+ E821 12 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1120+ E823             >Prev_Ptr        defl    Heap_Ptr
1120+ E823             >
1120+ E823             >mirror_Ptr      defl    $
1120+ E823             >
1120+ E823 32 2D       >                dw      Dict_Ptr + 2        // xt
1120+ E825             >Heap_Ptr        defl    $ - $E000           // save current HP
1120+ E825             >
1120+ E825             >Current_HP      defl  $ - $E000             // used to set HP once!
1120+ E825             >
1120+ E825             >//              ______________________________________________________________________
1120+ E825             >//              Dictionary part
1120+ E825             >
1120+ E825             >                org     Dict_Ptr
1120+ 2D30             >
1120+ 2D30 23 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1120+ 2D32             >
1120+ 2D32             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 2D32 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 2D35             >
1120+ 2D35             >
1120+ 2D35             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 2D35             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 2D35             >
1120+ 2D35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 2D35 2C 27                        dw      NEG_ONE                 // -1
1122+ 2D37 FF 27 06 26                  dw      HLD, PLUSSTORE          // hld +!
1123+ 2D3B FF 27 1E 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1123+ 2D3F 3C 26
1124+ 2D41 E9 24                        dw      EXIT                    // ;
1125+ 2D43
1126+ 2D43              //  ______________________________________________________________________
1127+ 2D43              //
1128+ 2D43              // pad         -- a
1129+ 2D43              // leaves the buffer text address. This is at a fixed distance over HERE.
1130+ 2D43                              Colon_Def PAD, "PAD", is_normal
1130+ 2D43             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1130+ 2D43             >
1130+ 2D43             >Dict_Ptr        defl    $
1130+ 2D43             >
1130+ 2D43             >//              ______________________________________________________________________
1130+ 2D43             >//              Heap part
1130+ 2D43             >
1130+ 2D43             >
1130+ 2D43             >                org     (Heap_Ptr & $1FFF) + $E000
1130+ E825             >
1130+ E825             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ E825             >Latest_Definition defl  Heap_Ptr
1130+ E825             >
1130+ E825             >                // dummy db directives used to calculate length of namec
1130+ E825 50 41 44    >                db      "PAD"
1130+ E828             >len_NFA         defl    $ - temp_NFA
1130+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ E825             >
1130+ E825 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ E826 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1130+ E829             >                org     $-1                 // alter last byte of Name just above to set
1130+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1130+ E829             >
1130+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1130+ E82B             >Prev_Ptr        defl    Heap_Ptr
1130+ E82B             >
1130+ E82B             >mirror_Ptr      defl    $
1130+ E82B             >
1130+ E82B 45 2D       >                dw      Dict_Ptr + 2        // xt
1130+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1130+ E82D             >
1130+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1130+ E82D             >
1130+ E82D             >//              ______________________________________________________________________
1130+ E82D             >//              Dictionary part
1130+ E82D             >
1130+ E82D             >                org     Dict_Ptr
1130+ 2D43             >
1130+ 2D43 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1130+ 2D45             >
1130+ 2D45             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 2D45 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1130+ 2D48             >
1130+ 2D48             >
1130+ 2D48             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 2D48             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 2D48             >
1130+ 2D48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 2D48 35 28                        dw      HERE                    // here
1132+ 2D4A 3D 20 44 00                  dw      LIT, 68                 // 68
1133+ 2D4E 36 25                        dw      PLUS                    // +
1134+ 2D50 E9 24                        dw      EXIT                    // ;
1135+ 2D52
1136+ 2D52              //  ______________________________________________________________________
1137+ 2D52              //
1138+ 2D52              // word         c -- a
1139+ 2D52              // reads characters from input streams until it encouners a c delimiter.
1140+ 2D52              // Stores that packet so it starts from HERE
1141+ 2D52              // WORD leaves a counter as first byte and ends the packet with two spaces.
1142+ 2D52              // Other occurrences of c are ignored.
1143+ 2D52              // If BLK is zero, text is taken from terminal buffer TIB.
1144+ 2D52              // Otherwise text is taken from the disk-block given by BLK.
1145+ 2D52              // "in" variable is incremented of the number of character read.
1146+ 2D52              // The number of characters read is given by ENCLOSE.
1147+ 2D52                              Colon_Def WORD, "WORD", is_normal
1147+ 2D52             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1147+ 2D52             >
1147+ 2D52             >Dict_Ptr        defl    $
1147+ 2D52             >
1147+ 2D52             >//              ______________________________________________________________________
1147+ 2D52             >//              Heap part
1147+ 2D52             >
1147+ 2D52             >
1147+ 2D52             >                org     (Heap_Ptr & $1FFF) + $E000
1147+ E82D             >
1147+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ E82D             >Latest_Definition defl  Heap_Ptr
1147+ E82D             >
1147+ E82D             >                // dummy db directives used to calculate length of namec
1147+ E82D 57 4F 52 44 >                db      "WORD"
1147+ E831             >len_NFA         defl    $ - temp_NFA
1147+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ E82D             >
1147+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ E82E 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1147+ E832             >                org     $-1                 // alter last byte of Name just above to set
1147+ E831 C4          >                db      {b $} | END_BIT     // msb as name end
1147+ E832             >
1147+ E832 25 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1147+ E834             >Prev_Ptr        defl    Heap_Ptr
1147+ E834             >
1147+ E834             >mirror_Ptr      defl    $
1147+ E834             >
1147+ E834 54 2D       >                dw      Dict_Ptr + 2        // xt
1147+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1147+ E836             >
1147+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1147+ E836             >
1147+ E836             >//              ______________________________________________________________________
1147+ E836             >//              Dictionary part
1147+ E836             >
1147+ E836             >                org     Dict_Ptr
1147+ 2D52             >
1147+ 2D52 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1147+ 2D54             >
1147+ 2D54             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 2D54 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 2D57             >
1147+ 2D57             >
1147+ 2D57             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 2D57             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 2D57             >
1147+ 2D57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 2D57 B1 27 1E 26                  dw      BLK, FETCH              // blk @
1149+ 2D5B                                                              // if
1150+ 2D5B 8D 20                        dw      ZBRANCH
1151+ 2D5D 0C 00                        dw      Word_Else - $
1152+ 2D5F B1 27 1E 26                  dw          BLK, FETCH          //      blk @
1153+ 2D63 1E 37                        dw          BLOCK               //      block ( forward )
1154+ 2D65                                                              // else
1155+ 2D65 89 20                        dw      BRANCH
1156+ 2D67 06 00                        dw      Word_Endif - $
1157+ 2D69              Word_Else:
1158+ 2D69 75 27 1E 26                  dw         TIB, FETCH           //      tib @
1159+ 2D6D              Word_Endif:                                     // endif
1160+ 2D6D B7 27 1E 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1160+ 2D71 36 25
1161+ 2D73 AD 25 BA 21                  dw      SWAP, ENCLOSE           // swap enclose
1162+ 2D77 35 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1162+ 2D7B 22 00 27 2D
1163+ 2D7F B7 27 06 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1164+ 2D83 90 25 74 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1164+ 2D87 F3 24
1165+ 2D89 09 25 35 28                  dw      R_OP, HERE, CSTORE      // r here c!
1165+ 2D8D 3C 26
1166+ 2D8F 36 25                        dw      PLUS                    // +
1167+ 2D91 35 28 4F 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1167+ 2D95 FE 24
1168+ 2D97 2E 24                        dw      CMOVE                   // cmove
1169+ 2D99 35 28                        dw      HERE                    // here
1170+ 2D9B E9 24                        dw      EXIT                    // ;
1171+ 2D9D
1172+ 2D9D              //  ______________________________________________________________________
1173+ 2D9D              //
1174+ 2D9D              // (.")         --
1175+ 2D9D              // Direct procedure compiled by ." and  .(  It executes TYPE.
1176+ 2D9D                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1176+ 2D9D             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1176+ 2D9D             >
1176+ 2D9D             >Dict_Ptr        defl    $
1176+ 2D9D             >
1176+ 2D9D             >//              ______________________________________________________________________
1176+ 2D9D             >//              Heap part
1176+ 2D9D             >
1176+ 2D9D             >
1176+ 2D9D             >                org     (Heap_Ptr & $1FFF) + $E000
1176+ E836             >
1176+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ E836             >Latest_Definition defl  Heap_Ptr
1176+ E836             >
1176+ E836             >                // dummy db directives used to calculate length of namec
1176+ E836 28 2E 22 29 >                db      '(.")'
1176+ E83A             >len_NFA         defl    $ - temp_NFA
1176+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ E836             >
1176+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ E837 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1176+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1176+ E83A A9          >                db      {b $} | END_BIT     // msb as name end
1176+ E83B             >
1176+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1176+ E83D             >Prev_Ptr        defl    Heap_Ptr
1176+ E83D             >
1176+ E83D             >mirror_Ptr      defl    $
1176+ E83D             >
1176+ E83D 9F 2D       >                dw      Dict_Ptr + 2        // xt
1176+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1176+ E83F             >
1176+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1176+ E83F             >
1176+ E83F             >//              ______________________________________________________________________
1176+ E83F             >//              Dictionary part
1176+ E83F             >
1176+ E83F             >                org     Dict_Ptr
1176+ 2D9D             >
1176+ 2D9D 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1176+ 2D9F             >
1176+ 2D9F             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 2D9F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1176+ 2DA2             >
1176+ 2DA2             >
1176+ 2DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 2DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 2DA2             >
1176+ 2DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 2DA2 09 25 AE 2B                  dw      R_OP, COUNT             // r count
1178+ 2DA6 B4 25 4F 25                  dw      DUP, ONE_PLUS           // dup 1+
1179+ 2DAA FE 24 36 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1179+ 2DAE F3 24
1180+ 2DB0 02 2C                        dw      TYPE                    // type
1181+ 2DB2 E9 24                        dw      EXIT                    // ;
1182+ 2DB4
1183+ 2DB4              //  ______________________________________________________________________
1184+ 2DB4              //
1185+ 2DB4              // char         -- c
1186+ 2DB4              // get first character from next input word
1187+ 2DB4                              Colon_Def CHAR,  "CHAR", is_normal
1187+ 2DB4             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1187+ 2DB4             >
1187+ 2DB4             >Dict_Ptr        defl    $
1187+ 2DB4             >
1187+ 2DB4             >//              ______________________________________________________________________
1187+ 2DB4             >//              Heap part
1187+ 2DB4             >
1187+ 2DB4             >
1187+ 2DB4             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E83F             >
1187+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E83F             >Latest_Definition defl  Heap_Ptr
1187+ E83F             >
1187+ E83F             >                // dummy db directives used to calculate length of namec
1187+ E83F 43 48 41 52 >                db      "CHAR"
1187+ E843             >len_NFA         defl    $ - temp_NFA
1187+ E843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E83F             >
1187+ E83F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E840 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1187+ E844             >                org     $-1                 // alter last byte of Name just above to set
1187+ E843 D2          >                db      {b $} | END_BIT     // msb as name end
1187+ E844             >
1187+ E844 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E846             >Prev_Ptr        defl    Heap_Ptr
1187+ E846             >
1187+ E846             >mirror_Ptr      defl    $
1187+ E846             >
1187+ E846 B6 2D       >                dw      Dict_Ptr + 2        // xt
1187+ E848             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E848             >
1187+ E848             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E848             >
1187+ E848             >//              ______________________________________________________________________
1187+ E848             >//              Dictionary part
1187+ E848             >
1187+ E848             >                org     Dict_Ptr
1187+ 2DB4             >
1187+ 2DB4 46 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 2DB6             >
1187+ 2DB6             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 2DB6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 2DB9             >
1187+ 2DB9             >
1187+ 2DB9             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 2DB9             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 2DB9             >
1187+ 2DB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 2DB9 33 27 54 2D                  dw      BL, WORD                // bl word
1189+ 2DBD 4F 25 33 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1190+ 2DC1 E9 24                        dw      EXIT                    // ;
1191+ 2DC3
1192+ 2DC3              //  ______________________________________________________________________
1193+ 2DC3              //
1194+ 2DC3              // ,"           --
1195+ 2DC3              // compiles a string terminated by " as a counted string from next input stream
1196+ 2DC3                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1196+ 2DC3             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1196+ 2DC3             >
1196+ 2DC3             >Dict_Ptr        defl    $
1196+ 2DC3             >
1196+ 2DC3             >//              ______________________________________________________________________
1196+ 2DC3             >//              Heap part
1196+ 2DC3             >
1196+ 2DC3             >
1196+ 2DC3             >                org     (Heap_Ptr & $1FFF) + $E000
1196+ E848             >
1196+ E848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ E848             >Latest_Definition defl  Heap_Ptr
1196+ E848             >
1196+ E848             >                // dummy db directives used to calculate length of namec
1196+ E848 2C 22       >                db      ',"'
1196+ E84A             >len_NFA         defl    $ - temp_NFA
1196+ E84A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ E848             >
1196+ E848 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ E849 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1196+ E84B             >                org     $-1                 // alter last byte of Name just above to set
1196+ E84A A2          >                db      {b $} | END_BIT     // msb as name end
1196+ E84B             >
1196+ E84B 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1196+ E84D             >Prev_Ptr        defl    Heap_Ptr
1196+ E84D             >
1196+ E84D             >mirror_Ptr      defl    $
1196+ E84D             >
1196+ E84D C5 2D       >                dw      Dict_Ptr + 2        // xt
1196+ E84F             >Heap_Ptr        defl    $ - $E000           // save current HP
1196+ E84F             >
1196+ E84F             >Current_HP      defl  $ - $E000             // used to set HP once!
1196+ E84F             >
1196+ E84F             >//              ______________________________________________________________________
1196+ E84F             >//              Dictionary part
1196+ E84F             >
1196+ E84F             >                org     Dict_Ptr
1196+ 2DC3             >
1196+ 2DC3 4D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1196+ 2DC5             >
1196+ 2DC5             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 2DC5 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1196+ 2DC8             >
1196+ 2DC8             >
1196+ 2DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 2DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 2DC8             >
1196+ 2DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 2DC8 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1198+ 2DCC 54 2D                        dw      WORD                    // word
1199+ 2DCE 33 26 4F 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1200+ 2DD2 40 28                        dw      ALLOT                   // allot
1201+ 2DD4 10 27 5A 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1202+ 2DD8 E9 24                        dw      EXIT
1203+ 2DDA
1204+ 2DDA              //  ______________________________________________________________________
1205+ 2DDA              //
1206+ 2DDA              // .c           c --
1207+ 2DDA              // intermediate general purpose string builder, used by ." and .(
1208+ 2DDA                              Colon_Def DOT_C,  ".C", is_immediate
1208+ 2DDA             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1208+ 2DDA             >
1208+ 2DDA             >Dict_Ptr        defl    $
1208+ 2DDA             >
1208+ 2DDA             >//              ______________________________________________________________________
1208+ 2DDA             >//              Heap part
1208+ 2DDA             >
1208+ 2DDA             >
1208+ 2DDA             >                org     (Heap_Ptr & $1FFF) + $E000
1208+ E84F             >
1208+ E84F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ E84F             >Latest_Definition defl  Heap_Ptr
1208+ E84F             >
1208+ E84F             >                // dummy db directives used to calculate length of namec
1208+ E84F 2E 43       >                db      ".C"
1208+ E851             >len_NFA         defl    $ - temp_NFA
1208+ E851             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ E84F             >
1208+ E84F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ E850 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1208+ E852             >                org     $-1                 // alter last byte of Name just above to set
1208+ E851 C3          >                db      {b $} | END_BIT     // msb as name end
1208+ E852             >
1208+ E852 48 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1208+ E854             >Prev_Ptr        defl    Heap_Ptr
1208+ E854             >
1208+ E854             >mirror_Ptr      defl    $
1208+ E854             >
1208+ E854 DC 2D       >                dw      Dict_Ptr + 2        // xt
1208+ E856             >Heap_Ptr        defl    $ - $E000           // save current HP
1208+ E856             >
1208+ E856             >Current_HP      defl  $ - $E000             // used to set HP once!
1208+ E856             >
1208+ E856             >//              ______________________________________________________________________
1208+ E856             >//              Dictionary part
1208+ E856             >
1208+ E856             >                org     Dict_Ptr
1208+ 2DDA             >
1208+ 2DDA 54 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1208+ 2DDC             >
1208+ 2DDC             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 2DDC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1208+ 2DDF             >
1208+ 2DDF             >
1208+ 2DDF             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 2DDF             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 2DDF             >
1208+ 2DDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 2DDF DB 27 1E 26                  dw      STATE, FETCH            // state @
1210+ 2DE3                                                              // if
1211+ 2DE3 8D 20                        dw      ZBRANCH
1212+ 2DE5 12 00                        dw      Dot_C_Else - $
1213+ 2DE7 D9 2A 9F 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1214+ 2DEB 54 2D 33 26                  dw          WORD, CFETCH        //      word c@
1215+ 2DEF 4F 25 40 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1216+ 2DF3                                                              // else
1217+ 2DF3 89 20                        dw      BRANCH
1218+ 2DF5 08 00                        dw      Dot_C_Endif - $
1219+ 2DF7              Dot_C_Else:
1220+ 2DF7 54 2D AE 2B                  dw          WORD, COUNT, TYPE   //      word count type
1220+ 2DFB 02 2C
1221+ 2DFD              Dot_C_Endif:                                    // endif
1222+ 2DFD E9 24                        dw      EXIT                    ;
1223+ 2DFF
1224+ 2DFF              //  ______________________________________________________________________
1225+ 2DFF              //
1226+ 2DFF              // ."           c --
1227+ 2DFF                              Colon_Def DOT_QUOTE,  '."', is_immediate
1227+ 2DFF             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1227+ 2DFF             >
1227+ 2DFF             >Dict_Ptr        defl    $
1227+ 2DFF             >
1227+ 2DFF             >//              ______________________________________________________________________
1227+ 2DFF             >//              Heap part
1227+ 2DFF             >
1227+ 2DFF             >
1227+ 2DFF             >                org     (Heap_Ptr & $1FFF) + $E000
1227+ E856             >
1227+ E856             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ E856             >Latest_Definition defl  Heap_Ptr
1227+ E856             >
1227+ E856             >                // dummy db directives used to calculate length of namec
1227+ E856 2E 22       >                db      '."'
1227+ E858             >len_NFA         defl    $ - temp_NFA
1227+ E858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ E856             >
1227+ E856 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ E857 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1227+ E859             >                org     $-1                 // alter last byte of Name just above to set
1227+ E858 A2          >                db      {b $} | END_BIT     // msb as name end
1227+ E859             >
1227+ E859 4F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1227+ E85B             >Prev_Ptr        defl    Heap_Ptr
1227+ E85B             >
1227+ E85B             >mirror_Ptr      defl    $
1227+ E85B             >
1227+ E85B 01 2E       >                dw      Dict_Ptr + 2        // xt
1227+ E85D             >Heap_Ptr        defl    $ - $E000           // save current HP
1227+ E85D             >
1227+ E85D             >Current_HP      defl  $ - $E000             // used to set HP once!
1227+ E85D             >
1227+ E85D             >//              ______________________________________________________________________
1227+ E85D             >//              Dictionary part
1227+ E85D             >
1227+ E85D             >                org     Dict_Ptr
1227+ 2DFF             >
1227+ 2DFF 5B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1227+ 2E01             >
1227+ 2E01             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 2E01 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 2E04             >
1227+ 2E04             >
1227+ 2E04             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 2E04             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 2E04             >
1227+ 2E04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 2E04 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1229+ 2E08 DC 2D                        dw      DOT_C                   // [compile] .c
1230+ 2E0A E9 24                        dw      EXIT                    // ; immediate
1231+ 2E0C
1232+ 2E0C              //  ______________________________________________________________________
1233+ 2E0C              //
1234+ 2E0C              // .(           c --
1235+ 2E0C                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1235+ 2E0C             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1235+ 2E0C             >
1235+ 2E0C             >Dict_Ptr        defl    $
1235+ 2E0C             >
1235+ 2E0C             >//              ______________________________________________________________________
1235+ 2E0C             >//              Heap part
1235+ 2E0C             >
1235+ 2E0C             >
1235+ 2E0C             >                org     (Heap_Ptr & $1FFF) + $E000
1235+ E85D             >
1235+ E85D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1235+ E85D             >Latest_Definition defl  Heap_Ptr
1235+ E85D             >
1235+ E85D             >                // dummy db directives used to calculate length of namec
1235+ E85D 2E 28       >                db      ".("
1235+ E85F             >len_NFA         defl    $ - temp_NFA
1235+ E85F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1235+ E85D             >
1235+ E85D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1235+ E85E 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1235+ E860             >                org     $-1                 // alter last byte of Name just above to set
1235+ E85F A8          >                db      {b $} | END_BIT     // msb as name end
1235+ E860             >
1235+ E860 56 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1235+ E862             >Prev_Ptr        defl    Heap_Ptr
1235+ E862             >
1235+ E862             >mirror_Ptr      defl    $
1235+ E862             >
1235+ E862 0E 2E       >                dw      Dict_Ptr + 2        // xt
1235+ E864             >Heap_Ptr        defl    $ - $E000           // save current HP
1235+ E864             >
1235+ E864             >Current_HP      defl  $ - $E000             // used to set HP once!
1235+ E864             >
1235+ E864             >//              ______________________________________________________________________
1235+ E864             >//              Dictionary part
1235+ E864             >
1235+ E864             >                org     Dict_Ptr
1235+ 2E0C             >
1235+ 2E0C 62 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1235+ 2E0E             >
1235+ 2E0E             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1235+ 2E0E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1235+ 2E11             >
1235+ 2E11             >
1235+ 2E11             >                endif           ; ok        // for other definitions it "points" the correct handler
1235+ 2E11             >                // Use of "; ok" to suppress "warning[fwdref]"
1235+ 2E11             >
1235+ 2E11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1236+ 2E11 3D 20 29 00                  dw      LIT, ")"                // [char] )
1237+ 2E15 DC 2D                        dw      DOT_C                   // [compile] .c
1238+ 2E17 E9 24                        dw      EXIT                    // ; immediate
1239+ 2E19
1240+ 2E19              //  ______________________________________________________________________
1241+ 2E19              //
1242+ 2E19              // (sgn)        a -- a f
1243+ 2E19              // determines if char in addr a is a sign (+ or -), and in that case increments
1244+ 2E19              // a flag. Returns f as the sign, true for negative, false for positive.
1245+ 2E19              // called by NUMBER and (EXP)
1246+ 2E19                              Colon_Def CSGN,  "(SGN)", is_normal
1246+ 2E19             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1246+ 2E19             >
1246+ 2E19             >Dict_Ptr        defl    $
1246+ 2E19             >
1246+ 2E19             >//              ______________________________________________________________________
1246+ 2E19             >//              Heap part
1246+ 2E19             >
1246+ 2E19             >
1246+ 2E19             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E864             >
1246+ E864             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E864             >Latest_Definition defl  Heap_Ptr
1246+ E864             >
1246+ E864             >                // dummy db directives used to calculate length of namec
1246+ E864 28 53 47 4E >                db      "(SGN)"
1246+ E868 29          >
1246+ E869             >len_NFA         defl    $ - temp_NFA
1246+ E869             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E864             >
1246+ E864 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E865 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1246+ E869 29          >
1246+ E86A             >                org     $-1                 // alter last byte of Name just above to set
1246+ E869 A9          >                db      {b $} | END_BIT     // msb as name end
1246+ E86A             >
1246+ E86A 5D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E86C             >Prev_Ptr        defl    Heap_Ptr
1246+ E86C             >
1246+ E86C             >mirror_Ptr      defl    $
1246+ E86C             >
1246+ E86C 1B 2E       >                dw      Dict_Ptr + 2        // xt
1246+ E86E             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E86E             >
1246+ E86E             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E86E             >
1246+ E86E             >//              ______________________________________________________________________
1246+ E86E             >//              Dictionary part
1246+ E86E             >
1246+ E86E             >                org     Dict_Ptr
1246+ 2E19             >
1246+ 2E19 6C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 2E1B             >
1246+ 2E1B             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 2E1B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 2E1E             >
1246+ 2E1E             >
1246+ 2E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 2E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 2E1E             >
1246+ 2E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 2E1E B4 25 4F 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1247+ 2E22 33 26
1248+ 2E24 B4 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1248+ 2E28 2D 00 80 28
1249+ 2E2C                                                              // if
1250+ 2E2C 8D 20                        dw      ZBRANCH
1251+ 2E2E 12 00                        dw      CSgn_Else_0 - $
1252+ 2E30 99 25                        dw          DROP                //      drop
1253+ 2E32 4F 25                        dw          ONE_PLUS            //      1+
1254+ 2E34 17 27 E7 27                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1254+ 2E38 06 26
1255+ 2E3A 17 27                        dw          ONE                 //      1
1256+ 2E3C                                                              // else
1257+ 2E3C 89 20                        dw      BRANCH
1258+ 2E3E 16 00                        dw      CSgn_Endif_0 - $
1259+ 2E40              CSgn_Else_0:
1260+ 2E40 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1260+ 2E44 80 28
1261+ 2E46                                                              //      if
1262+ 2E46 8D 20                        dw          ZBRANCH
1263+ 2E48 0A 00                        dw          CSgn_Endif_1 - $
1264+ 2E4A 4F 25                        dw              ONE_PLUS        //          1+
1265+ 2E4C 17 27 E7 27                  dw              ONE, DPL        //          1 dpl
1266+ 2E50 06 26                        dw              PLUSSTORE       //          +!
1267+ 2E52              CSgn_Endif_1                                    //      endif
1268+ 2E52 10 27                        dw          ZERO                //      0
1269+ 2E54              CSgn_Endif_0:                                   // endif
1270+ 2E54 E9 24                        dw      EXIT
1271+ 2E56
1272+ 2E56              //  ______________________________________________________________________
1273+ 2E56              //
1274+ 2E56              // (number)     d a -- d1 a1
1275+ 2E56              // using the current BASE parse characters stored in address a
1276+ 2E56              // accumulating a double precision integer d
1277+ 2E56              // the process stops at the first not-convertible character
1278+ 2E56              // A double-number is kept in CPU registers as HLDE.
1279+ 2E56              // On the stack a double number is treated as two single numbers
1280+ 2E56              // where HL is on the top of the stack and DE is the second from top,
1281+ 2E56              // so in the stack memory it appears as LHED.
1282+ 2E56              // Instead, in 2VARIABLE a double number is stored as EDLH.
1283+ 2E56                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1283+ 2E56             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1283+ 2E56             >
1283+ 2E56             >Dict_Ptr        defl    $
1283+ 2E56             >
1283+ 2E56             >//              ______________________________________________________________________
1283+ 2E56             >//              Heap part
1283+ 2E56             >
1283+ 2E56             >
1283+ 2E56             >                org     (Heap_Ptr & $1FFF) + $E000
1283+ E86E             >
1283+ E86E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ E86E             >Latest_Definition defl  Heap_Ptr
1283+ E86E             >
1283+ E86E             >                // dummy db directives used to calculate length of namec
1283+ E86E 28 4E 55 4D >                db      "(NUMBER)"
1283+ E872 42 45 52 29 >
1283+ E876             >len_NFA         defl    $ - temp_NFA
1283+ E876             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ E86E             >
1283+ E86E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ E86F 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1283+ E873 42 45 52 29 >
1283+ E877             >                org     $-1                 // alter last byte of Name just above to set
1283+ E876 A9          >                db      {b $} | END_BIT     // msb as name end
1283+ E877             >
1283+ E877 64 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1283+ E879             >Prev_Ptr        defl    Heap_Ptr
1283+ E879             >
1283+ E879             >mirror_Ptr      defl    $
1283+ E879             >
1283+ E879 58 2E       >                dw      Dict_Ptr + 2        // xt
1283+ E87B             >Heap_Ptr        defl    $ - $E000           // save current HP
1283+ E87B             >
1283+ E87B             >Current_HP      defl  $ - $E000             // used to set HP once!
1283+ E87B             >
1283+ E87B             >//              ______________________________________________________________________
1283+ E87B             >//              Dictionary part
1283+ E87B             >
1283+ E87B             >                org     Dict_Ptr
1283+ 2E56             >
1283+ 2E56 79 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1283+ 2E58             >
1283+ 2E58             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 2E58 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 2E5B             >
1283+ 2E5B             >
1283+ 2E5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 2E5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 2E5B             >
1283+ 2E5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 2E5B                                                              // begin
1285+ 2E5B              CNumber_Begin:
1286+ 2E5B 4F 25                        dw          ONE_PLUS            //      1+
1287+ 2E5D B4 25 F3 24                  dw          DUP, TO_R           //      dup >r
1288+ 2E61 33 26                        dw          CFETCH              //      @
1289+ 2E63 E1 27 1E 26                  dw          BASE, FETCH         //      base @
1290+ 2E67 DF 20                        dw          DIGIT               //      digit
1291+ 2E69                                                              // while
1292+ 2E69 8D 20                        dw      ZBRANCH
1293+ 2E6B 2C 00                        dw      CNumber_While_end - $
1294+ 2E6D AD 25                        dw          SWAP                //      swap
1295+ 2E6F E1 27 1E 26                  dw          BASE, FETCH         //      base @
1296+ 2E73 51 24                        dw          UM_MUL              //      um*
1297+ 2E75 99 25 BB 25                  dw          DROP, ROT           //      drop rot
1298+ 2E79 E1 27 1E 26                  dw          BASE, FETCH         //      base @
1299+ 2E7D 51 24                        dw          UM_MUL              //      um*
1300+ 2E7F 40 25                        dw          DPLUS               //      d+
1301+ 2E81 E7 27 1E 26                  dw          DPL, FETCH          //      dpl @
1302+ 2E85 4F 25                        dw          ONE_PLUS            //      1+
1303+ 2E87                                                              //      if
1304+ 2E87 8D 20                        dw          ZBRANCH
1305+ 2E89 08 00                        dw          CNumber_Endif - $
1306+ 2E8B 17 27 E7 27                  dw              ONE, DPL        //          1 dpl
1307+ 2E8F 06 26                        dw              PLUSSTORE       //          +!
1308+ 2E91              CNumber_Endif:                                  //      endif
1309+ 2E91 FE 24                        dw             R_TO             //      r>  ( balance rp )
1310+ 2E93 89 20                        dw      BRANCH
1311+ 2E95 C6 FF                        dw      CNumber_Begin - $
1312+ 2E97              CNumber_While_end:                              // repeat
1313+ 2E97 FE 24                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1314+ 2E99 E9 24                        dw      EXIT                    // ;
1315+ 2E9B
1316+ 2E9B              //  ______________________________________________________________________
1317+ 2E9B              //
1318+ 2E9B              // (prefix)
1319+ 2E9B                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1319+ 2E9B             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1319+ 2E9B             >
1319+ 2E9B             >Dict_Ptr        defl    $
1319+ 2E9B             >
1319+ 2E9B             >//              ______________________________________________________________________
1319+ 2E9B             >//              Heap part
1319+ 2E9B             >
1319+ 2E9B             >
1319+ 2E9B             >                org     (Heap_Ptr & $1FFF) + $E000
1319+ E87B             >
1319+ E87B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ E87B             >Latest_Definition defl  Heap_Ptr
1319+ E87B             >
1319+ E87B             >                // dummy db directives used to calculate length of namec
1319+ E87B 28 50 52 45 >                db      "(PREFIX)"
1319+ E87F 46 49 58 29 >
1319+ E883             >len_NFA         defl    $ - temp_NFA
1319+ E883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ E87B             >
1319+ E87B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ E87C 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1319+ E880 46 49 58 29 >
1319+ E884             >                org     $-1                 // alter last byte of Name just above to set
1319+ E883 A9          >                db      {b $} | END_BIT     // msb as name end
1319+ E884             >
1319+ E884 6E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1319+ E886             >Prev_Ptr        defl    Heap_Ptr
1319+ E886             >
1319+ E886             >mirror_Ptr      defl    $
1319+ E886             >
1319+ E886 9D 2E       >                dw      Dict_Ptr + 2        // xt
1319+ E888             >Heap_Ptr        defl    $ - $E000           // save current HP
1319+ E888             >
1319+ E888             >Current_HP      defl  $ - $E000             // used to set HP once!
1319+ E888             >
1319+ E888             >//              ______________________________________________________________________
1319+ E888             >//              Dictionary part
1319+ E888             >
1319+ E888             >                org     Dict_Ptr
1319+ 2E9B             >
1319+ 2E9B 86 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1319+ 2E9D             >
1319+ 2E9D             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 2E9D CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1319+ 2EA0             >
1319+ 2EA0             >
1319+ 2EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 2EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 2EA0             >
1319+ 2EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 2EA0 B4 25 4F 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1320+ 2EA4 33 26
1321+ 2EA6 B4 25 F3 24                  dw      DUP, TO_R               // dup >r
1322+ 2EAA 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1322+ 2EAE 80 28
1323+ 2EB0                                                              // if
1324+ 2EB0 8D 20                        dw      ZBRANCH
1325+ 2EB2 06 00                        dw      CPrefix_Endif_0 - $
1326+ 2EB4 4F 25                        dw          ONE_PLUS            //      1+
1327+ 2EB6 31 2B                        dw          HEX
1328+ 2EB8              CPrefix_Endif_0:                                // endif
1329+ 2EB8 09 25                        dw      R_OP                    // r@
1330+ 2EBA 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1330+ 2EBE 80 28
1331+ 2EC0                                                              // if
1332+ 2EC0 8D 20                        dw      ZBRANCH
1333+ 2EC2 0A 00                        dw      CPrefix_Endif_1 - $
1334+ 2EC4 4F 25                        dw          ONE_PLUS            //      1+
1335+ 2EC6 1E 27                        dw          TWO
1336+ 2EC8 E1 27 28 26                  dw          BASE, STORE         //      2 base !
1337+ 2ECC              CPrefix_Endif_1:                                // endif
1338+ 2ECC FE 24                        dw      R_TO                    // r>
1339+ 2ECE 3D 20 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1339+ 2ED2 80 28
1340+ 2ED4                                                              // if
1341+ 2ED4 8D 20                        dw      ZBRANCH
1342+ 2ED6 06 00                        dw      CPrefix_Endif_2 - $
1343+ 2ED8 4F 25                        dw          ONE_PLUS            //      1+
1344+ 2EDA 40 2B                        dw          DECIMAL
1345+ 2EDC              CPrefix_Endif_2:                                // endif
1346+ 2EDC E9 24                        dw      EXIT
1347+ 2EDE
1348+ 2EDE              //  ______________________________________________________________________
1349+ 2EDE
1350+ 2EDE              PDOM_PTR:
1351+ 2EDE              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1352+ 2EDE 2C 2F 2D 3A                  db ',/-:'
1353+ 2EE2              PCDM_PTR:
1354+ 2EE2              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1355+ 2EE2 2E 2E 2E 2E                  db '....'
1356+ 2EE6
1357+ 2EE6              //  ______________________________________________________________________
1358+ 2EE6              //
1359+ 2EE6              // number       a -- d
1360+ 2EE6                              Colon_Def NUMBER,  "NUMBER", is_normal
1360+ 2EE6             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1360+ 2EE6             >
1360+ 2EE6             >Dict_Ptr        defl    $
1360+ 2EE6             >
1360+ 2EE6             >//              ______________________________________________________________________
1360+ 2EE6             >//              Heap part
1360+ 2EE6             >
1360+ 2EE6             >
1360+ 2EE6             >                org     (Heap_Ptr & $1FFF) + $E000
1360+ E888             >
1360+ E888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1360+ E888             >Latest_Definition defl  Heap_Ptr
1360+ E888             >
1360+ E888             >                // dummy db directives used to calculate length of namec
1360+ E888 4E 55 4D 42 >                db      "NUMBER"
1360+ E88C 45 52       >
1360+ E88E             >len_NFA         defl    $ - temp_NFA
1360+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1360+ E888             >
1360+ E888 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1360+ E889 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1360+ E88D 45 52       >
1360+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1360+ E88E D2          >                db      {b $} | END_BIT     // msb as name end
1360+ E88F             >
1360+ E88F 7B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1360+ E891             >Prev_Ptr        defl    Heap_Ptr
1360+ E891             >
1360+ E891             >mirror_Ptr      defl    $
1360+ E891             >
1360+ E891 E8 2E       >                dw      Dict_Ptr + 2        // xt
1360+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1360+ E893             >
1360+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1360+ E893             >
1360+ E893             >//              ______________________________________________________________________
1360+ E893             >//              Dictionary part
1360+ E893             >
1360+ E893             >                org     Dict_Ptr
1360+ 2EE6             >
1360+ 2EE6 91 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1360+ 2EE8             >
1360+ 2EE8             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1360+ 2EE8 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1360+ 2EEB             >
1360+ 2EEB             >
1360+ 2EEB             >                endif           ; ok        // for other definitions it "points" the correct handler
1360+ 2EEB             >                // Use of "; ok" to suppress "warning[fwdref]"
1360+ 2EEB             >
1360+ 2EEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1361+ 2EEB 10 27 10 27                  dw      ZERO, ZERO              // 0 0
1362+ 2EEF BB 25                        dw      ROT                     // rot
1363+ 2EF1
1364+ 2EF1 E1 27 1E 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1364+ 2EF5 F3 24
1365+ 2EF7 9D 2E                        dw      CPREFIX                 // (prefix)   // ***
1366+ 2EF9
1367+ 2EF9 1B 2E F3 24                  dw      CSGN, TO_R              // (sgn) >r
1368+ 2EFD
1369+ 2EFD 2C 27 E7 27                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1369+ 2F01 28 26
1370+ 2F03 58 2E                        dw      CNUMBER                 // (number)
1371+ 2F05              Number_Begin:                                   // begin
1372+ 2F05 B4 25 33 26                  dw        DUP, CFETCH             // dup c@
1373+ 2F09 F3 24                        dw        TO_R                    // >r
1374+ 2F0B                          //  dw        PCDM, PDOM              //  pcdm pdom
1375+ 2F0B 3D 20 E2 2E                  dw        LIT, PCDM_PTR           //
1376+ 2F0F 3D 20 DE 2E                  dw        LIT, PDOM_PTR           //
1377+ 2F13 3D 20 04 00                  dw        LIT, 4                  //  4
1378+ 2F17 FE 24                        dw        R_TO                    // r>
1379+ 2F19 E8 21                        dw        C_MAP                   // (map)
1380+ 2F1B 10 27 AD 25                  dw        ZERO, SWAP              // 0 swap
1381+ 2F1F 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1381+ 2F23 80 28
1382+ 2F25
1383+ 2F25 8D 20                        dw        ZBRANCH                 // if
1384+ 2F27 0A 00                        dw        Number_Endif_1 - $
1385+ 2F29 10 27 E7 27                  dw          ZERO, DPL, STORE        //      0 dpl !
1385+ 2F2D 28 26
1386+ 2F2F 4F 25                        dw          ONE_PLUS                //      1+
1387+ 2F31              Number_Endif_1:                                   // endif
1388+ 2F31
1389+ 2F31 8D 20                        dw      ZBRANCH                // while
1390+ 2F33 08 00                        dw      Number_While_end - $
1391+ 2F35 58 2E                        dw        CNUMBER                 // (number)
1392+ 2F37 89 20                        dw      BRANCH
1393+ 2F39 CC FF                        dw      Number_Begin - $
1394+ 2F3B              Number_While_end:                               // repeat
1395+ 2F3B
1396+ 2F3B 33 26 33 27                  dw      CFETCH, BL              // c@ bl
1397+ 2F3F 74 28 10 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1397+ 2F43 69 2A
1398+ 2F45 FE 24                        dw      R_TO                    // r>
1399+ 2F47                                                              // if
1400+ 2F47 8D 20                        dw      ZBRANCH
1401+ 2F49 04 00                        dw      Number_Endif_2 - $
1402+ 2F4B 83 25                        dw          DMINUS              //      dminus
1403+ 2F4D              Number_Endif_2:                                 // endif
1404+ 2F4D FE 24 E1 27                  dw      R_TO, BASE, STORE       // r> base !  // ***
1404+ 2F51 28 26
1405+ 2F53 E9 24                        dw      EXIT                    // ;
1406+ 2F55
1407+ 2F55              //  ______________________________________________________________________
1408+ 2F55              //
1409+ 2F55              // twofind      a -- d
1410+ 2F55                              Colon_Def TWOFIND,  "2FIND", is_normal
1410+ 2F55             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1410+ 2F55             >
1410+ 2F55             >Dict_Ptr        defl    $
1410+ 2F55             >
1410+ 2F55             >//              ______________________________________________________________________
1410+ 2F55             >//              Heap part
1410+ 2F55             >
1410+ 2F55             >
1410+ 2F55             >                org     (Heap_Ptr & $1FFF) + $E000
1410+ E893             >
1410+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ E893             >Latest_Definition defl  Heap_Ptr
1410+ E893             >
1410+ E893             >                // dummy db directives used to calculate length of namec
1410+ E893 32 46 49 4E >                db      "2FIND"
1410+ E897 44          >
1410+ E898             >len_NFA         defl    $ - temp_NFA
1410+ E898             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ E893             >
1410+ E893 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ E894 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1410+ E898 44          >
1410+ E899             >                org     $-1                 // alter last byte of Name just above to set
1410+ E898 C4          >                db      {b $} | END_BIT     // msb as name end
1410+ E899             >
1410+ E899 88 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1410+ E89B             >Prev_Ptr        defl    Heap_Ptr
1410+ E89B             >
1410+ E89B             >mirror_Ptr      defl    $
1410+ E89B             >
1410+ E89B 57 2F       >                dw      Dict_Ptr + 2        // xt
1410+ E89D             >Heap_Ptr        defl    $ - $E000           // save current HP
1410+ E89D             >
1410+ E89D             >Current_HP      defl  $ - $E000             // used to set HP once!
1410+ E89D             >
1410+ E89D             >//              ______________________________________________________________________
1410+ E89D             >//              Dictionary part
1410+ E89D             >
1410+ E89D             >                org     Dict_Ptr
1410+ 2F55             >
1410+ 2F55 9B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1410+ 2F57             >
1410+ 2F57             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 2F57 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1410+ 2F5A             >
1410+ 2F5A             >
1410+ 2F5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 2F5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 2F5A             >
1410+ 2F5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 2F5A F3 24 09 25                  dw      TO_R, R_OP              // >r r@
1412+ 2F5E CF 27 1E 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1412+ 2F62 1E 26
1413+ 2F64 4C 21                        dw      C_FIND                  // (find)
1414+ 2F66 D7 28                        dw      QDUP                    // ?dup
1415+ 2F68 0E 25                        dw      ZEQUAL                  // 0=
1416+ 2F6A                                                              // if
1417+ 2F6A 8D 20                        dw      ZBRANCH
1418+ 2F6C 22 00                        dw      LFind_Endif - $
1419+ 2F6E 09 25                        dw          R_OP                //      r@
1420+ 2F70                              // dw          LATEST               //      latest
1421+ 2F70 D5 27 1E 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1421+ 2F74 1E 26
1422+ 2F76 4C 21                        dw          C_FIND              //      (find)
1423+ 2F78
1424+ 2F78 D7 28                            dw      QDUP                    // ?dup
1425+ 2F7A 0E 25                            dw      ZEQUAL                  // 0=
1426+ 2F7C                                                                  // if
1427+ 2F7C 8D 20                            dw      ZBRANCH
1428+ 2F7E 10 00                            dw      LFind_Endif2 - $
1429+ 2F80 09 25                            dw          R_OP                //      r@
1430+ 2F82 3D 20 D2 31                      dw          LIT, FORTH, TO_BODY
1430+ 2F86 E8 29
1431+ 2F88 65 25                            dw          CELL_PLUS //, CELL_PLUS
1432+ 2F8A 1E 26                            dw          FETCH
1433+ 2F8C 4C 21                            dw          C_FIND              //      (find)
1434+ 2F8E              LFind_Endif2:                                    // endif
1435+ 2F8E
1436+ 2F8E
1437+ 2F8E              LFind_Endif:                                    // endif
1438+ 2F8E FE 24 99 25                  dw      R_TO, DROP              // r> drop
1439+ 2F92 E9 24                        dw      EXIT                    // ;
1440+ 2F94
1441+ 2F94              //  ______________________________________________________________________
1442+ 2F94              //
1443+ 2F94              // -find        a -- d
1444+ 2F94                              Colon_Def LFIND,  "-FIND", is_normal
1444+ 2F94             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1444+ 2F94             >
1444+ 2F94             >Dict_Ptr        defl    $
1444+ 2F94             >
1444+ 2F94             >//              ______________________________________________________________________
1444+ 2F94             >//              Heap part
1444+ 2F94             >
1444+ 2F94             >
1444+ 2F94             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E89D             >
1444+ E89D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E89D             >Latest_Definition defl  Heap_Ptr
1444+ E89D             >
1444+ E89D             >                // dummy db directives used to calculate length of namec
1444+ E89D 2D 46 49 4E >                db      "-FIND"
1444+ E8A1 44          >
1444+ E8A2             >len_NFA         defl    $ - temp_NFA
1444+ E8A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E89D             >
1444+ E89D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E89E 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1444+ E8A2 44          >
1444+ E8A3             >                org     $-1                 // alter last byte of Name just above to set
1444+ E8A2 C4          >                db      {b $} | END_BIT     // msb as name end
1444+ E8A3             >
1444+ E8A3 93 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E8A5             >Prev_Ptr        defl    Heap_Ptr
1444+ E8A5             >
1444+ E8A5             >mirror_Ptr      defl    $
1444+ E8A5             >
1444+ E8A5 96 2F       >                dw      Dict_Ptr + 2        // xt
1444+ E8A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E8A7             >
1444+ E8A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E8A7             >
1444+ E8A7             >//              ______________________________________________________________________
1444+ E8A7             >//              Dictionary part
1444+ E8A7             >
1444+ E8A7             >                org     Dict_Ptr
1444+ 2F94             >
1444+ 2F94 A5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 2F96             >
1444+ 2F96             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 2F96 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1444+ 2F99             >
1444+ 2F99             >
1444+ 2F99             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 2F99             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 2F99             >
1444+ 2F99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 2F99 33 27 54 2D                  dw      BL, WORD                // bl word
1446+ 2F9D 57 2F                        dw      TWOFIND                 // 2find
1447+ 2F9F E9 24                        dw      EXIT                    // ;
1448+ 2FA1
1449+ 2FA1              //  ______________________________________________________________________
1450+ 2FA1              //
1451+ 2FA1              // (abort)      --
1452+ 2FA1                              Colon_Def CABORT,  "(ABORT)", is_normal
1452+ 2FA1             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1452+ 2FA1             >
1452+ 2FA1             >Dict_Ptr        defl    $
1452+ 2FA1             >
1452+ 2FA1             >//              ______________________________________________________________________
1452+ 2FA1             >//              Heap part
1452+ 2FA1             >
1452+ 2FA1             >
1452+ 2FA1             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E8A7             >
1452+ E8A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E8A7             >Latest_Definition defl  Heap_Ptr
1452+ E8A7             >
1452+ E8A7             >                // dummy db directives used to calculate length of namec
1452+ E8A7 28 41 42 4F >                db      "(ABORT)"
1452+ E8AB 52 54 29    >
1452+ E8AE             >len_NFA         defl    $ - temp_NFA
1452+ E8AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E8A7             >
1452+ E8A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E8A8 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1452+ E8AC 52 54 29    >
1452+ E8AF             >                org     $-1                 // alter last byte of Name just above to set
1452+ E8AE A9          >                db      {b $} | END_BIT     // msb as name end
1452+ E8AF             >
1452+ E8AF 9D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E8B1             >Prev_Ptr        defl    Heap_Ptr
1452+ E8B1             >
1452+ E8B1             >mirror_Ptr      defl    $
1452+ E8B1             >
1452+ E8B1 A3 2F       >                dw      Dict_Ptr + 2        // xt
1452+ E8B3             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E8B3             >
1452+ E8B3             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E8B3             >
1452+ E8B3             >//              ______________________________________________________________________
1452+ E8B3             >//              Dictionary part
1452+ E8B3             >
1452+ E8B3             >                org     Dict_Ptr
1452+ 2FA1             >
1452+ 2FA1 B1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 2FA3             >
1452+ 2FA3             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 2FA3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1452+ 2FA6             >
1452+ 2FA6             >
1452+ 2FA6             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 2FA6             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 2FA6             >
1452+ 2FA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 2FA6 37 32                        dw      ABORT                   // abort
1454+ 2FA8 E9 24                        dw      EXIT                    // ;
1455+ 2FAA
1456+ 2FAA              //  ______________________________________________________________________
1457+ 2FAA              //
1458+ 2FAA              // error        n --
1459+ 2FAA              // raise an error
1460+ 2FAA              // if WARNING is 0, prints "MSG#n".
1461+ 2FAA              // if WARNING is 1, prints line n of screen 4.
1462+ 2FAA              // if WARNING is -1 does (ABORT) that normally does ABORT
1463+ 2FAA              // value can be negative or beyond block 4.
1464+ 2FAA                              Colon_Def ERROR,  "ERROR", is_normal
1464+ 2FAA             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1464+ 2FAA             >
1464+ 2FAA             >Dict_Ptr        defl    $
1464+ 2FAA             >
1464+ 2FAA             >//              ______________________________________________________________________
1464+ 2FAA             >//              Heap part
1464+ 2FAA             >
1464+ 2FAA             >
1464+ 2FAA             >                org     (Heap_Ptr & $1FFF) + $E000
1464+ E8B3             >
1464+ E8B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1464+ E8B3             >Latest_Definition defl  Heap_Ptr
1464+ E8B3             >
1464+ E8B3             >                // dummy db directives used to calculate length of namec
1464+ E8B3 45 52 52 4F >                db      "ERROR"
1464+ E8B7 52          >
1464+ E8B8             >len_NFA         defl    $ - temp_NFA
1464+ E8B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1464+ E8B3             >
1464+ E8B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1464+ E8B4 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1464+ E8B8 52          >
1464+ E8B9             >                org     $-1                 // alter last byte of Name just above to set
1464+ E8B8 D2          >                db      {b $} | END_BIT     // msb as name end
1464+ E8B9             >
1464+ E8B9 A7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1464+ E8BB             >Prev_Ptr        defl    Heap_Ptr
1464+ E8BB             >
1464+ E8BB             >mirror_Ptr      defl    $
1464+ E8BB             >
1464+ E8BB AC 2F       >                dw      Dict_Ptr + 2        // xt
1464+ E8BD             >Heap_Ptr        defl    $ - $E000           // save current HP
1464+ E8BD             >
1464+ E8BD             >Current_HP      defl  $ - $E000             // used to set HP once!
1464+ E8BD             >
1464+ E8BD             >//              ______________________________________________________________________
1464+ E8BD             >//              Dictionary part
1464+ E8BD             >
1464+ E8BD             >                org     Dict_Ptr
1464+ 2FAA             >
1464+ 2FAA BB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1464+ 2FAC             >
1464+ 2FAC             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1464+ 2FAC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1464+ 2FAF             >
1464+ 2FAF             >
1464+ 2FAF             >                endif           ; ok        // for other definitions it "points" the correct handler
1464+ 2FAF             >                // Use of "; ok" to suppress "warning[fwdref]"
1464+ 2FAF             >
1464+ 2FAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1465+ 2FAF 81 27 1E 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1465+ 2FB3 1F 25
1466+ 2FB5                                                              // if
1467+ 2FB5 8D 20                        dw      ZBRANCH
1468+ 2FB7 04 00                        dw      Error_Endif_1 - $
1469+ 2FB9 A3 2F                        dw          CABORT              //      (abort)
1470+ 2FBB              Error_Endif_1:                                  // endif
1471+ 2FBB 35 28 AE 2B                  dw      HERE, COUNT, TYPE       // here count type
1471+ 2FBF 02 2C
1472+ 2FC1 9F 2D                        dw      C_DOT_QUOTE             // .( ? )
1473+ 2FC3 02 3F 20                     db      2, "? "
1474+ 2FC6 5F 35                        dw      MESSAGE                 // message  ( forward )
1475+ 2FC8 69 27 1E 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1475+ 2FCC D9 24
1476+ 2FCE B1 27 1E 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1476+ 2FD2 D7 28
1477+ 2FD4                                                              // if
1478+ 2FD4 8D 20                        dw      ZBRANCH
1479+ 2FD6 08 00                        dw      Error_Endif_2 - $
1480+ 2FD8 B7 27 1E 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1480+ 2FDC AD 25
1481+ 2FDE              Error_Endif_2:                                  // endif
1482+ 2FDE FB 31                        dw      QUIT                    // quit ( forward )
1483+ 2FE0 E9 24                        dw      EXIT                    // ;
1484+ 2FE2              //  ______________________________________________________________________
1485+ 2FE2              //
1486+ 2FE2              // id.          nfa --
1487+ 2FE2                              Colon_Def ID_DOT,  "ID.", is_normal
1487+ 2FE2             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1487+ 2FE2             >
1487+ 2FE2             >Dict_Ptr        defl    $
1487+ 2FE2             >
1487+ 2FE2             >//              ______________________________________________________________________
1487+ 2FE2             >//              Heap part
1487+ 2FE2             >
1487+ 2FE2             >
1487+ 2FE2             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E8BD             >
1487+ E8BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E8BD             >Latest_Definition defl  Heap_Ptr
1487+ E8BD             >
1487+ E8BD             >                // dummy db directives used to calculate length of namec
1487+ E8BD 49 44 2E    >                db      "ID."
1487+ E8C0             >len_NFA         defl    $ - temp_NFA
1487+ E8C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E8BD             >
1487+ E8BD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E8BE 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1487+ E8C1             >                org     $-1                 // alter last byte of Name just above to set
1487+ E8C0 AE          >                db      {b $} | END_BIT     // msb as name end
1487+ E8C1             >
1487+ E8C1 B3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E8C3             >Prev_Ptr        defl    Heap_Ptr
1487+ E8C3             >
1487+ E8C3             >mirror_Ptr      defl    $
1487+ E8C3             >
1487+ E8C3 E4 2F       >                dw      Dict_Ptr + 2        // xt
1487+ E8C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E8C5             >
1487+ E8C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E8C5             >
1487+ E8C5             >//              ______________________________________________________________________
1487+ E8C5             >//              Dictionary part
1487+ E8C5             >
1487+ E8C5             >                org     Dict_Ptr
1487+ 2FE2             >
1487+ 2FE2 C3 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 2FE4             >
1487+ 2FE4             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 2FE4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1487+ 2FE7             >
1487+ 2FE7             >
1487+ 2FE7             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 2FE7             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 2FE7             >
1487+ 2FE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 2FE7 8D 29                        dw      QTOHEAP
1489+ 2FE9 B4 25 17 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1489+ 2FED 09 29
1490+ 2FEF 4F 25                        dw      ONE_PLUS                // 1+
1491+ 2FF1 90 25 74 28                  dw      OVER, SUBTRACT          // over -
1492+ 2FF5 B4 25 F3 24                  dw      DUP, TO_R               // >r
1493+ 2FF9 45 2D AD 25                  dw      PAD, SWAP               // pad swap
1494+ 2FFD 2E 24                        dw      CMOVE                   // cmove
1495+ 2FFF 45 2D 4F 25                  dw      PAD, ONE_PLUS           // pad 1+
1496+ 3003 FE 24 56 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1497+ 3007 02 2C FE 28                  dw      TYPE, SPACE             // type
1498+ 300B E9 24                        dw      EXIT                    // ;
1499+ 300D
1500+ 300D              //  ______________________________________________________________________
1501+ 300D              //
1502+ 300D              // code         -- cccc
1503+ 300D                              Colon_Def CODE,  "CODE", is_normal
1503+ 300D             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1503+ 300D             >
1503+ 300D             >Dict_Ptr        defl    $
1503+ 300D             >
1503+ 300D             >//              ______________________________________________________________________
1503+ 300D             >//              Heap part
1503+ 300D             >
1503+ 300D             >
1503+ 300D             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E8C5             >
1503+ E8C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E8C5             >Latest_Definition defl  Heap_Ptr
1503+ E8C5             >
1503+ E8C5             >                // dummy db directives used to calculate length of namec
1503+ E8C5 43 4F 44 45 >                db      "CODE"
1503+ E8C9             >len_NFA         defl    $ - temp_NFA
1503+ E8C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E8C5             >
1503+ E8C5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E8C6 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1503+ E8CA             >                org     $-1                 // alter last byte of Name just above to set
1503+ E8C9 C5          >                db      {b $} | END_BIT     // msb as name end
1503+ E8CA             >
1503+ E8CA BD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E8CC             >Prev_Ptr        defl    Heap_Ptr
1503+ E8CC             >
1503+ E8CC             >mirror_Ptr      defl    $
1503+ E8CC             >
1503+ E8CC 0F 30       >                dw      Dict_Ptr + 2        // xt
1503+ E8CE             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E8CE             >
1503+ E8CE             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E8CE             >
1503+ E8CE             >//              ______________________________________________________________________
1503+ E8CE             >//              Dictionary part
1503+ E8CE             >
1503+ E8CE             >                org     Dict_Ptr
1503+ 300D             >
1503+ 300D CC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 300F             >
1503+ 300F             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 300F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1503+ 3012             >
1503+ 3012             >
1503+ 3012             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 3012             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 3012             >
1503+ 3012             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 3012 96 2F                        dw      LFIND                   // -find
1505+ 3014                                                              // if
1506+ 3014 8D 20                        dw      ZBRANCH
1507+ 3016 10 00                        dw      Code_Endif - $
1508+ 3018 99 25                        dw          DROP                //      drop
1509+ 301A F3 29 E4 2F                  dw          TO_NAME, ID_DOT     //      >name id.
1510+ 301E 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1510+ 3022 5F 35
1511+ 3024 FE 28                        dw          SPACE               //      space
1512+ 3026              Code_Endif:                                     // endif
1513+ 3026 35 28                        dw      HERE                    // here
1514+ 3028                                                              // ( ---- here begins NFA ---- )
1515+ 3028 B4 25 33 26                  dw      DUP, CFETCH             // dup c@
1516+ 302C 7B 27 1E 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1516+ 3030 B1 28
1517+ 3032 4F 25                        dw      ONE_PLUS                // 1+
1518+ 3034 B4 25 40 28                  dw      DUP, ALLOT              // dup allot
1519+ 3038 65 25 65 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1520+ 303C F3 24                        dw      TO_R                    // >r
1521+ 303E B4 25                        dw      DUP                     // dup
1522+ 3040 3D 20                        dw      LIT
1523+ 3042 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1524+ 3044 15 26                        dw      TOGGLE                  // toggle
1525+ 3046 35 28 56 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1526+ 304A 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1526+ 304E 15 26
1527+ 3050                                                              // ( ---- here is LFA ---- )
1528+ 3050 D5 27 1E 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1528+ 3054 1E 26
1529+ 3056 4B 28                        dw      COMMA
1530+ 3058 B4 25 65 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1530+ 305C 4B 28
1531+ 305E 9E 29                        dw      HP_FETCH                // hp@
1532+ 3060 D5 27 1E 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1532+ 3064 28 26
1533+ 3066 9E 29 6F 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1534+ 306A 09 25 2E 24                  dw      R_OP, CMOVE
1535+ 306E 09 25 76 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1535+ 3072 40 28
1536+ 3074 FE 24 A5 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1536+ 3078 06 26
1537+ 307A 9E 29 69 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1538+ 307E 4B 28                        dw      COMMA
1539+ 3080 10 27 B0 29                  dw      ZERO, SKIP_HP_PAGE
1540+ 3084                                                              // ( ---- here is LFA ---- )
1541+ 3084 E9 24                        dw      EXIT                    // ;
1542+ 3086
1543+ 3086              //  ______________________________________________________________________
1544+ 3086              //
1545+ 3086              // create       -- cccc     ( compile time )
1546+ 3086              //              -- a        ( run time )
1547+ 3086                              Colon_Def CREATE,  "CREATE", is_normal
1547+ 3086             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1547+ 3086             >
1547+ 3086             >Dict_Ptr        defl    $
1547+ 3086             >
1547+ 3086             >//              ______________________________________________________________________
1547+ 3086             >//              Heap part
1547+ 3086             >
1547+ 3086             >
1547+ 3086             >                org     (Heap_Ptr & $1FFF) + $E000
1547+ E8CE             >
1547+ E8CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1547+ E8CE             >Latest_Definition defl  Heap_Ptr
1547+ E8CE             >
1547+ E8CE             >                // dummy db directives used to calculate length of namec
1547+ E8CE 43 52 45 41 >                db      "CREATE"
1547+ E8D2 54 45       >
1547+ E8D4             >len_NFA         defl    $ - temp_NFA
1547+ E8D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1547+ E8CE             >
1547+ E8CE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1547+ E8CF 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1547+ E8D3 54 45       >
1547+ E8D5             >                org     $-1                 // alter last byte of Name just above to set
1547+ E8D4 C5          >                db      {b $} | END_BIT     // msb as name end
1547+ E8D5             >
1547+ E8D5 C5 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1547+ E8D7             >Prev_Ptr        defl    Heap_Ptr
1547+ E8D7             >
1547+ E8D7             >mirror_Ptr      defl    $
1547+ E8D7             >
1547+ E8D7 88 30       >                dw      Dict_Ptr + 2        // xt
1547+ E8D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1547+ E8D9             >
1547+ E8D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1547+ E8D9             >
1547+ E8D9             >//              ______________________________________________________________________
1547+ E8D9             >//              Dictionary part
1547+ E8D9             >
1547+ E8D9             >                org     Dict_Ptr
1547+ 3086             >
1547+ 3086 D7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1547+ 3088             >
1547+ 3088             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1547+ 3088 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1547+ 308B             >
1547+ 308B             >
1547+ 308B             >                endif           ; ok        // for other definitions it "points" the correct handler
1547+ 308B             >                // Use of "; ok" to suppress "warning[fwdref]"
1547+ 308B             >
1547+ 308B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1548+ 308B 0F 30 13 2B                  dw      CODE, SMUDGE            // code smudge
1549+ 308F 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1549+ 3093 5A 28
1550+ 3095 3D 20 F7 26                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1550+ 3099 4B 28
1551+ 309B 4F 2B                        dw      C_SEMICOLON_CODE
1552+ 309D                              // this routine is called from the call coded in CFA
1553+ 309D              Create_Ptr:
1554+ 309D
1555+ 309D
1556+ 309D
1557+ 309D                              next
1557+ 309D DD E9       >                jp      (ix)
1558+ 309F
1559+ 309F              //  ______________________________________________________________________
1560+ 309F              //
1561+ 309F              // [compile]    -- cccc     ( compile time )
1562+ 309F                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1562+ 309F             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1562+ 309F             >
1562+ 309F             >Dict_Ptr        defl    $
1562+ 309F             >
1562+ 309F             >//              ______________________________________________________________________
1562+ 309F             >//              Heap part
1562+ 309F             >
1562+ 309F             >
1562+ 309F             >                org     (Heap_Ptr & $1FFF) + $E000
1562+ E8D9             >
1562+ E8D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1562+ E8D9             >Latest_Definition defl  Heap_Ptr
1562+ E8D9             >
1562+ E8D9             >                // dummy db directives used to calculate length of namec
1562+ E8D9 5B 43 4F 4D >                db      "[COMPILE]"
1562+ E8DD 50 49 4C 45 >
1562+ E8E1 5D          >
1562+ E8E2             >len_NFA         defl    $ - temp_NFA
1562+ E8E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1562+ E8D9             >
1562+ E8D9 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1562+ E8DA 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1562+ E8DE 50 49 4C 45 >
1562+ E8E2 5D          >
1562+ E8E3             >                org     $-1                 // alter last byte of Name just above to set
1562+ E8E2 DD          >                db      {b $} | END_BIT     // msb as name end
1562+ E8E3             >
1562+ E8E3 CE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1562+ E8E5             >Prev_Ptr        defl    Heap_Ptr
1562+ E8E5             >
1562+ E8E5             >mirror_Ptr      defl    $
1562+ E8E5             >
1562+ E8E5 A1 30       >                dw      Dict_Ptr + 2        // xt
1562+ E8E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1562+ E8E7             >
1562+ E8E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1562+ E8E7             >
1562+ E8E7             >//              ______________________________________________________________________
1562+ E8E7             >//              Dictionary part
1562+ E8E7             >
1562+ E8E7             >                org     Dict_Ptr
1562+ 309F             >
1562+ 309F E5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1562+ 30A1             >
1562+ 30A1             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1562+ 30A1 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1562+ 30A4             >
1562+ 30A4             >
1562+ 30A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1562+ 30A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1562+ 30A4             >
1562+ 30A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1563+ 30A4 96 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1564+ 30A6 0E 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1565+ 30A8 10 27 69 2A                  dw      ZERO, QERROR            // 0 ?error
1566+ 30AC 99 25                        dw      DROP                    // drop       (  cfa  )
1567+ 30AE 4B 28                        dw      COMMA                   // ,
1568+ 30B0 E9 24                        dw      EXIT                    // ; immediate
1569+ 30B2
1570+ 30B2              //  ______________________________________________________________________
1571+ 30B2              //
1572+ 30B2              // literal      n --      ( compile time )
1573+ 30B2                              Colon_Def LITERAL,  "LITERAL", is_immediate
1573+ 30B2             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1573+ 30B2             >
1573+ 30B2             >Dict_Ptr        defl    $
1573+ 30B2             >
1573+ 30B2             >//              ______________________________________________________________________
1573+ 30B2             >//              Heap part
1573+ 30B2             >
1573+ 30B2             >
1573+ 30B2             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8E7             >
1573+ E8E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8E7             >Latest_Definition defl  Heap_Ptr
1573+ E8E7             >
1573+ E8E7             >                // dummy db directives used to calculate length of namec
1573+ E8E7 4C 49 54 45 >                db      "LITERAL"
1573+ E8EB 52 41 4C    >
1573+ E8EE             >len_NFA         defl    $ - temp_NFA
1573+ E8EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8E7             >
1573+ E8E7 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8E8 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1573+ E8EC 52 41 4C    >
1573+ E8EF             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8EE CC          >                db      {b $} | END_BIT     // msb as name end
1573+ E8EF             >
1573+ E8EF D9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8F1             >Prev_Ptr        defl    Heap_Ptr
1573+ E8F1             >
1573+ E8F1             >mirror_Ptr      defl    $
1573+ E8F1             >
1573+ E8F1 B4 30       >                dw      Dict_Ptr + 2        // xt
1573+ E8F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8F3             >
1573+ E8F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8F3             >
1573+ E8F3             >//              ______________________________________________________________________
1573+ E8F3             >//              Dictionary part
1573+ E8F3             >
1573+ E8F3             >                org     Dict_Ptr
1573+ 30B2             >
1573+ 30B2 F1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 30B4             >
1573+ 30B4             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 30B4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 30B7             >
1573+ 30B7             >
1573+ 30B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 30B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 30B7             >
1573+ 30B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 30B7 DB 27 1E 26                  dw      STATE, FETCH            // state @
1575+ 30BB                                                              // if
1576+ 30BB 8D 20                        dw      ZBRANCH
1577+ 30BD 08 00                        dw      Literal_Endif - $
1578+ 30BF D9 2A 3D 20                  dw          COMPILE, LIT        //      compile lit
1579+ 30C3 4B 28                        dw          COMMA               //      ,
1580+ 30C5              Literal_Endif:                                  // endif
1581+ 30C5 E9 24                        dw      EXIT                    // ; immediate
1582+ 30C7
1583+ 30C7              //  ______________________________________________________________________
1584+ 30C7              //
1585+ 30C7              // dliteral     n --      ( compile time )
1586+ 30C7                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1586+ 30C7             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1586+ 30C7             >
1586+ 30C7             >Dict_Ptr        defl    $
1586+ 30C7             >
1586+ 30C7             >//              ______________________________________________________________________
1586+ 30C7             >//              Heap part
1586+ 30C7             >
1586+ 30C7             >
1586+ 30C7             >                org     (Heap_Ptr & $1FFF) + $E000
1586+ E8F3             >
1586+ E8F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ E8F3             >Latest_Definition defl  Heap_Ptr
1586+ E8F3             >
1586+ E8F3             >                // dummy db directives used to calculate length of namec
1586+ E8F3 44 4C 49 54 >                db      "DLITERAL"
1586+ E8F7 45 52 41 4C >
1586+ E8FB             >len_NFA         defl    $ - temp_NFA
1586+ E8FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ E8F3             >
1586+ E8F3 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ E8F4 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1586+ E8F8 45 52 41 4C >
1586+ E8FC             >                org     $-1                 // alter last byte of Name just above to set
1586+ E8FB CC          >                db      {b $} | END_BIT     // msb as name end
1586+ E8FC             >
1586+ E8FC E7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1586+ E8FE             >Prev_Ptr        defl    Heap_Ptr
1586+ E8FE             >
1586+ E8FE             >mirror_Ptr      defl    $
1586+ E8FE             >
1586+ E8FE C9 30       >                dw      Dict_Ptr + 2        // xt
1586+ E900             >Heap_Ptr        defl    $ - $E000           // save current HP
1586+ E900             >
1586+ E900             >Current_HP      defl  $ - $E000             // used to set HP once!
1586+ E900             >
1586+ E900             >//              ______________________________________________________________________
1586+ E900             >//              Dictionary part
1586+ E900             >
1586+ E900             >                org     Dict_Ptr
1586+ 30C7             >
1586+ 30C7 FE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1586+ 30C9             >
1586+ 30C9             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 30C9 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1586+ 30CC             >
1586+ 30CC             >
1586+ 30CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 30CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 30CC             >
1586+ 30CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 30CC DB 27 1E 26                  dw      STATE, FETCH            // state @
1588+ 30D0                                                              // if
1589+ 30D0 8D 20                        dw      ZBRANCH
1590+ 30D2 08 00                        dw      DLiteral_Endif - $
1591+ 30D4 AD 25                        dw          SWAP                //      swap
1592+ 30D6 B4 30 B4 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1593+ 30DA              DLiteral_Endif:                                 // endif
1594+ 30DA E9 24                        dw      EXIT                    // ; immediate
1595+ 30DC
1596+ 30DC              //  ______________________________________________________________________
1597+ 30DC              //
1598+ 30DC              // [char]       n --      ( compile time )
1599+ 30DC              // inside colon definition, gets first character from next input word
1600+ 30DC              // and compiles it as literal.
1601+ 30DC                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1601+ 30DC             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1601+ 30DC             >
1601+ 30DC             >Dict_Ptr        defl    $
1601+ 30DC             >
1601+ 30DC             >//              ______________________________________________________________________
1601+ 30DC             >//              Heap part
1601+ 30DC             >
1601+ 30DC             >
1601+ 30DC             >                org     (Heap_Ptr & $1FFF) + $E000
1601+ E900             >
1601+ E900             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ E900             >Latest_Definition defl  Heap_Ptr
1601+ E900             >
1601+ E900             >                // dummy db directives used to calculate length of namec
1601+ E900 5B 43 48 41 >                db      "[CHAR]"
1601+ E904 52 5D       >
1601+ E906             >len_NFA         defl    $ - temp_NFA
1601+ E906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ E900             >
1601+ E900 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ E901 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1601+ E905 52 5D       >
1601+ E907             >                org     $-1                 // alter last byte of Name just above to set
1601+ E906 DD          >                db      {b $} | END_BIT     // msb as name end
1601+ E907             >
1601+ E907 F3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1601+ E909             >Prev_Ptr        defl    Heap_Ptr
1601+ E909             >
1601+ E909             >mirror_Ptr      defl    $
1601+ E909             >
1601+ E909 DE 30       >                dw      Dict_Ptr + 2        // xt
1601+ E90B             >Heap_Ptr        defl    $ - $E000           // save current HP
1601+ E90B             >
1601+ E90B             >Current_HP      defl  $ - $E000             // used to set HP once!
1601+ E90B             >
1601+ E90B             >//              ______________________________________________________________________
1601+ E90B             >//              Dictionary part
1601+ E90B             >
1601+ E90B             >                org     Dict_Ptr
1601+ 30DC             >
1601+ 30DC 09 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1601+ 30DE             >
1601+ 30DE             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 30DE CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1601+ 30E1             >
1601+ 30E1             >
1601+ 30E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 30E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 30E1             >
1601+ 30E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 30E1 B6 2D B4 30                  dw      CHAR, LITERAL           // char [compile] literal
1603+ 30E5 E9 24                        dw      EXIT                    // ; immediate
1604+ 30E7
1605+ 30E7              //  ______________________________________________________________________
1606+ 30E7              //
1607+ 30E7              // 0x00         n --      ( compile time )
1608+ 30E7                              Colon_Def NUL_WORD,  $00, is_immediate
1608+ 30E7             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1608+ 30E7             >
1608+ 30E7             >Dict_Ptr        defl    $
1608+ 30E7             >
1608+ 30E7             >//              ______________________________________________________________________
1608+ 30E7             >//              Heap part
1608+ 30E7             >
1608+ 30E7             >
1608+ 30E7             >                org     (Heap_Ptr & $1FFF) + $E000
1608+ E90B             >
1608+ E90B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1608+ E90B             >Latest_Definition defl  Heap_Ptr
1608+ E90B             >
1608+ E90B             >                // dummy db directives used to calculate length of namec
1608+ E90B 00          >                db      $00
1608+ E90C             >len_NFA         defl    $ - temp_NFA
1608+ E90C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1608+ E90B             >
1608+ E90B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1608+ E90C 00          >                db      $00               // name string in 7-bit ascii, but
1608+ E90D             >                org     $-1                 // alter last byte of Name just above to set
1608+ E90C 80          >                db      {b $} | END_BIT     // msb as name end
1608+ E90D             >
1608+ E90D 00 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1608+ E90F             >Prev_Ptr        defl    Heap_Ptr
1608+ E90F             >
1608+ E90F             >mirror_Ptr      defl    $
1608+ E90F             >
1608+ E90F E9 30       >                dw      Dict_Ptr + 2        // xt
1608+ E911             >Heap_Ptr        defl    $ - $E000           // save current HP
1608+ E911             >
1608+ E911             >Current_HP      defl  $ - $E000             // used to set HP once!
1608+ E911             >
1608+ E911             >//              ______________________________________________________________________
1608+ E911             >//              Dictionary part
1608+ E911             >
1608+ E911             >                org     Dict_Ptr
1608+ 30E7             >
1608+ 30E7 0F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1608+ 30E9             >
1608+ 30E9             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1608+ 30E9 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1608+ 30EC             >
1608+ 30EC             >
1608+ 30EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1608+ 30EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1608+ 30EC             >
1608+ 30EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1609+ 30EC B1 27 1E 26                  dw      BLK, FETCH, ONE         // blk @ 1
1609+ 30F0 17 27
1610+ 30F2 A6 28                        dw      GREATER                 // > if
1611+ 30F4                                                              // if
1612+ 30F4 8D 20                        dw      ZBRANCH
1613+ 30F6 28 00                        dw      Nul_Else_1 - $
1614+ 30F8 17 27 B1 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1614+ 30FC 06 26
1615+ 30FE 10 27 B7 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1615+ 3102 28 26
1616+ 3104 B1 27 1E 26                  dw          BLK, FETCH          //      blk @
1617+ 3108 48 27                        dw          BSCR                //      b/scr
1618+ 310A 56 25                        dw          ONE_SUBTRACT        //      1 -
1619+ 310C A9 24                        dw          AND_OP              //      and  ( this is tricky )
1620+ 310E 0E 25                        dw          ZEQUAL              //      0=
1621+ 3110                                                              //      if
1622+ 3110 8D 20                        dw          ZBRANCH
1623+ 3112 08 00                        dw          Nul_Endif_2 - $
1624+ 3114 91 2A                        dw              QEXEC           //          ?exec
1625+ 3116 FE 24 99 25                  dw              R_TO, DROP      //          r> drop
1626+ 311A              Nul_Endif_2:                                    //      endif
1627+ 311A 89 20                        dw      BRANCH
1628+ 311C 06 00                        dw      Nul_Endif_1 - $
1629+ 311E              Nul_Else_1:                                     // else
1630+ 311E FE 24 99 25                  dw          R_TO, DROP          //      r> drop
1631+ 3122              Nul_Endif_1:                                    // endif
1632+ 3122 E9 24                        dw      EXIT                    // ;
1633+ 3124
1634+ 3124              //  ______________________________________________________________________
1635+ 3124              //
1636+ 3124              // ?stack       --
1637+ 3124              // Raise error #1 if stack is empty and you pop it
1638+ 3124              // Raise error #7 if stack is full.
1639+ 3124              // This means SP must always stay between HERE and FFFF
1640+ 3124              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1641+ 3124              // for Next 8K MMU paging this is $DOE8
1642+ 3124                              Colon_Def QSTACK, "?STACK", is_normal
1642+ 3124             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1642+ 3124             >
1642+ 3124             >Dict_Ptr        defl    $
1642+ 3124             >
1642+ 3124             >//              ______________________________________________________________________
1642+ 3124             >//              Heap part
1642+ 3124             >
1642+ 3124             >
1642+ 3124             >                org     (Heap_Ptr & $1FFF) + $E000
1642+ E911             >
1642+ E911             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ E911             >Latest_Definition defl  Heap_Ptr
1642+ E911             >
1642+ E911             >                // dummy db directives used to calculate length of namec
1642+ E911 3F 53 54 41 >                db      "?STACK"
1642+ E915 43 4B       >
1642+ E917             >len_NFA         defl    $ - temp_NFA
1642+ E917             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ E911             >
1642+ E911 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ E912 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1642+ E916 43 4B       >
1642+ E918             >                org     $-1                 // alter last byte of Name just above to set
1642+ E917 CB          >                db      {b $} | END_BIT     // msb as name end
1642+ E918             >
1642+ E918 0B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1642+ E91A             >Prev_Ptr        defl    Heap_Ptr
1642+ E91A             >
1642+ E91A             >mirror_Ptr      defl    $
1642+ E91A             >
1642+ E91A 26 31       >                dw      Dict_Ptr + 2        // xt
1642+ E91C             >Heap_Ptr        defl    $ - $E000           // save current HP
1642+ E91C             >
1642+ E91C             >Current_HP      defl  $ - $E000             // used to set HP once!
1642+ E91C             >
1642+ E91C             >//              ______________________________________________________________________
1642+ E91C             >//              Dictionary part
1642+ E91C             >
1642+ E91C             >                org     Dict_Ptr
1642+ 3124             >
1642+ 3124 1A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1642+ 3126             >
1642+ 3126             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 3126 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1642+ 3129             >
1642+ 3129             >
1642+ 3129             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 3129             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 3129             >
1642+ 3129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 3129 D0 24                        dw      SPFETCH                 // sp@
1644+ 312B 69 27 1E 26                  dw      S0, FETCH               // s0 @
1645+ 312F AD 25 8B 28                  dw      SWAP, ULESS             // swap u<
1646+ 3133 17 27 69 2A                  dw      ONE, QERROR             // 1 ?error
1647+ 3137 35 28                        dw      HERE                    // here
1648+ 3139 69 27 1E 26                  dw      S0, FETCH, LESS         // s0 @ <
1648+ 313D 99 28
1649+ 313F                                                              // if
1650+ 313F 8D 20                        dw      ZBRANCH
1651+ 3141 14 00                        dw      QStack_Endif - $
1652+ 3143 D0 24                        dw          SPFETCH             //      sp@
1653+ 3145 35 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1653+ 3149 80 00
1654+ 314B 36 25 8B 28                  dw          PLUS, ULESS         //      plus u<
1655+ 314F 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1655+ 3153 69 2A
1656+ 3155              QStack_Endif:                                   // endif
1657+ 3155 E9 24                        dw      EXIT                    // ;
1658+ 3157
1659+ 3157
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L1.asm
 141  3157                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L2.asm
   1+ 3157              //  ______________________________________________________________________
   2+ 3157              //
   3+ 3157              //  L2.asm
   4+ 3157              //
   5+ 3157              //  Level-2 3dos
   6+ 3157              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 3157              //  ______________________________________________________________________
   8+ 3157
   9+ 3157
  10+ 3157              //  ______________________________________________________________________
  11+ 3157              //
  12+ 3157              // interpret    --
  13+ 3157              // This is the text interpreter.
  14+ 3157              // It executes or compiles, depending on STATE, the text coming from
  15+ 3157              // current input stream.
  16+ 3157              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 3157              // the word is interpreted as numeric and converted, using current BASE,
  18+ 3157              // leaving on top of stack a single or double precision number, depending
  19+ 3157              // on the presence of a decimal point.
  20+ 3157              // If the number conversion fails, the terminal is notified with ? followed
  21+ 3157              // by the offending word.
  22+ 3157                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 3157             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 3157             >
  22+ 3157             >Dict_Ptr        defl    $
  22+ 3157             >
  22+ 3157             >//              ______________________________________________________________________
  22+ 3157             >//              Heap part
  22+ 3157             >
  22+ 3157             >
  22+ 3157             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E91C             >
  22+ E91C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E91C             >Latest_Definition defl  Heap_Ptr
  22+ E91C             >
  22+ E91C             >                // dummy db directives used to calculate length of namec
  22+ E91C 49 4E 54 45 >                db      "INTERPRET"
  22+ E920 52 50 52 45 >
  22+ E924 54          >
  22+ E925             >len_NFA         defl    $ - temp_NFA
  22+ E925             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E91C             >
  22+ E91C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E91D 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E921 52 50 52 45 >
  22+ E925 54          >
  22+ E926             >                org     $-1                 // alter last byte of Name just above to set
  22+ E925 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E926             >
  22+ E926 11 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E928             >Prev_Ptr        defl    Heap_Ptr
  22+ E928             >
  22+ E928             >mirror_Ptr      defl    $
  22+ E928             >
  22+ E928 59 31       >                dw      Dict_Ptr + 2        // xt
  22+ E92A             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E92A             >
  22+ E92A             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E92A             >
  22+ E92A             >//              ______________________________________________________________________
  22+ E92A             >//              Dictionary part
  22+ E92A             >
  22+ E92A             >                org     Dict_Ptr
  22+ 3157             >
  22+ 3157 28 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 3159             >
  22+ 3159             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 3159 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 315C             >
  22+ 315C             >
  22+ 315C             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 315C             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 315C             >
  22+ 315C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 315C
  24+ 315C              Interpret_Begin:                                        // begin
  25+ 315C 96 2F                        dw          LFIND                       //      -find
  26+ 315E                                                                      //      if
  27+ 315E 8D 20                        dw          ZBRANCH
  28+ 3160 1A 00                        dw          Interpret_Else_1 - $
  29+ 3162 DB 27 1E 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 3166 99 28
  30+ 3168                                                                      //          if
  31+ 3168 8D 20                        dw              ZBRANCH
  32+ 316A 08 00                        dw              Interpret_Else_2 - $
  33+ 316C EE 2A                        dw                  COMPILE_XT          //              compile,
  34+ 316E                                                                      //          else
  35+ 316E 89 20                        dw              BRANCH
  36+ 3170 06 00                        dw              Interpret_Endif_2 - $
  37+ 3172              Interpret_Else_2:
  38+ 3172 48 20 D7 26                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 3176              Interpret_Endif_2:                                      //          endif
  40+ 3176                                                                      //      else
  41+ 3176 89 20                        dw          BRANCH
  42+ 3178 1A 00                        dw          Interpret_Endif_1 - $
  43+ 317A              Interpret_Else_1:
  44+ 317A 35 28 E8 2E                  dw              HERE, NUMBER            //          here number
  45+ 317E E7 27 1E 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 3182 4F 25
  46+ 3184                                                                      //          if
  47+ 3184 8D 20                        dw              ZBRANCH
  48+ 3186 08 00                        dw              Interpret_Else_3 - $
  49+ 3188              //              dw                  NMODE, FETCH        //              nmode @
  50+ 3188              //                                                      //              if
  51+ 3188              //              dw                  ZBRANCH
  52+ 3188              //              dw                  Interpret_Endif_4 - $
  53+ 3188              //              dw                      ONE, ZERO       //                  1 0
  54+ 3188              //              dw                      TWO_DROP        //                  2drop
  55+ 3188              //Interpret_Endif_4:                                      //              endif
  56+ 3188 C9 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 318A                                                                      //          else
  58+ 318A 89 20                        dw              BRANCH
  59+ 318C 06 00                        dw              Interpret_Endif_3 - $
  60+ 318E              Interpret_Else_3:
  61+ 318E 99 25                        dw                  DROP                //              drop
  62+ 3190 B4 30                        dw                  LITERAL             //              [compile]  literal
  63+ 3192              Interpret_Endif_3:                                      //          endif
  64+ 3192              Interpret_Endif_1:                                      //      endif
  65+ 3192 26 31                        dw          QSTACK                      //      ?stack
  66+ 3194 3A 23                        dw          QTERMINAL                   //      ?terminal
  67+ 3196                                                                      //      if
  68+ 3196 8D 20                        dw          ZBRANCH
  69+ 3198 04 00                        dw          Interpret_Endif_5 - $
  70+ 319A FB 31                        dw              QUIT                    //          quit
  71+ 319C              Interpret_Endif_5:                                      //      endif
  72+ 319C 89 20                        dw      BRANCH
  73+ 319E BE FF                        dw      Interpret_Begin - $
  74+ 31A0 E9 24                        dw      EXIT                            // ;
  75+ 31A2
  76+ 31A2              //  ______________________________________________________________________
  77+ 31A2              //
  78+ 31A2              // vocabulary   -- cccc     ( compile time )
  79+ 31A2              // Defining word used in the form   VOCABULARY cccc
  80+ 31A2              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31A2              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31A2              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31A2              // so new definitions can be inserted in that vocabulary.
  84+ 31A2                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31A2             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31A2             >
  84+ 31A2             >Dict_Ptr        defl    $
  84+ 31A2             >
  84+ 31A2             >//              ______________________________________________________________________
  84+ 31A2             >//              Heap part
  84+ 31A2             >
  84+ 31A2             >
  84+ 31A2             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E92A             >
  84+ E92A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E92A             >Latest_Definition defl  Heap_Ptr
  84+ E92A             >
  84+ E92A             >                // dummy db directives used to calculate length of namec
  84+ E92A 56 4F 43 41 >                db      "VOCABULARY"
  84+ E92E 42 55 4C 41 >
  84+ E932 52 59       >
  84+ E934             >len_NFA         defl    $ - temp_NFA
  84+ E934             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E92A             >
  84+ E92A 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E92B 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E92F 42 55 4C 41 >
  84+ E933 52 59       >
  84+ E935             >                org     $-1                 // alter last byte of Name just above to set
  84+ E934 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E935             >
  84+ E935 1C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E937             >Prev_Ptr        defl    Heap_Ptr
  84+ E937             >
  84+ E937             >mirror_Ptr      defl    $
  84+ E937             >
  84+ E937 A4 31       >                dw      Dict_Ptr + 2        // xt
  84+ E939             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E939             >
  84+ E939             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E939             >
  84+ E939             >//              ______________________________________________________________________
  84+ E939             >//              Dictionary part
  84+ E939             >
  84+ E939             >                org     Dict_Ptr
  84+ 31A2             >
  84+ 31A2 37 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31A4             >
  84+ 31A4             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31A4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31A7             >
  84+ 31A7             >
  84+ 31A7             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31A7             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31A7             >
  84+ 31A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31A7
  86+ 31A7 88 30                        dw      CREATE
  87+ 31A9
  88+ 31A9                              // dummy word + link part
  89+ 31A9 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31AD 4B 28
  90+ 31AF D5 27 1E 26                  dw      CURRENT, FETCH          // current @
  91+ 31B3 1E 26                        dw      FETCH                   // @
  92+ 31B5                          //  dw      CELL_MINUS              // cell-
  93+ 31B5 4B 28                        dw      COMMA                   // ,
  94+ 31B7
  95+ 31B7                              // voc-link part
  96+ 31B7 35 28                        dw      HERE                    // here
  97+ 31B9 93 27 1E 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31BD 4B 28                        dw      COMMA                   // ,
  99+ 31BF 93 27 28 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31C3                              // DOES part
 101+ 31C3 84 2B                        dw      C_DOES                  // _does>_
 102+ 31C5              Vocabulary_Does:
 103+ 31C5                        //    nop
 104+ 31C5 CD BB 26                     call    Enter_Ptr
 105+ 31C8
 106+ 31C8 65 25                        dw      CELL_PLUS               // cell+
 107+ 31CA CF 27 28 26                  dw      CONTEXT, STORE          // context !
 108+ 31CE E9 24                        dw      EXIT                    // ;
 109+ 31D0
 110+ 31D0              //  ______________________________________________________________________
 111+ 31D0              //
 112+ 31D0              // forth        --
 113+ 31D0              // Name of the first vocabulary.
 114+ 31D0              // It makes FORTH the CONTEXT vocabulary.
 115+ 31D0              // Until new user vocabulary are defined, new colon-definitions becomes
 116+ 31D0              // part of FORTH. It is immediate, so it will executed during the creation
 117+ 31D0              // of a colon definition to be able to select the vocabulary.
 118+ 31D0
 119+ 31D0                              New_Def FORTH, "FORTH", Vocabulary_Does, is_immediate
 119+ 31D0             >
 119+ 31D0             >Dict_Ptr        defl    $
 119+ 31D0             >
 119+ 31D0             >//              ______________________________________________________________________
 119+ 31D0             >//              Heap part
 119+ 31D0             >
 119+ 31D0             >
 119+ 31D0             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E939             >
 119+ E939             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E939             >Latest_Definition defl  Heap_Ptr
 119+ E939             >
 119+ E939             >                // dummy db directives used to calculate length of namec
 119+ E939 46 4F 52 54 >                db      "FORTH"
 119+ E93D 48          >
 119+ E93E             >len_NFA         defl    $ - temp_NFA
 119+ E93E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E939             >
 119+ E939 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E93A 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 119+ E93E 48          >
 119+ E93F             >                org     $-1                 // alter last byte of Name just above to set
 119+ E93E C8          >                db      {b $} | END_BIT     // msb as name end
 119+ E93F             >
 119+ E93F 2A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E941             >Prev_Ptr        defl    Heap_Ptr
 119+ E941             >
 119+ E941             >mirror_Ptr      defl    $
 119+ E941             >
 119+ E941 D2 31       >                dw      Dict_Ptr + 2        // xt
 119+ E943             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E943             >
 119+ E943             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E943             >
 119+ E943             >//              ______________________________________________________________________
 119+ E943             >//              Dictionary part
 119+ E943             >
 119+ E943             >                org     Dict_Ptr
 119+ 31D0             >
 119+ 31D0 41 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 31D2             >
 119+ 31D2             >FORTH:          if Vocabulary_Does != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 31D2 CD C5 31    >                call    Vocabulary_Does ; ok        // for primitive definitions  actual code
 119+ 31D5             >
 119+ 31D5             >
 119+ 31D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 31D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 31D5             >
 119+ 31D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 31D5
 121+ 31D5 81 A0                        db      $81, $A0
 122+ 31D7              Forth_Latest_Ptr:
 123+ 31D7 39 09                        dw      Latest_Definition
 124+ 31D9              Voclink_Ptr:
 125+ 31D9 00 00                        dw      0
 126+ 31DB
 127+ 31DB              // ____
 128+ 31DB              // temp_VOC        defl    $                   // save this address
 129+ 31DB              //              org     (Heap_Ptr & $1FFF) + $E000
 130+ 31DB              //              db      $81, $A0
 131+ 31DB              // Forth_Latest_Ptr_HEAP:
 132+ 31DB              //                 dw      Latest_Definition
 133+ 31DB              // Voclink_Ptr_HEAP:
 134+ 31DB              //                 dw      0
 135+ 31DB              // Heap_Ptr        defl    $ - $E000           // save current HP
 136+ 31DB              //                 org     temp_VOC
 137+ 31DB              // ____
 138+ 31DB
 139+ 31DB              // Any new vocabulary is structured as follow:
 140+ 31DB              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 141+ 31DB              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 142+ 31DB              // PFA+4 always contains the LATEST word of this VOCABULARY.
 143+ 31DB              //       at creations it points to the null-word of its parent vocabulary
 144+ 31DB              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 145+ 31DB              // PFA+6 is the pointer that builds up the vocabulary linked list.
 146+ 31DB              //       FORTH has 0 here to signal the end of the list and user's variable
 147+ 31DB              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 148+ 31DB              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 149+ 31DB              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 150+ 31DB
 151+ 31DB              //  ______________________________________________________________________
 152+ 31DB              //
 153+ 31DB              // definitions  --
 154+ 31DB              // Used in the form  cccc DEFINITIONS
 155+ 31DB              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 156+ 31DB              // vocabulary cccc.
 157+ 31DB                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 157+ 31DB             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 157+ 31DB             >
 157+ 31DB             >Dict_Ptr        defl    $
 157+ 31DB             >
 157+ 31DB             >//              ______________________________________________________________________
 157+ 31DB             >//              Heap part
 157+ 31DB             >
 157+ 31DB             >
 157+ 31DB             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E943             >
 157+ E943             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E943             >Latest_Definition defl  Heap_Ptr
 157+ E943             >
 157+ E943             >                // dummy db directives used to calculate length of namec
 157+ E943 44 45 46 49 >                db      "DEFINITIONS"
 157+ E947 4E 49 54 49 >
 157+ E94B 4F 4E 53    >
 157+ E94E             >len_NFA         defl    $ - temp_NFA
 157+ E94E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E943             >
 157+ E943 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E944 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 157+ E948 4E 49 54 49 >
 157+ E94C 4F 4E 53    >
 157+ E94F             >                org     $-1                 // alter last byte of Name just above to set
 157+ E94E D3          >                db      {b $} | END_BIT     // msb as name end
 157+ E94F             >
 157+ E94F 39 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E951             >Prev_Ptr        defl    Heap_Ptr
 157+ E951             >
 157+ E951             >mirror_Ptr      defl    $
 157+ E951             >
 157+ E951 DD 31       >                dw      Dict_Ptr + 2        // xt
 157+ E953             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E953             >
 157+ E953             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E953             >
 157+ E953             >//              ______________________________________________________________________
 157+ E953             >//              Dictionary part
 157+ E953             >
 157+ E953             >                org     Dict_Ptr
 157+ 31DB             >
 157+ 31DB 51 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 31DD             >
 157+ 31DD             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 31DD CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 31E0             >
 157+ 31E0             >
 157+ 31E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 31E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 31E0             >
 157+ 31E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 31E0 CF 27 1E 26                  dw      CONTEXT, FETCH          // context @
 159+ 31E4 D5 27 28 26                  dw      CURRENT, STORE          // current !
 160+ 31E8 E9 24                        dw      EXIT                    // ;
 161+ 31EA
 162+ 31EA              //  ______________________________________________________________________
 163+ 31EA              //
 164+ 31EA              // (            -- cccc )
 165+ 31EA              // the following text is interpreted as a comment until a closing )
 166+ 31EA                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 166+ 31EA             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 166+ 31EA             >
 166+ 31EA             >Dict_Ptr        defl    $
 166+ 31EA             >
 166+ 31EA             >//              ______________________________________________________________________
 166+ 31EA             >//              Heap part
 166+ 31EA             >
 166+ 31EA             >
 166+ 31EA             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E953             >
 166+ E953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E953             >Latest_Definition defl  Heap_Ptr
 166+ E953             >
 166+ E953             >                // dummy db directives used to calculate length of namec
 166+ E953 28          >                db      "("
 166+ E954             >len_NFA         defl    $ - temp_NFA
 166+ E954             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E953             >
 166+ E953 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E954 28          >                db      "("               // name string in 7-bit ascii, but
 166+ E955             >                org     $-1                 // alter last byte of Name just above to set
 166+ E954 A8          >                db      {b $} | END_BIT     // msb as name end
 166+ E955             >
 166+ E955 43 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E957             >Prev_Ptr        defl    Heap_Ptr
 166+ E957             >
 166+ E957             >mirror_Ptr      defl    $
 166+ E957             >
 166+ E957 EC 31       >                dw      Dict_Ptr + 2        // xt
 166+ E959             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E959             >
 166+ E959             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E959             >
 166+ E959             >//              ______________________________________________________________________
 166+ E959             >//              Dictionary part
 166+ E959             >
 166+ E959             >                org     Dict_Ptr
 166+ 31EA             >
 166+ 31EA 57 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 31EC             >
 166+ 31EC             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 31EC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 166+ 31EF             >
 166+ 31EF             >
 166+ 31EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 31EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 31EF             >
 166+ 31EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 31EF 3D 20 29 00                  dw      LIT, ")"                // [char] )
 168+ 31F3 54 2D 99 25                  dw      WORD, DROP              // word drop
 169+ 31F7 E9 24                        dw      EXIT                    // ;
 170+ 31F9
 171+ 31F9              //  ______________________________________________________________________
 172+ 31F9              //
 173+ 31F9              // quit         --
 174+ 31F9              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 175+ 31F9                              Colon_Def QUIT, "QUIT", is_normal
 175+ 31F9             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 175+ 31F9             >
 175+ 31F9             >Dict_Ptr        defl    $
 175+ 31F9             >
 175+ 31F9             >//              ______________________________________________________________________
 175+ 31F9             >//              Heap part
 175+ 31F9             >
 175+ 31F9             >
 175+ 31F9             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E959             >
 175+ E959             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E959             >Latest_Definition defl  Heap_Ptr
 175+ E959             >
 175+ E959             >                // dummy db directives used to calculate length of namec
 175+ E959 51 55 49 54 >                db      "QUIT"
 175+ E95D             >len_NFA         defl    $ - temp_NFA
 175+ E95D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E959             >
 175+ E959 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E95A 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 175+ E95E             >                org     $-1                 // alter last byte of Name just above to set
 175+ E95D D4          >                db      {b $} | END_BIT     // msb as name end
 175+ E95E             >
 175+ E95E 53 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E960             >Prev_Ptr        defl    Heap_Ptr
 175+ E960             >
 175+ E960             >mirror_Ptr      defl    $
 175+ E960             >
 175+ E960 FB 31       >                dw      Dict_Ptr + 2        // xt
 175+ E962             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E962             >
 175+ E962             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E962             >
 175+ E962             >//              ______________________________________________________________________
 175+ E962             >//              Dictionary part
 175+ E962             >
 175+ E962             >                org     Dict_Ptr
 175+ 31F9             >
 175+ 31F9 60 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 31FB             >
 175+ 31FB             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 31FB CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 31FE             >
 175+ 31FE             >
 175+ 31FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 31FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 31FE             >
 175+ 31FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 31FE
 177+ 31FE 1D 28 1E 26                  dw      SOURCE_ID, FETCH        // source-id @
 178+ 3202 89 23 99 25                  dw      F_CLOSE, DROP           // f_close drop
 179+ 3206 10 27 1D 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 179+ 320A 28 26
 180+ 320C 10 27 B1 27                  dw      ZERO, BLK, STORE        // 0 blk !
 180+ 3210 28 26
 181+ 3212 F7 2A                        dw      SQUARED_OPEN            // [compile] [
 182+ 3214                                                              // begin
 183+ 3214              Quit_Begin:
 184+ 3214 6F 27 1E 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 184+ 3218 E4 24
 185+ 321A 41 22                        dw      CR                      //      cr
 186+ 321C F1 2C                        dw      QUERY                   //      query
 187+ 321E              Next_Breakpoint_1:
 188+ 321E 59 31                        dw      INTERPRET               //      interpret
 189+ 3220 DB 27 1E 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 189+ 3224 0E 25
 190+ 3226                                                              //      if
 191+ 3226 8D 20                        dw      ZBRANCH
 192+ 3228 07 00                        dw      Quit_Endif - $
 193+ 322A 9F 2D                        dw          C_DOT_QUOTE
 194+ 322C 02 6F 6B                     db          2, "ok"             //          .( ok)
 195+ 322F              Quit_Endif:                                     //      else
 196+ 322F                                                              // again
 197+ 322F 89 20                        dw      BRANCH
 198+ 3231 E3 FF                        dw      Quit_Begin - $
 199+ 3233 E9 24                        dw      EXIT                    // ;
 200+ 3235
 201+ 3235              //  ______________________________________________________________________
 202+ 3235              //
 203+ 3235              // abort        --
 204+ 3235                              Colon_Def ABORT, "ABORT", is_normal
 204+ 3235             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 204+ 3235             >
 204+ 3235             >Dict_Ptr        defl    $
 204+ 3235             >
 204+ 3235             >//              ______________________________________________________________________
 204+ 3235             >//              Heap part
 204+ 3235             >
 204+ 3235             >
 204+ 3235             >                org     (Heap_Ptr & $1FFF) + $E000
 204+ E962             >
 204+ E962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ E962             >Latest_Definition defl  Heap_Ptr
 204+ E962             >
 204+ E962             >                // dummy db directives used to calculate length of namec
 204+ E962 41 42 4F 52 >                db      "ABORT"
 204+ E966 54          >
 204+ E967             >len_NFA         defl    $ - temp_NFA
 204+ E967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ E962             >
 204+ E962 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ E963 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 204+ E967 54          >
 204+ E968             >                org     $-1                 // alter last byte of Name just above to set
 204+ E967 D4          >                db      {b $} | END_BIT     // msb as name end
 204+ E968             >
 204+ E968 59 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 204+ E96A             >Prev_Ptr        defl    Heap_Ptr
 204+ E96A             >
 204+ E96A             >mirror_Ptr      defl    $
 204+ E96A             >
 204+ E96A 37 32       >                dw      Dict_Ptr + 2        // xt
 204+ E96C             >Heap_Ptr        defl    $ - $E000           // save current HP
 204+ E96C             >
 204+ E96C             >Current_HP      defl  $ - $E000             // used to set HP once!
 204+ E96C             >
 204+ E96C             >//              ______________________________________________________________________
 204+ E96C             >//              Dictionary part
 204+ E96C             >
 204+ E96C             >                org     Dict_Ptr
 204+ 3235             >
 204+ 3235 6A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 204+ 3237             >
 204+ 3237             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 3237 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 323A             >
 204+ 323A             >
 204+ 323A             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 323A             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 323A             >
 204+ 323A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 323A 69 27 1E 26                  dw      S0, FETCH               // s0 @
 206+ 323E 33 27                        dw      BL                      // bl
 207+ 3240 90 25 28 26                  dw      OVER, STORE             // over !
 208+ 3244 D9 24                        dw      SPSTORE                 // sp!
 209+ 3246 40 2B                        dw      DECIMAL                 // decimal
 210+ 3248 D2 31                        dw      FORTH                   // [compile] forth
 211+ 324A DD 31                        dw      DEFINITIONS             // definitions
 212+ 324C
 213+ 324C F7 2A                        dw      SQUARED_OPEN            // [compile] [
 214+ 324E 6F 27 1E 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 214+ 3252 E4 24
 215+ 3254
 216+ 3254              Autoexec_Ptr:
 217+ 3254 76 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 218+ 3256 FB 31                        dw      QUIT                    // quit
 219+ 3258              //              dw      EXIT                    // ;
 220+ 3258
 221+ 3258              //  ______________________________________________________________________
 222+ 3258              //
 223+ 3258              // warm         --
 224+ 3258                              Colon_Def WARM, "WARM", is_normal
 224+ 3258             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 224+ 3258             >
 224+ 3258             >Dict_Ptr        defl    $
 224+ 3258             >
 224+ 3258             >//              ______________________________________________________________________
 224+ 3258             >//              Heap part
 224+ 3258             >
 224+ 3258             >
 224+ 3258             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E96C             >
 224+ E96C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E96C             >Latest_Definition defl  Heap_Ptr
 224+ E96C             >
 224+ E96C             >                // dummy db directives used to calculate length of namec
 224+ E96C 57 41 52 4D >                db      "WARM"
 224+ E970             >len_NFA         defl    $ - temp_NFA
 224+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E96C             >
 224+ E96C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E96D 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 224+ E971             >                org     $-1                 // alter last byte of Name just above to set
 224+ E970 CD          >                db      {b $} | END_BIT     // msb as name end
 224+ E971             >
 224+ E971 62 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E973             >Prev_Ptr        defl    Heap_Ptr
 224+ E973             >
 224+ E973             >mirror_Ptr      defl    $
 224+ E973             >
 224+ E973 5A 32       >                dw      Dict_Ptr + 2        // xt
 224+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E975             >
 224+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E975             >
 224+ E975             >//              ______________________________________________________________________
 224+ E975             >//              Dictionary part
 224+ E975             >
 224+ E975             >                org     Dict_Ptr
 224+ 3258             >
 224+ 3258 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 325A             >
 224+ 325A             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 325A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 325D             >
 224+ 325D             >
 224+ 325D             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 325D             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 325D             >
 224+ 325D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 325D 25 36                        dw      BLK_INIT                // blk-init
 226+ 325F                          //  dw      SPLASH                  // splash
 227+ 325F                          //  dw      LIT, 7, EMIT            // 7 emit
 228+ 325F 37 32                        dw      ABORT                   // abort
 229+ 3261                          //  dw      EXIT                    // exit
 230+ 3261
 231+ 3261              //  ______________________________________________________________________
 232+ 3261              //
 233+ 3261              // cold         --
 234+ 3261                              Colon_Def COLD, "COLD", is_normal
 234+ 3261             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 234+ 3261             >
 234+ 3261             >Dict_Ptr        defl    $
 234+ 3261             >
 234+ 3261             >//              ______________________________________________________________________
 234+ 3261             >//              Heap part
 234+ 3261             >
 234+ 3261             >
 234+ 3261             >                org     (Heap_Ptr & $1FFF) + $E000
 234+ E975             >
 234+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ E975             >Latest_Definition defl  Heap_Ptr
 234+ E975             >
 234+ E975             >                // dummy db directives used to calculate length of namec
 234+ E975 43 4F 4C 44 >                db      "COLD"
 234+ E979             >len_NFA         defl    $ - temp_NFA
 234+ E979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ E975             >
 234+ E975 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ E976 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 234+ E97A             >                org     $-1                 // alter last byte of Name just above to set
 234+ E979 C4          >                db      {b $} | END_BIT     // msb as name end
 234+ E97A             >
 234+ E97A 6C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 234+ E97C             >Prev_Ptr        defl    Heap_Ptr
 234+ E97C             >
 234+ E97C             >mirror_Ptr      defl    $
 234+ E97C             >
 234+ E97C 63 32       >                dw      Dict_Ptr + 2        // xt
 234+ E97E             >Heap_Ptr        defl    $ - $E000           // save current HP
 234+ E97E             >
 234+ E97E             >Current_HP      defl  $ - $E000             // used to set HP once!
 234+ E97E             >
 234+ E97E             >//              ______________________________________________________________________
 234+ E97E             >//              Dictionary part
 234+ E97E             >
 234+ E97E             >                org     Dict_Ptr
 234+ 3261             >
 234+ 3261 7C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 234+ 3263             >
 234+ 3263             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 3263 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 3266             >
 234+ 3266             >
 234+ 3266             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 3266             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 3266             >
 234+ 3266             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 3266 D7 26 D7 26                  dw      NOOP, NOOP
 236+ 326A 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 237+ 326E 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 238+ 3272 1E 26                        dw      FETCH                   // @
 239+ 3274 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 239+ 3278 36 25
 240+ 327A 3D 20 16 00                  dw      LIT, 22                 // 22
 241+ 327E 2E 24                        dw      CMOVE
 242+ 3280 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 243+ 3284 1E 26                        dw      FETCH                   // @
 244+ 3286 3D 20 D7 31                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 245+ 328A 28 26                        dw      STORE                   // !
 246+ 328C 10 27 AB 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 246+ 3290 28 26
 247+ 3292 99 27 1E 26                  dw      FIRST, FETCH, DUP       // first @ dup
 247+ 3296 B4 25
 248+ 3298 05 28 28 26                  dw      USED, STORE             // used !
 249+ 329C 0B 28 28 26                  dw      PREV, STORE             // prev !
 250+ 32A0 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 250+ 32A4 17 28 28 26
 251+ 32A8              //              dw      LIT, 8
 252+ 32A8              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 253+ 32A8 C6 36                        dw      EMPTY_BUFFERS
 254+ 32AA 10 27 B1 27                  dw      ZERO, BLK, STORE
 254+ 32AE 28 26
 255+ 32B0 10 27 1D 28                  dw      ZERO, SOURCE_ID, STORE
 255+ 32B4 28 26
 256+ 32B6
 257+ 32B6 3D 20 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 257+ 32BA 2B 22
 258+ 32BC 10 27 2B 22                  dw      ZERO, EMITC
 259+ 32C0
 260+ 32C0 5A 32        Warm_Start:     dw      WARM
 261+ 32C2 63 32        Cold_Start:     dw      COLD
 262+ 32C4              //              dw      EXIT
 263+ 32C4
 264+ 32C4
 265+ 32C4              //  ______________________________________________________________________
 266+ 32C4
 267+ 32C4              Tools_vForth_Directory
 268+ 32C4 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 268+ 32C8 6F 6F 6C 73
 268+ 32CC 2F 76 46 6F
 268+ 32D0 72 74 68 2F
 268+ 32D4 FF
 269+ 32D5 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 269+ 32D9 6F 74 2F 76
 269+ 32DD 66 6F 72 74
 269+ 32E1 68 2E 62 69
 269+ 32E5 6E 00
 270+ 32E7
 271+ 32E7              Saved_Speed:
 272+ 32E7 00                           db      0
 273+ 32E8 00 00 00 00  Saved_MMU       db      0,0,0, 0,0,0   // MMU2-MMU7
 273+ 32EC 00 00
 274+ 32EE
 275+ 32EE              Saved_Layer:
 276+ 32EE 00                           db      0           // graphics current mode
 277+ 32EF
 278+ 32EF 00 00        Saved_Basic_Add dw      0
 279+ 32F1
 280+ 32F1              //  ______________________________________________________________________
 281+ 32F1              WarmRoutine:
 282+ 32F1              ColdRoutine:
 283+ 32F1              //  ______________________________________________________________________
 284+ 32F1              // 0.
 285+ 32F1 ED 73 08 20                  ld      (SP_Basic), sp
 286+ 32F5 31 00 40                     ld      sp, $4000               // safe area
 287+ 32F8 D9                           exx
 288+ 32F9 22 EF 32                     ld      (Saved_Basic_Add), hl   //  save Basic's h'l' return address
 289+ 32FC D9                           exx
 290+ 32FD
 291+ 32FD              //  ______________________________________________________________________
 292+ 32FD              // 1.
 293+ 32FD              // Accepts one parameter from Basic as the filename to load
 294+ 32FD 7C                           ld      a, h
 295+ 32FE B5                           or      l
 296+ 32FF 28 15                        jr      z, Skip_Parameter
 297+ 3301
 298+ 3301 11 39 3F                     ld      de, Param_From_Basic
 299+ 3304 01 00 00                     ld      bc, 0
 300+ 3307              Parameter_Loop:
 301+ 3307 7E                           ld      a, (hl)
 302+ 3308 FE 3A                        cp      ':'
 303+ 330A 28 08                        jr      z, End_Parameter
 304+ 330C FE 0D                        cp      $0D
 305+ 330E 28 04                        jr      z, End_Parameter
 306+ 3310 ED A0                        ldi
 307+ 3312 18 F3                        jr      Parameter_Loop
 308+ 3314              End_Parameter:
 309+ 3314                              // append 0x00
 310+ 3314 AF                           xor     a
 311+ 3315 12                           ld      (de), a
 312+ 3316                          //  ld      hl, 0
 313+ 3316                          //  sbc     hl, bc
 314+ 3316                          //  ld      a, l
 315+ 3316                          //  ld      (Len_Filename), a
 316+ 3316              Skip_Parameter:
 317+ 3316
 318+ 3316              //  ______________________________________________________________________
 319+ 3316              // 2. prepare save-area address and hw register port
 320+ 3316 21 E7 32                     ld      hl, Saved_Speed     // save-area
 321+ 3319              //              ld      bc, $243B               // hw-register port
 322+ 3319              //  ______________________________________________________________________
 323+ 3319              // 2.1
 324+ 3319              // ask / read speed and MMU status
 325+ 3319 3E 07                        ld      a ,$07                  // read current speed
 326+ 331B CD D4 33                     call    Get_MMU_status          // Saved_Speed becomes Saved_MMU
 327+ 331E 16 03                        ld      d, 3                    // set top speed
 328+ 3320 B2                           or      d                       // reuse data just read
 329+ 3321 ED 92 07                     nextreg 07, a
 330+ 3324
 331+ 3324 1E 06                        ld      e, 6                    // loop limit for six 8k-pages
 332+ 3326              MMU_read_loop:
 333+ 3326 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 334+ 3328 93                           sub     e                       // calculated as difference from $58 ($58-6 ... $58-1)
 335+ 3329 CD D4 33                     call    Get_MMU_status
 336+ 332C 1D                           dec     e
 337+ 332D 20 F7                        jr      nz, MMU_read_loop
 338+ 332F              //  ______________________________________________________________________
 339+ 332F              // 2.2
 340+ 332F              // save current LAYER status
 341+ 332F
 342+ 332F 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 343+ 3332 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 344+ 3334 3E 00                        ld      a, 0        // query current status
 345+ 3336 CF                           rst     8
 346+ 3337 94                           db      $94         // carry flag set on success
 347+ 3338
 348+ 3338 32 EE 32                     ld      (Saved_Layer), a     // store after MMUs
 349+ 333B              //  ______________________________________________________________________
 350+ 333B              // 3.
 351+ 333B              // Reserve from OS twelve pages from $20 upward.
 352+ 333B CD AF 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 353+ 333E
 354+ 333E              //  ______________________________________________________________________
 355+ 333E              // 4.
 356+ 333E              // Backup MMU2 content to page $28
 357+ 333E 21 00 60                     ld      hl, $6000
 358+ 3341 11 00 40                     ld      de, $4000
 359+ 3344 CD 9F 33                     call    Backup_Restore_MMU
 360+ 3347
 361+ 3347              //  ______________________________________________________________________
 362+ 3347              // 5.
 363+ 3347              // Set current drive/directory
 364+ 3347
 365+ 3347              //              ld      a, $00
 366+ 3347              //              rst     8
 367+ 3347              //              defb    $89     ; m_getsetdrv
 368+ 3347              //              rst     8
 369+ 3347              //              defb    $89     ; m_getsetdrv
 370+ 3347
 371+ 3347 CD 74 33                     call    Set_Cur_Dir
 372+ 334A
 373+ 334A              //  ______________________________________________________________________
 374+ 334A              // 6.
 375+ 334A              // Setup MMU for Forth system (set MMU4-MMU6 to $28-$2A and MMU7 to $20)
 376+ 334A CD 8E 33                     call    Set_forth_MMU
 377+ 334D
 378+ 334D              //  ______________________________________________________________________
 379+ 334D              // 7.
 380+ 334D              // Get current handle via M_GETHANDLE and load ram
 381+ 334D CF                           rst     8
 382+ 334E 8D                           DEFB    $8d             ; M_GETHANDLE
 383+ 334F F5                           push    af
 384+ 3350 21 00 E0                     ld      hl, $E000       ; that now is attached to 8k-page $20
 385+ 3353 01 FF 1F                     ld      bc, $1FFF
 386+ 3356 CF                           rst     8
 387+ 3357 9D                           DEFB    $9D             ; f_read
 388+ 3358 F1                           pop     af
 389+ 3359 CF                           rst     8
 390+ 335A 9B                           DEFB    $9B             ; f_close
 391+ 335B
 392+ 335B              //  ______________________________________________________________________
 393+ 335B              // 8.
 394+ 335B              // set LAYER 1,2
 395+ 335B D9                           exx
 396+ 335C 01 02 01                     ld      bc, $0102
 397+ 335F CD DA 33                     call    Set_Layer
 398+ 3362
 399+ 3362              //  ______________________________________________________________________
 400+ 3362              // 9.
 401+ 3362              // pre-set the four main 16-bit registers
 402+ 3362 ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 403+ 3366 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 404+ 336A 01 C2 32                     ld      bc, Cold_Start          // Instruction Pointer
 405+ 336D DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 406+ 3371
 407+ 3371                              // unlimited scrolling: print chr$26;chr$0
 408+ 3371                              // ld      a, 26
 409+ 3371                              // rst     $10
 410+ 3371                              // xor     a
 411+ 3371                              // rst     $10
 412+ 3371
 413+ 3371 FB                           ei
 414+ 3372
 415+ 3372                          //  push    ix
 416+ 3372                          //  pop     hl
 417+ 3372                          //  rst     $20
 418+ 3372                              next
 418+ 3372 DD E9       >                jp      (ix)
 419+ 3374
 420+ 3374
 421+ 3374              //  ______________________________________________________________________
 422+ 3374              // Routine
 423+ 3374              // set current directory  /tools/vForth
 424+ 3374              Set_Cur_Dir:
 425+ 3374 21 C4 32                     ld      hl, Tools_vForth_Directory
 426+ 3377 11 00 40                     ld      de, $4000 // use some temporary safe zone
 427+ 337A 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 428+ 337D ED B0                        ldir
 429+ 337F D9                           exx
 430+ 3380 21 00 40                     ld      hl, $4000
 431+ 3383                          //  ld      hl, Tools_vForth_Directory
 432+ 3383 D9                           exx
 433+ 3384 11 B1 01                     ld      de, $01B1
 434+ 3387 0E 07                        ld      c, 7
 435+ 3389 3E 00                        ld      a, 0
 436+ 338B CF                           rst     8
 437+ 338C 94                           db      $94     // carry flag set on success !
 438+ 338D                                              // but we don't care for now, in case
 439+ 338D                                              // later INIT-BLK will issue an error
 440+ 338D C9                           ret
 441+ 338E
 442+ 338E              //  ______________________________________________________________________
 443+ 338E              // Routine
 444+ 338E              // set MMU7 to $20
 445+ 338E              Set_forth_MMU:
 446+ 338E                      ////    nextreg $53, $28         ;   MMU3  = $6000 no !!
 447+ 338E ED 91 54 28                  nextreg $54, $28         ;   MMU4  = $8000
 448+ 3392 ED 91 55 29                  nextreg $55, $29         ;   MMU5  = $A000
 449+ 3396 ED 91 56 2A                  nextreg $56, $2A         ;   MMU6  = $C000
 450+ 339A ED 91 57 20                  nextreg $57, $20         ;   MMU7  = $E000
 451+ 339E C9                           ret
 452+ 339F
 453+ 339F              //  ______________________________________________________________________
 454+ 339F              // Routine, safe backup
 455+ 339F              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 456+ 339F              Backup_Restore_MMU:
 457+ 339F ED 91 52 2B                  nextreg $52, $2B        ;   MMU2  = $4000 never modified
 458+ 33A3 01 00 20                     ld      bc, $2000       ;   8k
 459+ 33A6 ED B0                        ldir
 460+ 33A8 3A E8 32                     ld      a, (Saved_MMU)
 461+ 33AB ED 92 52                     nextreg $52, a
 462+ 33AE C9                           ret
 463+ 33AF
 464+ 33AF              //  ______________________________________________________________________
 465+ 33AF              // Routine:
 466+ 33AF              // reserve MMU pages
 467+ 33AF              // $20 - $27 Heap Space (8 pages)
 468+ 33AF              // $28 - $2A Main memory
 469+ 33AF              // $2B : backup of MMU3
 470+ 33AF              Restore_Reserve_MMU:
 471+ 33AF 2E 20                        ld      l, $20      // first page
 472+ 33B1 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 473+ 33B3              Reserve_MMU_Loop:
 474+ 33B3 7D                           ld      a, l            // pass page through a
 475+ 33B4 D9                           exx
 476+ 33B5                               // parameters:
 477+ 33B5              Deallocate_MMU:
 478+ 33B5 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 479+ 33B8 5F                            ld      e, a           // E' is bank-id
 480+ 33B9 D9                           exx
 481+ 33BA E5                           push    hl
 482+ 33BB
 483+ 33BB 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 484+ 33BD 3E 01                        ld      a, 1
 485+ 33BF 11 BD 01                     ld      de, $01BD  // IDE_BANK
 486+ 33C2 CF                           rst     8
 487+ 33C3 94                           db      $94     // M_P3DOS
 488+ 33C4
 489+ 33C4 E1                           pop     hl
 490+ 33C5 2C                           inc     l       // next page number
 491+ 33C6 25                           dec     h       // decrease counter.
 492+ 33C7 20 EA                        jr      nz, Reserve_MMU_Loop
 493+ 33C9 C9                           ret
 494+ 33CA
 495+ 33CA              //  ______________________________________________________________________
 496+ 33CA              // Routine
 497+ 33CA              // Input:  bc=$243B, a=reg, hl=array
 498+ 33CA              // Operation: set  hardware register  a  to value at  (hl)
 499+ 33CA              // Output: bc=$243B, a=a+1, hl=hl+1
 500+ 33CA              Put_MMU_status:
 501+ 33CA 56                           ld      d, (hl)
 502+ 33CB ED 79                        out     (c), a
 503+ 33CD 04                           inc     b        // 253Bh
 504+ 33CE ED 51                        out     (c), d
 505+ 33D0 05                           dec     b        // 243Bh
 506+ 33D1 23                           inc     hl
 507+ 33D2 3C                           inc     a
 508+ 33D3 C9                           ret
 509+ 33D4
 510+ 33D4              //  ______________________________________________________________________
 511+ 33D4              // Routine
 512+ 33D4              // Input:  bc=$243B, a=reg, hl=array
 513+ 33D4              // Operation: get current value of hardware register  a  and store at (hl)
 514+ 33D4              // Output: bc=$243B, a=a+1, hl=hl+1
 515+ 33D4              Get_MMU_status:
 516+ 33D4              //              out     (c), a
 517+ 33D4              //              inc     b        // 253Bh
 518+ 33D4              //              in      d ,(c)
 519+ 33D4              //              dec     b        // 243Bh
 520+ 33D4 CD 32 21                     call    NEXTREG_read
 521+ 33D7 77                           ld      (hl), a
 522+ 33D8 23                           inc     hl
 523+ 33D9 C9                           ret
 524+ 33DA
 525+ 33DA              //  ______________________________________________________________________
 526+ 33DA              // Routine
 527+ 33DA              // set LAYER B,C
 528+ 33DA              // Input: bc=$0102 for Layer 1,2
 529+ 33DA              Set_Layer:
 530+ 33DA D9                           exx
 531+ 33DB 11 D5 01                     ld      de, $01D5
 532+ 33DE 0E 07                        ld      c, 7
 533+ 33E0 3E 01                        ld      a, 1
 534+ 33E2 CF                           rst     8
 535+ 33E3 94                           db      $94
 536+ 33E4 C9                           ret
 537+ 33E5
 538+ 33E5              //  ______________________________________________________________________
 539+ 33E5              //
 540+ 33E5              // basic        --
 541+ 33E5                              New_Def BASIC, "BASIC", is_code, is_normal
 541+ 33E5             >
 541+ 33E5             >Dict_Ptr        defl    $
 541+ 33E5             >
 541+ 33E5             >//              ______________________________________________________________________
 541+ 33E5             >//              Heap part
 541+ 33E5             >
 541+ 33E5             >
 541+ 33E5             >                org     (Heap_Ptr & $1FFF) + $E000
 541+ E97E             >
 541+ E97E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ E97E             >Latest_Definition defl  Heap_Ptr
 541+ E97E             >
 541+ E97E             >                // dummy db directives used to calculate length of namec
 541+ E97E 42 41 53 49 >                db      "BASIC"
 541+ E982 43          >
 541+ E983             >len_NFA         defl    $ - temp_NFA
 541+ E983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ E97E             >
 541+ E97E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ E97F 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 541+ E983 43          >
 541+ E984             >                org     $-1                 // alter last byte of Name just above to set
 541+ E983 C3          >                db      {b $} | END_BIT     // msb as name end
 541+ E984             >
 541+ E984 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 541+ E986             >Prev_Ptr        defl    Heap_Ptr
 541+ E986             >
 541+ E986             >mirror_Ptr      defl    $
 541+ E986             >
 541+ E986 E7 33       >                dw      Dict_Ptr + 2        // xt
 541+ E988             >Heap_Ptr        defl    $ - $E000           // save current HP
 541+ E988             >
 541+ E988             >Current_HP      defl  $ - $E000             // used to set HP once!
 541+ E988             >
 541+ E988             >//              ______________________________________________________________________
 541+ E988             >//              Dictionary part
 541+ E988             >
 541+ E988             >                org     Dict_Ptr
 541+ 33E5             >
 541+ 33E5 86 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 541+ 33E7             >
 541+ 33E7             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 33E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 541+ 33E7 ~           >
 541+ 33E7 ~           >
 541+ 33E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 33E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 33E7             >
 541+ 33E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 33E7
 543+ 33E7              // using dot-command, no more needs to return bc
 544+ 33E7              //              pop     bc                      // return  TOS  value to Basic
 545+ 33E7
 546+ 33E7 F3                           di
 547+ 33E8
 548+ 33E8 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 549+ 33EB
 550+ 33EB                              // address
 551+ 33EB 21 E7 32                     ld      hl, Saved_Speed
 552+ 33EE 01 3B 24                     ld      bc , $243B
 553+ 33F1
 554+ 33F1                              // set speed
 555+ 33F1 3E 07                        ld      a, $07
 556+ 33F3 CD CA 33                     call    Put_MMU_status
 557+ 33F6
 558+ 33F6                        //    inc     hl
 559+ 33F6                        //    inc     hl
 560+ 33F6                              // set MMU pages
 561+ 33F6 3E 52                        ld      a, $52
 562+ 33F8 1E 06                        ld      e, 6
 563+ 33FA              MMU_put_loop:
 564+ 33FA CD CA 33                     call    Put_MMU_status
 565+ 33FD 1D                           dec     e
 566+ 33FE 20 FA                        jr      nz, MMU_put_loop
 567+ 3400              //  ______________________________________________________________________
 568+ 3400                              // restore layer ide mode
 569+ 3400 7E                           ld      a, (hl)
 570+ 3401
 571+ 3401                              // decode what service $01D5 returned at startup
 572+ 3401                              // bits 0..1=layer (0,1,2)
 573+ 3401                              // bits 2..3=sub-mode for layer 1 (0=lores,1=ula,2=hires,3=hicol)
 574+ 3401 D9                           exx
 575+ 3402 47                           ld      b, a
 576+ 3403 0F                           rrca
 577+ 3404 0F                           rrca
 578+ 3405 E6 03                        and     3
 579+ 3407 4F                           ld      c, a
 580+ 3408 78                           ld      a, b
 581+ 3409 E6 03                        and     3
 582+ 340B 47                           ld      b, a
 583+ 340C CD DA 33                     call    Set_Layer
 584+ 340F
 585+ 340F              //  ______________________________________________________________________
 586+ 340F              //              Restore page from backup
 587+ 340F 21 00 40                     ld      hl, $4000
 588+ 3412 11 00 60                     ld      de, $6000
 589+ 3415 CD 9F 33                     call    Backup_Restore_MMU
 590+ 3418              //  ______________________________________________________________________
 591+ 3418              //
 592+ 3418                              // free 8k pages
 593+ 3418 3E 03                        ld      a, 3
 594+ 341A 32 B6 33                     ld      (Deallocate_MMU+1), a
 595+ 341D CD AF 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 596+ 3420              //  ______________________________________________________________________
 597+ 3420
 598+ 3420                              // restore basic pointers
 599+ 3420 2A EF 32                     ld      hl, (Saved_Basic_Add)   // restore h'l'
 600+ 3423 D9                           exx
 601+ 3424 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 602+ 3428
 603+ 3428 FB                           ei
 604+ 3429
 605+ 3429                              // these two bytes are patched by BLK-INIT with RST8+$FF
 606+ 3429              Exit_with_error:
 607+ 3429 AF                           xor     a
 608+ 342A 76                           halt
 609+ 342B C9                           ret                             // to where USR Basic was left
 610+ 342C
 611+ 342C              //  ______________________________________________________________________
 612+ 342C              //
 613+ 342C              // +-           n1 n2 -- n3
 614+ 342C              // leaves n1 with the sign of n2 as n3.
 615+ 342C                              Colon_Def PLUS_MINUS, "+-", is_normal
 615+ 342C             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 615+ 342C             >
 615+ 342C             >Dict_Ptr        defl    $
 615+ 342C             >
 615+ 342C             >//              ______________________________________________________________________
 615+ 342C             >//              Heap part
 615+ 342C             >
 615+ 342C             >
 615+ 342C             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E988             >
 615+ E988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E988             >Latest_Definition defl  Heap_Ptr
 615+ E988             >
 615+ E988             >                // dummy db directives used to calculate length of namec
 615+ E988 2B 2D       >                db      "+-"
 615+ E98A             >len_NFA         defl    $ - temp_NFA
 615+ E98A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E988             >
 615+ E988 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E989 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 615+ E98B             >                org     $-1                 // alter last byte of Name just above to set
 615+ E98A AD          >                db      {b $} | END_BIT     // msb as name end
 615+ E98B             >
 615+ E98B 7E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E98D             >Prev_Ptr        defl    Heap_Ptr
 615+ E98D             >
 615+ E98D             >mirror_Ptr      defl    $
 615+ E98D             >
 615+ E98D 2E 34       >                dw      Dict_Ptr + 2        // xt
 615+ E98F             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E98F             >
 615+ E98F             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E98F             >
 615+ E98F             >//              ______________________________________________________________________
 615+ E98F             >//              Dictionary part
 615+ E98F             >
 615+ E98F             >                org     Dict_Ptr
 615+ 342C             >
 615+ 342C 8D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 342E             >
 615+ 342E             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 342E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 3431             >
 615+ 3431             >
 615+ 3431             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 3431             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 3431             >
 615+ 3431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 3431 1F 25                        dw      ZLESS                   // 0<
 617+ 3433                                                              // if
 618+ 3433 8D 20                        dw      ZBRANCH
 619+ 3435 04 00                        dw      Plus_Minus_Endif - $
 620+ 3437 76 25                        dw          MINUS               //      minus
 621+ 3439              Plus_Minus_Endif:                               // endif
 622+ 3439 E9 24                        dw      EXIT                    // ;
 623+ 343B
 624+ 343B              //  ______________________________________________________________________
 625+ 343B              //
 626+ 343B              // d+-          d1 n -- d2
 627+ 343B              // leaves d1 with the sign of n as d2.
 628+ 343B                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 628+ 343B             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 628+ 343B             >
 628+ 343B             >Dict_Ptr        defl    $
 628+ 343B             >
 628+ 343B             >//              ______________________________________________________________________
 628+ 343B             >//              Heap part
 628+ 343B             >
 628+ 343B             >
 628+ 343B             >                org     (Heap_Ptr & $1FFF) + $E000
 628+ E98F             >
 628+ E98F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ E98F             >Latest_Definition defl  Heap_Ptr
 628+ E98F             >
 628+ E98F             >                // dummy db directives used to calculate length of namec
 628+ E98F 44 2B 2D    >                db      "D+-"
 628+ E992             >len_NFA         defl    $ - temp_NFA
 628+ E992             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ E98F             >
 628+ E98F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ E990 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 628+ E993             >                org     $-1                 // alter last byte of Name just above to set
 628+ E992 AD          >                db      {b $} | END_BIT     // msb as name end
 628+ E993             >
 628+ E993 88 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 628+ E995             >Prev_Ptr        defl    Heap_Ptr
 628+ E995             >
 628+ E995             >mirror_Ptr      defl    $
 628+ E995             >
 628+ E995 3D 34       >                dw      Dict_Ptr + 2        // xt
 628+ E997             >Heap_Ptr        defl    $ - $E000           // save current HP
 628+ E997             >
 628+ E997             >Current_HP      defl  $ - $E000             // used to set HP once!
 628+ E997             >
 628+ E997             >//              ______________________________________________________________________
 628+ E997             >//              Dictionary part
 628+ E997             >
 628+ E997             >                org     Dict_Ptr
 628+ 343B             >
 628+ 343B 95 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 628+ 343D             >
 628+ 343D             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 343D CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 3440             >
 628+ 3440             >
 628+ 3440             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 3440             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 3440             >
 628+ 3440             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 3440 1F 25                        dw      ZLESS                   // 0<
 630+ 3442                                                              // if
 631+ 3442 8D 20                        dw      ZBRANCH
 632+ 3444 04 00                        dw      DPlus_Minus_Endif - $
 633+ 3446 83 25                        dw          DMINUS              //      dminus
 634+ 3448              DPlus_Minus_Endif:                              // endif
 635+ 3448 E9 24                        dw      EXIT                    // ;
 636+ 344A
 637+ 344A              //  ______________________________________________________________________
 638+ 344A              //
 639+ 344A              // abs          n1 -- n2
 640+ 344A                              Colon_Def ABS_OP, "ABS", is_normal
 640+ 344A             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 640+ 344A             >
 640+ 344A             >Dict_Ptr        defl    $
 640+ 344A             >
 640+ 344A             >//              ______________________________________________________________________
 640+ 344A             >//              Heap part
 640+ 344A             >
 640+ 344A             >
 640+ 344A             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ E997             >
 640+ E997             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ E997             >Latest_Definition defl  Heap_Ptr
 640+ E997             >
 640+ E997             >                // dummy db directives used to calculate length of namec
 640+ E997 41 42 53    >                db      "ABS"
 640+ E99A             >len_NFA         defl    $ - temp_NFA
 640+ E99A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ E997             >
 640+ E997 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ E998 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 640+ E99B             >                org     $-1                 // alter last byte of Name just above to set
 640+ E99A D3          >                db      {b $} | END_BIT     // msb as name end
 640+ E99B             >
 640+ E99B 8F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ E99D             >Prev_Ptr        defl    Heap_Ptr
 640+ E99D             >
 640+ E99D             >mirror_Ptr      defl    $
 640+ E99D             >
 640+ E99D 4C 34       >                dw      Dict_Ptr + 2        // xt
 640+ E99F             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ E99F             >
 640+ E99F             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ E99F             >
 640+ E99F             >//              ______________________________________________________________________
 640+ E99F             >//              Dictionary part
 640+ E99F             >
 640+ E99F             >                org     Dict_Ptr
 640+ 344A             >
 640+ 344A 9D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 344C             >
 640+ 344C             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 344C CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 344F             >
 640+ 344F             >
 640+ 344F             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 344F             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 344F             >
 640+ 344F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 344F B4 25                        dw      DUP                     // dup
 642+ 3451 2E 34                        dw      PLUS_MINUS              // +-
 643+ 3453 E9 24                        dw      EXIT                    // ;
 644+ 3455
 645+ 3455              //  ______________________________________________________________________
 646+ 3455              //
 647+ 3455              // dabs         d1 -- d2
 648+ 3455                              Colon_Def DABS, "DABS", is_normal
 648+ 3455             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 648+ 3455             >
 648+ 3455             >Dict_Ptr        defl    $
 648+ 3455             >
 648+ 3455             >//              ______________________________________________________________________
 648+ 3455             >//              Heap part
 648+ 3455             >
 648+ 3455             >
 648+ 3455             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ E99F             >
 648+ E99F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ E99F             >Latest_Definition defl  Heap_Ptr
 648+ E99F             >
 648+ E99F             >                // dummy db directives used to calculate length of namec
 648+ E99F 44 41 42 53 >                db      "DABS"
 648+ E9A3             >len_NFA         defl    $ - temp_NFA
 648+ E9A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ E99F             >
 648+ E99F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ E9A0 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 648+ E9A4             >                org     $-1                 // alter last byte of Name just above to set
 648+ E9A3 D3          >                db      {b $} | END_BIT     // msb as name end
 648+ E9A4             >
 648+ E9A4 97 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ E9A6             >Prev_Ptr        defl    Heap_Ptr
 648+ E9A6             >
 648+ E9A6             >mirror_Ptr      defl    $
 648+ E9A6             >
 648+ E9A6 57 34       >                dw      Dict_Ptr + 2        // xt
 648+ E9A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ E9A8             >
 648+ E9A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ E9A8             >
 648+ E9A8             >//              ______________________________________________________________________
 648+ E9A8             >//              Dictionary part
 648+ E9A8             >
 648+ E9A8             >                org     Dict_Ptr
 648+ 3455             >
 648+ 3455 A6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 3457             >
 648+ 3457             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 3457 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 345A             >
 648+ 345A             >
 648+ 345A             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 345A             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 345A             >
 648+ 345A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 345A B4 25                        dw      DUP                     // dup
 650+ 345C 3D 34                        dw      DPLUS_MINUS             // d+-
 651+ 345E E9 24                        dw      EXIT                    // ;
 652+ 3460
 653+ 3460              //  ______________________________________________________________________
 654+ 3460              //
 655+ 3460              // m*           n1 n2 -- d
 656+ 3460              // multiply two integer giving a double
 657+ 3460                              Colon_Def MMUL, "M*", is_normal
 657+ 3460             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 657+ 3460             >
 657+ 3460             >Dict_Ptr        defl    $
 657+ 3460             >
 657+ 3460             >//              ______________________________________________________________________
 657+ 3460             >//              Heap part
 657+ 3460             >
 657+ 3460             >
 657+ 3460             >                org     (Heap_Ptr & $1FFF) + $E000
 657+ E9A8             >
 657+ E9A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 657+ E9A8             >Latest_Definition defl  Heap_Ptr
 657+ E9A8             >
 657+ E9A8             >                // dummy db directives used to calculate length of namec
 657+ E9A8 4D 2A       >                db      "M*"
 657+ E9AA             >len_NFA         defl    $ - temp_NFA
 657+ E9AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 657+ E9A8             >
 657+ E9A8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 657+ E9A9 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 657+ E9AB             >                org     $-1                 // alter last byte of Name just above to set
 657+ E9AA AA          >                db      {b $} | END_BIT     // msb as name end
 657+ E9AB             >
 657+ E9AB 9F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 657+ E9AD             >Prev_Ptr        defl    Heap_Ptr
 657+ E9AD             >
 657+ E9AD             >mirror_Ptr      defl    $
 657+ E9AD             >
 657+ E9AD 62 34       >                dw      Dict_Ptr + 2        // xt
 657+ E9AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 657+ E9AF             >
 657+ E9AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 657+ E9AF             >
 657+ E9AF             >//              ______________________________________________________________________
 657+ E9AF             >//              Dictionary part
 657+ E9AF             >
 657+ E9AF             >                org     Dict_Ptr
 657+ 3460             >
 657+ 3460 AD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 657+ 3462             >
 657+ 3462             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 657+ 3462 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 657+ 3465             >
 657+ 3465             >
 657+ 3465             >                endif           ; ok        // for other definitions it "points" the correct handler
 657+ 3465             >                // Use of "; ok" to suppress "warning[fwdref]"
 657+ 3465             >
 657+ 3465             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 658+ 3465 FC 25 C4 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 658+ 3469 F3 24
 659+ 346B 4C 34 AD 25                  dw      ABS_OP, SWAP            // abs swap
 660+ 346F 4C 34 51 24                  dw      ABS_OP, UM_MUL          // abs um*
 661+ 3473 FE 24 3D 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 662+ 3477 E9 24                        dw      EXIT                    // ;
 663+ 3479
 664+ 3479              //  ______________________________________________________________________
 665+ 3479              //
 666+ 3479              // sm/rem       d n -- q r
 667+ 3479              // Symmetric division: divides a double into n giving quotient q and remainder r
 668+ 3479              // the remainder has the sign of d.
 669+ 3479                              Colon_Def SMDIVM, "SM/REM", is_normal
 669+ 3479             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 669+ 3479             >
 669+ 3479             >Dict_Ptr        defl    $
 669+ 3479             >
 669+ 3479             >//              ______________________________________________________________________
 669+ 3479             >//              Heap part
 669+ 3479             >
 669+ 3479             >
 669+ 3479             >                org     (Heap_Ptr & $1FFF) + $E000
 669+ E9AF             >
 669+ E9AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 669+ E9AF             >Latest_Definition defl  Heap_Ptr
 669+ E9AF             >
 669+ E9AF             >                // dummy db directives used to calculate length of namec
 669+ E9AF 53 4D 2F 52 >                db      "SM/REM"
 669+ E9B3 45 4D       >
 669+ E9B5             >len_NFA         defl    $ - temp_NFA
 669+ E9B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 669+ E9AF             >
 669+ E9AF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 669+ E9B0 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 669+ E9B4 45 4D       >
 669+ E9B6             >                org     $-1                 // alter last byte of Name just above to set
 669+ E9B5 CD          >                db      {b $} | END_BIT     // msb as name end
 669+ E9B6             >
 669+ E9B6 A8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 669+ E9B8             >Prev_Ptr        defl    Heap_Ptr
 669+ E9B8             >
 669+ E9B8             >mirror_Ptr      defl    $
 669+ E9B8             >
 669+ E9B8 7B 34       >                dw      Dict_Ptr + 2        // xt
 669+ E9BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 669+ E9BA             >
 669+ E9BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 669+ E9BA             >
 669+ E9BA             >//              ______________________________________________________________________
 669+ E9BA             >//              Dictionary part
 669+ E9BA             >
 669+ E9BA             >                org     Dict_Ptr
 669+ 3479             >
 669+ 3479 B8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 669+ 347B             >
 669+ 347B             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 669+ 347B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 669+ 347E             >
 669+ 347E             >
 669+ 347E             >                endif           ; ok        // for other definitions it "points" the correct handler
 669+ 347E             >                // Use of "; ok" to suppress "warning[fwdref]"
 669+ 347E             >
 669+ 347E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 670+ 347E 90 25 F3 24                  dw      OVER, TO_R, TO_R        // over >r >r
 670+ 3482 F3 24
 671+ 3484 57 34 09 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 671+ 3488 4C 34
 672+ 348A 79 24                        dw      UMDIVMOD                // um/mod
 673+ 348C FE 24                        dw      R_TO                    // r>
 674+ 348E 09 25 C4 24                  dw      R_OP, XOR_OP            // r xor
 675+ 3492 2E 34 AD 25                  dw      PLUS_MINUS, SWAP        // +- swap
 676+ 3496 FE 24                        dw      R_TO                    // r>
 677+ 3498 2E 34 AD 25                  dw      PLUS_MINUS, SWAP        // +- swap
 678+ 349C E9 24                        dw      EXIT                    // ;
 679+ 349E
 680+ 349E              //  ______________________________________________________________________
 681+ 349E              //
 682+ 349E              // fm/mod       d n -- q r
 683+ 349E              // Floored division: divides a double into n giving quotient q and remainder r
 684+ 349E              // the remainder has the sign of d.
 685+ 349E                              Colon_Def FMDIVM, "FM/MOD", is_normal
 685+ 349E             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 685+ 349E             >
 685+ 349E             >Dict_Ptr        defl    $
 685+ 349E             >
 685+ 349E             >//              ______________________________________________________________________
 685+ 349E             >//              Heap part
 685+ 349E             >
 685+ 349E             >
 685+ 349E             >                org     (Heap_Ptr & $1FFF) + $E000
 685+ E9BA             >
 685+ E9BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ E9BA             >Latest_Definition defl  Heap_Ptr
 685+ E9BA             >
 685+ E9BA             >                // dummy db directives used to calculate length of namec
 685+ E9BA 46 4D 2F 4D >                db      "FM/MOD"
 685+ E9BE 4F 44       >
 685+ E9C0             >len_NFA         defl    $ - temp_NFA
 685+ E9C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ E9BA             >
 685+ E9BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ E9BB 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 685+ E9BF 4F 44       >
 685+ E9C1             >                org     $-1                 // alter last byte of Name just above to set
 685+ E9C0 C4          >                db      {b $} | END_BIT     // msb as name end
 685+ E9C1             >
 685+ E9C1 AF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 685+ E9C3             >Prev_Ptr        defl    Heap_Ptr
 685+ E9C3             >
 685+ E9C3             >mirror_Ptr      defl    $
 685+ E9C3             >
 685+ E9C3 A0 34       >                dw      Dict_Ptr + 2        // xt
 685+ E9C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 685+ E9C5             >
 685+ E9C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 685+ E9C5             >
 685+ E9C5             >//              ______________________________________________________________________
 685+ E9C5             >//              Dictionary part
 685+ E9C5             >
 685+ E9C5             >                org     Dict_Ptr
 685+ 349E             >
 685+ 349E C3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 685+ 34A0             >
 685+ 34A0             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 34A0 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 34A3             >
 685+ 34A3             >
 685+ 34A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 34A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 34A3             >
 685+ 34A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 34A3 B4 25 F3 24                  dw      DUP, TO_R               // dup >r
 687+ 34A7 7B 34                        dw      SMDIVM
 688+ 34A9 90 25 B4 25                  dw      OVER, DUP
 689+ 34AD 0E 25 0E 25                  dw      ZEQUAL, ZEQUAL
 690+ 34B1 AD 25 1F 25                  dw      SWAP, ZLESS
 691+ 34B5 09 25 1F 25                  dw      R_OP, ZLESS
 692+ 34B9 C4 24 A9 24                  dw      XOR_OP, AND_OP
 693+ 34BD 8D 20                        dw      ZBRANCH
 694+ 34BF 10 00                        dw      Fm_Mod_Else - $
 695+ 34C1 56 25                        dw          ONE_SUBTRACT
 696+ 34C3 AD 25 FE 24                  dw          SWAP, R_TO
 697+ 34C7 36 25 AD 25                  dw          PLUS, SWAP
 698+ 34CB 89 20                        dw      BRANCH
 699+ 34CD 06 00                        dw      Fm_Mod_Endif - $
 700+ 34CF              Fm_Mod_Else:
 701+ 34CF FE 24 99 25                  dw          R_TO, DROP
 702+ 34D3              Fm_Mod_Endif:
 703+ 34D3 E9 24                        dw      EXIT
 704+ 34D5              //              dw      TWO_DUP                 // 2dup
 705+ 34D5              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 706+ 34D5              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 707+ 34D5              //              dw      UMDIVMOD                // um/mod
 708+ 34D5              //              dw      SWAP                    // swap
 709+ 34D5              //              dw      II, ZLESS               // i'
 710+ 34D5              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 711+ 34D5              //              dw      R_TO                    // r>
 712+ 34D5              //              dw      PLUS_MINUS, SWAP        // +- swap
 713+ 34D5              //              dw      R_OP                    // r@
 714+ 34D5              //              dw      ZLESS                   // i'
 715+ 34D5              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 716+ 34D5              //              dw      R_TO                    // r>
 717+ 34D5              //              dw      PLUS_MINUS              // +- swap
 718+ 34D5              //              dw      EXIT                    // ;
 719+ 34D5
 720+ 34D5              //  ______________________________________________________________________
 721+ 34D5              //
 722+ 34D5              // m/mod        d n -- q r
 723+ 34D5              // multiply two integer giving a double
 724+ 34D5                              Colon_Def MDIVM, "M/MOD", is_normal
 724+ 34D5             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 724+ 34D5             >
 724+ 34D5             >Dict_Ptr        defl    $
 724+ 34D5             >
 724+ 34D5             >//              ______________________________________________________________________
 724+ 34D5             >//              Heap part
 724+ 34D5             >
 724+ 34D5             >
 724+ 34D5             >                org     (Heap_Ptr & $1FFF) + $E000
 724+ E9C5             >
 724+ E9C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 724+ E9C5             >Latest_Definition defl  Heap_Ptr
 724+ E9C5             >
 724+ E9C5             >                // dummy db directives used to calculate length of namec
 724+ E9C5 4D 2F 4D 4F >                db      "M/MOD"
 724+ E9C9 44          >
 724+ E9CA             >len_NFA         defl    $ - temp_NFA
 724+ E9CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 724+ E9C5             >
 724+ E9C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 724+ E9C6 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 724+ E9CA 44          >
 724+ E9CB             >                org     $-1                 // alter last byte of Name just above to set
 724+ E9CA C4          >                db      {b $} | END_BIT     // msb as name end
 724+ E9CB             >
 724+ E9CB BA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 724+ E9CD             >Prev_Ptr        defl    Heap_Ptr
 724+ E9CD             >
 724+ E9CD             >mirror_Ptr      defl    $
 724+ E9CD             >
 724+ E9CD D7 34       >                dw      Dict_Ptr + 2        // xt
 724+ E9CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 724+ E9CF             >
 724+ E9CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 724+ E9CF             >
 724+ E9CF             >//              ______________________________________________________________________
 724+ E9CF             >//              Dictionary part
 724+ E9CF             >
 724+ E9CF             >                org     Dict_Ptr
 724+ 34D5             >
 724+ 34D5 CD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 724+ 34D7             >
 724+ 34D7             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 724+ 34D7 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 724+ 34DA             >
 724+ 34DA             >
 724+ 34DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 724+ 34DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 724+ 34DA             >
 724+ 34DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 725+ 34DA 7B 34                        dw      SMDIVM
 726+ 34DC E9 24                        dw      EXIT                    // ;
 727+ 34DE
 728+ 34DE              //  ______________________________________________________________________
 729+ 34DE              //
 730+ 34DE              // m/           d n -- q
 731+ 34DE              // multiply two integer giving a double
 732+ 34DE                              Colon_Def MDIV, "M/", is_normal
 732+ 34DE             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 732+ 34DE             >
 732+ 34DE             >Dict_Ptr        defl    $
 732+ 34DE             >
 732+ 34DE             >//              ______________________________________________________________________
 732+ 34DE             >//              Heap part
 732+ 34DE             >
 732+ 34DE             >
 732+ 34DE             >                org     (Heap_Ptr & $1FFF) + $E000
 732+ E9CF             >
 732+ E9CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 732+ E9CF             >Latest_Definition defl  Heap_Ptr
 732+ E9CF             >
 732+ E9CF             >                // dummy db directives used to calculate length of namec
 732+ E9CF 4D 2F       >                db      "M/"
 732+ E9D1             >len_NFA         defl    $ - temp_NFA
 732+ E9D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 732+ E9CF             >
 732+ E9CF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 732+ E9D0 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 732+ E9D2             >                org     $-1                 // alter last byte of Name just above to set
 732+ E9D1 AF          >                db      {b $} | END_BIT     // msb as name end
 732+ E9D2             >
 732+ E9D2 C5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 732+ E9D4             >Prev_Ptr        defl    Heap_Ptr
 732+ E9D4             >
 732+ E9D4             >mirror_Ptr      defl    $
 732+ E9D4             >
 732+ E9D4 E0 34       >                dw      Dict_Ptr + 2        // xt
 732+ E9D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 732+ E9D6             >
 732+ E9D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 732+ E9D6             >
 732+ E9D6             >//              ______________________________________________________________________
 732+ E9D6             >//              Dictionary part
 732+ E9D6             >
 732+ E9D6             >                org     Dict_Ptr
 732+ 34DE             >
 732+ 34DE D4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 732+ 34E0             >
 732+ 34E0             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 732+ 34E0 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 732+ 34E3             >
 732+ 34E3             >
 732+ 34E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 732+ 34E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 732+ 34E3             >
 732+ 34E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 733+ 34E3 D7 34 9E 25                  dw      MDIVM, NIP
 734+ 34E7 E9 24                        dw      EXIT                    // ;
 735+ 34E9
 736+ 34E9              //  ______________________________________________________________________
 737+ 34E9              //
 738+ 34E9              // *            n1 n2 -- n3
 739+ 34E9              // multiply two integer
 740+ 34E9                              Colon_Def MUL, "*", is_normal
 740+ 34E9             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 740+ 34E9             >
 740+ 34E9             >Dict_Ptr        defl    $
 740+ 34E9             >
 740+ 34E9             >//              ______________________________________________________________________
 740+ 34E9             >//              Heap part
 740+ 34E9             >
 740+ 34E9             >
 740+ 34E9             >                org     (Heap_Ptr & $1FFF) + $E000
 740+ E9D6             >
 740+ E9D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 740+ E9D6             >Latest_Definition defl  Heap_Ptr
 740+ E9D6             >
 740+ E9D6             >                // dummy db directives used to calculate length of namec
 740+ E9D6 2A          >                db      "*"
 740+ E9D7             >len_NFA         defl    $ - temp_NFA
 740+ E9D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 740+ E9D6             >
 740+ E9D6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 740+ E9D7 2A          >                db      "*"               // name string in 7-bit ascii, but
 740+ E9D8             >                org     $-1                 // alter last byte of Name just above to set
 740+ E9D7 AA          >                db      {b $} | END_BIT     // msb as name end
 740+ E9D8             >
 740+ E9D8 CF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 740+ E9DA             >Prev_Ptr        defl    Heap_Ptr
 740+ E9DA             >
 740+ E9DA             >mirror_Ptr      defl    $
 740+ E9DA             >
 740+ E9DA EB 34       >                dw      Dict_Ptr + 2        // xt
 740+ E9DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 740+ E9DC             >
 740+ E9DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 740+ E9DC             >
 740+ E9DC             >//              ______________________________________________________________________
 740+ E9DC             >//              Dictionary part
 740+ E9DC             >
 740+ E9DC             >                org     Dict_Ptr
 740+ 34E9             >
 740+ 34E9 DA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 740+ 34EB             >
 740+ 34EB             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 740+ 34EB CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 740+ 34EE             >
 740+ 34EE             >
 740+ 34EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 740+ 34EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 740+ 34EE             >
 740+ 34EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 741+ 34EE 62 34 99 25                  dw      MMUL, DROP              // m* drop
 742+ 34F2 E9 24                        dw      EXIT                    // ;
 743+ 34F4
 744+ 34F4              //  ______________________________________________________________________
 745+ 34F4              //
 746+ 34F4              // /mod         n1 n2 -- n3 n4
 747+ 34F4              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 748+ 34F4              // The remainder has the sign of n1
 749+ 34F4                              Colon_Def DIVMOD, "/MOD", is_normal
 749+ 34F4             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 749+ 34F4             >
 749+ 34F4             >Dict_Ptr        defl    $
 749+ 34F4             >
 749+ 34F4             >//              ______________________________________________________________________
 749+ 34F4             >//              Heap part
 749+ 34F4             >
 749+ 34F4             >
 749+ 34F4             >                org     (Heap_Ptr & $1FFF) + $E000
 749+ E9DC             >
 749+ E9DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ E9DC             >Latest_Definition defl  Heap_Ptr
 749+ E9DC             >
 749+ E9DC             >                // dummy db directives used to calculate length of namec
 749+ E9DC 2F 4D 4F 44 >                db      "/MOD"
 749+ E9E0             >len_NFA         defl    $ - temp_NFA
 749+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ E9DC             >
 749+ E9DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ E9DD 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 749+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 749+ E9E0 C4          >                db      {b $} | END_BIT     // msb as name end
 749+ E9E1             >
 749+ E9E1 D6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 749+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 749+ E9E3             >
 749+ E9E3             >mirror_Ptr      defl    $
 749+ E9E3             >
 749+ E9E3 F6 34       >                dw      Dict_Ptr + 2        // xt
 749+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 749+ E9E5             >
 749+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 749+ E9E5             >
 749+ E9E5             >//              ______________________________________________________________________
 749+ E9E5             >//              Dictionary part
 749+ E9E5             >
 749+ E9E5             >                org     Dict_Ptr
 749+ 34F4             >
 749+ 34F4 E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 749+ 34F6             >
 749+ 34F6             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 34F6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 34F9             >
 749+ 34F9             >
 749+ 34F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 34F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 34F9             >
 749+ 34F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 34F9 F3 24 69 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 750+ 34FD FE 24
 751+ 34FF D7 34                        dw      MDIVM                   // m/mod
 752+ 3501 E9 24                        dw      EXIT                    // ;
 753+ 3503
 754+ 3503              //  ______________________________________________________________________
 755+ 3503              //
 756+ 3503              // /            n1 n2 -- n3
 757+ 3503              // division
 758+ 3503                              Colon_Def DIV, "/", is_normal
 758+ 3503             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 758+ 3503             >
 758+ 3503             >Dict_Ptr        defl    $
 758+ 3503             >
 758+ 3503             >//              ______________________________________________________________________
 758+ 3503             >//              Heap part
 758+ 3503             >
 758+ 3503             >
 758+ 3503             >                org     (Heap_Ptr & $1FFF) + $E000
 758+ E9E5             >
 758+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 758+ E9E5             >Latest_Definition defl  Heap_Ptr
 758+ E9E5             >
 758+ E9E5             >                // dummy db directives used to calculate length of namec
 758+ E9E5 2F          >                db      "/"
 758+ E9E6             >len_NFA         defl    $ - temp_NFA
 758+ E9E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 758+ E9E5             >
 758+ E9E5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 758+ E9E6 2F          >                db      "/"               // name string in 7-bit ascii, but
 758+ E9E7             >                org     $-1                 // alter last byte of Name just above to set
 758+ E9E6 AF          >                db      {b $} | END_BIT     // msb as name end
 758+ E9E7             >
 758+ E9E7 DC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 758+ E9E9             >Prev_Ptr        defl    Heap_Ptr
 758+ E9E9             >
 758+ E9E9             >mirror_Ptr      defl    $
 758+ E9E9             >
 758+ E9E9 05 35       >                dw      Dict_Ptr + 2        // xt
 758+ E9EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 758+ E9EB             >
 758+ E9EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 758+ E9EB             >
 758+ E9EB             >//              ______________________________________________________________________
 758+ E9EB             >//              Dictionary part
 758+ E9EB             >
 758+ E9EB             >                org     Dict_Ptr
 758+ 3503             >
 758+ 3503 E9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 758+ 3505             >
 758+ 3505             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 758+ 3505 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 758+ 3508             >
 758+ 3508             >
 758+ 3508             >                endif           ; ok        // for other definitions it "points" the correct handler
 758+ 3508             >                // Use of "; ok" to suppress "warning[fwdref]"
 758+ 3508             >
 758+ 3508             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 759+ 3508 F6 34 9E 25                  dw      DIVMOD, NIP             // /mod nip
 760+ 350C E9 24                        dw      EXIT                    // ;
 761+ 350E
 762+ 350E              //  ______________________________________________________________________
 763+ 350E              //
 764+ 350E              // mod          n1 n2 -- n3
 765+ 350E                              Colon_Def MOD, "MOD", is_normal
 765+ 350E             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 765+ 350E             >
 765+ 350E             >Dict_Ptr        defl    $
 765+ 350E             >
 765+ 350E             >//              ______________________________________________________________________
 765+ 350E             >//              Heap part
 765+ 350E             >
 765+ 350E             >
 765+ 350E             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E9EB             >
 765+ E9EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E9EB             >Latest_Definition defl  Heap_Ptr
 765+ E9EB             >
 765+ E9EB             >                // dummy db directives used to calculate length of namec
 765+ E9EB 4D 4F 44    >                db      "MOD"
 765+ E9EE             >len_NFA         defl    $ - temp_NFA
 765+ E9EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E9EB             >
 765+ E9EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E9EC 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 765+ E9EF             >                org     $-1                 // alter last byte of Name just above to set
 765+ E9EE C4          >                db      {b $} | END_BIT     // msb as name end
 765+ E9EF             >
 765+ E9EF E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E9F1             >Prev_Ptr        defl    Heap_Ptr
 765+ E9F1             >
 765+ E9F1             >mirror_Ptr      defl    $
 765+ E9F1             >
 765+ E9F1 10 35       >                dw      Dict_Ptr + 2        // xt
 765+ E9F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E9F3             >
 765+ E9F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E9F3             >
 765+ E9F3             >//              ______________________________________________________________________
 765+ E9F3             >//              Dictionary part
 765+ E9F3             >
 765+ E9F3             >                org     Dict_Ptr
 765+ 350E             >
 765+ 350E F1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 3510             >
 765+ 3510             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 3510 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 3513             >
 765+ 3513             >
 765+ 3513             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 3513             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 3513             >
 765+ 3513             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 3513 F6 34 99 25                  dw      DIVMOD, DROP            // /mod drop
 767+ 3517 E9 24                        dw      EXIT                    // ;
 768+ 3519
 769+ 3519              //  ______________________________________________________________________
 770+ 3519              //
 771+ 3519              // */mod        n1 n2 n3 -- n4 n5
 772+ 3519              // leaves the quotient n5 and the remainder n4 of the operation
 773+ 3519              // (n1 * n2) / n3. The intermediate passage through a double number
 774+ 3519              // avoids loss of precision
 775+ 3519                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 775+ 3519             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 775+ 3519             >
 775+ 3519             >Dict_Ptr        defl    $
 775+ 3519             >
 775+ 3519             >//              ______________________________________________________________________
 775+ 3519             >//              Heap part
 775+ 3519             >
 775+ 3519             >
 775+ 3519             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E9F3             >
 775+ E9F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E9F3             >Latest_Definition defl  Heap_Ptr
 775+ E9F3             >
 775+ E9F3             >                // dummy db directives used to calculate length of namec
 775+ E9F3 2A 2F 4D 4F >                db      "*/MOD"
 775+ E9F7 44          >
 775+ E9F8             >len_NFA         defl    $ - temp_NFA
 775+ E9F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E9F3             >
 775+ E9F3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E9F4 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 775+ E9F8 44          >
 775+ E9F9             >                org     $-1                 // alter last byte of Name just above to set
 775+ E9F8 C4          >                db      {b $} | END_BIT     // msb as name end
 775+ E9F9             >
 775+ E9F9 EB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E9FB             >Prev_Ptr        defl    Heap_Ptr
 775+ E9FB             >
 775+ E9FB             >mirror_Ptr      defl    $
 775+ E9FB             >
 775+ E9FB 1B 35       >                dw      Dict_Ptr + 2        // xt
 775+ E9FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E9FD             >
 775+ E9FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E9FD             >
 775+ E9FD             >//              ______________________________________________________________________
 775+ E9FD             >//              Dictionary part
 775+ E9FD             >
 775+ E9FD             >                org     Dict_Ptr
 775+ 3519             >
 775+ 3519 FB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 351B             >
 775+ 351B             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 351B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 351E             >
 775+ 351E             >
 775+ 351E             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 351E             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 351E             >
 775+ 351E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 351E F3 24 62 34                  dw      TO_R, MMUL              // >r  m*
 777+ 3522 FE 24 D7 34                  dw      R_TO, MDIVM             // r>  m/mod
 778+ 3526 E9 24                        dw      EXIT                    // ;
 779+ 3528
 780+ 3528              //  ______________________________________________________________________
 781+ 3528              //
 782+ 3528              // */          n1 n2 n3 -- n4
 783+ 3528              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 784+ 3528                              Colon_Def MUL_DIV, "*/", is_normal
 784+ 3528             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 784+ 3528             >
 784+ 3528             >Dict_Ptr        defl    $
 784+ 3528             >
 784+ 3528             >//              ______________________________________________________________________
 784+ 3528             >//              Heap part
 784+ 3528             >
 784+ 3528             >
 784+ 3528             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E9FD             >
 784+ E9FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E9FD             >Latest_Definition defl  Heap_Ptr
 784+ E9FD             >
 784+ E9FD             >                // dummy db directives used to calculate length of namec
 784+ E9FD 2A 2F       >                db      "*/"
 784+ E9FF             >len_NFA         defl    $ - temp_NFA
 784+ E9FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E9FD             >
 784+ E9FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E9FE 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 784+ EA00             >                org     $-1                 // alter last byte of Name just above to set
 784+ E9FF AF          >                db      {b $} | END_BIT     // msb as name end
 784+ EA00             >
 784+ EA00 F3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ EA02             >Prev_Ptr        defl    Heap_Ptr
 784+ EA02             >
 784+ EA02             >mirror_Ptr      defl    $
 784+ EA02             >
 784+ EA02 2A 35       >                dw      Dict_Ptr + 2        // xt
 784+ EA04             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ EA04             >
 784+ EA04             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ EA04             >
 784+ EA04             >//              ______________________________________________________________________
 784+ EA04             >//              Dictionary part
 784+ EA04             >
 784+ EA04             >                org     Dict_Ptr
 784+ 3528             >
 784+ 3528 02 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 352A             >
 784+ 352A             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 352A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 352D             >
 784+ 352D             >
 784+ 352D             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 352D             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 352D             >
 784+ 352D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 352D 1B 35                        dw     MUL_DIV_MOD              // */mod
 786+ 352F 9E 25                        dw     NIP                      // nip
 787+ 3531 E9 24                        dw     EXIT                     // ;
 788+ 3533
 789+ 3533
 790+ 3533              //  ______________________________________________________________________
 791+ 3533              //
 792+ 3533              // m/mod        ud1 u2 -- u3 ud4
 793+ 3533              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 794+ 3533              // All terms are unsigned.
 795+ 3533              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 796+ 3533              //              dw      TO_R                    // >r           ( ud1 )
 797+ 3533              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 798+ 3533              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 799+ 3533              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 800+ 3533              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 801+ 3533              //              dw      EXIT                    // ;
 802+ 3533
 803+ 3533              //  ______________________________________________________________________
 804+ 3533              //
 805+ 3533              // (line)       n1 n2 -- a b
 806+ 3533              // sends the line n1 of block n2 to the disk buffer.
 807+ 3533              // it returns the address a and ca counter b = C/L meaning a whole line.
 808+ 3533                              Colon_Def CLINE, "(LINE)", is_normal
 808+ 3533             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 808+ 3533             >
 808+ 3533             >Dict_Ptr        defl    $
 808+ 3533             >
 808+ 3533             >//              ______________________________________________________________________
 808+ 3533             >//              Heap part
 808+ 3533             >
 808+ 3533             >
 808+ 3533             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ EA04             >
 808+ EA04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ EA04             >Latest_Definition defl  Heap_Ptr
 808+ EA04             >
 808+ EA04             >                // dummy db directives used to calculate length of namec
 808+ EA04 28 4C 49 4E >                db      "(LINE)"
 808+ EA08 45 29       >
 808+ EA0A             >len_NFA         defl    $ - temp_NFA
 808+ EA0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ EA04             >
 808+ EA04 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ EA05 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 808+ EA09 45 29       >
 808+ EA0B             >                org     $-1                 // alter last byte of Name just above to set
 808+ EA0A A9          >                db      {b $} | END_BIT     // msb as name end
 808+ EA0B             >
 808+ EA0B FD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ EA0D             >Prev_Ptr        defl    Heap_Ptr
 808+ EA0D             >
 808+ EA0D             >mirror_Ptr      defl    $
 808+ EA0D             >
 808+ EA0D 35 35       >                dw      Dict_Ptr + 2        // xt
 808+ EA0F             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ EA0F             >
 808+ EA0F             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ EA0F             >
 808+ EA0F             >//              ______________________________________________________________________
 808+ EA0F             >//              Dictionary part
 808+ EA0F             >
 808+ EA0F             >                org     Dict_Ptr
 808+ 3533             >
 808+ 3533 0D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 3535             >
 808+ 3535             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 3535 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 3538             >
 808+ 3538             >
 808+ 3538             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 3538             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 3538             >
 808+ 3538             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 3538 F3 24                        dw      TO_R                    // >r
 810+ 353A 3A 27                        dw      CL                      // c/l
 811+ 353C 41 27 1B 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 812+ 3540 FE 24                        dw      R_TO                    // r>
 813+ 3542 48 27 EB 34                  dw      BSCR, MUL, PLUS         // b/scr * +
 813+ 3546 36 25
 814+ 3548 1E 37                        dw      BLOCK                   // block   ( forward )
 815+ 354A 36 25                        dw      PLUS                    // +
 816+ 354C 3A 27                        dw      CL                      // c/l
 817+ 354E E9 24                        dw      EXIT                    // ;
 818+ 3550
 819+ 3550              //  ______________________________________________________________________
 820+ 3550              //
 821+ 3550              // .line        n1 n2 --
 822+ 3550              // Sends to output line  n1  of screen n2.
 823+ 3550                              Colon_Def DOT_LINE, ".LINE", is_normal
 823+ 3550             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 823+ 3550             >
 823+ 3550             >Dict_Ptr        defl    $
 823+ 3550             >
 823+ 3550             >//              ______________________________________________________________________
 823+ 3550             >//              Heap part
 823+ 3550             >
 823+ 3550             >
 823+ 3550             >                org     (Heap_Ptr & $1FFF) + $E000
 823+ EA0F             >
 823+ EA0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ EA0F             >Latest_Definition defl  Heap_Ptr
 823+ EA0F             >
 823+ EA0F             >                // dummy db directives used to calculate length of namec
 823+ EA0F 2E 4C 49 4E >                db      ".LINE"
 823+ EA13 45          >
 823+ EA14             >len_NFA         defl    $ - temp_NFA
 823+ EA14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ EA0F             >
 823+ EA0F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ EA10 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 823+ EA14 45          >
 823+ EA15             >                org     $-1                 // alter last byte of Name just above to set
 823+ EA14 C5          >                db      {b $} | END_BIT     // msb as name end
 823+ EA15             >
 823+ EA15 04 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 823+ EA17             >Prev_Ptr        defl    Heap_Ptr
 823+ EA17             >
 823+ EA17             >mirror_Ptr      defl    $
 823+ EA17             >
 823+ EA17 52 35       >                dw      Dict_Ptr + 2        // xt
 823+ EA19             >Heap_Ptr        defl    $ - $E000           // save current HP
 823+ EA19             >
 823+ EA19             >Current_HP      defl  $ - $E000             // used to set HP once!
 823+ EA19             >
 823+ EA19             >//              ______________________________________________________________________
 823+ EA19             >//              Dictionary part
 823+ EA19             >
 823+ EA19             >                org     Dict_Ptr
 823+ 3550             >
 823+ 3550 17 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 823+ 3552             >
 823+ 3552             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 3552 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 3555             >
 823+ 3555             >
 823+ 3555             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 3555             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 3555             >
 823+ 3555             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 3555 35 35 19 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 824+ 3559 02 2C
 825+ 355B E9 24                        dw      EXIT                    // ;
 826+ 355D
 827+ 355D              //  ______________________________________________________________________
 828+ 355D              //
 829+ 355D              // message       n1 n2 --
 830+ 355D              // prints error message to current channel.
 831+ 355D              // if WARNING is 0, prints "MSG#n".
 832+ 355D              // if WARNING is 1, prints line n of screen 4.
 833+ 355D              // if WARNING is -1, see ERROR
 834+ 355D              // value can be negative or beyond block 4.
 835+ 355D                              Colon_Def MESSAGE, "MESSAGE", is_normal
 835+ 355D             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 835+ 355D             >
 835+ 355D             >Dict_Ptr        defl    $
 835+ 355D             >
 835+ 355D             >//              ______________________________________________________________________
 835+ 355D             >//              Heap part
 835+ 355D             >
 835+ 355D             >
 835+ 355D             >                org     (Heap_Ptr & $1FFF) + $E000
 835+ EA19             >
 835+ EA19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 835+ EA19             >Latest_Definition defl  Heap_Ptr
 835+ EA19             >
 835+ EA19             >                // dummy db directives used to calculate length of namec
 835+ EA19 4D 45 53 53 >                db      "MESSAGE"
 835+ EA1D 41 47 45    >
 835+ EA20             >len_NFA         defl    $ - temp_NFA
 835+ EA20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 835+ EA19             >
 835+ EA19 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 835+ EA1A 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 835+ EA1E 41 47 45    >
 835+ EA21             >                org     $-1                 // alter last byte of Name just above to set
 835+ EA20 C5          >                db      {b $} | END_BIT     // msb as name end
 835+ EA21             >
 835+ EA21 0F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 835+ EA23             >Prev_Ptr        defl    Heap_Ptr
 835+ EA23             >
 835+ EA23             >mirror_Ptr      defl    $
 835+ EA23             >
 835+ EA23 5F 35       >                dw      Dict_Ptr + 2        // xt
 835+ EA25             >Heap_Ptr        defl    $ - $E000           // save current HP
 835+ EA25             >
 835+ EA25             >Current_HP      defl  $ - $E000             // used to set HP once!
 835+ EA25             >
 835+ EA25             >//              ______________________________________________________________________
 835+ EA25             >//              Dictionary part
 835+ EA25             >
 835+ EA25             >                org     Dict_Ptr
 835+ 355D             >
 835+ 355D 23 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 835+ 355F             >
 835+ 355F             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 835+ 355F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 835+ 3562             >
 835+ 3562             >
 835+ 3562             >                endif           ; ok        // for other definitions it "points" the correct handler
 835+ 3562             >                // Use of "; ok" to suppress "warning[fwdref]"
 835+ 3562             >
 835+ 3562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 836+ 3562 81 27 1E 26                  dw      WARNING, FETCH          // warning @
 837+ 3566                                                              // if
 838+ 3566 8D 20                        dw      ZBRANCH
 839+ 3568 12 00                        dw      Message_Else - $
 840+ 356A 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 840+ 356E 36 25
 841+ 3570 1E 27                        dw          TWO                 //      2
 842+ 3572 52 35                        dw          DOT_LINE            //      .line
 843+ 3574 FE 28                        dw          SPACE               //      space
 844+ 3576                                                              // else
 845+ 3576
 846+ 3576 89 20                        dw      BRANCH
 847+ 3578 0B 00                        dw      Message_ENdif - $
 848+ 357A              Message_Else:
 849+ 357A 9F 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 850+ 357C 04 6D 73 67                  db          4, "msg#"
 850+ 3580 23
 851+ 3581 4F 3C                        dw          DOT                 //      .  ( forward )
 852+ 3583              Message_ENdif:                                  // endif
 853+ 3583 E9 24                        dw      EXIT                    // ;
 854+ 3585
 855+ 3585
 856+ 3585              //  ______________________________________________________________________
 857+ 3585              //
 858+ 3585              // device
 859+ 3585                              Variable_Def DEVICE,   "DEVICE",   2
 859+ 3585             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 859+ 3585             >
 859+ 3585             >Dict_Ptr        defl    $
 859+ 3585             >
 859+ 3585             >//              ______________________________________________________________________
 859+ 3585             >//              Heap part
 859+ 3585             >
 859+ 3585             >
 859+ 3585             >                org     (Heap_Ptr & $1FFF) + $E000
 859+ EA25             >
 859+ EA25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ EA25             >Latest_Definition defl  Heap_Ptr
 859+ EA25             >
 859+ EA25             >                // dummy db directives used to calculate length of namec
 859+ EA25 44 45 56 49 >                db      "DEVICE"
 859+ EA29 43 45       >
 859+ EA2B             >len_NFA         defl    $ - temp_NFA
 859+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ EA25             >
 859+ EA25 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ EA26 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 859+ EA2A 43 45       >
 859+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
 859+ EA2B C5          >                db      {b $} | END_BIT     // msb as name end
 859+ EA2C             >
 859+ EA2C 19 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 859+ EA2E             >Prev_Ptr        defl    Heap_Ptr
 859+ EA2E             >
 859+ EA2E             >mirror_Ptr      defl    $
 859+ EA2E             >
 859+ EA2E 87 35       >                dw      Dict_Ptr + 2        // xt
 859+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
 859+ EA30             >
 859+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
 859+ EA30             >
 859+ EA30             >//              ______________________________________________________________________
 859+ EA30             >//              Dictionary part
 859+ EA30             >
 859+ EA30             >                org     Dict_Ptr
 859+ 3585             >
 859+ 3585 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 859+ 3587             >
 859+ 3587             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 3587 CD F7 26    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 859+ 358A             >
 859+ 358A             >
 859+ 358A             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 358A             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 358A             >
 859+ 358A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 358A 02 00       >                dw      2
 860+ 358C
 861+ 358C              //  ______________________________________________________________________
 862+ 358C
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L2.asm
 142  358C                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt1.asm
   1+ 358C              //  ______________________________________________________________________
   2+ 358C              //
   3+ 358C              //  next-opt.asm
   4+ 358C              //
   5+ 358C              //  ZX Spectrum Next - peculiar definitions
   6+ 358C              //  ______________________________________________________________________
   7+ 358C
   8+ 358C              //  ______________________________________________________________________
   9+ 358C              //
  10+ 358C              // reg@         n -- b
  11+ 358C              // read Next REGister n giving byte b
  12+ 358C              //
  13+ 358C              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 358C              //              dw      LIT, $243B
  15+ 358C              //              dw      PSTORE
  16+ 358C              //              dw      LIT, $253B
  17+ 358C              //              dw      PFETCH
  18+ 358C              //              dw      EXIT
  19+ 358C                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 358C             >
  19+ 358C             >Dict_Ptr        defl    $
  19+ 358C             >
  19+ 358C             >//              ______________________________________________________________________
  19+ 358C             >//              Heap part
  19+ 358C             >
  19+ 358C             >
  19+ 358C             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA30             >
  19+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA30             >Latest_Definition defl  Heap_Ptr
  19+ EA30             >
  19+ EA30             >                // dummy db directives used to calculate length of namec
  19+ EA30 52 45 47 40 >                db      "REG@"
  19+ EA34             >len_NFA         defl    $ - temp_NFA
  19+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA30             >
  19+ EA30 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA31 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA35             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA34 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA35             >
  19+ EA35 25 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA37             >Prev_Ptr        defl    Heap_Ptr
  19+ EA37             >
  19+ EA37             >mirror_Ptr      defl    $
  19+ EA37             >
  19+ EA37 8E 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA39             >
  19+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA39             >
  19+ EA39             >//              ______________________________________________________________________
  19+ EA39             >//              Dictionary part
  19+ EA39             >
  19+ EA39             >                org     Dict_Ptr
  19+ 358C             >
  19+ 358C 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 358E             >
  19+ 358E             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 358E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 358E ~           >
  19+ 358E ~           >
  19+ 358E             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 358E             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 358E             >
  19+ 358E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 358E D9                           exx
  21+ 358F 01 3B 24                     ld      bc, $243B
  22+ 3592 E1                           pop     hl
  23+ 3593 ED 69                        out     (c), l
  24+ 3595 04                           inc     b
  25+ 3596 ED 68                        in      l, (c)
  26+ 3598 E5                           push    hl
  27+ 3599 D9                           exx
  28+ 359A                              next
  28+ 359A DD E9       >                jp      (ix)
  29+ 359C
  30+ 359C
  31+ 359C              //  ______________________________________________________________________
  32+ 359C              //
  33+ 359C              // reg!         b n --
  34+ 359C              // write value b to Next REGister n
  35+ 359C              //
  36+ 359C              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 359C              //              dw      LIT, $243B
  38+ 359C              //              dw      PSTORE
  39+ 359C              //              dw      LIT, $253B
  40+ 359C              //              dw      PSTORE
  41+ 359C              //              dw      EXIT
  42+ 359C                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 359C             >
  42+ 359C             >Dict_Ptr        defl    $
  42+ 359C             >
  42+ 359C             >//              ______________________________________________________________________
  42+ 359C             >//              Heap part
  42+ 359C             >
  42+ 359C             >
  42+ 359C             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA39             >
  42+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA39             >Latest_Definition defl  Heap_Ptr
  42+ EA39             >
  42+ EA39             >                // dummy db directives used to calculate length of namec
  42+ EA39 52 45 47 21 >                db      "REG!"
  42+ EA3D             >len_NFA         defl    $ - temp_NFA
  42+ EA3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA39             >
  42+ EA39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA3A 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA3E             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA3D A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA3E             >
  42+ EA3E 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA40             >Prev_Ptr        defl    Heap_Ptr
  42+ EA40             >
  42+ EA40             >mirror_Ptr      defl    $
  42+ EA40             >
  42+ EA40 9E 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA42             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA42             >
  42+ EA42             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA42             >
  42+ EA42             >//              ______________________________________________________________________
  42+ EA42             >//              Dictionary part
  42+ EA42             >
  42+ EA42             >                org     Dict_Ptr
  42+ 359C             >
  42+ 359C 40 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 359E             >
  42+ 359E             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 359E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 359E ~           >
  42+ 359E ~           >
  42+ 359E             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 359E             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 359E             >
  42+ 359E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 359E D9                           exx
  44+ 359F 01 3B 24                     ld      bc, $243B
  45+ 35A2 E1                           pop     hl
  46+ 35A3 ED 69                        out     (c), l
  47+ 35A5 04                           inc     b
  48+ 35A6 E1                           pop     hl
  49+ 35A7 ED 69                        out     (c), l
  50+ 35A9 D9                           exx
  51+ 35AA                              next
  51+ 35AA DD E9       >                jp      (ix)
  52+ 35AC
  53+ 35AC
  54+ 35AC              //  ______________________________________________________________________
  55+ 35AC              //
  56+ 35AC              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35AC              // NextZXOS call wrapper.
  58+ 35AC              //  n1 = hl register parameter value
  59+ 35AC              //  n2 = de register parameter value
  60+ 35AC              //  n3 = bc register parameter value
  61+ 35AC              //  n4 =  a register parameter value
  62+ 35AC              //   a = routine address in ROM 3
  63+ 35AC              // ----
  64+ 35AC              //  n5 = hl returned value
  65+ 35AC              //  n6 = de returned value
  66+ 35AC              //  n7 = bc returned value
  67+ 35AC              //  n8 =  a returned value
  68+ 35AC              //   f
  69+ 35AC                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35AC             >
  69+ 35AC             >Dict_Ptr        defl    $
  69+ 35AC             >
  69+ 35AC             >//              ______________________________________________________________________
  69+ 35AC             >//              Heap part
  69+ 35AC             >
  69+ 35AC             >
  69+ 35AC             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA42             >
  69+ EA42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA42             >Latest_Definition defl  Heap_Ptr
  69+ EA42             >
  69+ EA42             >                // dummy db directives used to calculate length of namec
  69+ EA42 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA46 44 4F 53    >
  69+ EA49             >len_NFA         defl    $ - temp_NFA
  69+ EA49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA42             >
  69+ EA42 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA43 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA47 44 4F 53    >
  69+ EA4A             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA49 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA4A             >
  69+ EA4A 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA4C             >Prev_Ptr        defl    Heap_Ptr
  69+ EA4C             >
  69+ EA4C             >mirror_Ptr      defl    $
  69+ EA4C             >
  69+ EA4C AE 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA4E             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA4E             >
  69+ EA4E             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA4E             >
  69+ EA4E             >//              ______________________________________________________________________
  69+ EA4E             >//              Dictionary part
  69+ EA4E             >
  69+ EA4E             >                org     Dict_Ptr
  69+ 35AC             >
  69+ 35AC 4C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35AE             >
  69+ 35AE             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35AE ~           >
  69+ 35AE ~           >
  69+ 35AE             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35AE             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35AE             >
  69+ 35AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35AE D9                            exx
  71+ 35AF E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35B0 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35B1 7B                            ld      a, e
  74+ 35B2 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35B3 D1                            pop     de                  // de' argument              //  n1
  76+ 35B4 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35B5 D9                           exx
  78+ 35B6 E1                           pop     hl                  // entry address a
  79+ 35B7 DD E5                        push    ix
  80+ 35B9 D5                           push    de
  81+ 35BA C5                           push    bc
  82+ 35BB EB                           ex      de, hl              // de is entry address
  83+ 35BC              //              ld      (SP_Saved), sp
  84+ 35BC              //              ld      sp, Cold_origin - 5
  85+ 35BC              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35BC 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35BE F3                           di
  88+ 35BF CF                           rst     08
  89+ 35C0 94                           db      $94
  90+ 35C1 FB                           ei
  91+ 35C2                      ////    ld      a, (Saved_MMU + 1)
  92+ 35C2                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 35C2
  94+ 35C2              //              ld      sp, (SP_Saved)
  95+ 35C2              //              push    ix
  96+ 35C2              //              pop     hl
  97+ 35C2              //              ld      (IX_Echo), hl
  98+ 35C2 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 35C6
 100+ 35C6 D9                           exx
 101+ 35C7 C1                           pop     bc
 102+ 35C8 D1                           pop     de
 103+ 35C9 DD E1                        pop     ix
 104+ 35CB D9                            exx
 105+ 35CC E5                            push    hl
 106+ 35CD D5                            push    de
 107+ 35CE C5                            push    bc
 108+ 35CF 26 00                         ld      h, 0
 109+ 35D1 6F                            ld      l, a
 110+ 35D2 E5                            push    hl
 111+ 35D3 D9                           exx
 112+ 35D4 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 35D6 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 35D7 E5                           push    hl
 115+ 35D8                              next
 115+ 35D8 DD E9       >                jp      (ix)
 116+ 35DA
 117+ 35DA              //  ______________________________________________________________________
 118+ 35DA              //
 119+ 35DA              // blk-fh
 120+ 35DA              // MOVED AT THE END.
 121+ 35DA              //              Variable_Def BLK_FH,   "BLK-FH",   1
 122+ 35DA              //
 123+ 35DA              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 124+ 35DA              // Len_Filename:   db      30
 125+ 35DA              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 126+ 35DA              //                 ds      32
 127+ 35DA
 128+ 35DA              //  ______________________________________________________________________
 129+ 35DA              //
 130+ 35DA              // blk-seek     n --
 131+ 35DA              // seek block n  within blocks!.bin  file
 132+ 35DA                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 35DA             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 35DA             >
 132+ 35DA             >Dict_Ptr        defl    $
 132+ 35DA             >
 132+ 35DA             >//              ______________________________________________________________________
 132+ 35DA             >//              Heap part
 132+ 35DA             >
 132+ 35DA             >
 132+ 35DA             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA4E             >
 132+ EA4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA4E             >Latest_Definition defl  Heap_Ptr
 132+ EA4E             >
 132+ EA4E             >                // dummy db directives used to calculate length of namec
 132+ EA4E 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA52 53 45 45 4B >
 132+ EA56             >len_NFA         defl    $ - temp_NFA
 132+ EA56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA4E             >
 132+ EA4E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA4F 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA53 53 45 45 4B >
 132+ EA57             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA56 CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA57             >
 132+ EA57 42 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA59             >Prev_Ptr        defl    Heap_Ptr
 132+ EA59             >
 132+ EA59             >mirror_Ptr      defl    $
 132+ EA59             >
 132+ EA59 DC 35       >                dw      Dict_Ptr + 2        // xt
 132+ EA5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA5B             >
 132+ EA5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA5B             >
 132+ EA5B             >//              ______________________________________________________________________
 132+ EA5B             >//              Dictionary part
 132+ EA5B             >
 132+ EA5B             >                org     Dict_Ptr
 132+ 35DA             >
 132+ 35DA 59 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 35DC             >
 132+ 35DC             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 35DC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 35DF             >
 132+ 35DF             >
 132+ 35DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 35DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 35DF             >
 132+ 35DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 35DF 41 27 62 34                  dw  BBUF, MMUL
 134+ 35E3 1F 3F 1E 26                  dw  BLK_FH, FETCH
 135+ 35E7 6C 23                        dw  F_SEEK
 136+ 35E9 3D 20 2D 00                  dw  LIT, $2D, QERROR
 136+ 35ED 69 2A
 137+ 35EF E9 24                        dw  EXIT
 138+ 35F1
 139+ 35F1              //  ______________________________________________________________________
 140+ 35F1              //
 141+ 35F1              // blk-read     n --
 142+ 35F1              // seek block n  within blocks!.bin  file
 143+ 35F1                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 35F1             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 35F1             >
 143+ 35F1             >Dict_Ptr        defl    $
 143+ 35F1             >
 143+ 35F1             >//              ______________________________________________________________________
 143+ 35F1             >//              Heap part
 143+ 35F1             >
 143+ 35F1             >
 143+ 35F1             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA5B             >
 143+ EA5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA5B             >Latest_Definition defl  Heap_Ptr
 143+ EA5B             >
 143+ EA5B             >                // dummy db directives used to calculate length of namec
 143+ EA5B 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA5F 52 45 41 44 >
 143+ EA63             >len_NFA         defl    $ - temp_NFA
 143+ EA63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA5B             >
 143+ EA5B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA5C 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA60 52 45 41 44 >
 143+ EA64             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA63 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA64             >
 143+ EA64 4E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA66             >Prev_Ptr        defl    Heap_Ptr
 143+ EA66             >
 143+ EA66             >mirror_Ptr      defl    $
 143+ EA66             >
 143+ EA66 F3 35       >                dw      Dict_Ptr + 2        // xt
 143+ EA68             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA68             >
 143+ EA68             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA68             >
 143+ EA68             >//              ______________________________________________________________________
 143+ EA68             >//              Dictionary part
 143+ EA68             >
 143+ EA68             >                org     Dict_Ptr
 143+ 35F1             >
 143+ 35F1 66 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 35F3             >
 143+ 35F3             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 35F3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 35F6             >
 143+ 35F6             >
 143+ 35F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 35F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 35F6             >
 143+ 35F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 35F6 DC 35                        dw  BLK_SEEK
 145+ 35F8 41 27                        dw  BBUF
 146+ 35FA 1F 3F 1E 26                  dw  BLK_FH, FETCH
 147+ 35FE BD 23                        dw  F_READ
 148+ 3600 3D 20 2E 00                  dw  LIT, $2E, QERROR
 148+ 3604 69 2A
 149+ 3606 99 25                        dw  DROP
 150+ 3608 E9 24                        dw  EXIT
 151+ 360A
 152+ 360A              //  ______________________________________________________________________
 153+ 360A              //
 154+ 360A              // blk-write     n --
 155+ 360A              // seek block n  within blocks!.bin  file
 156+ 360A                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 360A             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 360A             >
 156+ 360A             >Dict_Ptr        defl    $
 156+ 360A             >
 156+ 360A             >//              ______________________________________________________________________
 156+ 360A             >//              Heap part
 156+ 360A             >
 156+ 360A             >
 156+ 360A             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA68             >
 156+ EA68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA68             >Latest_Definition defl  Heap_Ptr
 156+ EA68             >
 156+ EA68             >                // dummy db directives used to calculate length of namec
 156+ EA68 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA6C 57 52 49 54 >
 156+ EA70 45          >
 156+ EA71             >len_NFA         defl    $ - temp_NFA
 156+ EA71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA68             >
 156+ EA68 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA69 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA6D 57 52 49 54 >
 156+ EA71 45          >
 156+ EA72             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA71 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA72             >
 156+ EA72 5B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA74             >Prev_Ptr        defl    Heap_Ptr
 156+ EA74             >
 156+ EA74             >mirror_Ptr      defl    $
 156+ EA74             >
 156+ EA74 0C 36       >                dw      Dict_Ptr + 2        // xt
 156+ EA76             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA76             >
 156+ EA76             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA76             >
 156+ EA76             >//              ______________________________________________________________________
 156+ EA76             >//              Dictionary part
 156+ EA76             >
 156+ EA76             >                org     Dict_Ptr
 156+ 360A             >
 156+ 360A 74 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 360C             >
 156+ 360C             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 360C CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 360F             >
 156+ 360F             >
 156+ 360F             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 360F             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 360F             >
 156+ 360F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 360F DC 35                        dw  BLK_SEEK
 158+ 3611 41 27                        dw  BBUF
 159+ 3613 1F 3F 1E 26                  dw  BLK_FH, FETCH
 160+ 3617 DD 23                        dw  F_WRITE
 161+ 3619 3D 20 2F 00                  dw  LIT, $2F, QERROR
 161+ 361D 69 2A
 162+ 361F 99 25                        dw  DROP
 163+ 3621 E9 24                        dw  EXIT
 164+ 3623
 165+ 3623              //  ______________________________________________________________________
 166+ 3623              //
 167+ 3623              // blk-init     n --
 168+ 3623              // seek block n  within blocks!.bin  file
 169+ 3623                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 3623             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 3623             >
 169+ 3623             >Dict_Ptr        defl    $
 169+ 3623             >
 169+ 3623             >//              ______________________________________________________________________
 169+ 3623             >//              Heap part
 169+ 3623             >
 169+ 3623             >
 169+ 3623             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA76             >
 169+ EA76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA76             >Latest_Definition defl  Heap_Ptr
 169+ EA76             >
 169+ EA76             >                // dummy db directives used to calculate length of namec
 169+ EA76 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA7A 49 4E 49 54 >
 169+ EA7E             >len_NFA         defl    $ - temp_NFA
 169+ EA7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA76             >
 169+ EA76 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA77 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA7B 49 4E 49 54 >
 169+ EA7F             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA7E D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA7F             >
 169+ EA7F 68 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA81             >Prev_Ptr        defl    Heap_Ptr
 169+ EA81             >
 169+ EA81             >mirror_Ptr      defl    $
 169+ EA81             >
 169+ EA81 25 36       >                dw      Dict_Ptr + 2        // xt
 169+ EA83             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EA83             >
 169+ EA83             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EA83             >
 169+ EA83             >//              ______________________________________________________________________
 169+ EA83             >//              Dictionary part
 169+ EA83             >
 169+ EA83             >                org     Dict_Ptr
 169+ 3623             >
 169+ 3623 81 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 3625             >
 169+ 3625             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 3625 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 3628             >
 169+ 3628             >
 169+ 3628             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 3628             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 3628             >
 169+ 3628             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 3628 1F 3F 1E 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 362C 89 23 99 25
 171+ 3630 26 3F 4F 25                  dw  BLK_FNAME, ONE_PLUS
 172+ 3634 35 28 25 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 3638 F1 23
 173+ 363A                          //    dw  LIT, $2C, QERROR
 174+ 363A
 175+ 363A 8D 20                        dw  ZBRANCH
 176+ 363C 0E 00                        dw  Blk_Init_Endif - $
 177+ 363E
 178+ 363E 3D 20 CF FF                  dw  LIT, $FFCF                  // PATCH op-code RST $08, $FF
 179+ 3642 3D 20 29 34                  dw  LIT, Exit_with_error
 180+ 3646 28 26                        dw  STORE
 181+ 3648
 182+ 3648 E7 33                        dw  BASIC
 183+ 364A              Blk_Init_Endif:
 184+ 364A
 185+ 364A 1F 3F 28 26                  dw  BLK_FH, STORE
 186+ 364E E9 24                        dw  EXIT
 187+ 3650
 188+ 3650              //  ______________________________________________________________________
 189+ 3650              //
 190+ 3650              // #sec
 191+ 3650              // number of 512-Byte "sectors" available on thie sysstem.
 192+ 3650              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 193+ 3650
 194+ 3650                              Constant_Def NSEC , "#SEC", 32767
 194+ 3650             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 194+ 3650             >
 194+ 3650             >Dict_Ptr        defl    $
 194+ 3650             >
 194+ 3650             >//              ______________________________________________________________________
 194+ 3650             >//              Heap part
 194+ 3650             >
 194+ 3650             >
 194+ 3650             >                org     (Heap_Ptr & $1FFF) + $E000
 194+ EA83             >
 194+ EA83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ EA83             >Latest_Definition defl  Heap_Ptr
 194+ EA83             >
 194+ EA83             >                // dummy db directives used to calculate length of namec
 194+ EA83 23 53 45 43 >                db      "#SEC"
 194+ EA87             >len_NFA         defl    $ - temp_NFA
 194+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ EA83             >
 194+ EA83 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ EA84 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 194+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 194+ EA87 C3          >                db      {b $} | END_BIT     // msb as name end
 194+ EA88             >
 194+ EA88 76 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 194+ EA8A             >
 194+ EA8A             >mirror_Ptr      defl    $
 194+ EA8A             >
 194+ EA8A 52 36       >                dw      Dict_Ptr + 2        // xt
 194+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 194+ EA8C             >
 194+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 194+ EA8C             >
 194+ EA8C             >//              ______________________________________________________________________
 194+ EA8C             >//              Dictionary part
 194+ EA8C             >
 194+ EA8C             >                org     Dict_Ptr
 194+ 3650             >
 194+ 3650 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 194+ 3652             >
 194+ 3652             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 3652 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 194+ 3655             >
 194+ 3655             >
 194+ 3655             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 3655             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 3655             >
 194+ 3655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 3655 FF 7F       >                dw      32767
 195+ 3657
 196+ 3657              //  ______________________________________________________________________
 197+ 3657
 198+ 3657
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt1.asm
 143  3657                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L3.asm
   1+ 3657              //  ______________________________________________________________________
   2+ 3657              //
   3+ 3657              //  L3.asm
   4+ 3657              //
   5+ 3657              //  Continuation of L2.asm
   6+ 3657              //  I/O Block definitions
   7+ 3657              //  ______________________________________________________________________
   8+ 3657
   9+ 3657
  10+ 3657              //  ______________________________________________________________________
  11+ 3657              //
  12+ 3657              // r/w          a n f --
  13+ 3657              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3657                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3657             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3657             >
  14+ 3657             >Dict_Ptr        defl    $
  14+ 3657             >
  14+ 3657             >//              ______________________________________________________________________
  14+ 3657             >//              Heap part
  14+ 3657             >
  14+ 3657             >
  14+ 3657             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA8C             >
  14+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA8C             >Latest_Definition defl  Heap_Ptr
  14+ EA8C             >
  14+ EA8C             >                // dummy db directives used to calculate length of namec
  14+ EA8C 52 2F 57    >                db      "R/W"
  14+ EA8F             >len_NFA         defl    $ - temp_NFA
  14+ EA8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA8C             >
  14+ EA8C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA8D 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA90             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA8F D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA90             >
  14+ EA90 83 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA92             >Prev_Ptr        defl    Heap_Ptr
  14+ EA92             >
  14+ EA92             >mirror_Ptr      defl    $
  14+ EA92             >
  14+ EA92 59 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA94             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA94             >
  14+ EA94             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA94             >
  14+ EA94             >//              ______________________________________________________________________
  14+ EA94             >//              Dictionary part
  14+ EA94             >
  14+ EA94             >                org     Dict_Ptr
  14+ 3657             >
  14+ 3657 92 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 3659             >
  14+ 3659             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 3659 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 365C             >
  14+ 365C             >
  14+ 365C             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 365C             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 365C             >
  14+ 365C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 365C F3 24                        dw      TO_R                    // >r
  16+ 365E 56 25                        dw      ONE_SUBTRACT            // 1-
  17+ 3660 B4 25 1F 25                  dw      DUP, ZLESS              // dup 0<
  18+ 3664 90 25 52 36                  dw      OVER, NSEC              // over #sec
  19+ 3668 56 25 A6 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 366C B8 24                        dw      OR_OP                   // or
  21+ 366E 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 3672 69 2A
  22+ 3674 FE 24                        dw      R_TO                    // r>
  23+ 3676                                                              // if
  24+ 3676 8D 20                        dw      ZBRANCH
  25+ 3678 08 00                        dw      Read_Write_Else - $
  26+ 367A F3 35                        dw          BLK_READ            //      blk-read
  27+ 367C 89 20                        dw      BRANCH
  28+ 367E 04 00                        dw      Read_Write_Endif - $
  29+ 3680              Read_Write_Else:                                // else
  30+ 3680 0C 36                        dw          BLK_WRITE           //      blk-write
  31+ 3682              Read_Write_Endif:                               // endif
  32+ 3682 E9 24                        dw      EXIT                    // ;
  33+ 3684
  34+ 3684
  35+ 3684              //  ______________________________________________________________________
  36+ 3684              //
  37+ 3684              // +buf        a1 -- a2 f
  38+ 3684              // advences to next buffer, cyclically rotating along them
  39+ 3684                              Colon_Def PBUF, "+BUF", is_normal
  39+ 3684             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 3684             >
  39+ 3684             >Dict_Ptr        defl    $
  39+ 3684             >
  39+ 3684             >//              ______________________________________________________________________
  39+ 3684             >//              Heap part
  39+ 3684             >
  39+ 3684             >
  39+ 3684             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA94             >
  39+ EA94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA94             >Latest_Definition defl  Heap_Ptr
  39+ EA94             >
  39+ EA94             >                // dummy db directives used to calculate length of namec
  39+ EA94 2B 42 55 46 >                db      "+BUF"
  39+ EA98             >len_NFA         defl    $ - temp_NFA
  39+ EA98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA94             >
  39+ EA94 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA95 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EA99             >                org     $-1                 // alter last byte of Name just above to set
  39+ EA98 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EA99             >
  39+ EA99 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EA9B             >Prev_Ptr        defl    Heap_Ptr
  39+ EA9B             >
  39+ EA9B             >mirror_Ptr      defl    $
  39+ EA9B             >
  39+ EA9B 86 36       >                dw      Dict_Ptr + 2        // xt
  39+ EA9D             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EA9D             >
  39+ EA9D             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EA9D             >
  39+ EA9D             >//              ______________________________________________________________________
  39+ EA9D             >//              Dictionary part
  39+ EA9D             >
  39+ EA9D             >                org     Dict_Ptr
  39+ 3684             >
  39+ 3684 9B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 3686             >
  39+ 3686             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 3686 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 3689             >
  39+ 3689             >
  39+ 3689             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 3689             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 3689             >
  39+ 3689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 3689 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 368D 36 25
  41+ 368F B4 25 9F 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 3693 1E 26
  42+ 3695 80 28                        dw      EQUALS                  // =
  43+ 3697                                                              // if
  44+ 3697 8D 20                        dw      ZBRANCH
  45+ 3699 08 00                        dw      PBuf_Endif - $
  46+ 369B 99 25                        dw          DROP                //      drop
  47+ 369D 99 27 1E 26                  dw          FIRST, FETCH        //      first @
  48+ 36A1              PBuf_Endif:                                     // endif
  49+ 36A1 B4 25 0B 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36A5 1E 26
  50+ 36A7 74 28                        dw      SUBTRACT                // -
  51+ 36A9 E9 24                        dw      EXIT                    // ;
  52+ 36AB
  53+ 36AB              //  ______________________________________________________________________
  54+ 36AB              //
  55+ 36AB              // update       --
  56+ 36AB              // mark the last used block to be written to disk
  57+ 36AB                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36AB             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36AB             >
  57+ 36AB             >Dict_Ptr        defl    $
  57+ 36AB             >
  57+ 36AB             >//              ______________________________________________________________________
  57+ 36AB             >//              Heap part
  57+ 36AB             >
  57+ 36AB             >
  57+ 36AB             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EA9D             >
  57+ EA9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EA9D             >Latest_Definition defl  Heap_Ptr
  57+ EA9D             >
  57+ EA9D             >                // dummy db directives used to calculate length of namec
  57+ EA9D 55 50 44 41 >                db      "UPDATE"
  57+ EAA1 54 45       >
  57+ EAA3             >len_NFA         defl    $ - temp_NFA
  57+ EAA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EA9D             >
  57+ EA9D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EA9E 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAA2 54 45       >
  57+ EAA4             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAA3 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAA4             >
  57+ EAA4 94 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAA6             >Prev_Ptr        defl    Heap_Ptr
  57+ EAA6             >
  57+ EAA6             >mirror_Ptr      defl    $
  57+ EAA6             >
  57+ EAA6 AD 36       >                dw      Dict_Ptr + 2        // xt
  57+ EAA8             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAA8             >
  57+ EAA8             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAA8             >
  57+ EAA8             >//              ______________________________________________________________________
  57+ EAA8             >//              Dictionary part
  57+ EAA8             >
  57+ EAA8             >                org     Dict_Ptr
  57+ 36AB             >
  57+ 36AB A6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36AD             >
  57+ 36AD             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36AD CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36B0             >
  57+ 36B0             >
  57+ 36B0             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36B0             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36B0             >
  57+ 36B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36B0 0B 28 1E 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36B4 1E 26
  59+ 36B6 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36BA B8 24
  60+ 36BC 0B 28 1E 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36C0 28 26
  61+ 36C2 E9 24                        dw      EXIT                    // ;
  62+ 36C4
  63+ 36C4
  64+ 36C4              //  ______________________________________________________________________
  65+ 36C4              //
  66+ 36C4              // empty-buffers --
  67+ 36C4                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 36C4             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 36C4             >
  67+ 36C4             >Dict_Ptr        defl    $
  67+ 36C4             >
  67+ 36C4             >//              ______________________________________________________________________
  67+ 36C4             >//              Heap part
  67+ 36C4             >
  67+ 36C4             >
  67+ 36C4             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAA8             >
  67+ EAA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAA8             >Latest_Definition defl  Heap_Ptr
  67+ EAA8             >
  67+ EAA8             >                // dummy db directives used to calculate length of namec
  67+ EAA8 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAAC 59 2D 42 55 >
  67+ EAB0 46 46 45 52 >
  67+ EAB4 53          >
  67+ EAB5             >len_NFA         defl    $ - temp_NFA
  67+ EAB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAA8             >
  67+ EAA8 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAA9 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAAD 59 2D 42 55 >
  67+ EAB1 46 46 45 52 >
  67+ EAB5 53          >
  67+ EAB6             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAB5 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAB6             >
  67+ EAB6 9D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAB8             >Prev_Ptr        defl    Heap_Ptr
  67+ EAB8             >
  67+ EAB8             >mirror_Ptr      defl    $
  67+ EAB8             >
  67+ EAB8 C6 36       >                dw      Dict_Ptr + 2        // xt
  67+ EABA             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EABA             >
  67+ EABA             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EABA             >
  67+ EABA             >//              ______________________________________________________________________
  67+ EABA             >//              Dictionary part
  67+ EABA             >
  67+ EABA             >                org     Dict_Ptr
  67+ 36C4             >
  67+ 36C4 B8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 36C6             >
  67+ 36C6             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 36C6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 36C9             >
  67+ 36C9             >
  67+ 36C9             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 36C9             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 36C9             >
  67+ 36C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 36C9 99 27 1E 26                  dw      FIRST, FETCH            // first @
  69+ 36CD 9F 27 1E 26                  dw      LIMIT, FETCH            // limit @
  70+ 36D1 90 25 74 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 36D5 1C 2D
  71+ 36D7 E9 24                        dw      EXIT                    // ;
  72+ 36D9
  73+ 36D9              //  ______________________________________________________________________
  74+ 36D9              //
  75+ 36D9              // buffer       n -- a
  76+ 36D9              // read block n and gives the address to a buffer
  77+ 36D9              // any block previously inside the buffer, if modified, is rewritten to
  78+ 36D9              // disk before reading the block n.
  79+ 36D9
  80+ 36D9                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 36D9             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 36D9             >
  80+ 36D9             >Dict_Ptr        defl    $
  80+ 36D9             >
  80+ 36D9             >//              ______________________________________________________________________
  80+ 36D9             >//              Heap part
  80+ 36D9             >
  80+ 36D9             >
  80+ 36D9             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EABA             >
  80+ EABA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EABA             >Latest_Definition defl  Heap_Ptr
  80+ EABA             >
  80+ EABA             >                // dummy db directives used to calculate length of namec
  80+ EABA 42 55 46 46 >                db      "BUFFER"
  80+ EABE 45 52       >
  80+ EAC0             >len_NFA         defl    $ - temp_NFA
  80+ EAC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EABA             >
  80+ EABA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EABB 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EABF 45 52       >
  80+ EAC1             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAC0 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAC1             >
  80+ EAC1 A8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAC3             >Prev_Ptr        defl    Heap_Ptr
  80+ EAC3             >
  80+ EAC3             >mirror_Ptr      defl    $
  80+ EAC3             >
  80+ EAC3 DB 36       >                dw      Dict_Ptr + 2        // xt
  80+ EAC5             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAC5             >
  80+ EAC5             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAC5             >
  80+ EAC5             >//              ______________________________________________________________________
  80+ EAC5             >//              Dictionary part
  80+ EAC5             >
  80+ EAC5             >                org     Dict_Ptr
  80+ 36D9             >
  80+ 36D9 C3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 36DB             >
  80+ 36DB             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 36DB CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 36DE             >
  80+ 36DE             >
  80+ 36DE             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 36DE             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 36DE             >
  80+ 36DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 36DE 05 28 1E 26                  dw      USED, FETCH             // used @
  82+ 36E2 B4 25 F3 24                  dw      DUP, TO_R               // dup >r
  83+ 36E6                                                              // begin
  84+ 36E6              Buffer_Begin:
  85+ 36E6 86 36                        dw          PBUF                //      +buf
  86+ 36E8                                                              // until
  87+ 36E8 8D 20                        dw      ZBRANCH
  88+ 36EA FC FF                        dw      Buffer_Begin - $
  89+ 36EC 05 28 28 26                  dw      USED, STORE             // used !
  90+ 36F0 09 25 1E 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 36F4 1F 25
  91+ 36F6                                                              // if
  92+ 36F6 8D 20                        dw      ZBRANCH
  93+ 36F8 14 00                        dw      Buffer_Endif - $
  94+ 36FA 09 25 65 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 36FE 09 25 1E 26                  dw          R_OP, FETCH         //      r fetch
  96+ 3702 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3706 A9 24                        dw          AND_OP              //      and
  98+ 3708 10 27 59 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 370C              Buffer_Endif:                                   // endif
 100+ 370C 09 25 28 26                  dw      R_OP, STORE             // r !
 101+ 3710 09 25 0B 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3714 28 26
 102+ 3716 FE 24 65 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 371A E9 24                        dw      EXIT                    // ;
 104+ 371C
 105+ 371C              //  ______________________________________________________________________
 106+ 371C              //
 107+ 371C              // block        n -- a
 108+ 371C              // Leaves the buffer address that contains the block n.
 109+ 371C              // If the block is not already present, it will be loaded from disk
 110+ 371C              // The block previously inside the buffer, if modified, is rewritten to
 111+ 371C              // disk before reading the block n.
 112+ 371C              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 371C
 114+ 371C                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 371C             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 371C             >
 114+ 371C             >Dict_Ptr        defl    $
 114+ 371C             >
 114+ 371C             >//              ______________________________________________________________________
 114+ 371C             >//              Heap part
 114+ 371C             >
 114+ 371C             >
 114+ 371C             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAC5             >
 114+ EAC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAC5             >Latest_Definition defl  Heap_Ptr
 114+ EAC5             >
 114+ EAC5             >                // dummy db directives used to calculate length of namec
 114+ EAC5 42 4C 4F 43 >                db      "BLOCK"
 114+ EAC9 4B          >
 114+ EACA             >len_NFA         defl    $ - temp_NFA
 114+ EACA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAC5             >
 114+ EAC5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAC6 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EACA 4B          >
 114+ EACB             >                org     $-1                 // alter last byte of Name just above to set
 114+ EACA CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EACB             >
 114+ EACB BA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EACD             >Prev_Ptr        defl    Heap_Ptr
 114+ EACD             >
 114+ EACD             >mirror_Ptr      defl    $
 114+ EACD             >
 114+ EACD 1E 37       >                dw      Dict_Ptr + 2        // xt
 114+ EACF             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EACF             >
 114+ EACF             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EACF             >
 114+ EACF             >//              ______________________________________________________________________
 114+ EACF             >//              Dictionary part
 114+ EACF             >
 114+ EACF             >                org     Dict_Ptr
 114+ 371C             >
 114+ 371C CD 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 371E             >
 114+ 371E             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 371E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3721             >
 114+ 3721             >
 114+ 3721             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3721             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3721             >
 114+ 3721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3721                          //  dw      OFFSET, FETCH           // offset @
 116+ 3721                          //  dw      PLUS
 117+ 3721 F3 24                        dw      TO_R                    // + >r
 118+ 3723 0B 28 1E 26                  dw      PREV, FETCH             // prev @
 119+ 3727 B4 25 1E 26                  dw      DUP, FETCH              // dup @
 120+ 372B 09 25 74 28                  dw      R_OP, SUBTRACT          // r -
 121+ 372F B4 25 36 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3733                                                              // if
 123+ 3733 8D 20                        dw        ZBRANCH
 124+ 3735 32 00                        dw        Block_Endif_1 - $
 125+ 3737              Block_Begin:                                    //      begin
 126+ 3737 86 36 0E 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 373B                                                              //          if
 128+ 373B 8D 20                        dw          ZBRANCH
 129+ 373D 12 00                        dw          Block_Endif_2 - $
 130+ 373F 99 25                        dw              DROP            //              drop
 131+ 3741 09 25 DB 36                  dw              R_OP, BUFFER    //              r buffer
 132+ 3745 B4 25                        dw              DUP             //              dup
 133+ 3747 09 25 17 27                  dw              R_OP, ONE       //              r 1
 134+ 374B 59 36                        dw              READ_WRITE      //              r/w
 135+ 374D 71 25                        dw              TWO_MINUS       //              2-
 136+ 374F              Block_Endif_2:                                  //          endif
 137+ 374F B4 25 1E 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3753 09 25
 138+ 3755 74 28 B4 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 3759 36 25 0E 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 375D                                                              //      until
 141+ 375D 8D 20                        dw        ZBRANCH
 142+ 375F D8 FF                        dw        Block_Begin - $
 143+ 3761 B4 25 0B 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 3765 28 26
 144+ 3767              Block_Endif_1:                                  // endif
 145+ 3767 FE 24 99 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 376B 65 25
 146+ 376D E9 24                        dw      EXIT                    // ;
 147+ 376F
 148+ 376F              //  ______________________________________________________________________
 149+ 376F              //
 150+ 376F              // #buff        -- n
 151+ 376F              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 376F                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 376F             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 376F             >
 152+ 376F             >Dict_Ptr        defl    $
 152+ 376F             >
 152+ 376F             >//              ______________________________________________________________________
 152+ 376F             >//              Heap part
 152+ 376F             >
 152+ 376F             >
 152+ 376F             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EACF             >
 152+ EACF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EACF             >Latest_Definition defl  Heap_Ptr
 152+ EACF             >
 152+ EACF             >                // dummy db directives used to calculate length of namec
 152+ EACF 23 42 55 46 >                db      "#BUFF"
 152+ EAD3 46          >
 152+ EAD4             >len_NFA         defl    $ - temp_NFA
 152+ EAD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EACF             >
 152+ EACF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAD0 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAD4 46          >
 152+ EAD5             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAD4 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAD5             >
 152+ EAD5 C5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAD7             >Prev_Ptr        defl    Heap_Ptr
 152+ EAD7             >
 152+ EAD7             >mirror_Ptr      defl    $
 152+ EAD7             >
 152+ EAD7 71 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAD9             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAD9             >
 152+ EAD9             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAD9             >
 152+ EAD9             >//              ______________________________________________________________________
 152+ EAD9             >//              Dictionary part
 152+ EAD9             >
 152+ EAD9             >                org     Dict_Ptr
 152+ 376F             >
 152+ 376F D7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 3771             >
 152+ 3771             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 3771 CD E4 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 3774             >
 152+ 3774             >
 152+ 3774             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 3774             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 3774             >
 152+ 3774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 3774 07 00       >                dw      7
 153+ 3776
 154+ 3776              //  ______________________________________________________________________
 155+ 3776              //
 156+ 3776              // flush        --
 157+ 3776                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 3776             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 3776             >
 157+ 3776             >Dict_Ptr        defl    $
 157+ 3776             >
 157+ 3776             >//              ______________________________________________________________________
 157+ 3776             >//              Heap part
 157+ 3776             >
 157+ 3776             >
 157+ 3776             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAD9             >
 157+ EAD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAD9             >Latest_Definition defl  Heap_Ptr
 157+ EAD9             >
 157+ EAD9             >                // dummy db directives used to calculate length of namec
 157+ EAD9 46 4C 55 53 >                db      "FLUSH"
 157+ EADD 48          >
 157+ EADE             >len_NFA         defl    $ - temp_NFA
 157+ EADE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAD9             >
 157+ EAD9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EADA 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EADE 48          >
 157+ EADF             >                org     $-1                 // alter last byte of Name just above to set
 157+ EADE C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EADF             >
 157+ EADF CF 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAE1             >Prev_Ptr        defl    Heap_Ptr
 157+ EAE1             >
 157+ EAE1             >mirror_Ptr      defl    $
 157+ EAE1             >
 157+ EAE1 78 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAE3             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAE3             >
 157+ EAE3             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAE3             >
 157+ EAE3             >//              ______________________________________________________________________
 157+ EAE3             >//              Dictionary part
 157+ EAE3             >
 157+ EAE3             >                org     Dict_Ptr
 157+ 3776             >
 157+ 3776 E1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 3778             >
 157+ 3778             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 3778 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 377B             >
 157+ 377B             >
 157+ 377B             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 377B             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 377B             >
 157+ 377B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 377B 71 37 4F 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 377F 10 27
 159+ 3781              Flush_Do:                                       // do
 160+ 3781 C6 20                        dw      C_DO
 161+ 3783 10 27 DB 36                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 3787 99 25
 162+ 3789                                                              // loop
 163+ 3789 81 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 378D 1F 3F 1E 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 3791 96 23 99 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 3795 E9 24                        dw      EXIT                    // exit
 167+ 3797
 168+ 3797              //  ______________________________________________________________________
 169+ 3797              //
 170+ 3797              // f_getline    a m fh -- n
 171+ 3797              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 3797              // Address a is left for subsequent processing
 173+ 3797              // and n as the actual number of byte read, that is the length of line
 174+ 3797                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 3797             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 3797             >
 174+ 3797             >Dict_Ptr        defl    $
 174+ 3797             >
 174+ 3797             >//              ______________________________________________________________________
 174+ 3797             >//              Heap part
 174+ 3797             >
 174+ 3797             >
 174+ 3797             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAE3             >
 174+ EAE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAE3             >Latest_Definition defl  Heap_Ptr
 174+ EAE3             >
 174+ EAE3             >                // dummy db directives used to calculate length of namec
 174+ EAE3 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAE7 54 4C 49 4E >
 174+ EAEB 45          >
 174+ EAEC             >len_NFA         defl    $ - temp_NFA
 174+ EAEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAE3             >
 174+ EAE3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAE4 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAE8 54 4C 49 4E >
 174+ EAEC 45          >
 174+ EAED             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAEC C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAED             >
 174+ EAED D9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAEF             >Prev_Ptr        defl    Heap_Ptr
 174+ EAEF             >
 174+ EAEF             >mirror_Ptr      defl    $
 174+ EAEF             >
 174+ EAEF 99 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAF1             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAF1             >
 174+ EAF1             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAF1             >
 174+ EAF1             >//              ______________________________________________________________________
 174+ EAF1             >//              Dictionary part
 174+ EAF1             >
 174+ EAF1             >                org     Dict_Ptr
 174+ 3797             >
 174+ 3797 EF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 3799             >
 174+ 3799             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 3799 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 379C             >
 174+ 379C             >
 174+ 379C             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 379C             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 379C             >
 174+ 379C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 379C F3 24                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 379E A4 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37A0 09 25 A3 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37A4 3D 20 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 37A8 69 2A
 179+ 37AA
 180+ 37AA EF 25 90 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37AE 4F 25 AD 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37B2
 183+ 37B2 09 25 BD 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37B6 3D 20 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 37BA 69 2A
 185+ 37BC                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37BC 8D 20                        dw      ZBRANCH
 187+ 37BE 3C 00                        dw      FGetline_Else - $
 188+ 37C0 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 37C4 BA 21
 189+ 37C6 99 25 9E 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 37CA AD 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 37CC 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 37D0 BA 21
 192+ 37D2 99 25 9E 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 37D6 BB 25 B1 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 37DA B4 25 23 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 37DE 28 26
 195+ 37E0 B4 25 F3 24                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 37E4 EF 25 FE 24                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 37E8 10 27 40 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 37EC FE 24 6C 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 37F0 3D 20 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 37F4 69 2A
 200+ 37F6                                                              // else
 201+ 37F6 89 20                        dw      BRANCH
 202+ 37F8 0C 00                        dw      FGetline_Endif - $
 203+ 37FA              FGetline_Else:
 204+ 37FA FE 24                        dw          R_TO                //      r>              ( m d a fh )
 205+ 37FC EF 25 E9 25                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 3800 99 25 10 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3804              FGetline_Endif:                                 // endif
 208+ 3804 F3 24 B4 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 3808 B4 25
 209+ 380A 4F 25 AD 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 380E 09 25 2E 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3812 FC 25 36 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3816 10 27 AD 25                  dw      ZERO, SWAP              // 0 swap
 213+ 381A 69 25 28 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 381E 09 25 36 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3822 56 25
 215+ 3824 AD 25 09 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 3828 74 28
 216+ 382A 27 2D                        dw      BLANK                   // blank
 217+ 382C FE 24                        dw      R_TO                    // r>                   ( n )
 218+ 382E E9 24                        dw      EXIT                    // ;
 219+ 3830
 220+ 3830              //  ______________________________________________________________________
 221+ 3830              //
 222+ 3830              // f_include    fh --
 223+ 3830              // Given a filehandle includes the source from file
 224+ 3830                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 3830             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 3830             >
 224+ 3830             >Dict_Ptr        defl    $
 224+ 3830             >
 224+ 3830             >//              ______________________________________________________________________
 224+ 3830             >//              Heap part
 224+ 3830             >
 224+ 3830             >
 224+ 3830             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAF1             >
 224+ EAF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAF1             >Latest_Definition defl  Heap_Ptr
 224+ EAF1             >
 224+ EAF1             >                // dummy db directives used to calculate length of namec
 224+ EAF1 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAF5 43 4C 55 44 >
 224+ EAF9 45          >
 224+ EAFA             >len_NFA         defl    $ - temp_NFA
 224+ EAFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAF1             >
 224+ EAF1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAF2 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAF6 43 4C 55 44 >
 224+ EAFA 45          >
 224+ EAFB             >                org     $-1                 // alter last byte of Name just above to set
 224+ EAFA C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EAFB             >
 224+ EAFB E3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EAFD             >Prev_Ptr        defl    Heap_Ptr
 224+ EAFD             >
 224+ EAFD             >mirror_Ptr      defl    $
 224+ EAFD             >
 224+ EAFD 32 38       >                dw      Dict_Ptr + 2        // xt
 224+ EAFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EAFF             >
 224+ EAFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EAFF             >
 224+ EAFF             >//              ______________________________________________________________________
 224+ EAFF             >//              Dictionary part
 224+ EAFF             >
 224+ EAFF             >                org     Dict_Ptr
 224+ 3830             >
 224+ 3830 FD 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3832             >
 224+ 3832             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3832 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3835             >
 224+ 3835             >
 224+ 3835             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3835             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3835             >
 224+ 3835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3835 B1 27 1E 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 3839 F3 24
 226+ 383B B7 27 1E 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 383F F3 24
 227+ 3841 1D 28 1E 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3845 F3 24
 228+ 3847 09 25                        dw      R_OP                    // r
 229+ 3849 28 25                        dw      ZGREATER                // 0>  (filehandle)
 230+ 384B                                                              // if
 231+ 384B 8D 20                        dw      ZBRANCH
 232+ 384D 20 00                        dw      FInclude_Else_1 - $
 233+ 384F 09 25 A3 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 3853 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 3857 69 2A
 235+ 3859 B7 27 1E 26                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 385D 71 25                        dw          TWO_MINUS
 237+ 385F 23 28 1E 26                  dw          SPAN, FETCH         //      span @ -
 238+ 3863 74 28                        dw          SUBTRACT
 239+ 3865 69 28 40 25                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 3869                                                              // else
 241+ 3869 89 20                        dw      BRANCH
 242+ 386B 06 00                        dw      FInclude_Endif_1 - $
 243+ 386D              FInclude_Else_1:
 244+ 386D 10 27 10 27                  dw          ZERO, ZERO          //      0 0
 245+ 3871                                                              // endif
 246+ 3871              FInclude_Endif_1:
 247+ 3871 F3 24 F3 24                  dw      TO_R, TO_R              // >r >r
 248+ 3875 1D 28 28 26                  dw      SOURCE_ID, STORE        // source-id !
 249+ 3879              FInclude_Begin:                                 // begin
 250+ 3879 17 27 1E 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 387D 41 27
 251+ 387F FC 25 27 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 3883 AD 25 4F 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 3887 AD 25 69 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 388B 1D 28 1E 26                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 388F 99 37                        dw          F_GETLINE           //      f_getline
 256+ 3891                                                              // while
 257+ 3891 8D 20                        dw      ZBRANCH
 258+ 3893 14 00                        dw      FInclude_Repeat - $
 259+ 3895 17 27 B1 27                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 3899 28 26
 260+ 389B 10 27 B7 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 389F 28 26
 261+ 38A1 59 31                        dw          INTERPRET           //      interpret
 262+ 38A3 89 20                        dw      BRANCH
 263+ 38A5 D4 FF                        dw      FInclude_Begin - $
 264+ 38A7              FInclude_Repeat:                                // repeat
 265+ 38A7                              //  close current file
 266+ 38A7 1D 28 1E 26                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 38AB 89 23                        dw      F_CLOSE                 // f_close
 268+ 38AD 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 38B1 69 2A
 269+ 38B3
 270+ 38B3 FE 24 FE 24                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 38B7 FE 24
 271+ 38B9 B4 25 1D 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 38BD 28 26
 272+ 38BF 28 25                        dw      ZGREATER                // 0>
 273+ 38C1                                                              // if
 274+ 38C1 8D 20                        dw      ZBRANCH
 275+ 38C3 12 00                        dw      FInclude_Else_2 - $
 276+ 38C5 1D 28 1E 26                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 38C9 6C 23                        dw          F_SEEK              //      f_seek
 278+ 38CB 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 38CF 69 2A
 279+ 38D1                                                              // else
 280+ 38D1 89 20                        dw      BRANCH
 281+ 38D3 04 00                        dw      FInclude_Endif_2 - $
 282+ 38D5              FInclude_Else_2:
 283+ 38D5 E9 25                        dw          TWO_DROP            //      2drop
 284+ 38D7              FInclude_Endif_2:                               // endif
 285+ 38D7 FE 24 B7 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 38DB 28 26
 286+ 38DD FE 24 B1 27                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 38E1 28 26
 287+ 38E3 E9 24                        dw      EXIT                    // ;
 288+ 38E5
 289+ 38E5              //  ______________________________________________________________________
 290+ 38E5              //
 291+ 38E5              // open<         -- fh
 292+ 38E5              // Open the following filename and return it file-handle
 293+ 38E5              // Used in the form OPEN CCCC
 294+ 38E5                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 38E5             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 38E5             >
 294+ 38E5             >Dict_Ptr        defl    $
 294+ 38E5             >
 294+ 38E5             >//              ______________________________________________________________________
 294+ 38E5             >//              Heap part
 294+ 38E5             >
 294+ 38E5             >
 294+ 38E5             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EAFF             >
 294+ EAFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EAFF             >Latest_Definition defl  Heap_Ptr
 294+ EAFF             >
 294+ EAFF             >                // dummy db directives used to calculate length of namec
 294+ EAFF 4F 50 45 4E >                db      "OPEN<"
 294+ EB03 3C          >
 294+ EB04             >len_NFA         defl    $ - temp_NFA
 294+ EB04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EAFF             >
 294+ EAFF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB00 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB04 3C          >
 294+ EB05             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB04 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB05             >
 294+ EB05 F1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB07             >Prev_Ptr        defl    Heap_Ptr
 294+ EB07             >
 294+ EB07             >mirror_Ptr      defl    $
 294+ EB07             >
 294+ EB07 E7 38       >                dw      Dict_Ptr + 2        // xt
 294+ EB09             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB09             >
 294+ EB09             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB09             >
 294+ EB09             >//              ______________________________________________________________________
 294+ EB09             >//              Dictionary part
 294+ EB09             >
 294+ EB09             >                org     Dict_Ptr
 294+ 38E5             >
 294+ 38E5 07 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 38E7             >
 294+ 38E7             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 38E7 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 38EA             >
 294+ 38EA             >
 294+ 38EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 38EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 38EA             >
 294+ 38EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 38EA 33 27                        dw      BL
 296+ 38EC 54 2D AE 2B                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 38F0 90 25
 297+ 38F2 36 25 10 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 38F6 AD 25 28 26
 298+ 38FA 45 2D 17 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 38FE F1 23
 299+ 3900 3D 20 2B 00                  dw      LIT, 43                 // 43
 300+ 3904 69 2A                        dw      QERROR                  // ?error
 301+ 3906 E9 24                        dw      EXIT                    // ;
 302+ 3908
 303+ 3908              //  ______________________________________________________________________
 304+ 3908              //
 305+ 3908              // use          -- cccc
 306+ 3908              // Include the following filename
 307+ 3908              //              Colon_Def USE, "USE", is_normal
 308+ 3908              //              dw      OPEN_FH                 // open<
 309+ 3908              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 3908              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 3908              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 3908              //              dw      EXIT                    // ;
 313+ 3908
 314+ 3908              //  ______________________________________________________________________
 315+ 3908              //
 316+ 3908              // include      -- cccc
 317+ 3908              // Include the following filename
 318+ 3908                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 3908             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 3908             >
 318+ 3908             >Dict_Ptr        defl    $
 318+ 3908             >
 318+ 3908             >//              ______________________________________________________________________
 318+ 3908             >//              Heap part
 318+ 3908             >
 318+ 3908             >
 318+ 3908             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB09             >
 318+ EB09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB09             >Latest_Definition defl  Heap_Ptr
 318+ EB09             >
 318+ EB09             >                // dummy db directives used to calculate length of namec
 318+ EB09 49 4E 43 4C >                db      "INCLUDE"
 318+ EB0D 55 44 45    >
 318+ EB10             >len_NFA         defl    $ - temp_NFA
 318+ EB10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB09             >
 318+ EB09 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB0A 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB0E 55 44 45    >
 318+ EB11             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB10 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB11             >
 318+ EB11 FF 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB13             >Prev_Ptr        defl    Heap_Ptr
 318+ EB13             >
 318+ EB13             >mirror_Ptr      defl    $
 318+ EB13             >
 318+ EB13 0A 39       >                dw      Dict_Ptr + 2        // xt
 318+ EB15             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB15             >
 318+ EB15             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB15             >
 318+ EB15             >//              ______________________________________________________________________
 318+ EB15             >//              Dictionary part
 318+ EB15             >
 318+ EB15             >                org     Dict_Ptr
 318+ 3908             >
 318+ 3908 13 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 390A             >
 318+ 390A             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 390A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 390D             >
 318+ 390D             >
 318+ 390D             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 390D             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 390D             >
 318+ 390D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 390D E7 38                        dw      OPEN_FH                 // open<
 320+ 390F 32 38                        dw      F_INCLUDE               //  f_include
 321+ 3911 E9 24                        dw      EXIT                    // ;
 322+ 3913
 323+ 3913              //  ______________________________________________________________________
 324+ 3913              //
 325+ 3913              // needs
 326+ 3913              // check for cccc exists in vocabulary
 327+ 3913              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 3913
 329+ 3913              // temp filename cccc.f as counted string zero-padded
 330+ 3913                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 3913             >
 330+ 3913             >Dict_Ptr        defl    $
 330+ 3913             >
 330+ 3913             >//              ______________________________________________________________________
 330+ 3913             >//              Heap part
 330+ 3913             >
 330+ 3913             >
 330+ 3913             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB15             >
 330+ EB15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB15             >Latest_Definition defl  Heap_Ptr
 330+ EB15             >
 330+ EB15             >                // dummy db directives used to calculate length of namec
 330+ EB15 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB19 53 2D 57    >
 330+ EB1C             >len_NFA         defl    $ - temp_NFA
 330+ EB1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB15             >
 330+ EB15 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB16 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB1A 53 2D 57    >
 330+ EB1D             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB1C D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB1D             >
 330+ EB1D 09 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB1F             >Prev_Ptr        defl    Heap_Ptr
 330+ EB1F             >
 330+ EB1F             >mirror_Ptr      defl    $
 330+ EB1F             >
 330+ EB1F 15 39       >                dw      Dict_Ptr + 2        // xt
 330+ EB21             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB21             >
 330+ EB21             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB21             >
 330+ EB21             >//              ______________________________________________________________________
 330+ EB21             >//              Dictionary part
 330+ EB21             >
 330+ EB21             >                org     Dict_Ptr
 330+ 3913             >
 330+ 3913 1F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 3915             >
 330+ 3915             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 3915 CD 9D 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 3918             >
 330+ 3918             >
 330+ 3918             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 3918             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 3918             >
 330+ 3918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 3918 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 393B              // temp complete path+filename
 333+ 393B                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 393B             >
 333+ 393B             >Dict_Ptr        defl    $
 333+ 393B             >
 333+ 393B             >//              ______________________________________________________________________
 333+ 393B             >//              Heap part
 333+ 393B             >
 333+ 393B             >
 333+ 393B             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB21             >
 333+ EB21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB21             >Latest_Definition defl  Heap_Ptr
 333+ EB21             >
 333+ EB21             >                // dummy db directives used to calculate length of namec
 333+ EB21 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB25 53 2D 46 4E >
 333+ EB29             >len_NFA         defl    $ - temp_NFA
 333+ EB29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB21             >
 333+ EB21 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB22 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB26 53 2D 46 4E >
 333+ EB2A             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB29 CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB2A             >
 333+ EB2A 15 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB2C             >Prev_Ptr        defl    Heap_Ptr
 333+ EB2C             >
 333+ EB2C             >mirror_Ptr      defl    $
 333+ EB2C             >
 333+ EB2C 3D 39       >                dw      Dict_Ptr + 2        // xt
 333+ EB2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB2E             >
 333+ EB2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB2E             >
 333+ EB2E             >//              ______________________________________________________________________
 333+ EB2E             >//              Dictionary part
 333+ EB2E             >
 333+ EB2E             >                org     Dict_Ptr
 333+ 393B             >
 333+ 393B 2C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 393D             >
 333+ 393D             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 393D CD 9D 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 3940             >
 333+ 3940             >
 333+ 3940             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 3940             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 3940             >
 333+ 3940             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 3940 00 00 00...                  ds      40
 335+ 3968              // constant path
 336+ 3968                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 336+ 3968             >
 336+ 3968             >Dict_Ptr        defl    $
 336+ 3968             >
 336+ 3968             >//              ______________________________________________________________________
 336+ 3968             >//              Heap part
 336+ 3968             >
 336+ 3968             >
 336+ 3968             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB2E             >
 336+ EB2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB2E             >Latest_Definition defl  Heap_Ptr
 336+ EB2E             >
 336+ EB2E             >                // dummy db directives used to calculate length of namec
 336+ EB2E 4E 45 45 44 >                db      "NEEDS-INC"
 336+ EB32 53 2D 49 4E >
 336+ EB36 43          >
 336+ EB37             >len_NFA         defl    $ - temp_NFA
 336+ EB37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB2E             >
 336+ EB2E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB2F 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 336+ EB33 53 2D 49 4E >
 336+ EB37 43          >
 336+ EB38             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB37 C3          >                db      {b $} | END_BIT     // msb as name end
 336+ EB38             >
 336+ EB38 21 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB3A             >Prev_Ptr        defl    Heap_Ptr
 336+ EB3A             >
 336+ EB3A             >mirror_Ptr      defl    $
 336+ EB3A             >
 336+ EB3A 6A 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB3C             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB3C             >
 336+ EB3C             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB3C             >
 336+ EB3C             >//              ______________________________________________________________________
 336+ EB3C             >//              Dictionary part
 336+ EB3C             >
 336+ EB3C             >                org     Dict_Ptr
 336+ 3968             >
 336+ 3968 3A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 396A             >
 336+ 396A             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 396A CD 9D 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 396D             >
 336+ 396D             >
 336+ 396D             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 396D             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 396D             >
 336+ 396D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 396D 04 69 6E 63                  db      4, "inc/", 0
 337+ 3971 2F 00
 338+ 3973                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 338+ 3973             >
 338+ 3973             >Dict_Ptr        defl    $
 338+ 3973             >
 338+ 3973             >//              ______________________________________________________________________
 338+ 3973             >//              Heap part
 338+ 3973             >
 338+ 3973             >
 338+ 3973             >                org     (Heap_Ptr & $1FFF) + $E000
 338+ EB3C             >
 338+ EB3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ EB3C             >Latest_Definition defl  Heap_Ptr
 338+ EB3C             >
 338+ EB3C             >                // dummy db directives used to calculate length of namec
 338+ EB3C 4E 45 45 44 >                db      "NEEDS-LIB"
 338+ EB40 53 2D 4C 49 >
 338+ EB44 42          >
 338+ EB45             >len_NFA         defl    $ - temp_NFA
 338+ EB45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ EB3C             >
 338+ EB3C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ EB3D 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 338+ EB41 53 2D 4C 49 >
 338+ EB45 42          >
 338+ EB46             >                org     $-1                 // alter last byte of Name just above to set
 338+ EB45 C2          >                db      {b $} | END_BIT     // msb as name end
 338+ EB46             >
 338+ EB46 2E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 338+ EB48             >Prev_Ptr        defl    Heap_Ptr
 338+ EB48             >
 338+ EB48             >mirror_Ptr      defl    $
 338+ EB48             >
 338+ EB48 75 39       >                dw      Dict_Ptr + 2        // xt
 338+ EB4A             >Heap_Ptr        defl    $ - $E000           // save current HP
 338+ EB4A             >
 338+ EB4A             >Current_HP      defl  $ - $E000             // used to set HP once!
 338+ EB4A             >
 338+ EB4A             >//              ______________________________________________________________________
 338+ EB4A             >//              Dictionary part
 338+ EB4A             >
 338+ EB4A             >                org     Dict_Ptr
 338+ 3973             >
 338+ 3973 48 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 338+ 3975             >
 338+ 3975             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 3975 CD 9D 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 338+ 3978             >
 338+ 3978             >
 338+ 3978             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 3978             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 3978             >
 338+ 3978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 3978 04 6C 69 62                  db      4, "lib/", 0
 339+ 397C 2F 00
 340+ 397E
 341+ 397E              // Concatenate path at a and filename and include it
 342+ 397E              // No error is issued if filename doesn't exist.
 343+ 397E                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 343+ 397E             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 343+ 397E             >
 343+ 397E             >Dict_Ptr        defl    $
 343+ 397E             >
 343+ 397E             >//              ______________________________________________________________________
 343+ 397E             >//              Heap part
 343+ 397E             >
 343+ 397E             >
 343+ 397E             >                org     (Heap_Ptr & $1FFF) + $E000
 343+ EB4A             >
 343+ EB4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ EB4A             >Latest_Definition defl  Heap_Ptr
 343+ EB4A             >
 343+ EB4A             >                // dummy db directives used to calculate length of namec
 343+ EB4A 4E 45 45 44 >                db      "NEEDS/"
 343+ EB4E 53 2F       >
 343+ EB50             >len_NFA         defl    $ - temp_NFA
 343+ EB50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ EB4A             >
 343+ EB4A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ EB4B 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 343+ EB4F 53 2F       >
 343+ EB51             >                org     $-1                 // alter last byte of Name just above to set
 343+ EB50 AF          >                db      {b $} | END_BIT     // msb as name end
 343+ EB51             >
 343+ EB51 3C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 343+ EB53             >Prev_Ptr        defl    Heap_Ptr
 343+ EB53             >
 343+ EB53             >mirror_Ptr      defl    $
 343+ EB53             >
 343+ EB53 80 39       >                dw      Dict_Ptr + 2        // xt
 343+ EB55             >Heap_Ptr        defl    $ - $E000           // save current HP
 343+ EB55             >
 343+ EB55             >Current_HP      defl  $ - $E000             // used to set HP once!
 343+ EB55             >
 343+ EB55             >//              ______________________________________________________________________
 343+ EB55             >//              Dictionary part
 343+ EB55             >
 343+ EB55             >                org     Dict_Ptr
 343+ 397E             >
 343+ 397E 53 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 343+ 3980             >
 343+ 3980             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 3980 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 343+ 3983             >
 343+ 3983             >
 343+ 3983             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 3983             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 3983             >
 343+ 3983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 3983 AE 2B A4 25                  dw      COUNT, TUCK             // n a n
 345+ 3987 3D 39 AD 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 345+ 398B 2E 24
 346+ 398D 3D 39 36 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 347+ 3991 15 39 4F 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 347+ 3995 AD 25
 348+ 3997 3D 20 23 00                  dw      LIT, 35
 349+ 399B 2E 24                        dw      CMOVE
 350+ 399D 3D 39                        dw      NEEDS_FN
 351+ 399F 45 2D 17 27                  dw      PAD, ONE, F_OPEN
 351+ 39A3 F1 23
 352+ 39A5 0E 25                        dw      ZEQUAL
 353+ 39A7 8D 20                        dw      ZBRANCH
 354+ 39A9 08 00                        dw      Needs_1 - $
 355+ 39AB 32 38                        dw          F_INCLUDE
 356+ 39AD 89 20                        dw      BRANCH
 357+ 39AF 04 00                        dw      Needs_2 - $
 358+ 39B1              Needs_1:
 359+ 39B1              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 360+ 39B1              //              dw          LIT, 43, MESSAGE
 361+ 39B1 99 25                        dw          DROP
 362+ 39B3              Needs_2:
 363+ 39B3 E9 24                        dw      EXIT                    // ;
 364+ 39B5
 365+ 39B5              NDOM_PTR:
 366+ 39B5              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 39B5              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 368+ 39B5 3A 3F 2F 2A                  db ':?/*|\<>"'
 368+ 39B9 7C 5C 3C 3E
 368+ 39BD 22
 369+ 39BE              //              db 0
 370+ 39BE
 371+ 39BE              NCDM_PTR:
 372+ 39BE              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 373+ 39BE              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 39BE 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 39C2 24 5F 7B 7D
 374+ 39C6 7E
 375+ 39C7              //              db 0
 376+ 39C7
 377+ 39C7              // Replace illegal character in filename using the map here above
 378+ 39C7              // at the moment we need only  "
 379+ 39C7                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 39C7             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 39C7             >
 379+ 39C7             >Dict_Ptr        defl    $
 379+ 39C7             >
 379+ 39C7             >//              ______________________________________________________________________
 379+ 39C7             >//              Heap part
 379+ 39C7             >
 379+ 39C7             >
 379+ 39C7             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB55             >
 379+ EB55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB55             >Latest_Definition defl  Heap_Ptr
 379+ EB55             >
 379+ EB55             >                // dummy db directives used to calculate length of namec
 379+ EB55 4D 41 50 2D >                db      "MAP-FN"
 379+ EB59 46 4E       >
 379+ EB5B             >len_NFA         defl    $ - temp_NFA
 379+ EB5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB55             >
 379+ EB55 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB56 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB5A 46 4E       >
 379+ EB5C             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB5B CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB5C             >
 379+ EB5C 4A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB5E             >Prev_Ptr        defl    Heap_Ptr
 379+ EB5E             >
 379+ EB5E             >mirror_Ptr      defl    $
 379+ EB5E             >
 379+ EB5E C9 39       >                dw      Dict_Ptr + 2        // xt
 379+ EB60             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB60             >
 379+ EB60             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB60             >
 379+ EB60             >//              ______________________________________________________________________
 379+ EB60             >//              Dictionary part
 379+ EB60             >
 379+ EB60             >                org     Dict_Ptr
 379+ 39C7             >
 379+ 39C7 5E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 39C9             >
 379+ 39C9             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 39C9 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 39CC             >
 379+ 39CC             >
 379+ 39CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 39CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 39CC             >
 379+ 39CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 39CC AE 2B BB 2B                  dw      COUNT, BOUNDS
 381+ 39D0 C6 20                        dw      C_DO
 382+ 39D2              Needs_3:
 383+ 39D2              //              dw          NCDM, NDOM, LIT, 10
 384+ 39D2 3D 20 BE 39                  dw          LIT, NCDM_PTR           //
 385+ 39D6 3D 20 B5 39                  dw          LIT, NDOM_PTR           //
 386+ 39DA 3D 20 09 00                  dw          LIT, 9
 387+ 39DE CC 20 33 26                  dw          I, CFETCH
 388+ 39E2 E8 21                        dw          C_MAP
 389+ 39E4 CC 20 3C 26                  dw          I, CSTORE
 390+ 39E8              Needs_4:
 391+ 39E8 81 20                        dw      C_LOOP
 392+ 39EA E8 FF                        dw      Needs_3 - $
 393+ 39EC E9 24                        dw      EXIT
 394+ 39EE
 395+ 39EE
 396+ 39EE              // include  "path/cccc.f" if cccc is not defined
 397+ 39EE              // filename cccc.f is temporary stored at NEEDS-W
 398+ 39EE                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 398+ 39EE             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 398+ 39EE             >
 398+ 39EE             >Dict_Ptr        defl    $
 398+ 39EE             >
 398+ 39EE             >//              ______________________________________________________________________
 398+ 39EE             >//              Heap part
 398+ 39EE             >
 398+ 39EE             >
 398+ 39EE             >                org     (Heap_Ptr & $1FFF) + $E000
 398+ EB60             >
 398+ EB60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ EB60             >Latest_Definition defl  Heap_Ptr
 398+ EB60             >
 398+ EB60             >                // dummy db directives used to calculate length of namec
 398+ EB60 4E 45 45 44 >                db      "NEEDS-F"
 398+ EB64 53 2D 46    >
 398+ EB67             >len_NFA         defl    $ - temp_NFA
 398+ EB67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ EB60             >
 398+ EB60 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ EB61 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 398+ EB65 53 2D 46    >
 398+ EB68             >                org     $-1                 // alter last byte of Name just above to set
 398+ EB67 C6          >                db      {b $} | END_BIT     // msb as name end
 398+ EB68             >
 398+ EB68 55 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 398+ EB6A             >Prev_Ptr        defl    Heap_Ptr
 398+ EB6A             >
 398+ EB6A             >mirror_Ptr      defl    $
 398+ EB6A             >
 398+ EB6A F0 39       >                dw      Dict_Ptr + 2        // xt
 398+ EB6C             >Heap_Ptr        defl    $ - $E000           // save current HP
 398+ EB6C             >
 398+ EB6C             >Current_HP      defl  $ - $E000             // used to set HP once!
 398+ EB6C             >
 398+ EB6C             >//              ______________________________________________________________________
 398+ EB6C             >//              Dictionary part
 398+ EB6C             >
 398+ EB6C             >                org     Dict_Ptr
 398+ 39EE             >
 398+ 39EE 6A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 398+ 39F0             >
 398+ 39F0             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 39F0 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 39F3             >
 398+ 39F3             >
 398+ 39F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 39F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 39F3             >
 398+ 39F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 39F3 96 2F                        dw      LFIND
 400+ 39F5 8D 20                        dw      ZBRANCH
 401+ 39F7 0A 00                        dw      Needs_5 - $
 402+ 39F9
 403+ 39F9 99 25 E9 25                  dw          DROP, TWO_DROP
 404+ 39FD 89 20                        dw      BRANCH
 405+ 39FF 2C 00                        dw      Needs_6 - $
 406+ 3A01              Needs_5:
 407+ 3A01 15 39                        dw          NEEDS_W
 408+ 3A03 3D 20 23 00                  dw          LIT, 35
 409+ 3A07 1C 2D                        dw          ERASE                   // a
 410+ 3A09 35 28 33 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 410+ 3A0D 4F 25
 411+ 3A0F 35 28 90 25                  dw          HERE, OVER              // a n here n
 412+ 3A13 15 39 AD 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 412+ 3A17 2E 24
 413+ 3A19 15 39 C9 39                  dw          NEEDS_W, NEEDS_CHECK
 414+ 3A1D 15 39 36 25                  dw          NEEDS_W, PLUS           // a a1+1
 415+ 3A21 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 416+ 3A25 AD 25 28 26                  dw          SWAP, STORE             // a
 417+ 3A29 80 39                        dw          NEEDS_SLASH
 418+ 3A2B              Needs_6:
 419+ 3A2B E9 24                        dw      EXIT
 420+ 3A2D
 421+ 3A2D
 422+ 3A2D              // check for cccc exists in vocabulary
 423+ 3A2D              // if it doesn't then  INCLUDE  inc/cccc.F
 424+ 3A2D              // search in inc subdirectory
 425+ 3A2D                              Colon_Def NEEDS, "NEEDS", is_normal
 425+ 3A2D             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 425+ 3A2D             >
 425+ 3A2D             >Dict_Ptr        defl    $
 425+ 3A2D             >
 425+ 3A2D             >//              ______________________________________________________________________
 425+ 3A2D             >//              Heap part
 425+ 3A2D             >
 425+ 3A2D             >
 425+ 3A2D             >                org     (Heap_Ptr & $1FFF) + $E000
 425+ EB6C             >
 425+ EB6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ EB6C             >Latest_Definition defl  Heap_Ptr
 425+ EB6C             >
 425+ EB6C             >                // dummy db directives used to calculate length of namec
 425+ EB6C 4E 45 45 44 >                db      "NEEDS"
 425+ EB70 53          >
 425+ EB71             >len_NFA         defl    $ - temp_NFA
 425+ EB71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ EB6C             >
 425+ EB6C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ EB6D 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 425+ EB71 53          >
 425+ EB72             >                org     $-1                 // alter last byte of Name just above to set
 425+ EB71 D3          >                db      {b $} | END_BIT     // msb as name end
 425+ EB72             >
 425+ EB72 60 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 425+ EB74             >Prev_Ptr        defl    Heap_Ptr
 425+ EB74             >
 425+ EB74             >mirror_Ptr      defl    $
 425+ EB74             >
 425+ EB74 2F 3A       >                dw      Dict_Ptr + 2        // xt
 425+ EB76             >Heap_Ptr        defl    $ - $E000           // save current HP
 425+ EB76             >
 425+ EB76             >Current_HP      defl  $ - $E000             // used to set HP once!
 425+ EB76             >
 425+ EB76             >//              ______________________________________________________________________
 425+ EB76             >//              Dictionary part
 425+ EB76             >
 425+ EB76             >                org     Dict_Ptr
 425+ 3A2D             >
 425+ 3A2D 74 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 425+ 3A2F             >
 425+ 3A2F             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 3A2F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 3A32             >
 425+ 3A32             >
 425+ 3A32             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 3A32             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 3A32             >
 425+ 3A32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 3A32 B7 27 1E 26                  dw      TO_IN, FETCH
 427+ 3A36 B4 25                        dw      DUP
 428+ 3A38 6A 39 F0 39                  dw      NEEDS_INC, NEEDS_PATH
 429+ 3A3C B7 27 28 26                  dw      TO_IN, STORE
 430+ 3A40 75 39 F0 39                  dw      NEEDS_LIB, NEEDS_PATH
 431+ 3A44 B7 27 28 26                  dw      TO_IN, STORE
 432+ 3A48 96 2F                        dw      LFIND
 433+ 3A4A 8D 20                        dw      ZBRANCH
 434+ 3A4C 08 00                        dw      Needs_10 - $
 435+ 3A4E E9 25                        dw          TWO_DROP
 436+ 3A50 89 20                        dw      BRANCH
 437+ 3A52 10 00                        dw      Needs_11 - $
 438+ 3A54              Needs_10:
 439+ 3A54 15 39 AE 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 439+ 3A58 02 2C FE 28
 440+ 3A5C 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 440+ 3A60 5F 35
 441+ 3A62              Needs_11:
 442+ 3A62 E9 24                        dw      EXIT
 443+ 3A64
 444+ 3A64
 445+ 3A64              //  ______________________________________________________________________
 446+ 3A64              //
 447+ 3A64              // load         n --
 448+ 3A64                              Colon_Def LOAD, "LOAD", is_normal
 448+ 3A64             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 448+ 3A64             >
 448+ 3A64             >Dict_Ptr        defl    $
 448+ 3A64             >
 448+ 3A64             >//              ______________________________________________________________________
 448+ 3A64             >//              Heap part
 448+ 3A64             >
 448+ 3A64             >
 448+ 3A64             >                org     (Heap_Ptr & $1FFF) + $E000
 448+ EB76             >
 448+ EB76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ EB76             >Latest_Definition defl  Heap_Ptr
 448+ EB76             >
 448+ EB76             >                // dummy db directives used to calculate length of namec
 448+ EB76 4C 4F 41 44 >                db      "LOAD"
 448+ EB7A             >len_NFA         defl    $ - temp_NFA
 448+ EB7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ EB76             >
 448+ EB76 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ EB77 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 448+ EB7B             >                org     $-1                 // alter last byte of Name just above to set
 448+ EB7A C4          >                db      {b $} | END_BIT     // msb as name end
 448+ EB7B             >
 448+ EB7B 6C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 448+ EB7D             >Prev_Ptr        defl    Heap_Ptr
 448+ EB7D             >
 448+ EB7D             >mirror_Ptr      defl    $
 448+ EB7D             >
 448+ EB7D 66 3A       >                dw      Dict_Ptr + 2        // xt
 448+ EB7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 448+ EB7F             >
 448+ EB7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 448+ EB7F             >
 448+ EB7F             >//              ______________________________________________________________________
 448+ EB7F             >//              Dictionary part
 448+ EB7F             >
 448+ EB7F             >                org     Dict_Ptr
 448+ 3A64             >
 448+ 3A64 7D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 448+ 3A66             >
 448+ 3A66             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 3A66 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 3A69             >
 448+ 3A69             >
 448+ 3A69             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 3A69             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 3A69             >
 448+ 3A69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 3A69 B1 27 1E 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 449+ 3A6D F3 24
 450+ 3A6F B7 27 1E 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 450+ 3A73 F3 24
 451+ 3A75
 452+ 3A75 10 27 B7 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 452+ 3A79 28 26
 453+ 3A7B 48 27 EB 34                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 453+ 3A7F B1 27 28 26
 454+ 3A83 59 31                        dw      INTERPRET               // interpret
 455+ 3A85
 456+ 3A85 FE 24 B7 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 456+ 3A89 28 26
 457+ 3A8B FE 24 B1 27                  dw      R_TO, BLK, STORE        // r> blk !
 457+ 3A8F 28 26
 458+ 3A91 E9 24                        dw      EXIT                    // ;
 459+ 3A93
 460+ 3A93              //  ______________________________________________________________________
 461+ 3A93              //
 462+ 3A93              // -->          --
 463+ 3A93                              Colon_Def LOAD_NEXT, "-->", is_immediate
 463+ 3A93             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 463+ 3A93             >
 463+ 3A93             >Dict_Ptr        defl    $
 463+ 3A93             >
 463+ 3A93             >//              ______________________________________________________________________
 463+ 3A93             >//              Heap part
 463+ 3A93             >
 463+ 3A93             >
 463+ 3A93             >                org     (Heap_Ptr & $1FFF) + $E000
 463+ EB7F             >
 463+ EB7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ EB7F             >Latest_Definition defl  Heap_Ptr
 463+ EB7F             >
 463+ EB7F             >                // dummy db directives used to calculate length of namec
 463+ EB7F 2D 2D 3E    >                db      "-->"
 463+ EB82             >len_NFA         defl    $ - temp_NFA
 463+ EB82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ EB7F             >
 463+ EB7F C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ EB80 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 463+ EB83             >                org     $-1                 // alter last byte of Name just above to set
 463+ EB82 BE          >                db      {b $} | END_BIT     // msb as name end
 463+ EB83             >
 463+ EB83 76 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 463+ EB85             >Prev_Ptr        defl    Heap_Ptr
 463+ EB85             >
 463+ EB85             >mirror_Ptr      defl    $
 463+ EB85             >
 463+ EB85 95 3A       >                dw      Dict_Ptr + 2        // xt
 463+ EB87             >Heap_Ptr        defl    $ - $E000           // save current HP
 463+ EB87             >
 463+ EB87             >Current_HP      defl  $ - $E000             // used to set HP once!
 463+ EB87             >
 463+ EB87             >//              ______________________________________________________________________
 463+ EB87             >//              Dictionary part
 463+ EB87             >
 463+ EB87             >                org     Dict_Ptr
 463+ 3A93             >
 463+ 3A93 85 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 463+ 3A95             >
 463+ 3A95             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 3A95 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 3A98             >
 463+ 3A98             >
 463+ 3A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 3A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 3A98             >
 463+ 3A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 3A98 C6 2A                        dw      QLOADING                // ?loading
 465+ 3A9A 10 27 B7 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 465+ 3A9E 28 26
 466+ 3AA0 48 27                        dw      BSCR                    // b/scr
 467+ 3AA2 B1 27 1E 26                  dw      BLK, FETCH              // blk @
 468+ 3AA6 90 25                        dw      OVER                    // over
 469+ 3AA8 10 35                        dw      MOD                     // mod
 470+ 3AAA 74 28                        dw      SUBTRACT                // -
 471+ 3AAC B1 27 06 26                  dw      BLK, PLUSSTORE          // +!
 472+ 3AB0 E9 24                        dw      EXIT                    // ;
 473+ 3AB2
 474+ 3AB2              //  ______________________________________________________________________
 475+ 3AB2              //
 476+ 3AB2              // '            -- xt
 477+ 3AB2                              Colon_Def TICK, "'", is_normal
 477+ 3AB2             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 477+ 3AB2             >
 477+ 3AB2             >Dict_Ptr        defl    $
 477+ 3AB2             >
 477+ 3AB2             >//              ______________________________________________________________________
 477+ 3AB2             >//              Heap part
 477+ 3AB2             >
 477+ 3AB2             >
 477+ 3AB2             >                org     (Heap_Ptr & $1FFF) + $E000
 477+ EB87             >
 477+ EB87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 477+ EB87             >Latest_Definition defl  Heap_Ptr
 477+ EB87             >
 477+ EB87             >                // dummy db directives used to calculate length of namec
 477+ EB87 27          >                db      "'"
 477+ EB88             >len_NFA         defl    $ - temp_NFA
 477+ EB88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 477+ EB87             >
 477+ EB87 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 477+ EB88 27          >                db      "'"               // name string in 7-bit ascii, but
 477+ EB89             >                org     $-1                 // alter last byte of Name just above to set
 477+ EB88 A7          >                db      {b $} | END_BIT     // msb as name end
 477+ EB89             >
 477+ EB89 7F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 477+ EB8B             >Prev_Ptr        defl    Heap_Ptr
 477+ EB8B             >
 477+ EB8B             >mirror_Ptr      defl    $
 477+ EB8B             >
 477+ EB8B B4 3A       >                dw      Dict_Ptr + 2        // xt
 477+ EB8D             >Heap_Ptr        defl    $ - $E000           // save current HP
 477+ EB8D             >
 477+ EB8D             >Current_HP      defl  $ - $E000             // used to set HP once!
 477+ EB8D             >
 477+ EB8D             >//              ______________________________________________________________________
 477+ EB8D             >//              Dictionary part
 477+ EB8D             >
 477+ EB8D             >                org     Dict_Ptr
 477+ 3AB2             >
 477+ 3AB2 8B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 477+ 3AB4             >
 477+ 3AB4             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 477+ 3AB4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 477+ 3AB7             >
 477+ 3AB7             >
 477+ 3AB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 477+ 3AB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 477+ 3AB7             >
 477+ 3AB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 478+ 3AB7 96 2F                        dw      LFIND                   // -find
 479+ 3AB9 0E 25                        dw      ZEQUAL                  // 0=
 480+ 3ABB 10 27 69 2A                  dw      ZERO, QERROR            // 0 ?error
 481+ 3ABF 99 25                        dw      DROP                    // drop
 482+ 3AC1 E9 24                        dw      EXIT                    // ;
 483+ 3AC3
 484+ 3AC3              //  ______________________________________________________________________
 485+ 3AC3              //
 486+ 3AC3              // forget       -- cccc
 487+ 3AC3                              Colon_Def FORGET, "FORGET", is_normal
 487+ 3AC3             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 487+ 3AC3             >
 487+ 3AC3             >Dict_Ptr        defl    $
 487+ 3AC3             >
 487+ 3AC3             >//              ______________________________________________________________________
 487+ 3AC3             >//              Heap part
 487+ 3AC3             >
 487+ 3AC3             >
 487+ 3AC3             >                org     (Heap_Ptr & $1FFF) + $E000
 487+ EB8D             >
 487+ EB8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 487+ EB8D             >Latest_Definition defl  Heap_Ptr
 487+ EB8D             >
 487+ EB8D             >                // dummy db directives used to calculate length of namec
 487+ EB8D 46 4F 52 47 >                db      "FORGET"
 487+ EB91 45 54       >
 487+ EB93             >len_NFA         defl    $ - temp_NFA
 487+ EB93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 487+ EB8D             >
 487+ EB8D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 487+ EB8E 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 487+ EB92 45 54       >
 487+ EB94             >                org     $-1                 // alter last byte of Name just above to set
 487+ EB93 D4          >                db      {b $} | END_BIT     // msb as name end
 487+ EB94             >
 487+ EB94 87 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 487+ EB96             >Prev_Ptr        defl    Heap_Ptr
 487+ EB96             >
 487+ EB96             >mirror_Ptr      defl    $
 487+ EB96             >
 487+ EB96 C5 3A       >                dw      Dict_Ptr + 2        // xt
 487+ EB98             >Heap_Ptr        defl    $ - $E000           // save current HP
 487+ EB98             >
 487+ EB98             >Current_HP      defl  $ - $E000             // used to set HP once!
 487+ EB98             >
 487+ EB98             >//              ______________________________________________________________________
 487+ EB98             >//              Dictionary part
 487+ EB98             >
 487+ EB98             >                org     Dict_Ptr
 487+ 3AC3             >
 487+ 3AC3 96 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 487+ 3AC5             >
 487+ 3AC5             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 487+ 3AC5 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 487+ 3AC8             >
 487+ 3AC8             >
 487+ 3AC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 487+ 3AC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 487+ 3AC8             >
 487+ 3AC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 488+ 3AC8 D5 27 1E 26                  dw      CURRENT, FETCH          // current @
 489+ 3ACC CF 27 1E 26                  dw      CONTEXT, FETCH          // context @
 490+ 3AD0 74 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 490+ 3AD4 17 00 69 2A
 491+ 3AD8 B4 3A E8 29                  dw      TICK, TO_BODY           // ' >body
 492+ 3ADC B4 25 87 27                  dw      DUP, FENCE, FETCH       // dup fence @
 492+ 3AE0 1E 26
 493+ 3AE2 8B 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 493+ 3AE6 15 00 69 2A
 494+ 3AEA B4 25 1D 2A                  dw      DUP, NFA                // dup nfa
 495+ 3AEE
 496+ 3AEE                          //  dw      DUP
 497+ 3AEE                          //  dw      LIT, $E000, LESS
 498+ 3AEE                          //  dw      MMU7_FETCH, ONE, EQUALS
 499+ 3AEE                          //  dw      OR_OP, NOT_OP
 500+ 3AEE                          //  dw      ZBRANCH
 501+ 3AEE                          //  dw      Forget_then - $
 502+ 3AEE
 503+ 3AEE 26 29 49 29                  dw      MMU7_FETCH, FROM_FAR
 504+ 3AF2 A5 27 28 26                  dw      HP, STORE
 505+ 3AF6 B4 25 12 2A                  dw      DUP, CFA, CELL_MINUS
 505+ 3AFA 69 25
 506+ 3AFC              // Forget_then:
 507+ 3AFC 8D 27 28 26                  dw      DP, STORE               // dp !
 508+ 3B00 28 2A 1E 26                  dw      LFA, FETCH              // lfa @
 509+ 3B04 CF 27 1E 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 509+ 3B08 28 26
 510+ 3B0A E9 24                        dw      EXIT                    // ;
 511+ 3B0C
 512+ 3B0C              //  ______________________________________________________________________
 513+ 3B0C              //
 514+ 3B0C              // marker       -- cccc
 515+ 3B0C                              Colon_Def MARKER, "MARKER", is_immediate
 515+ 3B0C             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 515+ 3B0C             >
 515+ 3B0C             >Dict_Ptr        defl    $
 515+ 3B0C             >
 515+ 3B0C             >//              ______________________________________________________________________
 515+ 3B0C             >//              Heap part
 515+ 3B0C             >
 515+ 3B0C             >
 515+ 3B0C             >                org     (Heap_Ptr & $1FFF) + $E000
 515+ EB98             >
 515+ EB98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ EB98             >Latest_Definition defl  Heap_Ptr
 515+ EB98             >
 515+ EB98             >                // dummy db directives used to calculate length of namec
 515+ EB98 4D 41 52 4B >                db      "MARKER"
 515+ EB9C 45 52       >
 515+ EB9E             >len_NFA         defl    $ - temp_NFA
 515+ EB9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ EB98             >
 515+ EB98 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ EB99 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 515+ EB9D 45 52       >
 515+ EB9F             >                org     $-1                 // alter last byte of Name just above to set
 515+ EB9E D2          >                db      {b $} | END_BIT     // msb as name end
 515+ EB9F             >
 515+ EB9F 8D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 515+ EBA1             >Prev_Ptr        defl    Heap_Ptr
 515+ EBA1             >
 515+ EBA1             >mirror_Ptr      defl    $
 515+ EBA1             >
 515+ EBA1 0E 3B       >                dw      Dict_Ptr + 2        // xt
 515+ EBA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 515+ EBA3             >
 515+ EBA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 515+ EBA3             >
 515+ EBA3             >//              ______________________________________________________________________
 515+ EBA3             >//              Dictionary part
 515+ EBA3             >
 515+ EBA3             >                org     Dict_Ptr
 515+ 3B0C             >
 515+ 3B0C A1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 515+ 3B0E             >
 515+ 3B0E             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 3B0E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 3B11             >
 515+ 3B11             >
 515+ 3B11             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 3B11             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 3B11             >
 515+ 3B11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 3B11 88 30                        dw      CREATE
 517+ 3B13
 518+ 3B13 93 27 1E 26                  dw      VOC_LINK, FETCH, COMMA
 518+ 3B17 4B 28
 519+ 3B19 D5 27 1E 26                  dw      CURRENT, FETCH, COMMA
 519+ 3B1D 4B 28
 520+ 3B1F CF 27 1E 26                  dw      CONTEXT, FETCH, COMMA
 520+ 3B23 4B 28
 521+ 3B25 D5 27 1E 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 521+ 3B29 1E 26 4B 28
 522+ 3B2D D9 29 37 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 522+ 3B31 28 2A 1E 26
 522+ 3B35 4B 28
 523+ 3B37
 524+ 3B37 84 2B                        dw      C_DOES
 525+ 3B39
 526+ 3B39                        //    nop
 527+ 3B39 CD BB 26                     call    Enter_Ptr
 528+ 3B3C
 529+ 3B3C B4 25 1E 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 529+ 3B40 93 27 28 26
 529+ 3B44 65 25
 530+ 3B46 B4 25 1E 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 530+ 3B4A D5 27 28 26
 530+ 3B4E 65 25
 531+ 3B50 B4 25 1E 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 531+ 3B54 CF 27 28 26
 531+ 3B58 65 25
 532+ 3B5A B4 25 1E 26                  dw      DUP, FETCH
 533+ 3B5E                          //  dw      DUP, QHEAPP
 534+ 3B5E                          //  dw      ZBRANCH
 535+ 3B5E                          //  dw      Marker_then - $
 536+ 3B5E B4 25 A5 27                  dw          DUP, HP, STORE
 536+ 3B62 28 26
 537+ 3B64 37 2A 12 2A                  dw          PFA, CFA, CELL_MINUS
 537+ 3B68 69 25
 538+ 3B6A              // Marker_then:
 539+ 3B6A 8D 27 28 26                  dw      DP, STORE, CELL_PLUS
 539+ 3B6E 65 25
 540+ 3B70 1E 26 D5 27                  dw      FETCH, CURRENT, FETCH, STORE
 540+ 3B74 1E 26 28 26
 541+ 3B78 E9 24                        dw      EXIT
 542+ 3B7A
 543+ 3B7A              //  ______________________________________________________________________
 544+ 3B7A              //
 545+ 3B7A              // spaces       n --
 546+ 3B7A                              Colon_Def SPACES, "SPACES", is_normal
 546+ 3B7A             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 546+ 3B7A             >
 546+ 3B7A             >Dict_Ptr        defl    $
 546+ 3B7A             >
 546+ 3B7A             >//              ______________________________________________________________________
 546+ 3B7A             >//              Heap part
 546+ 3B7A             >
 546+ 3B7A             >
 546+ 3B7A             >                org     (Heap_Ptr & $1FFF) + $E000
 546+ EBA3             >
 546+ EBA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ EBA3             >Latest_Definition defl  Heap_Ptr
 546+ EBA3             >
 546+ EBA3             >                // dummy db directives used to calculate length of namec
 546+ EBA3 53 50 41 43 >                db      "SPACES"
 546+ EBA7 45 53       >
 546+ EBA9             >len_NFA         defl    $ - temp_NFA
 546+ EBA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ EBA3             >
 546+ EBA3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ EBA4 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 546+ EBA8 45 53       >
 546+ EBAA             >                org     $-1                 // alter last byte of Name just above to set
 546+ EBA9 D3          >                db      {b $} | END_BIT     // msb as name end
 546+ EBAA             >
 546+ EBAA 98 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 546+ EBAC             >Prev_Ptr        defl    Heap_Ptr
 546+ EBAC             >
 546+ EBAC             >mirror_Ptr      defl    $
 546+ EBAC             >
 546+ EBAC 7C 3B       >                dw      Dict_Ptr + 2        // xt
 546+ EBAE             >Heap_Ptr        defl    $ - $E000           // save current HP
 546+ EBAE             >
 546+ EBAE             >Current_HP      defl  $ - $E000             // used to set HP once!
 546+ EBAE             >
 546+ EBAE             >//              ______________________________________________________________________
 546+ EBAE             >//              Dictionary part
 546+ EBAE             >
 546+ EBAE             >                org     Dict_Ptr
 546+ 3B7A             >
 546+ 3B7A AC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 546+ 3B7C             >
 546+ 3B7C             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 3B7C CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 546+ 3B7F             >
 546+ 3B7F             >
 546+ 3B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 3B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 3B7F             >
 546+ 3B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 3B7F 10 27 C4 28                  dw      ZERO, MAX
 548+ 3B83 10 27 A0 20                  dw      ZERO, C_Q_DO
 549+ 3B87 08 00                        dw      Spaces_Leave - $
 550+ 3B89              Spaces_Loop:
 551+ 3B89 FE 28                        dw          SPACE
 552+ 3B8B 81 20                        dw      C_LOOP
 553+ 3B8D FC FF                        dw      Spaces_Loop - $
 554+ 3B8F              Spaces_Leave:
 555+ 3B8F E9 24                        dw      EXIT                    // ;
 556+ 3B91
 557+ 3B91              //  ______________________________________________________________________
 558+ 3B91              //
 559+ 3B91              // <#           --
 560+ 3B91                              Colon_Def BEGIN_DASH, "<#", is_normal
 560+ 3B91             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 560+ 3B91             >
 560+ 3B91             >Dict_Ptr        defl    $
 560+ 3B91             >
 560+ 3B91             >//              ______________________________________________________________________
 560+ 3B91             >//              Heap part
 560+ 3B91             >
 560+ 3B91             >
 560+ 3B91             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ EBAE             >
 560+ EBAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ EBAE             >Latest_Definition defl  Heap_Ptr
 560+ EBAE             >
 560+ EBAE             >                // dummy db directives used to calculate length of namec
 560+ EBAE 3C 23       >                db      "<#"
 560+ EBB0             >len_NFA         defl    $ - temp_NFA
 560+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ EBAE             >
 560+ EBAE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ EBAF 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 560+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 560+ EBB0 A3          >                db      {b $} | END_BIT     // msb as name end
 560+ EBB1             >
 560+ EBB1 A3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 560+ EBB3             >
 560+ EBB3             >mirror_Ptr      defl    $
 560+ EBB3             >
 560+ EBB3 93 3B       >                dw      Dict_Ptr + 2        // xt
 560+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ EBB5             >
 560+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ EBB5             >
 560+ EBB5             >//              ______________________________________________________________________
 560+ EBB5             >//              Dictionary part
 560+ EBB5             >
 560+ EBB5             >                org     Dict_Ptr
 560+ 3B91             >
 560+ 3B91 B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 3B93             >
 560+ 3B93             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 3B93 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 3B96             >
 560+ 3B96             >
 560+ 3B96             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 3B96             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 3B96             >
 560+ 3B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 3B96 45 2D FF 27                  dw      PAD, HLD, STORE
 561+ 3B9A 28 26
 562+ 3B9C E9 24                        dw      EXIT
 563+ 3B9E
 564+ 3B9E              //  ______________________________________________________________________
 565+ 3B9E              //
 566+ 3B9E              // #>           --
 567+ 3B9E                              Colon_Def DASH_END, "#>", is_normal
 567+ 3B9E             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 567+ 3B9E             >
 567+ 3B9E             >Dict_Ptr        defl    $
 567+ 3B9E             >
 567+ 3B9E             >//              ______________________________________________________________________
 567+ 3B9E             >//              Heap part
 567+ 3B9E             >
 567+ 3B9E             >
 567+ 3B9E             >                org     (Heap_Ptr & $1FFF) + $E000
 567+ EBB5             >
 567+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 567+ EBB5             >Latest_Definition defl  Heap_Ptr
 567+ EBB5             >
 567+ EBB5             >                // dummy db directives used to calculate length of namec
 567+ EBB5 23 3E       >                db      "#>"
 567+ EBB7             >len_NFA         defl    $ - temp_NFA
 567+ EBB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 567+ EBB5             >
 567+ EBB5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 567+ EBB6 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 567+ EBB8             >                org     $-1                 // alter last byte of Name just above to set
 567+ EBB7 BE          >                db      {b $} | END_BIT     // msb as name end
 567+ EBB8             >
 567+ EBB8 AE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 567+ EBBA             >Prev_Ptr        defl    Heap_Ptr
 567+ EBBA             >
 567+ EBBA             >mirror_Ptr      defl    $
 567+ EBBA             >
 567+ EBBA A0 3B       >                dw      Dict_Ptr + 2        // xt
 567+ EBBC             >Heap_Ptr        defl    $ - $E000           // save current HP
 567+ EBBC             >
 567+ EBBC             >Current_HP      defl  $ - $E000             // used to set HP once!
 567+ EBBC             >
 567+ EBBC             >//              ______________________________________________________________________
 567+ EBBC             >//              Dictionary part
 567+ EBBC             >
 567+ EBBC             >                org     Dict_Ptr
 567+ 3B9E             >
 567+ 3B9E BA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 567+ 3BA0             >
 567+ 3BA0             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 567+ 3BA0 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 567+ 3BA3             >
 567+ 3BA3             >
 567+ 3BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 567+ 3BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 567+ 3BA3             >
 567+ 3BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 568+ 3BA3 E9 25                        dw      TWO_DROP
 569+ 3BA5 FF 27 1E 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 569+ 3BA9 45 2D 90 25
 569+ 3BAD 74 28
 570+ 3BAF E9 24                        dw      EXIT
 571+ 3BB1
 572+ 3BB1              //  ______________________________________________________________________
 573+ 3BB1              //
 574+ 3BB1              // sign         n d -- d
 575+ 3BB1                              Colon_Def SIGN, "SIGN", is_normal
 575+ 3BB1             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 575+ 3BB1             >
 575+ 3BB1             >Dict_Ptr        defl    $
 575+ 3BB1             >
 575+ 3BB1             >//              ______________________________________________________________________
 575+ 3BB1             >//              Heap part
 575+ 3BB1             >
 575+ 3BB1             >
 575+ 3BB1             >                org     (Heap_Ptr & $1FFF) + $E000
 575+ EBBC             >
 575+ EBBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ EBBC             >Latest_Definition defl  Heap_Ptr
 575+ EBBC             >
 575+ EBBC             >                // dummy db directives used to calculate length of namec
 575+ EBBC 53 49 47 4E >                db      "SIGN"
 575+ EBC0             >len_NFA         defl    $ - temp_NFA
 575+ EBC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ EBBC             >
 575+ EBBC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ EBBD 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 575+ EBC1             >                org     $-1                 // alter last byte of Name just above to set
 575+ EBC0 CE          >                db      {b $} | END_BIT     // msb as name end
 575+ EBC1             >
 575+ EBC1 B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 575+ EBC3             >Prev_Ptr        defl    Heap_Ptr
 575+ EBC3             >
 575+ EBC3             >mirror_Ptr      defl    $
 575+ EBC3             >
 575+ EBC3 B3 3B       >                dw      Dict_Ptr + 2        // xt
 575+ EBC5             >Heap_Ptr        defl    $ - $E000           // save current HP
 575+ EBC5             >
 575+ EBC5             >Current_HP      defl  $ - $E000             // used to set HP once!
 575+ EBC5             >
 575+ EBC5             >//              ______________________________________________________________________
 575+ EBC5             >//              Dictionary part
 575+ EBC5             >
 575+ EBC5             >                org     Dict_Ptr
 575+ 3BB1             >
 575+ 3BB1 C3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 575+ 3BB3             >
 575+ 3BB3             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 3BB3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 3BB6             >
 575+ 3BB6             >
 575+ 3BB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 3BB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 3BB6             >
 575+ 3BB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 3BB6 1F 25                        dw      ZLESS
 577+ 3BB8 8D 20                        dw      ZBRANCH
 578+ 3BBA 08 00                        dw      Sign_Endif - $
 579+ 3BBC 3D 20 2D 00                  dw          LIT, 45, HOLD
 579+ 3BC0 32 2D
 580+ 3BC2              Sign_Endif:
 581+ 3BC2 E9 24                        dw      EXIT
 582+ 3BC4
 583+ 3BC4              //  ______________________________________________________________________
 584+ 3BC4              //
 585+ 3BC4              // #           d1 -- d2
 586+ 3BC4                              Colon_Def DASH, "#", is_normal
 586+ 3BC4             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 586+ 3BC4             >
 586+ 3BC4             >Dict_Ptr        defl    $
 586+ 3BC4             >
 586+ 3BC4             >//              ______________________________________________________________________
 586+ 3BC4             >//              Heap part
 586+ 3BC4             >
 586+ 3BC4             >
 586+ 3BC4             >                org     (Heap_Ptr & $1FFF) + $E000
 586+ EBC5             >
 586+ EBC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ EBC5             >Latest_Definition defl  Heap_Ptr
 586+ EBC5             >
 586+ EBC5             >                // dummy db directives used to calculate length of namec
 586+ EBC5 23          >                db      "#"
 586+ EBC6             >len_NFA         defl    $ - temp_NFA
 586+ EBC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ EBC5             >
 586+ EBC5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ EBC6 23          >                db      "#"               // name string in 7-bit ascii, but
 586+ EBC7             >                org     $-1                 // alter last byte of Name just above to set
 586+ EBC6 A3          >                db      {b $} | END_BIT     // msb as name end
 586+ EBC7             >
 586+ EBC7 BC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 586+ EBC9             >Prev_Ptr        defl    Heap_Ptr
 586+ EBC9             >
 586+ EBC9             >mirror_Ptr      defl    $
 586+ EBC9             >
 586+ EBC9 C6 3B       >                dw      Dict_Ptr + 2        // xt
 586+ EBCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 586+ EBCB             >
 586+ EBCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 586+ EBCB             >
 586+ EBCB             >//              ______________________________________________________________________
 586+ EBCB             >//              Dictionary part
 586+ EBCB             >
 586+ EBCB             >                org     Dict_Ptr
 586+ 3BC4             >
 586+ 3BC4 C9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 586+ 3BC6             >
 586+ 3BC6             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 3BC6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 3BC9             >
 586+ 3BC9             >
 586+ 3BC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 3BC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 3BC9             >
 586+ 3BC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 3BC9 E1 27 1E 26                  dw      BASE, FETCH
 588+ 3BCD
 589+ 3BCD F3 24                        dw      TO_R                    // >r           ( ud1 )
 590+ 3BCF 10 27 09 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 590+ 3BD3 79 24
 591+ 3BD5 FE 24 AD 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 591+ 3BD9 F3 24
 592+ 3BDB 79 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 593+ 3BDD FE 24                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 594+ 3BDF
 595+ 3BDF BB 25                        dw      ROT
 596+ 3BE1 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 596+ 3BE5 90 25 99 28
 597+ 3BE9 8D 20                        dw      ZBRANCH
 598+ 3BEB 08 00                        dw      Dash_Endif - $
 599+ 3BED 3D 20 07 00                  dw          LIT, 7, PLUS
 599+ 3BF1 36 25
 600+ 3BF3              Dash_Endif:
 601+ 3BF3
 602+ 3BF3 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 602+ 3BF7 36 25 32 2D
 603+ 3BFB E9 24                        dw      EXIT
 604+ 3BFD
 605+ 3BFD              //  ______________________________________________________________________
 606+ 3BFD              //
 607+ 3BFD              // #s           d1 -- d2
 608+ 3BFD                              Colon_Def DASHES, "#S", is_normal
 608+ 3BFD             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 608+ 3BFD             >
 608+ 3BFD             >Dict_Ptr        defl    $
 608+ 3BFD             >
 608+ 3BFD             >//              ______________________________________________________________________
 608+ 3BFD             >//              Heap part
 608+ 3BFD             >
 608+ 3BFD             >
 608+ 3BFD             >                org     (Heap_Ptr & $1FFF) + $E000
 608+ EBCB             >
 608+ EBCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ EBCB             >Latest_Definition defl  Heap_Ptr
 608+ EBCB             >
 608+ EBCB             >                // dummy db directives used to calculate length of namec
 608+ EBCB 23 53       >                db      "#S"
 608+ EBCD             >len_NFA         defl    $ - temp_NFA
 608+ EBCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ EBCB             >
 608+ EBCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ EBCC 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 608+ EBCE             >                org     $-1                 // alter last byte of Name just above to set
 608+ EBCD D3          >                db      {b $} | END_BIT     // msb as name end
 608+ EBCE             >
 608+ EBCE C5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 608+ EBD0             >Prev_Ptr        defl    Heap_Ptr
 608+ EBD0             >
 608+ EBD0             >mirror_Ptr      defl    $
 608+ EBD0             >
 608+ EBD0 FF 3B       >                dw      Dict_Ptr + 2        // xt
 608+ EBD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 608+ EBD2             >
 608+ EBD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 608+ EBD2             >
 608+ EBD2             >//              ______________________________________________________________________
 608+ EBD2             >//              Dictionary part
 608+ EBD2             >
 608+ EBD2             >                org     Dict_Ptr
 608+ 3BFD             >
 608+ 3BFD D0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 608+ 3BFF             >
 608+ 3BFF             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 3BFF CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 3C02             >
 608+ 3C02             >
 608+ 3C02             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 3C02             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 3C02             >
 608+ 3C02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 3C02              Dashes_Begin:
 610+ 3C02 C6 3B FC 25                  dw      DASH, TWO_DUP
 611+ 3C06 B8 24 0E 25                  dw          OR_OP, ZEQUAL
 612+ 3C0A 8D 20                        dw      ZBRANCH
 613+ 3C0C F6 FF                        dw      Dashes_Begin - $
 614+ 3C0E E9 24                        dw      EXIT
 615+ 3C10
 616+ 3C10              //  ______________________________________________________________________
 617+ 3C10              //
 618+ 3C10              // d.r          d n --
 619+ 3C10                              Colon_Def D_DOT_R, "D.R", is_normal
 619+ 3C10             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 619+ 3C10             >
 619+ 3C10             >Dict_Ptr        defl    $
 619+ 3C10             >
 619+ 3C10             >//              ______________________________________________________________________
 619+ 3C10             >//              Heap part
 619+ 3C10             >
 619+ 3C10             >
 619+ 3C10             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ EBD2             >
 619+ EBD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ EBD2             >Latest_Definition defl  Heap_Ptr
 619+ EBD2             >
 619+ EBD2             >                // dummy db directives used to calculate length of namec
 619+ EBD2 44 2E 52    >                db      "D.R"
 619+ EBD5             >len_NFA         defl    $ - temp_NFA
 619+ EBD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ EBD2             >
 619+ EBD2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ EBD3 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 619+ EBD6             >                org     $-1                 // alter last byte of Name just above to set
 619+ EBD5 D2          >                db      {b $} | END_BIT     // msb as name end
 619+ EBD6             >
 619+ EBD6 CB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ EBD8             >Prev_Ptr        defl    Heap_Ptr
 619+ EBD8             >
 619+ EBD8             >mirror_Ptr      defl    $
 619+ EBD8             >
 619+ EBD8 12 3C       >                dw      Dict_Ptr + 2        // xt
 619+ EBDA             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ EBDA             >
 619+ EBDA             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ EBDA             >
 619+ EBDA             >//              ______________________________________________________________________
 619+ EBDA             >//              Dictionary part
 619+ EBDA             >
 619+ EBDA             >                org     Dict_Ptr
 619+ 3C10             >
 619+ 3C10 D8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 3C12             >
 619+ 3C12             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 3C12 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 3C15             >
 619+ 3C15             >
 619+ 3C15             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 3C15             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 3C15             >
 619+ 3C15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 3C15 F3 24                        dw      TO_R
 621+ 3C17 A4 25 57 34                  dw      TUCK, DABS
 622+ 3C1B 93 3B FF 3B                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 622+ 3C1F BB 25 B3 3B
 622+ 3C23 A0 3B
 623+ 3C25 FE 24                        dw      R_TO
 624+ 3C27 90 25 74 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 624+ 3C2B 7C 3B 02 2C
 625+ 3C2F E9 24                        dw      EXIT
 626+ 3C31
 627+ 3C31              //  ______________________________________________________________________
 628+ 3C31              //
 629+ 3C31              // .r           n1 n2 --
 630+ 3C31                              Colon_Def DOT_R, ".R", is_normal
 630+ 3C31             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 630+ 3C31             >
 630+ 3C31             >Dict_Ptr        defl    $
 630+ 3C31             >
 630+ 3C31             >//              ______________________________________________________________________
 630+ 3C31             >//              Heap part
 630+ 3C31             >
 630+ 3C31             >
 630+ 3C31             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EBDA             >
 630+ EBDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EBDA             >Latest_Definition defl  Heap_Ptr
 630+ EBDA             >
 630+ EBDA             >                // dummy db directives used to calculate length of namec
 630+ EBDA 2E 52       >                db      ".R"
 630+ EBDC             >len_NFA         defl    $ - temp_NFA
 630+ EBDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EBDA             >
 630+ EBDA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EBDB 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 630+ EBDD             >                org     $-1                 // alter last byte of Name just above to set
 630+ EBDC D2          >                db      {b $} | END_BIT     // msb as name end
 630+ EBDD             >
 630+ EBDD D2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EBDF             >Prev_Ptr        defl    Heap_Ptr
 630+ EBDF             >
 630+ EBDF             >mirror_Ptr      defl    $
 630+ EBDF             >
 630+ EBDF 33 3C       >                dw      Dict_Ptr + 2        // xt
 630+ EBE1             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EBE1             >
 630+ EBE1             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EBE1             >
 630+ EBE1             >//              ______________________________________________________________________
 630+ EBE1             >//              Dictionary part
 630+ EBE1             >
 630+ EBE1             >                org     Dict_Ptr
 630+ 3C31             >
 630+ 3C31 DF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 3C33             >
 630+ 3C33             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 3C33 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3C36             >
 630+ 3C36             >
 630+ 3C36             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3C36             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3C36             >
 630+ 3C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3C36 F3 24                        dw      TO_R
 632+ 3C38 69 28 FE 24                  dw      S_TO_D, R_TO
 633+ 3C3C 12 3C                        dw      D_DOT_R
 634+ 3C3E E9 24                        dw      EXIT
 635+ 3C40
 636+ 3C40              //  ______________________________________________________________________
 637+ 3C40              //
 638+ 3C40              // d.           d --
 639+ 3C40                              Colon_Def D_DOT, "D.", is_normal
 639+ 3C40             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 639+ 3C40             >
 639+ 3C40             >Dict_Ptr        defl    $
 639+ 3C40             >
 639+ 3C40             >//              ______________________________________________________________________
 639+ 3C40             >//              Heap part
 639+ 3C40             >
 639+ 3C40             >
 639+ 3C40             >                org     (Heap_Ptr & $1FFF) + $E000
 639+ EBE1             >
 639+ EBE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 639+ EBE1             >Latest_Definition defl  Heap_Ptr
 639+ EBE1             >
 639+ EBE1             >                // dummy db directives used to calculate length of namec
 639+ EBE1 44 2E       >                db      "D."
 639+ EBE3             >len_NFA         defl    $ - temp_NFA
 639+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 639+ EBE1             >
 639+ EBE1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 639+ EBE2 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 639+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 639+ EBE3 AE          >                db      {b $} | END_BIT     // msb as name end
 639+ EBE4             >
 639+ EBE4 DA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 639+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 639+ EBE6             >
 639+ EBE6             >mirror_Ptr      defl    $
 639+ EBE6             >
 639+ EBE6 42 3C       >                dw      Dict_Ptr + 2        // xt
 639+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 639+ EBE8             >
 639+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 639+ EBE8             >
 639+ EBE8             >//              ______________________________________________________________________
 639+ EBE8             >//              Dictionary part
 639+ EBE8             >
 639+ EBE8             >                org     Dict_Ptr
 639+ 3C40             >
 639+ 3C40 E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 639+ 3C42             >
 639+ 3C42             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 639+ 3C42 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 639+ 3C45             >
 639+ 3C45             >
 639+ 3C45             >                endif           ; ok        // for other definitions it "points" the correct handler
 639+ 3C45             >                // Use of "; ok" to suppress "warning[fwdref]"
 639+ 3C45             >
 639+ 3C45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 640+ 3C45 10 27 12 3C                  dw      ZERO, D_DOT_R, SPACE
 640+ 3C49 FE 28
 641+ 3C4B E9 24                        dw      EXIT
 642+ 3C4D
 643+ 3C4D              //  ______________________________________________________________________
 644+ 3C4D              //
 645+ 3C4D              // .            n --
 646+ 3C4D                              Colon_Def DOT, ".", is_normal
 646+ 3C4D             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 646+ 3C4D             >
 646+ 3C4D             >Dict_Ptr        defl    $
 646+ 3C4D             >
 646+ 3C4D             >//              ______________________________________________________________________
 646+ 3C4D             >//              Heap part
 646+ 3C4D             >
 646+ 3C4D             >
 646+ 3C4D             >                org     (Heap_Ptr & $1FFF) + $E000
 646+ EBE8             >
 646+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ EBE8             >Latest_Definition defl  Heap_Ptr
 646+ EBE8             >
 646+ EBE8             >                // dummy db directives used to calculate length of namec
 646+ EBE8 2E          >                db      "."
 646+ EBE9             >len_NFA         defl    $ - temp_NFA
 646+ EBE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ EBE8             >
 646+ EBE8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ EBE9 2E          >                db      "."               // name string in 7-bit ascii, but
 646+ EBEA             >                org     $-1                 // alter last byte of Name just above to set
 646+ EBE9 AE          >                db      {b $} | END_BIT     // msb as name end
 646+ EBEA             >
 646+ EBEA E1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 646+ EBEC             >Prev_Ptr        defl    Heap_Ptr
 646+ EBEC             >
 646+ EBEC             >mirror_Ptr      defl    $
 646+ EBEC             >
 646+ EBEC 4F 3C       >                dw      Dict_Ptr + 2        // xt
 646+ EBEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 646+ EBEE             >
 646+ EBEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 646+ EBEE             >
 646+ EBEE             >//              ______________________________________________________________________
 646+ EBEE             >//              Dictionary part
 646+ EBEE             >
 646+ EBEE             >                org     Dict_Ptr
 646+ 3C4D             >
 646+ 3C4D EC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 646+ 3C4F             >
 646+ 3C4F             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 3C4F CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 3C52             >
 646+ 3C52             >
 646+ 3C52             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 3C52             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 3C52             >
 646+ 3C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 3C52 69 28 42 3C                  dw      S_TO_D, D_DOT
 648+ 3C56 E9 24                        dw      EXIT
 649+ 3C58
 650+ 3C58              //  ______________________________________________________________________
 651+ 3C58              //
 652+ 3C58              // ?            n --
 653+ 3C58                              Colon_Def QUESTION, "?", is_normal
 653+ 3C58             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 653+ 3C58             >
 653+ 3C58             >Dict_Ptr        defl    $
 653+ 3C58             >
 653+ 3C58             >//              ______________________________________________________________________
 653+ 3C58             >//              Heap part
 653+ 3C58             >
 653+ 3C58             >
 653+ 3C58             >                org     (Heap_Ptr & $1FFF) + $E000
 653+ EBEE             >
 653+ EBEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 653+ EBEE             >Latest_Definition defl  Heap_Ptr
 653+ EBEE             >
 653+ EBEE             >                // dummy db directives used to calculate length of namec
 653+ EBEE 3F          >                db      "?"
 653+ EBEF             >len_NFA         defl    $ - temp_NFA
 653+ EBEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 653+ EBEE             >
 653+ EBEE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 653+ EBEF 3F          >                db      "?"               // name string in 7-bit ascii, but
 653+ EBF0             >                org     $-1                 // alter last byte of Name just above to set
 653+ EBEF BF          >                db      {b $} | END_BIT     // msb as name end
 653+ EBF0             >
 653+ EBF0 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 653+ EBF2             >Prev_Ptr        defl    Heap_Ptr
 653+ EBF2             >
 653+ EBF2             >mirror_Ptr      defl    $
 653+ EBF2             >
 653+ EBF2 5A 3C       >                dw      Dict_Ptr + 2        // xt
 653+ EBF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 653+ EBF4             >
 653+ EBF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 653+ EBF4             >
 653+ EBF4             >//              ______________________________________________________________________
 653+ EBF4             >//              Dictionary part
 653+ EBF4             >
 653+ EBF4             >                org     Dict_Ptr
 653+ 3C58             >
 653+ 3C58 F2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 653+ 3C5A             >
 653+ 3C5A             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 653+ 3C5A CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 653+ 3C5D             >
 653+ 3C5D             >
 653+ 3C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 653+ 3C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 653+ 3C5D             >
 653+ 3C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 654+ 3C5D 1E 26 4F 3C                  dw      FETCH, DOT
 655+ 3C61 E9 24                        dw      EXIT
 656+ 3C63
 657+ 3C63              //  ______________________________________________________________________
 658+ 3C63              //
 659+ 3C63              // u.           u --
 660+ 3C63                              Colon_Def U_DOT, "U.", is_normal
 660+ 3C63             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 660+ 3C63             >
 660+ 3C63             >Dict_Ptr        defl    $
 660+ 3C63             >
 660+ 3C63             >//              ______________________________________________________________________
 660+ 3C63             >//              Heap part
 660+ 3C63             >
 660+ 3C63             >
 660+ 3C63             >                org     (Heap_Ptr & $1FFF) + $E000
 660+ EBF4             >
 660+ EBF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ EBF4             >Latest_Definition defl  Heap_Ptr
 660+ EBF4             >
 660+ EBF4             >                // dummy db directives used to calculate length of namec
 660+ EBF4 55 2E       >                db      "U."
 660+ EBF6             >len_NFA         defl    $ - temp_NFA
 660+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ EBF4             >
 660+ EBF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ EBF5 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 660+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 660+ EBF6 AE          >                db      {b $} | END_BIT     // msb as name end
 660+ EBF7             >
 660+ EBF7 EE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 660+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 660+ EBF9             >
 660+ EBF9             >mirror_Ptr      defl    $
 660+ EBF9             >
 660+ EBF9 65 3C       >                dw      Dict_Ptr + 2        // xt
 660+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 660+ EBFB             >
 660+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 660+ EBFB             >
 660+ EBFB             >//              ______________________________________________________________________
 660+ EBFB             >//              Dictionary part
 660+ EBFB             >
 660+ EBFB             >                org     Dict_Ptr
 660+ 3C63             >
 660+ 3C63 F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 660+ 3C65             >
 660+ 3C65             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ 3C65 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ 3C68             >
 660+ 3C68             >
 660+ 3C68             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ 3C68             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ 3C68             >
 660+ 3C68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ 3C68 10 27 42 3C                  dw      ZERO, D_DOT
 662+ 3C6C E9 24                        dw      EXIT
 663+ 3C6E
 664+ 3C6E              //  ______________________________________________________________________
 665+ 3C6E              //
 666+ 3C6E              // words        --
 667+ 3C6E                              Colon_Def WORDS, "WORDS", is_normal
 667+ 3C6E             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 667+ 3C6E             >
 667+ 3C6E             >Dict_Ptr        defl    $
 667+ 3C6E             >
 667+ 3C6E             >//              ______________________________________________________________________
 667+ 3C6E             >//              Heap part
 667+ 3C6E             >
 667+ 3C6E             >
 667+ 3C6E             >                org     (Heap_Ptr & $1FFF) + $E000
 667+ EBFB             >
 667+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 667+ EBFB             >Latest_Definition defl  Heap_Ptr
 667+ EBFB             >
 667+ EBFB             >                // dummy db directives used to calculate length of namec
 667+ EBFB 57 4F 52 44 >                db      "WORDS"
 667+ EBFF 53          >
 667+ EC00             >len_NFA         defl    $ - temp_NFA
 667+ EC00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 667+ EBFB             >
 667+ EBFB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 667+ EBFC 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 667+ EC00 53          >
 667+ EC01             >                org     $-1                 // alter last byte of Name just above to set
 667+ EC00 D3          >                db      {b $} | END_BIT     // msb as name end
 667+ EC01             >
 667+ EC01 F4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 667+ EC03             >Prev_Ptr        defl    Heap_Ptr
 667+ EC03             >
 667+ EC03             >mirror_Ptr      defl    $
 667+ EC03             >
 667+ EC03 70 3C       >                dw      Dict_Ptr + 2        // xt
 667+ EC05             >Heap_Ptr        defl    $ - $E000           // save current HP
 667+ EC05             >
 667+ EC05             >Current_HP      defl  $ - $E000             // used to set HP once!
 667+ EC05             >
 667+ EC05             >//              ______________________________________________________________________
 667+ EC05             >//              Dictionary part
 667+ EC05             >
 667+ EC05             >                org     Dict_Ptr
 667+ 3C6E             >
 667+ 3C6E 03 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 667+ 3C70             >
 667+ 3C70             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 667+ 3C70 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 667+ 3C73             >
 667+ 3C73             >
 667+ 3C73             >                endif           ; ok        // for other definitions it "points" the correct handler
 667+ 3C73             >                // Use of "; ok" to suppress "warning[fwdref]"
 667+ 3C73             >
 667+ 3C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 668+ 3C73 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 668+ 3C77 BD 27 28 26
 669+ 3C7B CF 27 1E 26                  dw      CONTEXT, FETCH, FETCH
 669+ 3C7F 1E 26
 670+ 3C81              Words_Begin:
 671+ 3C81 6F 29                        dw          FAR // Q TO HEAP
 672+ 3C83 B4 25 33 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 672+ 3C87 3D 20 1F 00
 672+ 3C8B A9 24
 673+ 3C8D BD 27 1E 26                  dw          OUT, FETCH, PLUS
 673+ 3C91 36 25
 674+ 3C93 3A 27 99 28                  dw          CL, LESS, ZEQUAL
 674+ 3C97 0E 25
 675+ 3C99 8D 20                        dw          ZBRANCH
 676+ 3C9B 0A 00                        dw          Words_Endif - $
 677+ 3C9D 41 22 10 27                  dw              CR, ZERO, OUT, STORE
 677+ 3CA1 BD 27 28 26
 678+ 3CA5              Words_Endif:
 679+ 3CA5 B4 25 E4 2F                  dw          DUP, ID_DOT
 680+ 3CA9 17 27 09 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 680+ 3CAD 4F 25 1E 26
 681+ 3CB1 B4 25 0E 25                  dw          DUP, ZEQUAL
 682+ 3CB5 3A 23 B8 24                  dw          QTERMINAL, OR_OP
 683+ 3CB9 8D 20                        dw      ZBRANCH
 684+ 3CBB C6 FF                        dw      Words_Begin - $
 685+ 3CBD 99 25                        dw      DROP
 686+ 3CBF E9 24                        dw      EXIT
 687+ 3CC1
 688+ 3CC1              //  ______________________________________________________________________
 689+ 3CC1              //
 690+ 3CC1              // list         n --
 691+ 3CC1                              Colon_Def LIST, "LIST", is_normal
 691+ 3CC1             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 691+ 3CC1             >
 691+ 3CC1             >Dict_Ptr        defl    $
 691+ 3CC1             >
 691+ 3CC1             >//              ______________________________________________________________________
 691+ 3CC1             >//              Heap part
 691+ 3CC1             >
 691+ 3CC1             >
 691+ 3CC1             >                org     (Heap_Ptr & $1FFF) + $E000
 691+ EC05             >
 691+ EC05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ EC05             >Latest_Definition defl  Heap_Ptr
 691+ EC05             >
 691+ EC05             >                // dummy db directives used to calculate length of namec
 691+ EC05 4C 49 53 54 >                db      "LIST"
 691+ EC09             >len_NFA         defl    $ - temp_NFA
 691+ EC09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ EC05             >
 691+ EC05 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ EC06 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 691+ EC0A             >                org     $-1                 // alter last byte of Name just above to set
 691+ EC09 D4          >                db      {b $} | END_BIT     // msb as name end
 691+ EC0A             >
 691+ EC0A FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 691+ EC0C             >Prev_Ptr        defl    Heap_Ptr
 691+ EC0C             >
 691+ EC0C             >mirror_Ptr      defl    $
 691+ EC0C             >
 691+ EC0C C3 3C       >                dw      Dict_Ptr + 2        // xt
 691+ EC0E             >Heap_Ptr        defl    $ - $E000           // save current HP
 691+ EC0E             >
 691+ EC0E             >Current_HP      defl  $ - $E000             // used to set HP once!
 691+ EC0E             >
 691+ EC0E             >//              ______________________________________________________________________
 691+ EC0E             >//              Dictionary part
 691+ EC0E             >
 691+ EC0E             >                org     Dict_Ptr
 691+ 3CC1             >
 691+ 3CC1 0C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 691+ 3CC3             >
 691+ 3CC3             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 3CC3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 3CC6             >
 691+ 3CC6             >
 691+ 3CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 3CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 3CC6             >
 691+ 3CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 3CC6 40 2B 41 22                  dw      DECIMAL, CR
 693+ 3CCA B4 25 C3 27                  dw      DUP, SCR, STORE
 693+ 3CCE 28 26
 694+ 3CD0 9F 2D                        dw      C_DOT_QUOTE
 695+ 3CD2 05 53 63 72                  db      5, "Scr# "
 695+ 3CD6 23 20
 696+ 3CD8 4F 3C                        dw      DOT
 697+ 3CDA 4F 27 10 27                  dw      LSCR, ZERO, C_DO
 697+ 3CDE C6 20
 698+ 3CE0              List_Loop:
 699+ 3CE0 41 22                        dw          CR
 700+ 3CE2 CC 20 25 27                  dw          I, THREE
 701+ 3CE6 33 3C FE 28                  dw          DOT_R, SPACE
 702+ 3CEA CC 20 C3 27                  dw          I, SCR, FETCH, DOT_LINE
 702+ 3CEE 1E 26 52 35
 703+ 3CF2 3A 23                        dw          QTERMINAL
 704+ 3CF4 8D 20                        dw          ZBRANCH
 705+ 3CF6 06 00                        dw          List_Endif - $
 706+ 3CF8 96 20                        dw              C_LEAVE
 707+ 3CFA 06 00                        dw              List_Leave - $
 708+ 3CFC              List_Endif:
 709+ 3CFC 81 20                        dw      C_LOOP
 710+ 3CFE E2 FF                        dw      List_Loop - $
 711+ 3D00              List_Leave:
 712+ 3D00 41 22                        dw      CR
 713+ 3D02 E9 24                        dw      EXIT
 714+ 3D04
 715+ 3D04              //  ______________________________________________________________________
 716+ 3D04              //
 717+ 3D04              // index        n1 n2 --
 718+ 3D04                              Colon_Def INDEX, "INDEX", is_normal
 718+ 3D04             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 718+ 3D04             >
 718+ 3D04             >Dict_Ptr        defl    $
 718+ 3D04             >
 718+ 3D04             >//              ______________________________________________________________________
 718+ 3D04             >//              Heap part
 718+ 3D04             >
 718+ 3D04             >
 718+ 3D04             >                org     (Heap_Ptr & $1FFF) + $E000
 718+ EC0E             >
 718+ EC0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ EC0E             >Latest_Definition defl  Heap_Ptr
 718+ EC0E             >
 718+ EC0E             >                // dummy db directives used to calculate length of namec
 718+ EC0E 49 4E 44 45 >                db      "INDEX"
 718+ EC12 58          >
 718+ EC13             >len_NFA         defl    $ - temp_NFA
 718+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ EC0E             >
 718+ EC0E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ EC0F 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 718+ EC13 58          >
 718+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 718+ EC13 D8          >                db      {b $} | END_BIT     // msb as name end
 718+ EC14             >
 718+ EC14 05 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 718+ EC16             >Prev_Ptr        defl    Heap_Ptr
 718+ EC16             >
 718+ EC16             >mirror_Ptr      defl    $
 718+ EC16             >
 718+ EC16 06 3D       >                dw      Dict_Ptr + 2        // xt
 718+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 718+ EC18             >
 718+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 718+ EC18             >
 718+ EC18             >//              ______________________________________________________________________
 718+ EC18             >//              Dictionary part
 718+ EC18             >
 718+ EC18             >                org     Dict_Ptr
 718+ 3D04             >
 718+ 3D04 16 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 718+ 3D06             >
 718+ 3D06             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 3D06 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 3D09             >
 718+ 3D09             >
 718+ 3D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 3D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 3D09             >
 718+ 3D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 3D09 4F 25 AD 25                  dw      ONE_PLUS, SWAP, C_DO
 719+ 3D0D C6 20
 720+ 3D0F              Index_Loop:
 721+ 3D0F 41 22 CC 20                  dw          CR, I, THREE
 721+ 3D13 25 27
 722+ 3D15 33 3C FE 28                  dw          DOT_R, SPACE
 723+ 3D19 10 27 CC 20                  dw          ZERO, I, DOT_LINE
 723+ 3D1D 52 35
 724+ 3D1F 3A 23                        dw          QTERMINAL
 725+ 3D21 8D 20                        dw          ZBRANCH
 726+ 3D23 06 00                        dw          Index_Endif - $
 727+ 3D25 96 20                        dw              C_LEAVE
 728+ 3D27 06 00                        dw              Index_Leave - $
 729+ 3D29              Index_Endif:
 730+ 3D29 81 20                        dw      C_LOOP
 731+ 3D2B E4 FF                        dw      Index_Loop - $
 732+ 3D2D              Index_Leave:
 733+ 3D2D 41 22                        dw      CR
 734+ 3D2F E9 24                        dw      EXIT
 735+ 3D31
 736+ 3D31              //  ______________________________________________________________________
 737+ 3D31              //
 738+ 3D31              // cls          --
 739+ 3D31              //              Colon_Def CLS, "CLS", is_normal
 740+ 3D31              //              dw      LIT, $0E, EMITC
 741+ 3D31              //              dw      EXIT
 742+ 3D31
 743+ 3D31                              New_Def CLS, "CLS", is_code, is_normal
 743+ 3D31             >
 743+ 3D31             >Dict_Ptr        defl    $
 743+ 3D31             >
 743+ 3D31             >//              ______________________________________________________________________
 743+ 3D31             >//              Heap part
 743+ 3D31             >
 743+ 3D31             >
 743+ 3D31             >                org     (Heap_Ptr & $1FFF) + $E000
 743+ EC18             >
 743+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ EC18             >Latest_Definition defl  Heap_Ptr
 743+ EC18             >
 743+ EC18             >                // dummy db directives used to calculate length of namec
 743+ EC18 43 4C 53    >                db      "CLS"
 743+ EC1B             >len_NFA         defl    $ - temp_NFA
 743+ EC1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ EC18             >
 743+ EC18 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ EC19 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 743+ EC1C             >                org     $-1                 // alter last byte of Name just above to set
 743+ EC1B D3          >                db      {b $} | END_BIT     // msb as name end
 743+ EC1C             >
 743+ EC1C 0E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 743+ EC1E             >Prev_Ptr        defl    Heap_Ptr
 743+ EC1E             >
 743+ EC1E             >mirror_Ptr      defl    $
 743+ EC1E             >
 743+ EC1E 33 3D       >                dw      Dict_Ptr + 2        // xt
 743+ EC20             >Heap_Ptr        defl    $ - $E000           // save current HP
 743+ EC20             >
 743+ EC20             >Current_HP      defl  $ - $E000             // used to set HP once!
 743+ EC20             >
 743+ EC20             >//              ______________________________________________________________________
 743+ EC20             >//              Dictionary part
 743+ EC20             >
 743+ EC20             >                org     Dict_Ptr
 743+ 3D31             >
 743+ 3D31 1E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 743+ 3D33             >
 743+ 3D33             >CLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 3D33 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 743+ 3D33 ~           >
 743+ 3D33 ~           >
 743+ 3D33             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 3D33             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 3D33             >
 743+ 3D33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 3D33 C5                           push    bc
 745+ 3D34 D5                           push    de
 746+ 3D35 DD E5                        push    ix
 747+ 3D37 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 748+ 3D3A 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 749+ 3D3C AF                           xor     a           // query current status
 750+ 3D3D CF                           rst     8
 751+ 3D3E 94                           db      $94         // carry flag set on success
 752+ 3D3F A7                           and     a
 753+ 3D40 20 05                        jr      nz, CLS_No_Layer_0
 754+ 3D42 DF                             rst     $18
 755+ 3D43 AF 0D                          defw    $0DAF
 756+ 3D45 18 03                        jr      CLS_Layer_0
 757+ 3D47              CLS_No_Layer_0:
 758+ 3D47 3E 0E                          ld      a, $0E
 759+ 3D49 D7                             rst     $10
 760+ 3D4A              CLS_Layer_0:
 761+ 3D4A DD E1                        pop     ix
 762+ 3D4C D1                           pop     de
 763+ 3D4D C1                           pop     bc
 764+ 3D4E                              next
 764+ 3D4E DD E9       >                jp      (ix)
 765+ 3D50
 766+ 3D50              //  ______________________________________________________________________
 767+ 3D50              //
 768+ 3D50              // splash       --
 769+ 3D50              //              Colon_Def SPLASH, "SPLASH", is_normal
 770+ 3D50              //              dw      CLS
 771+ 3D50              //              dw      C_DOT_QUOTE
 772+ 3D50              //              db      87
 773+ 3D50              //              db      "v-Forth 1.8 NextZXOS version", 13    // 29
 774+ 3D50              //              db      "Heap Vocabulary - build 20250315", 13  // 33
 775+ 3D50              //              db      "1990-2025 Matteo Vitturi", 13        // 25
 776+ 3D50              //              dw      EXIT
 777+ 3D50
 778+ 3D50              //  ______________________________________________________________________
 779+ 3D50              //
 780+ 3D50              // splash       --
 781+ 3D50                              Colon_Def SPLASH, "SPLASH", is_normal
 781+ 3D50             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 781+ 3D50             >
 781+ 3D50             >Dict_Ptr        defl    $
 781+ 3D50             >
 781+ 3D50             >//              ______________________________________________________________________
 781+ 3D50             >//              Heap part
 781+ 3D50             >
 781+ 3D50             >
 781+ 3D50             >                org     (Heap_Ptr & $1FFF) + $E000
 781+ EC20             >
 781+ EC20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ EC20             >Latest_Definition defl  Heap_Ptr
 781+ EC20             >
 781+ EC20             >                // dummy db directives used to calculate length of namec
 781+ EC20 53 50 4C 41 >                db      "SPLASH"
 781+ EC24 53 48       >
 781+ EC26             >len_NFA         defl    $ - temp_NFA
 781+ EC26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ EC20             >
 781+ EC20 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ EC21 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 781+ EC25 53 48       >
 781+ EC27             >                org     $-1                 // alter last byte of Name just above to set
 781+ EC26 C8          >                db      {b $} | END_BIT     // msb as name end
 781+ EC27             >
 781+ EC27 18 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 781+ EC29             >Prev_Ptr        defl    Heap_Ptr
 781+ EC29             >
 781+ EC29             >mirror_Ptr      defl    $
 781+ EC29             >
 781+ EC29 52 3D       >                dw      Dict_Ptr + 2        // xt
 781+ EC2B             >Heap_Ptr        defl    $ - $E000           // save current HP
 781+ EC2B             >
 781+ EC2B             >Current_HP      defl  $ - $E000             // used to set HP once!
 781+ EC2B             >
 781+ EC2B             >//              ______________________________________________________________________
 781+ EC2B             >//              Dictionary part
 781+ EC2B             >
 781+ EC2B             >                org     Dict_Ptr
 781+ 3D50             >
 781+ 3D50 29 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 781+ 3D52             >
 781+ 3D52             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 3D52 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 781+ 3D55             >
 781+ 3D55             >
 781+ 3D55             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 3D55             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 3D55             >
 781+ 3D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 3D55 33 3D                        dw      CLS
 783+ 3D57 3D 20 02 00                  dw      LIT, Splash_Ptr
 784+ 3D5B 6F 29                        dw      FAR
 785+ 3D5D AE 2B 02 2C                  dw      COUNT, TYPE
 786+ 3D61 E9 24                        dw      EXIT
 787+ 3D63
 788+ 3D63              //  ______________________________________________________________________
 789+ 3D63              //
 790+ 3D63              // video        --
 791+ 3D63                              Colon_Def VIDEO, "VIDEO", is_normal
 791+ 3D63             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 791+ 3D63             >
 791+ 3D63             >Dict_Ptr        defl    $
 791+ 3D63             >
 791+ 3D63             >//              ______________________________________________________________________
 791+ 3D63             >//              Heap part
 791+ 3D63             >
 791+ 3D63             >
 791+ 3D63             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ EC2B             >
 791+ EC2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ EC2B             >Latest_Definition defl  Heap_Ptr
 791+ EC2B             >
 791+ EC2B             >                // dummy db directives used to calculate length of namec
 791+ EC2B 56 49 44 45 >                db      "VIDEO"
 791+ EC2F 4F          >
 791+ EC30             >len_NFA         defl    $ - temp_NFA
 791+ EC30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ EC2B             >
 791+ EC2B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ EC2C 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 791+ EC30 4F          >
 791+ EC31             >                org     $-1                 // alter last byte of Name just above to set
 791+ EC30 CF          >                db      {b $} | END_BIT     // msb as name end
 791+ EC31             >
 791+ EC31 20 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ EC33             >Prev_Ptr        defl    Heap_Ptr
 791+ EC33             >
 791+ EC33             >mirror_Ptr      defl    $
 791+ EC33             >
 791+ EC33 65 3D       >                dw      Dict_Ptr + 2        // xt
 791+ EC35             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ EC35             >
 791+ EC35             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ EC35             >
 791+ EC35             >//              ______________________________________________________________________
 791+ EC35             >//              Dictionary part
 791+ EC35             >
 791+ EC35             >                org     Dict_Ptr
 791+ 3D63             >
 791+ 3D63 33 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 3D65             >
 791+ 3D65             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 3D65 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 3D68             >
 791+ 3D68             >
 791+ 3D68             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 3D68             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 3D68             >
 791+ 3D68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 3D68 1E 27 B4 25                  dw      TWO, DUP, DEVICE, STORE
 792+ 3D6C 87 35 28 26
 793+ 3D70 4E 23                        dw      SELECT
 794+ 3D72 E9 24                        dw      EXIT
 795+ 3D74
 796+ 3D74              //  ______________________________________________________________________
 797+ 3D74              //
 798+ 3D74              // autoexec     --
 799+ 3D74              // this word is called the first time the Forth system boot to
 800+ 3D74              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 801+ 3D74                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 801+ 3D74             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 801+ 3D74             >
 801+ 3D74             >Dict_Ptr        defl    $
 801+ 3D74             >
 801+ 3D74             >//              ______________________________________________________________________
 801+ 3D74             >//              Heap part
 801+ 3D74             >
 801+ 3D74             >
 801+ 3D74             >                org     (Heap_Ptr & $1FFF) + $E000
 801+ EC35             >
 801+ EC35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 801+ EC35             >Latest_Definition defl  Heap_Ptr
 801+ EC35             >
 801+ EC35             >                // dummy db directives used to calculate length of namec
 801+ EC35 41 55 54 4F >                db      "AUTOEXEC"
 801+ EC39 45 58 45 43 >
 801+ EC3D             >len_NFA         defl    $ - temp_NFA
 801+ EC3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 801+ EC35             >
 801+ EC35 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 801+ EC36 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 801+ EC3A 45 58 45 43 >
 801+ EC3E             >                org     $-1                 // alter last byte of Name just above to set
 801+ EC3D C3          >                db      {b $} | END_BIT     // msb as name end
 801+ EC3E             >
 801+ EC3E 2B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 801+ EC40             >Prev_Ptr        defl    Heap_Ptr
 801+ EC40             >
 801+ EC40             >mirror_Ptr      defl    $
 801+ EC40             >
 801+ EC40 76 3D       >                dw      Dict_Ptr + 2        // xt
 801+ EC42             >Heap_Ptr        defl    $ - $E000           // save current HP
 801+ EC42             >
 801+ EC42             >Current_HP      defl  $ - $E000             // used to set HP once!
 801+ EC42             >
 801+ EC42             >//              ______________________________________________________________________
 801+ EC42             >//              Dictionary part
 801+ EC42             >
 801+ EC42             >                org     Dict_Ptr
 801+ 3D74             >
 801+ 3D74 40 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 801+ 3D76             >
 801+ 3D76             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 801+ 3D76 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 801+ 3D79             >
 801+ 3D79             >
 801+ 3D79             >                endif           ; ok        // for other definitions it "points" the correct handler
 801+ 3D79             >                // Use of "; ok" to suppress "warning[fwdref]"
 801+ 3D79             >
 801+ 3D79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 802+ 3D79              Autoexec_Self:
 803+ 3D79 3D 20 D7 26                  dw      LIT, NOOP
 804+ 3D7D 3D 20 54 32                  dw      LIT, Autoexec_Ptr
 805+ 3D81 28 26                        dw      STORE
 806+ 3D83 3D 20 39 3F                  dw      LIT, Param_From_Basic
 807+ 3D87 45 2D 17 27                  dw      PAD, ONE
 808+ 3D8B F1 23                        dw      F_OPEN
 809+ 3D8D 99 25                        dw      DROP
 810+ 3D8F 32 38                        dw      F_INCLUDE
 811+ 3D91 E9 24                        dw      EXIT
 812+ 3D93
 813+ 3D93
 814+ 3D93              //              dw      LIT, 11
 815+ 3D93              //              dw      LIT, NOOP
 816+ 3D93              //              dw      LIT, Autoexec_Ptr
 817+ 3D93              //              dw      STORE
 818+ 3D93              //              dw      LOAD
 819+ 3D93              //
 820+ 3D93              //              dw      NEEDS_FN, ONE, F_OPEN
 821+ 3D93              //              dw      LIT, 43, QERROR
 822+ 3D93              //              dw      DUP, F_INCLUDE
 823+ 3D93              //              dw      F_CLOSE, DROP
 824+ 3D93
 825+ 3D93              //              dw      QUIT
 826+ 3D93              //              dw      EXIT
 827+ 3D93
 828+ 3D93
 829+ 3D93              //  ______________________________________________________________________
 830+ 3D93              //
 831+ 3D93              // bye     --
 832+ 3D93              //
 833+ 3D93                              Colon_Def BYE, "BYE", is_normal
 833+ 3D93             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 833+ 3D93             >
 833+ 3D93             >Dict_Ptr        defl    $
 833+ 3D93             >
 833+ 3D93             >//              ______________________________________________________________________
 833+ 3D93             >//              Heap part
 833+ 3D93             >
 833+ 3D93             >
 833+ 3D93             >                org     (Heap_Ptr & $1FFF) + $E000
 833+ EC42             >
 833+ EC42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ EC42             >Latest_Definition defl  Heap_Ptr
 833+ EC42             >
 833+ EC42             >                // dummy db directives used to calculate length of namec
 833+ EC42 42 59 45    >                db      "BYE"
 833+ EC45             >len_NFA         defl    $ - temp_NFA
 833+ EC45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ EC42             >
 833+ EC42 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ EC43 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 833+ EC46             >                org     $-1                 // alter last byte of Name just above to set
 833+ EC45 C5          >                db      {b $} | END_BIT     // msb as name end
 833+ EC46             >
 833+ EC46 35 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 833+ EC48             >Prev_Ptr        defl    Heap_Ptr
 833+ EC48             >
 833+ EC48             >mirror_Ptr      defl    $
 833+ EC48             >
 833+ EC48 95 3D       >                dw      Dict_Ptr + 2        // xt
 833+ EC4A             >Heap_Ptr        defl    $ - $E000           // save current HP
 833+ EC4A             >
 833+ EC4A             >Current_HP      defl  $ - $E000             // used to set HP once!
 833+ EC4A             >
 833+ EC4A             >//              ______________________________________________________________________
 833+ EC4A             >//              Dictionary part
 833+ EC4A             >
 833+ EC4A             >                org     Dict_Ptr
 833+ 3D93             >
 833+ 3D93 48 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 833+ 3D95             >
 833+ 3D95             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ 3D95 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 833+ 3D98             >
 833+ 3D98             >
 833+ 3D98             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ 3D98             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ 3D98             >
 833+ 3D98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ 3D98 78 37                        dw      FLUSH
 835+ 3D9A C6 36                        dw      EMPTY_BUFFERS
 836+ 3D9C 1F 3F 1E 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 836+ 3DA0 89 23 99 25
 837+ 3DA4 10 27 56 27                  dw      ZERO, PLUS_ORIGIN
 838+ 3DA8 E7 33                        dw      BASIC
 839+ 3DAA
 840+ 3DAA              //  ______________________________________________________________________
 841+ 3DAA              //
 842+ 3DAA              // invv     --
 843+ 3DAA              //
 844+ 3DAA              //              Colon_Def INVV, "INVV", is_normal
 845+ 3DAA              //              dw      LIT, 20, EMITC, ONE, EMITC
 846+ 3DAA              //              dw      EXIT
 847+ 3DAA
 848+ 3DAA              //  ______________________________________________________________________
 849+ 3DAA              //
 850+ 3DAA              // truv     --
 851+ 3DAA              //
 852+ 3DAA              //              Colon_Def TRUV, "TRUV", is_normal
 853+ 3DAA              //              dw      LIT, 20, EMITC, ZERO, EMITC
 854+ 3DAA              //              dw      EXIT
 855+ 3DAA
 856+ 3DAA              //  ______________________________________________________________________
 857+ 3DAA              //
 858+ 3DAA              // mark     --
 859+ 3DAA              //
 860+ 3DAA              //              Colon_Def MARK, "MARK", is_normal
 861+ 3DAA              //              dw      INVV, TYPE, TRUV
 862+ 3DAA              //              dw      EXIT
 863+ 3DAA
 864+ 3DAA              //  ______________________________________________________________________
 865+ 3DAA              //
 866+ 3DAA              // back     --
 867+ 3DAA              //
 868+ 3DAA                              Colon_Def BACK, "BACK", is_normal
 868+ 3DAA             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 868+ 3DAA             >
 868+ 3DAA             >Dict_Ptr        defl    $
 868+ 3DAA             >
 868+ 3DAA             >//              ______________________________________________________________________
 868+ 3DAA             >//              Heap part
 868+ 3DAA             >
 868+ 3DAA             >
 868+ 3DAA             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ EC4A             >
 868+ EC4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ EC4A             >Latest_Definition defl  Heap_Ptr
 868+ EC4A             >
 868+ EC4A             >                // dummy db directives used to calculate length of namec
 868+ EC4A 42 41 43 4B >                db      "BACK"
 868+ EC4E             >len_NFA         defl    $ - temp_NFA
 868+ EC4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ EC4A             >
 868+ EC4A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ EC4B 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 868+ EC4F             >                org     $-1                 // alter last byte of Name just above to set
 868+ EC4E CB          >                db      {b $} | END_BIT     // msb as name end
 868+ EC4F             >
 868+ EC4F 42 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ EC51             >Prev_Ptr        defl    Heap_Ptr
 868+ EC51             >
 868+ EC51             >mirror_Ptr      defl    $
 868+ EC51             >
 868+ EC51 AC 3D       >                dw      Dict_Ptr + 2        // xt
 868+ EC53             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ EC53             >
 868+ EC53             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ EC53             >
 868+ EC53             >//              ______________________________________________________________________
 868+ EC53             >//              Dictionary part
 868+ EC53             >
 868+ EC53             >                org     Dict_Ptr
 868+ 3DAA             >
 868+ 3DAA 51 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 3DAC             >
 868+ 3DAC             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 3DAC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 868+ 3DAF             >
 868+ 3DAF             >
 868+ 3DAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 3DAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 3DAF             >
 868+ 3DAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 3DAF 35 28 74 28                  dw      HERE, SUBTRACT, COMMA
 869+ 3DB3 4B 28
 870+ 3DB5 E9 24                        dw      EXIT
 871+ 3DB7
 872+ 3DB7              //  ______________________________________________________________________
 873+ 3DB7              //
 874+ 3DB7              // if          ( -- a 2 ) \ compile-time
 875+ 3DB7              // IF ... THEN
 876+ 3DB7              // IF ... ELSE ... ENDIF
 877+ 3DB7                              Colon_Def IF, "IF", is_immediate
 877+ 3DB7             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 877+ 3DB7             >
 877+ 3DB7             >Dict_Ptr        defl    $
 877+ 3DB7             >
 877+ 3DB7             >//              ______________________________________________________________________
 877+ 3DB7             >//              Heap part
 877+ 3DB7             >
 877+ 3DB7             >
 877+ 3DB7             >                org     (Heap_Ptr & $1FFF) + $E000
 877+ EC53             >
 877+ EC53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ EC53             >Latest_Definition defl  Heap_Ptr
 877+ EC53             >
 877+ EC53             >                // dummy db directives used to calculate length of namec
 877+ EC53 49 46       >                db      "IF"
 877+ EC55             >len_NFA         defl    $ - temp_NFA
 877+ EC55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ EC53             >
 877+ EC53 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ EC54 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 877+ EC56             >                org     $-1                 // alter last byte of Name just above to set
 877+ EC55 C6          >                db      {b $} | END_BIT     // msb as name end
 877+ EC56             >
 877+ EC56 4A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 877+ EC58             >Prev_Ptr        defl    Heap_Ptr
 877+ EC58             >
 877+ EC58             >mirror_Ptr      defl    $
 877+ EC58             >
 877+ EC58 B9 3D       >                dw      Dict_Ptr + 2        // xt
 877+ EC5A             >Heap_Ptr        defl    $ - $E000           // save current HP
 877+ EC5A             >
 877+ EC5A             >Current_HP      defl  $ - $E000             // used to set HP once!
 877+ EC5A             >
 877+ EC5A             >//              ______________________________________________________________________
 877+ EC5A             >//              Dictionary part
 877+ EC5A             >
 877+ EC5A             >                org     Dict_Ptr
 877+ 3DB7             >
 877+ 3DB7 58 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 877+ 3DB9             >
 877+ 3DB9             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 3DB9 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 877+ 3DBC             >
 877+ 3DBC             >
 877+ 3DBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 3DBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 3DBC             >
 877+ 3DBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 3DBC D9 2A 8D 20                  dw      COMPILE, ZBRANCH
 879+ 3DC0 35 28 10 27                  dw      HERE, ZERO, COMMA
 879+ 3DC4 4B 28
 880+ 3DC6 1E 27                        dw      TWO
 881+ 3DC8 E9 24                        dw      EXIT
 882+ 3DCA
 883+ 3DCA              //  ______________________________________________________________________
 884+ 3DCA              //
 885+ 3DCA              // then        ( a 2 -- ) \ compile-time
 886+ 3DCA              //
 887+ 3DCA                              Colon_Def THEN, "THEN", is_immediate
 887+ 3DCA             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 887+ 3DCA             >
 887+ 3DCA             >Dict_Ptr        defl    $
 887+ 3DCA             >
 887+ 3DCA             >//              ______________________________________________________________________
 887+ 3DCA             >//              Heap part
 887+ 3DCA             >
 887+ 3DCA             >
 887+ 3DCA             >                org     (Heap_Ptr & $1FFF) + $E000
 887+ EC5A             >
 887+ EC5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 887+ EC5A             >Latest_Definition defl  Heap_Ptr
 887+ EC5A             >
 887+ EC5A             >                // dummy db directives used to calculate length of namec
 887+ EC5A 54 48 45 4E >                db      "THEN"
 887+ EC5E             >len_NFA         defl    $ - temp_NFA
 887+ EC5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 887+ EC5A             >
 887+ EC5A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 887+ EC5B 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 887+ EC5F             >                org     $-1                 // alter last byte of Name just above to set
 887+ EC5E CE          >                db      {b $} | END_BIT     // msb as name end
 887+ EC5F             >
 887+ EC5F 53 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 887+ EC61             >Prev_Ptr        defl    Heap_Ptr
 887+ EC61             >
 887+ EC61             >mirror_Ptr      defl    $
 887+ EC61             >
 887+ EC61 CC 3D       >                dw      Dict_Ptr + 2        // xt
 887+ EC63             >Heap_Ptr        defl    $ - $E000           // save current HP
 887+ EC63             >
 887+ EC63             >Current_HP      defl  $ - $E000             // used to set HP once!
 887+ EC63             >
 887+ EC63             >//              ______________________________________________________________________
 887+ EC63             >//              Dictionary part
 887+ EC63             >
 887+ EC63             >                org     Dict_Ptr
 887+ 3DCA             >
 887+ 3DCA 61 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 887+ 3DCC             >
 887+ 3DCC             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 887+ 3DCC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 887+ 3DCF             >
 887+ 3DCF             >
 887+ 3DCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 887+ 3DCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 887+ 3DCF             >
 887+ 3DCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 888+ 3DCF 7E 2A                        dw      QCOMP
 889+ 3DD1 1E 27 A2 2A                  dw      TWO, QPAIRS
 890+ 3DD5 35 28 90 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 890+ 3DD9 74 28 AD 25
 890+ 3DDD 28 26
 891+ 3DDF E9 24                        dw      EXIT
 892+ 3DE1
 893+ 3DE1              //  ______________________________________________________________________
 894+ 3DE1              //
 895+ 3DE1              // endif       ( a 2 -- ) \ compile-time
 896+ 3DE1              //
 897+ 3DE1                              Colon_Def ENDIF, "ENDIF", is_immediate
 897+ 3DE1             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 897+ 3DE1             >
 897+ 3DE1             >Dict_Ptr        defl    $
 897+ 3DE1             >
 897+ 3DE1             >//              ______________________________________________________________________
 897+ 3DE1             >//              Heap part
 897+ 3DE1             >
 897+ 3DE1             >
 897+ 3DE1             >                org     (Heap_Ptr & $1FFF) + $E000
 897+ EC63             >
 897+ EC63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ EC63             >Latest_Definition defl  Heap_Ptr
 897+ EC63             >
 897+ EC63             >                // dummy db directives used to calculate length of namec
 897+ EC63 45 4E 44 49 >                db      "ENDIF"
 897+ EC67 46          >
 897+ EC68             >len_NFA         defl    $ - temp_NFA
 897+ EC68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ EC63             >
 897+ EC63 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ EC64 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 897+ EC68 46          >
 897+ EC69             >                org     $-1                 // alter last byte of Name just above to set
 897+ EC68 C6          >                db      {b $} | END_BIT     // msb as name end
 897+ EC69             >
 897+ EC69 5A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 897+ EC6B             >Prev_Ptr        defl    Heap_Ptr
 897+ EC6B             >
 897+ EC6B             >mirror_Ptr      defl    $
 897+ EC6B             >
 897+ EC6B E3 3D       >                dw      Dict_Ptr + 2        // xt
 897+ EC6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 897+ EC6D             >
 897+ EC6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 897+ EC6D             >
 897+ EC6D             >//              ______________________________________________________________________
 897+ EC6D             >//              Dictionary part
 897+ EC6D             >
 897+ EC6D             >                org     Dict_Ptr
 897+ 3DE1             >
 897+ 3DE1 6B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 897+ 3DE3             >
 897+ 3DE3             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 3DE3 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 3DE6             >
 897+ 3DE6             >
 897+ 3DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 3DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 3DE6             >
 897+ 3DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 3DE6 CC 3D                        dw      THEN
 899+ 3DE8 E9 24                        dw      EXIT
 900+ 3DEA
 901+ 3DEA              //  ______________________________________________________________________
 902+ 3DEA              //
 903+ 3DEA              // else        ( a1 2 -- a2 2 ) \ compile-time
 904+ 3DEA              //
 905+ 3DEA                              Colon_Def ELSE, "ELSE", is_immediate
 905+ 3DEA             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 905+ 3DEA             >
 905+ 3DEA             >Dict_Ptr        defl    $
 905+ 3DEA             >
 905+ 3DEA             >//              ______________________________________________________________________
 905+ 3DEA             >//              Heap part
 905+ 3DEA             >
 905+ 3DEA             >
 905+ 3DEA             >                org     (Heap_Ptr & $1FFF) + $E000
 905+ EC6D             >
 905+ EC6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ EC6D             >Latest_Definition defl  Heap_Ptr
 905+ EC6D             >
 905+ EC6D             >                // dummy db directives used to calculate length of namec
 905+ EC6D 45 4C 53 45 >                db      "ELSE"
 905+ EC71             >len_NFA         defl    $ - temp_NFA
 905+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ EC6D             >
 905+ EC6D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ EC6E 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 905+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 905+ EC71 C5          >                db      {b $} | END_BIT     // msb as name end
 905+ EC72             >
 905+ EC72 63 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 905+ EC74             >Prev_Ptr        defl    Heap_Ptr
 905+ EC74             >
 905+ EC74             >mirror_Ptr      defl    $
 905+ EC74             >
 905+ EC74 EC 3D       >                dw      Dict_Ptr + 2        // xt
 905+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 905+ EC76             >
 905+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 905+ EC76             >
 905+ EC76             >//              ______________________________________________________________________
 905+ EC76             >//              Dictionary part
 905+ EC76             >
 905+ EC76             >                org     Dict_Ptr
 905+ 3DEA             >
 905+ 3DEA 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 905+ 3DEC             >
 905+ 3DEC             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 3DEC CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 3DEF             >
 905+ 3DEF             >
 905+ 3DEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 3DEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 3DEF             >
 905+ 3DEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 3DEF 7E 2A                        dw      QCOMP
 907+ 3DF1 1E 27 A2 2A                  dw      TWO, QPAIRS
 908+ 3DF5 D9 2A 89 20                  dw      COMPILE, BRANCH
 909+ 3DF9 35 28 10 27                  dw      HERE, ZERO, COMMA
 909+ 3DFD 4B 28
 910+ 3DFF AD 25 1E 27                  dw      SWAP, TWO, THEN
 910+ 3E03 CC 3D
 911+ 3E05 1E 27                        dw      TWO
 912+ 3E07 E9 24                        dw      EXIT
 913+ 3E09
 914+ 3E09              //  ______________________________________________________________________
 915+ 3E09              //
 916+ 3E09              // begin        ( -- a 1 ) \ compile-time
 917+ 3E09              // BEGIN ... AGAIN
 918+ 3E09              // BEGIN ... f UNTIL
 919+ 3E09              // BEGIN ... f WHILE ... REPEAT
 920+ 3E09                              Colon_Def BEGIN, "BEGIN", is_immediate
 920+ 3E09             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 920+ 3E09             >
 920+ 3E09             >Dict_Ptr        defl    $
 920+ 3E09             >
 920+ 3E09             >//              ______________________________________________________________________
 920+ 3E09             >//              Heap part
 920+ 3E09             >
 920+ 3E09             >
 920+ 3E09             >                org     (Heap_Ptr & $1FFF) + $E000
 920+ EC76             >
 920+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ EC76             >Latest_Definition defl  Heap_Ptr
 920+ EC76             >
 920+ EC76             >                // dummy db directives used to calculate length of namec
 920+ EC76 42 45 47 49 >                db      "BEGIN"
 920+ EC7A 4E          >
 920+ EC7B             >len_NFA         defl    $ - temp_NFA
 920+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ EC76             >
 920+ EC76 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ EC77 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 920+ EC7B 4E          >
 920+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 920+ EC7B CE          >                db      {b $} | END_BIT     // msb as name end
 920+ EC7C             >
 920+ EC7C 6D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 920+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 920+ EC7E             >
 920+ EC7E             >mirror_Ptr      defl    $
 920+ EC7E             >
 920+ EC7E 0B 3E       >                dw      Dict_Ptr + 2        // xt
 920+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 920+ EC80             >
 920+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 920+ EC80             >
 920+ EC80             >//              ______________________________________________________________________
 920+ EC80             >//              Dictionary part
 920+ EC80             >
 920+ EC80             >                org     Dict_Ptr
 920+ 3E09             >
 920+ 3E09 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 920+ 3E0B             >
 920+ 3E0B             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 3E0B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 3E0E             >
 920+ 3E0E             >
 920+ 3E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 3E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 3E0E             >
 920+ 3E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 3E0E 7E 2A                        dw      QCOMP
 922+ 3E10 35 28                        dw      HERE
 923+ 3E12 1E 27                        dw      TWO
 924+ 3E14 E9 24                        dw      EXIT
 925+ 3E16
 926+ 3E16              //  ______________________________________________________________________
 927+ 3E16              //
 928+ 3E16              // again        ( a 1 -- ) \ compile-time
 929+ 3E16                              Colon_Def AGAIN, "AGAIN", is_immediate
 929+ 3E16             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 929+ 3E16             >
 929+ 3E16             >Dict_Ptr        defl    $
 929+ 3E16             >
 929+ 3E16             >//              ______________________________________________________________________
 929+ 3E16             >//              Heap part
 929+ 3E16             >
 929+ 3E16             >
 929+ 3E16             >                org     (Heap_Ptr & $1FFF) + $E000
 929+ EC80             >
 929+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ EC80             >Latest_Definition defl  Heap_Ptr
 929+ EC80             >
 929+ EC80             >                // dummy db directives used to calculate length of namec
 929+ EC80 41 47 41 49 >                db      "AGAIN"
 929+ EC84 4E          >
 929+ EC85             >len_NFA         defl    $ - temp_NFA
 929+ EC85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ EC80             >
 929+ EC80 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ EC81 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 929+ EC85 4E          >
 929+ EC86             >                org     $-1                 // alter last byte of Name just above to set
 929+ EC85 CE          >                db      {b $} | END_BIT     // msb as name end
 929+ EC86             >
 929+ EC86 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 929+ EC88             >Prev_Ptr        defl    Heap_Ptr
 929+ EC88             >
 929+ EC88             >mirror_Ptr      defl    $
 929+ EC88             >
 929+ EC88 18 3E       >                dw      Dict_Ptr + 2        // xt
 929+ EC8A             >Heap_Ptr        defl    $ - $E000           // save current HP
 929+ EC8A             >
 929+ EC8A             >Current_HP      defl  $ - $E000             // used to set HP once!
 929+ EC8A             >
 929+ EC8A             >//              ______________________________________________________________________
 929+ EC8A             >//              Dictionary part
 929+ EC8A             >
 929+ EC8A             >                org     Dict_Ptr
 929+ 3E16             >
 929+ 3E16 88 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 929+ 3E18             >
 929+ 3E18             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 3E18 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 3E1B             >
 929+ 3E1B             >
 929+ 3E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 3E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 3E1B             >
 929+ 3E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 3E1B 7E 2A                        dw      QCOMP
 931+ 3E1D 1E 27 A2 2A                  dw      TWO, QPAIRS
 932+ 3E21 D9 2A 89 20                  dw      COMPILE, BRANCH
 933+ 3E25 AC 3D                        dw      BACK
 934+ 3E27 E9 24                        dw      EXIT
 935+ 3E29
 936+ 3E29              //  ______________________________________________________________________
 937+ 3E29              //
 938+ 3E29              // until        ( a 1 -- ) \ compile-time
 939+ 3E29                              Colon_Def UNTIL, "UNTIL", is_immediate
 939+ 3E29             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 939+ 3E29             >
 939+ 3E29             >Dict_Ptr        defl    $
 939+ 3E29             >
 939+ 3E29             >//              ______________________________________________________________________
 939+ 3E29             >//              Heap part
 939+ 3E29             >
 939+ 3E29             >
 939+ 3E29             >                org     (Heap_Ptr & $1FFF) + $E000
 939+ EC8A             >
 939+ EC8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ EC8A             >Latest_Definition defl  Heap_Ptr
 939+ EC8A             >
 939+ EC8A             >                // dummy db directives used to calculate length of namec
 939+ EC8A 55 4E 54 49 >                db      "UNTIL"
 939+ EC8E 4C          >
 939+ EC8F             >len_NFA         defl    $ - temp_NFA
 939+ EC8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ EC8A             >
 939+ EC8A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ EC8B 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 939+ EC8F 4C          >
 939+ EC90             >                org     $-1                 // alter last byte of Name just above to set
 939+ EC8F CC          >                db      {b $} | END_BIT     // msb as name end
 939+ EC90             >
 939+ EC90 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 939+ EC92             >Prev_Ptr        defl    Heap_Ptr
 939+ EC92             >
 939+ EC92             >mirror_Ptr      defl    $
 939+ EC92             >
 939+ EC92 2B 3E       >                dw      Dict_Ptr + 2        // xt
 939+ EC94             >Heap_Ptr        defl    $ - $E000           // save current HP
 939+ EC94             >
 939+ EC94             >Current_HP      defl  $ - $E000             // used to set HP once!
 939+ EC94             >
 939+ EC94             >//              ______________________________________________________________________
 939+ EC94             >//              Dictionary part
 939+ EC94             >
 939+ EC94             >                org     Dict_Ptr
 939+ 3E29             >
 939+ 3E29 92 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 939+ 3E2B             >
 939+ 3E2B             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 3E2B CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 3E2E             >
 939+ 3E2E             >
 939+ 3E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 3E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 3E2E             >
 939+ 3E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 3E2E 7E 2A                        dw      QCOMP
 941+ 3E30 1E 27 A2 2A                  dw      TWO, QPAIRS
 942+ 3E34 D9 2A 8D 20                  dw      COMPILE, ZBRANCH
 943+ 3E38 AC 3D                        dw      BACK
 944+ 3E3A E9 24                        dw      EXIT
 945+ 3E3C
 946+ 3E3C              //  ______________________________________________________________________
 947+ 3E3C              //
 948+ 3E3C              // end          ( a 1 -- ) \ compile-time
 949+ 3E3C                              Colon_Def END, "END", is_immediate
 949+ 3E3C             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 949+ 3E3C             >
 949+ 3E3C             >Dict_Ptr        defl    $
 949+ 3E3C             >
 949+ 3E3C             >//              ______________________________________________________________________
 949+ 3E3C             >//              Heap part
 949+ 3E3C             >
 949+ 3E3C             >
 949+ 3E3C             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ EC94             >
 949+ EC94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ EC94             >Latest_Definition defl  Heap_Ptr
 949+ EC94             >
 949+ EC94             >                // dummy db directives used to calculate length of namec
 949+ EC94 45 4E 44    >                db      "END"
 949+ EC97             >len_NFA         defl    $ - temp_NFA
 949+ EC97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ EC94             >
 949+ EC94 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ EC95 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 949+ EC98             >                org     $-1                 // alter last byte of Name just above to set
 949+ EC97 C4          >                db      {b $} | END_BIT     // msb as name end
 949+ EC98             >
 949+ EC98 8A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ EC9A             >Prev_Ptr        defl    Heap_Ptr
 949+ EC9A             >
 949+ EC9A             >mirror_Ptr      defl    $
 949+ EC9A             >
 949+ EC9A 3E 3E       >                dw      Dict_Ptr + 2        // xt
 949+ EC9C             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ EC9C             >
 949+ EC9C             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ EC9C             >
 949+ EC9C             >//              ______________________________________________________________________
 949+ EC9C             >//              Dictionary part
 949+ EC9C             >
 949+ EC9C             >                org     Dict_Ptr
 949+ 3E3C             >
 949+ 3E3C 9A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 3E3E             >
 949+ 3E3E             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 3E3E CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 3E41             >
 949+ 3E41             >
 949+ 3E41             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 3E41             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 3E41             >
 949+ 3E41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 3E41 2B 3E                        dw      UNTIL
 951+ 3E43 E9 24                        dw      EXIT
 952+ 3E45
 953+ 3E45              //  ______________________________________________________________________
 954+ 3E45              //
 955+ 3E45              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 956+ 3E45                              Colon_Def WHILE, "WHILE", is_immediate
 956+ 3E45             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 956+ 3E45             >
 956+ 3E45             >Dict_Ptr        defl    $
 956+ 3E45             >
 956+ 3E45             >//              ______________________________________________________________________
 956+ 3E45             >//              Heap part
 956+ 3E45             >
 956+ 3E45             >
 956+ 3E45             >                org     (Heap_Ptr & $1FFF) + $E000
 956+ EC9C             >
 956+ EC9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ EC9C             >Latest_Definition defl  Heap_Ptr
 956+ EC9C             >
 956+ EC9C             >                // dummy db directives used to calculate length of namec
 956+ EC9C 57 48 49 4C >                db      "WHILE"
 956+ ECA0 45          >
 956+ ECA1             >len_NFA         defl    $ - temp_NFA
 956+ ECA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ EC9C             >
 956+ EC9C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ EC9D 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 956+ ECA1 45          >
 956+ ECA2             >                org     $-1                 // alter last byte of Name just above to set
 956+ ECA1 C5          >                db      {b $} | END_BIT     // msb as name end
 956+ ECA2             >
 956+ ECA2 94 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 956+ ECA4             >Prev_Ptr        defl    Heap_Ptr
 956+ ECA4             >
 956+ ECA4             >mirror_Ptr      defl    $
 956+ ECA4             >
 956+ ECA4 47 3E       >                dw      Dict_Ptr + 2        // xt
 956+ ECA6             >Heap_Ptr        defl    $ - $E000           // save current HP
 956+ ECA6             >
 956+ ECA6             >Current_HP      defl  $ - $E000             // used to set HP once!
 956+ ECA6             >
 956+ ECA6             >//              ______________________________________________________________________
 956+ ECA6             >//              Dictionary part
 956+ ECA6             >
 956+ ECA6             >                org     Dict_Ptr
 956+ 3E45             >
 956+ 3E45 A4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 956+ 3E47             >
 956+ 3E47             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 3E47 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 956+ 3E4A             >
 956+ 3E4A             >
 956+ 3E4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 3E4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 3E4A             >
 956+ 3E4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 3E4A B9 3D                        dw      IF
 958+ 3E4C              //              dw      TWO_PLUS // ( that is 4 )
 959+ 3E4C EF 25                        dw      TWO_SWAP
 960+ 3E4E E9 24                        dw      EXIT
 961+ 3E50
 962+ 3E50              //  ______________________________________________________________________
 963+ 3E50              //
 964+ 3E50              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 965+ 3E50                              Colon_Def REPEAT, "REPEAT", is_immediate
 965+ 3E50             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 965+ 3E50             >
 965+ 3E50             >Dict_Ptr        defl    $
 965+ 3E50             >
 965+ 3E50             >//              ______________________________________________________________________
 965+ 3E50             >//              Heap part
 965+ 3E50             >
 965+ 3E50             >
 965+ 3E50             >                org     (Heap_Ptr & $1FFF) + $E000
 965+ ECA6             >
 965+ ECA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 965+ ECA6             >Latest_Definition defl  Heap_Ptr
 965+ ECA6             >
 965+ ECA6             >                // dummy db directives used to calculate length of namec
 965+ ECA6 52 45 50 45 >                db      "REPEAT"
 965+ ECAA 41 54       >
 965+ ECAC             >len_NFA         defl    $ - temp_NFA
 965+ ECAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 965+ ECA6             >
 965+ ECA6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 965+ ECA7 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 965+ ECAB 41 54       >
 965+ ECAD             >                org     $-1                 // alter last byte of Name just above to set
 965+ ECAC D4          >                db      {b $} | END_BIT     // msb as name end
 965+ ECAD             >
 965+ ECAD 9C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 965+ ECAF             >Prev_Ptr        defl    Heap_Ptr
 965+ ECAF             >
 965+ ECAF             >mirror_Ptr      defl    $
 965+ ECAF             >
 965+ ECAF 52 3E       >                dw      Dict_Ptr + 2        // xt
 965+ ECB1             >Heap_Ptr        defl    $ - $E000           // save current HP
 965+ ECB1             >
 965+ ECB1             >Current_HP      defl  $ - $E000             // used to set HP once!
 965+ ECB1             >
 965+ ECB1             >//              ______________________________________________________________________
 965+ ECB1             >//              Dictionary part
 965+ ECB1             >
 965+ ECB1             >                org     Dict_Ptr
 965+ 3E50             >
 965+ 3E50 AF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 965+ 3E52             >
 965+ 3E52             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 965+ 3E52 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 965+ 3E55             >
 965+ 3E55             >
 965+ 3E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 965+ 3E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 965+ 3E55             >
 965+ 3E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 966+ 3E55 18 3E                        dw      AGAIN
 967+ 3E57              //              dw      TWO_MINUS
 968+ 3E57 CC 3D                        dw      THEN
 969+ 3E59 E9 24                        dw      EXIT
 970+ 3E5B
 971+ 3E5B              //  ______________________________________________________________________
 972+ 3E5B              //
 973+ 3E5B              // ?do-
 974+ 3E5B              // special version of "BACK" used by ?DO and LOOP
 975+ 3E5B                              Colon_Def C_DO_BACK, "?DO-", is_normal
 975+ 3E5B             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 975+ 3E5B             >
 975+ 3E5B             >Dict_Ptr        defl    $
 975+ 3E5B             >
 975+ 3E5B             >//              ______________________________________________________________________
 975+ 3E5B             >//              Heap part
 975+ 3E5B             >
 975+ 3E5B             >
 975+ 3E5B             >                org     (Heap_Ptr & $1FFF) + $E000
 975+ ECB1             >
 975+ ECB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 975+ ECB1             >Latest_Definition defl  Heap_Ptr
 975+ ECB1             >
 975+ ECB1             >                // dummy db directives used to calculate length of namec
 975+ ECB1 3F 44 4F 2D >                db      "?DO-"
 975+ ECB5             >len_NFA         defl    $ - temp_NFA
 975+ ECB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 975+ ECB1             >
 975+ ECB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 975+ ECB2 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 975+ ECB6             >                org     $-1                 // alter last byte of Name just above to set
 975+ ECB5 AD          >                db      {b $} | END_BIT     // msb as name end
 975+ ECB6             >
 975+ ECB6 A6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 975+ ECB8             >Prev_Ptr        defl    Heap_Ptr
 975+ ECB8             >
 975+ ECB8             >mirror_Ptr      defl    $
 975+ ECB8             >
 975+ ECB8 5D 3E       >                dw      Dict_Ptr + 2        // xt
 975+ ECBA             >Heap_Ptr        defl    $ - $E000           // save current HP
 975+ ECBA             >
 975+ ECBA             >Current_HP      defl  $ - $E000             // used to set HP once!
 975+ ECBA             >
 975+ ECBA             >//              ______________________________________________________________________
 975+ ECBA             >//              Dictionary part
 975+ ECBA             >
 975+ ECBA             >                org     Dict_Ptr
 975+ 3E5B             >
 975+ 3E5B B8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 975+ 3E5D             >
 975+ 3E5D             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 975+ 3E5D CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 975+ 3E60             >
 975+ 3E60             >
 975+ 3E60             >                endif           ; ok        // for other definitions it "points" the correct handler
 975+ 3E60             >                // Use of "; ok" to suppress "warning[fwdref]"
 975+ 3E60             >
 975+ 3E60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 976+ 3E60 AC 3D                        dw      BACK
 977+ 3E62              CDoBack_Begin:
 978+ 3E62 D0 24 F3 27                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 978+ 3E66 1E 26 74 28
 979+ 3E6A 8D 20                        dw      ZBRANCH
 980+ 3E6C 0A 00                        dw      CDoBack_While - $
 981+ 3E6E 5D 25 CC 3D                  dw          TWO_PLUS, THEN
 982+ 3E72 89 20                        dw      BRANCH
 983+ 3E74 EE FF                        dw      CDoBack_Begin - $
 984+ 3E76              CDoBack_While:
 985+ 3E76 B1 2A F3 27                  dw      QCSP, CSP, STORE
 985+ 3E7A 28 26
 986+ 3E7C E9 24                        dw      EXIT
 987+ 3E7E
 988+ 3E7E              //  ______________________________________________________________________
 989+ 3E7E              //
 990+ 3E7E              // do
 991+ 3E7E              // DO  ... LOOP
 992+ 3E7E              // DO  ... n +LOOP
 993+ 3E7E              // ?DO ... LOOP
 994+ 3E7E              // ?DO ... n +LOOP
 995+ 3E7E                              Colon_Def DO, "DO", is_immediate
 995+ 3E7E             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 995+ 3E7E             >
 995+ 3E7E             >Dict_Ptr        defl    $
 995+ 3E7E             >
 995+ 3E7E             >//              ______________________________________________________________________
 995+ 3E7E             >//              Heap part
 995+ 3E7E             >
 995+ 3E7E             >
 995+ 3E7E             >                org     (Heap_Ptr & $1FFF) + $E000
 995+ ECBA             >
 995+ ECBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 995+ ECBA             >Latest_Definition defl  Heap_Ptr
 995+ ECBA             >
 995+ ECBA             >                // dummy db directives used to calculate length of namec
 995+ ECBA 44 4F       >                db      "DO"
 995+ ECBC             >len_NFA         defl    $ - temp_NFA
 995+ ECBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 995+ ECBA             >
 995+ ECBA C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 995+ ECBB 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 995+ ECBD             >                org     $-1                 // alter last byte of Name just above to set
 995+ ECBC CF          >                db      {b $} | END_BIT     // msb as name end
 995+ ECBD             >
 995+ ECBD B1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 995+ ECBF             >Prev_Ptr        defl    Heap_Ptr
 995+ ECBF             >
 995+ ECBF             >mirror_Ptr      defl    $
 995+ ECBF             >
 995+ ECBF 80 3E       >                dw      Dict_Ptr + 2        // xt
 995+ ECC1             >Heap_Ptr        defl    $ - $E000           // save current HP
 995+ ECC1             >
 995+ ECC1             >Current_HP      defl  $ - $E000             // used to set HP once!
 995+ ECC1             >
 995+ ECC1             >//              ______________________________________________________________________
 995+ ECC1             >//              Dictionary part
 995+ ECC1             >
 995+ ECC1             >                org     Dict_Ptr
 995+ 3E7E             >
 995+ 3E7E BF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 995+ 3E80             >
 995+ 3E80             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 995+ 3E80 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 995+ 3E83             >
 995+ 3E83             >
 995+ 3E83             >                endif           ; ok        // for other definitions it "points" the correct handler
 995+ 3E83             >                // Use of "; ok" to suppress "warning[fwdref]"
 995+ 3E83             >
 995+ 3E83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 996+ 3E83 D9 2A C6 20                  dw      COMPILE, C_DO
 997+ 3E87 F3 27 1E 26                  dw      CSP, FETCH, STORE_CSP
 997+ 3E8B 5C 2A
 998+ 3E8D 35 28 25 27                  dw      HERE, THREE
 999+ 3E91 E9 24                        dw      EXIT
1000+ 3E93
1001+ 3E93              //  ______________________________________________________________________
1002+ 3E93              //
1003+ 3E93              // loop
1004+ 3E93                              Colon_Def LOOP, "LOOP", is_immediate
1004+ 3E93             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1004+ 3E93             >
1004+ 3E93             >Dict_Ptr        defl    $
1004+ 3E93             >
1004+ 3E93             >//              ______________________________________________________________________
1004+ 3E93             >//              Heap part
1004+ 3E93             >
1004+ 3E93             >
1004+ 3E93             >                org     (Heap_Ptr & $1FFF) + $E000
1004+ ECC1             >
1004+ ECC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1004+ ECC1             >Latest_Definition defl  Heap_Ptr
1004+ ECC1             >
1004+ ECC1             >                // dummy db directives used to calculate length of namec
1004+ ECC1 4C 4F 4F 50 >                db      "LOOP"
1004+ ECC5             >len_NFA         defl    $ - temp_NFA
1004+ ECC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1004+ ECC1             >
1004+ ECC1 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1004+ ECC2 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1004+ ECC6             >                org     $-1                 // alter last byte of Name just above to set
1004+ ECC5 D0          >                db      {b $} | END_BIT     // msb as name end
1004+ ECC6             >
1004+ ECC6 BA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1004+ ECC8             >Prev_Ptr        defl    Heap_Ptr
1004+ ECC8             >
1004+ ECC8             >mirror_Ptr      defl    $
1004+ ECC8             >
1004+ ECC8 95 3E       >                dw      Dict_Ptr + 2        // xt
1004+ ECCA             >Heap_Ptr        defl    $ - $E000           // save current HP
1004+ ECCA             >
1004+ ECCA             >Current_HP      defl  $ - $E000             // used to set HP once!
1004+ ECCA             >
1004+ ECCA             >//              ______________________________________________________________________
1004+ ECCA             >//              Dictionary part
1004+ ECCA             >
1004+ ECCA             >                org     Dict_Ptr
1004+ 3E93             >
1004+ 3E93 C8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1004+ 3E95             >
1004+ 3E95             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1004+ 3E95 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1004+ 3E98             >
1004+ 3E98             >
1004+ 3E98             >                endif           ; ok        // for other definitions it "points" the correct handler
1004+ 3E98             >                // Use of "; ok" to suppress "warning[fwdref]"
1004+ 3E98             >
1004+ 3E98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1005+ 3E98 25 27 A2 2A                  dw      THREE, QPAIRS
1006+ 3E9C D9 2A 81 20                  dw      COMPILE, C_LOOP
1007+ 3EA0 5D 3E                        dw      C_DO_BACK
1008+ 3EA2 E9 24                        dw      EXIT
1009+ 3EA4
1010+ 3EA4              //  ______________________________________________________________________
1011+ 3EA4              //
1012+ 3EA4              // +loop
1013+ 3EA4                              Colon_Def PLOOP, "+LOOP", is_immediate
1013+ 3EA4             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1013+ 3EA4             >
1013+ 3EA4             >Dict_Ptr        defl    $
1013+ 3EA4             >
1013+ 3EA4             >//              ______________________________________________________________________
1013+ 3EA4             >//              Heap part
1013+ 3EA4             >
1013+ 3EA4             >
1013+ 3EA4             >                org     (Heap_Ptr & $1FFF) + $E000
1013+ ECCA             >
1013+ ECCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ ECCA             >Latest_Definition defl  Heap_Ptr
1013+ ECCA             >
1013+ ECCA             >                // dummy db directives used to calculate length of namec
1013+ ECCA 2B 4C 4F 4F >                db      "+LOOP"
1013+ ECCE 50          >
1013+ ECCF             >len_NFA         defl    $ - temp_NFA
1013+ ECCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ ECCA             >
1013+ ECCA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ ECCB 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1013+ ECCF 50          >
1013+ ECD0             >                org     $-1                 // alter last byte of Name just above to set
1013+ ECCF D0          >                db      {b $} | END_BIT     // msb as name end
1013+ ECD0             >
1013+ ECD0 C1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1013+ ECD2             >Prev_Ptr        defl    Heap_Ptr
1013+ ECD2             >
1013+ ECD2             >mirror_Ptr      defl    $
1013+ ECD2             >
1013+ ECD2 A6 3E       >                dw      Dict_Ptr + 2        // xt
1013+ ECD4             >Heap_Ptr        defl    $ - $E000           // save current HP
1013+ ECD4             >
1013+ ECD4             >Current_HP      defl  $ - $E000             // used to set HP once!
1013+ ECD4             >
1013+ ECD4             >//              ______________________________________________________________________
1013+ ECD4             >//              Dictionary part
1013+ ECD4             >
1013+ ECD4             >                org     Dict_Ptr
1013+ 3EA4             >
1013+ 3EA4 D2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1013+ 3EA6             >
1013+ 3EA6             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 3EA6 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1013+ 3EA9             >
1013+ 3EA9             >
1013+ 3EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 3EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 3EA9             >
1013+ 3EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 3EA9 25 27 A2 2A                  dw      THREE, QPAIRS
1015+ 3EAD D9 2A 4B 20                  dw      COMPILE, C_PLOOP
1016+ 3EB1 5D 3E                        dw      C_DO_BACK
1017+ 3EB3 E9 24                        dw      EXIT
1018+ 3EB5
1019+ 3EB5              //  ______________________________________________________________________
1020+ 3EB5              //
1021+ 3EB5              // ?do
1022+ 3EB5                              Colon_Def QDO, "?DO", is_immediate
1022+ 3EB5             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1022+ 3EB5             >
1022+ 3EB5             >Dict_Ptr        defl    $
1022+ 3EB5             >
1022+ 3EB5             >//              ______________________________________________________________________
1022+ 3EB5             >//              Heap part
1022+ 3EB5             >
1022+ 3EB5             >
1022+ 3EB5             >                org     (Heap_Ptr & $1FFF) + $E000
1022+ ECD4             >
1022+ ECD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1022+ ECD4             >Latest_Definition defl  Heap_Ptr
1022+ ECD4             >
1022+ ECD4             >                // dummy db directives used to calculate length of namec
1022+ ECD4 3F 44 4F    >                db      "?DO"
1022+ ECD7             >len_NFA         defl    $ - temp_NFA
1022+ ECD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1022+ ECD4             >
1022+ ECD4 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1022+ ECD5 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1022+ ECD8             >                org     $-1                 // alter last byte of Name just above to set
1022+ ECD7 CF          >                db      {b $} | END_BIT     // msb as name end
1022+ ECD8             >
1022+ ECD8 CA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1022+ ECDA             >Prev_Ptr        defl    Heap_Ptr
1022+ ECDA             >
1022+ ECDA             >mirror_Ptr      defl    $
1022+ ECDA             >
1022+ ECDA B7 3E       >                dw      Dict_Ptr + 2        // xt
1022+ ECDC             >Heap_Ptr        defl    $ - $E000           // save current HP
1022+ ECDC             >
1022+ ECDC             >Current_HP      defl  $ - $E000             // used to set HP once!
1022+ ECDC             >
1022+ ECDC             >//              ______________________________________________________________________
1022+ ECDC             >//              Dictionary part
1022+ ECDC             >
1022+ ECDC             >                org     Dict_Ptr
1022+ 3EB5             >
1022+ 3EB5 DA 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1022+ 3EB7             >
1022+ 3EB7             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1022+ 3EB7 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1022+ 3EBA             >
1022+ 3EBA             >
1022+ 3EBA             >                endif           ; ok        // for other definitions it "points" the correct handler
1022+ 3EBA             >                // Use of "; ok" to suppress "warning[fwdref]"
1022+ 3EBA             >
1022+ 3EBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1023+ 3EBA D9 2A A0 20                  dw      COMPILE, C_Q_DO
1024+ 3EBE F3 27 1E 26                  dw      CSP, FETCH, STORE_CSP
1024+ 3EC2 5C 2A
1025+ 3EC4 35 28 10 27                  dw      HERE, ZERO, COMMA, ZERO
1025+ 3EC8 4B 28 10 27
1026+ 3ECC 35 28 25 27                  dw      HERE, THREE
1027+ 3ED0 E9 24                        dw      EXIT
1028+ 3ED2
1029+ 3ED2              //  ______________________________________________________________________
1030+ 3ED2              //
1031+ 3ED2              // \
1032+ 3ED2                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1032+ 3ED2             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1032+ 3ED2             >
1032+ 3ED2             >Dict_Ptr        defl    $
1032+ 3ED2             >
1032+ 3ED2             >//              ______________________________________________________________________
1032+ 3ED2             >//              Heap part
1032+ 3ED2             >
1032+ 3ED2             >
1032+ 3ED2             >                org     (Heap_Ptr & $1FFF) + $E000
1032+ ECDC             >
1032+ ECDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ ECDC             >Latest_Definition defl  Heap_Ptr
1032+ ECDC             >
1032+ ECDC             >                // dummy db directives used to calculate length of namec
1032+ ECDC 5C          >                db      "\\"
1032+ ECDD             >len_NFA         defl    $ - temp_NFA
1032+ ECDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ ECDC             >
1032+ ECDC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ ECDD 5C          >                db      "\\"               // name string in 7-bit ascii, but
1032+ ECDE             >                org     $-1                 // alter last byte of Name just above to set
1032+ ECDD DC          >                db      {b $} | END_BIT     // msb as name end
1032+ ECDE             >
1032+ ECDE D4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1032+ ECE0             >Prev_Ptr        defl    Heap_Ptr
1032+ ECE0             >
1032+ ECE0             >mirror_Ptr      defl    $
1032+ ECE0             >
1032+ ECE0 D4 3E       >                dw      Dict_Ptr + 2        // xt
1032+ ECE2             >Heap_Ptr        defl    $ - $E000           // save current HP
1032+ ECE2             >
1032+ ECE2             >Current_HP      defl  $ - $E000             // used to set HP once!
1032+ ECE2             >
1032+ ECE2             >//              ______________________________________________________________________
1032+ ECE2             >//              Dictionary part
1032+ ECE2             >
1032+ ECE2             >                org     Dict_Ptr
1032+ 3ED2             >
1032+ 3ED2 E0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1032+ 3ED4             >
1032+ 3ED4             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 3ED4 CD BB 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1032+ 3ED7             >
1032+ 3ED7             >
1032+ 3ED7             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 3ED7             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 3ED7             >
1032+ 3ED7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 3ED7 B1 27 1E 26                  dw      BLK, FETCH
1034+ 3EDB 56 25                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 3EDD 8D 20                        dw      ZBRANCH
1036+ 3EDF 34 00                        dw      Backslash_Else_1 - $
1037+ 3EE1
1038+ 3EE1 B1 27 1E 26                  dw          BLK, FETCH
1039+ 3EE5 8D 20                        dw          ZBRANCH
1040+ 3EE7 1A 00                        dw          Backslash_Else_2 - $
1041+ 3EE9
1042+ 3EE9 B7 27 1E 26                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1042+ 3EED 3A 27 56 25
1042+ 3EF1 A9 24 3A 27
1043+ 3EF5 AD 25 74 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1043+ 3EF9 B7 27 06 26
1044+ 3EFD 89 20                        dw          BRANCH
1045+ 3EFF 10 00                        dw          Backslash_Endif_2 - $
1046+ 3F01              Backslash_Else_2:
1047+ 3F01 10 27 75 27                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1047+ 3F05 1E 26 B7 27
1047+ 3F09 1E 26 36 25
1047+ 3F0D 3C 26
1048+ 3F0F              Backslash_Endif_2:
1049+ 3F0F 89 20                        dw      BRANCH
1050+ 3F11 0A 00                        dw      Backslash_Endif_1 - $
1051+ 3F13              Backslash_Else_1:
1052+ 3F13 41 27 69 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1052+ 3F17 B7 27 28 26
1053+ 3F1B              Backslash_Endif_1:
1054+ 3F1B E9 24                        dw      EXIT
1055+ 3F1D
1056+ 3F1D              //  ______________________________________________________________________
1057+ 3F1D              //
1058+ 3F1D              // blk-fh
1059+ 3F1D                              Variable_Def BLK_FH,   "BLK-FH",   1
1059+ 3F1D             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1059+ 3F1D             >
1059+ 3F1D             >Dict_Ptr        defl    $
1059+ 3F1D             >
1059+ 3F1D             >//              ______________________________________________________________________
1059+ 3F1D             >//              Heap part
1059+ 3F1D             >
1059+ 3F1D             >
1059+ 3F1D             >                org     (Heap_Ptr & $1FFF) + $E000
1059+ ECE2             >
1059+ ECE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1059+ ECE2             >Latest_Definition defl  Heap_Ptr
1059+ ECE2             >
1059+ ECE2             >                // dummy db directives used to calculate length of namec
1059+ ECE2 42 4C 4B 2D >                db      "BLK-FH"
1059+ ECE6 46 48       >
1059+ ECE8             >len_NFA         defl    $ - temp_NFA
1059+ ECE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1059+ ECE2             >
1059+ ECE2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1059+ ECE3 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1059+ ECE7 46 48       >
1059+ ECE9             >                org     $-1                 // alter last byte of Name just above to set
1059+ ECE8 C8          >                db      {b $} | END_BIT     // msb as name end
1059+ ECE9             >
1059+ ECE9 DC 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1059+ ECEB             >Prev_Ptr        defl    Heap_Ptr
1059+ ECEB             >
1059+ ECEB             >mirror_Ptr      defl    $
1059+ ECEB             >
1059+ ECEB 1F 3F       >                dw      Dict_Ptr + 2        // xt
1059+ ECED             >Heap_Ptr        defl    $ - $E000           // save current HP
1059+ ECED             >
1059+ ECED             >Current_HP      defl  $ - $E000             // used to set HP once!
1059+ ECED             >
1059+ ECED             >//              ______________________________________________________________________
1059+ ECED             >//              Dictionary part
1059+ ECED             >
1059+ ECED             >                org     Dict_Ptr
1059+ 3F1D             >
1059+ 3F1D EB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1059+ 3F1F             >
1059+ 3F1F             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1059+ 3F1F CD F7 26    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1059+ 3F22             >
1059+ 3F22             >
1059+ 3F22             >                endif           ; ok        // for other definitions it "points" the correct handler
1059+ 3F22             >                // Use of "; ok" to suppress "warning[fwdref]"
1059+ 3F22             >
1059+ 3F22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1059+ 3F22 01 00       >                dw      1
1060+ 3F24
1061+ 3F24                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1061+ 3F24             >
1061+ 3F24             >Dict_Ptr        defl    $
1061+ 3F24             >
1061+ 3F24             >//              ______________________________________________________________________
1061+ 3F24             >//              Heap part
1061+ 3F24             >
1061+ 3F24             >
1061+ 3F24             >                org     (Heap_Ptr & $1FFF) + $E000
1061+ ECED             >
1061+ ECED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1061+ ECED             >Latest_Definition defl  Heap_Ptr
1061+ ECED             >
1061+ ECED             >                // dummy db directives used to calculate length of namec
1061+ ECED 42 4C 4B 2D >                db      "BLK-FNAME"
1061+ ECF1 46 4E 41 4D >
1061+ ECF5 45          >
1061+ ECF6             >len_NFA         defl    $ - temp_NFA
1061+ ECF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1061+ ECED             >
1061+ ECED 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1061+ ECEE 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1061+ ECF2 46 4E 41 4D >
1061+ ECF6 45          >
1061+ ECF7             >                org     $-1                 // alter last byte of Name just above to set
1061+ ECF6 C5          >                db      {b $} | END_BIT     // msb as name end
1061+ ECF7             >
1061+ ECF7 E2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1061+ ECF9             >Prev_Ptr        defl    Heap_Ptr
1061+ ECF9             >
1061+ ECF9             >mirror_Ptr      defl    $
1061+ ECF9             >
1061+ ECF9 26 3F       >                dw      Dict_Ptr + 2        // xt
1061+ ECFB             >Heap_Ptr        defl    $ - $E000           // save current HP
1061+ ECFB             >
1061+ ECFB             >Current_HP      defl  $ - $E000             // used to set HP once!
1061+ ECFB             >
1061+ ECFB             >//              ______________________________________________________________________
1061+ ECFB             >//              Dictionary part
1061+ ECFB             >
1061+ ECFB             >                org     Dict_Ptr
1061+ 3F24             >
1061+ 3F24 F9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1061+ 3F26             >
1061+ 3F26             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1061+ 3F26 CD 9D 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1061+ 3F29             >
1061+ 3F29             >
1061+ 3F29             >                endif           ; ok        // for other definitions it "points" the correct handler
1061+ 3F29             >                // Use of "; ok" to suppress "warning[fwdref]"
1061+ 3F29             >
1061+ 3F29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1062+ 3F29 0E           Len_Filename:   db      14   // length of the following string, excluding 0x00
1063+ 3F2A 21 42 6C 6F  Blk_filename:   db      "!Blocks-64.bin", 0
1063+ 3F2E 63 6B 73 2D
1063+ 3F32 36 34 2E 62
1063+ 3F36 69 6E 00
1064+ 3F39              Param_From_Basic:
1065+ 3F39 6C 69 62 2F                  db      "lib/autoexec.f", 0
1065+ 3F3D 61 75 74 6F
1065+ 3F41 65 78 65 63
1065+ 3F45 2E 66 00
1066+ 3F48
1067+ 3F48              Fence_Word:
1068+ 3F48              //  ______________________________________________________________________
1069+ 3F48              //
1070+ 3F48
1071+ 3F48 00           Here_Dictionary db      0
1072+ 3F49
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L3.asm
 144  3F49
 145  3F49              // now we save the compiled file so we can either run it or debug it
 146  3F49                              SAVENEX OPEN "output/main.nex", ORIGIN
 147  3F49                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  3F49                              SAVENEX CFG  0
 149  3F49                              SAVENEX BANK 2, 0
 150  3F49                              SAVENEX AUTO
 151  3F49                              SAVENEX CLOSE
 152  3F49
 153  3F49              //              PAGE 7 ;set 7 page to current slot
 154  3F49              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 155  3F49              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 156  3F49
 157  3F49                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 158  3F49                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 159  3F49
 160  3F49                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 161  3F49                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 162  3F49
 163  3F49                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 164  3F49                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 165  3F49
 166  3F49                              // To run must copy vforth and vforth.bin to /dot directory
 167  3F49                              // then start with
 168  3F49                              //      .vforth
 169  3F49
 170  3F49                              END
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/main.asm
