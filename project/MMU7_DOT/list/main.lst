# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20231014
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              //  This work is available as-is with no whatsoever warranty.
  16  0000              //  Copying, modifying and distributing this software is allowed
  17  0000              //  provided that the copyright notice is kept.
  18  0000              //  ______________________________________________________________________
  19  0000              //
  20  0000              //  by Matteo Vitturi, 1990-2023
  21  0000              //
  22  0000              //  https://sites.google.com/view/vforth/vforth15-next
  23  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  24  0000              //
  25  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  26  0000              //  Each line of this source list mustn't exceed 80 bytes.
  27  0000              //  Z80N (ZX Spectrum Next) extension is available.
  28  0000              //
  29  0000              //  This list has been tested using the following configuration:
  30  0000              //      - CSpect emulator V.2.12.30
  31  0000              //  ______________________________________________________________________
  32  0000              //
  33  0000              //  Z80 Registers usage map
  34  0000              //
  35  0000              //  AF
  36  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  37  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  38  0000              //  HL - Working
  39  0000              //
  40  0000              //  AF'- Sometime used for backup purpose
  41  0000              //  BC'- Not used
  42  0000              //  DE'- Not used
  43  0000              //  HL'- Not used
  44  0000              //
  45  0000              //  SP - Calculator Stack Pointer
  46  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  47  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  48  0000              //
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  _________________
  52  0000              //
  53  0000              //  FORTH DEFINITIONS
  54  0000              //  _________________
  55  0000
  56  0000                              OPT     --zxnext
  57  0000              //  ______________________________________________________________________
  58  0000              //
  59  0000              // this controls some debugging code in L0.asm
  60  0000              //  0 for final binary release.
  61  0000              //  1 for debugging with Visual Studio Code and DeZog
  62  0000              // -1 for for binary comparison with Forth generated code.
  63  0000              DEBUGGING       equ     1   // .dot
  64  0000              //
  65  0000              //  ______________________________________________________________________
  66  0000
  67  0000                              if ( -1 == DEBUGGING )
  68  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  69  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  70  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  71  0000 ~            Heap_offset     defl    $2000
  72  0000 ~
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  0 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  78  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  79  0000 ~            Heap_Ptr        defl    $0002
  80  0000 ~            Heap_offset     defl     0
  81  0000 ~
  82  0000                              endif
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if (  1 == DEBUGGING )
  86  0000              ORIGIN          equ     $2000                   // for .dot
  87  0000              Heap_Ptr        defl    $0002
  88  0000              Heap_offset     defl     0
  89  0000
  90  0000                              endif
  91  0000              //  ______________________________________________________________________
  92  0000
  93  0000                              DEVICE  ZXSPECTRUMNEXT
  94  0000
  95  0000                              ORG     ORIGIN
  96  2000
  97  2000                              if ( -1 == DEBUGGING )
  98  2000 ~                            ds 128                            // for binary comparison
  99  2000                              endif
 100  2000
 101  2000              //  ______________________________________________________________________
 102  2000              //
 103  2000              //  Naming convention for Label vs Forth correspondance
 104  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 105  2000              //    - Leading "0" is converted into "Z_"
 106  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 107  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 108  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 109  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 110  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 111  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 112  2000              //    - Equal sign "=" is converted in EQUAL
 113  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 114  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 115  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 116  2000              //    - Exclamation mark "!" is converted in STORE
 117  2000              //    - At-Sign "@" is converted in FETCH
 118  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 119  2000
 120  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE:
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 121  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 12 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 12 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C 10 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 FC 31        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 1E 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6E                           db      110
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 32
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-10-14 ", $0D  // 36
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 33 2D 31 30
  67+ E044 2D 31 34 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 13
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi "                 // 25
  69+ E05B 30 2D 32 30
  69+ E05F 32 33 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20
  70+ E071                              End_Heap
  70+ E071             >Heap_Ptr        defl    $ - $E000
  70+ E071             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E071             >
 124+ E071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E071             >Latest_Definition defl  Heap_Ptr
 124+ E071             >
 124+ E071             >                // dummy db directives used to calculate length of namec
 124+ E071 4C 49 54    >                db      "LIT"
 124+ E074             >len_NFA         defl    $ - temp_NFA
 124+ E074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E071             >
 124+ E071 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E072 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E075             >                org     $-1                 // alter last byte of Name just above to set
 124+ E074 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E075             >
 124+ E075 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E077             >Prev_Ptr        defl    Heap_Ptr
 124+ E077             >
 124+ E077             >mirror_Ptr      defl    $
 124+ E077             >
 124+ E077 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E079             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E079             >
 124+ E079             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E079             >
 124+ E079             >//              ______________________________________________________________________
 124+ E079             >//              Dictionary part
 124+ E079             >
 124+ E079             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 77 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E079             >
 140+ E079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E079             >Latest_Definition defl  Heap_Ptr
 140+ E079             >
 140+ E079             >                // dummy db directives used to calculate length of namec
 140+ E079 45 58 45 43 >                db      "EXECUTE"
 140+ E07D 55 54 45    >
 140+ E080             >len_NFA         defl    $ - temp_NFA
 140+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E079             >
 140+ E079 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07A 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07E 55 54 45    >
 140+ E081             >                org     $-1                 // alter last byte of Name just above to set
 140+ E080 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E081             >
 140+ E081 71 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E083             >Prev_Ptr        defl    Heap_Ptr
 140+ E083             >
 140+ E083             >mirror_Ptr      defl    $
 140+ E083             >
 140+ E083 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E085             >
 140+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E085             >
 140+ E085             >//              ______________________________________________________________________
 140+ E085             >//              Dictionary part
 140+ E085             >
 140+ E085             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 83 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E085             >
 160+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E085             >Latest_Definition defl  Heap_Ptr
 160+ E085             >
 160+ E085             >                // dummy db directives used to calculate length of namec
 160+ E085 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E089 4F 50 29    >
 160+ E08C             >len_NFA         defl    $ - temp_NFA
 160+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E085             >
 160+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08A 4F 50 29    >
 160+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08C A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08D             >
 160+ E08D 79 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08F             >Prev_Ptr        defl    Heap_Ptr
 160+ E08F             >
 160+ E08F             >mirror_Ptr      defl    $
 160+ E08F             >
 160+ E08F 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E091             >
 160+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E091             >
 160+ E091             >//              ______________________________________________________________________
 160+ E091             >//              Dictionary part
 160+ E091             >
 160+ E091             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8F 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E091             >
 215+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E091             >Latest_Definition defl  Heap_Ptr
 215+ E091             >
 215+ E091             >                // dummy db directives used to calculate length of namec
 215+ E091 28 4C 4F 4F >                db      "(LOOP)"
 215+ E095 50 29       >
 215+ E097             >len_NFA         defl    $ - temp_NFA
 215+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E091             >
 215+ E091 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E092 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E096 50 29       >
 215+ E098             >                org     $-1                 // alter last byte of Name just above to set
 215+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E098             >
 215+ E098 85 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09A             >Prev_Ptr        defl    Heap_Ptr
 215+ E09A             >
 215+ E09A             >mirror_Ptr      defl    $
 215+ E09A             >
 215+ E09A 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09C             >
 215+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09C             >
 215+ E09C             >//              ______________________________________________________________________
 215+ E09C             >//              Dictionary part
 215+ E09C             >
 215+ E09C             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09C             >
 225+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09C             >Latest_Definition defl  Heap_Ptr
 225+ E09C             >
 225+ E09C             >                // dummy db directives used to calculate length of namec
 225+ E09C 42 52 41 4E >                db      "BRANCH"
 225+ E0A0 43 48       >
 225+ E0A2             >len_NFA         defl    $ - temp_NFA
 225+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09C             >
 225+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A1 43 48       >
 225+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A2 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A3             >
 225+ E0A3 91 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A5             >
 225+ E0A5             >mirror_Ptr      defl    $
 225+ E0A5             >
 225+ E0A5 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A7             >
 225+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A7             >
 225+ E0A7             >//              ______________________________________________________________________
 225+ E0A7             >//              Dictionary part
 225+ E0A7             >
 225+ E0A7             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A7             >
 245+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A7             >Latest_Definition defl  Heap_Ptr
 245+ E0A7             >
 245+ E0A7             >                // dummy db directives used to calculate length of namec
 245+ E0A7 30 42 52 41 >                db      "0BRANCH"
 245+ E0AB 4E 43 48    >
 245+ E0AE             >len_NFA         defl    $ - temp_NFA
 245+ E0AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A7             >
 245+ E0A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A8 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AC 4E 43 48    >
 245+ E0AF             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AE C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AF             >
 245+ E0AF 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B1             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B1             >
 245+ E0B1             >mirror_Ptr      defl    $
 245+ E0B1             >
 245+ E0B1 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B3             >
 245+ E0B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B3             >
 245+ E0B3             >//              ______________________________________________________________________
 245+ E0B3             >//              Dictionary part
 245+ E0B3             >
 245+ E0B3             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B3             >
 260+ E0B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B3             >Latest_Definition defl  Heap_Ptr
 260+ E0B3             >
 260+ E0B3             >                // dummy db directives used to calculate length of namec
 260+ E0B3 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B7 56 45 29    >
 260+ E0BA             >len_NFA         defl    $ - temp_NFA
 260+ E0BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B3             >
 260+ E0B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B4 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B8 56 45 29    >
 260+ E0BB             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BA A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BB             >
 260+ E0BB A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BD             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BD             >
 260+ E0BD             >mirror_Ptr      defl    $
 260+ E0BD             >
 260+ E0BD 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BF             >
 260+ E0BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BF             >
 260+ E0BF             >//              ______________________________________________________________________
 260+ E0BF             >//              Dictionary part
 260+ E0BF             >
 260+ E0BF             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A EB                           ex      de, hl
 262+ 209B                              // *** ldhlrp
 263+ 209B 3E 04                        ld      a, 4
 264+ 209D ED 31                        add     hl, a
 265+ 209F                              // *** ldrphl
 266+ 209F EB                           ex      de, hl
 267+ 20A0 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A2                              next
 268+ 20A2 DD E9       >                jp      (ix)
 269+ 20A4
 270+ 20A4              //  ______________________________________________________________________
 271+ 20A4              //
 272+ 20A4              // (?do)        lim ind --
 273+ 20A4              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A4              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A4              // used to skip the loop if lim == ind
 276+ 20A4                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A4             >
 276+ 20A4             >Dict_Ptr        defl    $
 276+ 20A4             >
 276+ 20A4             >//              ______________________________________________________________________
 276+ 20A4             >//              Heap part
 276+ 20A4             >
 276+ 20A4             >
 276+ 20A4             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BF             >
 276+ E0BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BF             >Latest_Definition defl  Heap_Ptr
 276+ E0BF             >
 276+ E0BF             >                // dummy db directives used to calculate length of namec
 276+ E0BF 28 3F 44 4F >                db      "(?DO)"
 276+ E0C3 29          >
 276+ E0C4             >len_NFA         defl    $ - temp_NFA
 276+ E0C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BF             >
 276+ E0BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C4 29          >
 276+ E0C5             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C4 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C5             >
 276+ E0C5 B3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C7             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C7             >
 276+ E0C7             >mirror_Ptr      defl    $
 276+ E0C7             >
 276+ E0C7 A6 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C9             >
 276+ E0C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C9             >
 276+ E0C9             >//              ______________________________________________________________________
 276+ E0C9             >//              Dictionary part
 276+ E0C9             >
 276+ E0C9             >                org     Dict_Ptr
 276+ 20A4             >
 276+ 20A4 C7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A6             >
 276+ 20A6             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A6 ~           >
 276+ 20A6 ~           >
 276+ 20A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A6             >
 276+ 20A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A6 D9                           exx
 278+ 20A7 D1                            pop     de                  // de has the index
 279+ 20A8 E1                            pop     hl                  // hl has the limit
 280+ 20A9 44                            ld      b, h
 281+ 20AA 4D                            ld      c, l
 282+ 20AB E5                            push    hl                  // put them back to stack for later
 283+ 20AC D5                            push    de
 284+ 20AD A7                            and     a                   // reset carry flag
 285+ 20AE ED 52                         sbc     hl, de              // compute limit - index
 286+ 20B0 D9                           exx
 287+ 20B1 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B3 E1                               pop     hl
 289+ 20B4 E1                               pop     hl
 290+ 20B5 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B7              Do_Ptr:
 292+ 20B7                              // *** ldhlrp                 // prepare RP
 293+ 20B7                              // *** ex      de, hl
 294+ 20B7                              // dec     de
 295+ 20B7                              // dec     de
 296+ 20B7                              // dec     de
 297+ 20B7                              // dec     de
 298+ 20B7 ED 35 FC FF                  add     de, -4
 299+ 20BB D5                           push    de                  // pass it to h'l'
 300+ 20BC                              // *** ex      de, hl
 301+ 20BC                              // *** ldrphl
 302+ 20BC D9                           exx
 303+ 20BD E1                            pop     hl
 304+ 20BE
 305+ 20BE                               // store index as top RP
 306+ 20BE D1                            pop     de
 307+ 20BF 73                            ld      (hl), e
 308+ 20C0 23                            inc     hl
 309+ 20C1 72                            ld      (hl), d
 310+ 20C2 23                            inc     hl
 311+ 20C3                               // stores lim as second from top RP
 312+ 20C3 D1                            pop     de
 313+ 20C4 73                            ld      (hl), e
 314+ 20C5 23                            inc     hl
 315+ 20C6 72                            ld      (hl), d
 316+ 20C7 D9                           exx
 317+ 20C8                              // skip branch-style offseet
 318+ 20C8 03                           inc     bc
 319+ 20C9 03                           inc     bc
 320+ 20CA                              next
 320+ 20CA DD E9       >                jp      (ix)
 321+ 20CC
 322+ 20CC              //  ______________________________________________________________________
 323+ 20CC              //
 324+ 20CC              // (do)        lim ind --
 325+ 20CC              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CC              // this is a simpler version of (?DO)
 327+ 20CC                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CC             >
 327+ 20CC             >Dict_Ptr        defl    $
 327+ 20CC             >
 327+ 20CC             >//              ______________________________________________________________________
 327+ 20CC             >//              Heap part
 327+ 20CC             >
 327+ 20CC             >
 327+ 20CC             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C9             >
 327+ E0C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C9             >Latest_Definition defl  Heap_Ptr
 327+ E0C9             >
 327+ E0C9             >                // dummy db directives used to calculate length of namec
 327+ E0C9 28 44 4F 29 >                db      "(DO)"
 327+ E0CD             >len_NFA         defl    $ - temp_NFA
 327+ E0CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C9             >
 327+ E0C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CA 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CE             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CD A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CE             >
 327+ E0CE BF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D0             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D0             >
 327+ E0D0             >mirror_Ptr      defl    $
 327+ E0D0             >
 327+ E0D0 CE 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D2             >
 327+ E0D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D2             >
 327+ E0D2             >//              ______________________________________________________________________
 327+ E0D2             >//              Dictionary part
 327+ E0D2             >
 327+ E0D2             >                org     Dict_Ptr
 327+ 20CC             >
 327+ 20CC D0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CE             >
 327+ 20CE             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CE ~           >
 327+ 20CE ~           >
 327+ 20CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CE             >
 327+ 20CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CE 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CF 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 20D0 18 E5                        jr      Do_Ptr
 331+ 20D2
 332+ 20D2              //  ______________________________________________________________________
 333+ 20D2              //
 334+ 20D2              // i            -- n
 335+ 20D2              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D2              // the current value of the index-loop
 337+ 20D2                              New_Def I, "I", is_code, is_normal
 337+ 20D2             >
 337+ 20D2             >Dict_Ptr        defl    $
 337+ 20D2             >
 337+ 20D2             >//              ______________________________________________________________________
 337+ 20D2             >//              Heap part
 337+ 20D2             >
 337+ 20D2             >
 337+ 20D2             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D2             >
 337+ E0D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D2             >Latest_Definition defl  Heap_Ptr
 337+ E0D2             >
 337+ E0D2             >                // dummy db directives used to calculate length of namec
 337+ E0D2 49          >                db      "I"
 337+ E0D3             >len_NFA         defl    $ - temp_NFA
 337+ E0D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D2             >
 337+ E0D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D3 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D4             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D3 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D4             >
 337+ E0D4 C9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D6             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D6             >
 337+ E0D6             >mirror_Ptr      defl    $
 337+ E0D6             >
 337+ E0D6 D4 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D8             >
 337+ E0D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D8             >
 337+ E0D8             >//              ______________________________________________________________________
 337+ E0D8             >//              Dictionary part
 337+ E0D8             >
 337+ E0D8             >                org     Dict_Ptr
 337+ 20D2             >
 337+ 20D2 D6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D4             >
 337+ 20D4             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D4 ~           >
 337+ 20D4 ~           >
 337+ 20D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D4             >
 337+ 20D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D4              I_Ptr:
 339+ 20D4 62                           ld      h, d
 340+ 20D5 6B                           ld      l, e
 341+ 20D6                              // *** ldhlrp
 342+ 20D6              I_Ptr_prime:
 343+ 20D6 7E                           ld      a, (hl)
 344+ 20D7 23                           inc     hl
 345+ 20D8 66                           ld      h, (hl)
 346+ 20D9 6F                           ld      l, a
 347+ 20DA E5                           push    hl
 348+ 20DB                              next
 348+ 20DB DD E9       >                jp      (ix)
 349+ 20DD
 350+ 20DD
 351+ 20DD              //  ______________________________________________________________________
 352+ 20DD              //
 353+ 20DD              // i'            -- n
 354+ 20DD              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DD              // the limit of the index-loop
 356+ 20DD
 357+ 20DD                              New_Def II, "I'", is_code, is_normal
 357+ 20DD             >
 357+ 20DD             >Dict_Ptr        defl    $
 357+ 20DD             >
 357+ 20DD             >//              ______________________________________________________________________
 357+ 20DD             >//              Heap part
 357+ 20DD             >
 357+ 20DD             >
 357+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D8             >
 357+ E0D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D8             >Latest_Definition defl  Heap_Ptr
 357+ E0D8             >
 357+ E0D8             >                // dummy db directives used to calculate length of namec
 357+ E0D8 49 27       >                db      "I'"
 357+ E0DA             >len_NFA         defl    $ - temp_NFA
 357+ E0DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D8             >
 357+ E0D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D9 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DB             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DA A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DB             >
 357+ E0DB D2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DD             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DD             >
 357+ E0DD             >mirror_Ptr      defl    $
 357+ E0DD             >
 357+ E0DD DF 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DF             >
 357+ E0DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DF             >
 357+ E0DF             >//              ______________________________________________________________________
 357+ E0DF             >//              Dictionary part
 357+ E0DF             >
 357+ E0DF             >                org     Dict_Ptr
 357+ 20DD             >
 357+ 20DD DD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DF             >
 357+ 20DF             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DF ~           >
 357+ 20DF ~           >
 357+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DF             >
 357+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DF 62                           ld      h, d
 359+ 20E0 6B                           ld      l, e
 360+ 20E1                              // *** ldhlrp
 361+ 20E1 23                           inc     hl
 362+ 20E2 23                           inc     hl
 363+ 20E3 18 F1                        jr      I_Ptr_prime
 364+ 20E5
 365+ 20E5
 366+ 20E5              //  ______________________________________________________________________
 367+ 20E5              //
 368+ 20E5              // digit        c n -- u tf  |  ff
 369+ 20E5              // convert a character c using base n
 370+ 20E5              // returns a unsigned number and a true flag
 371+ 20E5              // or just a false flag if the conversion fails
 372+ 20E5                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E5             >
 372+ 20E5             >Dict_Ptr        defl    $
 372+ 20E5             >
 372+ 20E5             >//              ______________________________________________________________________
 372+ 20E5             >//              Heap part
 372+ 20E5             >
 372+ 20E5             >
 372+ 20E5             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DF             >
 372+ E0DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DF             >Latest_Definition defl  Heap_Ptr
 372+ E0DF             >
 372+ E0DF             >                // dummy db directives used to calculate length of namec
 372+ E0DF 44 49 47 49 >                db      "DIGIT"
 372+ E0E3 54          >
 372+ E0E4             >len_NFA         defl    $ - temp_NFA
 372+ E0E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DF             >
 372+ E0DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E0 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E4 54          >
 372+ E0E5             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E4 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E5             >
 372+ E0E5 D8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E7             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E7             >
 372+ E0E7             >mirror_Ptr      defl    $
 372+ E0E7             >
 372+ E0E7 E7 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E9             >
 372+ E0E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E9             >
 372+ E0E9             >//              ______________________________________________________________________
 372+ E0E9             >//              Dictionary part
 372+ E0E9             >
 372+ E0E9             >                org     Dict_Ptr
 372+ 20E5             >
 372+ 20E5 E7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E7             >
 372+ 20E7             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E7 ~           >
 372+ 20E7 ~           >
 372+ 20E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E7             >
 372+ 20E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E7 D9                           exx
 374+ 20E8 E1                           pop     hl                  // l has the base
 375+ 20E9 D1                           pop     de                  // e has the digit
 376+ 20EA 7B                           ld      a, e
 377+ 20EB FE 60                        cp      $60                 // check if lowercase
 378+ 20ED 38 02                        jr      c, Digit_Uppercase
 379+ 20EF D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20F1              Digit_Uppercase:
 381+ 20F1 D6 30                        sub     $30
 382+ 20F3 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F5 FE 0A                            cp      $0A
 384+ 20F7 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F9 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20FB FE 0A                                cp      $0A
 387+ 20FD 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FF
 389+ 20FF              Digit_Decimal:
 390+ 20FF                              // compare digit
 391+ 20FF BD                           cp      l                   // compare with base
 392+ 2100 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2102 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2103 21 01 00                         ld      hl, 1
 395+ 2106 D5                               push    de
 396+ 2107 E5                               push    hl
 397+ 2108 D9                               exx
 398+ 2109                                  next
 398+ 2109 DD E9       >                jp      (ix)
 399+ 210B              Digit_Fail:
 400+ 210B 21 00 00                     ld      hl, 0
 401+ 210E E5                           push    hl
 402+ 210F D9                           exx
 403+ 2110                              next
 403+ 2110 DD E9       >                jp      (ix)
 404+ 2112
 405+ 2112              //  ______________________________________________________________________
 406+ 2112              //
 407+ 2112              //  parametric uppercase routine
 408+ 2112              //  depending on the following op-code the routine can be by-passed
 409+ 2112              //  changing the behaviour of some callers.
 410+ 2112              //  If it is "ret" then the system is Case-Sensitive
 411+ 2112              //  If it is "Nop" then the system is Case-Insensitive
 412+ 2112              //  Only A register is touched.
 413+ 2112 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 2113              Case_Upper:
 415+ 2113 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 2115 D8                           ret     c                   // no change if A < "a"
 417+ 2116 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 2118 D0                           ret     nc                  // no change if A > "z"
 419+ 2119 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 211B C9                           ret
 421+ 211C
 422+ 211C              //  ______________________________________________________________________
 423+ 211C              //
 424+ 211C              //  caseon      --
 425+ 211C              // set system case-sensitivity on
 426+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 211C                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 211C             >
 427+ 211C             >Dict_Ptr        defl    $
 427+ 211C             >
 427+ 211C             >//              ______________________________________________________________________
 427+ 211C             >//              Heap part
 427+ 211C             >
 427+ 211C             >
 427+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0E9             >
 427+ E0E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0E9             >Latest_Definition defl  Heap_Ptr
 427+ E0E9             >
 427+ E0E9             >                // dummy db directives used to calculate length of namec
 427+ E0E9 43 41 53 45 >                db      "CASEON"
 427+ E0ED 4F 4E       >
 427+ E0EF             >len_NFA         defl    $ - temp_NFA
 427+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0E9             >
 427+ E0E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EA 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0EE 4F 4E       >
 427+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0EF CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F0             >
 427+ E0F0 DF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F2             >
 427+ E0F2             >mirror_Ptr      defl    $
 427+ E0F2             >
 427+ E0F2 1E 21       >                dw      Dict_Ptr + 2        // xt
 427+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F4             >
 427+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F4             >
 427+ E0F4             >//              ______________________________________________________________________
 427+ E0F4             >//              Dictionary part
 427+ E0F4             >
 427+ E0F4             >                org     Dict_Ptr
 427+ 211C             >
 427+ 211C F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 211E             >
 427+ 211E             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 211E ~           >
 427+ 211E ~           >
 427+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 211E             >
 427+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 211E 3E C9                        ld      a, $C9              // "ret"
 429+ 2120 32 12 21                     ld      (Case_Sensitive), a
 430+ 2123                              next
 430+ 2123 DD E9       >                jp      (ix)
 431+ 2125
 432+ 2125              //  ______________________________________________________________________
 433+ 2125              //
 434+ 2125              //  caseoff     --
 435+ 2125              // set system case-sensitivity on
 436+ 2125              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 2125                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 2125             >
 437+ 2125             >Dict_Ptr        defl    $
 437+ 2125             >
 437+ 2125             >//              ______________________________________________________________________
 437+ 2125             >//              Heap part
 437+ 2125             >
 437+ 2125             >
 437+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F4             >
 437+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F4             >Latest_Definition defl  Heap_Ptr
 437+ E0F4             >
 437+ E0F4             >                // dummy db directives used to calculate length of namec
 437+ E0F4 43 41 53 45 >                db      "CASEOFF"
 437+ E0F8 4F 46 46    >
 437+ E0FB             >len_NFA         defl    $ - temp_NFA
 437+ E0FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F4             >
 437+ E0F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0F9 4F 46 46    >
 437+ E0FC             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FB C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FC             >
 437+ E0FC E9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E0FE             >Prev_Ptr        defl    Heap_Ptr
 437+ E0FE             >
 437+ E0FE             >mirror_Ptr      defl    $
 437+ E0FE             >
 437+ E0FE 27 21       >                dw      Dict_Ptr + 2        // xt
 437+ E100             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E100             >
 437+ E100             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E100             >
 437+ E100             >//              ______________________________________________________________________
 437+ E100             >//              Dictionary part
 437+ E100             >
 437+ E100             >                org     Dict_Ptr
 437+ 2125             >
 437+ 2125 FE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 2127             >
 437+ 2127             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 2127 ~           >
 437+ 2127 ~           >
 437+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 2127             >
 437+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 2127 3E 00                        ld      a, $00              // "nop"
 439+ 2129 32 12 21                     ld      (Case_Sensitive), a
 440+ 212C                              next
 440+ 212C DD E9       >                jp      (ix)
 441+ 212E
 442+ 212E              //  ______________________________________________________________________
 443+ 212E              //
 444+ 212E              //  upper       c1 -- c1 | c2
 445+ 212E              // character on top of stack is forced to Uppercase.
 446+ 212E                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 212E             >
 446+ 212E             >Dict_Ptr        defl    $
 446+ 212E             >
 446+ 212E             >//              ______________________________________________________________________
 446+ 212E             >//              Heap part
 446+ 212E             >
 446+ 212E             >
 446+ 212E             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E100             >
 446+ E100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E100             >Latest_Definition defl  Heap_Ptr
 446+ E100             >
 446+ E100             >                // dummy db directives used to calculate length of namec
 446+ E100 55 50 50 45 >                db      "UPPER"
 446+ E104 52          >
 446+ E105             >len_NFA         defl    $ - temp_NFA
 446+ E105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E100             >
 446+ E100 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E101 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E105 52          >
 446+ E106             >                org     $-1                 // alter last byte of Name just above to set
 446+ E105 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E106             >
 446+ E106 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E108             >Prev_Ptr        defl    Heap_Ptr
 446+ E108             >
 446+ E108             >mirror_Ptr      defl    $
 446+ E108             >
 446+ E108 30 21       >                dw      Dict_Ptr + 2        // xt
 446+ E10A             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10A             >
 446+ E10A             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10A             >
 446+ E10A             >//              ______________________________________________________________________
 446+ E10A             >//              Dictionary part
 446+ E10A             >
 446+ E10A             >                org     Dict_Ptr
 446+ 212E             >
 446+ 212E 08 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 2130             >
 446+ 2130             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 2130 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 2130 ~           >
 446+ 2130 ~           >
 446+ 2130             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 2130             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 2130             >
 446+ 2130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 2130 E1                           pop     hl
 448+ 2131 7D                           ld      a, l
 449+ 2132 CD 13 21                     call    Case_Upper
 450+ 2135 6F                           ld      l, a
 451+ 2136
 452+ 2136                              psh1
 452+ 2136 E5          >                push    hl
 452+ 2137 DD E9       >                jp      (ix)
 453+ 2139
 454+ 2139              //  ______________________________________________________________________
 455+ 2139
 456+ 2139              MMU7_read:
 457+ 2139 3E 57                        ld      a, 87
 458+ 213B              NEXTREG_read:
 459+ 213B 01 3B 24                     ld      bc, $243B
 460+ 213E ED 79                        out     (c), a
 461+ 2140 04                           inc     b
 462+ 2141 ED 78                        in      a, (c)
 463+ 2143 C9                           ret
 464+ 2144
 465+ 2144              //  ______________________________________________________________________
 466+ 2144
 467+ 2144              TO_FAR_rout:
 468+ 2144 7C                           ld      a, h
 469+ 2145 08                           ex      af, af
 470+ 2146 7C                           ld      a, h
 471+ 2147 F6 E0                        or      $E0
 472+ 2149 67                           ld      h, a
 473+ 214A 08                           ex      af, af
 474+ 214B 07                           rlca
 475+ 214C 07                           rlca
 476+ 214D 07                           rlca
 477+ 214E E6 07                        and     $07
 478+ 2150 C6 20                        add     $20
 479+ 2152 C9                           ret
 480+ 2153
 481+ 2153
 482+ 2153              //  ______________________________________________________________________
 483+ 2153              //
 484+ 2153              // (find)       addr voc -- 0 | cfa b 1
 485+ 2153              // vocabulary search,
 486+ 2153              // - voc is starting word's NFA
 487+ 2153              // - addr is the string to be searched for
 488+ 2153              // On success, it returns the CFA of found word, the first NFA byte
 489+ 2153              // (which contains length and some flags) and a true flag.
 490+ 2153              // On fail, a false flag  (no more: leaves addr unchanged)
 491+ 2153                              New_Def C_FIND, "(FIND)", is_code, is_normal
 491+ 2153             >
 491+ 2153             >Dict_Ptr        defl    $
 491+ 2153             >
 491+ 2153             >//              ______________________________________________________________________
 491+ 2153             >//              Heap part
 491+ 2153             >
 491+ 2153             >
 491+ 2153             >                org     (Heap_Ptr & $1FFF) + $E000
 491+ E10A             >
 491+ E10A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ E10A             >Latest_Definition defl  Heap_Ptr
 491+ E10A             >
 491+ E10A             >                // dummy db directives used to calculate length of namec
 491+ E10A 28 46 49 4E >                db      "(FIND)"
 491+ E10E 44 29       >
 491+ E110             >len_NFA         defl    $ - temp_NFA
 491+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ E10A             >
 491+ E10A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ E10B 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 491+ E10F 44 29       >
 491+ E111             >                org     $-1                 // alter last byte of Name just above to set
 491+ E110 A9          >                db      {b $} | END_BIT     // msb as name end
 491+ E111             >
 491+ E111 00 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 491+ E113             >Prev_Ptr        defl    Heap_Ptr
 491+ E113             >
 491+ E113             >mirror_Ptr      defl    $
 491+ E113             >
 491+ E113 55 21       >                dw      Dict_Ptr + 2        // xt
 491+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 491+ E115             >
 491+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 491+ E115             >
 491+ E115             >//              ______________________________________________________________________
 491+ E115             >//              Dictionary part
 491+ E115             >
 491+ E115             >                org     Dict_Ptr
 491+ 2153             >
 491+ 2153 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 491+ 2155             >
 491+ 2155             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 2155 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 491+ 2155 ~           >
 491+ 2155 ~           >
 491+ 2155             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 2155             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 2155             >
 491+ 2155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 2155 D9                           exx
 493+ 2156 CD 39 21                     call    MMU7_read
 494+ 2159 D9                           exx
 495+ 215A 6F                           ld      l, a
 496+ 215B D9                           exx
 497+ 215C
 498+ 215C D1                           pop     de                      // de has dictionary pointer
 499+ 215D              Find_VocabularyLoop:
 500+ 215D 7A                               ld      a, d
 501+ 215E D6 60                            sub     $60
 502+ 2160 30 08                            jr      nc, Find_far_endif
 503+ 2162 EB                                   ex      de, hl
 504+ 2163 CD 44 21                             call    TO_FAR_rout
 505+ 2166 EB                                   ex      de, hl
 506+ 2167 ED 92 57                             nextreg 87, a
 507+ 216A              Find_far_endif:
 508+ 216A E1                               pop     hl                  // string pointer to search for
 509+ 216B E5                               push    hl                  // keep it on stack too for the end.
 510+ 216C 1A                               ld      a, (de)             // save NFA length byte
 511+ 216D 08                               ex      af,af'              // for later use (!)
 512+ 216E 1A                               ld      a, (de)             // reload NFA length byte
 513+ 216F AE                               xor     (hl)                // check if same length
 514+ 2170 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 515+ 2172                                  // word and text haven't the same length, skip to next vocabulary entry
 516+ 2172 20 33                            jr      nz, Find_DifferentLenght
 517+ 2174
 518+ 2174              Find_ThisWord:      // begin loop
 519+ 2174 23                                   inc     hl
 520+ 2175 13                                   inc     de
 521+ 2176 1A                                   ld      a, (de)
 522+ 2177                                      // case insensitive option - begin
 523+ 2177                                      // push    bc
 524+ 2177 E6 80                                and     $80                 // split A in msb and the rest
 525+ 2179 47                                   ld      b, a
 526+ 217A 1A                                   ld      a, (de)
 527+ 217B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 528+ 217D CD 12 21                             call    Case_Sensitive      // uppercase routine
 529+ 2180 4F                                   ld      c, a
 530+ 2181 7E                                   ld      a, (hl)
 531+ 2182 CD 12 21                             call    Case_Sensitive      // uppercase routine
 532+ 2185 A9                                   xor     c
 533+ 2186 A8                                   xor     b
 534+ 2187                                      // pop     bc
 535+ 2187                                      // case insensitive option - end
 536+ 2187 87                                   add     a                   // ignore msb during compare
 537+ 2188 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 538+ 218A
 539+ 218A                                  // loop back until last byte msb is found set
 540+ 218A                                  // that bit marks the ending char of this word
 541+ 218A 30 E8                            jr      nc, Find_ThisWord
 542+ 218C
 543+ 218C                                  // match found !
 544+ 218C 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 545+ 218F 19                               add     hl, de
 546+ 2190
 547+ 2190                              //  ld      a, h
 548+ 2190                              //  and     $E0
 549+ 2190                              //  xor     h
 550+ 2190                              //  jr      nz, Non_MMU7
 551+ 2190                                  //  call    MMU7_read
 552+ 2190                                  //  dec     a
 553+ 2190                                  //  jr      z, Non_MMU7
 554+ 2190 5E                                       ld      e, (hl)
 555+ 2191 23                                       inc     hl
 556+ 2192 56                                       ld      d, (hl)
 557+ 2193 EB                                       ex      de, hl
 558+ 2194              //Non_MMU7:
 559+ 2194 E3                               ex      (sp), hl            // CFA on stack and drop addr
 560+ 2195 08                               ex      af, af'             // retrieve NFA byte (!)
 561+ 2196 5F                               ld      e, a
 562+ 2197 16 00                            ld      d, 0
 563+ 2199 21 FF FF                         ld      hl, -1
 564+ 219C D5                               push    de
 565+ 219D E5                               push    hl
 566+ 219E D9                               exx
 567+ 219F 7D                               ld      a, l
 568+ 21A0 ED 92 57                         nextreg 87, a
 569+ 21A3                                  next
 569+ 21A3 DD E9       >                jp      (ix)
 570+ 21A5
 571+ 21A5              Find_DidntMatch: // didn't match (*)
 572+ 21A5 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 573+ 21A7
 574+ 21A7              Find_DifferentLenght:
 575+ 21A7                                  // consume chars until the end of the word
 576+ 21A7                                  // that is last byte msb is found set
 577+ 21A7 13                                   inc     de
 578+ 21A8 1A                                   ld      a, (de)
 579+ 21A9 87                                   add     a, a
 580+ 21AA 30 FB                            jr      nc, Find_DifferentLenght
 581+ 21AC
 582+ 21AC              Find_WordEnd:   // word-end  found (**)
 583+ 21AC                                  // take LFA and use it
 584+ 21AC 13                               inc     de
 585+ 21AD EB                               ex      de, hl
 586+ 21AE 5E                               ld      e, (hl)
 587+ 21AF 23                               inc     hl
 588+ 21B0 56                               ld      d, (hl)
 589+ 21B1 7A                               ld      a, d
 590+ 21B2 B3                               or      e
 591+ 21B3
 592+ 21B3                              // loop until end of vocabulary
 593+ 21B3 20 A8                        jr      nz, Find_VocabularyLoop
 594+ 21B5
 595+ 21B5 E1                           pop     hl              // without this, leaves addr unchanged
 596+ 21B6 21 00 00                     ld      hl, 0
 597+ 21B9 E5                           push    hl
 598+ 21BA D9                           exx
 599+ 21BB 7D                           ld      a, l
 600+ 21BC ED 92 57                     nextreg 87, a
 601+ 21BF                              next
 601+ 21BF DD E9       >                jp      (ix)
 602+ 21C1
 603+ 21C1              //  ______________________________________________________________________
 604+ 21C1              //
 605+ 21C1              // enclose      a c -- a  n1 n2 n3
 606+ 21C1              // starting from a, using delimiter c, determines the offsets:
 607+ 21C1              //   n1   the first character non-delimiter
 608+ 21C1              //   n2   the first delimiter after the text
 609+ 21C1              //   n3   the first character non enclosed.
 610+ 21C1              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 611+ 21C1              // an uncoditional delimiter.
 612+ 21C1              // Examples:
 613+ 21C1              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 614+ 21C1              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 615+ 21C1              // iii:	c  c  'nul'          -- 2  3  2
 616+ 21C1                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 616+ 21C1             >
 616+ 21C1             >Dict_Ptr        defl    $
 616+ 21C1             >
 616+ 21C1             >//              ______________________________________________________________________
 616+ 21C1             >//              Heap part
 616+ 21C1             >
 616+ 21C1             >
 616+ 21C1             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E115             >
 616+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E115             >Latest_Definition defl  Heap_Ptr
 616+ E115             >
 616+ E115             >                // dummy db directives used to calculate length of namec
 616+ E115 45 4E 43 4C >                db      "ENCLOSE"
 616+ E119 4F 53 45    >
 616+ E11C             >len_NFA         defl    $ - temp_NFA
 616+ E11C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E115             >
 616+ E115 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E116 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 616+ E11A 4F 53 45    >
 616+ E11D             >                org     $-1                 // alter last byte of Name just above to set
 616+ E11C C5          >                db      {b $} | END_BIT     // msb as name end
 616+ E11D             >
 616+ E11D 0A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E11F             >Prev_Ptr        defl    Heap_Ptr
 616+ E11F             >
 616+ E11F             >mirror_Ptr      defl    $
 616+ E11F             >
 616+ E11F C3 21       >                dw      Dict_Ptr + 2        // xt
 616+ E121             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E121             >
 616+ E121             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E121             >
 616+ E121             >//              ______________________________________________________________________
 616+ E121             >//              Dictionary part
 616+ E121             >
 616+ E121             >                org     Dict_Ptr
 616+ 21C1             >
 616+ 21C1 1F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 21C3             >
 616+ 21C3             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 21C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 616+ 21C3 ~           >
 616+ 21C3 ~           >
 616+ 21C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 21C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 21C3             >
 616+ 21C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 21C3 D9                           exx
 618+ 21C4 D1                           pop     de                  //  e has the character
 619+ 21C5 E1                           pop     hl                  // hl has the string address
 620+ 21C6 E5                           push    hl
 621+ 21C7 7B                           ld      a, e
 622+ 21C8 11 FF FF                     ld      de, -1              // let's start from -1
 623+ 21CB 2B                           dec     hl
 624+ 21CC              Enclose_NonDelimiter:
 625+ 21CC                              // find first non delimiter
 626+ 21CC 23                               inc     hl
 627+ 21CD 13                               inc     de
 628+ 21CE BE                               cp      (hl)
 629+ 21CF 28 FB                        jr      z, Enclose_NonDelimiter
 630+ 21D1 D5                           push    de
 631+ 21D2
 632+ 21D2                              // push    bc                  // save Instruction Pointer
 633+ 21D2
 634+ 21D2 4F                           ld      c, a                // save char
 635+ 21D3 7E                           ld      a, (hl)
 636+ 21D4 A7                           and     a                   // stop if 0x00
 637+ 21D5 20 07                        jr      nz, Enclose_NextChar
 638+ 21D7                              /// case iii. no more character in string
 639+ 21D7                                  // pop     bc                  // restore Instruction Pointer
 640+ 21D7 13                               inc     de
 641+ 21D8 D5                               push    de
 642+ 21D9 1B                               dec     de
 643+ 21DA D5                               push    de
 644+ 21DB D9                               exx
 645+ 21DC                                  next
 645+ 21DC DD E9       >                jp      (ix)
 646+ 21DE              Enclose_NextChar:
 647+ 21DE 79                               ld      a, c
 648+ 21DF 23                               inc     hl
 649+ 21E0 13                               inc     de
 650+ 21E1 BE                               cp      (hl)
 651+ 21E2 20 06                            jr      nz, Enclose_NonSeparator
 652+ 21E4                                      // case i. first non enclosed
 653+ 21E4                                      // pop     bc                  // restore Instruction Pointer
 654+ 21E4 D5                                   push    de
 655+ 21E5 13                                   inc     de
 656+ 21E6 D5                                   push    de
 657+ 21E7 D9                                   exx
 658+ 21E8                                      next
 658+ 21E8 DD E9       >                jp      (ix)
 659+ 21EA              Enclose_NonSeparator:
 660+ 21EA 7E                               ld      a, (hl)
 661+ 21EB A7                               and     a
 662+ 21EC 20 F0                        jr      nz, Enclose_NextChar
 663+ 21EE
 664+ 21EE                              // case ii. separator & terminator
 665+ 21EE                              // pop     bc                  // restore Instruction Pointer
 666+ 21EE D5                           push    de
 667+ 21EF D5                           push    de
 668+ 21F0 D9                           exx
 669+ 21F1                              next
 669+ 21F1 DD E9       >                jp      (ix)
 670+ 21F3
 671+ 21F3              //  ______________________________________________________________________
 672+ 21F3              //
 673+ 21F3              // (map)        a2 a1 n c1 -- c2
 674+ 21F3              // translate character c1 using mapping string a2 and a2
 675+ 21F3              // if c1 is not present within string a1 then
 676+ 21F3              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 677+ 21F3                              New_Def C_MAP, "(MAP)", is_code, is_normal
 677+ 21F3             >
 677+ 21F3             >Dict_Ptr        defl    $
 677+ 21F3             >
 677+ 21F3             >//              ______________________________________________________________________
 677+ 21F3             >//              Heap part
 677+ 21F3             >
 677+ 21F3             >
 677+ 21F3             >                org     (Heap_Ptr & $1FFF) + $E000
 677+ E121             >
 677+ E121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 677+ E121             >Latest_Definition defl  Heap_Ptr
 677+ E121             >
 677+ E121             >                // dummy db directives used to calculate length of namec
 677+ E121 28 4D 41 50 >                db      "(MAP)"
 677+ E125 29          >
 677+ E126             >len_NFA         defl    $ - temp_NFA
 677+ E126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 677+ E121             >
 677+ E121 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 677+ E122 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 677+ E126 29          >
 677+ E127             >                org     $-1                 // alter last byte of Name just above to set
 677+ E126 A9          >                db      {b $} | END_BIT     // msb as name end
 677+ E127             >
 677+ E127 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 677+ E129             >Prev_Ptr        defl    Heap_Ptr
 677+ E129             >
 677+ E129             >mirror_Ptr      defl    $
 677+ E129             >
 677+ E129 F5 21       >                dw      Dict_Ptr + 2        // xt
 677+ E12B             >Heap_Ptr        defl    $ - $E000           // save current HP
 677+ E12B             >
 677+ E12B             >Current_HP      defl  $ - $E000             // used to set HP once!
 677+ E12B             >
 677+ E12B             >//              ______________________________________________________________________
 677+ E12B             >//              Dictionary part
 677+ E12B             >
 677+ E12B             >                org     Dict_Ptr
 677+ 21F3             >
 677+ 21F3 29 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 677+ 21F5             >
 677+ 21F5             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 677+ 21F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 677+ 21F5 ~           >
 677+ 21F5 ~           >
 677+ 21F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 677+ 21F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 677+ 21F5             >
 677+ 21F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 678+ 21F5 D9                           exx
 679+ 21F6 E1                           pop     hl
 680+ 21F7 7D                           ld      a, l
 681+ 21F8 C1                           pop     bc
 682+ 21F9 E1                           pop     hl
 683+ 21FA 50                           ld      d, b
 684+ 21FB 59                           ld      e, c
 685+ 21FC ED B1                        cpir
 686+ 21FE E1                           pop     hl
 687+ 21FF 20 05                        jr      nz, C_Map_Then
 687+ 2201
 688+ 2201 19                               add     hl, de
 689+ 2202 2B                               dec     hl
 690+ 2203 ED 42                            sbc     hl, bc
 691+ 2205 7E                               ld      a, (hl)
 692+ 2206              C_Map_Then:
 693+ 2206 6F                           ld      l, a
 694+ 2207 26 00                        ld      h, 0
 695+ 2209 E5                           push    hl
 696+ 220A D9                           exx
 697+ 220B                              next
 697+ 220B DD E9       >                jp      (ix)
 698+ 220D
 699+ 220D              //  ______________________________________________________________________
 700+ 220D              //
 701+ 220D              // (compare)    a1 a2 n -- b
 702+ 220D              // this word performs a lexicographic compare of n bytes of text at address a1
 703+ 220D              // with n bytes of text at address a2. It returns numeric a value:
 704+ 220D              //  0 : if strings are equal
 705+ 220D              // +1 : if string at a1 greater than string at a2
 706+ 220D              // -1 : if string at a1 less than string at a2
 707+ 220D              // strings can be 256 bytes in length at most.
 708+ 220D                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 708+ 220D             >
 708+ 220D             >Dict_Ptr        defl    $
 708+ 220D             >
 708+ 220D             >//              ______________________________________________________________________
 708+ 220D             >//              Heap part
 708+ 220D             >
 708+ 220D             >
 708+ 220D             >                org     (Heap_Ptr & $1FFF) + $E000
 708+ E12B             >
 708+ E12B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 708+ E12B             >Latest_Definition defl  Heap_Ptr
 708+ E12B             >
 708+ E12B             >                // dummy db directives used to calculate length of namec
 708+ E12B 28 43 4F 4D >                db      "(COMPARE)"
 708+ E12F 50 41 52 45 >
 708+ E133 29          >
 708+ E134             >len_NFA         defl    $ - temp_NFA
 708+ E134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 708+ E12B             >
 708+ E12B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 708+ E12C 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 708+ E130 50 41 52 45 >
 708+ E134 29          >
 708+ E135             >                org     $-1                 // alter last byte of Name just above to set
 708+ E134 A9          >                db      {b $} | END_BIT     // msb as name end
 708+ E135             >
 708+ E135 21 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 708+ E137             >Prev_Ptr        defl    Heap_Ptr
 708+ E137             >
 708+ E137             >mirror_Ptr      defl    $
 708+ E137             >
 708+ E137 0F 22       >                dw      Dict_Ptr + 2        // xt
 708+ E139             >Heap_Ptr        defl    $ - $E000           // save current HP
 708+ E139             >
 708+ E139             >Current_HP      defl  $ - $E000             // used to set HP once!
 708+ E139             >
 708+ E139             >//              ______________________________________________________________________
 708+ E139             >//              Dictionary part
 708+ E139             >
 708+ E139             >                org     Dict_Ptr
 708+ 220D             >
 708+ 220D 37 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 708+ 220F             >
 708+ 220F             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 708+ 220F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 708+ 220F ~           >
 708+ 220F ~           >
 708+ 220F             >                endif           ; ok        // for other definitions it "points" the correct handler
 708+ 220F             >                // Use of "; ok" to suppress "warning[fwdref]"
 708+ 220F             >
 708+ 220F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 709+ 220F D9                           exx
 710+ 2210 E1                           pop     hl                  // Number of bytes
 711+ 2211 7D                           ld      a, l
 712+ 2212 E1                           pop     hl                  // hl points string a2
 713+ 2213 D1                           pop     de                  // hl points string a1
 714+ 2214              //              push    bc                  // Instruction pointer on stack
 715+ 2214 47                           ld      b, a
 716+ 2215              C_Compare_Loop:
 717+ 2215 7E                               ld      a, (hl)
 718+ 2216 CD 12 21                         call    Case_Sensitive
 719+ 2219 4F                               ld      c, a
 720+ 221A 1A                               ld      a, (de)
 721+ 221B CD 12 21                         call    Case_Sensitive
 722+ 221E B9                               cp      c
 723+ 221F 13                               inc     de
 724+ 2220 23                               inc     hl
 725+ 2221 28 0E                            jr      z, C_Compare_Equal
 726+ 2223 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 727+ 2225 21 01 00                                 ld      hl, 1               // a1 gt a2
 728+ 2228 18 03                                jr      C_Compare_Then      // Else
 729+ 222A              C_Compare_NotLessThan:
 730+ 222A 21 FF FF                                 ld      hl, -1              // a1 lt a2
 731+ 222D              C_Compare_Then:                                 // Endif
 732+ 222D              //                      pop     bc              // restore Instruction Pointer
 733+ 222D E5                                   push    hl
 734+ 222E D9                                   exx
 735+ 222F
 736+ 222F                                      next
 736+ 222F DD E9       >                jp      (ix)
 737+ 2231
 738+ 2231              C_Compare_Equal:
 739+ 2231 10 E2                        djnz    C_Compare_Loop
 740+ 2233 21 00 00                     ld      hl, 0               // a1 eq a2
 741+ 2236              //              pop     bc                  // restore Instruction Pointer
 742+ 2236 E5                           push    hl
 743+ 2237 D9                           exx
 744+ 2238
 745+ 2238                              next
 745+ 2238 DD E9       >                jp      (ix)
 746+ 223A
 747+ 223A              //  ______________________________________________________________________
 748+ 223A              //
 749+ 223A              // emitc        c --
 750+ 223A              // low level emit, calls ROM routine at #10 to send a character to
 751+ 223A              // the the current channel (see SELECT to change stream-channel)
 752+ 223A                              New_Def EMITC, "EMITC", is_code, is_normal
 752+ 223A             >
 752+ 223A             >Dict_Ptr        defl    $
 752+ 223A             >
 752+ 223A             >//              ______________________________________________________________________
 752+ 223A             >//              Heap part
 752+ 223A             >
 752+ 223A             >
 752+ 223A             >                org     (Heap_Ptr & $1FFF) + $E000
 752+ E139             >
 752+ E139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ E139             >Latest_Definition defl  Heap_Ptr
 752+ E139             >
 752+ E139             >                // dummy db directives used to calculate length of namec
 752+ E139 45 4D 49 54 >                db      "EMITC"
 752+ E13D 43          >
 752+ E13E             >len_NFA         defl    $ - temp_NFA
 752+ E13E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ E139             >
 752+ E139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ E13A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 752+ E13E 43          >
 752+ E13F             >                org     $-1                 // alter last byte of Name just above to set
 752+ E13E C3          >                db      {b $} | END_BIT     // msb as name end
 752+ E13F             >
 752+ E13F 2B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 752+ E141             >Prev_Ptr        defl    Heap_Ptr
 752+ E141             >
 752+ E141             >mirror_Ptr      defl    $
 752+ E141             >
 752+ E141 3C 22       >                dw      Dict_Ptr + 2        // xt
 752+ E143             >Heap_Ptr        defl    $ - $E000           // save current HP
 752+ E143             >
 752+ E143             >Current_HP      defl  $ - $E000             // used to set HP once!
 752+ E143             >
 752+ E143             >//              ______________________________________________________________________
 752+ E143             >//              Dictionary part
 752+ E143             >
 752+ E143             >                org     Dict_Ptr
 752+ 223A             >
 752+ 223A 41 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 752+ 223C             >
 752+ 223C             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 223C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 752+ 223C ~           >
 752+ 223C ~           >
 752+ 223C             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 223C             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 223C             >
 752+ 223C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 223C E1                           pop     hl
 754+ 223D 7D                           ld      a, l
 755+ 223E              Emitc_Ptr:
 756+ 223E C5                           push    bc
 757+ 223F D5                           push    de
 758+ 2240 DD E5                        push    ix
 759+ 2242 F3                           di
 760+ 2243 D7                           rst     $10
 761+ 2244 FB                           ei
 762+ 2245 DD E1                        pop     ix
 763+ 2247 D1                           pop     de
 764+ 2248 C1                           pop     bc
 765+ 2249              //              ld      a, -1            // max possible
 766+ 2249              //              ld      (SCR_CT), a
 767+ 2249                              next
 767+ 2249 DD E9       >                jp      (ix)
 768+ 224B
 769+ 224B              //  ______________________________________________________________________
 770+ 224B              //
 771+ 224B              // cr           --
 772+ 224B              // send a CR via EMITC
 773+ 224B                              New_Def CR, "CR", is_code, is_normal
 773+ 224B             >
 773+ 224B             >Dict_Ptr        defl    $
 773+ 224B             >
 773+ 224B             >//              ______________________________________________________________________
 773+ 224B             >//              Heap part
 773+ 224B             >
 773+ 224B             >
 773+ 224B             >                org     (Heap_Ptr & $1FFF) + $E000
 773+ E143             >
 773+ E143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ E143             >Latest_Definition defl  Heap_Ptr
 773+ E143             >
 773+ E143             >                // dummy db directives used to calculate length of namec
 773+ E143 43 52       >                db      "CR"
 773+ E145             >len_NFA         defl    $ - temp_NFA
 773+ E145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ E143             >
 773+ E143 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ E144 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 773+ E146             >                org     $-1                 // alter last byte of Name just above to set
 773+ E145 D2          >                db      {b $} | END_BIT     // msb as name end
 773+ E146             >
 773+ E146 39 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 773+ E148             >Prev_Ptr        defl    Heap_Ptr
 773+ E148             >
 773+ E148             >mirror_Ptr      defl    $
 773+ E148             >
 773+ E148 4D 22       >                dw      Dict_Ptr + 2        // xt
 773+ E14A             >Heap_Ptr        defl    $ - $E000           // save current HP
 773+ E14A             >
 773+ E14A             >Current_HP      defl  $ - $E000             // used to set HP once!
 773+ E14A             >
 773+ E14A             >//              ______________________________________________________________________
 773+ E14A             >//              Dictionary part
 773+ E14A             >
 773+ E14A             >                org     Dict_Ptr
 773+ 224B             >
 773+ 224B 48 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 773+ 224D             >
 773+ 224D             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 224D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 773+ 224D ~           >
 773+ 224D ~           >
 773+ 224D             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 224D             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 224D             >
 773+ 224D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 224D
 775+ 224D 3E 0D                        ld      a, CR_CHAR
 776+ 224F 18 ED                        jr      Emitc_Ptr
 777+ 2251
 778+ 2251              Emitc_Vec:
 779+ 2251 8A 22                        dw      C_Emit_Printable  // comma
 780+ 2253 91 22                        dw      C_Emit_Bel        // bel
 781+ 2255 8A 22                        dw      C_Emit_Printable  // bs
 782+ 2257 AB 22                        dw      C_Emit_Tab        // tab
 783+ 2259 8A 22                        dw      C_Emit_Printable  // cr
 784+ 225B B2 22                        dw      C_Emit_NL         // lf (unix newline)
 785+ 225D 8A 22                        dw      C_Emit_Printable  // blank
 786+ 225F 8A 22                        dw      C_Emit_Printable  // blank
 787+ 2261
 788+ 2261              Emit_Selector_Start:
 789+ 2261 06                           db      $06                 // comma
 790+ 2262 07                           db      $07                 // bel
 791+ 2263 08                           db      $08                 // bs
 792+ 2264 09                           db      $09                 // tab
 793+ 2265 0D                           db      $0D                 // cr
 794+ 2266 0A                           db      $0A                 // lf (unix newline)
 795+ 2267 20                           db      $20
 796+ 2268              Emit_Selector_End:
 797+ 2268 20                           db      $20
 798+ 2269
 799+ 2269              //  ______________________________________________________________________
 800+ 2269              //
 801+ 2269              // (?emit)      c1 -- c2 | c1
 802+ 2269              // decode a character to be sent via EMIT
 803+ 2269              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 804+ 2269              // the routine should resolve anything and convert the character anyway.
 805+ 2269                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 805+ 2269             >
 805+ 2269             >Dict_Ptr        defl    $
 805+ 2269             >
 805+ 2269             >//              ______________________________________________________________________
 805+ 2269             >//              Heap part
 805+ 2269             >
 805+ 2269             >
 805+ 2269             >                org     (Heap_Ptr & $1FFF) + $E000
 805+ E14A             >
 805+ E14A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ E14A             >Latest_Definition defl  Heap_Ptr
 805+ E14A             >
 805+ E14A             >                // dummy db directives used to calculate length of namec
 805+ E14A 28 3F 45 4D >                db      "(?EMIT)"
 805+ E14E 49 54 29    >
 805+ E151             >len_NFA         defl    $ - temp_NFA
 805+ E151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ E14A             >
 805+ E14A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ E14B 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 805+ E14F 49 54 29    >
 805+ E152             >                org     $-1                 // alter last byte of Name just above to set
 805+ E151 A9          >                db      {b $} | END_BIT     // msb as name end
 805+ E152             >
 805+ E152 43 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 805+ E154             >Prev_Ptr        defl    Heap_Ptr
 805+ E154             >
 805+ E154             >mirror_Ptr      defl    $
 805+ E154             >
 805+ E154 6B 22       >                dw      Dict_Ptr + 2        // xt
 805+ E156             >Heap_Ptr        defl    $ - $E000           // save current HP
 805+ E156             >
 805+ E156             >Current_HP      defl  $ - $E000             // used to set HP once!
 805+ E156             >
 805+ E156             >//              ______________________________________________________________________
 805+ E156             >//              Dictionary part
 805+ E156             >
 805+ E156             >                org     Dict_Ptr
 805+ 2269             >
 805+ 2269 54 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 805+ 226B             >
 805+ 226B             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 226B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 805+ 226B ~           >
 805+ 226B ~           >
 805+ 226B             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 226B             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 226B             >
 805+ 226B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 226B D9                           exx
 807+ 226C D1                           pop     de
 808+ 226D 7B                           ld      a, e                //  de has c1
 809+ 226E E6 7F                        and     $7F                 // 7-bit ascii only
 810+ 2270                              // push    bc                  // save Instruction Pointer
 811+ 2270 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 812+ 2273 21 68 22                     ld      hl, Emit_Selector_End
 813+ 2276 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 814+ 2278 20 0A                        jr      nz, C_Emit_Not_Found
 815+ 227A                                  // Found then decode it
 816+ 227A 21 51 22                         ld      hl, Emitc_Vec
 817+ 227D 09                               add     hl, bc
 818+ 227E 09                               add     hl, bc
 819+ 227F 5E                               ld      e, (hl)
 820+ 2280 23                               inc     hl
 821+ 2281 56                               ld      d, (hl)
 822+ 2282 EB                               ex      de, hl
 823+ 2283                                  // pop     bc                  // restore Instruction Pointer
 824+ 2283 E9                               jp      (hl)                // one of the following labels
 825+ 2284              C_Emit_Not_Found:
 826+ 2284                              // pop     bc                  // restore Instruction Pointer
 827+ 2284 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 828+ 2286 30 02                        jr      nc, C_Emit_Printable
 829+ 2288 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 830+ 228A              C_Emit_Printable:
 831+ 228A 6F                           ld      l, a
 832+ 228B 26 00                        ld      h, 0
 833+ 228D E5                           push    hl
 834+ 228E D9                           exx
 835+ 228F                              next
 835+ 228F DD E9       >                jp      (ix)
 836+ 2291
 837+ 2291              C_Emit_Bel:
 838+ 2291 D9                            exx
 839+ 2292 C5                           push    bc                  // save Instruction Pointer
 840+ 2293 D5                           push    de
 841+ 2294 11 00 01                     ld      de, $0100
 842+ 2297 21 00 02                     ld      hl, $0200
 843+ 229A DD E5                        push    ix                  // save Next Pointer
 844+ 229C                              // call    $03B6               // bleep Standard-ROM routine
 845+ 229C F3                           di
 846+ 229D DF                           rst     $18
 847+ 229E B6 03                        defw    $03B6
 848+ 22A0 FB                           ei
 849+ 22A1 DD E1                        pop     ix                  // restore Next Pointer
 850+ 22A3 D1                           pop     de
 851+ 22A4 C1                           pop     bc                  // restore Instruction Pointer
 852+ 22A5 21 00 00                     ld      hl, NUL_CHAR
 853+ 22A8 E5                           push    hl
 854+ 22A9                              next
 854+ 22A9 DD E9       >                jp      (ix)
 855+ 22AB
 856+ 22AB 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 857+ 22AE E5                           push    hl
 858+ 22AF D9                           exx
 859+ 22B0                              next
 859+ 22B0 DD E9       >                jp      (ix)
 860+ 22B2
 861+ 22B2 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 862+ 22B5 E5                           push    hl
 863+ 22B6 D9                           exx
 864+ 22B7                              next
 864+ 22B7 DD E9       >                jp      (ix)
 865+ 22B9
 866+ 22B9              //  ______________________________________________________________________
 867+ 22B9
 868+ 22B9              Key_Table:
 869+ 22B9 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 870+ 22BA C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 871+ 22BB CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 872+ 22BC CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 873+ 22BD CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 874+ 22BE C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 875+ 22BF C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 876+ 22C0 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 877+ 22C1 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 878+ 22C2 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 879+ 22C3 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 880+ 22C4              Key_MapTo:
 881+ 22C4 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 882+ 22C5 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 883+ 22C6 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 884+ 22C7 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 885+ 22C8 5D                           db      $5D                 //  6: SYMBOL+U : ]
 886+ 22C9 5B                           db      $5B                 //  5: SYMBOL+Y : [
 887+ 22CA 7D                           db      $7D                 //  4: SYMBOL+G : }
 888+ 22CB 7B                           db      $7B                 //  3: SYMBOL+F : {
 889+ 22CC 5C                           db      $5C                 //  2: SYMBOl+D : //
 890+ 22CD 7C                           db      $7C                 //  1: SYMBOL+S : |
 891+ 22CE 7E                           db      $7E                 //  0: SYMBOL+A : ~
 892+ 22CF
 893+ 22CF              //  ______________________________________________________________________
 894+ 22CF              //
 895+ 22CF              // curs         -- c
 896+ 22CF              // wait for a keypress
 897+ 22CF              // This definition need Standard ROM Interrupt to be served
 898+ 22CF
 899+ 22CF                              New_Def CUR, "CURS", is_code, is_normal
 899+ 22CF             >
 899+ 22CF             >Dict_Ptr        defl    $
 899+ 22CF             >
 899+ 22CF             >//              ______________________________________________________________________
 899+ 22CF             >//              Heap part
 899+ 22CF             >
 899+ 22CF             >
 899+ 22CF             >                org     (Heap_Ptr & $1FFF) + $E000
 899+ E156             >
 899+ E156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ E156             >Latest_Definition defl  Heap_Ptr
 899+ E156             >
 899+ E156             >                // dummy db directives used to calculate length of namec
 899+ E156 43 55 52 53 >                db      "CURS"
 899+ E15A             >len_NFA         defl    $ - temp_NFA
 899+ E15A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ E156             >
 899+ E156 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ E157 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 899+ E15B             >                org     $-1                 // alter last byte of Name just above to set
 899+ E15A D3          >                db      {b $} | END_BIT     // msb as name end
 899+ E15B             >
 899+ E15B 4A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 899+ E15D             >Prev_Ptr        defl    Heap_Ptr
 899+ E15D             >
 899+ E15D             >mirror_Ptr      defl    $
 899+ E15D             >
 899+ E15D D1 22       >                dw      Dict_Ptr + 2        // xt
 899+ E15F             >Heap_Ptr        defl    $ - $E000           // save current HP
 899+ E15F             >
 899+ E15F             >Current_HP      defl  $ - $E000             // used to set HP once!
 899+ E15F             >
 899+ E15F             >//              ______________________________________________________________________
 899+ E15F             >//              Dictionary part
 899+ E15F             >
 899+ E15F             >                org     Dict_Ptr
 899+ 22CF             >
 899+ 22CF 5D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 899+ 22D1             >
 899+ 22D1             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 22D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 899+ 22D1 ~           >
 899+ 22D1 ~           >
 899+ 22D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 22D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 22D1             >
 899+ 22D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 22D1
 901+ 22D1 C5                           push    bc                  // save Instruction Pointer
 902+ 22D2 D5                           push    de                  // save Return Stack Pointer
 903+ 22D3 DD E5                        push    ix
 904+ 22D5 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 905+ 22D9                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 906+ 22D9 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 907+ 22DC FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 908+ 22E0
 909+ 22E0              Cur_Wait:
 910+ 22E0 76                               halt
 911+ 22E1 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 912+ 22E3                              //  call    $1601               // SELECT Standard-ROM Routine
 913+ 22E3 DF                               rst     $18
 914+ 22E4 01 16                            dw      $1601
 915+ 22E6                                  // software-flash: flips face every 320 ms
 916+ 22E6 3E 20                            ld      a, $20              // Timing based
 917+ 22E8 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 918+ 22EB
 919+ 22EB 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 920+ 22EE 20 0C                            jr      nz, Cur_Cursor
 921+ 22F0 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 922+ 22F3 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 923+ 22F7 28 03                                jr      z, Cur_Cursor
 924+ 22F9 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 925+ 22FC              Cur_Cursor:
 926+ 22FC D7                               rst     $10
 927+ 22FD 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 928+ 22FF D7                               rst     $10
 929+ 2300 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 930+ 2304 28 DA                        jr      z, Cur_Wait
 931+ 2306
 932+ 2306 76                           halt    // this is to sync flashing cursor.
 933+ 2307
 934+ 2307 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 935+ 2309 D7                           rst     $10
 936+ 230A 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 937+ 230C D7                           rst     $10
 938+ 230D
 939+ 230D ED 7B 2C 20                  ld      sp, (SP_Saved)
 940+ 2311 DD E1                        pop     ix
 941+ 2313 D1                           pop     de                  // Restore Return Stack Pointer
 942+ 2314 C1                           pop     bc                  // Restore Instruction Pointer
 943+ 2315                              next
 943+ 2315 DD E9       >                jp      (ix)
 944+ 2317
 945+ 2317
 946+ 2317              //  ______________________________________________________________________
 947+ 2317              //
 948+ 2317              // key          -- c
 949+ 2317              // This definition need Standard ROM Interrupt to be served
 950+ 2317
 951+ 2317                              New_Def KEY, "KEY", is_code, is_normal
 951+ 2317             >
 951+ 2317             >Dict_Ptr        defl    $
 951+ 2317             >
 951+ 2317             >//              ______________________________________________________________________
 951+ 2317             >//              Heap part
 951+ 2317             >
 951+ 2317             >
 951+ 2317             >                org     (Heap_Ptr & $1FFF) + $E000
 951+ E15F             >
 951+ E15F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ E15F             >Latest_Definition defl  Heap_Ptr
 951+ E15F             >
 951+ E15F             >                // dummy db directives used to calculate length of namec
 951+ E15F 4B 45 59    >                db      "KEY"
 951+ E162             >len_NFA         defl    $ - temp_NFA
 951+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ E15F             >
 951+ E15F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ E160 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 951+ E163             >                org     $-1                 // alter last byte of Name just above to set
 951+ E162 D9          >                db      {b $} | END_BIT     // msb as name end
 951+ E163             >
 951+ E163 56 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 951+ E165             >Prev_Ptr        defl    Heap_Ptr
 951+ E165             >
 951+ E165             >mirror_Ptr      defl    $
 951+ E165             >
 951+ E165 19 23       >                dw      Dict_Ptr + 2        // xt
 951+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 951+ E167             >
 951+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 951+ E167             >
 951+ E167             >//              ______________________________________________________________________
 951+ E167             >//              Dictionary part
 951+ E167             >
 951+ E167             >                org     Dict_Ptr
 951+ 2317             >
 951+ 2317 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 951+ 2319             >
 951+ 2319             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 2319 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 951+ 2319 ~           >
 951+ 2319 ~           >
 951+ 2319             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 2319             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 2319             >
 951+ 2319             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 2319
 953+ 2319 C5                           push    bc                  // Save Instruction Pointer
 954+ 231A
 955+ 231A              Key_Wait:
 956+ 231A FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 957+ 231E 28 FA                        jr      z, Key_Wait
 958+ 2320
 959+ 2320 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 960+ 2323
 961+ 2323                              // decode character from above table
 962+ 2323 21 B9 22                     ld      hl, Key_Table
 963+ 2326 01 0B 00                     ld      bc, $000B
 964+ 2329 ED B1                        cpir
 965+ 232B 20 05                        jr      nz, Key_DontMap
 966+ 232D 21 C4 22                         ld      hl, Key_MapTo
 967+ 2330 09                               add     hl, bc
 968+ 2331 7E                               ld      a, (hl)
 969+ 2332 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 970+ 2334 20 09                        jr      nz, Key_NoCapsLock
 971+ 2336 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 972+ 2339 7E                               ld      a, (hl)
 973+ 233A EE 08                            xor     $08
 974+ 233C 77                               ld      (hl), a
 975+ 233D 3E 00                            ld      a, NUL_CHAR
 976+ 233F 6F           Key_NoCapsLock: ld      l, a
 977+ 2340 26 00                        ld      h, 0                // Prepare TOS
 978+ 2342
 979+ 2342 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 980+ 2346
 981+ 2346 C1                           pop     bc                  // Restore Instruction Pointer
 982+ 2347
 983+ 2347                              psh1
 983+ 2347 E5          >                push    hl
 983+ 2348 DD E9       >                jp      (ix)
 984+ 234A
 985+ 234A
 986+ 234A              //  ______________________________________________________________________
 987+ 234A              //
 988+ 234A              // click        --
 989+ 234A              // This definition need Standard ROM Interrupt to be served
 990+ 234A              //
 991+ 234A              //              New_Def CLICK, "CLICK", is_code, is_normal
 992+ 234A              //
 993+ 234A              //                push    bc
 994+ 234A              //              ld      a, ($5C48)          // BORDCR system variable
 995+ 234A              //              rra
 996+ 234A              //              rra
 997+ 234A              //              rra
 998+ 234A              //              or      $18                 // quick'n'dirty click
 999+ 234A              //              out     ($fe), a
1000+ 234A              //              ld      b, 0
1001+ 234A              //              djnz    $                   // wait loop
1002+ 234A              //              xor     $18
1003+ 234A              //              out     ($fe), a
1004+ 234A              //                pop     bc
1005+ 234A
1006+ 234A              //              next
1007+ 234A
1008+ 234A              //  ______________________________________________________________________
1009+ 234A              //
1010+ 234A              // key?         -- f
1011+ 234A              // key available
1012+ 234A              //
1013+ 234A              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1014+ 234A              //
1015+ 234A              //              ld      hl, 0000
1016+ 234A              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1017+ 234A              //              jr      z, Key_Q
1018+ 234A              //                  dec     hl
1019+ 234A              // Key_Q:
1020+ 234A              //                psh1
1021+ 234A              //              next
1022+ 234A
1023+ 234A              //  ______________________________________________________________________
1024+ 234A              //
1025+ 234A              // ?terminal    -- FALSE | TRUE
1026+ 234A              // test for BREAK keypress
1027+ 234A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1027+ 234A             >
1027+ 234A             >Dict_Ptr        defl    $
1027+ 234A             >
1027+ 234A             >//              ______________________________________________________________________
1027+ 234A             >//              Heap part
1027+ 234A             >
1027+ 234A             >
1027+ 234A             >                org     (Heap_Ptr & $1FFF) + $E000
1027+ E167             >
1027+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ E167             >Latest_Definition defl  Heap_Ptr
1027+ E167             >
1027+ E167             >                // dummy db directives used to calculate length of namec
1027+ E167 3F 54 45 52 >                db      "?TERMINAL"
1027+ E16B 4D 49 4E 41 >
1027+ E16F 4C          >
1027+ E170             >len_NFA         defl    $ - temp_NFA
1027+ E170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ E167             >
1027+ E167 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ E168 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1027+ E16C 4D 49 4E 41 >
1027+ E170 4C          >
1027+ E171             >                org     $-1                 // alter last byte of Name just above to set
1027+ E170 CC          >                db      {b $} | END_BIT     // msb as name end
1027+ E171             >
1027+ E171 5F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1027+ E173             >Prev_Ptr        defl    Heap_Ptr
1027+ E173             >
1027+ E173             >mirror_Ptr      defl    $
1027+ E173             >
1027+ E173 4C 23       >                dw      Dict_Ptr + 2        // xt
1027+ E175             >Heap_Ptr        defl    $ - $E000           // save current HP
1027+ E175             >
1027+ E175             >Current_HP      defl  $ - $E000             // used to set HP once!
1027+ E175             >
1027+ E175             >//              ______________________________________________________________________
1027+ E175             >//              Dictionary part
1027+ E175             >
1027+ E175             >                org     Dict_Ptr
1027+ 234A             >
1027+ 234A 73 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1027+ 234C             >
1027+ 234C             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 234C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1027+ 234C ~           >
1027+ 234C ~           >
1027+ 234C             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 234C             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 234C             >
1027+ 234C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 234C D9                           exx
1029+ 234D 01 FE 7F                     ld      bc, $7ffe
1030+ 2350 ED 50                        in      d, (c)
1031+ 2352 41                           ld      b, c
1032+ 2353 ED 78                        in      a, (c)
1033+ 2355 B2                           or       d
1034+ 2356 1F                           rra
1035+ 2357 3F                           ccf
1036+ 2358 ED 62                        sbc     hl, hl
1037+ 235A E5                           push    hl
1038+ 235B D9                           exx
1039+ 235C                              next
1039+ 235C DD E9       >                jp      (ix)
1040+ 235E
1041+ 235E
1042+ 235E              //  ______________________________________________________________________
1043+ 235E              //
1044+ 235E              // inkey        -- c | 0
1045+ 235E              // call ROM inkey$ routine, returns c or "zero".
1046+ 235E              //
1047+ 235E              //              New_Def INKEY, "INKEY", is_code, is_normal
1048+ 235E              //              push    bc
1049+ 235E              //              push    de
1050+ 235E              //              ld      (SP_Saved), sp
1051+ 235E              //              ld      sp, Cold_origin - 5
1052+ 235E              //              ld      sp, TSTACK           // Carefully balanced from startup
1053+ 235E              //              push    ix
1054+ 235E              //              di
1055+ 235E              //              call    $15E6                   // instead of 15E9
1056+ 235E              //              ei
1057+ 235E              //              pop     ix
1058+ 235E              //              ld      sp, (SP_Saved)
1059+ 235E              //              ld      l, a
1060+ 235E              //              ld      h, 0
1061+ 235E              //              pop     de
1062+ 235E              //              pop     bc
1063+ 235E              //              psh1
1064+ 235E
1065+ 235E              //  ______________________________________________________________________
1066+ 235E              //
1067+ 235E              // select      n --
1068+ 235E              // selects the given channel number
1069+ 235E
1070+ 235E                              New_Def SELECT, "SELECT", is_code, is_normal
1070+ 235E             >
1070+ 235E             >Dict_Ptr        defl    $
1070+ 235E             >
1070+ 235E             >//              ______________________________________________________________________
1070+ 235E             >//              Heap part
1070+ 235E             >
1070+ 235E             >
1070+ 235E             >                org     (Heap_Ptr & $1FFF) + $E000
1070+ E175             >
1070+ E175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1070+ E175             >Latest_Definition defl  Heap_Ptr
1070+ E175             >
1070+ E175             >                // dummy db directives used to calculate length of namec
1070+ E175 53 45 4C 45 >                db      "SELECT"
1070+ E179 43 54       >
1070+ E17B             >len_NFA         defl    $ - temp_NFA
1070+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1070+ E175             >
1070+ E175 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1070+ E176 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1070+ E17A 43 54       >
1070+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1070+ E17B D4          >                db      {b $} | END_BIT     // msb as name end
1070+ E17C             >
1070+ E17C 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1070+ E17E             >Prev_Ptr        defl    Heap_Ptr
1070+ E17E             >
1070+ E17E             >mirror_Ptr      defl    $
1070+ E17E             >
1070+ E17E 60 23       >                dw      Dict_Ptr + 2        // xt
1070+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1070+ E180             >
1070+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1070+ E180             >
1070+ E180             >//              ______________________________________________________________________
1070+ E180             >//              Dictionary part
1070+ E180             >
1070+ E180             >                org     Dict_Ptr
1070+ 235E             >
1070+ 235E 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1070+ 2360             >
1070+ 2360             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1070+ 2360 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1070+ 2360 ~           >
1070+ 2360 ~           >
1070+ 2360             >                endif           ; ok        // for other definitions it "points" the correct handler
1070+ 2360             >                // Use of "; ok" to suppress "warning[fwdref]"
1070+ 2360             >
1070+ 2360             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1071+ 2360 E1                           pop     hl
1072+ 2361 C5                           push    bc
1073+ 2362 D5                           push    de
1074+ 2363 7D                           ld      a, l
1075+ 2364 ED 73 2C 20                  ld      (SP_Saved), sp
1076+ 2368                          //  ld      sp, Cold_origin - 5
1077+ 2368 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1078+ 236B DD E5                        push    ix
1079+ 236D                          //  call    $1601
1080+ 236D F3                           di
1081+ 236E DF                           rst     $18
1082+ 236F 01 16                        dw      $1601
1083+ 2371 FB                           ei
1084+ 2372 DD E1                        pop     ix
1085+ 2374 ED 7B 2C 20                  ld      sp, (SP_Saved)
1086+ 2378 D1                           pop     de
1087+ 2379 C1                           pop     bc
1088+ 237A                              next
1088+ 237A DD E9       >                jp      (ix)
1089+ 237C
1090+ 237C              //  ______________________________________________________________________
1091+ 237C              //
1092+ 237C              // ZX Spectrum Next - Low Level disk primitives.
1093+ 237C              // this include is "here" for backward compatibility
1094+ 237C
1095+ 237C                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++237C              //  ______________________________________________________________________
   2++237C              //
   3++237C              //  next-opt.asm
   4++237C              //
   5++237C              //  ZX Spectrum Next - peculiar definitions
   6++237C              //  ______________________________________________________________________
   7++237C
   8++237C              //  ______________________________________________________________________
   9++237C              //
  10++237C              // f_seek       d u -- f
  11++237C              // Seek to position d in file-handle u.
  12++237C              // Return a false-flag 0 on success, True flag on error
  13++237C                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++237C             >
  13++237C             >Dict_Ptr        defl    $
  13++237C             >
  13++237C             >//              ______________________________________________________________________
  13++237C             >//              Heap part
  13++237C             >
  13++237C             >
  13++237C             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E180             >
  13++E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E180             >Latest_Definition defl  Heap_Ptr
  13++E180             >
  13++E180             >                // dummy db directives used to calculate length of namec
  13++E180 46 5F 53 45 >                db      "F_SEEK"
  13++E184 45 4B       >
  13++E186             >len_NFA         defl    $ - temp_NFA
  13++E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E180             >
  13++E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E181 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E185 45 4B       >
  13++E187             >                org     $-1                 // alter last byte of Name just above to set
  13++E186 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E187             >
  13++E187 75 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E189             >Prev_Ptr        defl    Heap_Ptr
  13++E189             >
  13++E189             >mirror_Ptr      defl    $
  13++E189             >
  13++E189 7E 23       >                dw      Dict_Ptr + 2        // xt
  13++E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18B             >
  13++E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18B             >
  13++E18B             >//              ______________________________________________________________________
  13++E18B             >//              Dictionary part
  13++E18B             >
  13++E18B             >                org     Dict_Ptr
  13++237C             >
  13++237C 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++237E             >
  13++237E             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++237E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++237E ~           >
  13++237E ~           >
  13++237E             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++237E             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++237E             >
  13++237E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++237E D9                            exx
  15++237F E1                            pop     hl                  // file-handle
  16++2380 7D                            ld      a, l
  17++2381 C1                            pop     bc                  // bc has high-word of d
  18++2382 D1                            pop     de
  19++2383 D9                           exx
  20++2384 DD E5                        push    ix
  21++2386 D5                           push    de
  22++2387 C5                           push    bc                  // save Instruction Pointer
  23++2388 D9                            exx
  24++2389 21 00 00                      ld      hl, 0 // ix, 0
  25++238C CF                            rst     $08
  26++238D 9F                            db      $9F
  27++238E              F_Seek_Exit:
  28++238E C1                           pop     bc                  // restore Instruction Pointer
  29++238F D1                           pop     de
  30++2390 DD E1                        pop     ix
  31++2392 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++2394
  33++2394                              psh1
  33++2394 E5          >                push    hl
  33++2395 DD E9       >                jp      (ix)
  34++2397
  35++2397              //  ______________________________________________________________________
  36++2397              //
  37++2397              // f_close      u -- f
  38++2397              // Close file-handle u.
  39++2397              // Return 0 on success, True flag on error
  40++2397
  41++2397                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++2397             >
  41++2397             >Dict_Ptr        defl    $
  41++2397             >
  41++2397             >//              ______________________________________________________________________
  41++2397             >//              Heap part
  41++2397             >
  41++2397             >
  41++2397             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E18B             >
  41++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E18B             >Latest_Definition defl  Heap_Ptr
  41++E18B             >
  41++E18B             >                // dummy db directives used to calculate length of namec
  41++E18B 46 5F 43 4C >                db      "F_CLOSE"
  41++E18F 4F 53 45    >
  41++E192             >len_NFA         defl    $ - temp_NFA
  41++E192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E18B             >
  41++E18B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E18C 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E190 4F 53 45    >
  41++E193             >                org     $-1                 // alter last byte of Name just above to set
  41++E192 C5          >                db      {b $} | END_BIT     // msb as name end
  41++E193             >
  41++E193 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E195             >Prev_Ptr        defl    Heap_Ptr
  41++E195             >
  41++E195             >mirror_Ptr      defl    $
  41++E195             >
  41++E195 99 23       >                dw      Dict_Ptr + 2        // xt
  41++E197             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E197             >
  41++E197             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E197             >
  41++E197             >//              ______________________________________________________________________
  41++E197             >//              Dictionary part
  41++E197             >
  41++E197             >                org     Dict_Ptr
  41++2397             >
  41++2397 95 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++2399             >
  41++2399             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++2399 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++2399 ~           >
  41++2399 ~           >
  41++2399             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++2399             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++2399             >
  41++2399             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++2399
  43++2399 E1                           pop     hl
  44++239A 7D                           ld      a, l                // file-handle
  45++239B DD E5                        push    ix
  46++239D D5                           push    de
  47++239E C5                           push    bc                  // Save Instruction pointer
  48++239F CF                           rst     $08
  49++23A0 9B                           db      $9B
  50++23A1 18 EB                        jr      F_Seek_Exit
  51++23A3              //              pop     de
  52++23A3              //              pop     bc
  53++23A3              //              pop     ix
  54++23A3              //              sbc     hl, hl
  55++23A3              //              psh1
  56++23A3
  57++23A3              //  ______________________________________________________________________
  58++23A3              //
  59++23A3              // f_sync      u -- f
  60++23A3              // Close file-handle u.
  61++23A3              // Return 0 on success, True flag on error
  62++23A3
  63++23A3                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++23A3             >
  63++23A3             >Dict_Ptr        defl    $
  63++23A3             >
  63++23A3             >//              ______________________________________________________________________
  63++23A3             >//              Heap part
  63++23A3             >
  63++23A3             >
  63++23A3             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E197             >
  63++E197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E197             >Latest_Definition defl  Heap_Ptr
  63++E197             >
  63++E197             >                // dummy db directives used to calculate length of namec
  63++E197 46 5F 53 59 >                db      "F_SYNC"
  63++E19B 4E 43       >
  63++E19D             >len_NFA         defl    $ - temp_NFA
  63++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E197             >
  63++E197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E198 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E19C 4E 43       >
  63++E19E             >                org     $-1                 // alter last byte of Name just above to set
  63++E19D C3          >                db      {b $} | END_BIT     // msb as name end
  63++E19E             >
  63++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1A0             >Prev_Ptr        defl    Heap_Ptr
  63++E1A0             >
  63++E1A0             >mirror_Ptr      defl    $
  63++E1A0             >
  63++E1A0 A5 23       >                dw      Dict_Ptr + 2        // xt
  63++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1A2             >
  63++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1A2             >
  63++E1A2             >//              ______________________________________________________________________
  63++E1A2             >//              Dictionary part
  63++E1A2             >
  63++E1A2             >                org     Dict_Ptr
  63++23A3             >
  63++23A3 A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++23A5             >
  63++23A5             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++23A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++23A5 ~           >
  63++23A5 ~           >
  63++23A5             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++23A5             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++23A5             >
  63++23A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++23A5 E1                           pop     hl
  65++23A6 7D                           ld      a, l                // file-handle
  66++23A7 DD E5                        push    ix
  67++23A9 D5                           push    de
  68++23AA C5                           push    bc
  69++23AB CF                           rst     $08
  70++23AC 9C                           db      $9C
  71++23AD 18 DF                        jr      F_Seek_Exit
  72++23AF              //              pop     de
  73++23AF              //              pop     bc
  74++23AF              //              pop     ix
  75++23AF              //              sbc     hl, hl
  76++23AF              //              psh1
  77++23AF
  78++23AF              //  ______________________________________________________________________
  79++23AF              //
  80++23AF              // f_fgetpos    u -- d f
  81++23AF              // Seek to position d in file-handle u.
  82++23AF              // Return a false-flag 0 on success, True flag on error
  83++23AF                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++23AF             >
  83++23AF             >Dict_Ptr        defl    $
  83++23AF             >
  83++23AF             >//              ______________________________________________________________________
  83++23AF             >//              Heap part
  83++23AF             >
  83++23AF             >
  83++23AF             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1A2             >
  83++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1A2             >Latest_Definition defl  Heap_Ptr
  83++E1A2             >
  83++E1A2             >                // dummy db directives used to calculate length of namec
  83++E1A2 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1A6 45 54 50 4F >
  83++E1AA 53          >
  83++E1AB             >len_NFA         defl    $ - temp_NFA
  83++E1AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1A2             >
  83++E1A2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1A3 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1A7 45 54 50 4F >
  83++E1AB 53          >
  83++E1AC             >                org     $-1                 // alter last byte of Name just above to set
  83++E1AB D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1AC             >
  83++E1AC 97 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1AE             >Prev_Ptr        defl    Heap_Ptr
  83++E1AE             >
  83++E1AE             >mirror_Ptr      defl    $
  83++E1AE             >
  83++E1AE B1 23       >                dw      Dict_Ptr + 2        // xt
  83++E1B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1B0             >
  83++E1B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1B0             >
  83++E1B0             >//              ______________________________________________________________________
  83++E1B0             >//              Dictionary part
  83++E1B0             >
  83++E1B0             >                org     Dict_Ptr
  83++23AF             >
  83++23AF AE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++23B1             >
  83++23B1             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++23B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++23B1 ~           >
  83++23B1 ~           >
  83++23B1             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++23B1             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++23B1             >
  83++23B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++23B1 E1                            pop     hl
  85++23B2 7D                            ld      a, l                // file-handle
  86++23B3 DD E5                         push    ix
  87++23B5 D5                            push    de
  88++23B6 C5                            push    bc
  89++23B7 CF                            rst     $08
  90++23B8 A0                            db      $A0
  91++23B9 D9                           exx
  92++23BA C1                           pop     bc                  // IP
  93++23BB D1                           pop     de                  // Return Stack Pointer
  94++23BC DD E1                        pop     ix
  95++23BE D9                            exx
  96++23BF D5                            push    de
  97++23C0 C5                            push    bc
  98++23C1 ED 62                         sbc     hl, hl
  99++23C3 E5                            push    hl
 100++23C4 D9                           exx
 101++23C5                              next
 101++23C5 DD E9       >                jp      (ix)
 102++23C7
 103++23C7              //  ______________________________________________________________________
 104++23C7              //
 105++23C7              // f_read       a b u -- n f
 106++23C7              // Read b bytes from file-handle u to address a
 107++23C7              // Return the actual number n of bytes read
 108++23C7              // Return 0 on success, True flag on error
 109++23C7                              New_Def F_READ, "F_READ", is_code, is_normal
 109++23C7             >
 109++23C7             >Dict_Ptr        defl    $
 109++23C7             >
 109++23C7             >//              ______________________________________________________________________
 109++23C7             >//              Heap part
 109++23C7             >
 109++23C7             >
 109++23C7             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1B0             >
 109++E1B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1B0             >Latest_Definition defl  Heap_Ptr
 109++E1B0             >
 109++E1B0             >                // dummy db directives used to calculate length of namec
 109++E1B0 46 5F 52 45 >                db      "F_READ"
 109++E1B4 41 44       >
 109++E1B6             >len_NFA         defl    $ - temp_NFA
 109++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1B0             >
 109++E1B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1B1 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1B5 41 44       >
 109++E1B7             >                org     $-1                 // alter last byte of Name just above to set
 109++E1B6 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1B7             >
 109++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1B9             >Prev_Ptr        defl    Heap_Ptr
 109++E1B9             >
 109++E1B9             >mirror_Ptr      defl    $
 109++E1B9             >
 109++E1B9 C9 23       >                dw      Dict_Ptr + 2        // xt
 109++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1BB             >
 109++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1BB             >
 109++E1BB             >//              ______________________________________________________________________
 109++E1BB             >//              Dictionary part
 109++E1BB             >
 109++E1BB             >                org     Dict_Ptr
 109++23C7             >
 109++23C7 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++23C9             >
 109++23C9             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++23C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++23C9 ~           >
 109++23C9 ~           >
 109++23C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++23C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++23C9             >
 109++23C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++23C9 D9                            exx
 111++23CA E1                            pop     hl
 112++23CB 7D                            ld      a, l                // file-handle
 113++23CC C1                            pop     bc                  // bc has bytes to read
 114++23CD DD E3                         ex      (sp), ix            // ix has address
 115++23CF DD E5                         push    ix
 116++23D1 E1                            pop     hl
 117++23D2 D9                           exx
 118++23D3 D5                           push    de                  // Save Return Stack pointer
 119++23D4 C5                           push    bc                  // Save Instruction pointer
 120++23D5 D9                            exx
 121++23D6 CF                            rst     $08
 122++23D7 9D                            db      $9D
 123++23D8              F_Read_Exit:
 124++23D8 D9                           exx
 125++23D9 C1                           pop     bc                  // Restore Instruction pointer
 126++23DA D1                           pop     de                  // Restore Return Stack pointer
 127++23DB DD E1                        pop     ix                  // Restore ix
 128++23DD D9                            exx
 129++23DE D5                            push    de                  // bytes involved in i/o operation
 130++23DF ED 62                         sbc     hl, hl
 131++23E1 E5                            push    hl
 132++23E2 D9                           exx
 133++23E3                              next
 133++23E3 DD E9       >                jp      (ix)
 134++23E5
 135++23E5              //  ______________________________________________________________________
 136++23E5              //
 137++23E5              // f_write      a b u -- n f
 138++23E5              // Write bytes currently stored at address a to file-handle u.
 139++23E5              // Return the actual n bytes written and 0 on success, True flag on error.
 140++23E5                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 140++23E5             >
 140++23E5             >Dict_Ptr        defl    $
 140++23E5             >
 140++23E5             >//              ______________________________________________________________________
 140++23E5             >//              Heap part
 140++23E5             >
 140++23E5             >
 140++23E5             >                org     (Heap_Ptr & $1FFF) + $E000
 140++E1BB             >
 140++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140++E1BB             >Latest_Definition defl  Heap_Ptr
 140++E1BB             >
 140++E1BB             >                // dummy db directives used to calculate length of namec
 140++E1BB 46 5F 57 52 >                db      "F_WRITE"
 140++E1BF 49 54 45    >
 140++E1C2             >len_NFA         defl    $ - temp_NFA
 140++E1C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140++E1BB             >
 140++E1BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140++E1BC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 140++E1C0 49 54 45    >
 140++E1C3             >                org     $-1                 // alter last byte of Name just above to set
 140++E1C2 C5          >                db      {b $} | END_BIT     // msb as name end
 140++E1C3             >
 140++E1C3 B0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140++E1C5             >Prev_Ptr        defl    Heap_Ptr
 140++E1C5             >
 140++E1C5             >mirror_Ptr      defl    $
 140++E1C5             >
 140++E1C5 E7 23       >                dw      Dict_Ptr + 2        // xt
 140++E1C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 140++E1C7             >
 140++E1C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 140++E1C7             >
 140++E1C7             >//              ______________________________________________________________________
 140++E1C7             >//              Dictionary part
 140++E1C7             >
 140++E1C7             >                org     Dict_Ptr
 140++23E5             >
 140++23E5 C5 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 140++23E7             >
 140++23E7             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140++23E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140++23E7 ~           >
 140++23E7 ~           >
 140++23E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 140++23E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 140++23E7             >
 140++23E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141++23E7 D9                            exx
 142++23E8 E1                            pop     hl
 143++23E9 7D                            ld      a, l                // file-handle
 144++23EA C1                            pop     bc                  // bc has bytes to read
 145++23EB DD E3                         ex      (sp), ix            // ix has address
 146++23ED DD E5                         push    ix
 147++23EF E1                            pop     hl
 148++23F0 D9                           exx
 149++23F1 D5                           push    de                  // Save Return Stack pointer
 150++23F2 C5                           push    bc                  // Save Instruction pointer
 151++23F3 D9                            exx
 152++23F4 CF                            rst     $08
 153++23F5 9E                            db      $9E
 154++23F6 18 E0                         jr F_Read_Exit
 155++23F8              //                exx
 156++23F8              //                pop     de                  // Restore Return Stack pointer
 157++23F8              //                pop     bc                  // Restore Instruction pointer
 158++23F8              //                pop     ix                  // Restore ix
 159++23F8              //                 exx
 160++23F8              //                 push    de                  // bytes involved in i/o operation
 161++23F8              //                 sbc     hl, hl
 162++23F8              //                 push    hl
 163++23F8              //                exx
 164++23F8              //                next
 165++23F8
 166++23F8              //  ______________________________________________________________________
 167++23F8              //
 168++23F8              // f_open       a1 a2 b -- u f
 169++23F8              // open a file
 170++23F8              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 171++23F8              // a2 is address to an 8-byte header data used in some cases.
 172++23F8              // b is access mode-byte, that is a combination of:
 173++23F8              // any/all of:
 174++23F8              //   esx_mode_read          $01 request read access
 175++23F8              //   esx_mode_write         $02 request write access
 176++23F8              //   esx_mode_use_header    $40 read/write +3DOS header
 177++23F8              // plus one of:
 178++23F8              //   esx_mode_open_exist    $00 only open existing file
 179++23F8              //   esx_mode_open_creat    $08 open existing or create file
 180++23F8              //   esx_mode_creat_noexist $04 create new file, error if exists
 181++23F8              //   esx_mode_creat_trunc   $0c create new file, delete existing
 182++23F8              // Return file-handle u and 0 on success, True flag on error
 183++23F8                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 183++23F8             >
 183++23F8             >Dict_Ptr        defl    $
 183++23F8             >
 183++23F8             >//              ______________________________________________________________________
 183++23F8             >//              Heap part
 183++23F8             >
 183++23F8             >
 183++23F8             >                org     (Heap_Ptr & $1FFF) + $E000
 183++E1C7             >
 183++E1C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183++E1C7             >Latest_Definition defl  Heap_Ptr
 183++E1C7             >
 183++E1C7             >                // dummy db directives used to calculate length of namec
 183++E1C7 46 5F 4F 50 >                db      "F_OPEN"
 183++E1CB 45 4E       >
 183++E1CD             >len_NFA         defl    $ - temp_NFA
 183++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183++E1C7             >
 183++E1C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183++E1C8 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 183++E1CC 45 4E       >
 183++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 183++E1CD CE          >                db      {b $} | END_BIT     // msb as name end
 183++E1CE             >
 183++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183++E1D0             >Prev_Ptr        defl    Heap_Ptr
 183++E1D0             >
 183++E1D0             >mirror_Ptr      defl    $
 183++E1D0             >
 183++E1D0 FA 23       >                dw      Dict_Ptr + 2        // xt
 183++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 183++E1D2             >
 183++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 183++E1D2             >
 183++E1D2             >//              ______________________________________________________________________
 183++E1D2             >//              Dictionary part
 183++E1D2             >
 183++E1D2             >                org     Dict_Ptr
 183++23F8             >
 183++23F8 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 183++23FA             >
 183++23FA             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 183++23FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 183++23FA ~           >
 183++23FA ~           >
 183++23FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 183++23FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 183++23FA             >
 183++23FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184++23FA D9                            exx
 185++23FB C1                            pop     bc                  // file-mode
 186++23FC 41                            ld      b, c                // file-mode
 187++23FD D1                            pop     de                  // 8-bytes buffer if any
 188++23FE DD E3                         ex      (sp), ix            // filespec nul-terminated
 189++2400 DD E5                         push    ix
 190++2402 E1                            pop     hl
 191++2403 D9                           exx
 192++2404 D5                           push    de                  // Save Return Stack pointer
 193++2405 C5                           push    bc                  // Save Instruction pointer
 194++2406 D9                            exx
 195++2407 3E 2A                         ld      a, "*"
 196++2409 CF                            rst     $08
 197++240A 9A                            db      $9A
 198++240B              F_Open_Exit:
 199++240B 5F                            ld      e, a                // return the handle-number
 200++240C 16 00                         ld      d, 0
 201++240E 18 C8                        jr F_Read_Exit
 202++2410
 203++2410              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 204++2410              //   \ FILENAME 1+ PAD 1 F_OPEN
 205++2410              //   \ DROP
 206++2410              //   \ F_CLOSE
 207++2410
 208++2410
 209++2410              //  ______________________________________________________________________
 210++2410              //
 211++2410              // f_opendir    a1 -- u f
 212++2410              // open a file
 213++2410                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 213++2410             >
 213++2410             >Dict_Ptr        defl    $
 213++2410             >
 213++2410             >//              ______________________________________________________________________
 213++2410             >//              Heap part
 213++2410             >
 213++2410             >
 213++2410             >                org     (Heap_Ptr & $1FFF) + $E000
 213++E1D2             >
 213++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213++E1D2             >Latest_Definition defl  Heap_Ptr
 213++E1D2             >
 213++E1D2             >                // dummy db directives used to calculate length of namec
 213++E1D2 46 5F 4F 50 >                db      "F_OPENDIR"
 213++E1D6 45 4E 44 49 >
 213++E1DA 52          >
 213++E1DB             >len_NFA         defl    $ - temp_NFA
 213++E1DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213++E1D2             >
 213++E1D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 213++E1D7 45 4E 44 49 >
 213++E1DB 52          >
 213++E1DC             >                org     $-1                 // alter last byte of Name just above to set
 213++E1DB D2          >                db      {b $} | END_BIT     // msb as name end
 213++E1DC             >
 213++E1DC C7 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 213++E1DE             >Prev_Ptr        defl    Heap_Ptr
 213++E1DE             >
 213++E1DE             >mirror_Ptr      defl    $
 213++E1DE             >
 213++E1DE 12 24       >                dw      Dict_Ptr + 2        // xt
 213++E1E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 213++E1E0             >
 213++E1E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 213++E1E0             >
 213++E1E0             >//              ______________________________________________________________________
 213++E1E0             >//              Dictionary part
 213++E1E0             >
 213++E1E0             >                org     Dict_Ptr
 213++2410             >
 213++2410 DE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 213++2412             >
 213++2412             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213++2412 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 213++2412 ~           >
 213++2412 ~           >
 213++2412             >                endif           ; ok        // for other definitions it "points" the correct handler
 213++2412             >                // Use of "; ok" to suppress "warning[fwdref]"
 213++2412             >
 213++2412             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214++2412 DD E3                        ex      (sp), ix            // filespec nul-terminated
 215++2414 DD E5                        push    ix
 216++2416 E1                           pop     hl
 217++2417 D5                           push    de                  // Save Return Stack pointer
 218++2418 C5                           push    bc                  // Save Instruction pointer
 219++2419 06 10                        ld      b, $10              // file-mode
 220++241B 3E 43                        ld      a, "C"
 221++241D CF                           rst     $08
 222++241E A3                           db      $A3
 223++241F 18 EA                        jr      F_Open_Exit
 224++2421
 225++2421
 226++2421              //  ______________________________________________________________________
 227++2421              //
 228++2421              // f_readdir    a1 a2 b -- u f
 229++2421              // open a file
 230++2421                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 230++2421             >
 230++2421             >Dict_Ptr        defl    $
 230++2421             >
 230++2421             >//              ______________________________________________________________________
 230++2421             >//              Heap part
 230++2421             >
 230++2421             >
 230++2421             >                org     (Heap_Ptr & $1FFF) + $E000
 230++E1E0             >
 230++E1E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 230++E1E0             >Latest_Definition defl  Heap_Ptr
 230++E1E0             >
 230++E1E0             >                // dummy db directives used to calculate length of namec
 230++E1E0 46 5F 52 45 >                db      "F_READDIR"
 230++E1E4 41 44 44 49 >
 230++E1E8 52          >
 230++E1E9             >len_NFA         defl    $ - temp_NFA
 230++E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 230++E1E0             >
 230++E1E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 230++E1E1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 230++E1E5 41 44 44 49 >
 230++E1E9 52          >
 230++E1EA             >                org     $-1                 // alter last byte of Name just above to set
 230++E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
 230++E1EA             >
 230++E1EA D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 230++E1EC             >Prev_Ptr        defl    Heap_Ptr
 230++E1EC             >
 230++E1EC             >mirror_Ptr      defl    $
 230++E1EC             >
 230++E1EC 23 24       >                dw      Dict_Ptr + 2        // xt
 230++E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 230++E1EE             >
 230++E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 230++E1EE             >
 230++E1EE             >//              ______________________________________________________________________
 230++E1EE             >//              Dictionary part
 230++E1EE             >
 230++E1EE             >                org     Dict_Ptr
 230++2421             >
 230++2421 EC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 230++2423             >
 230++2423             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 230++2423 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 230++2423 ~           >
 230++2423 ~           >
 230++2423             >                endif           ; ok        // for other definitions it "points" the correct handler
 230++2423             >                // Use of "; ok" to suppress "warning[fwdref]"
 230++2423             >
 230++2423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 231++2423 D9                            exx
 232++2424 E1                            pop     hl
 233++2425 7D                            ld      a, l
 234++2426 D1                            pop     de
 235++2427 DD E3                         ex      (sp), ix            // filespec nul-terminated
 236++2429 DD E5                         push    ix
 237++242B E1                            pop     hl
 238++242C D9                           exx
 239++242D D5                           push    de                  // Save Return Stack pointer
 240++242E C5                           push    bc                  // Save Instruction pointer
 241++242F D9                            exx
 242++2430 CF                            rst     $08
 243++2431 A4                            db      $A4
 244++2432 18 D7                         jr      F_Open_Exit
 245++2434
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1096+ 2434
1097+ 2434
1098+ 2434              //  ______________________________________________________________________
1099+ 2434              //
1100+ 2434              // cmove    a1 a2 u --
1101+ 2434              // If u > 0, moves memory content starting at address a1 for n bytes long
1102+ 2434              // storing then starting at address addr2.
1103+ 2434              // The content of a1 is moved first. See CMOVE> also.
1104+ 2434                              New_Def CMOVE, "CMOVE", is_code, is_normal
1104+ 2434             >
1104+ 2434             >Dict_Ptr        defl    $
1104+ 2434             >
1104+ 2434             >//              ______________________________________________________________________
1104+ 2434             >//              Heap part
1104+ 2434             >
1104+ 2434             >
1104+ 2434             >                org     (Heap_Ptr & $1FFF) + $E000
1104+ E1EE             >
1104+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1104+ E1EE             >Latest_Definition defl  Heap_Ptr
1104+ E1EE             >
1104+ E1EE             >                // dummy db directives used to calculate length of namec
1104+ E1EE 43 4D 4F 56 >                db      "CMOVE"
1104+ E1F2 45          >
1104+ E1F3             >len_NFA         defl    $ - temp_NFA
1104+ E1F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1104+ E1EE             >
1104+ E1EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1104+ E1EF 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1104+ E1F3 45          >
1104+ E1F4             >                org     $-1                 // alter last byte of Name just above to set
1104+ E1F3 C5          >                db      {b $} | END_BIT     // msb as name end
1104+ E1F4             >
1104+ E1F4 E0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1104+ E1F6             >Prev_Ptr        defl    Heap_Ptr
1104+ E1F6             >
1104+ E1F6             >mirror_Ptr      defl    $
1104+ E1F6             >
1104+ E1F6 36 24       >                dw      Dict_Ptr + 2        // xt
1104+ E1F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1104+ E1F8             >
1104+ E1F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1104+ E1F8             >
1104+ E1F8             >//              ______________________________________________________________________
1104+ E1F8             >//              Dictionary part
1104+ E1F8             >
1104+ E1F8             >                org     Dict_Ptr
1104+ 2434             >
1104+ 2434 F6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1104+ 2436             >
1104+ 2436             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1104+ 2436 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1104+ 2436 ~           >
1104+ 2436 ~           >
1104+ 2436             >                endif           ; ok        // for other definitions it "points" the correct handler
1104+ 2436             >                // Use of "; ok" to suppress "warning[fwdref]"
1104+ 2436             >
1104+ 2436             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1105+ 2436 D9                           exx
1106+ 2437
1107+ 2437 C1                           pop     bc                  // bc has counter
1108+ 2438 D1                           pop     de                  // de now has dest
1109+ 2439 E1                           pop     hl                 // hl has source, save Instruction Pointer
1110+ 243A 78                           ld      a, b
1111+ 243B B1                           or      c
1112+ 243C 28 02                        jr      z, Cmove_NoMove
1113+ 243E ED B0                            ldir
1114+ 2440              Cmove_NoMove:
1115+ 2440 D9                           exx
1116+ 2441
1117+ 2441                              next
1117+ 2441 DD E9       >                jp      (ix)
1118+ 2443
1119+ 2443              //  ______________________________________________________________________
1120+ 2443              //
1121+ 2443              // cmove>    a1 a2 u --
1122+ 2443              // If u > 0, moves memory content starting at address a1 for n bytes long
1123+ 2443              // storing then starting at address addr2.
1124+ 2443              // The content of a1 is moved last. See cmove.
1125+ 2443                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1125+ 2443             >
1125+ 2443             >Dict_Ptr        defl    $
1125+ 2443             >
1125+ 2443             >//              ______________________________________________________________________
1125+ 2443             >//              Heap part
1125+ 2443             >
1125+ 2443             >
1125+ 2443             >                org     (Heap_Ptr & $1FFF) + $E000
1125+ E1F8             >
1125+ E1F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ E1F8             >Latest_Definition defl  Heap_Ptr
1125+ E1F8             >
1125+ E1F8             >                // dummy db directives used to calculate length of namec
1125+ E1F8 43 4D 4F 56 >                db      "CMOVE>"
1125+ E1FC 45 3E       >
1125+ E1FE             >len_NFA         defl    $ - temp_NFA
1125+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ E1F8             >
1125+ E1F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ E1F9 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1125+ E1FD 45 3E       >
1125+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1125+ E1FE BE          >                db      {b $} | END_BIT     // msb as name end
1125+ E1FF             >
1125+ E1FF EE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1125+ E201             >Prev_Ptr        defl    Heap_Ptr
1125+ E201             >
1125+ E201             >mirror_Ptr      defl    $
1125+ E201             >
1125+ E201 45 24       >                dw      Dict_Ptr + 2        // xt
1125+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1125+ E203             >
1125+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1125+ E203             >
1125+ E203             >//              ______________________________________________________________________
1125+ E203             >//              Dictionary part
1125+ E203             >
1125+ E203             >                org     Dict_Ptr
1125+ 2443             >
1125+ 2443 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1125+ 2445             >
1125+ 2445             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 2445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1125+ 2445 ~           >
1125+ 2445 ~           >
1125+ 2445             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 2445             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 2445             >
1125+ 2445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 2445 D9                           exx
1127+ 2446
1128+ 2446 C1                           pop     bc                  // bc has counter
1129+ 2447 D1                           pop     de                  // de has dest
1130+ 2448 E1                           pop     hl                  // hl has source, save Instruction Pointer
1131+ 2449 78                           ld      a, b
1132+ 244A B1                           or      c
1133+ 244B 28 08                        jr      z, CmoveV_NoMove
1134+ 244D EB                               ex      de, hl              // compute address to
1135+ 244E 09                               add     hl, bc              // operate backward
1136+ 244F 2B                               dec     hl
1137+ 2450 EB                               ex      de, hl
1138+ 2451 09                               add     hl, bc
1139+ 2452 2B                               dec     hl
1140+ 2453 ED B8                            lddr                        // backward
1141+ 2455              CmoveV_NoMove:
1142+ 2455 D9                           exx
1143+ 2456
1144+ 2456                              next
1144+ 2456 DD E9       >                jp      (ix)
1145+ 2458
1146+ 2458              //  ______________________________________________________________________
1147+ 2458              //
1148+ 2458              // um*      u1 u2 -- ud
1149+ 2458              // Unsigned multiplication
1150+ 2458              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1151+ 2458              // On the stack a double number is treated as two single numbers
1152+ 2458              // where DE is on the top of the stack and HL is the second from top,
1153+ 2458              // Instead, in 2VARIABLE a double number is stored as EDLH.
1154+ 2458              // this definition could use "MUL" Z80N new op-code.
1155+ 2458                              New_Def UM_MUL, "UM*", is_code, is_normal
1155+ 2458             >
1155+ 2458             >Dict_Ptr        defl    $
1155+ 2458             >
1155+ 2458             >//              ______________________________________________________________________
1155+ 2458             >//              Heap part
1155+ 2458             >
1155+ 2458             >
1155+ 2458             >                org     (Heap_Ptr & $1FFF) + $E000
1155+ E203             >
1155+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ E203             >Latest_Definition defl  Heap_Ptr
1155+ E203             >
1155+ E203             >                // dummy db directives used to calculate length of namec
1155+ E203 55 4D 2A    >                db      "UM*"
1155+ E206             >len_NFA         defl    $ - temp_NFA
1155+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ E203             >
1155+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ E204 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1155+ E207             >                org     $-1                 // alter last byte of Name just above to set
1155+ E206 AA          >                db      {b $} | END_BIT     // msb as name end
1155+ E207             >
1155+ E207 F8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1155+ E209             >Prev_Ptr        defl    Heap_Ptr
1155+ E209             >
1155+ E209             >mirror_Ptr      defl    $
1155+ E209             >
1155+ E209 5A 24       >                dw      Dict_Ptr + 2        // xt
1155+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1155+ E20B             >
1155+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1155+ E20B             >
1155+ E20B             >//              ______________________________________________________________________
1155+ E20B             >//              Dictionary part
1155+ E20B             >
1155+ E20B             >                org     Dict_Ptr
1155+ 2458             >
1155+ 2458 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1155+ 245A             >
1155+ 245A             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 245A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1155+ 245A ~           >
1155+ 245A ~           >
1155+ 245A             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 245A             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 245A             >
1155+ 245A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 245A D9                           exx
1157+ 245B D1                           pop     de                    // de has u2 operand
1158+ 245C E1                           pop     hl                    // hl has u1 operand
1159+ 245D 45                           ld      b, l
1160+ 245E 4B                           ld      c, e
1161+ 245F 5D                           ld      e, l
1162+ 2460 6A                           ld      l, d
1163+ 2461 E5                           push    hl
1164+ 2462 69                           ld      l, c
1165+ 2463 ED 30                        mul
1166+ 2465 EB                           ex      de, hl
1167+ 2466 ED 30                        mul
1168+ 2468 AF                           xor     a
1169+ 2469 19                           add     hl, de
1170+ 246A 8F                           adc     a
1171+ 246B 59                           ld      e, c
1172+ 246C 50                           ld      d, b
1173+ 246D ED 30                        mul
1174+ 246F 47                           ld      b, a
1175+ 2470 4C                           ld      c, h
1176+ 2471 7A                           ld      a, d
1177+ 2472 85                           add     l
1178+ 2473 67                           ld      h, a
1179+ 2474 6B                           ld      l, e
1180+ 2475 D1                           pop     de
1181+ 2476 ED 30                        mul
1182+ 2478 EB                           ex      de, hl
1183+ 2479 ED 4A                        adc     hl, bc
1184+ 247B D5                           push    de
1185+ 247C E5                           push    hl
1186+ 247D D9                           exx
1187+ 247E                              next
1187+ 247E DD E9       >                jp      (ix)
1188+ 2480
1189+ 2480              //  ______________________________________________________________________
1190+ 2480              //
1191+ 2480              // um/mod      ud u1 -- q r
1192+ 2480              // divides ud into u1 giving quotient q and remainder r
1193+ 2480              // algorithm takes 16 bit at a time starting from msb
1194+ 2480              // DE grows from lsb upward with quotient result
1195+ 2480              // HL keeps the remainder at each stage of division
1196+ 2480              // each loop 'lowers' the next binary digit to form the current dividend
1197+ 2480                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1197+ 2480             >
1197+ 2480             >Dict_Ptr        defl    $
1197+ 2480             >
1197+ 2480             >//              ______________________________________________________________________
1197+ 2480             >//              Heap part
1197+ 2480             >
1197+ 2480             >
1197+ 2480             >                org     (Heap_Ptr & $1FFF) + $E000
1197+ E20B             >
1197+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ E20B             >Latest_Definition defl  Heap_Ptr
1197+ E20B             >
1197+ E20B             >                // dummy db directives used to calculate length of namec
1197+ E20B 55 4D 2F 4D >                db      "UM/MOD"
1197+ E20F 4F 44       >
1197+ E211             >len_NFA         defl    $ - temp_NFA
1197+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ E20B             >
1197+ E20B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ E20C 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1197+ E210 4F 44       >
1197+ E212             >                org     $-1                 // alter last byte of Name just above to set
1197+ E211 C4          >                db      {b $} | END_BIT     // msb as name end
1197+ E212             >
1197+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1197+ E214             >Prev_Ptr        defl    Heap_Ptr
1197+ E214             >
1197+ E214             >mirror_Ptr      defl    $
1197+ E214             >
1197+ E214 82 24       >                dw      Dict_Ptr + 2        // xt
1197+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1197+ E216             >
1197+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1197+ E216             >
1197+ E216             >//              ______________________________________________________________________
1197+ E216             >//              Dictionary part
1197+ E216             >
1197+ E216             >                org     Dict_Ptr
1197+ 2480             >
1197+ 2480 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1197+ 2482             >
1197+ 2482             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 2482 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1197+ 2482 ~           >
1197+ 2482 ~           >
1197+ 2482             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 2482             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 2482             >
1197+ 2482             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 2482 D9                           exx
1199+ 2483 C1                           pop     bc                      // divisor
1200+ 2484
1201+ 2484 E1                           pop     hl                      // < high part
1202+ 2485 D1                           pop     de                      // < low part and
1203+ 2486
1204+ 2486 7D                           ld      a, l                    // check without changing arguments
1205+ 2487 91                           sub     c                       // if divisor is greater than high part
1206+ 2488 7C                           ld      a, h                    // so quotient will be in range
1207+ 2489 98                           sbc     a, b
1208+ 248A 30 20                        jr      nc, Um_DivMod_OutOfRange
1209+ 248C 3E 10                            ld      a, 16
1210+ 248E              Um_DivMod_Loop:
1211+ 248E CB 23                                sla     e
1212+ 2490 CB 12                                rl      d
1213+ 2492 ED 6A                                adc     hl, hl
1214+ 2494 30 05                                jr      nc, Um_DivMod_Carry
1215+ 2496 A7                                       and     a
1216+ 2497 ED 42                                    sbc     hl, bc
1217+ 2499 18 07                                jr      Um_DivMod_Endif    // else
1218+ 249B              Um_DivMod_Carry:
1219+ 249B A7                                       and     a
1220+ 249C ED 42                                    sbc     hl, bc
1221+ 249E 30 02                                    jr      nc, Um_DivMod_Endif
1222+ 24A0 09                                           add     hl, bc
1223+ 24A1 1B                                           dec     de
1224+ 24A2              Um_DivMod_Endif:                                   // endif
1225+ 24A2 13                                   inc     de
1226+ 24A3 3D                                   dec     a
1227+ 24A4 20 E8                            jr      nz, Um_DivMod_Loop
1228+ 24A6 EB                               ex      de, hl
1229+ 24A7              Um_DivMod_Bailout:
1230+ 24A7 D5                               push    de                  // de := remanider
1231+ 24A8 E5                               push    hl                  // hl := quotient
1232+ 24A9 D9                               exx
1233+ 24AA                                  next
1233+ 24AA DD E9       >                jp      (ix)
1234+ 24AC
1235+ 24AC              Um_DivMod_OutOfRange:
1236+ 24AC 21 FF FF                     ld      hl, -1
1237+ 24AF 54                           ld      d, h
1238+ 24B0 5D                           ld      e, l
1239+ 24B1 18 F4                        jr      Um_DivMod_Bailout
1240+ 24B3
1241+ 24B3              //  ______________________________________________________________________
1242+ 24B3              //
1243+ 24B3              // and          n1 n2 -- n3
1244+ 24B3              // bit logical AND. Returns n3 as n1 & n2
1245+ 24B3                              New_Def AND_OP, "AND", is_code, is_normal
1245+ 24B3             >
1245+ 24B3             >Dict_Ptr        defl    $
1245+ 24B3             >
1245+ 24B3             >//              ______________________________________________________________________
1245+ 24B3             >//              Heap part
1245+ 24B3             >
1245+ 24B3             >
1245+ 24B3             >                org     (Heap_Ptr & $1FFF) + $E000
1245+ E216             >
1245+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ E216             >Latest_Definition defl  Heap_Ptr
1245+ E216             >
1245+ E216             >                // dummy db directives used to calculate length of namec
1245+ E216 41 4E 44    >                db      "AND"
1245+ E219             >len_NFA         defl    $ - temp_NFA
1245+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ E216             >
1245+ E216 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ E217 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1245+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1245+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1245+ E21A             >
1245+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1245+ E21C             >Prev_Ptr        defl    Heap_Ptr
1245+ E21C             >
1245+ E21C             >mirror_Ptr      defl    $
1245+ E21C             >
1245+ E21C B5 24       >                dw      Dict_Ptr + 2        // xt
1245+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1245+ E21E             >
1245+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1245+ E21E             >
1245+ E21E             >//              ______________________________________________________________________
1245+ E21E             >//              Dictionary part
1245+ E21E             >
1245+ E21E             >                org     Dict_Ptr
1245+ 24B3             >
1245+ 24B3 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1245+ 24B5             >
1245+ 24B5             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 24B5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1245+ 24B5 ~           >
1245+ 24B5 ~           >
1245+ 24B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 24B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 24B5             >
1245+ 24B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 24B5 D9                           exx
1247+ 24B6 D1                           pop     de
1248+ 24B7 E1                           pop     hl
1249+ 24B8 7B                           ld      a, e
1250+ 24B9 A5                           and     l
1251+ 24BA 6F                           ld      l, a
1252+ 24BB 7A                           ld      a, d
1253+ 24BC A4                           and     h
1254+ 24BD              Boolean_exit:
1255+ 24BD 67                           ld      h, a
1256+ 24BE E5                           push    hl
1257+ 24BF D9                           exx
1258+ 24C0                              next
1258+ 24C0 DD E9       >                jp      (ix)
1259+ 24C2
1260+ 24C2              //  ______________________________________________________________________
1261+ 24C2              //
1262+ 24C2              // or           n1 n2 -- n3
1263+ 24C2              // bit logical OR. Returns n3 as n1 | n2
1264+ 24C2                              New_Def OR_OP, "OR", is_code, is_normal
1264+ 24C2             >
1264+ 24C2             >Dict_Ptr        defl    $
1264+ 24C2             >
1264+ 24C2             >//              ______________________________________________________________________
1264+ 24C2             >//              Heap part
1264+ 24C2             >
1264+ 24C2             >
1264+ 24C2             >                org     (Heap_Ptr & $1FFF) + $E000
1264+ E21E             >
1264+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ E21E             >Latest_Definition defl  Heap_Ptr
1264+ E21E             >
1264+ E21E             >                // dummy db directives used to calculate length of namec
1264+ E21E 4F 52       >                db      "OR"
1264+ E220             >len_NFA         defl    $ - temp_NFA
1264+ E220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ E21E             >
1264+ E21E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ E21F 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1264+ E221             >                org     $-1                 // alter last byte of Name just above to set
1264+ E220 D2          >                db      {b $} | END_BIT     // msb as name end
1264+ E221             >
1264+ E221 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1264+ E223             >Prev_Ptr        defl    Heap_Ptr
1264+ E223             >
1264+ E223             >mirror_Ptr      defl    $
1264+ E223             >
1264+ E223 C4 24       >                dw      Dict_Ptr + 2        // xt
1264+ E225             >Heap_Ptr        defl    $ - $E000           // save current HP
1264+ E225             >
1264+ E225             >Current_HP      defl  $ - $E000             // used to set HP once!
1264+ E225             >
1264+ E225             >//              ______________________________________________________________________
1264+ E225             >//              Dictionary part
1264+ E225             >
1264+ E225             >                org     Dict_Ptr
1264+ 24C2             >
1264+ 24C2 23 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1264+ 24C4             >
1264+ 24C4             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 24C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1264+ 24C4 ~           >
1264+ 24C4 ~           >
1264+ 24C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 24C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 24C4             >
1264+ 24C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 24C4 D9                           exx
1266+ 24C5 D1                           pop     de
1267+ 24C6 E1                           pop     hl
1268+ 24C7 7B                           ld      a, e
1269+ 24C8 B5                           or      l
1270+ 24C9 6F                           ld      l, a
1271+ 24CA 7A                           ld      a, d
1272+ 24CB B4                           or      h
1273+ 24CC 18 EF                        jr      Boolean_exit
1274+ 24CE                        //    ld      h, a
1275+ 24CE                        //    push    hl
1276+ 24CE                        //    exx
1277+ 24CE                        //    next
1278+ 24CE
1279+ 24CE              //  ______________________________________________________________________
1280+ 24CE              //
1281+ 24CE              // xor          n1 n2 -- n3
1282+ 24CE              // bit logical OR. Returns n3 as n1 ^ n2
1283+ 24CE                              New_Def XOR_OP, "XOR", is_code, is_normal
1283+ 24CE             >
1283+ 24CE             >Dict_Ptr        defl    $
1283+ 24CE             >
1283+ 24CE             >//              ______________________________________________________________________
1283+ 24CE             >//              Heap part
1283+ 24CE             >
1283+ 24CE             >
1283+ 24CE             >                org     (Heap_Ptr & $1FFF) + $E000
1283+ E225             >
1283+ E225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ E225             >Latest_Definition defl  Heap_Ptr
1283+ E225             >
1283+ E225             >                // dummy db directives used to calculate length of namec
1283+ E225 58 4F 52    >                db      "XOR"
1283+ E228             >len_NFA         defl    $ - temp_NFA
1283+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ E225             >
1283+ E225 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ E226 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1283+ E229             >                org     $-1                 // alter last byte of Name just above to set
1283+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1283+ E229             >
1283+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1283+ E22B             >Prev_Ptr        defl    Heap_Ptr
1283+ E22B             >
1283+ E22B             >mirror_Ptr      defl    $
1283+ E22B             >
1283+ E22B D0 24       >                dw      Dict_Ptr + 2        // xt
1283+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1283+ E22D             >
1283+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1283+ E22D             >
1283+ E22D             >//              ______________________________________________________________________
1283+ E22D             >//              Dictionary part
1283+ E22D             >
1283+ E22D             >                org     Dict_Ptr
1283+ 24CE             >
1283+ 24CE 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1283+ 24D0             >
1283+ 24D0             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 24D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1283+ 24D0 ~           >
1283+ 24D0 ~           >
1283+ 24D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 24D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 24D0             >
1283+ 24D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 24D0 D9                           exx
1285+ 24D1 D1                           pop     de
1286+ 24D2 E1                           pop     hl
1287+ 24D3 7B                           ld      a, e
1288+ 24D4 AD                           xor     l
1289+ 24D5 6F                           ld      l, a
1290+ 24D6 7A                           ld      a, d
1291+ 24D7 AC                           xor     h
1292+ 24D8 18 E3                        jr      Boolean_exit
1293+ 24DA                        //    ld      h, a
1294+ 24DA                        //    push    hl
1295+ 24DA                        //    exx
1296+ 24DA                        //    next
1297+ 24DA
1298+ 24DA              //  ______________________________________________________________________
1299+ 24DA              //
1300+ 24DA              // sp@      -- a
1301+ 24DA              // returns on top of stack the value of SP before execution
1302+ 24DA                              New_Def SPFETCH, "SP@", is_code, is_normal
1302+ 24DA             >
1302+ 24DA             >Dict_Ptr        defl    $
1302+ 24DA             >
1302+ 24DA             >//              ______________________________________________________________________
1302+ 24DA             >//              Heap part
1302+ 24DA             >
1302+ 24DA             >
1302+ 24DA             >                org     (Heap_Ptr & $1FFF) + $E000
1302+ E22D             >
1302+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ E22D             >Latest_Definition defl  Heap_Ptr
1302+ E22D             >
1302+ E22D             >                // dummy db directives used to calculate length of namec
1302+ E22D 53 50 40    >                db      "SP@"
1302+ E230             >len_NFA         defl    $ - temp_NFA
1302+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ E22D             >
1302+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ E22E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1302+ E231             >                org     $-1                 // alter last byte of Name just above to set
1302+ E230 C0          >                db      {b $} | END_BIT     // msb as name end
1302+ E231             >
1302+ E231 25 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1302+ E233             >Prev_Ptr        defl    Heap_Ptr
1302+ E233             >
1302+ E233             >mirror_Ptr      defl    $
1302+ E233             >
1302+ E233 DC 24       >                dw      Dict_Ptr + 2        // xt
1302+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1302+ E235             >
1302+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1302+ E235             >
1302+ E235             >//              ______________________________________________________________________
1302+ E235             >//              Dictionary part
1302+ E235             >
1302+ E235             >                org     Dict_Ptr
1302+ 24DA             >
1302+ 24DA 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1302+ 24DC             >
1302+ 24DC             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 24DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 24DC ~           >
1302+ 24DC ~           >
1302+ 24DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 24DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 24DC             >
1302+ 24DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 24DC
1304+ 24DC 21 00 00                     ld      hl, 0
1305+ 24DF 39                           add     hl, sp
1306+ 24E0
1307+ 24E0                              psh1
1307+ 24E0 E5          >                push    hl
1307+ 24E1 DD E9       >                jp      (ix)
1308+ 24E3
1309+ 24E3              //  ______________________________________________________________________
1310+ 24E3              //
1311+ 24E3              // sp!      a --
1312+ 24E3              // restore SP to the initial value passed
1313+ 24E3              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1314+ 24E3                              New_Def SPSTORE, "SP!", is_code, is_normal
1314+ 24E3             >
1314+ 24E3             >Dict_Ptr        defl    $
1314+ 24E3             >
1314+ 24E3             >//              ______________________________________________________________________
1314+ 24E3             >//              Heap part
1314+ 24E3             >
1314+ 24E3             >
1314+ 24E3             >                org     (Heap_Ptr & $1FFF) + $E000
1314+ E235             >
1314+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ E235             >Latest_Definition defl  Heap_Ptr
1314+ E235             >
1314+ E235             >                // dummy db directives used to calculate length of namec
1314+ E235 53 50 21    >                db      "SP!"
1314+ E238             >len_NFA         defl    $ - temp_NFA
1314+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ E235             >
1314+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ E236 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1314+ E239             >                org     $-1                 // alter last byte of Name just above to set
1314+ E238 A1          >                db      {b $} | END_BIT     // msb as name end
1314+ E239             >
1314+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1314+ E23B             >Prev_Ptr        defl    Heap_Ptr
1314+ E23B             >
1314+ E23B             >mirror_Ptr      defl    $
1314+ E23B             >
1314+ E23B E5 24       >                dw      Dict_Ptr + 2        // xt
1314+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1314+ E23D             >
1314+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1314+ E23D             >
1314+ E23D             >//              ______________________________________________________________________
1314+ E23D             >//              Dictionary part
1314+ E23D             >
1314+ E23D             >                org     Dict_Ptr
1314+ 24E3             >
1314+ 24E3 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1314+ 24E5             >
1314+ 24E5             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 24E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 24E5 ~           >
1314+ 24E5 ~           >
1314+ 24E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 24E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 24E5             >
1314+ 24E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 24E5 E1                           pop     hl
1316+ 24E6 F9                           ld      sp, hl
1317+ 24E7
1318+ 24E7                              next
1318+ 24E7 DD E9       >                jp      (ix)
1319+ 24E9
1320+ 24E9              //  ______________________________________________________________________
1321+ 24E9              //
1322+ 24E9              // rp@      -- a
1323+ 24E9              // returns on top of stack the value of Return-Pointer
1324+ 24E9                              New_Def RPFETCH, "RP@", is_code, is_normal
1324+ 24E9             >
1324+ 24E9             >Dict_Ptr        defl    $
1324+ 24E9             >
1324+ 24E9             >//              ______________________________________________________________________
1324+ 24E9             >//              Heap part
1324+ 24E9             >
1324+ 24E9             >
1324+ 24E9             >                org     (Heap_Ptr & $1FFF) + $E000
1324+ E23D             >
1324+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ E23D             >Latest_Definition defl  Heap_Ptr
1324+ E23D             >
1324+ E23D             >                // dummy db directives used to calculate length of namec
1324+ E23D 52 50 40    >                db      "RP@"
1324+ E240             >len_NFA         defl    $ - temp_NFA
1324+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ E23D             >
1324+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ E23E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1324+ E241             >                org     $-1                 // alter last byte of Name just above to set
1324+ E240 C0          >                db      {b $} | END_BIT     // msb as name end
1324+ E241             >
1324+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1324+ E243             >Prev_Ptr        defl    Heap_Ptr
1324+ E243             >
1324+ E243             >mirror_Ptr      defl    $
1324+ E243             >
1324+ E243 EB 24       >                dw      Dict_Ptr + 2        // xt
1324+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1324+ E245             >
1324+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1324+ E245             >
1324+ E245             >//              ______________________________________________________________________
1324+ E245             >//              Dictionary part
1324+ E245             >
1324+ E245             >                org     Dict_Ptr
1324+ 24E9             >
1324+ 24E9 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1324+ 24EB             >
1324+ 24EB             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 24EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1324+ 24EB ~           >
1324+ 24EB ~           >
1324+ 24EB             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 24EB             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 24EB             >
1324+ 24EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 24EB
1326+ 24EB                              // *** ldhlrp
1327+ 24EB                              // *** ex      de, hl
1328+ 24EB D5                           push de
1329+ 24EC
1330+ 24EC                              next
1330+ 24EC DD E9       >                jp      (ix)
1331+ 24EE
1332+ 24EE              //  ______________________________________________________________________
1333+ 24EE              //
1334+ 24EE              // rp!      a --
1335+ 24EE              // restore RP to the initial value passed
1336+ 24EE              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1337+ 24EE                              New_Def RPSTORE, "RP!", is_code, is_normal
1337+ 24EE             >
1337+ 24EE             >Dict_Ptr        defl    $
1337+ 24EE             >
1337+ 24EE             >//              ______________________________________________________________________
1337+ 24EE             >//              Heap part
1337+ 24EE             >
1337+ 24EE             >
1337+ 24EE             >                org     (Heap_Ptr & $1FFF) + $E000
1337+ E245             >
1337+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ E245             >Latest_Definition defl  Heap_Ptr
1337+ E245             >
1337+ E245             >                // dummy db directives used to calculate length of namec
1337+ E245 52 50 21    >                db      "RP!"
1337+ E248             >len_NFA         defl    $ - temp_NFA
1337+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ E245             >
1337+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ E246 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1337+ E249             >                org     $-1                 // alter last byte of Name just above to set
1337+ E248 A1          >                db      {b $} | END_BIT     // msb as name end
1337+ E249             >
1337+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1337+ E24B             >Prev_Ptr        defl    Heap_Ptr
1337+ E24B             >
1337+ E24B             >mirror_Ptr      defl    $
1337+ E24B             >
1337+ E24B F0 24       >                dw      Dict_Ptr + 2        // xt
1337+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1337+ E24D             >
1337+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1337+ E24D             >
1337+ E24D             >//              ______________________________________________________________________
1337+ E24D             >//              Dictionary part
1337+ E24D             >
1337+ E24D             >                org     Dict_Ptr
1337+ 24EE             >
1337+ 24EE 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1337+ 24F0             >
1337+ 24F0             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 24F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1337+ 24F0 ~           >
1337+ 24F0 ~           >
1337+ 24F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 24F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 24F0             >
1337+ 24F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 24F0 D1                           pop     de
1339+ 24F1                              // *** ex      de, hl
1340+ 24F1                              // *** ldrphl
1341+ 24F1
1342+ 24F1                              next
1342+ 24F1 DD E9       >                jp      (ix)
1343+ 24F3
1344+ 24F3              //  ______________________________________________________________________
1345+ 24F3              //
1346+ 24F3              // exit       --
1347+ 24F3              // exits back to the caller word
1348+ 24F3                              New_Def EXIT, "EXIT", is_code, is_normal
1348+ 24F3             >
1348+ 24F3             >Dict_Ptr        defl    $
1348+ 24F3             >
1348+ 24F3             >//              ______________________________________________________________________
1348+ 24F3             >//              Heap part
1348+ 24F3             >
1348+ 24F3             >
1348+ 24F3             >                org     (Heap_Ptr & $1FFF) + $E000
1348+ E24D             >
1348+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1348+ E24D             >Latest_Definition defl  Heap_Ptr
1348+ E24D             >
1348+ E24D             >                // dummy db directives used to calculate length of namec
1348+ E24D 45 58 49 54 >                db      "EXIT"
1348+ E251             >len_NFA         defl    $ - temp_NFA
1348+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1348+ E24D             >
1348+ E24D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1348+ E24E 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1348+ E252             >                org     $-1                 // alter last byte of Name just above to set
1348+ E251 D4          >                db      {b $} | END_BIT     // msb as name end
1348+ E252             >
1348+ E252 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1348+ E254             >Prev_Ptr        defl    Heap_Ptr
1348+ E254             >
1348+ E254             >mirror_Ptr      defl    $
1348+ E254             >
1348+ E254 F5 24       >                dw      Dict_Ptr + 2        // xt
1348+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1348+ E256             >
1348+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1348+ E256             >
1348+ E256             >//              ______________________________________________________________________
1348+ E256             >//              Dictionary part
1348+ E256             >
1348+ E256             >                org     Dict_Ptr
1348+ 24F3             >
1348+ 24F3 54 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1348+ 24F5             >
1348+ 24F5             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1348+ 24F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1348+ 24F5 ~           >
1348+ 24F5 ~           >
1348+ 24F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1348+ 24F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1348+ 24F5             >
1348+ 24F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1349+ 24F5 EB                           ex      de, hl
1350+ 24F6                              // *** ldhlrp                      // Get Return Stack Pointer
1351+ 24F6 4E                           ld      c, (hl)             // pop Instruction Pointer
1352+ 24F7 23                           inc     hl                  // from Return Stack
1353+ 24F8 46                           ld      b, (hl)
1354+ 24F9 23                           inc     hl
1355+ 24FA                              // *** ldrphl                      // Set Return Stack Pointer
1356+ 24FA EB                           ex      de, hl
1357+ 24FB                              next
1357+ 24FB DD E9       >                jp      (ix)
1358+ 24FD
1359+ 24FD              //  ______________________________________________________________________
1360+ 24FD              //
1361+ 24FD              // lastl      --
1362+ 24FD              // exits back to the caller word
1363+ 24FD              //              New_Def EXIT, "LASTL", is_code, is_normal
1364+ 24FD              //              push    de
1365+ 24FD              //              ex      de, hl //**
1366+ 24FD              //              // *** ldhlrp                      // Get Return Stack Pointer
1367+ 24FD              //              ld      e, (hl)             // pop Instruction Pointer
1368+ 24FD              //              inc     hl                  // from Return Stack
1369+ 24FD              //              ld      d, (hl)
1370+ 24FD              //              inc     hl
1371+ 24FD              //              ld      (hl), e
1372+ 24FD              //              inc     hl
1373+ 24FD              //              ld      (hl), d
1374+ 24FD              //              add     hl, -3
1375+ 24FD              //              pop     de
1376+ 24FD              //              next
1377+ 24FD
1378+ 24FD              //  ______________________________________________________________________
1379+ 24FD              //
1380+ 24FD              // >r      n --
1381+ 24FD              // pop from calculator-stack and push into return-stack
1382+ 24FD                              New_Def TO_R, ">R", is_code, is_normal
1382+ 24FD             >
1382+ 24FD             >Dict_Ptr        defl    $
1382+ 24FD             >
1382+ 24FD             >//              ______________________________________________________________________
1382+ 24FD             >//              Heap part
1382+ 24FD             >
1382+ 24FD             >
1382+ 24FD             >                org     (Heap_Ptr & $1FFF) + $E000
1382+ E256             >
1382+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1382+ E256             >Latest_Definition defl  Heap_Ptr
1382+ E256             >
1382+ E256             >                // dummy db directives used to calculate length of namec
1382+ E256 3E 52       >                db      ">R"
1382+ E258             >len_NFA         defl    $ - temp_NFA
1382+ E258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1382+ E256             >
1382+ E256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1382+ E257 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1382+ E259             >                org     $-1                 // alter last byte of Name just above to set
1382+ E258 D2          >                db      {b $} | END_BIT     // msb as name end
1382+ E259             >
1382+ E259 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1382+ E25B             >Prev_Ptr        defl    Heap_Ptr
1382+ E25B             >
1382+ E25B             >mirror_Ptr      defl    $
1382+ E25B             >
1382+ E25B FF 24       >                dw      Dict_Ptr + 2        // xt
1382+ E25D             >Heap_Ptr        defl    $ - $E000           // save current HP
1382+ E25D             >
1382+ E25D             >Current_HP      defl  $ - $E000             // used to set HP once!
1382+ E25D             >
1382+ E25D             >//              ______________________________________________________________________
1382+ E25D             >//              Dictionary part
1382+ E25D             >
1382+ E25D             >                org     Dict_Ptr
1382+ 24FD             >
1382+ 24FD 5B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1382+ 24FF             >
1382+ 24FF             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1382+ 24FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1382+ 24FF ~           >
1382+ 24FF ~           >
1382+ 24FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1382+ 24FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1382+ 24FF             >
1382+ 24FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1383+ 24FF E1                           pop     hl
1384+ 2500 EB                           ex      de, hl //**
1385+ 2501                              // *** ldhlrp
1386+ 2501 2B                           dec     hl
1387+ 2502 72                           ld      (hl), d             // store current TOS
1388+ 2503 2B                           dec     hl                  // to Return Stack
1389+ 2504 73                           ld      (hl), e
1390+ 2505                              // *** ldrphl
1391+ 2505 EB                           ex      de, hl //**
1392+ 2506                              next
1392+ 2506 DD E9       >                jp      (ix)
1393+ 2508
1394+ 2508              //  ______________________________________________________________________
1395+ 2508              //
1396+ 2508              // r>      -- n
1397+ 2508              // pop from return-stack and push into calculator-stack
1398+ 2508                              New_Def R_TO, "R>", is_code, is_normal
1398+ 2508             >
1398+ 2508             >Dict_Ptr        defl    $
1398+ 2508             >
1398+ 2508             >//              ______________________________________________________________________
1398+ 2508             >//              Heap part
1398+ 2508             >
1398+ 2508             >
1398+ 2508             >                org     (Heap_Ptr & $1FFF) + $E000
1398+ E25D             >
1398+ E25D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1398+ E25D             >Latest_Definition defl  Heap_Ptr
1398+ E25D             >
1398+ E25D             >                // dummy db directives used to calculate length of namec
1398+ E25D 52 3E       >                db      "R>"
1398+ E25F             >len_NFA         defl    $ - temp_NFA
1398+ E25F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1398+ E25D             >
1398+ E25D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1398+ E25E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1398+ E260             >                org     $-1                 // alter last byte of Name just above to set
1398+ E25F BE          >                db      {b $} | END_BIT     // msb as name end
1398+ E260             >
1398+ E260 56 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1398+ E262             >Prev_Ptr        defl    Heap_Ptr
1398+ E262             >
1398+ E262             >mirror_Ptr      defl    $
1398+ E262             >
1398+ E262 0A 25       >                dw      Dict_Ptr + 2        // xt
1398+ E264             >Heap_Ptr        defl    $ - $E000           // save current HP
1398+ E264             >
1398+ E264             >Current_HP      defl  $ - $E000             // used to set HP once!
1398+ E264             >
1398+ E264             >//              ______________________________________________________________________
1398+ E264             >//              Dictionary part
1398+ E264             >
1398+ E264             >                org     Dict_Ptr
1398+ 2508             >
1398+ 2508 62 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1398+ 250A             >
1398+ 250A             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1398+ 250A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1398+ 250A ~           >
1398+ 250A ~           >
1398+ 250A             >                endif           ; ok        // for other definitions it "points" the correct handler
1398+ 250A             >                // Use of "; ok" to suppress "warning[fwdref]"
1398+ 250A             >
1398+ 250A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1399+ 250A
1400+ 250A EB                           ex      de, hl //**
1401+ 250B                              // *** ldhlrp
1402+ 250B 5E                           ld      e, (hl)             // retrieve from Return Stack
1403+ 250C 23                           inc     hl
1404+ 250D 56                           ld      d, (hl)
1405+ 250E 23                           inc     hl
1406+ 250F                              // *** ldrphl
1407+ 250F EB                           ex      de, hl //**
1408+ 2510 E5                           push    hl
1409+ 2511                              next
1409+ 2511 DD E9       >                jp      (ix)
1410+ 2513
1411+ 2513              //  ______________________________________________________________________
1412+ 2513              //
1413+ 2513              // r@           -- n
1414+ 2513              // return on top of stack the value of top of return-stack
1415+ 2513              // Since this is the same as I, we alter R's CFA to jump there
1416+ 2513                              New_Def R_OP, "R@", is_code, is_normal
1416+ 2513             >
1416+ 2513             >Dict_Ptr        defl    $
1416+ 2513             >
1416+ 2513             >//              ______________________________________________________________________
1416+ 2513             >//              Heap part
1416+ 2513             >
1416+ 2513             >
1416+ 2513             >                org     (Heap_Ptr & $1FFF) + $E000
1416+ E264             >
1416+ E264             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1416+ E264             >Latest_Definition defl  Heap_Ptr
1416+ E264             >
1416+ E264             >                // dummy db directives used to calculate length of namec
1416+ E264 52 40       >                db      "R@"
1416+ E266             >len_NFA         defl    $ - temp_NFA
1416+ E266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1416+ E264             >
1416+ E264 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1416+ E265 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1416+ E267             >                org     $-1                 // alter last byte of Name just above to set
1416+ E266 C0          >                db      {b $} | END_BIT     // msb as name end
1416+ E267             >
1416+ E267 5D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1416+ E269             >Prev_Ptr        defl    Heap_Ptr
1416+ E269             >
1416+ E269             >mirror_Ptr      defl    $
1416+ E269             >
1416+ E269 15 25       >                dw      Dict_Ptr + 2        // xt
1416+ E26B             >Heap_Ptr        defl    $ - $E000           // save current HP
1416+ E26B             >
1416+ E26B             >Current_HP      defl  $ - $E000             // used to set HP once!
1416+ E26B             >
1416+ E26B             >//              ______________________________________________________________________
1416+ E26B             >//              Dictionary part
1416+ E26B             >
1416+ E26B             >                org     Dict_Ptr
1416+ 2513             >
1416+ 2513 69 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1416+ 2515             >
1416+ 2515             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1416+ 2515 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1416+ 2515 ~           >
1416+ 2515 ~           >
1416+ 2515             >                endif           ; ok        // for other definitions it "points" the correct handler
1416+ 2515             >                // Use of "; ok" to suppress "warning[fwdref]"
1416+ 2515             >
1416+ 2515             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1417+ 2515                          //  Behave  I_Ptr
1418+ 2515 C3 D4 20                     jp      I_Ptr
1419+ 2518
1420+ 2518              //  ______________________________________________________________________
1421+ 2518              //
1422+ 2518              // r            -- n
1423+ 2518              // return on top of stack the value of top of return-stack
1424+ 2518              // Since this is the same as I, we alter R's CFA to jump there
1425+ 2518              //              New_Def R_OLD, "R", is_code, is_normal
1426+ 2518              //              jp      I_Ptr
1427+ 2518
1428+ 2518              //  ______________________________________________________________________
1429+ 2518              //
1430+ 2518              // 0=           n -- f
1431+ 2518              // true (non zero) if n is zero, false (0) elsewere
1432+ 2518                              New_Def ZEQUAL, "0=", is_code, is_normal
1432+ 2518             >
1432+ 2518             >Dict_Ptr        defl    $
1432+ 2518             >
1432+ 2518             >//              ______________________________________________________________________
1432+ 2518             >//              Heap part
1432+ 2518             >
1432+ 2518             >
1432+ 2518             >                org     (Heap_Ptr & $1FFF) + $E000
1432+ E26B             >
1432+ E26B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ E26B             >Latest_Definition defl  Heap_Ptr
1432+ E26B             >
1432+ E26B             >                // dummy db directives used to calculate length of namec
1432+ E26B 30 3D       >                db      "0="
1432+ E26D             >len_NFA         defl    $ - temp_NFA
1432+ E26D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ E26B             >
1432+ E26B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ E26C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1432+ E26E             >                org     $-1                 // alter last byte of Name just above to set
1432+ E26D BD          >                db      {b $} | END_BIT     // msb as name end
1432+ E26E             >
1432+ E26E 64 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1432+ E270             >Prev_Ptr        defl    Heap_Ptr
1432+ E270             >
1432+ E270             >mirror_Ptr      defl    $
1432+ E270             >
1432+ E270 1A 25       >                dw      Dict_Ptr + 2        // xt
1432+ E272             >Heap_Ptr        defl    $ - $E000           // save current HP
1432+ E272             >
1432+ E272             >Current_HP      defl  $ - $E000             // used to set HP once!
1432+ E272             >
1432+ E272             >//              ______________________________________________________________________
1432+ E272             >//              Dictionary part
1432+ E272             >
1432+ E272             >                org     Dict_Ptr
1432+ 2518             >
1432+ 2518 70 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1432+ 251A             >
1432+ 251A             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 251A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1432+ 251A ~           >
1432+ 251A ~           >
1432+ 251A             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 251A             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 251A             >
1432+ 251A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 251A              Zero_Equal:
1434+ 251A E1                           pop     hl
1435+ 251B 7D                           ld      a, l
1436+ 251C B4                           or      h
1437+ 251D 21 00 00                     ld      hl, FALSE_FLAG
1438+ 2520 20 01                        jr      nz, ZEqual_Skip
1439+ 2522 2B                               dec     hl
1440+ 2523              ZEqual_Skip:
1441+ 2523                              psh1
1441+ 2523 E5          >                push    hl
1441+ 2524 DD E9       >                jp      (ix)
1442+ 2526
1443+ 2526              //  ______________________________________________________________________
1444+ 2526              //
1445+ 2526              // not         a1 -- a2
1446+ 2526              // increment by 2 top of stack
1447+ 2526                              New_Def NOT_OP, "NOT", is_code, is_normal
1447+ 2526             >
1447+ 2526             >Dict_Ptr        defl    $
1447+ 2526             >
1447+ 2526             >//              ______________________________________________________________________
1447+ 2526             >//              Heap part
1447+ 2526             >
1447+ 2526             >
1447+ 2526             >                org     (Heap_Ptr & $1FFF) + $E000
1447+ E272             >
1447+ E272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1447+ E272             >Latest_Definition defl  Heap_Ptr
1447+ E272             >
1447+ E272             >                // dummy db directives used to calculate length of namec
1447+ E272 4E 4F 54    >                db      "NOT"
1447+ E275             >len_NFA         defl    $ - temp_NFA
1447+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1447+ E272             >
1447+ E272 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1447+ E273 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1447+ E276             >                org     $-1                 // alter last byte of Name just above to set
1447+ E275 D4          >                db      {b $} | END_BIT     // msb as name end
1447+ E276             >
1447+ E276 6B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1447+ E278             >Prev_Ptr        defl    Heap_Ptr
1447+ E278             >
1447+ E278             >mirror_Ptr      defl    $
1447+ E278             >
1447+ E278 28 25       >                dw      Dict_Ptr + 2        // xt
1447+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1447+ E27A             >
1447+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1447+ E27A             >
1447+ E27A             >//              ______________________________________________________________________
1447+ E27A             >//              Dictionary part
1447+ E27A             >
1447+ E27A             >                org     Dict_Ptr
1447+ 2526             >
1447+ 2526 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1447+ 2528             >
1447+ 2528             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1447+ 2528 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1447+ 2528 ~           >
1447+ 2528 ~           >
1447+ 2528             >                endif           ; ok        // for other definitions it "points" the correct handler
1447+ 2528             >                // Use of "; ok" to suppress "warning[fwdref]"
1447+ 2528             >
1447+ 2528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1448+ 2528                          //  Behave  Zero_Equal
1449+ 2528 C3 1A 25                     jp      Zero_Equal
1450+ 252B
1451+ 252B              //  ______________________________________________________________________
1452+ 252B              //
1453+ 252B              // 0<           n -- f
1454+ 252B              // true (non zero) if n is less than zero, false (0) elsewere
1455+ 252B                              New_Def ZLESS, "0<", is_code, is_normal
1455+ 252B             >
1455+ 252B             >Dict_Ptr        defl    $
1455+ 252B             >
1455+ 252B             >//              ______________________________________________________________________
1455+ 252B             >//              Heap part
1455+ 252B             >
1455+ 252B             >
1455+ 252B             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E27A             >
1455+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E27A             >Latest_Definition defl  Heap_Ptr
1455+ E27A             >
1455+ E27A             >                // dummy db directives used to calculate length of namec
1455+ E27A 30 3C       >                db      "0<"
1455+ E27C             >len_NFA         defl    $ - temp_NFA
1455+ E27C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E27A             >
1455+ E27A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E27B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1455+ E27D             >                org     $-1                 // alter last byte of Name just above to set
1455+ E27C BC          >                db      {b $} | END_BIT     // msb as name end
1455+ E27D             >
1455+ E27D 72 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E27F             >Prev_Ptr        defl    Heap_Ptr
1455+ E27F             >
1455+ E27F             >mirror_Ptr      defl    $
1455+ E27F             >
1455+ E27F 2D 25       >                dw      Dict_Ptr + 2        // xt
1455+ E281             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E281             >
1455+ E281             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E281             >
1455+ E281             >//              ______________________________________________________________________
1455+ E281             >//              Dictionary part
1455+ E281             >
1455+ E281             >                org     Dict_Ptr
1455+ 252B             >
1455+ 252B 7F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 252D             >
1455+ 252D             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 252D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1455+ 252D ~           >
1455+ 252D ~           >
1455+ 252D             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 252D             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 252D             >
1455+ 252D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 252D E1                           pop     hl
1457+ 252E 29                           add     hl, hl
1458+ 252F ED 62                        sbc     hl, hl
1459+ 2531                              psh1
1459+ 2531 E5          >                push    hl
1459+ 2532 DD E9       >                jp      (ix)
1460+ 2534
1461+ 2534              //  ______________________________________________________________________
1462+ 2534              //
1463+ 2534              // 0>           n -- f
1464+ 2534              // true (non zero) if n is less than zero, false (0) elsewere
1465+ 2534                              New_Def ZGREATER, "0>", is_code, is_normal
1465+ 2534             >
1465+ 2534             >Dict_Ptr        defl    $
1465+ 2534             >
1465+ 2534             >//              ______________________________________________________________________
1465+ 2534             >//              Heap part
1465+ 2534             >
1465+ 2534             >
1465+ 2534             >                org     (Heap_Ptr & $1FFF) + $E000
1465+ E281             >
1465+ E281             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1465+ E281             >Latest_Definition defl  Heap_Ptr
1465+ E281             >
1465+ E281             >                // dummy db directives used to calculate length of namec
1465+ E281 30 3E       >                db      "0>"
1465+ E283             >len_NFA         defl    $ - temp_NFA
1465+ E283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1465+ E281             >
1465+ E281 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1465+ E282 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1465+ E284             >                org     $-1                 // alter last byte of Name just above to set
1465+ E283 BE          >                db      {b $} | END_BIT     // msb as name end
1465+ E284             >
1465+ E284 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1465+ E286             >Prev_Ptr        defl    Heap_Ptr
1465+ E286             >
1465+ E286             >mirror_Ptr      defl    $
1465+ E286             >
1465+ E286 36 25       >                dw      Dict_Ptr + 2        // xt
1465+ E288             >Heap_Ptr        defl    $ - $E000           // save current HP
1465+ E288             >
1465+ E288             >Current_HP      defl  $ - $E000             // used to set HP once!
1465+ E288             >
1465+ E288             >//              ______________________________________________________________________
1465+ E288             >//              Dictionary part
1465+ E288             >
1465+ E288             >                org     Dict_Ptr
1465+ 2534             >
1465+ 2534 86 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1465+ 2536             >
1465+ 2536             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1465+ 2536 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1465+ 2536 ~           >
1465+ 2536 ~           >
1465+ 2536             >                endif           ; ok        // for other definitions it "points" the correct handler
1465+ 2536             >                // Use of "; ok" to suppress "warning[fwdref]"
1465+ 2536             >
1465+ 2536             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1466+ 2536 E1                           pop     hl
1467+ 2537 7D                           ld      a, l
1468+ 2538 B4                           or      h
1469+ 2539 29                           add     hl, hl
1470+ 253A 21 00 00                     ld      hl, FALSE_FLAG
1471+ 253D 38 04                        jr      c, ZGreater_Skip
1472+ 253F A7                               and     a
1473+ 2540 28 01                            jr      z, ZGreater_Skip
1474+ 2542 2B                                   dec     hl
1475+ 2543              ZGreater_Skip:
1476+ 2543                              psh1
1476+ 2543 E5          >                push    hl
1476+ 2544 DD E9       >                jp      (ix)
1477+ 2546
1478+ 2546              //  ______________________________________________________________________
1479+ 2546              //
1480+ 2546              // +            n1 n2 -- n3
1481+ 2546              // returns the unsigned sum of two top values
1482+ 2546                              New_Def PLUS, "+", is_code, is_normal
1482+ 2546             >
1482+ 2546             >Dict_Ptr        defl    $
1482+ 2546             >
1482+ 2546             >//              ______________________________________________________________________
1482+ 2546             >//              Heap part
1482+ 2546             >
1482+ 2546             >
1482+ 2546             >                org     (Heap_Ptr & $1FFF) + $E000
1482+ E288             >
1482+ E288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1482+ E288             >Latest_Definition defl  Heap_Ptr
1482+ E288             >
1482+ E288             >                // dummy db directives used to calculate length of namec
1482+ E288 2B          >                db      "+"
1482+ E289             >len_NFA         defl    $ - temp_NFA
1482+ E289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1482+ E288             >
1482+ E288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1482+ E289 2B          >                db      "+"               // name string in 7-bit ascii, but
1482+ E28A             >                org     $-1                 // alter last byte of Name just above to set
1482+ E289 AB          >                db      {b $} | END_BIT     // msb as name end
1482+ E28A             >
1482+ E28A 81 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1482+ E28C             >Prev_Ptr        defl    Heap_Ptr
1482+ E28C             >
1482+ E28C             >mirror_Ptr      defl    $
1482+ E28C             >
1482+ E28C 48 25       >                dw      Dict_Ptr + 2        // xt
1482+ E28E             >Heap_Ptr        defl    $ - $E000           // save current HP
1482+ E28E             >
1482+ E28E             >Current_HP      defl  $ - $E000             // used to set HP once!
1482+ E28E             >
1482+ E28E             >//              ______________________________________________________________________
1482+ E28E             >//              Dictionary part
1482+ E28E             >
1482+ E28E             >                org     Dict_Ptr
1482+ 2546             >
1482+ 2546 8C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1482+ 2548             >
1482+ 2548             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1482+ 2548 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1482+ 2548 ~           >
1482+ 2548 ~           >
1482+ 2548             >                endif           ; ok        // for other definitions it "points" the correct handler
1482+ 2548             >                // Use of "; ok" to suppress "warning[fwdref]"
1482+ 2548             >
1482+ 2548             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1483+ 2548 D9                           exx
1484+ 2549 E1                           pop     hl
1485+ 254A D1                           pop     de
1486+ 254B 19                           add     hl, de
1487+ 254C E5                           push    hl
1488+ 254D D9                           exx
1489+ 254E                              next
1489+ 254E DD E9       >                jp      (ix)
1490+ 2550
1491+ 2550
1492+ 2550              //  ______________________________________________________________________
1493+ 2550              //
1494+ 2550              // d+           d1 d2 -- d3
1495+ 2550              // returns the unsigned sum of two top double-numbers
1496+ 2550              //      d2  d1
1497+ 2550              //      h l h l
1498+ 2550              // SP   LHEDLHED
1499+ 2550              // SP  +01234567
1500+ 2550                              New_Def DPLUS, "D+", is_code, is_normal
1500+ 2550             >
1500+ 2550             >Dict_Ptr        defl    $
1500+ 2550             >
1500+ 2550             >//              ______________________________________________________________________
1500+ 2550             >//              Heap part
1500+ 2550             >
1500+ 2550             >
1500+ 2550             >                org     (Heap_Ptr & $1FFF) + $E000
1500+ E28E             >
1500+ E28E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1500+ E28E             >Latest_Definition defl  Heap_Ptr
1500+ E28E             >
1500+ E28E             >                // dummy db directives used to calculate length of namec
1500+ E28E 44 2B       >                db      "D+"
1500+ E290             >len_NFA         defl    $ - temp_NFA
1500+ E290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1500+ E28E             >
1500+ E28E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1500+ E28F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1500+ E291             >                org     $-1                 // alter last byte of Name just above to set
1500+ E290 AB          >                db      {b $} | END_BIT     // msb as name end
1500+ E291             >
1500+ E291 88 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1500+ E293             >Prev_Ptr        defl    Heap_Ptr
1500+ E293             >
1500+ E293             >mirror_Ptr      defl    $
1500+ E293             >
1500+ E293 52 25       >                dw      Dict_Ptr + 2        // xt
1500+ E295             >Heap_Ptr        defl    $ - $E000           // save current HP
1500+ E295             >
1500+ E295             >Current_HP      defl  $ - $E000             // used to set HP once!
1500+ E295             >
1500+ E295             >//              ______________________________________________________________________
1500+ E295             >//              Dictionary part
1500+ E295             >
1500+ E295             >                org     Dict_Ptr
1500+ 2550             >
1500+ 2550 93 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1500+ 2552             >
1500+ 2552             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1500+ 2552 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1500+ 2552 ~           >
1500+ 2552 ~           >
1500+ 2552             >                endif           ; ok        // for other definitions it "points" the correct handler
1500+ 2552             >                // Use of "; ok" to suppress "warning[fwdref]"
1500+ 2552             >
1500+ 2552             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1501+ 2552
1502+ 2552 D9                           exx
1503+ 2553 C1                           pop     bc                  // bc := d2.H
1504+ 2554 D1                           pop     de                  // hl := d2.L
1505+ 2555 E1                           pop     hl                  // d1.H
1506+ 2556 E3                           ex      (sp), hl            // d1.L
1507+ 2557 19                           add     hl, de              // hl := d2.L + d1.L
1508+ 2558 E3                           ex      (sp), hl            // d1.H
1509+ 2559 ED 4A                        adc     hl, bc              // d1.H + d2.H
1510+ 255B E5                           push    hl
1511+ 255C D9                           exx
1512+ 255D                              next
1512+ 255D DD E9       >                jp      (ix)
1513+ 255F
1514+ 255F              //  ______________________________________________________________________
1515+ 255F              //
1516+ 255F              // 1+           n1 -- n2
1517+ 255F              // increment by 1 top of stack
1518+ 255F                              New_Def ONE_PLUS, "1+", is_code, is_normal
1518+ 255F             >
1518+ 255F             >Dict_Ptr        defl    $
1518+ 255F             >
1518+ 255F             >//              ______________________________________________________________________
1518+ 255F             >//              Heap part
1518+ 255F             >
1518+ 255F             >
1518+ 255F             >                org     (Heap_Ptr & $1FFF) + $E000
1518+ E295             >
1518+ E295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ E295             >Latest_Definition defl  Heap_Ptr
1518+ E295             >
1518+ E295             >                // dummy db directives used to calculate length of namec
1518+ E295 31 2B       >                db      "1+"
1518+ E297             >len_NFA         defl    $ - temp_NFA
1518+ E297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ E295             >
1518+ E295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ E296 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1518+ E298             >                org     $-1                 // alter last byte of Name just above to set
1518+ E297 AB          >                db      {b $} | END_BIT     // msb as name end
1518+ E298             >
1518+ E298 8E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1518+ E29A             >Prev_Ptr        defl    Heap_Ptr
1518+ E29A             >
1518+ E29A             >mirror_Ptr      defl    $
1518+ E29A             >
1518+ E29A 61 25       >                dw      Dict_Ptr + 2        // xt
1518+ E29C             >Heap_Ptr        defl    $ - $E000           // save current HP
1518+ E29C             >
1518+ E29C             >Current_HP      defl  $ - $E000             // used to set HP once!
1518+ E29C             >
1518+ E29C             >//              ______________________________________________________________________
1518+ E29C             >//              Dictionary part
1518+ E29C             >
1518+ E29C             >                org     Dict_Ptr
1518+ 255F             >
1518+ 255F 9A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1518+ 2561             >
1518+ 2561             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 2561 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1518+ 2561 ~           >
1518+ 2561 ~           >
1518+ 2561             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 2561             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 2561             >
1518+ 2561             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 2561 E1                           pop     hl
1520+ 2562 23                           inc     hl
1521+ 2563
1522+ 2563                              psh1
1522+ 2563 E5          >                push    hl
1522+ 2564 DD E9       >                jp      (ix)
1523+ 2566
1524+ 2566              //  ______________________________________________________________________
1525+ 2566              //
1526+ 2566              // 1-           n1 -- n2
1527+ 2566              // decrement by 1 top of stack
1528+ 2566                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1528+ 2566             >
1528+ 2566             >Dict_Ptr        defl    $
1528+ 2566             >
1528+ 2566             >//              ______________________________________________________________________
1528+ 2566             >//              Heap part
1528+ 2566             >
1528+ 2566             >
1528+ 2566             >                org     (Heap_Ptr & $1FFF) + $E000
1528+ E29C             >
1528+ E29C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1528+ E29C             >Latest_Definition defl  Heap_Ptr
1528+ E29C             >
1528+ E29C             >                // dummy db directives used to calculate length of namec
1528+ E29C 31 2D       >                db      "1-"
1528+ E29E             >len_NFA         defl    $ - temp_NFA
1528+ E29E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1528+ E29C             >
1528+ E29C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1528+ E29D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1528+ E29F             >                org     $-1                 // alter last byte of Name just above to set
1528+ E29E AD          >                db      {b $} | END_BIT     // msb as name end
1528+ E29F             >
1528+ E29F 95 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1528+ E2A1             >Prev_Ptr        defl    Heap_Ptr
1528+ E2A1             >
1528+ E2A1             >mirror_Ptr      defl    $
1528+ E2A1             >
1528+ E2A1 68 25       >                dw      Dict_Ptr + 2        // xt
1528+ E2A3             >Heap_Ptr        defl    $ - $E000           // save current HP
1528+ E2A3             >
1528+ E2A3             >Current_HP      defl  $ - $E000             // used to set HP once!
1528+ E2A3             >
1528+ E2A3             >//              ______________________________________________________________________
1528+ E2A3             >//              Dictionary part
1528+ E2A3             >
1528+ E2A3             >                org     Dict_Ptr
1528+ 2566             >
1528+ 2566 A1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1528+ 2568             >
1528+ 2568             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1528+ 2568 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1528+ 2568 ~           >
1528+ 2568 ~           >
1528+ 2568             >                endif           ; ok        // for other definitions it "points" the correct handler
1528+ 2568             >                // Use of "; ok" to suppress "warning[fwdref]"
1528+ 2568             >
1528+ 2568             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1529+ 2568 E1                           pop     hl
1530+ 2569 2B                           dec     hl
1531+ 256A
1532+ 256A                              psh1
1532+ 256A E5          >                push    hl
1532+ 256B DD E9       >                jp      (ix)
1533+ 256D
1534+ 256D              //  ______________________________________________________________________
1535+ 256D              //
1536+ 256D              // 2+           n1 -- n2
1537+ 256D              // increment by 2 top of stack
1538+ 256D                              New_Def TWO_PLUS, "2+", is_code, is_normal
1538+ 256D             >
1538+ 256D             >Dict_Ptr        defl    $
1538+ 256D             >
1538+ 256D             >//              ______________________________________________________________________
1538+ 256D             >//              Heap part
1538+ 256D             >
1538+ 256D             >
1538+ 256D             >                org     (Heap_Ptr & $1FFF) + $E000
1538+ E2A3             >
1538+ E2A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ E2A3             >Latest_Definition defl  Heap_Ptr
1538+ E2A3             >
1538+ E2A3             >                // dummy db directives used to calculate length of namec
1538+ E2A3 32 2B       >                db      "2+"
1538+ E2A5             >len_NFA         defl    $ - temp_NFA
1538+ E2A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ E2A3             >
1538+ E2A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ E2A4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1538+ E2A6             >                org     $-1                 // alter last byte of Name just above to set
1538+ E2A5 AB          >                db      {b $} | END_BIT     // msb as name end
1538+ E2A6             >
1538+ E2A6 9C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1538+ E2A8             >Prev_Ptr        defl    Heap_Ptr
1538+ E2A8             >
1538+ E2A8             >mirror_Ptr      defl    $
1538+ E2A8             >
1538+ E2A8 6F 25       >                dw      Dict_Ptr + 2        // xt
1538+ E2AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1538+ E2AA             >
1538+ E2AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1538+ E2AA             >
1538+ E2AA             >//              ______________________________________________________________________
1538+ E2AA             >//              Dictionary part
1538+ E2AA             >
1538+ E2AA             >                org     Dict_Ptr
1538+ 256D             >
1538+ 256D A8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1538+ 256F             >
1538+ 256F             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 256F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 256F ~           >
1538+ 256F ~           >
1538+ 256F             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 256F             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 256F             >
1538+ 256F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 256F              Two_Plus:
1540+ 256F E1                           pop     hl
1541+ 2570 23                           inc     hl
1542+ 2571 23                           inc     hl
1543+ 2572
1544+ 2572                              psh1
1544+ 2572 E5          >                push    hl
1544+ 2573 DD E9       >                jp      (ix)
1545+ 2575
1546+ 2575              //  ______________________________________________________________________
1547+ 2575              //
1548+ 2575              // cell+        a1 -- a2
1549+ 2575              // increment by 2 top of stack
1550+ 2575                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1550+ 2575             >
1550+ 2575             >Dict_Ptr        defl    $
1550+ 2575             >
1550+ 2575             >//              ______________________________________________________________________
1550+ 2575             >//              Heap part
1550+ 2575             >
1550+ 2575             >
1550+ 2575             >                org     (Heap_Ptr & $1FFF) + $E000
1550+ E2AA             >
1550+ E2AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1550+ E2AA             >Latest_Definition defl  Heap_Ptr
1550+ E2AA             >
1550+ E2AA             >                // dummy db directives used to calculate length of namec
1550+ E2AA 43 45 4C 4C >                db      "CELL+"
1550+ E2AE 2B          >
1550+ E2AF             >len_NFA         defl    $ - temp_NFA
1550+ E2AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1550+ E2AA             >
1550+ E2AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1550+ E2AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1550+ E2AF 2B          >
1550+ E2B0             >                org     $-1                 // alter last byte of Name just above to set
1550+ E2AF AB          >                db      {b $} | END_BIT     // msb as name end
1550+ E2B0             >
1550+ E2B0 A3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1550+ E2B2             >Prev_Ptr        defl    Heap_Ptr
1550+ E2B2             >
1550+ E2B2             >mirror_Ptr      defl    $
1550+ E2B2             >
1550+ E2B2 77 25       >                dw      Dict_Ptr + 2        // xt
1550+ E2B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1550+ E2B4             >
1550+ E2B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1550+ E2B4             >
1550+ E2B4             >//              ______________________________________________________________________
1550+ E2B4             >//              Dictionary part
1550+ E2B4             >
1550+ E2B4             >                org     Dict_Ptr
1550+ 2575             >
1550+ 2575 B2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1550+ 2577             >
1550+ 2577             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1550+ 2577 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1550+ 2577 ~           >
1550+ 2577 ~           >
1550+ 2577             >                endif           ; ok        // for other definitions it "points" the correct handler
1550+ 2577             >                // Use of "; ok" to suppress "warning[fwdref]"
1550+ 2577             >
1550+ 2577             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1551+ 2577 C3 6F 25                     jp      Two_Plus
1552+ 257A
1553+ 257A              //  ______________________________________________________________________
1554+ 257A              //
1555+ 257A              // align        a1 -- a2
1556+ 257A              // align memory : not used
1557+ 257A              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1558+ 257A              //            next
1559+ 257A
1560+ 257A              //  ______________________________________________________________________
1561+ 257A              //
1562+ 257A              // cell-        a1 -- a2
1563+ 257A              // decrement by 2 top of stack
1564+ 257A                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1564+ 257A             >
1564+ 257A             >Dict_Ptr        defl    $
1564+ 257A             >
1564+ 257A             >//              ______________________________________________________________________
1564+ 257A             >//              Heap part
1564+ 257A             >
1564+ 257A             >
1564+ 257A             >                org     (Heap_Ptr & $1FFF) + $E000
1564+ E2B4             >
1564+ E2B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1564+ E2B4             >Latest_Definition defl  Heap_Ptr
1564+ E2B4             >
1564+ E2B4             >                // dummy db directives used to calculate length of namec
1564+ E2B4 43 45 4C 4C >                db      "CELL-"
1564+ E2B8 2D          >
1564+ E2B9             >len_NFA         defl    $ - temp_NFA
1564+ E2B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1564+ E2B4             >
1564+ E2B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1564+ E2B5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1564+ E2B9 2D          >
1564+ E2BA             >                org     $-1                 // alter last byte of Name just above to set
1564+ E2B9 AD          >                db      {b $} | END_BIT     // msb as name end
1564+ E2BA             >
1564+ E2BA AA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1564+ E2BC             >Prev_Ptr        defl    Heap_Ptr
1564+ E2BC             >
1564+ E2BC             >mirror_Ptr      defl    $
1564+ E2BC             >
1564+ E2BC 7C 25       >                dw      Dict_Ptr + 2        // xt
1564+ E2BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1564+ E2BE             >
1564+ E2BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1564+ E2BE             >
1564+ E2BE             >//              ______________________________________________________________________
1564+ E2BE             >//              Dictionary part
1564+ E2BE             >
1564+ E2BE             >                org     Dict_Ptr
1564+ 257A             >
1564+ 257A BC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1564+ 257C             >
1564+ 257C             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1564+ 257C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1564+ 257C ~           >
1564+ 257C ~           >
1564+ 257C             >                endif           ; ok        // for other definitions it "points" the correct handler
1564+ 257C             >                // Use of "; ok" to suppress "warning[fwdref]"
1564+ 257C             >
1564+ 257C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1565+ 257C              CellMinus:
1566+ 257C E1                           pop     hl
1567+ 257D 2B                           dec     hl
1568+ 257E 2B                           dec     hl
1569+ 257F
1570+ 257F                              psh1
1570+ 257F E5          >                push    hl
1570+ 2580 DD E9       >                jp      (ix)
1571+ 2582
1572+ 2582              //  ______________________________________________________________________
1573+ 2582              //
1574+ 2582              // 2-           a1 -- a2
1575+ 2582              // decrement by 2 top of stack
1576+ 2582                              New_Def TWO_MINUS, "2-", is_code, is_normal
1576+ 2582             >
1576+ 2582             >Dict_Ptr        defl    $
1576+ 2582             >
1576+ 2582             >//              ______________________________________________________________________
1576+ 2582             >//              Heap part
1576+ 2582             >
1576+ 2582             >
1576+ 2582             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E2BE             >
1576+ E2BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E2BE             >Latest_Definition defl  Heap_Ptr
1576+ E2BE             >
1576+ E2BE             >                // dummy db directives used to calculate length of namec
1576+ E2BE 32 2D       >                db      "2-"
1576+ E2C0             >len_NFA         defl    $ - temp_NFA
1576+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E2BE             >
1576+ E2BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E2BF 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1576+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1576+ E2C0 AD          >                db      {b $} | END_BIT     // msb as name end
1576+ E2C1             >
1576+ E2C1 B4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1576+ E2C3             >
1576+ E2C3             >mirror_Ptr      defl    $
1576+ E2C3             >
1576+ E2C3 84 25       >                dw      Dict_Ptr + 2        // xt
1576+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E2C5             >
1576+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E2C5             >
1576+ E2C5             >//              ______________________________________________________________________
1576+ E2C5             >//              Dictionary part
1576+ E2C5             >
1576+ E2C5             >                org     Dict_Ptr
1576+ 2582             >
1576+ 2582 C3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 2584             >
1576+ 2584             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 2584 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1576+ 2584 ~           >
1576+ 2584 ~           >
1576+ 2584             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 2584             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 2584             >
1576+ 2584             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 2584 C3 7C 25                     jp      CellMinus
1578+ 2587
1579+ 2587              //  ______________________________________________________________________
1580+ 2587              //
1581+ 2587              // negate       n1 -- n2
1582+ 2587              // change the sign of number
1583+ 2587                              New_Def MINUS, "NEGATE", is_code, is_normal
1583+ 2587             >
1583+ 2587             >Dict_Ptr        defl    $
1583+ 2587             >
1583+ 2587             >//              ______________________________________________________________________
1583+ 2587             >//              Heap part
1583+ 2587             >
1583+ 2587             >
1583+ 2587             >                org     (Heap_Ptr & $1FFF) + $E000
1583+ E2C5             >
1583+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1583+ E2C5             >Latest_Definition defl  Heap_Ptr
1583+ E2C5             >
1583+ E2C5             >                // dummy db directives used to calculate length of namec
1583+ E2C5 4E 45 47 41 >                db      "NEGATE"
1583+ E2C9 54 45       >
1583+ E2CB             >len_NFA         defl    $ - temp_NFA
1583+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1583+ E2C5             >
1583+ E2C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1583+ E2C6 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1583+ E2CA 54 45       >
1583+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1583+ E2CB C5          >                db      {b $} | END_BIT     // msb as name end
1583+ E2CC             >
1583+ E2CC BE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1583+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1583+ E2CE             >
1583+ E2CE             >mirror_Ptr      defl    $
1583+ E2CE             >
1583+ E2CE 89 25       >                dw      Dict_Ptr + 2        // xt
1583+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1583+ E2D0             >
1583+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1583+ E2D0             >
1583+ E2D0             >//              ______________________________________________________________________
1583+ E2D0             >//              Dictionary part
1583+ E2D0             >
1583+ E2D0             >                org     Dict_Ptr
1583+ 2587             >
1583+ 2587 CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1583+ 2589             >
1583+ 2589             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1583+ 2589 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1583+ 2589 ~           >
1583+ 2589 ~           >
1583+ 2589             >                endif           ; ok        // for other definitions it "points" the correct handler
1583+ 2589             >                // Use of "; ok" to suppress "warning[fwdref]"
1583+ 2589             >
1583+ 2589             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1584+ 2589 D9                           exx
1585+ 258A 21 00 00                     ld      hl, 0               // subtract from 0
1586+ 258D D1                           pop     de
1587+ 258E B7                           or      a
1588+ 258F ED 52                        sbc     hl, de
1589+ 2591 E5                           push    hl
1590+ 2592 D9                           exx
1591+ 2593                              next
1591+ 2593 DD E9       >                jp      (ix)
1592+ 2595
1593+ 2595              //  ______________________________________________________________________
1594+ 2595              //
1595+ 2595              // dnegate      d1 -- d2
1596+ 2595              // change the sign of a double number
1597+ 2595                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1597+ 2595             >
1597+ 2595             >Dict_Ptr        defl    $
1597+ 2595             >
1597+ 2595             >//              ______________________________________________________________________
1597+ 2595             >//              Heap part
1597+ 2595             >
1597+ 2595             >
1597+ 2595             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E2D0             >
1597+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E2D0             >Latest_Definition defl  Heap_Ptr
1597+ E2D0             >
1597+ E2D0             >                // dummy db directives used to calculate length of namec
1597+ E2D0 44 4E 45 47 >                db      "DNEGATE"
1597+ E2D4 41 54 45    >
1597+ E2D7             >len_NFA         defl    $ - temp_NFA
1597+ E2D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E2D0             >
1597+ E2D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E2D1 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1597+ E2D5 41 54 45    >
1597+ E2D8             >                org     $-1                 // alter last byte of Name just above to set
1597+ E2D7 C5          >                db      {b $} | END_BIT     // msb as name end
1597+ E2D8             >
1597+ E2D8 C5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E2DA             >Prev_Ptr        defl    Heap_Ptr
1597+ E2DA             >
1597+ E2DA             >mirror_Ptr      defl    $
1597+ E2DA             >
1597+ E2DA 97 25       >                dw      Dict_Ptr + 2        // xt
1597+ E2DC             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E2DC             >
1597+ E2DC             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E2DC             >
1597+ E2DC             >//              ______________________________________________________________________
1597+ E2DC             >//              Dictionary part
1597+ E2DC             >
1597+ E2DC             >                org     Dict_Ptr
1597+ 2595             >
1597+ 2595 DA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 2597             >
1597+ 2597             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 2597 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1597+ 2597 ~           >
1597+ 2597 ~           >
1597+ 2597             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 2597             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 2597             >
1597+ 2597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 2597 D9                           exx
1599+ 2598 C1                           pop     bc                  // d1.H
1600+ 2599 D1                           pop     de                  // d1.L
1601+ 259A AF                           xor     a
1602+ 259B 67                           ld      h, a
1603+ 259C 6F                           ld      l, a
1604+ 259D ED 52                        sbc     hl, de              // subtact from zero
1605+ 259F E5                           push    hl                  // > d2-L
1606+ 25A0 67                           ld      h, a
1607+ 25A1 6F                           ld      l, a
1608+ 25A2 ED 42                        sbc     hl, bc              // subtract from zero with carry
1609+ 25A4                                                          // > d2-H
1610+ 25A4 E5                           push    hl
1611+ 25A5 D9                           exx
1612+ 25A6                              next
1612+ 25A6 DD E9       >                jp      (ix)
1613+ 25A8
1614+ 25A8              //  ______________________________________________________________________
1615+ 25A8              //
1616+ 25A8              // over         n1 n2 -- n1 n2 n1
1617+ 25A8              // copy the second value of stack and put it on top.
1618+ 25A8                              New_Def OVER, "OVER", is_code, is_normal
1618+ 25A8             >
1618+ 25A8             >Dict_Ptr        defl    $
1618+ 25A8             >
1618+ 25A8             >//              ______________________________________________________________________
1618+ 25A8             >//              Heap part
1618+ 25A8             >
1618+ 25A8             >
1618+ 25A8             >                org     (Heap_Ptr & $1FFF) + $E000
1618+ E2DC             >
1618+ E2DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1618+ E2DC             >Latest_Definition defl  Heap_Ptr
1618+ E2DC             >
1618+ E2DC             >                // dummy db directives used to calculate length of namec
1618+ E2DC 4F 56 45 52 >                db      "OVER"
1618+ E2E0             >len_NFA         defl    $ - temp_NFA
1618+ E2E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1618+ E2DC             >
1618+ E2DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1618+ E2DD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1618+ E2E1             >                org     $-1                 // alter last byte of Name just above to set
1618+ E2E0 D2          >                db      {b $} | END_BIT     // msb as name end
1618+ E2E1             >
1618+ E2E1 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1618+ E2E3             >Prev_Ptr        defl    Heap_Ptr
1618+ E2E3             >
1618+ E2E3             >mirror_Ptr      defl    $
1618+ E2E3             >
1618+ E2E3 AA 25       >                dw      Dict_Ptr + 2        // xt
1618+ E2E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1618+ E2E5             >
1618+ E2E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1618+ E2E5             >
1618+ E2E5             >//              ______________________________________________________________________
1618+ E2E5             >//              Dictionary part
1618+ E2E5             >
1618+ E2E5             >                org     Dict_Ptr
1618+ 25A8             >
1618+ 25A8 E3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1618+ 25AA             >
1618+ 25AA             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1618+ 25AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1618+ 25AA ~           >
1618+ 25AA ~           >
1618+ 25AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1618+ 25AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1618+ 25AA             >
1618+ 25AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1619+ 25AA                              // exx     // we can use af instead OPTIMIZATION possible
1620+ 25AA F1                           pop     af                  //   n2
1621+ 25AB E1                           pop     hl                  // < n1
1622+ 25AC E5                           push    hl                  // > n1
1623+ 25AD F5                           push    af                  // > n2
1624+ 25AE E5                           push    hl                  // > n1
1625+ 25AF                              // exx
1626+ 25AF                              next
1626+ 25AF DD E9       >                jp      (ix)
1627+ 25B1
1628+ 25B1              //  ______________________________________________________________________
1629+ 25B1              //
1630+ 25B1              // drop         n1 --
1631+ 25B1              // drops the top of stack
1632+ 25B1                              New_Def DROP, "DROP", is_code, is_normal
1632+ 25B1             >
1632+ 25B1             >Dict_Ptr        defl    $
1632+ 25B1             >
1632+ 25B1             >//              ______________________________________________________________________
1632+ 25B1             >//              Heap part
1632+ 25B1             >
1632+ 25B1             >
1632+ 25B1             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E2E5             >
1632+ E2E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E2E5             >Latest_Definition defl  Heap_Ptr
1632+ E2E5             >
1632+ E2E5             >                // dummy db directives used to calculate length of namec
1632+ E2E5 44 52 4F 50 >                db      "DROP"
1632+ E2E9             >len_NFA         defl    $ - temp_NFA
1632+ E2E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E2E5             >
1632+ E2E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E2E6 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1632+ E2EA             >                org     $-1                 // alter last byte of Name just above to set
1632+ E2E9 D0          >                db      {b $} | END_BIT     // msb as name end
1632+ E2EA             >
1632+ E2EA DC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E2EC             >Prev_Ptr        defl    Heap_Ptr
1632+ E2EC             >
1632+ E2EC             >mirror_Ptr      defl    $
1632+ E2EC             >
1632+ E2EC B3 25       >                dw      Dict_Ptr + 2        // xt
1632+ E2EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E2EE             >
1632+ E2EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E2EE             >
1632+ E2EE             >//              ______________________________________________________________________
1632+ E2EE             >//              Dictionary part
1632+ E2EE             >
1632+ E2EE             >                org     Dict_Ptr
1632+ 25B1             >
1632+ 25B1 EC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 25B3             >
1632+ 25B3             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 25B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1632+ 25B3 ~           >
1632+ 25B3 ~           >
1632+ 25B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 25B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 25B3             >
1632+ 25B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 25B3 E1                           pop     hl                  // < n1 and discard previous TOS
1634+ 25B4                              next
1634+ 25B4 DD E9       >                jp      (ix)
1635+ 25B6
1636+ 25B6              //  ______________________________________________________________________
1637+ 25B6              //
1638+ 25B6              // nip          n1 n2 -- n2
1639+ 25B6              // drops the second elemento on the stack
1640+ 25B6                              New_Def NIP, "NIP", is_code, is_normal
1640+ 25B6             >
1640+ 25B6             >Dict_Ptr        defl    $
1640+ 25B6             >
1640+ 25B6             >//              ______________________________________________________________________
1640+ 25B6             >//              Heap part
1640+ 25B6             >
1640+ 25B6             >
1640+ 25B6             >                org     (Heap_Ptr & $1FFF) + $E000
1640+ E2EE             >
1640+ E2EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1640+ E2EE             >Latest_Definition defl  Heap_Ptr
1640+ E2EE             >
1640+ E2EE             >                // dummy db directives used to calculate length of namec
1640+ E2EE 4E 49 50    >                db      "NIP"
1640+ E2F1             >len_NFA         defl    $ - temp_NFA
1640+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1640+ E2EE             >
1640+ E2EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1640+ E2EF 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1640+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1640+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1640+ E2F2             >
1640+ E2F2 E5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1640+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1640+ E2F4             >
1640+ E2F4             >mirror_Ptr      defl    $
1640+ E2F4             >
1640+ E2F4 B8 25       >                dw      Dict_Ptr + 2        // xt
1640+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1640+ E2F6             >
1640+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1640+ E2F6             >
1640+ E2F6             >//              ______________________________________________________________________
1640+ E2F6             >//              Dictionary part
1640+ E2F6             >
1640+ E2F6             >                org     Dict_Ptr
1640+ 25B6             >
1640+ 25B6 F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1640+ 25B8             >
1640+ 25B8             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1640+ 25B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1640+ 25B8 ~           >
1640+ 25B8 ~           >
1640+ 25B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1640+ 25B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1640+ 25B8             >
1640+ 25B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1641+ 25B8
1642+ 25B8 E1                           pop     hl                  // < n1 discarded
1643+ 25B9 E3                           ex      (sp), hl
1644+ 25BA                              next
1644+ 25BA DD E9       >                jp      (ix)
1645+ 25BC
1646+ 25BC              //  ______________________________________________________________________
1647+ 25BC              //
1648+ 25BC              // tuck         n1 n2 -- n2 n1 n2
1649+ 25BC              // copy the top element after the second.
1650+ 25BC                              New_Def TUCK, "TUCK", is_code, is_normal
1650+ 25BC             >
1650+ 25BC             >Dict_Ptr        defl    $
1650+ 25BC             >
1650+ 25BC             >//              ______________________________________________________________________
1650+ 25BC             >//              Heap part
1650+ 25BC             >
1650+ 25BC             >
1650+ 25BC             >                org     (Heap_Ptr & $1FFF) + $E000
1650+ E2F6             >
1650+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1650+ E2F6             >Latest_Definition defl  Heap_Ptr
1650+ E2F6             >
1650+ E2F6             >                // dummy db directives used to calculate length of namec
1650+ E2F6 54 55 43 4B >                db      "TUCK"
1650+ E2FA             >len_NFA         defl    $ - temp_NFA
1650+ E2FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1650+ E2F6             >
1650+ E2F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1650+ E2F7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1650+ E2FB             >                org     $-1                 // alter last byte of Name just above to set
1650+ E2FA CB          >                db      {b $} | END_BIT     // msb as name end
1650+ E2FB             >
1650+ E2FB EE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1650+ E2FD             >Prev_Ptr        defl    Heap_Ptr
1650+ E2FD             >
1650+ E2FD             >mirror_Ptr      defl    $
1650+ E2FD             >
1650+ E2FD BE 25       >                dw      Dict_Ptr + 2        // xt
1650+ E2FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1650+ E2FF             >
1650+ E2FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1650+ E2FF             >
1650+ E2FF             >//              ______________________________________________________________________
1650+ E2FF             >//              Dictionary part
1650+ E2FF             >
1650+ E2FF             >                org     Dict_Ptr
1650+ 25BC             >
1650+ 25BC FD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1650+ 25BE             >
1650+ 25BE             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1650+ 25BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1650+ 25BE ~           >
1650+ 25BE ~           >
1650+ 25BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1650+ 25BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1650+ 25BE             >
1650+ 25BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1651+ 25BE E1                           pop     hl
1652+ 25BF F1                           pop     af                  // < n1
1653+ 25C0 E5                           push    hl                  // > n2  and TOS
1654+ 25C1 F5                           push    af                  // > n1
1655+ 25C2 E5                           push    hl
1656+ 25C3                              next
1656+ 25C3 DD E9       >                jp      (ix)
1657+ 25C5
1658+ 25C5              //  ______________________________________________________________________
1659+ 25C5              //
1660+ 25C5              // swap         n1 n2 -- n2 n1
1661+ 25C5              // swaps the two values on top of stack
1662+ 25C5                              New_Def SWAP, "SWAP", is_code, is_normal
1662+ 25C5             >
1662+ 25C5             >Dict_Ptr        defl    $
1662+ 25C5             >
1662+ 25C5             >//              ______________________________________________________________________
1662+ 25C5             >//              Heap part
1662+ 25C5             >
1662+ 25C5             >
1662+ 25C5             >                org     (Heap_Ptr & $1FFF) + $E000
1662+ E2FF             >
1662+ E2FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1662+ E2FF             >Latest_Definition defl  Heap_Ptr
1662+ E2FF             >
1662+ E2FF             >                // dummy db directives used to calculate length of namec
1662+ E2FF 53 57 41 50 >                db      "SWAP"
1662+ E303             >len_NFA         defl    $ - temp_NFA
1662+ E303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1662+ E2FF             >
1662+ E2FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1662+ E300 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1662+ E304             >                org     $-1                 // alter last byte of Name just above to set
1662+ E303 D0          >                db      {b $} | END_BIT     // msb as name end
1662+ E304             >
1662+ E304 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1662+ E306             >Prev_Ptr        defl    Heap_Ptr
1662+ E306             >
1662+ E306             >mirror_Ptr      defl    $
1662+ E306             >
1662+ E306 C7 25       >                dw      Dict_Ptr + 2        // xt
1662+ E308             >Heap_Ptr        defl    $ - $E000           // save current HP
1662+ E308             >
1662+ E308             >Current_HP      defl  $ - $E000             // used to set HP once!
1662+ E308             >
1662+ E308             >//              ______________________________________________________________________
1662+ E308             >//              Dictionary part
1662+ E308             >
1662+ E308             >                org     Dict_Ptr
1662+ 25C5             >
1662+ 25C5 06 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1662+ 25C7             >
1662+ 25C7             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1662+ 25C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1662+ 25C7 ~           >
1662+ 25C7 ~           >
1662+ 25C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1662+ 25C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1662+ 25C7             >
1662+ 25C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1663+ 25C7 E1                           pop     hl                  // < n1
1664+ 25C8 E3                           ex      (sp),hl             // > n2
1665+ 25C9 E5                           push    hl                  // copy n1 to TOS
1666+ 25CA                              next
1666+ 25CA DD E9       >                jp      (ix)
1667+ 25CC
1668+ 25CC              //  ______________________________________________________________________
1669+ 25CC              //
1670+ 25CC              // dup         n -- n n
1671+ 25CC              // duplicates the top value of stack
1672+ 25CC                              New_Def DUP, "DUP", is_code, is_normal
1672+ 25CC             >
1672+ 25CC             >Dict_Ptr        defl    $
1672+ 25CC             >
1672+ 25CC             >//              ______________________________________________________________________
1672+ 25CC             >//              Heap part
1672+ 25CC             >
1672+ 25CC             >
1672+ 25CC             >                org     (Heap_Ptr & $1FFF) + $E000
1672+ E308             >
1672+ E308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1672+ E308             >Latest_Definition defl  Heap_Ptr
1672+ E308             >
1672+ E308             >                // dummy db directives used to calculate length of namec
1672+ E308 44 55 50    >                db      "DUP"
1672+ E30B             >len_NFA         defl    $ - temp_NFA
1672+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1672+ E308             >
1672+ E308 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1672+ E309 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1672+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1672+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1672+ E30C             >
1672+ E30C FF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1672+ E30E             >Prev_Ptr        defl    Heap_Ptr
1672+ E30E             >
1672+ E30E             >mirror_Ptr      defl    $
1672+ E30E             >
1672+ E30E CE 25       >                dw      Dict_Ptr + 2        // xt
1672+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1672+ E310             >
1672+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1672+ E310             >
1672+ E310             >//              ______________________________________________________________________
1672+ E310             >//              Dictionary part
1672+ E310             >
1672+ E310             >                org     Dict_Ptr
1672+ 25CC             >
1672+ 25CC 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1672+ 25CE             >
1672+ 25CE             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1672+ 25CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1672+ 25CE ~           >
1672+ 25CE ~           >
1672+ 25CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1672+ 25CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1672+ 25CE             >
1672+ 25CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1673+ 25CE E1                           pop     hl
1674+ 25CF E5                           push    hl                  // > n duplicate TOS
1675+ 25D0 E5                           push    hl
1676+ 25D1                              next
1676+ 25D1 DD E9       >                jp      (ix)
1677+ 25D3
1678+ 25D3              //  ______________________________________________________________________
1679+ 25D3              //
1680+ 25D3              // rot         n1 n2 n3 -- n2 n3 n1
1681+ 25D3              // Rotates the 3 top values of stack by picking the 3rd in access-order
1682+ 25D3              // and putting it on top. The other two are shifted down one place.
1683+ 25D3                              New_Def ROT, "ROT", is_code, is_normal
1683+ 25D3             >
1683+ 25D3             >Dict_Ptr        defl    $
1683+ 25D3             >
1683+ 25D3             >//              ______________________________________________________________________
1683+ 25D3             >//              Heap part
1683+ 25D3             >
1683+ 25D3             >
1683+ 25D3             >                org     (Heap_Ptr & $1FFF) + $E000
1683+ E310             >
1683+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ E310             >Latest_Definition defl  Heap_Ptr
1683+ E310             >
1683+ E310             >                // dummy db directives used to calculate length of namec
1683+ E310 52 4F 54    >                db      "ROT"
1683+ E313             >len_NFA         defl    $ - temp_NFA
1683+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ E310             >
1683+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ E311 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1683+ E314             >                org     $-1                 // alter last byte of Name just above to set
1683+ E313 D4          >                db      {b $} | END_BIT     // msb as name end
1683+ E314             >
1683+ E314 08 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1683+ E316             >Prev_Ptr        defl    Heap_Ptr
1683+ E316             >
1683+ E316             >mirror_Ptr      defl    $
1683+ E316             >
1683+ E316 D5 25       >                dw      Dict_Ptr + 2        // xt
1683+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1683+ E318             >
1683+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1683+ E318             >
1683+ E318             >//              ______________________________________________________________________
1683+ E318             >//              Dictionary part
1683+ E318             >
1683+ E318             >                org     Dict_Ptr
1683+ 25D3             >
1683+ 25D3 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1683+ 25D5             >
1683+ 25D5             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 25D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1683+ 25D5 ~           >
1683+ 25D5 ~           >
1683+ 25D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 25D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 25D5             >
1683+ 25D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 25D5 D9                           exx
1685+ 25D6 D1                           pop     de                  // < n3
1686+ 25D7 E1                           pop     hl                  // < n2
1687+ 25D8 E3                           ex      (sp),hl             // > n2 < n1
1688+ 25D9 D5                           push    de                  // > n3
1689+ 25DA E5                           push    hl                  // copy n1 to TOS
1690+ 25DB D9                           exx
1691+ 25DC                              next
1691+ 25DC DD E9       >                jp      (ix)
1692+ 25DE
1693+ 25DE              //  ______________________________________________________________________
1694+ 25DE              //
1695+ 25DE              // -rot         n1 n2 n3 -- n3 n1 n2
1696+ 25DE              // Rotates the 3 top values of stack by picking the 1st in access-order
1697+ 25DE              // and putting back to 3rd place. The other two are shifted down one place.
1698+ 25DE                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1698+ 25DE             >
1698+ 25DE             >Dict_Ptr        defl    $
1698+ 25DE             >
1698+ 25DE             >//              ______________________________________________________________________
1698+ 25DE             >//              Heap part
1698+ 25DE             >
1698+ 25DE             >
1698+ 25DE             >                org     (Heap_Ptr & $1FFF) + $E000
1698+ E318             >
1698+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1698+ E318             >Latest_Definition defl  Heap_Ptr
1698+ E318             >
1698+ E318             >                // dummy db directives used to calculate length of namec
1698+ E318 2D 52 4F 54 >                db      "-ROT"
1698+ E31C             >len_NFA         defl    $ - temp_NFA
1698+ E31C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1698+ E318             >
1698+ E318 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1698+ E319 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1698+ E31D             >                org     $-1                 // alter last byte of Name just above to set
1698+ E31C D4          >                db      {b $} | END_BIT     // msb as name end
1698+ E31D             >
1698+ E31D 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1698+ E31F             >Prev_Ptr        defl    Heap_Ptr
1698+ E31F             >
1698+ E31F             >mirror_Ptr      defl    $
1698+ E31F             >
1698+ E31F E0 25       >                dw      Dict_Ptr + 2        // xt
1698+ E321             >Heap_Ptr        defl    $ - $E000           // save current HP
1698+ E321             >
1698+ E321             >Current_HP      defl  $ - $E000             // used to set HP once!
1698+ E321             >
1698+ E321             >//              ______________________________________________________________________
1698+ E321             >//              Dictionary part
1698+ E321             >
1698+ E321             >                org     Dict_Ptr
1698+ 25DE             >
1698+ 25DE 1F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1698+ 25E0             >
1698+ 25E0             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1698+ 25E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1698+ 25E0 ~           >
1698+ 25E0 ~           >
1698+ 25E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1698+ 25E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1698+ 25E0             >
1698+ 25E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1699+ 25E0 D9                           exx
1700+ 25E1 E1                           pop     hl                  // < n3
1701+ 25E2 D1                           pop     de                  // < n2
1702+ 25E3 E3                           ex      (sp),hl             // > n3 < n1
1703+ 25E4 E5                           push    hl                  // > n1
1704+ 25E5 D5                           push    de                  // copy n3 to TOS
1705+ 25E6 D9                           exx
1706+ 25E7                              next
1706+ 25E7 DD E9       >                jp      (ix)
1707+ 25E9
1708+ 25E9              //  ______________________________________________________________________
1709+ 25E9              //
1710+ 25E9              // pick        n1 -- nx
1711+ 25E9              // picks the nth element from TOS
1712+ 25E9                              New_Def PICK, "PICK", is_code, is_normal
1712+ 25E9             >
1712+ 25E9             >Dict_Ptr        defl    $
1712+ 25E9             >
1712+ 25E9             >//              ______________________________________________________________________
1712+ 25E9             >//              Heap part
1712+ 25E9             >
1712+ 25E9             >
1712+ 25E9             >                org     (Heap_Ptr & $1FFF) + $E000
1712+ E321             >
1712+ E321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1712+ E321             >Latest_Definition defl  Heap_Ptr
1712+ E321             >
1712+ E321             >                // dummy db directives used to calculate length of namec
1712+ E321 50 49 43 4B >                db      "PICK"
1712+ E325             >len_NFA         defl    $ - temp_NFA
1712+ E325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1712+ E321             >
1712+ E321 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1712+ E322 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1712+ E326             >                org     $-1                 // alter last byte of Name just above to set
1712+ E325 CB          >                db      {b $} | END_BIT     // msb as name end
1712+ E326             >
1712+ E326 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1712+ E328             >Prev_Ptr        defl    Heap_Ptr
1712+ E328             >
1712+ E328             >mirror_Ptr      defl    $
1712+ E328             >
1712+ E328 EB 25       >                dw      Dict_Ptr + 2        // xt
1712+ E32A             >Heap_Ptr        defl    $ - $E000           // save current HP
1712+ E32A             >
1712+ E32A             >Current_HP      defl  $ - $E000             // used to set HP once!
1712+ E32A             >
1712+ E32A             >//              ______________________________________________________________________
1712+ E32A             >//              Dictionary part
1712+ E32A             >
1712+ E32A             >                org     Dict_Ptr
1712+ 25E9             >
1712+ 25E9 28 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1712+ 25EB             >
1712+ 25EB             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1712+ 25EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1712+ 25EB ~           >
1712+ 25EB ~           >
1712+ 25EB             >                endif           ; ok        // for other definitions it "points" the correct handler
1712+ 25EB             >                // Use of "; ok" to suppress "warning[fwdref]"
1712+ 25EB             >
1712+ 25EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1713+ 25EB E1                           pop     hl                  // take TOS as index
1714+ 25EC 29                           add     hl, hl              // as cells
1715+ 25ED 39                           add     hl, sp              // from Stack Pointer
1716+ 25EE 7E                           ld      a, (hl)             // replace TOS
1717+ 25EF 23                           inc     hl
1718+ 25F0 66                           ld      h, (hl)
1719+ 25F1 6F                           ld      l, a
1720+ 25F2 E5                           push    hl
1721+ 25F3                              next
1721+ 25F3 DD E9       >                jp      (ix)
1722+ 25F5
1723+ 25F5
1724+ 25F5              //  ______________________________________________________________________
1725+ 25F5              //
1726+ 25F5              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1727+ 25F5              // picks the nth element from TOS
1728+ 25F5              //              New_Def ROLL, "ROLL", is_code, is_normal
1729+ 25F5              //              exx                     // we need all registers free
1730+ 25F5              //              pop     hl              // number of cells to roll
1731+ 25F5              //              ld      a, h
1732+ 25F5              //              or       l
1733+ 25F5              //              jr      z, Roll_Zero
1734+ 25F5              //                  add     hl, hl              // number of bytes to move
1735+ 25F5              //                  ld      b, h
1736+ 25F5              //                  ld      c, l
1737+ 25F5              //                  add     hl, sp          // address of n1
1738+ 25F5              //                  ld      a, (hl)         // take n1 into a and a,
1739+ 25F5              //                  inc     hl
1740+ 25F5              //                  ex      af, af'
1741+ 25F5              //                  ld      a, (hl)         // take n1 into a and a,
1742+ 25F5              //                  ld      d, h
1743+ 25F5              //                  ld      e, l
1744+ 25F5              //                  dec     hl
1745+ 25F5              //                  dec     hl
1746+ 25F5              //                  lddr
1747+ 25F5              //                  ex      de, hl
1748+ 25F5              //                  ld      (hl), a
1749+ 25F5              //                  dec     hl
1750+ 25F5              //                  ex      af, af'
1751+ 25F5              //                  ld      (hl), a
1752+ 25F5              //Roll_Zero:
1753+ 25F5              //              exx
1754+ 25F5              //              next
1755+ 25F5
1756+ 25F5
1757+ 25F5              //  ______________________________________________________________________
1758+ 25F5              //
1759+ 25F5              // 2over        d1 d2 -- d1 d2 d1
1760+ 25F5              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1761+ 25F5              // copy the second double of stack and put on top.
1762+ 25F5                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1762+ 25F5             >
1762+ 25F5             >Dict_Ptr        defl    $
1762+ 25F5             >
1762+ 25F5             >//              ______________________________________________________________________
1762+ 25F5             >//              Heap part
1762+ 25F5             >
1762+ 25F5             >
1762+ 25F5             >                org     (Heap_Ptr & $1FFF) + $E000
1762+ E32A             >
1762+ E32A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1762+ E32A             >Latest_Definition defl  Heap_Ptr
1762+ E32A             >
1762+ E32A             >                // dummy db directives used to calculate length of namec
1762+ E32A 32 4F 56 45 >                db      "2OVER"
1762+ E32E 52          >
1762+ E32F             >len_NFA         defl    $ - temp_NFA
1762+ E32F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1762+ E32A             >
1762+ E32A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1762+ E32B 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1762+ E32F 52          >
1762+ E330             >                org     $-1                 // alter last byte of Name just above to set
1762+ E32F D2          >                db      {b $} | END_BIT     // msb as name end
1762+ E330             >
1762+ E330 21 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1762+ E332             >Prev_Ptr        defl    Heap_Ptr
1762+ E332             >
1762+ E332             >mirror_Ptr      defl    $
1762+ E332             >
1762+ E332 F7 25       >                dw      Dict_Ptr + 2        // xt
1762+ E334             >Heap_Ptr        defl    $ - $E000           // save current HP
1762+ E334             >
1762+ E334             >Current_HP      defl  $ - $E000             // used to set HP once!
1762+ E334             >
1762+ E334             >//              ______________________________________________________________________
1762+ E334             >//              Dictionary part
1762+ E334             >
1762+ E334             >                org     Dict_Ptr
1762+ 25F5             >
1762+ 25F5 32 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1762+ 25F7             >
1762+ 25F7             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1762+ 25F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1762+ 25F7 ~           >
1762+ 25F7 ~           >
1762+ 25F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1762+ 25F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1762+ 25F7             >
1762+ 25F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1763+ 25F7 D9                           exx
1764+ 25F8 21 07 00                     ld      hl, 7
1765+ 25FB 39                           add     hl, sp
1766+ 25FC 56                           ld      d, (hl)
1767+ 25FD 2B                           dec     hl
1768+ 25FE 5E                           ld      e, (hl)             // d1-L
1769+ 25FF D5                           push    de
1770+ 2600 2B                           dec     hl
1771+ 2601 56                           ld      d, (hl)
1772+ 2602 2B                           dec     hl
1773+ 2603 5E                           ld      e, (hl)             // d1-H
1774+ 2604 D5                           push    de
1775+ 2605 D9                           exx
1776+ 2606                              next
1776+ 2606 DD E9       >                jp      (ix)
1777+ 2608
1778+ 2608              //  ______________________________________________________________________
1779+ 2608              //
1780+ 2608              // 2drop        d --
1781+ 2608              //              n1 n2 --
1782+ 2608              // drops the top double from stack
1783+ 2608                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1783+ 2608             >
1783+ 2608             >Dict_Ptr        defl    $
1783+ 2608             >
1783+ 2608             >//              ______________________________________________________________________
1783+ 2608             >//              Heap part
1783+ 2608             >
1783+ 2608             >
1783+ 2608             >                org     (Heap_Ptr & $1FFF) + $E000
1783+ E334             >
1783+ E334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1783+ E334             >Latest_Definition defl  Heap_Ptr
1783+ E334             >
1783+ E334             >                // dummy db directives used to calculate length of namec
1783+ E334 32 44 52 4F >                db      "2DROP"
1783+ E338 50          >
1783+ E339             >len_NFA         defl    $ - temp_NFA
1783+ E339             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1783+ E334             >
1783+ E334 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1783+ E335 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1783+ E339 50          >
1783+ E33A             >                org     $-1                 // alter last byte of Name just above to set
1783+ E339 D0          >                db      {b $} | END_BIT     // msb as name end
1783+ E33A             >
1783+ E33A 2A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1783+ E33C             >Prev_Ptr        defl    Heap_Ptr
1783+ E33C             >
1783+ E33C             >mirror_Ptr      defl    $
1783+ E33C             >
1783+ E33C 0A 26       >                dw      Dict_Ptr + 2        // xt
1783+ E33E             >Heap_Ptr        defl    $ - $E000           // save current HP
1783+ E33E             >
1783+ E33E             >Current_HP      defl  $ - $E000             // used to set HP once!
1783+ E33E             >
1783+ E33E             >//              ______________________________________________________________________
1783+ E33E             >//              Dictionary part
1783+ E33E             >
1783+ E33E             >                org     Dict_Ptr
1783+ 2608             >
1783+ 2608 3C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1783+ 260A             >
1783+ 260A             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1783+ 260A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1783+ 260A ~           >
1783+ 260A ~           >
1783+ 260A             >                endif           ; ok        // for other definitions it "points" the correct handler
1783+ 260A             >                // Use of "; ok" to suppress "warning[fwdref]"
1783+ 260A             >
1783+ 260A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1784+ 260A E1                           pop     hl
1785+ 260B E1                           pop     hl
1786+ 260C                              next
1786+ 260C DD E9       >                jp      (ix)
1787+ 260E
1788+ 260E              //  ______________________________________________________________________
1789+ 260E              //
1790+ 260E              // 2nip         d1 d2 -- d2
1791+ 260E              //              n1 n2 n3 n4 -- n3 n4
1792+ 260E              // drops the second double on the stack
1793+ 260E              //              New_Def TWO_NIP, 4, "2nip"
1794+ 260E              //              ...
1795+ 260E
1796+ 260E              //  ______________________________________________________________________
1797+ 260E              //
1798+ 260E              // 2tuck         d1 d2 -- d2 d1 d2
1799+ 260E              // copy the top element after the second.
1800+ 260E              //              New_Def TWO_TUCK, 5, "2tuck"
1801+ 260E              //              ...
1802+ 260E
1803+ 260E              //  ______________________________________________________________________
1804+ 260E              //
1805+ 260E              // 2swap         d1 d2 -- d2 d1
1806+ 260E              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1807+ 260E              // swaps the two doubles on top of stack
1808+ 260E                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1808+ 260E             >
1808+ 260E             >Dict_Ptr        defl    $
1808+ 260E             >
1808+ 260E             >//              ______________________________________________________________________
1808+ 260E             >//              Heap part
1808+ 260E             >
1808+ 260E             >
1808+ 260E             >                org     (Heap_Ptr & $1FFF) + $E000
1808+ E33E             >
1808+ E33E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1808+ E33E             >Latest_Definition defl  Heap_Ptr
1808+ E33E             >
1808+ E33E             >                // dummy db directives used to calculate length of namec
1808+ E33E 32 53 57 41 >                db      "2SWAP"
1808+ E342 50          >
1808+ E343             >len_NFA         defl    $ - temp_NFA
1808+ E343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1808+ E33E             >
1808+ E33E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1808+ E33F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1808+ E343 50          >
1808+ E344             >                org     $-1                 // alter last byte of Name just above to set
1808+ E343 D0          >                db      {b $} | END_BIT     // msb as name end
1808+ E344             >
1808+ E344 34 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1808+ E346             >Prev_Ptr        defl    Heap_Ptr
1808+ E346             >
1808+ E346             >mirror_Ptr      defl    $
1808+ E346             >
1808+ E346 10 26       >                dw      Dict_Ptr + 2        // xt
1808+ E348             >Heap_Ptr        defl    $ - $E000           // save current HP
1808+ E348             >
1808+ E348             >Current_HP      defl  $ - $E000             // used to set HP once!
1808+ E348             >
1808+ E348             >//              ______________________________________________________________________
1808+ E348             >//              Dictionary part
1808+ E348             >
1808+ E348             >                org     Dict_Ptr
1808+ 260E             >
1808+ 260E 46 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1808+ 2610             >
1808+ 2610             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1808+ 2610 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1808+ 2610 ~           >
1808+ 2610 ~           >
1808+ 2610             >                endif           ; ok        // for other definitions it "points" the correct handler
1808+ 2610             >                // Use of "; ok" to suppress "warning[fwdref]"
1808+ 2610             >
1808+ 2610             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1809+ 2610 D9                           exx
1810+ 2611 F1                           pop     af                  //   d2-H
1811+ 2612 E1                           pop     hl                  // < d2-L
1812+ 2613 D1                           pop     de                  // < d1-H
1813+ 2614 E3                           ex      (sp), hl            // < d1-L > d2-L
1814+ 2615 F5                           push    af                  // > d2-H
1815+ 2616 E5                           push    hl                  // > d1-L
1816+ 2617 D5                           push    de
1817+ 2618 D9                           exx
1818+ 2619                              next
1818+ 2619 DD E9       >                jp      (ix)
1819+ 261B
1820+ 261B              //  ______________________________________________________________________
1821+ 261B              //
1822+ 261B              // 2dup         d -- d d
1823+ 261B              //              n1 n2 -- n1 n2 n1 n2
1824+ 261B              // duplicates the top double of stack
1825+ 261B                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1825+ 261B             >
1825+ 261B             >Dict_Ptr        defl    $
1825+ 261B             >
1825+ 261B             >//              ______________________________________________________________________
1825+ 261B             >//              Heap part
1825+ 261B             >
1825+ 261B             >
1825+ 261B             >                org     (Heap_Ptr & $1FFF) + $E000
1825+ E348             >
1825+ E348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1825+ E348             >Latest_Definition defl  Heap_Ptr
1825+ E348             >
1825+ E348             >                // dummy db directives used to calculate length of namec
1825+ E348 32 44 55 50 >                db      "2DUP"
1825+ E34C             >len_NFA         defl    $ - temp_NFA
1825+ E34C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1825+ E348             >
1825+ E348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1825+ E349 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1825+ E34D             >                org     $-1                 // alter last byte of Name just above to set
1825+ E34C D0          >                db      {b $} | END_BIT     // msb as name end
1825+ E34D             >
1825+ E34D 3E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1825+ E34F             >Prev_Ptr        defl    Heap_Ptr
1825+ E34F             >
1825+ E34F             >mirror_Ptr      defl    $
1825+ E34F             >
1825+ E34F 1D 26       >                dw      Dict_Ptr + 2        // xt
1825+ E351             >Heap_Ptr        defl    $ - $E000           // save current HP
1825+ E351             >
1825+ E351             >Current_HP      defl  $ - $E000             // used to set HP once!
1825+ E351             >
1825+ E351             >//              ______________________________________________________________________
1825+ E351             >//              Dictionary part
1825+ E351             >
1825+ E351             >                org     Dict_Ptr
1825+ 261B             >
1825+ 261B 4F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1825+ 261D             >
1825+ 261D             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1825+ 261D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1825+ 261D ~           >
1825+ 261D ~           >
1825+ 261D             >                endif           ; ok        // for other definitions it "points" the correct handler
1825+ 261D             >                // Use of "; ok" to suppress "warning[fwdref]"
1825+ 261D             >
1825+ 261D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1826+ 261D E1                           pop     hl                  // < d-H
1827+ 261E F1                           pop     af                  // < d-L
1828+ 261F F5                           push    af                  // < d-L
1829+ 2620 E5                           push    hl                  // > d-H
1830+ 2621 F5                           push    af                  // > d-L
1831+ 2622 E5                           push    hl                  // > d-H
1832+ 2623                              next
1832+ 2623 DD E9       >                jp      (ix)
1833+ 2625
1834+ 2625              //  ______________________________________________________________________
1835+ 2625              //
1836+ 2625              // 2rot         d1 d2 d3 -- d2 d3 d1
1837+ 2625              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1838+ 2625              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1839+ 2625              // and putting it on top. The other two are shifted down one place.
1840+ 2625              //              New_Def TWO?ROT, 4, "2rot"
1841+ 2625              //              ...
1842+ 2625              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1843+ 2625              //
1844+ 2625              //      d3  |d2  |d1  |
1845+ 2625              //      h l |h l |h l |
1846+ 2625              // SP   LHED|LHED|LHED|
1847+ 2625              // SP  +0123|4567|89ab|
1848+ 2625              //              ld      hl, $000B
1849+ 2625              //              add     hl, sp
1850+ 2625              //              ld      d, (hl)
1851+ 2625              //              dec     hl
1852+ 2625              //              ld      e, (hl)
1853+ 2625              //              dec     hl
1854+ 2625              //              push    de
1855+ 2625              //              ld      d, (hl)
1856+ 2625              //              dec     hl
1857+ 2625              //              ld      e, (hl)
1858+ 2625              //              dec     hl
1859+ 2625              //              push    de
1860+ 2625
1861+ 2625              //      d1  |d3  |d2  |d1  |
1862+ 2625              //      h l |h l |h l |h l |
1863+ 2625              // SP   LHED|LHED|LHED|LHED|
1864+ 2625              // SP       +0123|4567|89ab|
1865+ 2625
1866+ 2625              //              ld      d, h
1867+ 2625              //              ld      e, l
1868+ 2625              //              inc     de
1869+ 2625              //              inc     de
1870+ 2625              //              inc     de
1871+ 2625              //              inc     de
1872+ 2625              //              push    bc
1873+ 2625              //              ld      bc, $000C
1874+ 2625              //              lddr
1875+ 2625              //              pop     bc
1876+ 2625              //              pop     de
1877+ 2625              //              pop     de
1878+ 2625              //
1879+ 2625              //              next
1880+ 2625
1881+ 2625
1882+ 2625              //  ______________________________________________________________________
1883+ 2625              //
1884+ 2625              // +!           n a --
1885+ 2625              // Sums to the content of address a the number n.
1886+ 2625              // It is the same of  a @ n + a !
1887+ 2625                              New_Def PLUSSTORE, "+!", is_code, is_normal
1887+ 2625             >
1887+ 2625             >Dict_Ptr        defl    $
1887+ 2625             >
1887+ 2625             >//              ______________________________________________________________________
1887+ 2625             >//              Heap part
1887+ 2625             >
1887+ 2625             >
1887+ 2625             >                org     (Heap_Ptr & $1FFF) + $E000
1887+ E351             >
1887+ E351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1887+ E351             >Latest_Definition defl  Heap_Ptr
1887+ E351             >
1887+ E351             >                // dummy db directives used to calculate length of namec
1887+ E351 2B 21       >                db      "+!"
1887+ E353             >len_NFA         defl    $ - temp_NFA
1887+ E353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1887+ E351             >
1887+ E351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1887+ E352 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1887+ E354             >                org     $-1                 // alter last byte of Name just above to set
1887+ E353 A1          >                db      {b $} | END_BIT     // msb as name end
1887+ E354             >
1887+ E354 48 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1887+ E356             >Prev_Ptr        defl    Heap_Ptr
1887+ E356             >
1887+ E356             >mirror_Ptr      defl    $
1887+ E356             >
1887+ E356 27 26       >                dw      Dict_Ptr + 2        // xt
1887+ E358             >Heap_Ptr        defl    $ - $E000           // save current HP
1887+ E358             >
1887+ E358             >Current_HP      defl  $ - $E000             // used to set HP once!
1887+ E358             >
1887+ E358             >//              ______________________________________________________________________
1887+ E358             >//              Dictionary part
1887+ E358             >
1887+ E358             >                org     Dict_Ptr
1887+ 2625             >
1887+ 2625 56 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1887+ 2627             >
1887+ 2627             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1887+ 2627 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1887+ 2627 ~           >
1887+ 2627 ~           >
1887+ 2627             >                endif           ; ok        // for other definitions it "points" the correct handler
1887+ 2627             >                // Use of "; ok" to suppress "warning[fwdref]"
1887+ 2627             >
1887+ 2627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1888+ 2627 D9                           exx
1889+ 2628 E1                           pop     hl                  // hl is the address
1890+ 2629 D1                           pop     de                  // de is the number
1891+ 262A 7E                           ld      a, (hl)
1892+ 262B 83                           add     e
1893+ 262C 77                           ld      (hl), a
1894+ 262D 23                           inc     hl
1895+ 262E 7E                           ld      a, (hl)
1896+ 262F 8A                           adc     d
1897+ 2630 77                           ld      (hl), a
1898+ 2631 D9                           exx
1899+ 2632                              next
1899+ 2632 DD E9       >                jp      (ix)
1900+ 2634
1901+ 2634              //  ______________________________________________________________________
1902+ 2634              //
1903+ 2634              // toggle       a n --
1904+ 2634              // Complements (xor) the byte at addrress  a  with the model n.
1905+ 2634                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1905+ 2634             >
1905+ 2634             >Dict_Ptr        defl    $
1905+ 2634             >
1905+ 2634             >//              ______________________________________________________________________
1905+ 2634             >//              Heap part
1905+ 2634             >
1905+ 2634             >
1905+ 2634             >                org     (Heap_Ptr & $1FFF) + $E000
1905+ E358             >
1905+ E358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1905+ E358             >Latest_Definition defl  Heap_Ptr
1905+ E358             >
1905+ E358             >                // dummy db directives used to calculate length of namec
1905+ E358 54 4F 47 47 >                db      "TOGGLE"
1905+ E35C 4C 45       >
1905+ E35E             >len_NFA         defl    $ - temp_NFA
1905+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1905+ E358             >
1905+ E358 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1905+ E359 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1905+ E35D 4C 45       >
1905+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1905+ E35E C5          >                db      {b $} | END_BIT     // msb as name end
1905+ E35F             >
1905+ E35F 51 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1905+ E361             >Prev_Ptr        defl    Heap_Ptr
1905+ E361             >
1905+ E361             >mirror_Ptr      defl    $
1905+ E361             >
1905+ E361 36 26       >                dw      Dict_Ptr + 2        // xt
1905+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1905+ E363             >
1905+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1905+ E363             >
1905+ E363             >//              ______________________________________________________________________
1905+ E363             >//              Dictionary part
1905+ E363             >
1905+ E363             >                org     Dict_Ptr
1905+ 2634             >
1905+ 2634 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1905+ 2636             >
1905+ 2636             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1905+ 2636 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1905+ 2636 ~           >
1905+ 2636 ~           >
1905+ 2636             >                endif           ; ok        // for other definitions it "points" the correct handler
1905+ 2636             >                // Use of "; ok" to suppress "warning[fwdref]"
1905+ 2636             >
1905+ 2636             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1906+ 2636 E1                           pop     hl
1907+ 2637 7D                           ld      a, l
1908+ 2638 E1                           pop     hl
1909+ 2639 AE                           xor     (hl)
1910+ 263A 77                           ld      (hl), a
1911+ 263B
1912+ 263B                              next
1912+ 263B DD E9       >                jp      (ix)
1913+ 263D
1914+ 263D              //  ______________________________________________________________________
1915+ 263D              //
1916+ 263D              // @            a -- n
1917+ 263D              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1918+ 263D                              New_Def FETCH, "@", is_code, is_normal
1918+ 263D             >
1918+ 263D             >Dict_Ptr        defl    $
1918+ 263D             >
1918+ 263D             >//              ______________________________________________________________________
1918+ 263D             >//              Heap part
1918+ 263D             >
1918+ 263D             >
1918+ 263D             >                org     (Heap_Ptr & $1FFF) + $E000
1918+ E363             >
1918+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1918+ E363             >Latest_Definition defl  Heap_Ptr
1918+ E363             >
1918+ E363             >                // dummy db directives used to calculate length of namec
1918+ E363 40          >                db      "@"
1918+ E364             >len_NFA         defl    $ - temp_NFA
1918+ E364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1918+ E363             >
1918+ E363 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1918+ E364 40          >                db      "@"               // name string in 7-bit ascii, but
1918+ E365             >                org     $-1                 // alter last byte of Name just above to set
1918+ E364 C0          >                db      {b $} | END_BIT     // msb as name end
1918+ E365             >
1918+ E365 58 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1918+ E367             >Prev_Ptr        defl    Heap_Ptr
1918+ E367             >
1918+ E367             >mirror_Ptr      defl    $
1918+ E367             >
1918+ E367 3F 26       >                dw      Dict_Ptr + 2        // xt
1918+ E369             >Heap_Ptr        defl    $ - $E000           // save current HP
1918+ E369             >
1918+ E369             >Current_HP      defl  $ - $E000             // used to set HP once!
1918+ E369             >
1918+ E369             >//              ______________________________________________________________________
1918+ E369             >//              Dictionary part
1918+ E369             >
1918+ E369             >                org     Dict_Ptr
1918+ 263D             >
1918+ 263D 67 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1918+ 263F             >
1918+ 263F             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1918+ 263F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1918+ 263F ~           >
1918+ 263F ~           >
1918+ 263F             >                endif           ; ok        // for other definitions it "points" the correct handler
1918+ 263F             >                // Use of "; ok" to suppress "warning[fwdref]"
1918+ 263F             >
1918+ 263F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1919+ 263F E1                           pop     hl
1920+ 2640 7E                           ld      a, (hl)             // low-byte
1921+ 2641 23                           inc     hl
1922+ 2642 66                           ld      h, (hl)             // high-byte
1923+ 2643 6F                           ld      l, a
1924+ 2644 E5                           push    hl
1925+ 2645                              next
1925+ 2645 DD E9       >                jp      (ix)
1926+ 2647
1927+ 2647              //  ______________________________________________________________________
1928+ 2647              //
1929+ 2647              // !            n a --
1930+ 2647              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1931+ 2647                              New_Def STORE, "!", is_code, is_normal
1931+ 2647             >
1931+ 2647             >Dict_Ptr        defl    $
1931+ 2647             >
1931+ 2647             >//              ______________________________________________________________________
1931+ 2647             >//              Heap part
1931+ 2647             >
1931+ 2647             >
1931+ 2647             >                org     (Heap_Ptr & $1FFF) + $E000
1931+ E369             >
1931+ E369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1931+ E369             >Latest_Definition defl  Heap_Ptr
1931+ E369             >
1931+ E369             >                // dummy db directives used to calculate length of namec
1931+ E369 21          >                db      "!"
1931+ E36A             >len_NFA         defl    $ - temp_NFA
1931+ E36A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1931+ E369             >
1931+ E369 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1931+ E36A 21          >                db      "!"               // name string in 7-bit ascii, but
1931+ E36B             >                org     $-1                 // alter last byte of Name just above to set
1931+ E36A A1          >                db      {b $} | END_BIT     // msb as name end
1931+ E36B             >
1931+ E36B 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1931+ E36D             >Prev_Ptr        defl    Heap_Ptr
1931+ E36D             >
1931+ E36D             >mirror_Ptr      defl    $
1931+ E36D             >
1931+ E36D 49 26       >                dw      Dict_Ptr + 2        // xt
1931+ E36F             >Heap_Ptr        defl    $ - $E000           // save current HP
1931+ E36F             >
1931+ E36F             >Current_HP      defl  $ - $E000             // used to set HP once!
1931+ E36F             >
1931+ E36F             >//              ______________________________________________________________________
1931+ E36F             >//              Dictionary part
1931+ E36F             >
1931+ E36F             >                org     Dict_Ptr
1931+ 2647             >
1931+ 2647 6D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1931+ 2649             >
1931+ 2649             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1931+ 2649 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1931+ 2649 ~           >
1931+ 2649 ~           >
1931+ 2649             >                endif           ; ok        // for other definitions it "points" the correct handler
1931+ 2649             >                // Use of "; ok" to suppress "warning[fwdref]"
1931+ 2649             >
1931+ 2649             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1932+ 2649 D9                           exx
1933+ 264A E1                           pop     hl                  // address
1934+ 264B D1                           pop     de                  // < n
1935+ 264C 73                           ld      (hl), e             // low-byte
1936+ 264D 23                           inc     hl
1937+ 264E 72                           ld      (hl), d             // high-byte
1938+ 264F D9                           exx
1939+ 2650                              next
1939+ 2650 DD E9       >                jp      (ix)
1940+ 2652
1941+ 2652              //  ______________________________________________________________________
1942+ 2652              //
1943+ 2652              // c@           a -- c
1944+ 2652              // fetch a character n from address a
1945+ 2652                              New_Def CFETCH, "C@", is_code, is_normal
1945+ 2652             >
1945+ 2652             >Dict_Ptr        defl    $
1945+ 2652             >
1945+ 2652             >//              ______________________________________________________________________
1945+ 2652             >//              Heap part
1945+ 2652             >
1945+ 2652             >
1945+ 2652             >                org     (Heap_Ptr & $1FFF) + $E000
1945+ E36F             >
1945+ E36F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1945+ E36F             >Latest_Definition defl  Heap_Ptr
1945+ E36F             >
1945+ E36F             >                // dummy db directives used to calculate length of namec
1945+ E36F 43 40       >                db      "C@"
1945+ E371             >len_NFA         defl    $ - temp_NFA
1945+ E371             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1945+ E36F             >
1945+ E36F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1945+ E370 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1945+ E372             >                org     $-1                 // alter last byte of Name just above to set
1945+ E371 C0          >                db      {b $} | END_BIT     // msb as name end
1945+ E372             >
1945+ E372 69 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1945+ E374             >Prev_Ptr        defl    Heap_Ptr
1945+ E374             >
1945+ E374             >mirror_Ptr      defl    $
1945+ E374             >
1945+ E374 54 26       >                dw      Dict_Ptr + 2        // xt
1945+ E376             >Heap_Ptr        defl    $ - $E000           // save current HP
1945+ E376             >
1945+ E376             >Current_HP      defl  $ - $E000             // used to set HP once!
1945+ E376             >
1945+ E376             >//              ______________________________________________________________________
1945+ E376             >//              Dictionary part
1945+ E376             >
1945+ E376             >                org     Dict_Ptr
1945+ 2652             >
1945+ 2652 74 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1945+ 2654             >
1945+ 2654             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1945+ 2654 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1945+ 2654 ~           >
1945+ 2654 ~           >
1945+ 2654             >                endif           ; ok        // for other definitions it "points" the correct handler
1945+ 2654             >                // Use of "; ok" to suppress "warning[fwdref]"
1945+ 2654             >
1945+ 2654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1946+ 2654 E1                           pop     hl
1947+ 2655 6E                           ld      l, (hl)             // low-byte
1948+ 2656 26 00                        ld      h, 0
1949+ 2658
1950+ 2658                              psh1
1950+ 2658 E5          >                push    hl
1950+ 2659 DD E9       >                jp      (ix)
1951+ 265B
1952+ 265B              //  ______________________________________________________________________
1953+ 265B              //
1954+ 265B              // c!           c a --
1955+ 265B              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1956+ 265B                              New_Def CSTORE, "C!", is_code, is_normal
1956+ 265B             >
1956+ 265B             >Dict_Ptr        defl    $
1956+ 265B             >
1956+ 265B             >//              ______________________________________________________________________
1956+ 265B             >//              Heap part
1956+ 265B             >
1956+ 265B             >
1956+ 265B             >                org     (Heap_Ptr & $1FFF) + $E000
1956+ E376             >
1956+ E376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1956+ E376             >Latest_Definition defl  Heap_Ptr
1956+ E376             >
1956+ E376             >                // dummy db directives used to calculate length of namec
1956+ E376 43 21       >                db      "C!"
1956+ E378             >len_NFA         defl    $ - temp_NFA
1956+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1956+ E376             >
1956+ E376 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1956+ E377 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1956+ E379             >                org     $-1                 // alter last byte of Name just above to set
1956+ E378 A1          >                db      {b $} | END_BIT     // msb as name end
1956+ E379             >
1956+ E379 6F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1956+ E37B             >Prev_Ptr        defl    Heap_Ptr
1956+ E37B             >
1956+ E37B             >mirror_Ptr      defl    $
1956+ E37B             >
1956+ E37B 5D 26       >                dw      Dict_Ptr + 2        // xt
1956+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
1956+ E37D             >
1956+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
1956+ E37D             >
1956+ E37D             >//              ______________________________________________________________________
1956+ E37D             >//              Dictionary part
1956+ E37D             >
1956+ E37D             >                org     Dict_Ptr
1956+ 265B             >
1956+ 265B 7B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1956+ 265D             >
1956+ 265D             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1956+ 265D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1956+ 265D ~           >
1956+ 265D ~           >
1956+ 265D             >                endif           ; ok        // for other definitions it "points" the correct handler
1956+ 265D             >                // Use of "; ok" to suppress "warning[fwdref]"
1956+ 265D             >
1956+ 265D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1957+ 265D D9                           exx
1958+ 265E E1                           pop     hl                  // < address
1959+ 265F D1                           pop     de
1960+ 2660 73                           ld      (hl), e             // low-byte
1961+ 2661 D9                           exx
1962+ 2662                              next
1962+ 2662 DD E9       >                jp      (ix)
1963+ 2664
1964+ 2664              //  ______________________________________________________________________
1965+ 2664              //
1966+ 2664              // 2@           a -- d
1967+ 2664              // fetch a 32 bits number d from address a and leaves it on top of the
1968+ 2664              // stack as two single numbers, high part as top of the stack.
1969+ 2664              // A double number is normally kept in CPU registers as HLDE.
1970+ 2664              // On stack a double number is treated as two single numbers
1971+ 2664              // where BC is on the top of the stack and HL is the second from top,
1972+ 2664              // so the sign of the number can be checked on top of stack
1973+ 2664              // and in the stack memory it appears as LHED.
1974+ 2664                              New_Def TWO_FETCH, "2@", is_code, is_normal
1974+ 2664             >
1974+ 2664             >Dict_Ptr        defl    $
1974+ 2664             >
1974+ 2664             >//              ______________________________________________________________________
1974+ 2664             >//              Heap part
1974+ 2664             >
1974+ 2664             >
1974+ 2664             >                org     (Heap_Ptr & $1FFF) + $E000
1974+ E37D             >
1974+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1974+ E37D             >Latest_Definition defl  Heap_Ptr
1974+ E37D             >
1974+ E37D             >                // dummy db directives used to calculate length of namec
1974+ E37D 32 40       >                db      "2@"
1974+ E37F             >len_NFA         defl    $ - temp_NFA
1974+ E37F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1974+ E37D             >
1974+ E37D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1974+ E37E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1974+ E380             >                org     $-1                 // alter last byte of Name just above to set
1974+ E37F C0          >                db      {b $} | END_BIT     // msb as name end
1974+ E380             >
1974+ E380 76 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1974+ E382             >Prev_Ptr        defl    Heap_Ptr
1974+ E382             >
1974+ E382             >mirror_Ptr      defl    $
1974+ E382             >
1974+ E382 66 26       >                dw      Dict_Ptr + 2        // xt
1974+ E384             >Heap_Ptr        defl    $ - $E000           // save current HP
1974+ E384             >
1974+ E384             >Current_HP      defl  $ - $E000             // used to set HP once!
1974+ E384             >
1974+ E384             >//              ______________________________________________________________________
1974+ E384             >//              Dictionary part
1974+ E384             >
1974+ E384             >                org     Dict_Ptr
1974+ 2664             >
1974+ 2664 82 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1974+ 2666             >
1974+ 2666             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1974+ 2666 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1974+ 2666 ~           >
1974+ 2666 ~           >
1974+ 2666             >                endif           ; ok        // for other definitions it "points" the correct handler
1974+ 2666             >                // Use of "; ok" to suppress "warning[fwdref]"
1974+ 2666             >
1974+ 2666             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1975+ 2666 D9                           exx
1976+ 2667 E1                           pop     hl                  // address
1977+ 2668 5E                           ld      e, (hl)             // low-byte
1978+ 2669 23                           inc     hl
1979+ 266A 56                           ld      d, (hl)             // high-byte
1980+ 266B 23                           inc     hl
1981+ 266C 7E                           ld      a, (hl)             // low-byte
1982+ 266D 23                           inc     hl
1983+ 266E 66                           ld      h, (hl)             // high-byte
1984+ 266F 6F                           ld      l, a
1985+ 2670 E5                           push    hl
1986+ 2671 D5                           push    de
1987+ 2672 D9                           exx
1988+ 2673                              next
1988+ 2673 DD E9       >                jp      (ix)
1989+ 2675
1990+ 2675              //  ______________________________________________________________________
1991+ 2675              //
1992+ 2675              // 2!           d a --
1993+ 2675              // stores a 32 bits number d from address a and leaves it on top of the
1994+ 2675              // stack as two single numbers, high part as top of the stack.
1995+ 2675              // A double number is normally kept in CPU registers as HLDE.
1996+ 2675              // On stack a double number is treated as two single numbers
1997+ 2675              // where BC is on the top of the stack and HL is the second from top,
1998+ 2675              // so the sign of the number can be checked on top of stack
1999+ 2675              // and in the stack memory it appears as LHED.
2000+ 2675                              New_Def TWO_STORE, "2!", is_code, is_normal
2000+ 2675             >
2000+ 2675             >Dict_Ptr        defl    $
2000+ 2675             >
2000+ 2675             >//              ______________________________________________________________________
2000+ 2675             >//              Heap part
2000+ 2675             >
2000+ 2675             >
2000+ 2675             >                org     (Heap_Ptr & $1FFF) + $E000
2000+ E384             >
2000+ E384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2000+ E384             >Latest_Definition defl  Heap_Ptr
2000+ E384             >
2000+ E384             >                // dummy db directives used to calculate length of namec
2000+ E384 32 21       >                db      "2!"
2000+ E386             >len_NFA         defl    $ - temp_NFA
2000+ E386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2000+ E384             >
2000+ E384 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2000+ E385 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2000+ E387             >                org     $-1                 // alter last byte of Name just above to set
2000+ E386 A1          >                db      {b $} | END_BIT     // msb as name end
2000+ E387             >
2000+ E387 7D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2000+ E389             >Prev_Ptr        defl    Heap_Ptr
2000+ E389             >
2000+ E389             >mirror_Ptr      defl    $
2000+ E389             >
2000+ E389 77 26       >                dw      Dict_Ptr + 2        // xt
2000+ E38B             >Heap_Ptr        defl    $ - $E000           // save current HP
2000+ E38B             >
2000+ E38B             >Current_HP      defl  $ - $E000             // used to set HP once!
2000+ E38B             >
2000+ E38B             >//              ______________________________________________________________________
2000+ E38B             >//              Dictionary part
2000+ E38B             >
2000+ E38B             >                org     Dict_Ptr
2000+ 2675             >
2000+ 2675 89 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2000+ 2677             >
2000+ 2677             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2000+ 2677 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2000+ 2677 ~           >
2000+ 2677 ~           >
2000+ 2677             >                endif           ; ok        // for other definitions it "points" the correct handler
2000+ 2677             >                // Use of "; ok" to suppress "warning[fwdref]"
2000+ 2677             >
2000+ 2677             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2001+ 2677 D9                           exx
2002+ 2678 E1                           pop     hl                  // address
2003+ 2679 C1                           pop     bc                  // < high-part
2004+ 267A D1                           pop     de                  // < low-part > Instruction Pointer
2005+ 267B 71                           ld      (hl), c
2006+ 267C 23                           inc     hl
2007+ 267D 70                           ld      (hl), b
2008+ 267E 23                           inc     hl
2009+ 267F 73                           ld      (hl), e
2010+ 2680 23                           inc     hl
2011+ 2681 72                           ld      (hl), d
2012+ 2682 D9                           exx
2013+ 2683                              next
2013+ 2683 DD E9       >                jp      (ix)
2014+ 2685
2015+ 2685              //  ______________________________________________________________________
2016+ 2685              //
2017+ 2685              // p@           a -- c
2018+ 2685              // Read one byte from port a and leave the result on top of stack
2019+ 2685                              New_Def PFETCH, "P@", is_code, is_normal
2019+ 2685             >
2019+ 2685             >Dict_Ptr        defl    $
2019+ 2685             >
2019+ 2685             >//              ______________________________________________________________________
2019+ 2685             >//              Heap part
2019+ 2685             >
2019+ 2685             >
2019+ 2685             >                org     (Heap_Ptr & $1FFF) + $E000
2019+ E38B             >
2019+ E38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2019+ E38B             >Latest_Definition defl  Heap_Ptr
2019+ E38B             >
2019+ E38B             >                // dummy db directives used to calculate length of namec
2019+ E38B 50 40       >                db      "P@"
2019+ E38D             >len_NFA         defl    $ - temp_NFA
2019+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2019+ E38B             >
2019+ E38B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2019+ E38C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2019+ E38E             >                org     $-1                 // alter last byte of Name just above to set
2019+ E38D C0          >                db      {b $} | END_BIT     // msb as name end
2019+ E38E             >
2019+ E38E 84 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2019+ E390             >Prev_Ptr        defl    Heap_Ptr
2019+ E390             >
2019+ E390             >mirror_Ptr      defl    $
2019+ E390             >
2019+ E390 87 26       >                dw      Dict_Ptr + 2        // xt
2019+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
2019+ E392             >
2019+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
2019+ E392             >
2019+ E392             >//              ______________________________________________________________________
2019+ E392             >//              Dictionary part
2019+ E392             >
2019+ E392             >                org     Dict_Ptr
2019+ 2685             >
2019+ 2685 90 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2019+ 2687             >
2019+ 2687             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2019+ 2687 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2019+ 2687 ~           >
2019+ 2687 ~           >
2019+ 2687             >                endif           ; ok        // for other definitions it "points" the correct handler
2019+ 2687             >                // Use of "; ok" to suppress "warning[fwdref]"
2019+ 2687             >
2019+ 2687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2020+ 2687 D9                           exx
2021+ 2688 C1                           pop     bc
2022+ 2689 26 00                        ld      h, 0
2023+ 268B ED 68                        in      l, (c)
2024+ 268D E5                           push    hl
2025+ 268E D9                           exx
2026+ 268F                              next
2026+ 268F DD E9       >                jp      (ix)
2027+ 2691
2028+ 2691              //  ______________________________________________________________________
2029+ 2691              //
2030+ 2691              // p!           c a --
2031+ 2691              // Send one byte (top of stack) to port a
2032+ 2691                              New_Def PSTORE, "P!", is_code, is_normal
2032+ 2691             >
2032+ 2691             >Dict_Ptr        defl    $
2032+ 2691             >
2032+ 2691             >//              ______________________________________________________________________
2032+ 2691             >//              Heap part
2032+ 2691             >
2032+ 2691             >
2032+ 2691             >                org     (Heap_Ptr & $1FFF) + $E000
2032+ E392             >
2032+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2032+ E392             >Latest_Definition defl  Heap_Ptr
2032+ E392             >
2032+ E392             >                // dummy db directives used to calculate length of namec
2032+ E392 50 21       >                db      "P!"
2032+ E394             >len_NFA         defl    $ - temp_NFA
2032+ E394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2032+ E392             >
2032+ E392 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2032+ E393 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2032+ E395             >                org     $-1                 // alter last byte of Name just above to set
2032+ E394 A1          >                db      {b $} | END_BIT     // msb as name end
2032+ E395             >
2032+ E395 8B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2032+ E397             >Prev_Ptr        defl    Heap_Ptr
2032+ E397             >
2032+ E397             >mirror_Ptr      defl    $
2032+ E397             >
2032+ E397 93 26       >                dw      Dict_Ptr + 2        // xt
2032+ E399             >Heap_Ptr        defl    $ - $E000           // save current HP
2032+ E399             >
2032+ E399             >Current_HP      defl  $ - $E000             // used to set HP once!
2032+ E399             >
2032+ E399             >//              ______________________________________________________________________
2032+ E399             >//              Dictionary part
2032+ E399             >
2032+ E399             >                org     Dict_Ptr
2032+ 2691             >
2032+ 2691 97 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2032+ 2693             >
2032+ 2693             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2032+ 2693 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2032+ 2693 ~           >
2032+ 2693 ~           >
2032+ 2693             >                endif           ; ok        // for other definitions it "points" the correct handler
2032+ 2693             >                // Use of "; ok" to suppress "warning[fwdref]"
2032+ 2693             >
2032+ 2693             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2033+ 2693 D9                           exx
2034+ 2694 C1                           pop     bc
2035+ 2695 E1                           pop     hl                  // < c
2036+ 2696 ED 69                        out     (c), l              // low-byte
2037+ 2698 D9                           exx
2038+ 2699                              next
2038+ 2699 DD E9       >                jp      (ix)
2039+ 269B
2040+ 269B
2041+ 269B              //  ______________________________________________________________________
2042+ 269B              //
2043+ 269B              // 2*           n1 -- n2
2044+ 269B              // doubles the number at top of stack
2045+ 269B                              New_Def TWO_MUL, "2*", is_code, is_normal
2045+ 269B             >
2045+ 269B             >Dict_Ptr        defl    $
2045+ 269B             >
2045+ 269B             >//              ______________________________________________________________________
2045+ 269B             >//              Heap part
2045+ 269B             >
2045+ 269B             >
2045+ 269B             >                org     (Heap_Ptr & $1FFF) + $E000
2045+ E399             >
2045+ E399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2045+ E399             >Latest_Definition defl  Heap_Ptr
2045+ E399             >
2045+ E399             >                // dummy db directives used to calculate length of namec
2045+ E399 32 2A       >                db      "2*"
2045+ E39B             >len_NFA         defl    $ - temp_NFA
2045+ E39B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2045+ E399             >
2045+ E399 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2045+ E39A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2045+ E39C             >                org     $-1                 // alter last byte of Name just above to set
2045+ E39B AA          >                db      {b $} | END_BIT     // msb as name end
2045+ E39C             >
2045+ E39C 92 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2045+ E39E             >Prev_Ptr        defl    Heap_Ptr
2045+ E39E             >
2045+ E39E             >mirror_Ptr      defl    $
2045+ E39E             >
2045+ E39E 9D 26       >                dw      Dict_Ptr + 2        // xt
2045+ E3A0             >Heap_Ptr        defl    $ - $E000           // save current HP
2045+ E3A0             >
2045+ E3A0             >Current_HP      defl  $ - $E000             // used to set HP once!
2045+ E3A0             >
2045+ E3A0             >//              ______________________________________________________________________
2045+ E3A0             >//              Dictionary part
2045+ E3A0             >
2045+ E3A0             >                org     Dict_Ptr
2045+ 269B             >
2045+ 269B 9E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2045+ 269D             >
2045+ 269D             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2045+ 269D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2045+ 269D ~           >
2045+ 269D ~           >
2045+ 269D             >                endif           ; ok        // for other definitions it "points" the correct handler
2045+ 269D             >                // Use of "; ok" to suppress "warning[fwdref]"
2045+ 269D             >
2045+ 269D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2046+ 269D              Two_Mul_Ptr:
2047+ 269D E1                           pop     hl
2048+ 269E 29                           add     hl, hl
2049+ 269F
2050+ 269F                              psh1
2050+ 269F E5          >                push    hl
2050+ 26A0 DD E9       >                jp      (ix)
2051+ 26A2
2052+ 26A2              //  ______________________________________________________________________
2053+ 26A2              //
2054+ 26A2              // 2/           n1 -- n2
2055+ 26A2              // halves the top of stack, sign is unchanged
2056+ 26A2                              New_Def TWO_DIV, "2/", is_code, is_normal
2056+ 26A2             >
2056+ 26A2             >Dict_Ptr        defl    $
2056+ 26A2             >
2056+ 26A2             >//              ______________________________________________________________________
2056+ 26A2             >//              Heap part
2056+ 26A2             >
2056+ 26A2             >
2056+ 26A2             >                org     (Heap_Ptr & $1FFF) + $E000
2056+ E3A0             >
2056+ E3A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2056+ E3A0             >Latest_Definition defl  Heap_Ptr
2056+ E3A0             >
2056+ E3A0             >                // dummy db directives used to calculate length of namec
2056+ E3A0 32 2F       >                db      "2/"
2056+ E3A2             >len_NFA         defl    $ - temp_NFA
2056+ E3A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2056+ E3A0             >
2056+ E3A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2056+ E3A1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2056+ E3A3             >                org     $-1                 // alter last byte of Name just above to set
2056+ E3A2 AF          >                db      {b $} | END_BIT     // msb as name end
2056+ E3A3             >
2056+ E3A3 99 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2056+ E3A5             >Prev_Ptr        defl    Heap_Ptr
2056+ E3A5             >
2056+ E3A5             >mirror_Ptr      defl    $
2056+ E3A5             >
2056+ E3A5 A4 26       >                dw      Dict_Ptr + 2        // xt
2056+ E3A7             >Heap_Ptr        defl    $ - $E000           // save current HP
2056+ E3A7             >
2056+ E3A7             >Current_HP      defl  $ - $E000             // used to set HP once!
2056+ E3A7             >
2056+ E3A7             >//              ______________________________________________________________________
2056+ E3A7             >//              Dictionary part
2056+ E3A7             >
2056+ E3A7             >                org     Dict_Ptr
2056+ 26A2             >
2056+ 26A2 A5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2056+ 26A4             >
2056+ 26A4             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2056+ 26A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2056+ 26A4 ~           >
2056+ 26A4 ~           >
2056+ 26A4             >                endif           ; ok        // for other definitions it "points" the correct handler
2056+ 26A4             >                // Use of "; ok" to suppress "warning[fwdref]"
2056+ 26A4             >
2056+ 26A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2057+ 26A4 E1                           pop     hl
2058+ 26A5 CB 2C                        sra     h
2059+ 26A7 CB 1D                        rr      l
2060+ 26A9
2061+ 26A9                              psh1
2061+ 26A9 E5          >                push    hl
2061+ 26AA DD E9       >                jp      (ix)
2062+ 26AC
2063+ 26AC              //  ______________________________________________________________________
2064+ 26AC              //
2065+ 26AC              // lshift       n1 u -- n2
2066+ 26AC              // bit left shift of u bits
2067+ 26AC                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2067+ 26AC             >
2067+ 26AC             >Dict_Ptr        defl    $
2067+ 26AC             >
2067+ 26AC             >//              ______________________________________________________________________
2067+ 26AC             >//              Heap part
2067+ 26AC             >
2067+ 26AC             >
2067+ 26AC             >                org     (Heap_Ptr & $1FFF) + $E000
2067+ E3A7             >
2067+ E3A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2067+ E3A7             >Latest_Definition defl  Heap_Ptr
2067+ E3A7             >
2067+ E3A7             >                // dummy db directives used to calculate length of namec
2067+ E3A7 4C 53 48 49 >                db      "LSHIFT"
2067+ E3AB 46 54       >
2067+ E3AD             >len_NFA         defl    $ - temp_NFA
2067+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2067+ E3A7             >
2067+ E3A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2067+ E3A8 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2067+ E3AC 46 54       >
2067+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2067+ E3AD D4          >                db      {b $} | END_BIT     // msb as name end
2067+ E3AE             >
2067+ E3AE A0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2067+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2067+ E3B0             >
2067+ E3B0             >mirror_Ptr      defl    $
2067+ E3B0             >
2067+ E3B0 AE 26       >                dw      Dict_Ptr + 2        // xt
2067+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2067+ E3B2             >
2067+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2067+ E3B2             >
2067+ E3B2             >//              ______________________________________________________________________
2067+ E3B2             >//              Dictionary part
2067+ E3B2             >
2067+ E3B2             >                org     Dict_Ptr
2067+ 26AC             >
2067+ 26AC B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2067+ 26AE             >
2067+ 26AE             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2067+ 26AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2067+ 26AE ~           >
2067+ 26AE ~           >
2067+ 26AE             >                endif           ; ok        // for other definitions it "points" the correct handler
2067+ 26AE             >                // Use of "; ok" to suppress "warning[fwdref]"
2067+ 26AE             >
2067+ 26AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2068+ 26AE D9                           exx
2069+ 26AF C1                           pop     bc
2070+ 26B0 41                           ld      b, c
2071+ 26B1 D1                           pop     de
2072+ 26B2 ED 28                        bsla    de, b
2073+ 26B4 D5                           push    de
2074+ 26B5 D9                           exx
2075+ 26B6                              next
2075+ 26B6 DD E9       >                jp      (ix)
2076+ 26B8
2077+ 26B8              //  ______________________________________________________________________
2078+ 26B8              //
2079+ 26B8              // rshift       n1 u -- n2
2080+ 26B8              // bit right shift of u bits
2081+ 26B8                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2081+ 26B8             >
2081+ 26B8             >Dict_Ptr        defl    $
2081+ 26B8             >
2081+ 26B8             >//              ______________________________________________________________________
2081+ 26B8             >//              Heap part
2081+ 26B8             >
2081+ 26B8             >
2081+ 26B8             >                org     (Heap_Ptr & $1FFF) + $E000
2081+ E3B2             >
2081+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2081+ E3B2             >Latest_Definition defl  Heap_Ptr
2081+ E3B2             >
2081+ E3B2             >                // dummy db directives used to calculate length of namec
2081+ E3B2 52 53 48 49 >                db      "RSHIFT"
2081+ E3B6 46 54       >
2081+ E3B8             >len_NFA         defl    $ - temp_NFA
2081+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2081+ E3B2             >
2081+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2081+ E3B3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2081+ E3B7 46 54       >
2081+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2081+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2081+ E3B9             >
2081+ E3B9 A7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2081+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2081+ E3BB             >
2081+ E3BB             >mirror_Ptr      defl    $
2081+ E3BB             >
2081+ E3BB BA 26       >                dw      Dict_Ptr + 2        // xt
2081+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2081+ E3BD             >
2081+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2081+ E3BD             >
2081+ E3BD             >//              ______________________________________________________________________
2081+ E3BD             >//              Dictionary part
2081+ E3BD             >
2081+ E3BD             >                org     Dict_Ptr
2081+ 26B8             >
2081+ 26B8 BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2081+ 26BA             >
2081+ 26BA             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2081+ 26BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2081+ 26BA ~           >
2081+ 26BA ~           >
2081+ 26BA             >                endif           ; ok        // for other definitions it "points" the correct handler
2081+ 26BA             >                // Use of "; ok" to suppress "warning[fwdref]"
2081+ 26BA             >
2081+ 26BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2082+ 26BA D9                           exx
2083+ 26BB C1                           pop     bc
2084+ 26BC 41                           ld      b, c
2085+ 26BD D1                           pop     de
2086+ 26BE ED 2A                        bsrl    de, b
2087+ 26C0 D5                           push    de
2088+ 26C1 D9                           exx
2089+ 26C2                              next
2089+ 26C2 DD E9       >                jp      (ix)
2090+ 26C4
2091+ 26C4              //  ______________________________________________________________________
2092+ 26C4              //
2093+ 26C4              // cells        n1 -- n2
2094+ 26C4              // decrement by 2 top of stack
2095+ 26C4                              New_Def CELLS, "CELLS", is_code, is_normal
2095+ 26C4             >
2095+ 26C4             >Dict_Ptr        defl    $
2095+ 26C4             >
2095+ 26C4             >//              ______________________________________________________________________
2095+ 26C4             >//              Heap part
2095+ 26C4             >
2095+ 26C4             >
2095+ 26C4             >                org     (Heap_Ptr & $1FFF) + $E000
2095+ E3BD             >
2095+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2095+ E3BD             >Latest_Definition defl  Heap_Ptr
2095+ E3BD             >
2095+ E3BD             >                // dummy db directives used to calculate length of namec
2095+ E3BD 43 45 4C 4C >                db      "CELLS"
2095+ E3C1 53          >
2095+ E3C2             >len_NFA         defl    $ - temp_NFA
2095+ E3C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2095+ E3BD             >
2095+ E3BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2095+ E3BE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2095+ E3C2 53          >
2095+ E3C3             >                org     $-1                 // alter last byte of Name just above to set
2095+ E3C2 D3          >                db      {b $} | END_BIT     // msb as name end
2095+ E3C3             >
2095+ E3C3 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2095+ E3C5             >Prev_Ptr        defl    Heap_Ptr
2095+ E3C5             >
2095+ E3C5             >mirror_Ptr      defl    $
2095+ E3C5             >
2095+ E3C5 C6 26       >                dw      Dict_Ptr + 2        // xt
2095+ E3C7             >Heap_Ptr        defl    $ - $E000           // save current HP
2095+ E3C7             >
2095+ E3C7             >Current_HP      defl  $ - $E000             // used to set HP once!
2095+ E3C7             >
2095+ E3C7             >//              ______________________________________________________________________
2095+ E3C7             >//              Dictionary part
2095+ E3C7             >
2095+ E3C7             >                org     Dict_Ptr
2095+ 26C4             >
2095+ 26C4 C5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2095+ 26C6             >
2095+ 26C6             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2095+ 26C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2095+ 26C6 ~           >
2095+ 26C6 ~           >
2095+ 26C6             >                endif           ; ok        // for other definitions it "points" the correct handler
2095+ 26C6             >                // Use of "; ok" to suppress "warning[fwdref]"
2095+ 26C6             >
2095+ 26C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2096+ 26C6 C3 9D 26                     jp      Two_Mul_Ptr
2097+ 26C9
2098+ 26C9
2099+ 26C9              //  ______________________________________________________________________
2100+ 26C9
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 122  26C9                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26C9              //  ______________________________________________________________________
   2+ 26C9              //
   3+ 26C9              //  L1.asm
   4+ 26C9              //
   5+ 26C9              //  Level-1 definitions and derivate
   6+ 26C9              //  ______________________________________________________________________
   7+ 26C9
   8+ 26C9              //  ______________________________________________________________________
   9+ 26C9              //
  10+ 26C9              // :            -- cccc     ( compile time )
  11+ 26C9              //              i*x -- j*x  ( run time )
  12+ 26C9              // Colon Definition
  13+ 26C9                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26C9             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26C9             >
  13+ 26C9             >Dict_Ptr        defl    $
  13+ 26C9             >
  13+ 26C9             >//              ______________________________________________________________________
  13+ 26C9             >//              Heap part
  13+ 26C9             >
  13+ 26C9             >
  13+ 26C9             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C7             >
  13+ E3C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C7             >Latest_Definition defl  Heap_Ptr
  13+ E3C7             >
  13+ E3C7             >                // dummy db directives used to calculate length of namec
  13+ E3C7 3A          >                db      ":"
  13+ E3C8             >len_NFA         defl    $ - temp_NFA
  13+ E3C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C7             >
  13+ E3C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C8 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C9             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C8 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C9             >
  13+ E3C9 BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CB             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >mirror_Ptr      defl    $
  13+ E3CB             >
  13+ E3CB CB 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CD             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CD             >
  13+ E3CD             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CD             >
  13+ E3CD             >//              ______________________________________________________________________
  13+ E3CD             >//              Dictionary part
  13+ E3CD             >
  13+ E3CD             >                org     Dict_Ptr
  13+ 26C9             >
  13+ 26C9 CB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26CB             >
  13+ 26CB             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26CB CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26CE             >
  13+ 26CE             >
  13+ 26CE             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26CE             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26CE             >
  13+ 26CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26CE
  15+ 26CE C0 2A                        dw      QEXEC                   // ?exec
  16+ 26D0 8B 2A                        dw      STORE_CSP               // !csp
  17+ 26D2 FC 27 3F 26                  dw      CURRENT, FETCH          // current @
  18+ 26D6 F6 27 49 26                  dw      CONTEXT, STORE          // context !
  19+ 26DA AC 30                        dw      CREATE                  // create  ( forward )
  20+ 26DC 44 2B                        dw      SMUDGE                  // dmudge
  21+ 26DE 35 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26E0 80 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26E2                                                              // ... immediate
  24+ 26E2              Enter_Ptr:
  25+ 26E2                              // via call coded in CFA
  26+ 26E2 EB                           ex      de, hl //**
  27+ 26E3                              // *** ldhlrp
  28+ 26E3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26E4 70                           ld      (hl), b
  30+ 26E5 2B                           dec     hl
  31+ 26E6 71                           ld      (hl), c
  32+ 26E7                              // *** ldrphl
  33+ 26E7 EB                           ex      de, hl //**
  34+ 26E8
  35+ 26E8
  36+ 26E8 C1                           pop     bc                  // points to PFA of "this" word
  37+ 26E9                              next
  37+ 26E9 DD E9       >                jp      (ix)
  38+ 26EB
  39+ 26EB              //  ______________________________________________________________________
  40+ 26EB              //
  41+ 26EB              // ;            --
  42+ 26EB              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26EB                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26EB             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26EB             >
  43+ 26EB             >Dict_Ptr        defl    $
  43+ 26EB             >
  43+ 26EB             >//              ______________________________________________________________________
  43+ 26EB             >//              Heap part
  43+ 26EB             >
  43+ 26EB             >
  43+ 26EB             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CD             >
  43+ E3CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CD             >Latest_Definition defl  Heap_Ptr
  43+ E3CD             >
  43+ E3CD             >                // dummy db directives used to calculate length of namec
  43+ E3CD 3B          >                db      ";"
  43+ E3CE             >len_NFA         defl    $ - temp_NFA
  43+ E3CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CD             >
  43+ E3CD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CE 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CF             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CE BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CF             >
  43+ E3CF C7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D1             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >mirror_Ptr      defl    $
  43+ E3D1             >
  43+ E3D1 ED 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D3             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D3             >
  43+ E3D3             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D3             >
  43+ E3D3             >//              ______________________________________________________________________
  43+ E3D3             >//              Dictionary part
  43+ E3D3             >
  43+ E3D3             >                org     Dict_Ptr
  43+ 26EB             >
  43+ 26EB D1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26ED             >
  43+ 26ED             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26ED CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26F0             >
  43+ 26F0             >
  43+ 26F0             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26F0             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26F0             >
  43+ 26F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26F0
  45+ 26F0 E0 2A                        dw      QCSP                    // ?csp
  46+ 26F2 08 2B F5 24                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26F6 44 2B                        dw      SMUDGE                  // smudge
  48+ 26F8 28 2B                        dw      SQUARED_OPEN            // [
  49+ 26FA F5 24                        dw      EXIT                    // ; immediate
  50+ 26FC
  51+ 26FC              //  ______________________________________________________________________
  52+ 26FC              //
  53+ 26FC              // noop         --
  54+ 26FC
  55+ 26FC                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 26FC             >
  55+ 26FC             >Dict_Ptr        defl    $
  55+ 26FC             >
  55+ 26FC             >//              ______________________________________________________________________
  55+ 26FC             >//              Heap part
  55+ 26FC             >
  55+ 26FC             >
  55+ 26FC             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D3             >
  55+ E3D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D3             >Latest_Definition defl  Heap_Ptr
  55+ E3D3             >
  55+ E3D3             >                // dummy db directives used to calculate length of namec
  55+ E3D3 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D7             >len_NFA         defl    $ - temp_NFA
  55+ E3D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D3             >
  55+ E3D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D8             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D7 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D8             >
  55+ E3D8 CD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DA             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DA             >
  55+ E3DA             >mirror_Ptr      defl    $
  55+ E3DA             >
  55+ E3DA FE 26       >                dw      Dict_Ptr + 2        // xt
  55+ E3DC             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DC             >
  55+ E3DC             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DC             >
  55+ E3DC             >//              ______________________________________________________________________
  55+ E3DC             >//              Dictionary part
  55+ E3DC             >
  55+ E3DC             >                org     Dict_Ptr
  55+ 26FC             >
  55+ 26FC DA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 26FE             >
  55+ 26FE             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 26FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 26FE ~           >
  55+ 26FE ~           >
  55+ 26FE             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 26FE             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 26FE             >
  55+ 26FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 26FE                              next
  56+ 26FE DD E9       >                jp      (ix)
  57+ 2700
  58+ 2700              //  ______________________________________________________________________
  59+ 2700              //
  60+ 2700              // constant     n -- cccc     ( compile time )
  61+ 2700              //              -- n          ( run time )
  62+ 2700              // Constant definition.
  63+ 2700                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 2700             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 2700             >
  63+ 2700             >Dict_Ptr        defl    $
  63+ 2700             >
  63+ 2700             >//              ______________________________________________________________________
  63+ 2700             >//              Heap part
  63+ 2700             >
  63+ 2700             >
  63+ 2700             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DC             >
  63+ E3DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DC             >Latest_Definition defl  Heap_Ptr
  63+ E3DC             >
  63+ E3DC             >                // dummy db directives used to calculate length of namec
  63+ E3DC 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E0 54 41 4E 54 >
  63+ E3E4             >len_NFA         defl    $ - temp_NFA
  63+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DC             >
  63+ E3DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E4 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E5             >
  63+ E3E5 D3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E7             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >mirror_Ptr      defl    $
  63+ E3E7             >
  63+ E3E7 02 27       >                dw      Dict_Ptr + 2        // xt
  63+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E9             >
  63+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E9             >
  63+ E3E9             >//              ______________________________________________________________________
  63+ E3E9             >//              Dictionary part
  63+ E3E9             >
  63+ E3E9             >                org     Dict_Ptr
  63+ 2700             >
  63+ 2700 E7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 2702             >
  63+ 2702             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 2702 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 2705             >
  63+ 2705             >
  63+ 2705             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 2705             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 2705             >
  63+ 2705             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 2705 AC 30                        dw      CREATE                  // create
  65+ 2707 72 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 2709 80 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 270B              Constant_Ptr:
  68+ 270B
  69+ 270B
  70+ 270B E1                           pop     hl
  71+ 270C
  72+ 270C 7E                           ld      a, (hl)
  73+ 270D 23                           inc     hl
  74+ 270E 66                           ld      h, (hl)
  75+ 270F 6F                           ld      l, a
  76+ 2710 E5                           push    hl
  77+ 2711                              next
  77+ 2711 DD E9       >                jp      (ix)
  78+ 2713
  79+ 2713              //  ______________________________________________________________________
  80+ 2713              //
  81+ 2713              // variable     n -- cccc     ( compile time )
  82+ 2713              //              -- a          ( run time )
  83+ 2713              // Variable definition, n is the initial value.
  84+ 2713                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2713             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2713             >
  84+ 2713             >Dict_Ptr        defl    $
  84+ 2713             >
  84+ 2713             >//              ______________________________________________________________________
  84+ 2713             >//              Heap part
  84+ 2713             >
  84+ 2713             >
  84+ 2713             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E9             >
  84+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E9             >Latest_Definition defl  Heap_Ptr
  84+ E3E9             >
  84+ E3E9             >                // dummy db directives used to calculate length of namec
  84+ E3E9 56 41 52 49 >                db      "VARIABLE"
  84+ E3ED 41 42 4C 45 >
  84+ E3F1             >len_NFA         defl    $ - temp_NFA
  84+ E3F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E9             >
  84+ E3E9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F1 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F2             >
  84+ E3F2 DC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F4             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >mirror_Ptr      defl    $
  84+ E3F4             >
  84+ E3F4 15 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F6             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F6             >
  84+ E3F6             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F6             >
  84+ E3F6             >//              ______________________________________________________________________
  84+ E3F6             >//              Dictionary part
  84+ E3F6             >
  84+ E3F6             >                org     Dict_Ptr
  84+ 2713             >
  84+ 2713 F4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 2715             >
  84+ 2715             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 2715 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 2718             >
  84+ 2718             >
  84+ 2718             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 2718             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 2718             >
  84+ 2718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 2718
  86+ 2718 37 27                        dw      ZERO
  87+ 271A 02 27                        dw      CONSTANT                // constant
  88+ 271C 80 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 271E              Variable_Ptr:
  90+ 271E
  91+ 271E
  92+ 271E
  93+ 271E
  94+ 271E                              next
  94+ 271E DD E9       >                jp      (ix)
  95+ 2720
  96+ 2720              //  ______________________________________________________________________
  97+ 2720              //
  98+ 2720              // user         b -- cccc     ( compile time )
  99+ 2720              //              -- a          ( run time )
 100+ 2720              // User variable definition
 101+ 2720                              Colon_Def USER, "USER", is_normal
 101+ 2720             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 2720             >
 101+ 2720             >Dict_Ptr        defl    $
 101+ 2720             >
 101+ 2720             >//              ______________________________________________________________________
 101+ 2720             >//              Heap part
 101+ 2720             >
 101+ 2720             >
 101+ 2720             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F6             >
 101+ E3F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F6             >Latest_Definition defl  Heap_Ptr
 101+ E3F6             >
 101+ E3F6             >                // dummy db directives used to calculate length of namec
 101+ E3F6 55 53 45 52 >                db      "USER"
 101+ E3FA             >len_NFA         defl    $ - temp_NFA
 101+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F6             >
 101+ E3F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FA D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FB             >
 101+ E3FB E9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FD             >
 101+ E3FD             >mirror_Ptr      defl    $
 101+ E3FD             >
 101+ E3FD 22 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FF             >
 101+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FF             >
 101+ E3FF             >//              ______________________________________________________________________
 101+ E3FF             >//              Dictionary part
 101+ E3FF             >
 101+ E3FF             >                org     Dict_Ptr
 101+ 2720             >
 101+ 2720 FD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 2722             >
 101+ 2722             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 2722 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 2725             >
 101+ 2725             >
 101+ 2725             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 2725             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 2725             >
 101+ 2725             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 2725
 103+ 2725 AC 30                        dw      CREATE                  // create
 104+ 2727 81 28                        dw      CCOMMA                  // c,
 105+ 2729 80 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 272B
 107+ 272B
 108+ 272B              User_Ptr:
 109+ 272B                              // via call coded in CFA
 110+ 272B E1                           pop     hl
 111+ 272C
 112+ 272C 7E                           ld      a, (hl)
 113+ 272D 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2730 ED 31                        add     hl, a
 115+ 2732 E5                           push    hl
 116+ 2733                              next
 116+ 2733 DD E9       >                jp      (ix)
 117+ 2735
 118+ 2735              //  ______________________________________________________________________
 119+ 2735              //
 120+ 2735                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 2735             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 2735             >
 120+ 2735             >Dict_Ptr        defl    $
 120+ 2735             >
 120+ 2735             >//              ______________________________________________________________________
 120+ 2735             >//              Heap part
 120+ 2735             >
 120+ 2735             >
 120+ 2735             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FF             >
 120+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FF             >Latest_Definition defl  Heap_Ptr
 120+ E3FF             >
 120+ E3FF             >                // dummy db directives used to calculate length of namec
 120+ E3FF 30          >                db      "0"
 120+ E400             >len_NFA         defl    $ - temp_NFA
 120+ E400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FF             >
 120+ E3FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E400 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E401             >                org     $-1                 // alter last byte of Name just above to set
 120+ E400 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E401             >
 120+ E401 F6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E403             >Prev_Ptr        defl    Heap_Ptr
 120+ E403             >
 120+ E403             >mirror_Ptr      defl    $
 120+ E403             >
 120+ E403 37 27       >                dw      Dict_Ptr + 2        // xt
 120+ E405             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E405             >
 120+ E405             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E405             >
 120+ E405             >//              ______________________________________________________________________
 120+ E405             >//              Dictionary part
 120+ E405             >
 120+ E405             >                org     Dict_Ptr
 120+ 2735             >
 120+ 2735 03 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 2737             >
 120+ 2737             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 2737 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 273A             >
 120+ 273A             >
 120+ 273A             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 273A             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 273A             >
 120+ 273A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 273A 00 00       >                dw      0
 121+ 273C                              Constant_Def ONE        ,   "1"     ,   1
 121+ 273C             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 273C             >
 121+ 273C             >Dict_Ptr        defl    $
 121+ 273C             >
 121+ 273C             >//              ______________________________________________________________________
 121+ 273C             >//              Heap part
 121+ 273C             >
 121+ 273C             >
 121+ 273C             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E405             >
 121+ E405             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E405             >Latest_Definition defl  Heap_Ptr
 121+ E405             >
 121+ E405             >                // dummy db directives used to calculate length of namec
 121+ E405 31          >                db      "1"
 121+ E406             >len_NFA         defl    $ - temp_NFA
 121+ E406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E405             >
 121+ E405 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E406 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E407             >                org     $-1                 // alter last byte of Name just above to set
 121+ E406 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E407             >
 121+ E407 FF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E409             >Prev_Ptr        defl    Heap_Ptr
 121+ E409             >
 121+ E409             >mirror_Ptr      defl    $
 121+ E409             >
 121+ E409 3E 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40B             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40B             >
 121+ E40B             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40B             >
 121+ E40B             >//              ______________________________________________________________________
 121+ E40B             >//              Dictionary part
 121+ E40B             >
 121+ E40B             >                org     Dict_Ptr
 121+ 273C             >
 121+ 273C 09 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 273E             >
 121+ 273E             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 273E CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2741             >
 121+ 2741             >
 121+ 2741             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2741             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2741             >
 121+ 2741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2741 01 00       >                dw      1
 122+ 2743                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2743             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2743             >
 122+ 2743             >Dict_Ptr        defl    $
 122+ 2743             >
 122+ 2743             >//              ______________________________________________________________________
 122+ 2743             >//              Heap part
 122+ 2743             >
 122+ 2743             >
 122+ 2743             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40B             >
 122+ E40B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40B             >Latest_Definition defl  Heap_Ptr
 122+ E40B             >
 122+ E40B             >                // dummy db directives used to calculate length of namec
 122+ E40B 32          >                db      "2"
 122+ E40C             >len_NFA         defl    $ - temp_NFA
 122+ E40C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40B             >
 122+ E40B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40C 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40D             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40C B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40D             >
 122+ E40D 05 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40F             >Prev_Ptr        defl    Heap_Ptr
 122+ E40F             >
 122+ E40F             >mirror_Ptr      defl    $
 122+ E40F             >
 122+ E40F 45 27       >                dw      Dict_Ptr + 2        // xt
 122+ E411             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E411             >
 122+ E411             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E411             >
 122+ E411             >//              ______________________________________________________________________
 122+ E411             >//              Dictionary part
 122+ E411             >
 122+ E411             >                org     Dict_Ptr
 122+ 2743             >
 122+ 2743 0F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 2745             >
 122+ 2745             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 2745 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 2748             >
 122+ 2748             >
 122+ 2748             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 2748             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 2748             >
 122+ 2748             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 2748 02 00       >                dw      2
 123+ 274A                              Constant_Def THREE      ,   "3"     ,   3
 123+ 274A             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 274A             >
 123+ 274A             >Dict_Ptr        defl    $
 123+ 274A             >
 123+ 274A             >//              ______________________________________________________________________
 123+ 274A             >//              Heap part
 123+ 274A             >
 123+ 274A             >
 123+ 274A             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E411             >
 123+ E411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E411             >Latest_Definition defl  Heap_Ptr
 123+ E411             >
 123+ E411             >                // dummy db directives used to calculate length of namec
 123+ E411 33          >                db      "3"
 123+ E412             >len_NFA         defl    $ - temp_NFA
 123+ E412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E411             >
 123+ E411 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E412 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E413             >                org     $-1                 // alter last byte of Name just above to set
 123+ E412 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E413             >
 123+ E413 0B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E415             >Prev_Ptr        defl    Heap_Ptr
 123+ E415             >
 123+ E415             >mirror_Ptr      defl    $
 123+ E415             >
 123+ E415 4C 27       >                dw      Dict_Ptr + 2        // xt
 123+ E417             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E417             >
 123+ E417             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E417             >
 123+ E417             >//              ______________________________________________________________________
 123+ E417             >//              Dictionary part
 123+ E417             >
 123+ E417             >                org     Dict_Ptr
 123+ 274A             >
 123+ 274A 15 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 274C             >
 123+ 274C             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 274C CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 274F             >
 123+ 274F             >
 123+ 274F             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 274F             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 274F             >
 123+ 274F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 274F 03 00       >                dw      3
 124+ 2751                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2751             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2751             >
 124+ 2751             >Dict_Ptr        defl    $
 124+ 2751             >
 124+ 2751             >//              ______________________________________________________________________
 124+ 2751             >//              Heap part
 124+ 2751             >
 124+ 2751             >
 124+ 2751             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E417             >
 124+ E417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E417             >Latest_Definition defl  Heap_Ptr
 124+ E417             >
 124+ E417             >                // dummy db directives used to calculate length of namec
 124+ E417 2D 31       >                db      "-1"
 124+ E419             >len_NFA         defl    $ - temp_NFA
 124+ E419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E417             >
 124+ E417 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E418 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41A             >                org     $-1                 // alter last byte of Name just above to set
 124+ E419 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41A             >
 124+ E41A 11 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41C             >Prev_Ptr        defl    Heap_Ptr
 124+ E41C             >
 124+ E41C             >mirror_Ptr      defl    $
 124+ E41C             >
 124+ E41C 53 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41E             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41E             >
 124+ E41E             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41E             >
 124+ E41E             >//              ______________________________________________________________________
 124+ E41E             >//              Dictionary part
 124+ E41E             >
 124+ E41E             >                org     Dict_Ptr
 124+ 2751             >
 124+ 2751 1C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2753             >
 124+ 2753             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2753 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 2756             >
 124+ 2756             >
 124+ 2756             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 2756             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 2756             >
 124+ 2756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 2756 FF FF       >                dw      -1
 125+ 2758                              Constant_Def BL         ,   "BL"    , $20
 125+ 2758             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2758             >
 125+ 2758             >Dict_Ptr        defl    $
 125+ 2758             >
 125+ 2758             >//              ______________________________________________________________________
 125+ 2758             >//              Heap part
 125+ 2758             >
 125+ 2758             >
 125+ 2758             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41E             >
 125+ E41E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41E             >Latest_Definition defl  Heap_Ptr
 125+ E41E             >
 125+ E41E             >                // dummy db directives used to calculate length of namec
 125+ E41E 42 4C       >                db      "BL"
 125+ E420             >len_NFA         defl    $ - temp_NFA
 125+ E420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41E             >
 125+ E41E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E421             >                org     $-1                 // alter last byte of Name just above to set
 125+ E420 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E421             >
 125+ E421 17 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E423             >Prev_Ptr        defl    Heap_Ptr
 125+ E423             >
 125+ E423             >mirror_Ptr      defl    $
 125+ E423             >
 125+ E423 5A 27       >                dw      Dict_Ptr + 2        // xt
 125+ E425             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E425             >
 125+ E425             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E425             >
 125+ E425             >//              ______________________________________________________________________
 125+ E425             >//              Dictionary part
 125+ E425             >
 125+ E425             >                org     Dict_Ptr
 125+ 2758             >
 125+ 2758 23 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 275A             >
 125+ 275A             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 275A CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 275D             >
 125+ 275D             >
 125+ 275D             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 275D             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 275D             >
 125+ 275D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 275D 20 00       >                dw      $20
 126+ 275F                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 275F             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 275F             >
 126+ 275F             >Dict_Ptr        defl    $
 126+ 275F             >
 126+ 275F             >//              ______________________________________________________________________
 126+ 275F             >//              Heap part
 126+ 275F             >
 126+ 275F             >
 126+ 275F             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E425             >
 126+ E425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E425             >Latest_Definition defl  Heap_Ptr
 126+ E425             >
 126+ E425             >                // dummy db directives used to calculate length of namec
 126+ E425 43 2F 4C    >                db      "C/L"
 126+ E428             >len_NFA         defl    $ - temp_NFA
 126+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E425             >
 126+ E425 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E426 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E429             >                org     $-1                 // alter last byte of Name just above to set
 126+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E429             >
 126+ E429 1E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42B             >Prev_Ptr        defl    Heap_Ptr
 126+ E42B             >
 126+ E42B             >mirror_Ptr      defl    $
 126+ E42B             >
 126+ E42B 61 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42D             >
 126+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42D             >
 126+ E42D             >//              ______________________________________________________________________
 126+ E42D             >//              Dictionary part
 126+ E42D             >
 126+ E42D             >                org     Dict_Ptr
 126+ 275F             >
 126+ 275F 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2761             >
 126+ 2761             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2761 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2764             >
 126+ 2764             >
 126+ 2764             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2764             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2764             >
 126+ 2764             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2764 40 00       >                dw      64
 127+ 2766                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 2766             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 2766             >
 127+ 2766             >Dict_Ptr        defl    $
 127+ 2766             >
 127+ 2766             >//              ______________________________________________________________________
 127+ 2766             >//              Heap part
 127+ 2766             >
 127+ 2766             >
 127+ 2766             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42D             >
 127+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42D             >Latest_Definition defl  Heap_Ptr
 127+ E42D             >
 127+ E42D             >                // dummy db directives used to calculate length of namec
 127+ E42D 42 2F 42 55 >                db      "B/BUF"
 127+ E431 46          >
 127+ E432             >len_NFA         defl    $ - temp_NFA
 127+ E432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42D             >
 127+ E42D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E432 46          >
 127+ E433             >                org     $-1                 // alter last byte of Name just above to set
 127+ E432 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E433             >
 127+ E433 25 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E435             >Prev_Ptr        defl    Heap_Ptr
 127+ E435             >
 127+ E435             >mirror_Ptr      defl    $
 127+ E435             >
 127+ E435 68 27       >                dw      Dict_Ptr + 2        // xt
 127+ E437             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E437             >
 127+ E437             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E437             >
 127+ E437             >//              ______________________________________________________________________
 127+ E437             >//              Dictionary part
 127+ E437             >
 127+ E437             >                org     Dict_Ptr
 127+ 2766             >
 127+ 2766 35 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2768             >
 127+ 2768             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2768 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 276B             >
 127+ 276B             >
 127+ 276B             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 276B             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 276B             >
 127+ 276B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 276B 00 02       >                dw      512
 128+ 276D                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 276D             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 276D             >
 128+ 276D             >Dict_Ptr        defl    $
 128+ 276D             >
 128+ 276D             >//              ______________________________________________________________________
 128+ 276D             >//              Heap part
 128+ 276D             >
 128+ 276D             >
 128+ 276D             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E437             >
 128+ E437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E437             >Latest_Definition defl  Heap_Ptr
 128+ E437             >
 128+ E437             >                // dummy db directives used to calculate length of namec
 128+ E437 42 2F 53 43 >                db      "B/SCR"
 128+ E43B 52          >
 128+ E43C             >len_NFA         defl    $ - temp_NFA
 128+ E43C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E437             >
 128+ E437 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E438 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43C 52          >
 128+ E43D             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43C D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43D             >
 128+ E43D 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43F             >Prev_Ptr        defl    Heap_Ptr
 128+ E43F             >
 128+ E43F             >mirror_Ptr      defl    $
 128+ E43F             >
 128+ E43F 6F 27       >                dw      Dict_Ptr + 2        // xt
 128+ E441             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E441             >
 128+ E441             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E441             >
 128+ E441             >//              ______________________________________________________________________
 128+ E441             >//              Dictionary part
 128+ E441             >
 128+ E441             >                org     Dict_Ptr
 128+ 276D             >
 128+ 276D 3F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 276F             >
 128+ 276F             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 276F CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 2772             >
 128+ 2772             >
 128+ 2772             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 2772             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 2772             >
 128+ 2772             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 2772 02 00       >                dw      2
 129+ 2774                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2774             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2774             >
 129+ 2774             >Dict_Ptr        defl    $
 129+ 2774             >
 129+ 2774             >//              ______________________________________________________________________
 129+ 2774             >//              Heap part
 129+ 2774             >
 129+ 2774             >
 129+ 2774             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E441             >
 129+ E441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E441             >Latest_Definition defl  Heap_Ptr
 129+ E441             >
 129+ E441             >                // dummy db directives used to calculate length of namec
 129+ E441 4C 2F 53 43 >                db      "L/SCR"
 129+ E445 52          >
 129+ E446             >len_NFA         defl    $ - temp_NFA
 129+ E446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E441             >
 129+ E441 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E442 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E446 52          >
 129+ E447             >                org     $-1                 // alter last byte of Name just above to set
 129+ E446 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E447             >
 129+ E447 37 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E449             >Prev_Ptr        defl    Heap_Ptr
 129+ E449             >
 129+ E449             >mirror_Ptr      defl    $
 129+ E449             >
 129+ E449 76 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44B             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44B             >
 129+ E44B             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44B             >
 129+ E44B             >//              ______________________________________________________________________
 129+ E44B             >//              Dictionary part
 129+ E44B             >
 129+ E44B             >                org     Dict_Ptr
 129+ 2774             >
 129+ 2774 49 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 2776             >
 129+ 2776             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 2776 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2779             >
 129+ 2779             >
 129+ 2779             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2779             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2779             >
 129+ 2779             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2779 10 00       >                dw      16
 130+ 277B
 131+ 277B              //  ______________________________________________________________________
 132+ 277B              //
 133+ 277B              // +origin         --
 134+ 277B              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 277B              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 277B              //              dw      PLUS                    // +
 137+ 277B              //              dw      EXIT                    // ;
 138+ 277B                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 277B             >
 138+ 277B             >Dict_Ptr        defl    $
 138+ 277B             >
 138+ 277B             >//              ______________________________________________________________________
 138+ 277B             >//              Heap part
 138+ 277B             >
 138+ 277B             >
 138+ 277B             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44B             >
 138+ E44B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44B             >Latest_Definition defl  Heap_Ptr
 138+ E44B             >
 138+ E44B             >                // dummy db directives used to calculate length of namec
 138+ E44B 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44F 47 49 4E    >
 138+ E452             >len_NFA         defl    $ - temp_NFA
 138+ E452             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44B             >
 138+ E44B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E450 47 49 4E    >
 138+ E453             >                org     $-1                 // alter last byte of Name just above to set
 138+ E452 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E453             >
 138+ E453 41 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E455             >Prev_Ptr        defl    Heap_Ptr
 138+ E455             >
 138+ E455             >mirror_Ptr      defl    $
 138+ E455             >
 138+ E455 7D 27       >                dw      Dict_Ptr + 2        // xt
 138+ E457             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E457             >
 138+ E457             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E457             >
 138+ E457             >//              ______________________________________________________________________
 138+ E457             >//              Dictionary part
 138+ E457             >
 138+ E457             >                org     Dict_Ptr
 138+ 277B             >
 138+ 277B 55 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 277D             >
 138+ 277D             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 277D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 277D ~           >
 138+ 277D ~           >
 138+ 277D             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 277D             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 277D             >
 138+ 277D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 277D D9                           exx
 140+ 277E E1                           pop     hl
 141+ 277F 11 00 20                     ld      de, Cold_origin
 142+ 2782 19                           add     hl, de
 143+ 2783 E5                           push    hl
 144+ 2784 D9                           exx
 145+ 2785                              next
 145+ 2785 DD E9       >                jp      (ix)
 146+ 2787
 147+ 2787
 148+ 2787              //  ______________________________________________________________________
 149+ 2787              //
 150+ 2787                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 2787             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 2787             >
 150+ 2787             >Dict_Ptr        defl    $
 150+ 2787             >
 150+ 2787             >//              ______________________________________________________________________
 150+ 2787             >//              Heap part
 150+ 2787             >
 150+ 2787             >
 150+ 2787             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E457             >
 150+ E457             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E457             >Latest_Definition defl  Heap_Ptr
 150+ E457             >
 150+ E457             >                // dummy db directives used to calculate length of namec
 150+ E457 28 4E 45 58 >                db      "(NEXT)"
 150+ E45B 54 29       >
 150+ E45D             >len_NFA         defl    $ - temp_NFA
 150+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E457             >
 150+ E457 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E458 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45C 54 29       >
 150+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45D A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45E             >
 150+ E45E 4B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E460             >Prev_Ptr        defl    Heap_Ptr
 150+ E460             >
 150+ E460             >mirror_Ptr      defl    $
 150+ E460             >
 150+ E460 89 27       >                dw      Dict_Ptr + 2        // xt
 150+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E462             >
 150+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E462             >
 150+ E462             >//              ______________________________________________________________________
 150+ E462             >//              Dictionary part
 150+ E462             >
 150+ E462             >                org     Dict_Ptr
 150+ 2787             >
 150+ 2787 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2789             >
 150+ 2789             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2789 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 278C             >
 150+ 278C             >
 150+ 278C             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 278C             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 278C             >
 150+ 278C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 278C 34 20       >                dw      Next_Ptr
 151+ 278E
 152+ 278E              //  ______________________________________________________________________
 153+ 278E              //
 154+ 278E
 155+ 278E                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 278E             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 278E             >
 155+ 278E             >Dict_Ptr        defl    $
 155+ 278E             >
 155+ 278E             >//              ______________________________________________________________________
 155+ 278E             >//              Heap part
 155+ 278E             >
 155+ 278E             >
 155+ 278E             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E462             >
 155+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E462             >Latest_Definition defl  Heap_Ptr
 155+ E462             >
 155+ E462             >                // dummy db directives used to calculate length of namec
 155+ E462 53 30       >                db      "S0"
 155+ E464             >len_NFA         defl    $ - temp_NFA
 155+ E464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E462             >
 155+ E462 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E463 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E465             >                org     $-1                 // alter last byte of Name just above to set
 155+ E464 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E465             >
 155+ E465 57 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E467             >Prev_Ptr        defl    Heap_Ptr
 155+ E467             >
 155+ E467             >mirror_Ptr      defl    $
 155+ E467             >
 155+ E467 90 27       >                dw      Dict_Ptr + 2        // xt
 155+ E469             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E469             >
 155+ E469             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E469             >
 155+ E469             >//              ______________________________________________________________________
 155+ E469             >//              Dictionary part
 155+ E469             >
 155+ E469             >                org     Dict_Ptr
 155+ 278E             >
 155+ 278E 67 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 2790             >
 155+ 2790             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 2790 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 2793             >
 155+ 2793             >
 155+ 2793             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 2793             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 2793             >
 155+ 2793             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 2793 06          >                db      06
 156+ 2794                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 2794             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 2794             >
 156+ 2794             >Dict_Ptr        defl    $
 156+ 2794             >
 156+ 2794             >//              ______________________________________________________________________
 156+ 2794             >//              Heap part
 156+ 2794             >
 156+ 2794             >
 156+ 2794             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E469             >
 156+ E469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E469             >Latest_Definition defl  Heap_Ptr
 156+ E469             >
 156+ E469             >                // dummy db directives used to calculate length of namec
 156+ E469 52 30       >                db      "R0"
 156+ E46B             >len_NFA         defl    $ - temp_NFA
 156+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E469             >
 156+ E469 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46B B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46C             >
 156+ E46C 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46E             >Prev_Ptr        defl    Heap_Ptr
 156+ E46E             >
 156+ E46E             >mirror_Ptr      defl    $
 156+ E46E             >
 156+ E46E 96 27       >                dw      Dict_Ptr + 2        // xt
 156+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E470             >
 156+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E470             >
 156+ E470             >//              ______________________________________________________________________
 156+ E470             >//              Dictionary part
 156+ E470             >
 156+ E470             >                org     Dict_Ptr
 156+ 2794             >
 156+ 2794 6E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 2796             >
 156+ 2796             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 2796 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 2799             >
 156+ 2799             >
 156+ 2799             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 2799             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 2799             >
 156+ 2799             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 2799 08          >                db      08
 157+ 279A                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 279A             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 279A             >
 157+ 279A             >Dict_Ptr        defl    $
 157+ 279A             >
 157+ 279A             >//              ______________________________________________________________________
 157+ 279A             >//              Heap part
 157+ 279A             >
 157+ 279A             >
 157+ 279A             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E470             >
 157+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E470             >Latest_Definition defl  Heap_Ptr
 157+ E470             >
 157+ E470             >                // dummy db directives used to calculate length of namec
 157+ E470 54 49 42    >                db      "TIB"
 157+ E473             >len_NFA         defl    $ - temp_NFA
 157+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E470             >
 157+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E471 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E474             >                org     $-1                 // alter last byte of Name just above to set
 157+ E473 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E474             >
 157+ E474 69 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E476             >Prev_Ptr        defl    Heap_Ptr
 157+ E476             >
 157+ E476             >mirror_Ptr      defl    $
 157+ E476             >
 157+ E476 9C 27       >                dw      Dict_Ptr + 2        // xt
 157+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E478             >
 157+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E478             >
 157+ E478             >//              ______________________________________________________________________
 157+ E478             >//              Dictionary part
 157+ E478             >
 157+ E478             >                org     Dict_Ptr
 157+ 279A             >
 157+ 279A 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 279C             >
 157+ 279C             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 279C CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 279F             >
 157+ 279F             >
 157+ 279F             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 279F             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 279F             >
 157+ 279F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 279F 0A          >                db      10
 158+ 27A0                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 27A0             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 27A0             >
 158+ 27A0             >Dict_Ptr        defl    $
 158+ 27A0             >
 158+ 27A0             >//              ______________________________________________________________________
 158+ 27A0             >//              Heap part
 158+ 27A0             >
 158+ 27A0             >
 158+ 27A0             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E478             >
 158+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E478             >Latest_Definition defl  Heap_Ptr
 158+ E478             >
 158+ E478             >                // dummy db directives used to calculate length of namec
 158+ E478 57 49 44 54 >                db      "WIDTH"
 158+ E47C 48          >
 158+ E47D             >len_NFA         defl    $ - temp_NFA
 158+ E47D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E478             >
 158+ E478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E479 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47D 48          >
 158+ E47E             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47D C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47E             >
 158+ E47E 70 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E480             >Prev_Ptr        defl    Heap_Ptr
 158+ E480             >
 158+ E480             >mirror_Ptr      defl    $
 158+ E480             >
 158+ E480 A2 27       >                dw      Dict_Ptr + 2        // xt
 158+ E482             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E482             >
 158+ E482             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E482             >
 158+ E482             >//              ______________________________________________________________________
 158+ E482             >//              Dictionary part
 158+ E482             >
 158+ E482             >                org     Dict_Ptr
 158+ 27A0             >
 158+ 27A0 80 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 27A2             >
 158+ 27A2             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 27A2 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 27A5             >
 158+ 27A5             >
 158+ 27A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 27A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 27A5             >
 158+ 27A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 27A5 0C          >                db      12
 159+ 27A6                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 27A6             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 27A6             >
 159+ 27A6             >Dict_Ptr        defl    $
 159+ 27A6             >
 159+ 27A6             >//              ______________________________________________________________________
 159+ 27A6             >//              Heap part
 159+ 27A6             >
 159+ 27A6             >
 159+ 27A6             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E482             >
 159+ E482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E482             >Latest_Definition defl  Heap_Ptr
 159+ E482             >
 159+ E482             >                // dummy db directives used to calculate length of namec
 159+ E482 57 41 52 4E >                db      "WARNING"
 159+ E486 49 4E 47    >
 159+ E489             >len_NFA         defl    $ - temp_NFA
 159+ E489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E482             >
 159+ E482 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E483 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E487 49 4E 47    >
 159+ E48A             >                org     $-1                 // alter last byte of Name just above to set
 159+ E489 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48A             >
 159+ E48A 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48C             >Prev_Ptr        defl    Heap_Ptr
 159+ E48C             >
 159+ E48C             >mirror_Ptr      defl    $
 159+ E48C             >
 159+ E48C A8 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48E             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48E             >
 159+ E48E             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48E             >
 159+ E48E             >//              ______________________________________________________________________
 159+ E48E             >//              Dictionary part
 159+ E48E             >
 159+ E48E             >                org     Dict_Ptr
 159+ 27A6             >
 159+ 27A6 8C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 27A8             >
 159+ 27A8             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 27A8 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 27AB             >
 159+ 27AB             >
 159+ 27AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 27AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 27AB             >
 159+ 27AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 27AB 0E          >                db      14
 160+ 27AC                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 27AC             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 27AC             >
 160+ 27AC             >Dict_Ptr        defl    $
 160+ 27AC             >
 160+ 27AC             >//              ______________________________________________________________________
 160+ 27AC             >//              Heap part
 160+ 27AC             >
 160+ 27AC             >
 160+ 27AC             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48E             >
 160+ E48E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48E             >Latest_Definition defl  Heap_Ptr
 160+ E48E             >
 160+ E48E             >                // dummy db directives used to calculate length of namec
 160+ E48E 46 45 4E 43 >                db      "FENCE"
 160+ E492 45          >
 160+ E493             >len_NFA         defl    $ - temp_NFA
 160+ E493             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48E             >
 160+ E48E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48F 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E493 45          >
 160+ E494             >                org     $-1                 // alter last byte of Name just above to set
 160+ E493 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E494             >
 160+ E494 82 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E496             >Prev_Ptr        defl    Heap_Ptr
 160+ E496             >
 160+ E496             >mirror_Ptr      defl    $
 160+ E496             >
 160+ E496 AE 27       >                dw      Dict_Ptr + 2        // xt
 160+ E498             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E498             >
 160+ E498             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E498             >
 160+ E498             >//              ______________________________________________________________________
 160+ E498             >//              Dictionary part
 160+ E498             >
 160+ E498             >                org     Dict_Ptr
 160+ 27AC             >
 160+ 27AC 96 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27AE             >
 160+ 27AE             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27AE CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27B1             >
 160+ 27B1             >
 160+ 27B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27B1             >
 160+ 27B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27B1 10          >                db      16
 161+ 27B2                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27B2             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27B2             >
 161+ 27B2             >Dict_Ptr        defl    $
 161+ 27B2             >
 161+ 27B2             >//              ______________________________________________________________________
 161+ 27B2             >//              Heap part
 161+ 27B2             >
 161+ 27B2             >
 161+ 27B2             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E498             >
 161+ E498             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E498             >Latest_Definition defl  Heap_Ptr
 161+ E498             >
 161+ E498             >                // dummy db directives used to calculate length of namec
 161+ E498 44 50       >                db      "DP"
 161+ E49A             >len_NFA         defl    $ - temp_NFA
 161+ E49A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E498             >
 161+ E498 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E499 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49B             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49B             >
 161+ E49B 8E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49D             >Prev_Ptr        defl    Heap_Ptr
 161+ E49D             >
 161+ E49D             >mirror_Ptr      defl    $
 161+ E49D             >
 161+ E49D B4 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49F             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49F             >
 161+ E49F             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49F             >
 161+ E49F             >//              ______________________________________________________________________
 161+ E49F             >//              Dictionary part
 161+ E49F             >
 161+ E49F             >                org     Dict_Ptr
 161+ 27B2             >
 161+ 27B2 9D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27B4             >
 161+ 27B4             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27B4 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27B7             >
 161+ 27B7             >
 161+ 27B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27B7             >
 161+ 27B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27B7 12          >                db      18
 162+ 27B8                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27B8             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27B8             >
 162+ 27B8             >Dict_Ptr        defl    $
 162+ 27B8             >
 162+ 27B8             >//              ______________________________________________________________________
 162+ 27B8             >//              Heap part
 162+ 27B8             >
 162+ 27B8             >
 162+ 27B8             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49F             >
 162+ E49F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49F             >Latest_Definition defl  Heap_Ptr
 162+ E49F             >
 162+ E49F             >                // dummy db directives used to calculate length of namec
 162+ E49F 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A3 4C 49 4E 4B >
 162+ E4A7             >len_NFA         defl    $ - temp_NFA
 162+ E4A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49F             >
 162+ E49F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A7 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A8             >
 162+ E4A8 98 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AA             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >mirror_Ptr      defl    $
 162+ E4AA             >
 162+ E4AA BA 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AC             >
 162+ E4AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AC             >
 162+ E4AC             >//              ______________________________________________________________________
 162+ E4AC             >//              Dictionary part
 162+ E4AC             >
 162+ E4AC             >                org     Dict_Ptr
 162+ 27B8             >
 162+ 27B8 AA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27BA             >
 162+ 27BA             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27BA CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27BD             >
 162+ 27BD             >
 162+ 27BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27BD             >
 162+ 27BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27BD 14          >                db      20
 163+ 27BE                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27BE             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27BE             >
 163+ 27BE             >Dict_Ptr        defl    $
 163+ 27BE             >
 163+ 27BE             >//              ______________________________________________________________________
 163+ 27BE             >//              Heap part
 163+ 27BE             >
 163+ 27BE             >
 163+ 27BE             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AC             >
 163+ E4AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AC             >Latest_Definition defl  Heap_Ptr
 163+ E4AC             >
 163+ E4AC             >                // dummy db directives used to calculate length of namec
 163+ E4AC 46 49 52 53 >                db      "FIRST"
 163+ E4B0 54          >
 163+ E4B1             >len_NFA         defl    $ - temp_NFA
 163+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AC             >
 163+ E4AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B1 54          >
 163+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B1 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B2             >
 163+ E4B2 9F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >mirror_Ptr      defl    $
 163+ E4B4             >
 163+ E4B4 C0 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B6             >
 163+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B6             >
 163+ E4B6             >//              ______________________________________________________________________
 163+ E4B6             >//              Dictionary part
 163+ E4B6             >
 163+ E4B6             >                org     Dict_Ptr
 163+ 27BE             >
 163+ 27BE B4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27C0             >
 163+ 27C0             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27C0 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27C3             >
 163+ 27C3             >
 163+ 27C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27C3             >
 163+ 27C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27C3 16          >                db      22
 164+ 27C4                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27C4             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27C4             >
 164+ 27C4             >Dict_Ptr        defl    $
 164+ 27C4             >
 164+ 27C4             >//              ______________________________________________________________________
 164+ 27C4             >//              Heap part
 164+ 27C4             >
 164+ 27C4             >
 164+ 27C4             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B6             >
 164+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B6             >Latest_Definition defl  Heap_Ptr
 164+ E4B6             >
 164+ E4B6             >                // dummy db directives used to calculate length of namec
 164+ E4B6 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BA 54          >
 164+ E4BB             >len_NFA         defl    $ - temp_NFA
 164+ E4BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B6             >
 164+ E4B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BB 54          >
 164+ E4BC             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BB D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BC             >
 164+ E4BC AC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BE             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >mirror_Ptr      defl    $
 164+ E4BE             >
 164+ E4BE C6 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C0             >
 164+ E4C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C0             >
 164+ E4C0             >//              ______________________________________________________________________
 164+ E4C0             >//              Dictionary part
 164+ E4C0             >
 164+ E4C0             >                org     Dict_Ptr
 164+ 27C4             >
 164+ 27C4 BE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27C6             >
 164+ 27C6             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27C6 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27C9             >
 164+ 27C9             >
 164+ 27C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27C9             >
 164+ 27C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27C9 18          >                db      24
 165+ 27CA                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27CA             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27CA             >
 165+ 27CA             >Dict_Ptr        defl    $
 165+ 27CA             >
 165+ 27CA             >//              ______________________________________________________________________
 165+ 27CA             >//              Heap part
 165+ 27CA             >
 165+ 27CA             >
 165+ 27CA             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C0             >
 165+ E4C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C0             >Latest_Definition defl  Heap_Ptr
 165+ E4C0             >
 165+ E4C0             >                // dummy db directives used to calculate length of namec
 165+ E4C0 48 50       >                db      "HP"
 165+ E4C2             >len_NFA         defl    $ - temp_NFA
 165+ E4C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C0             >
 165+ E4C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C1 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C3             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C2 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C3             >
 165+ E4C3 B6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C5             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C5             >
 165+ E4C5             >mirror_Ptr      defl    $
 165+ E4C5             >
 165+ E4C5 CC 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C7             >
 165+ E4C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C7             >
 165+ E4C7             >//              ______________________________________________________________________
 165+ E4C7             >//              Dictionary part
 165+ E4C7             >
 165+ E4C7             >                org     Dict_Ptr
 165+ 27CA             >
 165+ 27CA C5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27CC             >
 165+ 27CC             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27CC CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27CF             >
 165+ 27CF             >
 165+ 27CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27CF             >
 165+ 27CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27CF 1A          >                db      26
 166+ 27D0                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27D0             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27D0             >
 166+ 27D0             >Dict_Ptr        defl    $
 166+ 27D0             >
 166+ 27D0             >//              ______________________________________________________________________
 166+ 27D0             >//              Heap part
 166+ 27D0             >
 166+ 27D0             >
 166+ 27D0             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C7             >
 166+ E4C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C7             >Latest_Definition defl  Heap_Ptr
 166+ E4C7             >
 166+ E4C7             >                // dummy db directives used to calculate length of namec
 166+ E4C7 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CB 45          >
 166+ E4CC             >len_NFA         defl    $ - temp_NFA
 166+ E4CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C7             >
 166+ E4C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CC 45          >
 166+ E4CD             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CC C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CD             >
 166+ E4CD C0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CF             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >mirror_Ptr      defl    $
 166+ E4CF             >
 166+ E4CF D2 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D1             >
 166+ E4D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D1             >
 166+ E4D1             >//              ______________________________________________________________________
 166+ E4D1             >//              Dictionary part
 166+ E4D1             >
 166+ E4D1             >                org     Dict_Ptr
 166+ 27D0             >
 166+ 27D0 CF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27D2             >
 166+ 27D2             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27D2 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27D5             >
 166+ 27D5             >
 166+ 27D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27D5             >
 166+ 27D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27D5 1C          >                db      28
 167+ 27D6                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27D6             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27D6             >
 167+ 27D6             >Dict_Ptr        defl    $
 167+ 27D6             >
 167+ 27D6             >//              ______________________________________________________________________
 167+ 27D6             >//              Heap part
 167+ 27D6             >
 167+ 27D6             >
 167+ 27D6             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D1             >
 167+ E4D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D1             >Latest_Definition defl  Heap_Ptr
 167+ E4D1             >
 167+ E4D1             >                // dummy db directives used to calculate length of namec
 167+ E4D1 42 4C 4B    >                db      "BLK"
 167+ E4D4             >len_NFA         defl    $ - temp_NFA
 167+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D1             >
 167+ E4D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D2 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D4 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D5             >
 167+ E4D5 C7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D7             >
 167+ E4D7             >mirror_Ptr      defl    $
 167+ E4D7             >
 167+ E4D7 D8 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D9             >
 167+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D9             >
 167+ E4D9             >//              ______________________________________________________________________
 167+ E4D9             >//              Dictionary part
 167+ E4D9             >
 167+ E4D9             >                org     Dict_Ptr
 167+ 27D6             >
 167+ 27D6 D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27D8             >
 167+ 27D8             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27D8 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27DB             >
 167+ 27DB             >
 167+ 27DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27DB             >
 167+ 27DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27DB 1E          >                db      30
 168+ 27DC                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27DC             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27DC             >
 168+ 27DC             >Dict_Ptr        defl    $
 168+ 27DC             >
 168+ 27DC             >//              ______________________________________________________________________
 168+ 27DC             >//              Heap part
 168+ 27DC             >
 168+ 27DC             >
 168+ 27DC             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D9             >
 168+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D9             >Latest_Definition defl  Heap_Ptr
 168+ E4D9             >
 168+ E4D9             >                // dummy db directives used to calculate length of namec
 168+ E4D9 3E 49 4E    >                db      ">IN"
 168+ E4DC             >len_NFA         defl    $ - temp_NFA
 168+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D9             >
 168+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DA 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DC CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DD             >
 168+ E4DD D1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DF             >
 168+ E4DF             >mirror_Ptr      defl    $
 168+ E4DF             >
 168+ E4DF DE 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E1             >
 168+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E1             >
 168+ E4E1             >//              ______________________________________________________________________
 168+ E4E1             >//              Dictionary part
 168+ E4E1             >
 168+ E4E1             >                org     Dict_Ptr
 168+ 27DC             >
 168+ 27DC DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27DE             >
 168+ 27DE             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27DE CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27E1             >
 168+ 27E1             >
 168+ 27E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27E1             >
 168+ 27E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27E1 20          >                db      32
 169+ 27E2                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27E2             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27E2             >
 169+ 27E2             >Dict_Ptr        defl    $
 169+ 27E2             >
 169+ 27E2             >//              ______________________________________________________________________
 169+ 27E2             >//              Heap part
 169+ 27E2             >
 169+ 27E2             >
 169+ 27E2             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E1             >
 169+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E1             >Latest_Definition defl  Heap_Ptr
 169+ E4E1             >
 169+ E4E1             >                // dummy db directives used to calculate length of namec
 169+ E4E1 4F 55 54    >                db      "OUT"
 169+ E4E4             >len_NFA         defl    $ - temp_NFA
 169+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E1             >
 169+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E5             >
 169+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E7             >
 169+ E4E7             >mirror_Ptr      defl    $
 169+ E4E7             >
 169+ E4E7 E4 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E9             >
 169+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E9             >
 169+ E4E9             >//              ______________________________________________________________________
 169+ E4E9             >//              Dictionary part
 169+ E4E9             >
 169+ E4E9             >                org     Dict_Ptr
 169+ 27E2             >
 169+ 27E2 E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27E4             >
 169+ 27E4             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27E4 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27E7             >
 169+ 27E7             >
 169+ 27E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27E7             >
 169+ 27E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27E7 22          >                db      34
 170+ 27E8                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27E8             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27E8             >
 170+ 27E8             >Dict_Ptr        defl    $
 170+ 27E8             >
 170+ 27E8             >//              ______________________________________________________________________
 170+ 27E8             >//              Heap part
 170+ 27E8             >
 170+ 27E8             >
 170+ 27E8             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E9             >
 170+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E9             >Latest_Definition defl  Heap_Ptr
 170+ E4E9             >
 170+ E4E9             >                // dummy db directives used to calculate length of namec
 170+ E4E9 53 43 52    >                db      "SCR"
 170+ E4EC             >len_NFA         defl    $ - temp_NFA
 170+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E9             >
 170+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EA 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EC D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4ED             >
 170+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EF             >
 170+ E4EF             >mirror_Ptr      defl    $
 170+ E4EF             >
 170+ E4EF EA 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F1             >
 170+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F1             >
 170+ E4F1             >//              ______________________________________________________________________
 170+ E4F1             >//              Dictionary part
 170+ E4F1             >
 170+ E4F1             >                org     Dict_Ptr
 170+ 27E8             >
 170+ 27E8 EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27EA             >
 170+ 27EA             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27EA CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27ED             >
 170+ 27ED             >
 170+ 27ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27ED             >
 170+ 27ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27ED 24          >                db      36
 171+ 27EE                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27EE             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27EE             >
 171+ 27EE             >Dict_Ptr        defl    $
 171+ 27EE             >
 171+ 27EE             >//              ______________________________________________________________________
 171+ 27EE             >//              Heap part
 171+ 27EE             >
 171+ 27EE             >
 171+ 27EE             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F1             >
 171+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F1             >Latest_Definition defl  Heap_Ptr
 171+ E4F1             >
 171+ E4F1             >                // dummy db directives used to calculate length of namec
 171+ E4F1 4F 46 46 53 >                db      "OFFSET"
 171+ E4F5 45 54       >
 171+ E4F7             >len_NFA         defl    $ - temp_NFA
 171+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F1             >
 171+ E4F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F6 45 54       >
 171+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F7 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F8             >
 171+ E4F8 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FA             >
 171+ E4FA             >mirror_Ptr      defl    $
 171+ E4FA             >
 171+ E4FA F0 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FC             >
 171+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FC             >
 171+ E4FC             >//              ______________________________________________________________________
 171+ E4FC             >//              Dictionary part
 171+ E4FC             >
 171+ E4FC             >                org     Dict_Ptr
 171+ 27EE             >
 171+ 27EE FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27F0             >
 171+ 27F0             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27F0 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27F3             >
 171+ 27F3             >
 171+ 27F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27F3             >
 171+ 27F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27F3 26          >                db      38
 172+ 27F4                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27F4             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27F4             >
 172+ 27F4             >Dict_Ptr        defl    $
 172+ 27F4             >
 172+ 27F4             >//              ______________________________________________________________________
 172+ 27F4             >//              Heap part
 172+ 27F4             >
 172+ 27F4             >
 172+ 27F4             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FC             >
 172+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FC             >Latest_Definition defl  Heap_Ptr
 172+ E4FC             >
 172+ E4FC             >                // dummy db directives used to calculate length of namec
 172+ E4FC 43 4F 4E 54 >                db      "CONTEXT"
 172+ E500 45 58 54    >
 172+ E503             >len_NFA         defl    $ - temp_NFA
 172+ E503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FC             >
 172+ E4FC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E501 45 58 54    >
 172+ E504             >                org     $-1                 // alter last byte of Name just above to set
 172+ E503 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E504             >
 172+ E504 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E506             >Prev_Ptr        defl    Heap_Ptr
 172+ E506             >
 172+ E506             >mirror_Ptr      defl    $
 172+ E506             >
 172+ E506 F6 27       >                dw      Dict_Ptr + 2        // xt
 172+ E508             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E508             >
 172+ E508             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E508             >
 172+ E508             >//              ______________________________________________________________________
 172+ E508             >//              Dictionary part
 172+ E508             >
 172+ E508             >                org     Dict_Ptr
 172+ 27F4             >
 172+ 27F4 06 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27F6             >
 172+ 27F6             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27F6 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 27F9             >
 172+ 27F9             >
 172+ 27F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 27F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 27F9             >
 172+ 27F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 27F9 28          >                db      40
 173+ 27FA                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 27FA             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 27FA             >
 173+ 27FA             >Dict_Ptr        defl    $
 173+ 27FA             >
 173+ 27FA             >//              ______________________________________________________________________
 173+ 27FA             >//              Heap part
 173+ 27FA             >
 173+ 27FA             >
 173+ 27FA             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E508             >
 173+ E508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E508             >Latest_Definition defl  Heap_Ptr
 173+ E508             >
 173+ E508             >                // dummy db directives used to calculate length of namec
 173+ E508 43 55 52 52 >                db      "CURRENT"
 173+ E50C 45 4E 54    >
 173+ E50F             >len_NFA         defl    $ - temp_NFA
 173+ E50F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E508             >
 173+ E508 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E509 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50D 45 4E 54    >
 173+ E510             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50F D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E510             >
 173+ E510 FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E512             >Prev_Ptr        defl    Heap_Ptr
 173+ E512             >
 173+ E512             >mirror_Ptr      defl    $
 173+ E512             >
 173+ E512 FC 27       >                dw      Dict_Ptr + 2        // xt
 173+ E514             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E514             >
 173+ E514             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E514             >
 173+ E514             >//              ______________________________________________________________________
 173+ E514             >//              Dictionary part
 173+ E514             >
 173+ E514             >                org     Dict_Ptr
 173+ 27FA             >
 173+ 27FA 12 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 27FC             >
 173+ 27FC             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 27FC CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 27FF             >
 173+ 27FF             >
 173+ 27FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 27FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 27FF             >
 173+ 27FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 27FF 2A          >                db      42
 174+ 2800                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 2800             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 2800             >
 174+ 2800             >Dict_Ptr        defl    $
 174+ 2800             >
 174+ 2800             >//              ______________________________________________________________________
 174+ 2800             >//              Heap part
 174+ 2800             >
 174+ 2800             >
 174+ 2800             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E514             >
 174+ E514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E514             >Latest_Definition defl  Heap_Ptr
 174+ E514             >
 174+ E514             >                // dummy db directives used to calculate length of namec
 174+ E514 53 54 41 54 >                db      "STATE"
 174+ E518 45          >
 174+ E519             >len_NFA         defl    $ - temp_NFA
 174+ E519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E514             >
 174+ E514 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E515 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E519 45          >
 174+ E51A             >                org     $-1                 // alter last byte of Name just above to set
 174+ E519 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51A             >
 174+ E51A 08 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51C             >Prev_Ptr        defl    Heap_Ptr
 174+ E51C             >
 174+ E51C             >mirror_Ptr      defl    $
 174+ E51C             >
 174+ E51C 02 28       >                dw      Dict_Ptr + 2        // xt
 174+ E51E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51E             >
 174+ E51E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51E             >
 174+ E51E             >//              ______________________________________________________________________
 174+ E51E             >//              Dictionary part
 174+ E51E             >
 174+ E51E             >                org     Dict_Ptr
 174+ 2800             >
 174+ 2800 1C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 2802             >
 174+ 2802             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 2802 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 2805             >
 174+ 2805             >
 174+ 2805             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 2805             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 2805             >
 174+ 2805             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 2805 2C          >                db      44
 175+ 2806                              User_Def BASE       , "BASE"      , 46 //
 175+ 2806             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 2806             >
 175+ 2806             >Dict_Ptr        defl    $
 175+ 2806             >
 175+ 2806             >//              ______________________________________________________________________
 175+ 2806             >//              Heap part
 175+ 2806             >
 175+ 2806             >
 175+ 2806             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51E             >
 175+ E51E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51E             >Latest_Definition defl  Heap_Ptr
 175+ E51E             >
 175+ E51E             >                // dummy db directives used to calculate length of namec
 175+ E51E 42 41 53 45 >                db      "BASE"
 175+ E522             >len_NFA         defl    $ - temp_NFA
 175+ E522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51E             >
 175+ E51E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51F 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E523             >                org     $-1                 // alter last byte of Name just above to set
 175+ E522 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E523             >
 175+ E523 14 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E525             >Prev_Ptr        defl    Heap_Ptr
 175+ E525             >
 175+ E525             >mirror_Ptr      defl    $
 175+ E525             >
 175+ E525 08 28       >                dw      Dict_Ptr + 2        // xt
 175+ E527             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E527             >
 175+ E527             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E527             >
 175+ E527             >//              ______________________________________________________________________
 175+ E527             >//              Dictionary part
 175+ E527             >
 175+ E527             >                org     Dict_Ptr
 175+ 2806             >
 175+ 2806 25 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 2808             >
 175+ 2808             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 2808 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 280B             >
 175+ 280B             >
 175+ 280B             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 280B             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 280B             >
 175+ 280B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 280B 2E          >                db      46
 176+ 280C                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 280C             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 280C             >
 176+ 280C             >Dict_Ptr        defl    $
 176+ 280C             >
 176+ 280C             >//              ______________________________________________________________________
 176+ 280C             >//              Heap part
 176+ 280C             >
 176+ 280C             >
 176+ 280C             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E527             >
 176+ E527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E527             >Latest_Definition defl  Heap_Ptr
 176+ E527             >
 176+ E527             >                // dummy db directives used to calculate length of namec
 176+ E527 44 50 4C    >                db      "DPL"
 176+ E52A             >len_NFA         defl    $ - temp_NFA
 176+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E527             >
 176+ E527 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E528 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52A CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52B             >
 176+ E52B 1E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52D             >Prev_Ptr        defl    Heap_Ptr
 176+ E52D             >
 176+ E52D             >mirror_Ptr      defl    $
 176+ E52D             >
 176+ E52D 0E 28       >                dw      Dict_Ptr + 2        // xt
 176+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52F             >
 176+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52F             >
 176+ E52F             >//              ______________________________________________________________________
 176+ E52F             >//              Dictionary part
 176+ E52F             >
 176+ E52F             >                org     Dict_Ptr
 176+ 280C             >
 176+ 280C 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 280E             >
 176+ 280E             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 280E CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2811             >
 176+ 2811             >
 176+ 2811             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2811             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2811             >
 176+ 2811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2811 30          >                db      48
 177+ 2812                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 2812             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 2812             >
 177+ 2812             >Dict_Ptr        defl    $
 177+ 2812             >
 177+ 2812             >//              ______________________________________________________________________
 177+ 2812             >//              Heap part
 177+ 2812             >
 177+ 2812             >
 177+ 2812             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52F             >
 177+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52F             >Latest_Definition defl  Heap_Ptr
 177+ E52F             >
 177+ E52F             >                // dummy db directives used to calculate length of namec
 177+ E52F 46 4C 44    >                db      "FLD"
 177+ E532             >len_NFA         defl    $ - temp_NFA
 177+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52F             >
 177+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E530 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E533             >                org     $-1                 // alter last byte of Name just above to set
 177+ E532 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E533             >
 177+ E533 27 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E535             >Prev_Ptr        defl    Heap_Ptr
 177+ E535             >
 177+ E535             >mirror_Ptr      defl    $
 177+ E535             >
 177+ E535 14 28       >                dw      Dict_Ptr + 2        // xt
 177+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E537             >
 177+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E537             >
 177+ E537             >//              ______________________________________________________________________
 177+ E537             >//              Dictionary part
 177+ E537             >
 177+ E537             >                org     Dict_Ptr
 177+ 2812             >
 177+ 2812 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2814             >
 177+ 2814             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2814 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 2817             >
 177+ 2817             >
 177+ 2817             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 2817             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 2817             >
 177+ 2817             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 2817 32          >                db      50
 178+ 2818                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 2818             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 2818             >
 178+ 2818             >Dict_Ptr        defl    $
 178+ 2818             >
 178+ 2818             >//              ______________________________________________________________________
 178+ 2818             >//              Heap part
 178+ 2818             >
 178+ 2818             >
 178+ 2818             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E537             >
 178+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E537             >Latest_Definition defl  Heap_Ptr
 178+ E537             >
 178+ E537             >                // dummy db directives used to calculate length of namec
 178+ E537 43 53 50    >                db      "CSP"
 178+ E53A             >len_NFA         defl    $ - temp_NFA
 178+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E537             >
 178+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E538 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53A D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53B             >
 178+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53D             >Prev_Ptr        defl    Heap_Ptr
 178+ E53D             >
 178+ E53D             >mirror_Ptr      defl    $
 178+ E53D             >
 178+ E53D 1A 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53F             >
 178+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53F             >
 178+ E53F             >//              ______________________________________________________________________
 178+ E53F             >//              Dictionary part
 178+ E53F             >
 178+ E53F             >                org     Dict_Ptr
 178+ 2818             >
 178+ 2818 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 281A             >
 178+ 281A             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 281A CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 281D             >
 178+ 281D             >
 178+ 281D             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 281D             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 281D             >
 178+ 281D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 281D 34          >                db      52
 179+ 281E                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 281E             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 281E             >
 179+ 281E             >Dict_Ptr        defl    $
 179+ 281E             >
 179+ 281E             >//              ______________________________________________________________________
 179+ 281E             >//              Heap part
 179+ 281E             >
 179+ 281E             >
 179+ 281E             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53F             >
 179+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53F             >Latest_Definition defl  Heap_Ptr
 179+ E53F             >
 179+ E53F             >                // dummy db directives used to calculate length of namec
 179+ E53F 52 23       >                db      "R#"
 179+ E541             >len_NFA         defl    $ - temp_NFA
 179+ E541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53F             >
 179+ E53F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E540 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E542             >                org     $-1                 // alter last byte of Name just above to set
 179+ E541 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E542             >
 179+ E542 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E544             >Prev_Ptr        defl    Heap_Ptr
 179+ E544             >
 179+ E544             >mirror_Ptr      defl    $
 179+ E544             >
 179+ E544 20 28       >                dw      Dict_Ptr + 2        // xt
 179+ E546             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E546             >
 179+ E546             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E546             >
 179+ E546             >//              ______________________________________________________________________
 179+ E546             >//              Dictionary part
 179+ E546             >
 179+ E546             >                org     Dict_Ptr
 179+ 281E             >
 179+ 281E 44 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 2820             >
 179+ 2820             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 2820 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2823             >
 179+ 2823             >
 179+ 2823             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2823             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2823             >
 179+ 2823             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2823 36          >                db      54
 180+ 2824                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2824             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2824             >
 180+ 2824             >Dict_Ptr        defl    $
 180+ 2824             >
 180+ 2824             >//              ______________________________________________________________________
 180+ 2824             >//              Heap part
 180+ 2824             >
 180+ 2824             >
 180+ 2824             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E546             >
 180+ E546             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E546             >Latest_Definition defl  Heap_Ptr
 180+ E546             >
 180+ E546             >                // dummy db directives used to calculate length of namec
 180+ E546 48 4C 44    >                db      "HLD"
 180+ E549             >len_NFA         defl    $ - temp_NFA
 180+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E546             >
 180+ E546 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E547 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 180+ E549 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54A             >
 180+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54C             >Prev_Ptr        defl    Heap_Ptr
 180+ E54C             >
 180+ E54C             >mirror_Ptr      defl    $
 180+ E54C             >
 180+ E54C 26 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54E             >
 180+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54E             >
 180+ E54E             >//              ______________________________________________________________________
 180+ E54E             >//              Dictionary part
 180+ E54E             >
 180+ E54E             >                org     Dict_Ptr
 180+ 2824             >
 180+ 2824 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 2826             >
 180+ 2826             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 2826 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 2829             >
 180+ 2829             >
 180+ 2829             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 2829             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 2829             >
 180+ 2829             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 2829 38          >                db      56
 181+ 282A                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 282A             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 282A             >
 181+ 282A             >Dict_Ptr        defl    $
 181+ 282A             >
 181+ 282A             >//              ______________________________________________________________________
 181+ 282A             >//              Heap part
 181+ 282A             >
 181+ 282A             >
 181+ 282A             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54E             >
 181+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54E             >Latest_Definition defl  Heap_Ptr
 181+ E54E             >
 181+ E54E             >                // dummy db directives used to calculate length of namec
 181+ E54E 55 53 45 44 >                db      "USED"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54E             >
 181+ E54E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54F 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 46 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 2C 28       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 282A             >
 181+ 282A 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 282C             >
 181+ 282C             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 282C CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 282F             >
 181+ 282F             >
 181+ 282F             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 282F             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 282F             >
 181+ 282F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 282F 3A          >                db      58
 182+ 2830                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2830             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2830             >
 182+ 2830             >Dict_Ptr        defl    $
 182+ 2830             >
 182+ 2830             >//              ______________________________________________________________________
 182+ 2830             >//              Heap part
 182+ 2830             >
 182+ 2830             >
 182+ 2830             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 32 28       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 2830             >
 182+ 2830 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 2832             >
 182+ 2832             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 2832 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 2835             >
 182+ 2835             >
 182+ 2835             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 2835             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 2835             >
 182+ 2835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 2835 3C          >                db      60
 183+ 2836                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 2836             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 2836             >
 183+ 2836             >Dict_Ptr        defl    $
 183+ 2836             >
 183+ 2836             >//              ______________________________________________________________________
 183+ 2836             >//              Heap part
 183+ 2836             >
 183+ 2836             >
 183+ 2836             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 38 28       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 2836             >
 183+ 2836 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 2838             >
 183+ 2838             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 2838 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 283B             >
 183+ 283B             >
 183+ 283B             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 283B             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 283B             >
 183+ 283B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 283B 3E          >                db      62
 184+ 283C                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 283C             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 283C             >
 184+ 283C             >Dict_Ptr        defl    $
 184+ 283C             >
 184+ 283C             >//              ______________________________________________________________________
 184+ 283C             >//              Heap part
 184+ 283C             >
 184+ 283C             >
 184+ 283C             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 3E 28       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 283C             >
 184+ 283C 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 283E             >
 184+ 283E             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 283E CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2841             >
 184+ 2841             >
 184+ 2841             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2841             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2841             >
 184+ 2841             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2841 40          >                db      64
 185+ 2842                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 2842             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 2842             >
 185+ 2842             >Dict_Ptr        defl    $
 185+ 2842             >
 185+ 2842             >//              ______________________________________________________________________
 185+ 2842             >//              Heap part
 185+ 2842             >
 185+ 2842             >
 185+ 2842             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 44 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 2842             >
 185+ 2842 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2844             >
 185+ 2844             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2844 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 2847             >
 185+ 2847             >
 185+ 2847             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 2847             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 2847             >
 185+ 2847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 2847 42          >                db      66
 186+ 2848                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 2848             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 2848             >
 186+ 2848             >Dict_Ptr        defl    $
 186+ 2848             >
 186+ 2848             >//              ______________________________________________________________________
 186+ 2848             >//              Heap part
 186+ 2848             >
 186+ 2848             >
 186+ 2848             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 4A 28       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 2848             >
 186+ 2848 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 284A             >
 186+ 284A             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 284A CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 284D             >
 186+ 284D             >
 186+ 284D             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 284D             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 284D             >
 186+ 284D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 284D 44          >                db      68
 187+ 284E                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 284E             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 284E             >
 187+ 284E             >Dict_Ptr        defl    $
 187+ 284E             >
 187+ 284E             >//              ______________________________________________________________________
 187+ 284E             >//              Heap part
 187+ 284E             >
 187+ 284E             >
 187+ 284E             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 50 28       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 284E             >
 187+ 284E 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2850             >
 187+ 2850             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2850 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2853             >
 187+ 2853             >
 187+ 2853             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2853             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2853             >
 187+ 2853             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2853 46          >                db      70
 188+ 2854                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2854             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2854             >
 188+ 2854             >Dict_Ptr        defl    $
 188+ 2854             >
 188+ 2854             >//              ______________________________________________________________________
 188+ 2854             >//              Heap part
 188+ 2854             >
 188+ 2854             >
 188+ 2854             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A 56 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 2854             >
 188+ 2854 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 2856             >
 188+ 2856             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 2856 CD 2B 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2859             >
 188+ 2859             >
 188+ 2859             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2859             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2859             >
 188+ 2859             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2859 48          >                db      72
 189+ 285A
 190+ 285A              //  ______________________________________________________________________
 191+ 285A              //
 192+ 285A              // here         -- a
 193+ 285A                              Colon_Def HERE, "HERE", is_normal
 193+ 285A             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 285A             >
 193+ 285A             >Dict_Ptr        defl    $
 193+ 285A             >
 193+ 285A             >//              ______________________________________________________________________
 193+ 285A             >//              Heap part
 193+ 285A             >
 193+ 285A             >
 193+ 285A             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 5C 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 285A             >
 193+ 285A A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 285C             >
 193+ 285C             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 285C CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 285F             >
 193+ 285F             >
 193+ 285F             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 285F             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 285F             >
 193+ 285F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 285F B4 27 3F 26                  dw      DP, FETCH               // dp @
 195+ 2863 F5 24                        dw      EXIT                    // ;
 196+ 2865
 197+ 2865              //  ______________________________________________________________________
 198+ 2865              //
 199+ 2865              // allot        n --
 200+ 2865                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2865             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2865             >
 200+ 2865             >Dict_Ptr        defl    $
 200+ 2865             >
 200+ 2865             >//              ______________________________________________________________________
 200+ 2865             >//              Heap part
 200+ 2865             >
 200+ 2865             >
 200+ 2865             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD 67 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 2865             >
 200+ 2865 AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 2867             >
 200+ 2867             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 2867 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 286A             >
 200+ 286A             >
 200+ 286A             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 286A             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 286A             >
 200+ 286A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 286A B4 27 27 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 286E F5 24                        dw      EXIT                    // ;
 203+ 2870
 204+ 2870              //  ______________________________________________________________________
 205+ 2870              //
 206+ 2870              // comma        n --
 207+ 2870                              Colon_Def COMMA, ",", is_normal
 207+ 2870             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2870             >
 207+ 2870             >Dict_Ptr        defl    $
 207+ 2870             >
 207+ 2870             >//              ______________________________________________________________________
 207+ 2870             >//              Heap part
 207+ 2870             >
 207+ 2870             >
 207+ 2870             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 72 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 2870             >
 207+ 2870 B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 2872             >
 207+ 2872             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 2872 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2875             >
 207+ 2875             >
 207+ 2875             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2875             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2875             >
 207+ 2875             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2875 5C 28 49 26                  dw      HERE, STORE             // here !
 209+ 2879 45 27 67 28                  dw      TWO, ALLOT              // 2 allot
 210+ 287D F5 24                        dw      EXIT                    // ;
 211+ 287F
 212+ 287F              //  ______________________________________________________________________
 213+ 287F              //
 214+ 287F              // ccomma       c --
 215+ 287F                              Colon_Def CCOMMA, "C,", is_normal
 215+ 287F             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 287F             >
 215+ 287F             >Dict_Ptr        defl    $
 215+ 287F             >
 215+ 287F             >//              ______________________________________________________________________
 215+ 287F             >//              Heap part
 215+ 287F             >
 215+ 287F             >
 215+ 287F             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA 81 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 287F             >
 215+ 287F BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2881             >
 215+ 2881             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2881 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2884             >
 215+ 2884             >
 215+ 2884             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2884             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2884             >
 215+ 2884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2884 5C 28 5D 26                  dw      HERE, CSTORE            // here c!
 217+ 2888 3E 27 67 28                  dw      ONE, ALLOT              // 1 allot
 218+ 288C F5 24                        dw      EXIT                    // ;
 219+ 288E
 220+ 288E              //  ______________________________________________________________________
 221+ 288E              //
 222+ 288E              // hpcomma      n --
 223+ 288E              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 288E              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 288E              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 288E              //              dw      EXIT                    // ;
 227+ 288E
 228+ 288E              //  ______________________________________________________________________
 229+ 288E              //
 230+ 288E              // s>d          n -- d
 231+ 288E              // converts a single precision integer in a double precision
 232+ 288E                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 288E             >
 232+ 288E             >Dict_Ptr        defl    $
 232+ 288E             >
 232+ 288E             >//              ______________________________________________________________________
 232+ 288E             >//              Heap part
 232+ 288E             >
 232+ 288E             >
 232+ 288E             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BC             >
 232+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BC             >Latest_Definition defl  Heap_Ptr
 232+ E5BC             >
 232+ E5BC             >                // dummy db directives used to calculate length of namec
 232+ E5BC 53 3E 44    >                db      "S>D"
 232+ E5BF             >len_NFA         defl    $ - temp_NFA
 232+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BC             >
 232+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C0             >
 232+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C2             >
 232+ E5C2             >mirror_Ptr      defl    $
 232+ E5C2             >
 232+ E5C2 90 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C4             >
 232+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C4             >
 232+ E5C4             >//              ______________________________________________________________________
 232+ E5C4             >//              Dictionary part
 232+ E5C4             >
 232+ E5C4             >                org     Dict_Ptr
 232+ 288E             >
 232+ 288E C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 2890             >
 232+ 2890             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 2890 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 2890 ~           >
 232+ 2890 ~           >
 232+ 2890             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 2890             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 2890             >
 232+ 2890             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 2890 E1                           pop     hl
 234+ 2891 7C                           ld      a, h
 235+ 2892 E5                           push    hl
 236+ 2893 17                           rla
 237+ 2894 ED 62                        sbc     hl, hl
 238+ 2896 E5                           push    hl
 239+ 2897                              next
 239+ 2897 DD E9       >                jp      (ix)
 240+ 2899
 241+ 2899              //  ______________________________________________________________________
 242+ 2899              //
 243+ 2899              // -            n1 n2 -- n3
 244+ 2899              // subtraction
 245+ 2899                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 2899             >
 245+ 2899             >Dict_Ptr        defl    $
 245+ 2899             >
 245+ 2899             >//              ______________________________________________________________________
 245+ 2899             >//              Heap part
 245+ 2899             >
 245+ 2899             >
 245+ 2899             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C4             >
 245+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C4             >Latest_Definition defl  Heap_Ptr
 245+ E5C4             >
 245+ E5C4             >                // dummy db directives used to calculate length of namec
 245+ E5C4 2D          >                db      "-"
 245+ E5C5             >len_NFA         defl    $ - temp_NFA
 245+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C4             >
 245+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C6             >
 245+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >mirror_Ptr      defl    $
 245+ E5C8             >
 245+ E5C8 9B 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CA             >
 245+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CA             >
 245+ E5CA             >//              ______________________________________________________________________
 245+ E5CA             >//              Dictionary part
 245+ E5CA             >
 245+ E5CA             >                org     Dict_Ptr
 245+ 2899             >
 245+ 2899 C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 289B             >
 245+ 289B             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 289B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 289B ~           >
 245+ 289B ~           >
 245+ 289B             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 289B             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 289B             >
 245+ 289B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 289B D9                           exx
 247+ 289C D1                           pop     de
 248+ 289D E1                           pop     hl
 249+ 289E A7                           and     a
 250+ 289F ED 52                        sbc     hl, de
 251+ 28A1 E5                           push    hl
 252+ 28A2 D9                           exx
 253+ 28A3                              next
 253+ 28A3 DD E9       >                jp      (ix)
 254+ 28A5
 255+ 28A5
 256+ 28A5              //  ______________________________________________________________________
 257+ 28A5              //
 258+ 28A5              // =            n1 n2 -- n3
 259+ 28A5              // equals
 260+ 28A5                              Colon_Def EQUALS, "=", is_normal
 260+ 28A5             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 28A5             >
 260+ 28A5             >Dict_Ptr        defl    $
 260+ 28A5             >
 260+ 28A5             >//              ______________________________________________________________________
 260+ 28A5             >//              Heap part
 260+ 28A5             >
 260+ 28A5             >
 260+ 28A5             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CA             >
 260+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CA             >Latest_Definition defl  Heap_Ptr
 260+ E5CA             >
 260+ E5CA             >                // dummy db directives used to calculate length of namec
 260+ E5CA 3D          >                db      "="
 260+ E5CB             >len_NFA         defl    $ - temp_NFA
 260+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CA             >
 260+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CC             >
 260+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >mirror_Ptr      defl    $
 260+ E5CE             >
 260+ E5CE A7 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D0             >
 260+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D0             >
 260+ E5D0             >//              ______________________________________________________________________
 260+ E5D0             >//              Dictionary part
 260+ E5D0             >
 260+ E5D0             >                org     Dict_Ptr
 260+ 28A5             >
 260+ 28A5 CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 28A7             >
 260+ 28A7             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 28A7 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 28AA             >
 260+ 28AA             >
 260+ 28AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 28AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 28AA             >
 260+ 28AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 28AA 9B 28 1A 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28AE F5 24                        dw      EXIT                    // ;
 263+ 28B0
 264+ 28B0              //  ______________________________________________________________________
 265+ 28B0              //
 266+ 28B0              // u<           u1 u2 -- u3
 267+ 28B0              // unsigned less-than
 268+ 28B0                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28B0             >
 268+ 28B0             >Dict_Ptr        defl    $
 268+ 28B0             >
 268+ 28B0             >//              ______________________________________________________________________
 268+ 28B0             >//              Heap part
 268+ 28B0             >
 268+ 28B0             >
 268+ 28B0             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D0             >
 268+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D0             >Latest_Definition defl  Heap_Ptr
 268+ E5D0             >
 268+ E5D0             >                // dummy db directives used to calculate length of namec
 268+ E5D0 55 3C       >                db      "U<"
 268+ E5D2             >len_NFA         defl    $ - temp_NFA
 268+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D0             >
 268+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D3             >
 268+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D5             >
 268+ E5D5             >mirror_Ptr      defl    $
 268+ E5D5             >
 268+ E5D5 B2 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D7             >
 268+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D7             >
 268+ E5D7             >//              ______________________________________________________________________
 268+ E5D7             >//              Dictionary part
 268+ E5D7             >
 268+ E5D7             >                org     Dict_Ptr
 268+ 28B0             >
 268+ 28B0 D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28B2             >
 268+ 28B2             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28B2 ~           >
 268+ 28B2 ~           >
 268+ 28B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28B2             >
 268+ 28B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28B2 D9                           exx
 270+ 28B3 D1                           pop     de
 271+ 28B4 E1                           pop     hl
 272+ 28B5 A7                           and     a
 273+ 28B6 ED 52                        sbc     hl, de
 274+ 28B8 ED 62                        sbc     hl, hl
 275+ 28BA E5                           push    hl
 276+ 28BB D9                           exx
 277+ 28BC                              next
 277+ 28BC DD E9       >                jp      (ix)
 278+ 28BE
 279+ 28BE              //  ______________________________________________________________________
 280+ 28BE              //
 281+ 28BE              // <           n1 n2 -- n3
 282+ 28BE              // less-than
 283+ 28BE                              New_Def LESS, "<", is_code, is_normal
 283+ 28BE             >
 283+ 28BE             >Dict_Ptr        defl    $
 283+ 28BE             >
 283+ 28BE             >//              ______________________________________________________________________
 283+ 28BE             >//              Heap part
 283+ 28BE             >
 283+ 28BE             >
 283+ 28BE             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5D7             >
 283+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5D7             >Latest_Definition defl  Heap_Ptr
 283+ E5D7             >
 283+ E5D7             >                // dummy db directives used to calculate length of namec
 283+ E5D7 3C          >                db      "<"
 283+ E5D8             >len_NFA         defl    $ - temp_NFA
 283+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5D7             >
 283+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5D9             >
 283+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DB             >
 283+ E5DB             >mirror_Ptr      defl    $
 283+ E5DB             >
 283+ E5DB C0 28       >                dw      Dict_Ptr + 2        // xt
 283+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5DD             >
 283+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5DD             >
 283+ E5DD             >//              ______________________________________________________________________
 283+ E5DD             >//              Dictionary part
 283+ E5DD             >
 283+ E5DD             >                org     Dict_Ptr
 283+ 28BE             >
 283+ 28BE DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 28C0             >
 283+ 28C0             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 28C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 28C0 ~           >
 283+ 28C0 ~           >
 283+ 28C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 28C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 28C0             >
 283+ 28C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 28C0 D9                           exx
 285+ 28C1 D1                           pop     de
 286+ 28C2 E1                           pop     hl
 287+ 28C3 7C                           ld      a, h
 288+ 28C4 EE 80                        xor     $80
 289+ 28C6 67                           ld      h, a
 290+ 28C7 7A                           ld      a, d
 291+ 28C8 EE 80                        xor     $80
 292+ 28CA 57                           ld      d, a
 293+ 28CB              //              and     a
 294+ 28CB ED 52                        sbc     hl, de
 295+ 28CD ED 62                        sbc     hl, hl
 296+ 28CF E5                           push    hl
 297+ 28D0 D9                           exx
 298+ 28D1                              next
 298+ 28D1 DD E9       >                jp      (ix)
 299+ 28D3
 300+ 28D3              //  ______________________________________________________________________
 301+ 28D3              //
 302+ 28D3              // >            n1 n2 -- n3
 303+ 28D3              // greater than
 304+ 28D3                              Colon_Def GREATER, ">", is_normal
 304+ 28D3             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28D3             >
 304+ 28D3             >Dict_Ptr        defl    $
 304+ 28D3             >
 304+ 28D3             >//              ______________________________________________________________________
 304+ 28D3             >//              Heap part
 304+ 28D3             >
 304+ 28D3             >
 304+ 28D3             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DD             >
 304+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DD             >Latest_Definition defl  Heap_Ptr
 304+ E5DD             >
 304+ E5DD             >                // dummy db directives used to calculate length of namec
 304+ E5DD 3E          >                db      ">"
 304+ E5DE             >len_NFA         defl    $ - temp_NFA
 304+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DD             >
 304+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DF             >
 304+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >mirror_Ptr      defl    $
 304+ E5E1             >
 304+ E5E1 D5 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E3             >
 304+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E3             >
 304+ E5E3             >//              ______________________________________________________________________
 304+ E5E3             >//              Dictionary part
 304+ E5E3             >
 304+ E5E3             >                org     Dict_Ptr
 304+ 28D3             >
 304+ 28D3 E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28D5             >
 304+ 28D5             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28D5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28D8             >
 304+ 28D8             >
 304+ 28D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28D8             >
 304+ 28D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28D8 C7 25 C0 28                  dw      SWAP, LESS              // swap <
 306+ 28DC F5 24                        dw      EXIT                    // ;
 307+ 28DE              //  ______________________________________________________________________
 308+ 28DE              //
 309+ 28DE              // min          n1 n2 -- n3
 310+ 28DE              // minimum between n1 and n2
 311+ 28DE                              Colon_Def MIN, "MIN" , is_normal
 311+ 28DE             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28DE             >
 311+ 28DE             >Dict_Ptr        defl    $
 311+ 28DE             >
 311+ 28DE             >//              ______________________________________________________________________
 311+ 28DE             >//              Heap part
 311+ 28DE             >
 311+ 28DE             >
 311+ 28DE             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E3             >
 311+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E3             >Latest_Definition defl  Heap_Ptr
 311+ E5E3             >
 311+ E5E3             >                // dummy db directives used to calculate length of namec
 311+ E5E3 4D 49 4E    >                db      "MIN"
 311+ E5E6             >len_NFA         defl    $ - temp_NFA
 311+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E3             >
 311+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E7             >
 311+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E9             >
 311+ E5E9             >mirror_Ptr      defl    $
 311+ E5E9             >
 311+ E5E9 E0 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EB             >
 311+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EB             >
 311+ E5EB             >//              ______________________________________________________________________
 311+ E5EB             >//              Dictionary part
 311+ E5EB             >
 311+ E5EB             >                org     Dict_Ptr
 311+ 28DE             >
 311+ 28DE E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28E0             >
 311+ 28E0             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28E0 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28E3             >
 311+ 28E3             >
 311+ 28E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28E3             >
 311+ 28E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28E3 1D 26                        dw      TWO_DUP                 // 2dup
 313+ 28E5 D5 28                        dw      GREATER                 // >
 314+ 28E7 8F 20                        dw      ZBRANCH
 315+ 28E9 04 00                        dw      Min_Skip - $   // if
 316+ 28EB C7 25                        dw          SWAP                //      swap
 317+ 28ED              Min_Skip:                                       // endif
 318+ 28ED B3 25                        dw      DROP                    // drop
 319+ 28EF F5 24                        dw      EXIT                    // ;
 320+ 28F1
 321+ 28F1              //  ______________________________________________________________________
 322+ 28F1              //
 323+ 28F1              // max          n1 n2 -- n3
 324+ 28F1              // maximum between n1 and n2
 325+ 28F1                              Colon_Def MAX, "MAX", is_normal
 325+ 28F1             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28F1             >
 325+ 28F1             >Dict_Ptr        defl    $
 325+ 28F1             >
 325+ 28F1             >//              ______________________________________________________________________
 325+ 28F1             >//              Heap part
 325+ 28F1             >
 325+ 28F1             >
 325+ 28F1             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EB             >
 325+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EB             >Latest_Definition defl  Heap_Ptr
 325+ E5EB             >
 325+ E5EB             >                // dummy db directives used to calculate length of namec
 325+ E5EB 4D 41 58    >                db      "MAX"
 325+ E5EE             >len_NFA         defl    $ - temp_NFA
 325+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EB             >
 325+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EF             >
 325+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F1             >
 325+ E5F1             >mirror_Ptr      defl    $
 325+ E5F1             >
 325+ E5F1 F3 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F3             >
 325+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F3             >
 325+ E5F3             >//              ______________________________________________________________________
 325+ E5F3             >//              Dictionary part
 325+ E5F3             >
 325+ E5F3             >                org     Dict_Ptr
 325+ 28F1             >
 325+ 28F1 F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 28F3             >
 325+ 28F3             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 28F3 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 28F6             >
 325+ 28F6             >
 325+ 28F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 28F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 28F6             >
 325+ 28F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 28F6 1D 26                        dw      TWO_DUP                 // 2dup
 327+ 28F8 C0 28                        dw      LESS                    // <
 328+ 28FA 8F 20                        dw      ZBRANCH
 329+ 28FC 04 00                        dw      Max_Skip - $   // if
 330+ 28FE C7 25                        dw          SWAP                //      swap
 331+ 2900              Max_Skip:                                       // endif
 332+ 2900 B3 25                        dw      DROP                    // drop
 333+ 2902 F5 24                        dw      EXIT                    // ;
 334+ 2904
 335+ 2904              //  ______________________________________________________________________
 336+ 2904              //
 337+ 2904              // ?dup         n -- 0 | n n
 338+ 2904              // duplicate if not zero
 339+ 2904                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 2904             >
 339+ 2904             >Dict_Ptr        defl    $
 339+ 2904             >
 339+ 2904             >//              ______________________________________________________________________
 339+ 2904             >//              Heap part
 339+ 2904             >
 339+ 2904             >
 339+ 2904             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F3             >
 339+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F3             >Latest_Definition defl  Heap_Ptr
 339+ E5F3             >
 339+ E5F3             >                // dummy db directives used to calculate length of namec
 339+ E5F3 3F 44 55 50 >                db      "?DUP"
 339+ E5F7             >len_NFA         defl    $ - temp_NFA
 339+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F3             >
 339+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F8             >
 339+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FA             >
 339+ E5FA             >mirror_Ptr      defl    $
 339+ E5FA             >
 339+ E5FA 06 29       >                dw      Dict_Ptr + 2        // xt
 339+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FC             >
 339+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FC             >
 339+ E5FC             >//              ______________________________________________________________________
 339+ E5FC             >//              Dictionary part
 339+ E5FC             >
 339+ E5FC             >                org     Dict_Ptr
 339+ 2904             >
 339+ 2904 FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 2906             >
 339+ 2906             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 2906 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 2906 ~           >
 339+ 2906 ~           >
 339+ 2906             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 2906             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 2906             >
 339+ 2906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 2906              QDup_Ptr:
 341+ 2906 E1                           pop     hl
 342+ 2907 7C                           ld      a, h
 343+ 2908 B5                           or      l
 344+ 2909 28 01                        jr      z, QDup_Skip
 345+ 290B E5                               push    hl
 346+ 290C              QDup_Skip:
 347+ 290C                              psh1
 347+ 290C E5          >                push    hl
 347+ 290D DD E9       >                jp      (ix)
 348+ 290F
 349+ 290F              //  ______________________________________________________________________
 350+ 290F              //
 351+ 290F              // -dup         n -- 0 | n n
 352+ 290F              // duplicate if not zero
 353+ 290F                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 290F             >
 353+ 290F             >Dict_Ptr        defl    $
 353+ 290F             >
 353+ 290F             >//              ______________________________________________________________________
 353+ 290F             >//              Heap part
 353+ 290F             >
 353+ 290F             >
 353+ 290F             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FC             >
 353+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FC             >Latest_Definition defl  Heap_Ptr
 353+ E5FC             >
 353+ E5FC             >                // dummy db directives used to calculate length of namec
 353+ E5FC 2D 44 55 50 >                db      "-DUP"
 353+ E600             >len_NFA         defl    $ - temp_NFA
 353+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FC             >
 353+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E601             >                org     $-1                 // alter last byte of Name just above to set
 353+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E601             >
 353+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E603             >Prev_Ptr        defl    Heap_Ptr
 353+ E603             >
 353+ E603             >mirror_Ptr      defl    $
 353+ E603             >
 353+ E603 11 29       >                dw      Dict_Ptr + 2        // xt
 353+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E605             >
 353+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E605             >
 353+ E605             >//              ______________________________________________________________________
 353+ E605             >//              Dictionary part
 353+ E605             >
 353+ E605             >                org     Dict_Ptr
 353+ 290F             >
 353+ 290F 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 2911             >
 353+ 2911             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 2911 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 2911 ~           >
 353+ 2911 ~           >
 353+ 2911             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 2911             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 2911             >
 353+ 2911             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 2911 C3 06 29                     jp      QDup_Ptr
 355+ 2914
 356+ 2914              //  ______________________________________________________________________
 357+ 2914              //
 358+ 2914              // emit         c --
 359+ 2914                              Colon_Def EMIT, "EMIT", is_normal
 359+ 2914             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 2914             >
 359+ 2914             >Dict_Ptr        defl    $
 359+ 2914             >
 359+ 2914             >//              ______________________________________________________________________
 359+ 2914             >//              Heap part
 359+ 2914             >
 359+ 2914             >
 359+ 2914             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E605             >
 359+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E605             >Latest_Definition defl  Heap_Ptr
 359+ E605             >
 359+ E605             >                // dummy db directives used to calculate length of namec
 359+ E605 45 4D 49 54 >                db      "EMIT"
 359+ E609             >len_NFA         defl    $ - temp_NFA
 359+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E605             >
 359+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 359+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60A             >
 359+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60C             >Prev_Ptr        defl    Heap_Ptr
 359+ E60C             >
 359+ E60C             >mirror_Ptr      defl    $
 359+ E60C             >
 359+ E60C 16 29       >                dw      Dict_Ptr + 2        // xt
 359+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60E             >
 359+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60E             >
 359+ E60E             >//              ______________________________________________________________________
 359+ E60E             >//              Dictionary part
 359+ E60E             >
 359+ E60E             >                org     Dict_Ptr
 359+ 2914             >
 359+ 2914 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 2916             >
 359+ 2916             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 2916 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 2919             >
 359+ 2919             >
 359+ 2919             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 2919             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 2919             >
 359+ 2919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 2919 6B 22                        dw      C_EMIT                      // (?emit)
 361+ 291B 06 29                        dw      QDUP                        // ?dup
 362+ 291D                                                                  // if
 363+ 291D 8F 20                        dw      ZBRANCH
 364+ 291F 0A 00                        dw      Emit_Skip - $
 365+ 2921 3C 22                        dw          EMITC                   //      emitc
 366+ 2923 3E 27                        dw          ONE                     //      1
 367+ 2925 E4 27 27 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 2929              Emit_Skip:                                          // endif
 369+ 2929 F5 24                        dw      EXIT                        // ;
 370+ 292B
 371+ 292B              //  ______________________________________________________________________
 372+ 292B              //
 373+ 292B              // space        --
 374+ 292B                              Colon_Def SPACE, "SPACE", is_normal
 374+ 292B             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 292B             >
 374+ 292B             >Dict_Ptr        defl    $
 374+ 292B             >
 374+ 292B             >//              ______________________________________________________________________
 374+ 292B             >//              Heap part
 374+ 292B             >
 374+ 292B             >
 374+ 292B             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60E             >
 374+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60E             >Latest_Definition defl  Heap_Ptr
 374+ E60E             >
 374+ E60E             >                // dummy db directives used to calculate length of namec
 374+ E60E 53 50 41 43 >                db      "SPACE"
 374+ E612 45          >
 374+ E613             >len_NFA         defl    $ - temp_NFA
 374+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60E             >
 374+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E613 45          >
 374+ E614             >                org     $-1                 // alter last byte of Name just above to set
 374+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E614             >
 374+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E616             >Prev_Ptr        defl    Heap_Ptr
 374+ E616             >
 374+ E616             >mirror_Ptr      defl    $
 374+ E616             >
 374+ E616 2D 29       >                dw      Dict_Ptr + 2        // xt
 374+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E618             >
 374+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E618             >
 374+ E618             >//              ______________________________________________________________________
 374+ E618             >//              Dictionary part
 374+ E618             >
 374+ E618             >                org     Dict_Ptr
 374+ 292B             >
 374+ 292B 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 292D             >
 374+ 292D             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 292D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 2930             >
 374+ 2930             >
 374+ 2930             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 2930             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 2930             >
 374+ 2930             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 2930 5A 27 16 29                  dw      BL, EMIT                // bl emit
 376+ 2934 F5 24                        dw      EXIT                    // ;
 377+ 2936
 378+ 2936              //  ______________________________________________________________________
 379+ 2936              //
 380+ 2936              // traverse     a n -- a
 381+ 2936              // A dictionary entry is structured as follows
 382+ 2936              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 2936              //      +1   word name, last character is toggled with $80
 384+ 2936              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 2936              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 2936              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 2936              //
 388+ 2936                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 2936             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 2936             >
 388+ 2936             >Dict_Ptr        defl    $
 388+ 2936             >
 388+ 2936             >//              ______________________________________________________________________
 388+ 2936             >//              Heap part
 388+ 2936             >
 388+ 2936             >
 388+ 2936             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E618             >
 388+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E618             >Latest_Definition defl  Heap_Ptr
 388+ E618             >
 388+ E618             >                // dummy db directives used to calculate length of namec
 388+ E618 54 52 41 56 >                db      "TRAVERSE"
 388+ E61C 45 52 53 45 >
 388+ E620             >len_NFA         defl    $ - temp_NFA
 388+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E618             >
 388+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61D 45 52 53 45 >
 388+ E621             >                org     $-1                 // alter last byte of Name just above to set
 388+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E621             >
 388+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E623             >Prev_Ptr        defl    Heap_Ptr
 388+ E623             >
 388+ E623             >mirror_Ptr      defl    $
 388+ E623             >
 388+ E623 38 29       >                dw      Dict_Ptr + 2        // xt
 388+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E625             >
 388+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E625             >
 388+ E625             >//              ______________________________________________________________________
 388+ E625             >//              Dictionary part
 388+ E625             >
 388+ E625             >                org     Dict_Ptr
 388+ 2936             >
 388+ 2936 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2938             >
 388+ 2938             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2938 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 293B             >
 388+ 293B             >
 388+ 293B             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 293B             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 293B             >
 388+ 293B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 293B C7 25                        dw      SWAP                    // swap
 390+ 293D              Traverse_Begin:                                 // begin
 391+ 293D AA 25 48 25                  dw          OVER, PLUS          //      over +
 392+ 2941 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2945 AA 25 54 26                  dw          OVER, CFETCH        //      over @
 394+ 2949 C0 28                        dw          LESS                //      <
 395+ 294B                                                              // until
 396+ 294B 8F 20                        dw      ZBRANCH
 397+ 294D F0 FF                        dw      Traverse_Begin - $
 398+ 294F B8 25                        dw      NIP                     //  nip
 399+ 2951 F5 24                        dw      EXIT                    //  ;
 400+ 2953
 401+ 2953              //  ______________________________________________________________________
 402+ 2953              //
 403+ 2953              // mmu7@        -- n
 404+ 2953              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2953
 406+ 2953                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2953             >
 406+ 2953             >Dict_Ptr        defl    $
 406+ 2953             >
 406+ 2953             >//              ______________________________________________________________________
 406+ 2953             >//              Heap part
 406+ 2953             >
 406+ 2953             >
 406+ 2953             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E625             >
 406+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E625             >Latest_Definition defl  Heap_Ptr
 406+ E625             >
 406+ E625             >                // dummy db directives used to calculate length of namec
 406+ E625 4D 4D 55 37 >                db      "MMU7@"
 406+ E629 40          >
 406+ E62A             >len_NFA         defl    $ - temp_NFA
 406+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E625             >
 406+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62A 40          >
 406+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62B             >
 406+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62D             >Prev_Ptr        defl    Heap_Ptr
 406+ E62D             >
 406+ E62D             >mirror_Ptr      defl    $
 406+ E62D             >
 406+ E62D 55 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62F             >
 406+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62F             >
 406+ E62F             >//              ______________________________________________________________________
 406+ E62F             >//              Dictionary part
 406+ E62F             >
 406+ E62F             >                org     Dict_Ptr
 406+ 2953             >
 406+ 2953 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2955             >
 406+ 2955             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2955 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2955 ~           >
 406+ 2955 ~           >
 406+ 2955             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2955             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2955             >
 406+ 2955             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2955 D9                           exx
 408+ 2956 CD 39 21                     call    MMU7_read
 409+ 2959 D9                           exx
 410+ 295A 6F                           ld      l, a
 411+ 295B 26 00                        ld      h, 0
 412+ 295D E5                           push    hl
 413+ 295E                              next
 413+ 295E DD E9       >                jp      (ix)
 414+ 2960
 415+ 2960              //  ______________________________________________________________________
 416+ 2960              //
 417+ 2960              // mmu7!        n --
 418+ 2960              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 2960              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 2960
 421+ 2960                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 2960             >
 421+ 2960             >Dict_Ptr        defl    $
 421+ 2960             >
 421+ 2960             >//              ______________________________________________________________________
 421+ 2960             >//              Heap part
 421+ 2960             >
 421+ 2960             >
 421+ 2960             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62F             >
 421+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62F             >Latest_Definition defl  Heap_Ptr
 421+ E62F             >
 421+ E62F             >                // dummy db directives used to calculate length of namec
 421+ E62F 4D 4D 55 37 >                db      "MMU7!"
 421+ E633 21          >
 421+ E634             >len_NFA         defl    $ - temp_NFA
 421+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62F             >
 421+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E634 21          >
 421+ E635             >                org     $-1                 // alter last byte of Name just above to set
 421+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E635             >
 421+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E637             >Prev_Ptr        defl    Heap_Ptr
 421+ E637             >
 421+ E637             >mirror_Ptr      defl    $
 421+ E637             >
 421+ E637 62 29       >                dw      Dict_Ptr + 2        // xt
 421+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E639             >
 421+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E639             >
 421+ E639             >//              ______________________________________________________________________
 421+ E639             >//              Dictionary part
 421+ E639             >
 421+ E639             >                org     Dict_Ptr
 421+ 2960             >
 421+ 2960 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2962             >
 421+ 2962             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2962 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2962 ~           >
 421+ 2962 ~           >
 421+ 2962             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2962             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2962             >
 421+ 2962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2962 E1                           pop     hl
 423+ 2963 7D                           ld      a, l
 424+ 2964 ED 92 57                     nextreg 87, a
 425+ 2967
 426+ 2967                              next
 426+ 2967 DD E9       >                jp      (ix)
 427+ 2969
 428+ 2969              //  ______________________________________________________________________
 429+ 2969              //
 430+ 2969              // >far         ha -- a n
 431+ 2969              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 2969              // take lower bits of H and L as an offset from E000h
 433+ 2969              // then return address  a  between E000h-FFFFh
 434+ 2969              // and page number n  between 64-71 (40h-47h)
 435+ 2969              // For example, in hex:
 436+ 2969              //   0000 >FAR  gives  40.E000
 437+ 2969              //   1FFF >FAR  gives  40.FFFF
 438+ 2969              //   2000 >FAR  gives  41.E000
 439+ 2969              //   3FFF >FAR  gives  41.FFFF
 440+ 2969              //   EFFF >FAR  gives  47.EFFF
 441+ 2969              //   FFFF >FAR  gives  47.FFFF
 442+ 2969                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 2969             >
 442+ 2969             >Dict_Ptr        defl    $
 442+ 2969             >
 442+ 2969             >//              ______________________________________________________________________
 442+ 2969             >//              Heap part
 442+ 2969             >
 442+ 2969             >
 442+ 2969             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E639             >
 442+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E639             >Latest_Definition defl  Heap_Ptr
 442+ E639             >
 442+ E639             >                // dummy db directives used to calculate length of namec
 442+ E639 3E 46 41 52 >                db      ">FAR"
 442+ E63D             >len_NFA         defl    $ - temp_NFA
 442+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E639             >
 442+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63E             >
 442+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E640             >Prev_Ptr        defl    Heap_Ptr
 442+ E640             >
 442+ E640             >mirror_Ptr      defl    $
 442+ E640             >
 442+ E640 6B 29       >                dw      Dict_Ptr + 2        // xt
 442+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E642             >
 442+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E642             >
 442+ E642             >//              ______________________________________________________________________
 442+ E642             >//              Dictionary part
 442+ E642             >
 442+ E642             >                org     Dict_Ptr
 442+ 2969             >
 442+ 2969 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 296B             >
 442+ 296B             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 296B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 296B ~           >
 442+ 296B ~           >
 442+ 296B             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 296B             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 296B             >
 442+ 296B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 296B E1                           pop     hl
 444+ 296C CD 44 21                     call    TO_FAR_rout
 445+ 296F E5                           push    hl
 446+ 2970 6F                           ld      l, a
 447+ 2971 26 00                        ld      h, 0
 448+ 2973 E5                           push    hl
 449+ 2974                              next
 449+ 2974 DD E9       >                jp      (ix)
 450+ 2976
 451+ 2976              //  ______________________________________________________________________
 452+ 2976              //
 453+ 2976              // <far         a n  -- ha
 454+ 2976              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 2976              // reverse of >FAR: encodes a FAR address compressing
 456+ 2976              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 2976                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 2976             >
 457+ 2976             >Dict_Ptr        defl    $
 457+ 2976             >
 457+ 2976             >//              ______________________________________________________________________
 457+ 2976             >//              Heap part
 457+ 2976             >
 457+ 2976             >
 457+ 2976             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E642             >
 457+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E642             >Latest_Definition defl  Heap_Ptr
 457+ E642             >
 457+ E642             >                // dummy db directives used to calculate length of namec
 457+ E642 3C 46 41 52 >                db      "<FAR"
 457+ E646             >len_NFA         defl    $ - temp_NFA
 457+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E642             >
 457+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E647             >                org     $-1                 // alter last byte of Name just above to set
 457+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E647             >
 457+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E649             >Prev_Ptr        defl    Heap_Ptr
 457+ E649             >
 457+ E649             >mirror_Ptr      defl    $
 457+ E649             >
 457+ E649 78 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64B             >
 457+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64B             >
 457+ E64B             >//              ______________________________________________________________________
 457+ E64B             >//              Dictionary part
 457+ E64B             >
 457+ E64B             >                org     Dict_Ptr
 457+ 2976             >
 457+ 2976 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2978             >
 457+ 2978             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2978 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2978 ~           >
 457+ 2978 ~           >
 457+ 2978             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2978             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2978             >
 457+ 2978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2978 E1                           pop     hl                  // page number in e
 459+ 2979 7D                           ld      a, l
 460+ 297A E6 07                        and     07
 461+ 297C 0F                           rrca
 462+ 297D 0F                           rrca
 463+ 297E 0F                           rrca
 464+ 297F 08                           ex      af, af
 465+ 2980 E1                           pop     hl                  // address in hl
 466+ 2981 7C                           ld      a, h
 467+ 2982 E6 1F                        and     $1F
 468+ 2984 67                           ld      h, a
 469+ 2985 08                           ex      af, af
 470+ 2986 B4                           or      h
 471+ 2987 67                           ld      h, a
 472+ 2988                              psh1
 472+ 2988 E5          >                push    hl
 472+ 2989 DD E9       >                jp      (ix)
 473+ 298B
 474+ 298B              //  ______________________________________________________________________
 475+ 298B              //
 476+ 298B              // ?IN_MMU7        a -- f
 477+ 298B              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 298B                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 298B             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 298B             >
 478+ 298B             >Dict_Ptr        defl    $
 478+ 298B             >
 478+ 298B             >//              ______________________________________________________________________
 478+ 298B             >//              Heap part
 478+ 298B             >
 478+ 298B             >
 478+ 298B             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64B             >
 478+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64B             >Latest_Definition defl  Heap_Ptr
 478+ E64B             >
 478+ E64B             >                // dummy db directives used to calculate length of namec
 478+ E64B 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E64F 4D 4D 55 37 >
 478+ E653             >len_NFA         defl    $ - temp_NFA
 478+ E653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64B             >
 478+ E64B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E650 4D 4D 55 37 >
 478+ E654             >                org     $-1                 // alter last byte of Name just above to set
 478+ E653 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E654             >
 478+ E654 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E656             >Prev_Ptr        defl    Heap_Ptr
 478+ E656             >
 478+ E656             >mirror_Ptr      defl    $
 478+ E656             >
 478+ E656 8D 29       >                dw      Dict_Ptr + 2        // xt
 478+ E658             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E658             >
 478+ E658             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E658             >
 478+ E658             >//              ______________________________________________________________________
 478+ E658             >//              Dictionary part
 478+ E658             >
 478+ E658             >                org     Dict_Ptr
 478+ 298B             >
 478+ 298B 56 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 298D             >
 478+ 298D             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 298D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 2990             >
 478+ 2990             >
 478+ 2990             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 2990             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 2990             >
 478+ 2990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 2990 CE 25                        dw      DUP
 480+ 2992 3D 20 00 E0                  dw      LIT, $E000
 481+ 2996 B2 28                        dw      ULESS
 482+ 2998 28 25                        dw      NOT_OP
 483+ 299A F5 24                        dw      EXIT
 484+ 299C
 485+ 299C              //  ______________________________________________________________________
 486+ 299C              //
 487+ 299C              // far          hp -- ha
 488+ 299C              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 299C                              Colon_Def FAR, "FAR", is_normal
 489+ 299C             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 299C             >
 489+ 299C             >Dict_Ptr        defl    $
 489+ 299C             >
 489+ 299C             >//              ______________________________________________________________________
 489+ 299C             >//              Heap part
 489+ 299C             >
 489+ 299C             >
 489+ 299C             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E658             >
 489+ E658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E658             >Latest_Definition defl  Heap_Ptr
 489+ E658             >
 489+ E658             >                // dummy db directives used to calculate length of namec
 489+ E658 46 41 52    >                db      "FAR"
 489+ E65B             >len_NFA         defl    $ - temp_NFA
 489+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E658             >
 489+ E658 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E659 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65C             >
 489+ E65C 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E65E             >Prev_Ptr        defl    Heap_Ptr
 489+ E65E             >
 489+ E65E             >mirror_Ptr      defl    $
 489+ E65E             >
 489+ E65E 9E 29       >                dw      Dict_Ptr + 2        // xt
 489+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E660             >
 489+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E660             >
 489+ E660             >//              ______________________________________________________________________
 489+ E660             >//              Dictionary part
 489+ E660             >
 489+ E660             >                org     Dict_Ptr
 489+ 299C             >
 489+ 299C 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 299E             >
 489+ 299E             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 299E CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 29A1             >
 489+ 29A1             >
 489+ 29A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 29A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 29A1             >
 489+ 29A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 29A1 6B 29                        dw      TO_FAR
 491+ 29A3 62 29                        dw      MMU7_STORE
 492+ 29A5 F5 24                        dw      EXIT
 493+ 29A7
 494+ 29A7              //  ______________________________________________________________________
 495+ 29A7              //
 496+ 29A7              // ?HEAP_PTR       n -- n f
 497+ 29A7              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 29A7                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 29A7             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 29A7             >
 498+ 29A7             >Dict_Ptr        defl    $
 498+ 29A7             >
 498+ 29A7             >//              ______________________________________________________________________
 498+ 29A7             >//              Heap part
 498+ 29A7             >
 498+ 29A7             >
 498+ 29A7             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E660             >
 498+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E660             >Latest_Definition defl  Heap_Ptr
 498+ E660             >
 498+ E660             >                // dummy db directives used to calculate length of namec
 498+ E660 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E664 50 5F 50 54 >
 498+ E668 52          >
 498+ E669             >len_NFA         defl    $ - temp_NFA
 498+ E669             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E660             >
 498+ E660 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E661 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E665 50 5F 50 54 >
 498+ E669 52          >
 498+ E66A             >                org     $-1                 // alter last byte of Name just above to set
 498+ E669 D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66A             >
 498+ E66A 58 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66C             >Prev_Ptr        defl    Heap_Ptr
 498+ E66C             >
 498+ E66C             >mirror_Ptr      defl    $
 498+ E66C             >
 498+ E66C A9 29       >                dw      Dict_Ptr + 2        // xt
 498+ E66E             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E66E             >
 498+ E66E             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E66E             >
 498+ E66E             >//              ______________________________________________________________________
 498+ E66E             >//              Dictionary part
 498+ E66E             >
 498+ E66E             >                org     Dict_Ptr
 498+ 29A7             >
 498+ 29A7 6C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 29A9             >
 498+ 29A9             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 29A9 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 29AC             >
 498+ 29AC             >
 498+ 29AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 29AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 29AC             >
 498+ 29AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 29AC CE 25                        dw      DUP
 500+ 29AE 8F 20                        dw      ZBRANCH
 501+ 29B0 08 00                        dw      QHeap_Skip - $
 502+ 29B2 3D 20 00 60                  dw          LIT, $6000
 503+ 29B6 B2 28                        dw          ULESS
 504+ 29B8              QHeap_Skip:                                          // endif
 505+ 29B8 F5 24                        dw      EXIT                        // ;
 506+ 29BA
 507+ 29BA              //  ______________________________________________________________________
 508+ 29BA              //
 509+ 29BA              // ?>heap       n1 -- n2
 510+ 29BA              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 29BA                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 29BA             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 29BA             >
 511+ 29BA             >Dict_Ptr        defl    $
 511+ 29BA             >
 511+ 29BA             >//              ______________________________________________________________________
 511+ 29BA             >//              Heap part
 511+ 29BA             >
 511+ 29BA             >
 511+ 29BA             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E66E             >
 511+ E66E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E66E             >Latest_Definition defl  Heap_Ptr
 511+ E66E             >
 511+ E66E             >                // dummy db directives used to calculate length of namec
 511+ E66E 3F 3E 48 45 >                db      "?>HEAP"
 511+ E672 41 50       >
 511+ E674             >len_NFA         defl    $ - temp_NFA
 511+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E66E             >
 511+ E66E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E66F 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E673 41 50       >
 511+ E675             >                org     $-1                 // alter last byte of Name just above to set
 511+ E674 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E675             >
 511+ E675 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E677             >Prev_Ptr        defl    Heap_Ptr
 511+ E677             >
 511+ E677             >mirror_Ptr      defl    $
 511+ E677             >
 511+ E677 BC 29       >                dw      Dict_Ptr + 2        // xt
 511+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E679             >
 511+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E679             >
 511+ E679             >//              ______________________________________________________________________
 511+ E679             >//              Dictionary part
 511+ E679             >
 511+ E679             >                org     Dict_Ptr
 511+ 29BA             >
 511+ 29BA 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 29BC             >
 511+ 29BC             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 29BC CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 29BF             >
 511+ 29BF             >
 511+ 29BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 29BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 29BF             >
 511+ 29BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 29BF CE 25                        dw      DUP
 513+ 29C1 A9 29                        dw      QHEAPP
 514+ 29C3 8F 20                        dw      ZBRANCH
 515+ 29C5 04 00                        dw      Q2Heap_Skip - $
 516+ 29C7 9E 29                        dw          FAR
 517+ 29C9              Q2Heap_Skip:                                          // endif
 518+ 29C9 F5 24                        dw      EXIT                        // ;
 519+ 29CB
 520+ 29CB              //  ______________________________________________________________________
 521+ 29CB              //
 522+ 29CB              // hp_fetch     -- a
 523+ 29CB                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 29CB             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 29CB             >
 523+ 29CB             >Dict_Ptr        defl    $
 523+ 29CB             >
 523+ 29CB             >//              ______________________________________________________________________
 523+ 29CB             >//              Heap part
 523+ 29CB             >
 523+ 29CB             >
 523+ 29CB             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E679             >
 523+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E679             >Latest_Definition defl  Heap_Ptr
 523+ E679             >
 523+ E679             >                // dummy db directives used to calculate length of namec
 523+ E679 48 50 40    >                db      "HP@"
 523+ E67C             >len_NFA         defl    $ - temp_NFA
 523+ E67C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E679             >
 523+ E679 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67A 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67D             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67C C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67D             >
 523+ E67D 6E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E67F             >Prev_Ptr        defl    Heap_Ptr
 523+ E67F             >
 523+ E67F             >mirror_Ptr      defl    $
 523+ E67F             >
 523+ E67F CD 29       >                dw      Dict_Ptr + 2        // xt
 523+ E681             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E681             >
 523+ E681             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E681             >
 523+ E681             >//              ______________________________________________________________________
 523+ E681             >//              Dictionary part
 523+ E681             >
 523+ E681             >                org     Dict_Ptr
 523+ 29CB             >
 523+ 29CB 7F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 29CD             >
 523+ 29CD             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 29CD CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 29D0             >
 523+ 29D0             >
 523+ 29D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 29D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 29D0             >
 523+ 29D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 29D0 CC 27 3F 26                  dw      HP, FETCH               // hp @
 525+ 29D4 F5 24                        dw      EXIT                    // ;
 526+ 29D6
 527+ 29D6              //  ______________________________________________________________________
 528+ 29D6              //
 529+ 29D6              // page-watermark   -- n
 530+ 29D6              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 29D6                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 29D6             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 29D6             >
 531+ 29D6             >Dict_Ptr        defl    $
 531+ 29D6             >
 531+ 29D6             >//              ______________________________________________________________________
 531+ 29D6             >//              Heap part
 531+ 29D6             >
 531+ 29D6             >
 531+ 29D6             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E681             >
 531+ E681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E681             >Latest_Definition defl  Heap_Ptr
 531+ E681             >
 531+ E681             >                // dummy db directives used to calculate length of namec
 531+ E681 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E685 2D 57 41 54 >
 531+ E689 45 52 4D 41 >
 531+ E68D 52 4B       >
 531+ E68F             >len_NFA         defl    $ - temp_NFA
 531+ E68F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E681             >
 531+ E681 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E686 2D 57 41 54 >
 531+ E68A 45 52 4D 41 >
 531+ E68E 52 4B       >
 531+ E690             >                org     $-1                 // alter last byte of Name just above to set
 531+ E68F CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E690             >
 531+ E690 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E692             >Prev_Ptr        defl    Heap_Ptr
 531+ E692             >
 531+ E692             >mirror_Ptr      defl    $
 531+ E692             >
 531+ E692 D8 29       >                dw      Dict_Ptr + 2        // xt
 531+ E694             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E694             >
 531+ E694             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E694             >
 531+ E694             >//              ______________________________________________________________________
 531+ E694             >//              Dictionary part
 531+ E694             >
 531+ E694             >                org     Dict_Ptr
 531+ 29D6             >
 531+ 29D6 92 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 29D8             >
 531+ 29D8             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 29D8 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 29DB             >
 531+ 29DB             >
 531+ 29DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 29DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 29DB             >
 531+ 29DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29DB 80 1F       >                dw      $1F80
 532+ 29DD
 533+ 29DD              //  ______________________________________________________________________
 534+ 29DD              //
 535+ 29DD              // skip-hp-page ha -- a
 536+ 29DD                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 29DD             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 29DD             >
 536+ 29DD             >Dict_Ptr        defl    $
 536+ 29DD             >
 536+ 29DD             >//              ______________________________________________________________________
 536+ 29DD             >//              Heap part
 536+ 29DD             >
 536+ 29DD             >
 536+ 29DD             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E694             >
 536+ E694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E694             >Latest_Definition defl  Heap_Ptr
 536+ E694             >
 536+ E694             >                // dummy db directives used to calculate length of namec
 536+ E694 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E698 2D 48 50 2D >
 536+ E69C 50 41 47 45 >
 536+ E6A0             >len_NFA         defl    $ - temp_NFA
 536+ E6A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E694             >
 536+ E694 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E699 2D 48 50 2D >
 536+ E69D 50 41 47 45 >
 536+ E6A1             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A0 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A1             >
 536+ E6A1 81 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A3             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A3             >
 536+ E6A3             >mirror_Ptr      defl    $
 536+ E6A3             >
 536+ E6A3 DF 29       >                dw      Dict_Ptr + 2        // xt
 536+ E6A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A5             >
 536+ E6A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A5             >
 536+ E6A5             >//              ______________________________________________________________________
 536+ E6A5             >//              Dictionary part
 536+ E6A5             >
 536+ E6A5             >                org     Dict_Ptr
 536+ 29DD             >
 536+ 29DD A3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 29DF             >
 536+ 29DF             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 29DF CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 29E2             >
 536+ 29E2             >
 536+ 29E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 29E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 29E2             >
 536+ 29E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 29E2 CD 29                        dw      HP_FETCH                // hp@
 538+ 29E4 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 29E8 B5 24
 539+ 29EA 48 25                        dw      PLUS
 540+ 29EC D8 29                        dw      PAGE_WATERMARK
 541+ 29EE D5 28                        dw      GREATER
 542+ 29F0 8F 20                        dw      ZBRANCH
 543+ 29F2 12 00                        dw      Skip_Skip - $   // if
 544+ 29F4 CD 29                        dw      HP_FETCH
 545+ 29F6 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 29FA C4 24
 546+ 29FC 61 25 6F 25                  dw      ONE_PLUS, TWO_PLUS
 547+ 2A00 CC 27 49 26                  dw      HP, STORE
 548+ 2A04              Skip_Skip:
 549+ 2A04 F5 24                        dw      EXIT                    // ;
 550+ 2A06              //  ______________________________________________________________________
 551+ 2A06              //
 552+ 2A06              // latest       -- nfa
 553+ 2A06                              Colon_Def LATEST, "LATEST", is_normal
 553+ 2A06             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 2A06             >
 553+ 2A06             >Dict_Ptr        defl    $
 553+ 2A06             >
 553+ 2A06             >//              ______________________________________________________________________
 553+ 2A06             >//              Heap part
 553+ 2A06             >
 553+ 2A06             >
 553+ 2A06             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A5             >
 553+ E6A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A5             >Latest_Definition defl  Heap_Ptr
 553+ E6A5             >
 553+ E6A5             >                // dummy db directives used to calculate length of namec
 553+ E6A5 4C 41 54 45 >                db      "LATEST"
 553+ E6A9 53 54       >
 553+ E6AB             >len_NFA         defl    $ - temp_NFA
 553+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A5             >
 553+ E6A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A6 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AA 53 54       >
 553+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AB D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AC             >
 553+ E6AC 94 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 553+ E6AE             >
 553+ E6AE             >mirror_Ptr      defl    $
 553+ E6AE             >
 553+ E6AE 08 2A       >                dw      Dict_Ptr + 2        // xt
 553+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B0             >
 553+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B0             >
 553+ E6B0             >//              ______________________________________________________________________
 553+ E6B0             >//              Dictionary part
 553+ E6B0             >
 553+ E6B0             >                org     Dict_Ptr
 553+ 2A06             >
 553+ 2A06 AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 2A08             >
 553+ 2A08             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 2A08 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 2A0B             >
 553+ 2A0B             >
 553+ 2A0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 2A0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 2A0B             >
 553+ 2A0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 2A0B FC 27                        dw      CURRENT                 // current
 555+ 2A0D 3F 26 3F 26                  dw      FETCH, FETCH            // @ @
 556+ 2A11 9E 29                        dw      FAR // Q TO HEAP
 557+ 2A13 F5 24                        dw      EXIT                    // ;
 558+ 2A15
 559+ 2A15              //  ______________________________________________________________________
 560+ 2A15              //
 561+ 2A15              // >body        cfa -- pfa
 562+ 2A15                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 2A15             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 2A15             >
 562+ 2A15             >Dict_Ptr        defl    $
 562+ 2A15             >
 562+ 2A15             >//              ______________________________________________________________________
 562+ 2A15             >//              Heap part
 562+ 2A15             >
 562+ 2A15             >
 562+ 2A15             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B0             >
 562+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B0             >Latest_Definition defl  Heap_Ptr
 562+ E6B0             >
 562+ E6B0             >                // dummy db directives used to calculate length of namec
 562+ E6B0 3E 42 4F 44 >                db      ">BODY"
 562+ E6B4 59          >
 562+ E6B5             >len_NFA         defl    $ - temp_NFA
 562+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B0             >
 562+ E6B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B5 59          >
 562+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B5 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B6             >
 562+ E6B6 A5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 562+ E6B8             >
 562+ E6B8             >mirror_Ptr      defl    $
 562+ E6B8             >
 562+ E6B8 17 2A       >                dw      Dict_Ptr + 2        // xt
 562+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BA             >
 562+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BA             >
 562+ E6BA             >//              ______________________________________________________________________
 562+ E6BA             >//              Dictionary part
 562+ E6BA             >
 562+ E6BA             >                org     Dict_Ptr
 562+ 2A15             >
 562+ 2A15 B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 2A17             >
 562+ 2A17             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 2A17 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 2A1A             >
 562+ 2A1A             >
 562+ 2A1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 2A1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 2A1A             >
 562+ 2A1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 2A1A 4C 27 48 25                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 2A1E F5 24                        dw      EXIT                    // ;
 565+ 2A20
 566+ 2A20              //  ______________________________________________________________________
 567+ 2A20              //
 568+ 2A20              // <name        cfa -- nfa
 569+ 2A20                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 2A20             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 2A20             >
 569+ 2A20             >Dict_Ptr        defl    $
 569+ 2A20             >
 569+ 2A20             >//              ______________________________________________________________________
 569+ 2A20             >//              Heap part
 569+ 2A20             >
 569+ 2A20             >
 569+ 2A20             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BA             >
 569+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BA             >Latest_Definition defl  Heap_Ptr
 569+ E6BA             >
 569+ E6BA             >                // dummy db directives used to calculate length of namec
 569+ E6BA 3C 4E 41 4D >                db      "<NAME"
 569+ E6BE 45          >
 569+ E6BF             >len_NFA         defl    $ - temp_NFA
 569+ E6BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BA             >
 569+ E6BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6BF 45          >
 569+ E6C0             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6BF C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C0             >
 569+ E6C0 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C2             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C2             >
 569+ E6C2             >mirror_Ptr      defl    $
 569+ E6C2             >
 569+ E6C2 22 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C4             >
 569+ E6C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C4             >
 569+ E6C4             >//              ______________________________________________________________________
 569+ E6C4             >//              Dictionary part
 569+ E6C4             >
 569+ E6C4             >                org     Dict_Ptr
 569+ 2A20             >
 569+ 2A20 C2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A22             >
 569+ 2A22             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A22 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A25             >
 569+ 2A25             >
 569+ 2A25             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A25             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A25             >
 569+ 2A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A25 7C 25                        dw      CELL_MINUS              // cell-
 571+ 2A27 CE 25 3F 26                  dw      DUP, FETCH
 572+ 2A2B A9 29                        dw      QHEAPP
 573+ 2A2D 8F 20                        dw      ZBRANCH
 574+ 2A2F 08 00                        dw      ToName_Skip - $
 575+ 2A31 3F 26 9E 29                  dw          FETCH, FAR
 576+ 2A35 7C 25                        dw          CELL_MINUS
 577+ 2A37              ToName_Skip:                                    // endif
 578+ 2A37
 579+ 2A37 68 25                        dw      ONE_SUBTRACT            // 1-
 580+ 2A39 53 27                        dw      NEG_ONE                 // -1
 581+ 2A3B 38 29                        dw      TRAVERSE                // traverse
 582+ 2A3D F5 24                        dw      EXIT                    // ;
 583+ 2A3F
 584+ 2A3F              //  ______________________________________________________________________
 585+ 2A3F              //
 586+ 2A3F              // cfa          pfa -- cfa
 587+ 2A3F                              Colon_Def CFA, "CFA", is_normal
 587+ 2A3F             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 2A3F             >
 587+ 2A3F             >Dict_Ptr        defl    $
 587+ 2A3F             >
 587+ 2A3F             >//              ______________________________________________________________________
 587+ 2A3F             >//              Heap part
 587+ 2A3F             >
 587+ 2A3F             >
 587+ 2A3F             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C4             >
 587+ E6C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C4             >Latest_Definition defl  Heap_Ptr
 587+ E6C4             >
 587+ E6C4             >                // dummy db directives used to calculate length of namec
 587+ E6C4 43 46 41    >                db      "CFA"
 587+ E6C7             >len_NFA         defl    $ - temp_NFA
 587+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C4             >
 587+ E6C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C5 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C7 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6C8             >
 587+ E6C8 BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CA             >
 587+ E6CA             >mirror_Ptr      defl    $
 587+ E6CA             >
 587+ E6CA 41 2A       >                dw      Dict_Ptr + 2        // xt
 587+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CC             >
 587+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CC             >
 587+ E6CC             >//              ______________________________________________________________________
 587+ E6CC             >//              Dictionary part
 587+ E6CC             >
 587+ E6CC             >                org     Dict_Ptr
 587+ 2A3F             >
 587+ 2A3F CA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 2A41             >
 587+ 2A41             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 2A41 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 2A44             >
 587+ 2A44             >
 587+ 2A44             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 2A44             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 2A44             >
 587+ 2A44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 2A44 4C 27 9B 28                  dw      THREE, SUBTRACT         // 3 -
 589+ 2A48 F5 24                        dw      EXIT                    // ;
 590+ 2A4A
 591+ 2A4A              //  ______________________________________________________________________
 592+ 2A4A              //
 593+ 2A4A              // nfa          pfa -- nfa
 594+ 2A4A                              Colon_Def NFA, "NFA", is_normal
 594+ 2A4A             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 2A4A             >
 594+ 2A4A             >Dict_Ptr        defl    $
 594+ 2A4A             >
 594+ 2A4A             >//              ______________________________________________________________________
 594+ 2A4A             >//              Heap part
 594+ 2A4A             >
 594+ 2A4A             >
 594+ 2A4A             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CC             >
 594+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CC             >Latest_Definition defl  Heap_Ptr
 594+ E6CC             >
 594+ E6CC             >                // dummy db directives used to calculate length of namec
 594+ E6CC 4E 46 41    >                db      "NFA"
 594+ E6CF             >len_NFA         defl    $ - temp_NFA
 594+ E6CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CC             >
 594+ E6CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CD 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D0             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6CF C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D0             >
 594+ E6D0 C4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D2             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D2             >
 594+ E6D2             >mirror_Ptr      defl    $
 594+ E6D2             >
 594+ E6D2 4C 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D4             >
 594+ E6D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D4             >
 594+ E6D4             >//              ______________________________________________________________________
 594+ E6D4             >//              Dictionary part
 594+ E6D4             >
 594+ E6D4             >                org     Dict_Ptr
 594+ 2A4A             >
 594+ 2A4A D2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A4C             >
 594+ 2A4C             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A4C CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A4F             >
 594+ 2A4F             >
 594+ 2A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A4F             >
 594+ 2A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A4F 41 2A                        dw      CFA                     // cfa
 596+ 2A51 22 2A                        dw      TO_NAME                 // traverse
 597+ 2A53 F5 24                        dw      EXIT                    // ;
 598+ 2A55
 599+ 2A55              //  ______________________________________________________________________
 600+ 2A55              //
 601+ 2A55              // lfa          pfa -- lfa
 602+ 2A55                              Colon_Def LFA, "LFA", is_normal
 602+ 2A55             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 2A55             >
 602+ 2A55             >Dict_Ptr        defl    $
 602+ 2A55             >
 602+ 2A55             >//              ______________________________________________________________________
 602+ 2A55             >//              Heap part
 602+ 2A55             >
 602+ 2A55             >
 602+ 2A55             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D4             >
 602+ E6D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D4             >Latest_Definition defl  Heap_Ptr
 602+ E6D4             >
 602+ E6D4             >                // dummy db directives used to calculate length of namec
 602+ E6D4 4C 46 41    >                db      "LFA"
 602+ E6D7             >len_NFA         defl    $ - temp_NFA
 602+ E6D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D4             >
 602+ E6D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D5 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6D8             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D7 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6D8             >
 602+ E6D8 CC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DA             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DA             >
 602+ E6DA             >mirror_Ptr      defl    $
 602+ E6DA             >
 602+ E6DA 57 2A       >                dw      Dict_Ptr + 2        // xt
 602+ E6DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DC             >
 602+ E6DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DC             >
 602+ E6DC             >//              ______________________________________________________________________
 602+ E6DC             >//              Dictionary part
 602+ E6DC             >
 602+ E6DC             >                org     Dict_Ptr
 602+ 2A55             >
 602+ 2A55 DA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 2A57             >
 602+ 2A57             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 2A57 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 2A5A             >
 602+ 2A5A             >
 602+ 2A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 2A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 2A5A             >
 602+ 2A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 2A5A 4C 2A                        dw      NFA                     // nfa
 604+ 2A5C 3E 27                        dw      ONE                     // 1
 605+ 2A5E 38 29                        dw      TRAVERSE                // traverse
 606+ 2A60 61 25                        dw      ONE_PLUS                // 1+
 607+ 2A62 F5 24                        dw      EXIT                    // ;
 608+ 2A64
 609+ 2A64              //  ______________________________________________________________________
 610+ 2A64              //
 611+ 2A64              // pfa          nfa -- pfa
 612+ 2A64                              Colon_Def PFA, "PFA", is_normal
 612+ 2A64             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 2A64             >
 612+ 2A64             >Dict_Ptr        defl    $
 612+ 2A64             >
 612+ 2A64             >//              ______________________________________________________________________
 612+ 2A64             >//              Heap part
 612+ 2A64             >
 612+ 2A64             >
 612+ 2A64             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DC             >
 612+ E6DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DC             >Latest_Definition defl  Heap_Ptr
 612+ E6DC             >
 612+ E6DC             >                // dummy db directives used to calculate length of namec
 612+ E6DC 50 46 41    >                db      "PFA"
 612+ E6DF             >len_NFA         defl    $ - temp_NFA
 612+ E6DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DC             >
 612+ E6DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E0             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6DF C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E0             >
 612+ E6E0 D4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E2             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E2             >
 612+ E6E2             >mirror_Ptr      defl    $
 612+ E6E2             >
 612+ E6E2 66 2A       >                dw      Dict_Ptr + 2        // xt
 612+ E6E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E4             >
 612+ E6E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E4             >
 612+ E6E4             >//              ______________________________________________________________________
 612+ E6E4             >//              Dictionary part
 612+ E6E4             >
 612+ E6E4             >                org     Dict_Ptr
 612+ 2A64             >
 612+ 2A64 E2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 2A66             >
 612+ 2A66             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 2A66 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 2A69             >
 612+ 2A69             >
 612+ 2A69             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 2A69             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 2A69             >
 612+ 2A69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 2A69 BC 29                        dw      QTOHEAP
 614+ 2A6B 3E 27                        dw      ONE                     // 1
 615+ 2A6D 38 29                        dw      TRAVERSE                // traverse
 616+ 2A6F 61 25                        dw      ONE_PLUS                // 1+
 617+ 2A71 77 25                        dw      CELL_PLUS               // cell+
 618+ 2A73 8D 29                        dw      QMMU7
 619+ 2A75 8F 20                        dw      ZBRANCH
 620+ 2A77 0E 00                        dw      PFA_Skip - $
 621+ 2A79 55 29                        dw          MMU7_FETCH
 622+ 2A7B 3E 27 9B 28                  dw          ONE, SUBTRACT
 623+ 2A7F 8F 20                        dw          ZBRANCH
 624+ 2A81 04 00                        dw          PFA_Skip - $
 625+ 2A83 3F 26                        dw              FETCH
 626+ 2A85              PFA_Skip:                                    // endif
 627+ 2A85 17 2A                        dw      TO_BODY                 // >body
 628+ 2A87 F5 24                        dw      EXIT                    // ;
 629+ 2A89
 630+ 2A89              //  ______________________________________________________________________
 631+ 2A89              //
 632+ 2A89              // !csp         --
 633+ 2A89              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 2A89                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 2A89             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 2A89             >
 634+ 2A89             >Dict_Ptr        defl    $
 634+ 2A89             >
 634+ 2A89             >//              ______________________________________________________________________
 634+ 2A89             >//              Heap part
 634+ 2A89             >
 634+ 2A89             >
 634+ 2A89             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E4             >
 634+ E6E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E4             >Latest_Definition defl  Heap_Ptr
 634+ E6E4             >
 634+ E6E4             >                // dummy db directives used to calculate length of namec
 634+ E6E4 21 43 53 50 >                db      "!CSP"
 634+ E6E8             >len_NFA         defl    $ - temp_NFA
 634+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E4             >
 634+ E6E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E5 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6E8 D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6E9             >
 634+ E6E9 DC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 634+ E6EB             >
 634+ E6EB             >mirror_Ptr      defl    $
 634+ E6EB             >
 634+ E6EB 8B 2A       >                dw      Dict_Ptr + 2        // xt
 634+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6ED             >
 634+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6ED             >
 634+ E6ED             >//              ______________________________________________________________________
 634+ E6ED             >//              Dictionary part
 634+ E6ED             >
 634+ E6ED             >                org     Dict_Ptr
 634+ 2A89             >
 634+ 2A89 EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 2A8B             >
 634+ 2A8B             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 2A8B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 2A8E             >
 634+ 2A8E             >
 634+ 2A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 2A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 2A8E             >
 634+ 2A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 2A8E DC 24                        dw      SPFETCH                 // sp@
 636+ 2A90 1A 28 49 26                  dw      CSP, STORE              // csp !
 637+ 2A94 F5 24                        dw      EXIT                    // ;
 638+ 2A96
 639+ 2A96              //  ______________________________________________________________________
 640+ 2A96              //
 641+ 2A96              // ?error       f n --
 642+ 2A96              // rase error n if flag f it true
 643+ 2A96                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 2A96             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 2A96             >
 643+ 2A96             >Dict_Ptr        defl    $
 643+ 2A96             >
 643+ 2A96             >//              ______________________________________________________________________
 643+ 2A96             >//              Heap part
 643+ 2A96             >
 643+ 2A96             >
 643+ 2A96             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6ED             >
 643+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6ED             >Latest_Definition defl  Heap_Ptr
 643+ E6ED             >
 643+ E6ED             >                // dummy db directives used to calculate length of namec
 643+ E6ED 3F 45 52 52 >                db      "?ERROR"
 643+ E6F1 4F 52       >
 643+ E6F3             >len_NFA         defl    $ - temp_NFA
 643+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6ED             >
 643+ E6ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6EE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F2 4F 52       >
 643+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F3 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F4             >
 643+ E6F4 E4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F6             >
 643+ E6F6             >mirror_Ptr      defl    $
 643+ E6F6             >
 643+ E6F6 98 2A       >                dw      Dict_Ptr + 2        // xt
 643+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6F8             >
 643+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6F8             >
 643+ E6F8             >//              ______________________________________________________________________
 643+ E6F8             >//              Dictionary part
 643+ E6F8             >
 643+ E6F8             >                org     Dict_Ptr
 643+ 2A96             >
 643+ 2A96 F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 2A98             >
 643+ 2A98             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 2A98 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 2A9B             >
 643+ 2A9B             >
 643+ 2A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 2A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 2A9B             >
 643+ 2A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 2A9B C7 25                        dw      SWAP                    // swap
 645+ 2A9D                                                              // if
 646+ 2A9D 8F 20                        dw      ZBRANCH
 647+ 2A9F 08 00                        dw      QError_Else - $
 648+ 2AA1 D0 2F                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 2AA3                                                              // else
 650+ 2AA3 82 20                        dw      BRANCH
 651+ 2AA5 04 00                        dw      QError_Endif - $
 652+ 2AA7              QError_Else:
 653+ 2AA7 B3 25                        dw          DROP                //      drop
 654+ 2AA9              QError_Endif:                                   // endif
 655+ 2AA9 F5 24                        dw      EXIT                    // ;
 656+ 2AAB
 657+ 2AAB              //  ______________________________________________________________________
 658+ 2AAB              //
 659+ 2AAB              // ?comp       --
 660+ 2AAB              // raise msg #17 if not compiling
 661+ 2AAB                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 2AAB             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 2AAB             >
 661+ 2AAB             >Dict_Ptr        defl    $
 661+ 2AAB             >
 661+ 2AAB             >//              ______________________________________________________________________
 661+ 2AAB             >//              Heap part
 661+ 2AAB             >
 661+ 2AAB             >
 661+ 2AAB             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6F8             >
 661+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6F8             >Latest_Definition defl  Heap_Ptr
 661+ E6F8             >
 661+ E6F8             >                // dummy db directives used to calculate length of namec
 661+ E6F8 3F 43 4F 4D >                db      "?COMP"
 661+ E6FC 50          >
 661+ E6FD             >len_NFA         defl    $ - temp_NFA
 661+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6F8             >
 661+ E6F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FD 50          >
 661+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E6FE             >
 661+ E6FE ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E700             >Prev_Ptr        defl    Heap_Ptr
 661+ E700             >
 661+ E700             >mirror_Ptr      defl    $
 661+ E700             >
 661+ E700 AD 2A       >                dw      Dict_Ptr + 2        // xt
 661+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E702             >
 661+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E702             >
 661+ E702             >//              ______________________________________________________________________
 661+ E702             >//              Dictionary part
 661+ E702             >
 661+ E702             >                org     Dict_Ptr
 661+ 2AAB             >
 661+ 2AAB 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 2AAD             >
 661+ 2AAD             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 2AAD CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 2AB0             >
 661+ 2AB0             >
 661+ 2AB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 2AB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 2AB0             >
 661+ 2AB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 2AB0 02 28 3F 26                  dw      STATE, FETCH            // state @
 663+ 2AB4 1A 25                        dw      ZEQUAL                  // 0=
 664+ 2AB6 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 2ABA 98 2A                        dw      QERROR                  // ?error
 666+ 2ABC F5 24                        dw      EXIT                    // ;
 667+ 2ABE
 668+ 2ABE              //  ______________________________________________________________________
 669+ 2ABE              //
 670+ 2ABE              // ?exec       --
 671+ 2ABE              // raise msg #18 if compiling
 672+ 2ABE                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 2ABE             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 2ABE             >
 672+ 2ABE             >Dict_Ptr        defl    $
 672+ 2ABE             >
 672+ 2ABE             >//              ______________________________________________________________________
 672+ 2ABE             >//              Heap part
 672+ 2ABE             >
 672+ 2ABE             >
 672+ 2ABE             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E702             >
 672+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E702             >Latest_Definition defl  Heap_Ptr
 672+ E702             >
 672+ E702             >                // dummy db directives used to calculate length of namec
 672+ E702 3F 45 58 45 >                db      "?EXEC"
 672+ E706 43          >
 672+ E707             >len_NFA         defl    $ - temp_NFA
 672+ E707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E702             >
 672+ E702 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E703 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E707 43          >
 672+ E708             >                org     $-1                 // alter last byte of Name just above to set
 672+ E707 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E708             >
 672+ E708 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70A             >Prev_Ptr        defl    Heap_Ptr
 672+ E70A             >
 672+ E70A             >mirror_Ptr      defl    $
 672+ E70A             >
 672+ E70A C0 2A       >                dw      Dict_Ptr + 2        // xt
 672+ E70C             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70C             >
 672+ E70C             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70C             >
 672+ E70C             >//              ______________________________________________________________________
 672+ E70C             >//              Dictionary part
 672+ E70C             >
 672+ E70C             >                org     Dict_Ptr
 672+ 2ABE             >
 672+ 2ABE 0A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 2AC0             >
 672+ 2AC0             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 2AC0 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 2AC3             >
 672+ 2AC3             >
 672+ 2AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 2AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 2AC3             >
 672+ 2AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 2AC3 02 28 3F 26                  dw      STATE, FETCH            // state @
 674+ 2AC7 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 2ACB 98 2A                        dw      QERROR                  // ?error
 676+ 2ACD F5 24                        dw      EXIT                    // ;
 677+ 2ACF
 678+ 2ACF              //  ______________________________________________________________________
 679+ 2ACF              //
 680+ 2ACF              // ?pairs       n1 n2 --
 681+ 2ACF              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 2ACF                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 2ACF             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 2ACF             >
 682+ 2ACF             >Dict_Ptr        defl    $
 682+ 2ACF             >
 682+ 2ACF             >//              ______________________________________________________________________
 682+ 2ACF             >//              Heap part
 682+ 2ACF             >
 682+ 2ACF             >
 682+ 2ACF             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70C             >
 682+ E70C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70C             >Latest_Definition defl  Heap_Ptr
 682+ E70C             >
 682+ E70C             >                // dummy db directives used to calculate length of namec
 682+ E70C 3F 50 41 49 >                db      "?PAIRS"
 682+ E710 52 53       >
 682+ E712             >len_NFA         defl    $ - temp_NFA
 682+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70C             >
 682+ E70C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E711 52 53       >
 682+ E713             >                org     $-1                 // alter last byte of Name just above to set
 682+ E712 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E713             >
 682+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E715             >Prev_Ptr        defl    Heap_Ptr
 682+ E715             >
 682+ E715             >mirror_Ptr      defl    $
 682+ E715             >
 682+ E715 D1 2A       >                dw      Dict_Ptr + 2        // xt
 682+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E717             >
 682+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E717             >
 682+ E717             >//              ______________________________________________________________________
 682+ E717             >//              Dictionary part
 682+ E717             >
 682+ E717             >                org     Dict_Ptr
 682+ 2ACF             >
 682+ 2ACF 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 2AD1             >
 682+ 2AD1             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 2AD1 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 2AD4             >
 682+ 2AD4             >
 682+ 2AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 2AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 2AD4             >
 682+ 2AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 2AD4 9B 28                        dw      SUBTRACT                // -
 684+ 2AD6 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 2ADA 98 2A                        dw      QERROR                  // ?error
 686+ 2ADC F5 24                        dw      EXIT                    // ;
 687+ 2ADE
 688+ 2ADE              //  ______________________________________________________________________
 689+ 2ADE              //
 690+ 2ADE              // ?csp       --
 691+ 2ADE              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 2ADE              // Compiler relies on that for  syntax checking of structures
 693+ 2ADE                              Colon_Def QCSP, "?CSP", is_normal
 693+ 2ADE             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 2ADE             >
 693+ 2ADE             >Dict_Ptr        defl    $
 693+ 2ADE             >
 693+ 2ADE             >//              ______________________________________________________________________
 693+ 2ADE             >//              Heap part
 693+ 2ADE             >
 693+ 2ADE             >
 693+ 2ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E717             >
 693+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E717             >Latest_Definition defl  Heap_Ptr
 693+ E717             >
 693+ E717             >                // dummy db directives used to calculate length of namec
 693+ E717 3F 43 53 50 >                db      "?CSP"
 693+ E71B             >len_NFA         defl    $ - temp_NFA
 693+ E71B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E717             >
 693+ E717 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E718 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71C             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71B D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71C             >
 693+ E71C 0C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E71E             >Prev_Ptr        defl    Heap_Ptr
 693+ E71E             >
 693+ E71E             >mirror_Ptr      defl    $
 693+ E71E             >
 693+ E71E E0 2A       >                dw      Dict_Ptr + 2        // xt
 693+ E720             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E720             >
 693+ E720             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E720             >
 693+ E720             >//              ______________________________________________________________________
 693+ E720             >//              Dictionary part
 693+ E720             >
 693+ E720             >                org     Dict_Ptr
 693+ 2ADE             >
 693+ 2ADE 1E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 2AE0             >
 693+ 2AE0             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 2AE0 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 2AE3             >
 693+ 2AE3             >
 693+ 2AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 2AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 2AE3             >
 693+ 2AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 2AE3 DC 24                        dw      SPFETCH                 // sp@
 695+ 2AE5 1A 28 3F 26                  dw      CSP, FETCH              // csp @
 696+ 2AE9 9B 28                        dw      SUBTRACT                // -
 697+ 2AEB 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 2AEF 98 2A                        dw      QERROR                  // ?error
 699+ 2AF1 F5 24                        dw      EXIT                    // ;
 700+ 2AF3
 701+ 2AF3              //  ______________________________________________________________________
 702+ 2AF3              //
 703+ 2AF3              // ?loading      --
 704+ 2AF3              // raise msg #22 if not loading
 705+ 2AF3                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 2AF3             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 2AF3             >
 705+ 2AF3             >Dict_Ptr        defl    $
 705+ 2AF3             >
 705+ 2AF3             >//              ______________________________________________________________________
 705+ 2AF3             >//              Heap part
 705+ 2AF3             >
 705+ 2AF3             >
 705+ 2AF3             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E720             >
 705+ E720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E720             >Latest_Definition defl  Heap_Ptr
 705+ E720             >
 705+ E720             >                // dummy db directives used to calculate length of namec
 705+ E720 3F 4C 4F 41 >                db      "?LOADING"
 705+ E724 44 49 4E 47 >
 705+ E728             >len_NFA         defl    $ - temp_NFA
 705+ E728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E720             >
 705+ E720 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E721 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E725 44 49 4E 47 >
 705+ E729             >                org     $-1                 // alter last byte of Name just above to set
 705+ E728 C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E729             >
 705+ E729 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72B             >Prev_Ptr        defl    Heap_Ptr
 705+ E72B             >
 705+ E72B             >mirror_Ptr      defl    $
 705+ E72B             >
 705+ E72B F5 2A       >                dw      Dict_Ptr + 2        // xt
 705+ E72D             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72D             >
 705+ E72D             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72D             >
 705+ E72D             >//              ______________________________________________________________________
 705+ E72D             >//              Dictionary part
 705+ E72D             >
 705+ E72D             >                org     Dict_Ptr
 705+ 2AF3             >
 705+ 2AF3 2B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 2AF5             >
 705+ 2AF5             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 2AF5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 2AF8             >
 705+ 2AF8             >
 705+ 2AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 2AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 2AF8             >
 705+ 2AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 2AF8 D8 27 3F 26                  dw      BLK, FETCH              // blk @
 707+ 2AFC 1A 25                        dw      ZEQUAL                  // 0=
 708+ 2AFE 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 2B02 98 2A                        dw      QERROR                  // ?error
 710+ 2B04 F5 24                        dw      EXIT                    // ;
 711+ 2B06
 712+ 2B06              //  ______________________________________________________________________
 713+ 2B06              //
 714+ 2B06              // compile      --
 715+ 2B06              // compiles the following word
 716+ 2B06                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 2B06             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 2B06             >
 716+ 2B06             >Dict_Ptr        defl    $
 716+ 2B06             >
 716+ 2B06             >//              ______________________________________________________________________
 716+ 2B06             >//              Heap part
 716+ 2B06             >
 716+ 2B06             >
 716+ 2B06             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72D             >
 716+ E72D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72D             >Latest_Definition defl  Heap_Ptr
 716+ E72D             >
 716+ E72D             >                // dummy db directives used to calculate length of namec
 716+ E72D 43 4F 4D 50 >                db      "COMPILE"
 716+ E731 49 4C 45    >
 716+ E734             >len_NFA         defl    $ - temp_NFA
 716+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72D             >
 716+ E72D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E72E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E732 49 4C 45    >
 716+ E735             >                org     $-1                 // alter last byte of Name just above to set
 716+ E734 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E735             >
 716+ E735 20 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E737             >Prev_Ptr        defl    Heap_Ptr
 716+ E737             >
 716+ E737             >mirror_Ptr      defl    $
 716+ E737             >
 716+ E737 08 2B       >                dw      Dict_Ptr + 2        // xt
 716+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E739             >
 716+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E739             >
 716+ E739             >//              ______________________________________________________________________
 716+ E739             >//              Dictionary part
 716+ E739             >
 716+ E739             >                org     Dict_Ptr
 716+ 2B06             >
 716+ 2B06 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 2B08             >
 716+ 2B08             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 2B08 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 2B0B             >
 716+ 2B0B             >
 716+ 2B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 2B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 2B0B             >
 716+ 2B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 2B0B AD 2A                        dw      QCOMP                   // ?comp
 718+ 2B0D 0A 25                        dw      R_TO                    // r>
 719+ 2B0F CE 25 77 25                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 2B13 FF 24                        dw      TO_R                    // >r
 721+ 2B15 3F 26 72 28                  dw      FETCH, COMMA            // @ ,
 722+ 2B19 F5 24                        dw      EXIT                    // ;
 723+ 2B1B
 724+ 2B1B              //  ______________________________________________________________________
 725+ 2B1B              //
 726+ 2B1B              // compile,     --
 727+ 2B1B              // compiles the following word
 728+ 2B1B                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 2B1B             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 2B1B             >
 728+ 2B1B             >Dict_Ptr        defl    $
 728+ 2B1B             >
 728+ 2B1B             >//              ______________________________________________________________________
 728+ 2B1B             >//              Heap part
 728+ 2B1B             >
 728+ 2B1B             >
 728+ 2B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E739             >
 728+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E739             >Latest_Definition defl  Heap_Ptr
 728+ E739             >
 728+ E739             >                // dummy db directives used to calculate length of namec
 728+ E739 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73D 49 4C 45 2C >
 728+ E741             >len_NFA         defl    $ - temp_NFA
 728+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E739             >
 728+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73A 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E73E 49 4C 45 2C >
 728+ E742             >                org     $-1                 // alter last byte of Name just above to set
 728+ E741 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E742             >
 728+ E742 2D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E744             >Prev_Ptr        defl    Heap_Ptr
 728+ E744             >
 728+ E744             >mirror_Ptr      defl    $
 728+ E744             >
 728+ E744 1D 2B       >                dw      Dict_Ptr + 2        // xt
 728+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E746             >
 728+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E746             >
 728+ E746             >//              ______________________________________________________________________
 728+ E746             >//              Dictionary part
 728+ E746             >
 728+ E746             >                org     Dict_Ptr
 728+ 2B1B             >
 728+ 2B1B 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 2B1D             >
 728+ 2B1D             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 2B1D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 2B20             >
 728+ 2B20             >
 728+ 2B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 2B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 2B20             >
 728+ 2B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 2B20 AD 2A                        dw      QCOMP                   // ?comp
 730+ 2B22 72 28                        dw      COMMA                   // ,
 731+ 2B24 F5 24                        dw      EXIT                    // ;
 732+ 2B26
 733+ 2B26              //  ______________________________________________________________________
 734+ 2B26              //
 735+ 2B26              // [            --
 736+ 2B26              // stop compilation
 737+ 2B26                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 2B26             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 2B26             >
 737+ 2B26             >Dict_Ptr        defl    $
 737+ 2B26             >
 737+ 2B26             >//              ______________________________________________________________________
 737+ 2B26             >//              Heap part
 737+ 2B26             >
 737+ 2B26             >
 737+ 2B26             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E746             >
 737+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E746             >Latest_Definition defl  Heap_Ptr
 737+ E746             >
 737+ E746             >                // dummy db directives used to calculate length of namec
 737+ E746 5B          >                db      "["
 737+ E747             >len_NFA         defl    $ - temp_NFA
 737+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E746             >
 737+ E746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E747 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E748             >                org     $-1                 // alter last byte of Name just above to set
 737+ E747 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E748             >
 737+ E748 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74A             >Prev_Ptr        defl    Heap_Ptr
 737+ E74A             >
 737+ E74A             >mirror_Ptr      defl    $
 737+ E74A             >
 737+ E74A 28 2B       >                dw      Dict_Ptr + 2        // xt
 737+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74C             >
 737+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74C             >
 737+ E74C             >//              ______________________________________________________________________
 737+ E74C             >//              Dictionary part
 737+ E74C             >
 737+ E74C             >                org     Dict_Ptr
 737+ 2B26             >
 737+ 2B26 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 2B28             >
 737+ 2B28             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 2B28 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 2B2B             >
 737+ 2B2B             >
 737+ 2B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 2B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 2B2B             >
 737+ 2B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 2B2B 37 27                        dw      ZERO                    // 0
 739+ 2B2D 02 28 49 26                  dw      STATE, STORE            // state !
 740+ 2B31 F5 24                        dw      EXIT                    // ; immediate
 741+ 2B33
 742+ 2B33              //  ______________________________________________________________________
 743+ 2B33              //
 744+ 2B33              // ]            --
 745+ 2B33              // start compilation
 746+ 2B33                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 2B33             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 2B33             >
 746+ 2B33             >Dict_Ptr        defl    $
 746+ 2B33             >
 746+ 2B33             >//              ______________________________________________________________________
 746+ 2B33             >//              Heap part
 746+ 2B33             >
 746+ 2B33             >
 746+ 2B33             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74C             >
 746+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74C             >Latest_Definition defl  Heap_Ptr
 746+ E74C             >
 746+ E74C             >                // dummy db directives used to calculate length of namec
 746+ E74C 5D          >                db      "]"
 746+ E74D             >len_NFA         defl    $ - temp_NFA
 746+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74C             >
 746+ E74C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74D 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74D DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E74E             >
 746+ E74E 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E750             >Prev_Ptr        defl    Heap_Ptr
 746+ E750             >
 746+ E750             >mirror_Ptr      defl    $
 746+ E750             >
 746+ E750 35 2B       >                dw      Dict_Ptr + 2        // xt
 746+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E752             >
 746+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E752             >
 746+ E752             >//              ______________________________________________________________________
 746+ E752             >//              Dictionary part
 746+ E752             >
 746+ E752             >                org     Dict_Ptr
 746+ 2B33             >
 746+ 2B33 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 2B35             >
 746+ 2B35             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 2B35 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 2B38             >
 746+ 2B38             >
 746+ 2B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 2B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 2B38             >
 746+ 2B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 2B38 3D 20 C0 00                  dw      LIT, $C0                // 192
 748+ 2B3C 02 28 49 26                  dw      STATE, STORE            // state !
 749+ 2B40 F5 24                        dw      EXIT                    // ;
 750+ 2B42
 751+ 2B42              //  ______________________________________________________________________
 752+ 2B42              //
 753+ 2B42              // smudge       --
 754+ 2B42              // toggle smudge bit of latest definition
 755+ 2B42                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 2B42             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 2B42             >
 755+ 2B42             >Dict_Ptr        defl    $
 755+ 2B42             >
 755+ 2B42             >//              ______________________________________________________________________
 755+ 2B42             >//              Heap part
 755+ 2B42             >
 755+ 2B42             >
 755+ 2B42             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E752             >
 755+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E752             >Latest_Definition defl  Heap_Ptr
 755+ E752             >
 755+ E752             >                // dummy db directives used to calculate length of namec
 755+ E752 53 4D 55 44 >                db      "SMUDGE"
 755+ E756 47 45       >
 755+ E758             >len_NFA         defl    $ - temp_NFA
 755+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E752             >
 755+ E752 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E753 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E757 47 45       >
 755+ E759             >                org     $-1                 // alter last byte of Name just above to set
 755+ E758 C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E759             >
 755+ E759 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75B             >Prev_Ptr        defl    Heap_Ptr
 755+ E75B             >
 755+ E75B             >mirror_Ptr      defl    $
 755+ E75B             >
 755+ E75B 44 2B       >                dw      Dict_Ptr + 2        // xt
 755+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75D             >
 755+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75D             >
 755+ E75D             >//              ______________________________________________________________________
 755+ E75D             >//              Dictionary part
 755+ E75D             >
 755+ E75D             >                org     Dict_Ptr
 755+ 2B42             >
 755+ 2B42 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 2B44             >
 755+ 2B44             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 2B44 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 2B47             >
 755+ 2B47             >
 755+ 2B47             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 2B47             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 2B47             >
 755+ 2B47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 2B47 08 2A                        dw      LATEST                  // latest
 757+ 2B49 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 2B4D 36 26                        dw      TOGGLE                  // toggle
 759+ 2B4F F5 24                        dw      EXIT                    // ;
 760+ 2B51
 761+ 2B51              //  ______________________________________________________________________
 762+ 2B51              //
 763+ 2B51              // immediate    --
 764+ 2B51              // make immediate the latest definition
 765+ 2B51                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 2B51             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 2B51             >
 765+ 2B51             >Dict_Ptr        defl    $
 765+ 2B51             >
 765+ 2B51             >//              ______________________________________________________________________
 765+ 2B51             >//              Heap part
 765+ 2B51             >
 765+ 2B51             >
 765+ 2B51             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75D             >
 765+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75D             >Latest_Definition defl  Heap_Ptr
 765+ E75D             >
 765+ E75D             >                // dummy db directives used to calculate length of namec
 765+ E75D 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E761 44 49 41 54 >
 765+ E765 45          >
 765+ E766             >len_NFA         defl    $ - temp_NFA
 765+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75D             >
 765+ E75D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E762 44 49 41 54 >
 765+ E766 45          >
 765+ E767             >                org     $-1                 // alter last byte of Name just above to set
 765+ E766 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E767             >
 765+ E767 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E769             >Prev_Ptr        defl    Heap_Ptr
 765+ E769             >
 765+ E769             >mirror_Ptr      defl    $
 765+ E769             >
 765+ E769 53 2B       >                dw      Dict_Ptr + 2        // xt
 765+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76B             >
 765+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76B             >
 765+ E76B             >//              ______________________________________________________________________
 765+ E76B             >//              Dictionary part
 765+ E76B             >
 765+ E76B             >                org     Dict_Ptr
 765+ 2B51             >
 765+ 2B51 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 2B53             >
 765+ 2B53             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 2B53 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 2B56             >
 765+ 2B56             >
 765+ 2B56             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 2B56             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 2B56             >
 765+ 2B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 2B56 08 2A                        dw      LATEST                  // latest
 767+ 2B58 3D 20 40 00                  dw      LIT, $40                // 64
 768+ 2B5C 36 26                        dw      TOGGLE                  // toggle
 769+ 2B5E F5 24                        dw      EXIT                    // ;
 770+ 2B60
 771+ 2B60              //  ______________________________________________________________________
 772+ 2B60              //
 773+ 2B60              // hex          --
 774+ 2B60              // change numeration base
 775+ 2B60                              Colon_Def HEX, "HEX", is_normal
 775+ 2B60             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 2B60             >
 775+ 2B60             >Dict_Ptr        defl    $
 775+ 2B60             >
 775+ 2B60             >//              ______________________________________________________________________
 775+ 2B60             >//              Heap part
 775+ 2B60             >
 775+ 2B60             >
 775+ 2B60             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76B             >
 775+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76B             >Latest_Definition defl  Heap_Ptr
 775+ E76B             >
 775+ E76B             >                // dummy db directives used to calculate length of namec
 775+ E76B 48 45 58    >                db      "HEX"
 775+ E76E             >len_NFA         defl    $ - temp_NFA
 775+ E76E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76B             >
 775+ E76B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E76F             >                org     $-1                 // alter last byte of Name just above to set
 775+ E76E D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E76F             >
 775+ E76F 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E771             >Prev_Ptr        defl    Heap_Ptr
 775+ E771             >
 775+ E771             >mirror_Ptr      defl    $
 775+ E771             >
 775+ E771 62 2B       >                dw      Dict_Ptr + 2        // xt
 775+ E773             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E773             >
 775+ E773             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E773             >
 775+ E773             >//              ______________________________________________________________________
 775+ E773             >//              Dictionary part
 775+ E773             >
 775+ E773             >                org     Dict_Ptr
 775+ 2B60             >
 775+ 2B60 71 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 2B62             >
 775+ 2B62             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 2B62 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 2B65             >
 775+ 2B65             >
 775+ 2B65             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 2B65             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 2B65             >
 775+ 2B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 2B65 3D 20 10 00                  dw      LIT, 16                 // 16
 777+ 2B69 08 28 49 26                  dw      BASE, STORE             // base !
 778+ 2B6D F5 24                        dw      EXIT                    // ;
 779+ 2B6F
 780+ 2B6F              //  ______________________________________________________________________
 781+ 2B6F              //
 782+ 2B6F              // decimal      --
 783+ 2B6F              // change numeration base
 784+ 2B6F                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 2B6F             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 2B6F             >
 784+ 2B6F             >Dict_Ptr        defl    $
 784+ 2B6F             >
 784+ 2B6F             >//              ______________________________________________________________________
 784+ 2B6F             >//              Heap part
 784+ 2B6F             >
 784+ 2B6F             >
 784+ 2B6F             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E773             >
 784+ E773             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E773             >Latest_Definition defl  Heap_Ptr
 784+ E773             >
 784+ E773             >                // dummy db directives used to calculate length of namec
 784+ E773 44 45 43 49 >                db      "DECIMAL"
 784+ E777 4D 41 4C    >
 784+ E77A             >len_NFA         defl    $ - temp_NFA
 784+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E773             >
 784+ E773 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E774 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E778 4D 41 4C    >
 784+ E77B             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77B             >
 784+ E77B 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77D             >Prev_Ptr        defl    Heap_Ptr
 784+ E77D             >
 784+ E77D             >mirror_Ptr      defl    $
 784+ E77D             >
 784+ E77D 71 2B       >                dw      Dict_Ptr + 2        // xt
 784+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E77F             >
 784+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E77F             >
 784+ E77F             >//              ______________________________________________________________________
 784+ E77F             >//              Dictionary part
 784+ E77F             >
 784+ E77F             >                org     Dict_Ptr
 784+ 2B6F             >
 784+ 2B6F 7D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 2B71             >
 784+ 2B71             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 2B71 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 2B74             >
 784+ 2B74             >
 784+ 2B74             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 2B74             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 2B74             >
 784+ 2B74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 2B74 3D 20 0A 00                  dw      LIT, 10                 // 10
 786+ 2B78 08 28 49 26                  dw      BASE, STORE             // base !
 787+ 2B7C F5 24                        dw      EXIT                    // ;
 788+ 2B7E
 789+ 2B7E              //  ______________________________________________________________________
 790+ 2B7E              //
 791+ 2B7E              // (;code)       --
 792+ 2B7E              // patch to CFA to call/jump to the "following code"
 793+ 2B7E                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 2B7E             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 2B7E             >
 793+ 2B7E             >Dict_Ptr        defl    $
 793+ 2B7E             >
 793+ 2B7E             >//              ______________________________________________________________________
 793+ 2B7E             >//              Heap part
 793+ 2B7E             >
 793+ 2B7E             >
 793+ 2B7E             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E77F             >
 793+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E77F             >Latest_Definition defl  Heap_Ptr
 793+ E77F             >
 793+ E77F             >                // dummy db directives used to calculate length of namec
 793+ E77F 28 3B 43 4F >                db      "(;CODE)"
 793+ E783 44 45 29    >
 793+ E786             >len_NFA         defl    $ - temp_NFA
 793+ E786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E77F             >
 793+ E77F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E780 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E784 44 45 29    >
 793+ E787             >                org     $-1                 // alter last byte of Name just above to set
 793+ E786 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E787             >
 793+ E787 73 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E789             >Prev_Ptr        defl    Heap_Ptr
 793+ E789             >
 793+ E789             >mirror_Ptr      defl    $
 793+ E789             >
 793+ E789 80 2B       >                dw      Dict_Ptr + 2        // xt
 793+ E78B             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78B             >
 793+ E78B             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78B             >
 793+ E78B             >//              ______________________________________________________________________
 793+ E78B             >//              Dictionary part
 793+ E78B             >
 793+ E78B             >                org     Dict_Ptr
 793+ 2B7E             >
 793+ 2B7E 89 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 2B80             >
 793+ 2B80             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 2B80 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 2B83             >
 793+ 2B83             >
 793+ 2B83             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 2B83             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 2B83             >
 793+ 2B83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 2B83 0A 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 2B85 08 2A                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 2B87 66 2A 41 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 2B8B
 798+ 2B8B 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 2B8F AA 25 5D 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 2B93 61 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 2B95
 802+ 2B95 49 26                        dw      STORE                   // !
 803+ 2B97 F5 24                        dw      EXIT                    // ;
 804+ 2B99
 805+ 2B99              //  ______________________________________________________________________
 806+ 2B99              //
 807+ 2B99              // ;code        --
 808+ 2B99                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 2B99             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 2B99             >
 808+ 2B99             >Dict_Ptr        defl    $
 808+ 2B99             >
 808+ 2B99             >//              ______________________________________________________________________
 808+ 2B99             >//              Heap part
 808+ 2B99             >
 808+ 2B99             >
 808+ 2B99             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78B             >
 808+ E78B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78B             >Latest_Definition defl  Heap_Ptr
 808+ E78B             >
 808+ E78B             >                // dummy db directives used to calculate length of namec
 808+ E78B 3B 43 4F 44 >                db      ";CODE"
 808+ E78F 45          >
 808+ E790             >len_NFA         defl    $ - temp_NFA
 808+ E790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78B             >
 808+ E78B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E790 45          >
 808+ E791             >                org     $-1                 // alter last byte of Name just above to set
 808+ E790 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E791             >
 808+ E791 7F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E793             >Prev_Ptr        defl    Heap_Ptr
 808+ E793             >
 808+ E793             >mirror_Ptr      defl    $
 808+ E793             >
 808+ E793 9B 2B       >                dw      Dict_Ptr + 2        // xt
 808+ E795             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E795             >
 808+ E795             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E795             >
 808+ E795             >//              ______________________________________________________________________
 808+ E795             >//              Dictionary part
 808+ E795             >
 808+ E795             >                org     Dict_Ptr
 808+ 2B99             >
 808+ 2B99 93 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 2B9B             >
 808+ 2B9B             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 2B9B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 2B9E             >
 808+ 2B9E             >
 808+ 2B9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 2B9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 2B9E             >
 808+ 2B9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 2B9E E0 2A                        dw      QCSP                    // ?csp
 810+ 2BA0 08 2B                        dw      COMPILE                 // compile
 811+ 2BA2 80 2B                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 2BA4 28 2B                        dw      SQUARED_OPEN            // [
 813+ 2BA6 FE 26                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 2BA8 F5 24                        dw      EXIT                    // ; immediate
 815+ 2BAA
 816+ 2BAA              //  ______________________________________________________________________
 817+ 2BAA              //
 818+ 2BAA              // <builds      --
 819+ 2BAA                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 2BAA             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 2BAA             >
 819+ 2BAA             >Dict_Ptr        defl    $
 819+ 2BAA             >
 819+ 2BAA             >//              ______________________________________________________________________
 819+ 2BAA             >//              Heap part
 819+ 2BAA             >
 819+ 2BAA             >
 819+ 2BAA             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E795             >
 819+ E795             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E795             >Latest_Definition defl  Heap_Ptr
 819+ E795             >
 819+ E795             >                // dummy db directives used to calculate length of namec
 819+ E795 3C 42 55 49 >                db      "<BUILDS"
 819+ E799 4C 44 53    >
 819+ E79C             >len_NFA         defl    $ - temp_NFA
 819+ E79C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E795             >
 819+ E795 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E796 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79A 4C 44 53    >
 819+ E79D             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79C D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79D             >
 819+ E79D 8B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E79F             >Prev_Ptr        defl    Heap_Ptr
 819+ E79F             >
 819+ E79F             >mirror_Ptr      defl    $
 819+ E79F             >
 819+ E79F AC 2B       >                dw      Dict_Ptr + 2        // xt
 819+ E7A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A1             >
 819+ E7A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A1             >
 819+ E7A1             >//              ______________________________________________________________________
 819+ E7A1             >//              Dictionary part
 819+ E7A1             >
 819+ E7A1             >                org     Dict_Ptr
 819+ 2BAA             >
 819+ 2BAA 9F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 2BAC             >
 819+ 2BAC             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 2BAC CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 2BAF             >
 819+ 2BAF             >
 819+ 2BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 2BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 2BAF             >
 819+ 2BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 2BAF 37 27                        dw      ZERO                    // 0
 821+ 2BB1 02 27                        dw      CONSTANT                // constant
 822+ 2BB3 F5 24                        dw      EXIT                    // ;
 823+ 2BB5
 824+ 2BB5              //  ______________________________________________________________________
 825+ 2BB5              //
 826+ 2BB5              // recurse      --
 827+ 2BB5              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 2BB5              //              dw      QCOMP                   // ?comp
 829+ 2BB5              //              dw      LATEST                  // latest
 830+ 2BB5              //              dw      PFA, CFA                // pfa cfa
 831+ 2BB5              //              dw      COMMA                   // ,
 832+ 2BB5              //              dw      EXIT                    // ; immediate
 833+ 2BB5
 834+ 2BB5              //  ______________________________________________________________________
 835+ 2BB5              //
 836+ 2BB5              // does>     --
 837+ 2BB5                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 2BB5             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 2BB5             >
 837+ 2BB5             >Dict_Ptr        defl    $
 837+ 2BB5             >
 837+ 2BB5             >//              ______________________________________________________________________
 837+ 2BB5             >//              Heap part
 837+ 2BB5             >
 837+ 2BB5             >
 837+ 2BB5             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A1             >
 837+ E7A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A1             >Latest_Definition defl  Heap_Ptr
 837+ E7A1             >
 837+ E7A1             >                // dummy db directives used to calculate length of namec
 837+ E7A1 44 4F 45 53 >                db      "DOES>"
 837+ E7A5 3E          >
 837+ E7A6             >len_NFA         defl    $ - temp_NFA
 837+ E7A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A1             >
 837+ E7A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A2 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A6 3E          >
 837+ E7A7             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A6 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A7             >
 837+ E7A7 95 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7A9             >Prev_Ptr        defl    Heap_Ptr
 837+ E7A9             >
 837+ E7A9             >mirror_Ptr      defl    $
 837+ E7A9             >
 837+ E7A9 B7 2B       >                dw      Dict_Ptr + 2        // xt
 837+ E7AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AB             >
 837+ E7AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AB             >
 837+ E7AB             >//              ______________________________________________________________________
 837+ E7AB             >//              Dictionary part
 837+ E7AB             >
 837+ E7AB             >                org     Dict_Ptr
 837+ 2BB5             >
 837+ 2BB5 A9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 2BB7             >
 837+ 2BB7             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 2BB7 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 2BBA             >
 837+ 2BBA             >
 837+ 2BBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 2BBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 2BBA             >
 837+ 2BBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 2BBA 0A 25                        dw      R_TO                    // r>
 839+ 2BBC 08 2A                        dw      LATEST                  // latest
 840+ 2BBE 66 2A                        dw      PFA                     // pfa
 841+ 2BC0 49 26                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 2BC2              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 2BC2 80 2B                        dw      C_SEMICOLON_CODE        // ;code
 844+ 2BC4              Does_Ptr:
 845+ 2BC4                              // via call coded in CFA
 846+ 2BC4 EB                           ex      de, hl //**
 847+ 2BC5                              // *** ldhlrp
 848+ 2BC5 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 2BC6 70                           ld      (hl), b
 850+ 2BC7 2B                           dec     hl
 851+ 2BC8 71                           ld      (hl), c
 852+ 2BC9                              // *** ldrphl
 853+ 2BC9 EB                           ex      de, hl //**
 854+ 2BCA E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 2BCB
 856+ 2BCB 4E                           ld      c, (hl)
 857+ 2BCC 23                           inc     hl
 858+ 2BCD 46                           ld      b, (hl)
 859+ 2BCE 23                           inc     hl
 860+ 2BCF
 861+ 2BCF                              psh1
 861+ 2BCF E5          >                push    hl
 861+ 2BD0 DD E9       >                jp      (ix)
 862+ 2BD2                              // SMUDGE !
 863+ 2BD2
 864+ 2BD2              //  ______________________________________________________________________
 865+ 2BD2              //
 866+ 2BD2              // count        a -- a2 n
 867+ 2BD2              // expects a counted string at address a, returns string address and counter
 868+ 2BD2                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 2BD2             >
 868+ 2BD2             >Dict_Ptr        defl    $
 868+ 2BD2             >
 868+ 2BD2             >//              ______________________________________________________________________
 868+ 2BD2             >//              Heap part
 868+ 2BD2             >
 868+ 2BD2             >
 868+ 2BD2             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AB             >
 868+ E7AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AB             >Latest_Definition defl  Heap_Ptr
 868+ E7AB             >
 868+ E7AB             >                // dummy db directives used to calculate length of namec
 868+ E7AB 43 4F 55 4E >                db      "COUNT"
 868+ E7AF 54          >
 868+ E7B0             >len_NFA         defl    $ - temp_NFA
 868+ E7B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AB             >
 868+ E7AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B0 54          >
 868+ E7B1             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B0 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B1             >
 868+ E7B1 A1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B3             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B3             >
 868+ E7B3             >mirror_Ptr      defl    $
 868+ E7B3             >
 868+ E7B3 D4 2B       >                dw      Dict_Ptr + 2        // xt
 868+ E7B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B5             >
 868+ E7B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B5             >
 868+ E7B5             >//              ______________________________________________________________________
 868+ E7B5             >//              Dictionary part
 868+ E7B5             >
 868+ E7B5             >                org     Dict_Ptr
 868+ 2BD2             >
 868+ 2BD2 B3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 2BD4             >
 868+ 2BD4             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 2BD4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 2BD4 ~           >
 868+ 2BD4 ~           >
 868+ 2BD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 2BD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 2BD4             >
 868+ 2BD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 2BD4 D9                           exx
 870+ 2BD5 E1                           pop     hl
 871+ 2BD6 5E                           ld      e, (hl)
 872+ 2BD7 16 00                        ld      d, 0
 873+ 2BD9 23                           inc     hl
 874+ 2BDA              Count_Here:
 875+ 2BDA E5                           push    hl
 876+ 2BDB D5                           push    de
 877+ 2BDC D9                           exx
 878+ 2BDD                              next
 878+ 2BDD DD E9       >                jp      (ix)
 879+ 2BDF              //                pop     hl
 880+ 2BDF              //                ld      a, (hl)
 881+ 2BDF              //                inc     hl
 882+ 2BDF              //                push    hl
 883+ 2BDF              //                ld      h, 0
 884+ 2BDF              //                ld      l, a
 885+ 2BDF              //                push    hl
 886+ 2BDF              //                next
 887+ 2BDF
 888+ 2BDF              //  ______________________________________________________________________
 889+ 2BDF              //
 890+ 2BDF              // bounds       a n -- a+n n
 891+ 2BDF              // given an address and a length ( a n ) calculate the bound addresses
 892+ 2BDF              // suitable for DO-LOOP
 893+ 2BDF                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 2BDF             >
 893+ 2BDF             >Dict_Ptr        defl    $
 893+ 2BDF             >
 893+ 2BDF             >//              ______________________________________________________________________
 893+ 2BDF             >//              Heap part
 893+ 2BDF             >
 893+ 2BDF             >
 893+ 2BDF             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B5             >
 893+ E7B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B5             >Latest_Definition defl  Heap_Ptr
 893+ E7B5             >
 893+ E7B5             >                // dummy db directives used to calculate length of namec
 893+ E7B5 42 4F 55 4E >                db      "BOUNDS"
 893+ E7B9 44 53       >
 893+ E7BB             >len_NFA         defl    $ - temp_NFA
 893+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B5             >
 893+ E7B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B6 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BA 44 53       >
 893+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BB D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BC             >
 893+ E7BC AB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 893+ E7BE             >
 893+ E7BE             >mirror_Ptr      defl    $
 893+ E7BE             >
 893+ E7BE E1 2B       >                dw      Dict_Ptr + 2        // xt
 893+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C0             >
 893+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C0             >
 893+ E7C0             >//              ______________________________________________________________________
 893+ E7C0             >//              Dictionary part
 893+ E7C0             >
 893+ E7C0             >                org     Dict_Ptr
 893+ 2BDF             >
 893+ 2BDF BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 2BE1             >
 893+ 2BE1             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 2BE1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 2BE1 ~           >
 893+ 2BE1 ~           >
 893+ 2BE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 2BE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 2BE1             >
 893+ 2BE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 2BE1 D9                           exx
 895+ 2BE2 E1                           pop     hl
 896+ 2BE3 D1                           pop     de
 897+ 2BE4 19                           add     hl, de
 898+ 2BE5 18 F3                        jr      Count_Here
 899+ 2BE7                              // push    hl
 900+ 2BE7                              // push    de
 901+ 2BE7                              // exx
 902+ 2BE7                              // next
 903+ 2BE7
 904+ 2BE7              //  ______________________________________________________________________
 905+ 2BE7              //
 906+ 2BE7              // leave        --
 907+ 2BE7              // Compile (leave) to leave current LOOP and jump just after it
 908+ 2BE7                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 2BE7             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 2BE7             >
 908+ 2BE7             >Dict_Ptr        defl    $
 908+ 2BE7             >
 908+ 2BE7             >//              ______________________________________________________________________
 908+ 2BE7             >//              Heap part
 908+ 2BE7             >
 908+ 2BE7             >
 908+ 2BE7             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C0             >
 908+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C0             >Latest_Definition defl  Heap_Ptr
 908+ E7C0             >
 908+ E7C0             >                // dummy db directives used to calculate length of namec
 908+ E7C0 4C 45 41 56 >                db      "LEAVE"
 908+ E7C4 45          >
 908+ E7C5             >len_NFA         defl    $ - temp_NFA
 908+ E7C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C0             >
 908+ E7C0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C1 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C5 45          >
 908+ E7C6             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C5 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C6             >
 908+ E7C6 B5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7C8             >Prev_Ptr        defl    Heap_Ptr
 908+ E7C8             >
 908+ E7C8             >mirror_Ptr      defl    $
 908+ E7C8             >
 908+ E7C8 E9 2B       >                dw      Dict_Ptr + 2        // xt
 908+ E7CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CA             >
 908+ E7CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CA             >
 908+ E7CA             >//              ______________________________________________________________________
 908+ E7CA             >//              Dictionary part
 908+ E7CA             >
 908+ E7CA             >                org     Dict_Ptr
 908+ 2BE7             >
 908+ 2BE7 C8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 2BE9             >
 908+ 2BE9             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 2BE9 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 2BEC             >
 908+ 2BEC             >
 908+ 2BEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 2BEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 2BEC             >
 908+ 2BEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 2BEC 08 2B 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 2BF0 5C 28 FF 24                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 2BF4 37 27 72 28
 911+ 2BF8 37 27 37 27                  dw      ZERO, ZERO
 912+ 2BFC DC 24 CE 25                  dw      SPFETCH, DUP
 913+ 2C00 77 25 77 25                  dw      CELL_PLUS, CELL_PLUS
 914+ 2C04 BE 25                        dw      TUCK
 915+ 2C06 1A 28 3F 26                  dw      CSP, FETCH
 916+ 2C0A C7 25 9B 28                  dw      SWAP, SUBTRACT
 917+ 2C0E 36 24                        dw      CMOVE
 918+ 2C10 1A 28 3F 26                  dw      CSP, FETCH, CELL_MINUS
 918+ 2C14 7C 25
 919+ 2C16 0A 25 AA 25                  dw      R_TO, OVER, STORE
 919+ 2C1A 49 26
 920+ 2C1C 7C 25 37 27                  dw      CELL_MINUS, ZERO
 921+ 2C20 C7 25 49 26                  dw      SWAP, STORE
 922+ 2C24 F5 24                        dw      EXIT                    // ;
 923+ 2C26
 924+ 2C26              //  ______________________________________________________________________
 925+ 2C26              //
 926+ 2C26              // type         a n --
 927+ 2C26              // Sends to current output channel n characters starting at address a.
 928+ 2C26                              Colon_Def TYPE, "TYPE", is_normal
 928+ 2C26             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 2C26             >
 928+ 2C26             >Dict_Ptr        defl    $
 928+ 2C26             >
 928+ 2C26             >//              ______________________________________________________________________
 928+ 2C26             >//              Heap part
 928+ 2C26             >
 928+ 2C26             >
 928+ 2C26             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CA             >
 928+ E7CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CA             >Latest_Definition defl  Heap_Ptr
 928+ E7CA             >
 928+ E7CA             >                // dummy db directives used to calculate length of namec
 928+ E7CA 54 59 50 45 >                db      "TYPE"
 928+ E7CE             >len_NFA         defl    $ - temp_NFA
 928+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CA             >
 928+ E7CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CB 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7CF             >
 928+ E7CF C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D1             >
 928+ E7D1             >mirror_Ptr      defl    $
 928+ E7D1             >
 928+ E7D1 28 2C       >                dw      Dict_Ptr + 2        // xt
 928+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D3             >
 928+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D3             >
 928+ E7D3             >//              ______________________________________________________________________
 928+ E7D3             >//              Dictionary part
 928+ E7D3             >
 928+ E7D3             >                org     Dict_Ptr
 928+ 2C26             >
 928+ 2C26 D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 2C28             >
 928+ 2C28             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 2C28 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 2C2B             >
 928+ 2C2B             >
 928+ 2C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 2C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 2C2B             >
 928+ 2C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 2C2B E1 2B                        dw      BOUNDS                  // bounds
 930+ 2C2D A6 20                        dw      C_Q_DO                  // ?do
 931+ 2C2F 0C 00                        dw      Type_Skip - $
 932+ 2C31              Type_Loop:
 933+ 2C31 D4 20 54 26                  dw          I, CFETCH           //      i c@
 934+ 2C35 16 29                        dw          EMIT                //      emit
 935+ 2C37 7A 20                        dw      C_LOOP                  // loop
 936+ 2C39 F8 FF                        dw      Type_Loop - $
 937+ 2C3B              Type_Skip:
 938+ 2C3B F5 24                        dw      EXIT                    // ;
 939+ 2C3D
 940+ 2C3D              //  ______________________________________________________________________
 941+ 2C3D              //
 942+ 2C3D              // -trailing    a n1 -- a n2
 943+ 2C3D              // Assumes that an n1 bytes-long string is stored at address a
 944+ 2C3D              // and the string contains a space delimited word,
 945+ 2C3D              // Finds n2 as the position of the first character after the word.
 946+ 2C3D                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 2C3D             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 2C3D             >
 946+ 2C3D             >Dict_Ptr        defl    $
 946+ 2C3D             >
 946+ 2C3D             >//              ______________________________________________________________________
 946+ 2C3D             >//              Heap part
 946+ 2C3D             >
 946+ 2C3D             >
 946+ 2C3D             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D3             >
 946+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D3             >Latest_Definition defl  Heap_Ptr
 946+ E7D3             >
 946+ E7D3             >                // dummy db directives used to calculate length of namec
 946+ E7D3 2D 54 52 41 >                db      "-TRAILING"
 946+ E7D7 49 4C 49 4E >
 946+ E7DB 47          >
 946+ E7DC             >len_NFA         defl    $ - temp_NFA
 946+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D3             >
 946+ E7D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7D8 49 4C 49 4E >
 946+ E7DC 47          >
 946+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DC C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7DD             >
 946+ E7DD CA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 946+ E7DF             >
 946+ E7DF             >mirror_Ptr      defl    $
 946+ E7DF             >
 946+ E7DF 3F 2C       >                dw      Dict_Ptr + 2        // xt
 946+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E1             >
 946+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E1             >
 946+ E7E1             >//              ______________________________________________________________________
 946+ E7E1             >//              Dictionary part
 946+ E7E1             >
 946+ E7E1             >                org     Dict_Ptr
 946+ 2C3D             >
 946+ 2C3D DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 2C3F             >
 946+ 2C3F             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 2C3F CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 2C42             >
 946+ 2C42             >
 946+ 2C42             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 2C42             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 2C42             >
 946+ 2C42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 2C42 CE 25 37 27                  dw      DUP, ZERO               // dup 0
 948+ 2C46                                                              // do
 949+ 2C46 A6 20                        dw      C_Q_DO
 950+ 2C48 20 00                        dw      LTrailing_Leave - $
 951+ 2C4A              LTrailing_Loop:
 952+ 2C4A 1D 26 48 25                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 2C4E 68 25                        dw          ONE_SUBTRACT        //      1-
 954+ 2C50 54 26                        dw          CFETCH              //      c@
 955+ 2C52 5A 27 9B 28                  dw          BL, SUBTRACT        //      bl -
 956+ 2C56                                                              //      if
 957+ 2C56 8F 20                        dw          ZBRANCH
 958+ 2C58 0A 00                        dw          LTrailing_Else - $
 959+ 2C5A 9A 20                        dw              C_LEAVE         //          leave
 960+ 2C5C 0C 00                        dw              LTrailing_Leave - $
 961+ 2C5E 82 20                        dw          BRANCH              //      else
 962+ 2C60 04 00                        dw          LTrailing_Endif - $
 963+ 2C62              LTrailing_Else:
 964+ 2C62 68 25                        dw              ONE_SUBTRACT    //          1-
 965+ 2C64              LTrailing_Endif:                                //      endif
 966+ 2C64                                                              // loop
 967+ 2C64 7A 20                        dw      C_LOOP
 968+ 2C66 E4 FF                        dw      LTrailing_Loop - $
 969+ 2C68              LTrailing_Leave:
 970+ 2C68 F5 24                        dw      EXIT                    // ;
 971+ 2C6A
 972+ 2C6A              //  ______________________________________________________________________
 973+ 2C6A              //
 974+ 2C6A              // accept       a n1 -- n2
 975+ 2C6A              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 2C6A              // CR stops input. A 'nul' is added as trailer.
 977+ 2C6A              // n2 is the string length. n2 is kept in span user variable also.
 978+ 2C6A                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 2C6A             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 2C6A             >
 978+ 2C6A             >Dict_Ptr        defl    $
 978+ 2C6A             >
 978+ 2C6A             >//              ______________________________________________________________________
 978+ 2C6A             >//              Heap part
 978+ 2C6A             >
 978+ 2C6A             >
 978+ 2C6A             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E1             >
 978+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E1             >Latest_Definition defl  Heap_Ptr
 978+ E7E1             >
 978+ E7E1             >                // dummy db directives used to calculate length of namec
 978+ E7E1 41 43 43 45 >                db      "ACCEPT"
 978+ E7E5 50 54       >
 978+ E7E7             >len_NFA         defl    $ - temp_NFA
 978+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E1             >
 978+ E7E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E6 50 54       >
 978+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7E7 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7E8             >
 978+ E7E8 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 978+ E7EA             >
 978+ E7EA             >mirror_Ptr      defl    $
 978+ E7EA             >
 978+ E7EA 6C 2C       >                dw      Dict_Ptr + 2        // xt
 978+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EC             >
 978+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EC             >
 978+ E7EC             >//              ______________________________________________________________________
 978+ E7EC             >//              Dictionary part
 978+ E7EC             >
 978+ E7EC             >                org     Dict_Ptr
 978+ 2C6A             >
 978+ 2C6A EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 2C6C             >
 978+ 2C6C             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 2C6C CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 2C6F             >
 978+ 2C6F             >
 978+ 2C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 2C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 2C6F             >
 978+ 2C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 2C6F AA 25 48 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 2C73 AA 25
 980+ 2C75 37 27 E0 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 2C79                                                              // do
 982+ 2C79 A6 20                        dw      C_Q_DO
 983+ 2C7B 8C 00                        dw      Accept_Leave - $
 984+ 2C7D              Accept_Loop:
 985+ 2C7D D1 22                        dw          CUR
 986+ 2C7F B3 25 19 23                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 2C83 CE 25                        dw          DUP                 //      dup             ( a  c  c )
 988+ 2C85 3D 20 0E 00                  dw          LIT, $0E            //      0E
 989+ 2C89 7D 27                        dw          PLUS_ORIGIN         //      +origin
 990+ 2C8B 3F 26                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 2C8D A7 28                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 2C8F                                                              //      if
 993+ 2C8F 8F 20                        dw          ZBRANCH
 994+ 2C91 2C 00                        dw          Accept_Else_0 - $
 995+ 2C93 B3 25                        dw              DROP            //          drop        ( a  )
 996+ 2C95 CE 25 D4 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 2C99 A7 28
 997+ 2C9B 3E 27 B5 24                  dw              ONE, AND_OP     //          1 and
 998+ 2C9F CE 25                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 2CA1 0A 25                        dw              R_TO            //          r> 2 - + r>
1000+ 2CA3 84 25 48 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 2CA7 FF 24                        dw              TO_R            //
1002+ 2CA9                                                              //          if
1003+ 2CA9 8F 20                        dw              ZBRANCH
1004+ 2CAB 0A 00                        dw              Accept_Else_1 - $
1005+ 2CAD 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 2CB1                                                              //          else
1007+ 2CB1 82 20                        dw              BRANCH
1008+ 2CB3 06 00                        dw              Accept_Endif_1 - $
1009+ 2CB5              Accept_Else_1:
1010+ 2CB5 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 2CB9              Accept_Endif_1:                                 //          endif
1012+ 2CB9 82 20                        dw          BRANCH
1013+ 2CBB 2E 00                        dw          Accept_Endif_0 - $
1014+ 2CBD              Accept_Else_0:                                  //      else
1015+ 2CBD CE 25                        dw              DUP             //          dup         ( a  c  c )
1016+ 2CBF 3D 20 0D 00                  dw              LIT, 13         //          13
1017+ 2CC3 A7 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 2CC5                                                              //          if
1019+ 2CC5 8F 20                        dw              ZBRANCH
1020+ 2CC7 0C 00                        dw              Accept_Else_2 - $
1021+ 2CC9 B3 25 5A 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 2CCD 37 27                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 2CCF                                                              //          else
1024+ 2CCF 82 20                        dw              BRANCH
1025+ 2CD1 04 00                        dw              Accept_Endif_2 - $
1026+ 2CD3              Accept_Else_2:
1027+ 2CD3 CE 25                        dw                  DUP         //              dup     ( a  c  c )
1028+ 2CD5                                                              //          endif
1029+ 2CD5              Accept_Endif_2:
1030+ 2CD5 D4 20 5D 26                  dw              I, CSTORE       //          i           ( a  c )
1031+ 2CD9 CE 25 5A 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 2CDD C0 28
1032+ 2CDF                                                              //          if
1033+ 2CDF 8F 20                        dw              ZBRANCH
1034+ 2CE1 08 00                        dw              Accept_Endif_3 - $
1035+ 2CE3 0A 25                        dw                  R_TO        //              r>
1036+ 2CE5 68 25                        dw                  ONE_SUBTRACT//              1-
1037+ 2CE7 FF 24                        dw                  TO_R        //              >r
1038+ 2CE9                                                              //          endif
1039+ 2CE9              Accept_Endif_3:
1040+ 2CE9              Accept_Endif_0:                                 //      endif
1041+ 2CE9 16 29                        dw          EMIT                //      emit
1042+ 2CEB
1043+ 2CEB 37 27 D4 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 2CEF 61 25
1044+ 2CF1 49 26                        dw          STORE               //          ( zero pad )
1045+ 2CF3 D4 20                        dw          I                   //      i
1046+ 2CF5 D4 20 54 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 2CF9 1A 25
1047+ 2CFB 8F 20                        dw          ZBRANCH             //
1048+ 2CFD 06 00                        dw              Accept_Endif_4 - $
1049+ 2CFF 9A 20                        dw                  C_LEAVE     //              leave
1050+ 2D01 06 00                        dw                  Accept_Leave - $
1051+ 2D03              Accept_Endif_4:                                 //      endif
1052+ 2D03                                                              // loop
1053+ 2D03 7A 20                        dw      C_LOOP
1054+ 2D05 78 FF                        dw      Accept_Loop - $
1055+ 2D07              Accept_Leave:
1056+ 2D07 C7 25 9B 28                  dw      SWAP, SUBTRACT          // swap -
1057+ 2D0B 61 25                        dw      ONE_PLUS                // 1+
1058+ 2D0D CE 25 4A 28                  dw      DUP, SPAN, STORE        // dup span !
1058+ 2D11 49 26
1059+ 2D13 F5 24                        dw      EXIT                    // ;
1060+ 2D15
1061+ 2D15              //  ______________________________________________________________________
1062+ 2D15              //
1063+ 2D15              // expect      a n --
1064+ 2D15              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 2D15              // CR stops input. A 'nul' is added as trailer.
1066+ 2D15              // n2 is the string length. n2 is kept in span user variable also.
1067+ 2D15              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 2D15              //              dw      ACCEPT, DROP            // accept drop
1069+ 2D15              //              dw      EXIT                    // ;
1070+ 2D15
1071+ 2D15              //  ______________________________________________________________________
1072+ 2D15              //
1073+ 2D15              // query        --
1074+ 2D15              // Accept at most 80 character from console. CR stops.
1075+ 2D15              // Text is stored in TIB. Variable IN is zeroed.
1076+ 2D15                              Colon_Def QUERY, "QUERY", is_normal
1076+ 2D15             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 2D15             >
1076+ 2D15             >Dict_Ptr        defl    $
1076+ 2D15             >
1076+ 2D15             >//              ______________________________________________________________________
1076+ 2D15             >//              Heap part
1076+ 2D15             >
1076+ 2D15             >
1076+ 2D15             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EC             >
1076+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EC             >Latest_Definition defl  Heap_Ptr
1076+ E7EC             >
1076+ E7EC             >                // dummy db directives used to calculate length of namec
1076+ E7EC 51 55 45 52 >                db      "QUERY"
1076+ E7F0 59          >
1076+ E7F1             >len_NFA         defl    $ - temp_NFA
1076+ E7F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EC             >
1076+ E7EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7ED 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F1 59          >
1076+ E7F2             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F1 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F2             >
1076+ E7F2 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F4             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F4             >
1076+ E7F4             >mirror_Ptr      defl    $
1076+ E7F4             >
1076+ E7F4 17 2D       >                dw      Dict_Ptr + 2        // xt
1076+ E7F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F6             >
1076+ E7F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F6             >
1076+ E7F6             >//              ______________________________________________________________________
1076+ E7F6             >//              Dictionary part
1076+ E7F6             >
1076+ E7F6             >                org     Dict_Ptr
1076+ 2D15             >
1076+ 2D15 F4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 2D17             >
1076+ 2D17             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 2D17 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 2D1A             >
1076+ 2D1A             >
1076+ 2D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 2D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 2D1A             >
1076+ 2D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 2D1A 9C 27 3F 26                  dw      TIB, FETCH              // tib @
1078+ 2D1E 3D 20 50 00                  dw      LIT, 80                 // 80
1079+ 2D22 6C 2C B3 25                  dw      ACCEPT, DROP            // accept drop
1080+ 2D26 37 27 DE 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 2D2A 49 26
1081+ 2D2C F5 24                        dw      EXIT                    // ;
1082+ 2D2E
1083+ 2D2E              //  ______________________________________________________________________
1084+ 2D2E              //
1085+ 2D2E              // fill        a n c --
1086+ 2D2E              // If n > 0, fills n locations starting from address a with the value c.
1087+ 2D2E                              New_Def FILL, "FILL", is_code, is_normal
1087+ 2D2E             >
1087+ 2D2E             >Dict_Ptr        defl    $
1087+ 2D2E             >
1087+ 2D2E             >//              ______________________________________________________________________
1087+ 2D2E             >//              Heap part
1087+ 2D2E             >
1087+ 2D2E             >
1087+ 2D2E             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F6             >
1087+ E7F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F6             >Latest_Definition defl  Heap_Ptr
1087+ E7F6             >
1087+ E7F6             >                // dummy db directives used to calculate length of namec
1087+ E7F6 46 49 4C 4C >                db      "FILL"
1087+ E7FA             >len_NFA         defl    $ - temp_NFA
1087+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F6             >
1087+ E7F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7F7 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FA CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FB             >
1087+ E7FB EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1087+ E7FD             >
1087+ E7FD             >mirror_Ptr      defl    $
1087+ E7FD             >
1087+ E7FD 30 2D       >                dw      Dict_Ptr + 2        // xt
1087+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E7FF             >
1087+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E7FF             >
1087+ E7FF             >//              ______________________________________________________________________
1087+ E7FF             >//              Dictionary part
1087+ E7FF             >
1087+ E7FF             >                org     Dict_Ptr
1087+ 2D2E             >
1087+ 2D2E FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 2D30             >
1087+ 2D30             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 2D30 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 2D30 ~           >
1087+ 2D30 ~           >
1087+ 2D30             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 2D30             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 2D30             >
1087+ 2D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 2D30 D9                           exx
1089+ 2D31 D1                           pop     de                  // de has character
1090+ 2D32 C1                           pop     bc                  // bc has counter
1091+ 2D33 E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 2D34              Fill_Loop:
1093+ 2D34 78                               ld      a, b
1094+ 2D35 B1                               or      c
1095+ 2D36 28 05                        jr      z, Fill_While_End
1096+ 2D38 73                               ld      (hl), e
1097+ 2D39 0B                               dec     bc
1098+ 2D3A 23                               inc     hl
1099+ 2D3B 18 F7                        jr      Fill_Loop
1100+ 2D3D              Fill_While_End:
1101+ 2D3D D9                           exx
1102+ 2D3E                              next
1102+ 2D3E DD E9       >                jp      (ix)
1103+ 2D40
1104+ 2D40              //  ______________________________________________________________________
1105+ 2D40              //
1106+ 2D40              // erase        a n --
1107+ 2D40              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 2D40                              Colon_Def ERASE, "ERASE", is_normal
1108+ 2D40             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 2D40             >
1108+ 2D40             >Dict_Ptr        defl    $
1108+ 2D40             >
1108+ 2D40             >//              ______________________________________________________________________
1108+ 2D40             >//              Heap part
1108+ 2D40             >
1108+ 2D40             >
1108+ 2D40             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E7FF             >
1108+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E7FF             >Latest_Definition defl  Heap_Ptr
1108+ E7FF             >
1108+ E7FF             >                // dummy db directives used to calculate length of namec
1108+ E7FF 45 52 41 53 >                db      "ERASE"
1108+ E803 45          >
1108+ E804             >len_NFA         defl    $ - temp_NFA
1108+ E804             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E7FF             >
1108+ E7FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E800 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E804 45          >
1108+ E805             >                org     $-1                 // alter last byte of Name just above to set
1108+ E804 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E805             >
1108+ E805 F6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E807             >Prev_Ptr        defl    Heap_Ptr
1108+ E807             >
1108+ E807             >mirror_Ptr      defl    $
1108+ E807             >
1108+ E807 42 2D       >                dw      Dict_Ptr + 2        // xt
1108+ E809             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E809             >
1108+ E809             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E809             >
1108+ E809             >//              ______________________________________________________________________
1108+ E809             >//              Dictionary part
1108+ E809             >
1108+ E809             >                org     Dict_Ptr
1108+ 2D40             >
1108+ 2D40 07 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 2D42             >
1108+ 2D42             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 2D42 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 2D45             >
1108+ 2D45             >
1108+ 2D45             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 2D45             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 2D45             >
1108+ 2D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 2D45 37 27 30 2D                  dw      ZERO, FILL              // 0 fill
1110+ 2D49 F5 24                        dw      EXIT                    // ;
1111+ 2D4B
1112+ 2D4B              //  ______________________________________________________________________
1113+ 2D4B              //
1114+ 2D4B              // blank        a n --
1115+ 2D4B              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 2D4B                              Colon_Def BLANK, "BLANK", is_normal
1116+ 2D4B             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 2D4B             >
1116+ 2D4B             >Dict_Ptr        defl    $
1116+ 2D4B             >
1116+ 2D4B             >//              ______________________________________________________________________
1116+ 2D4B             >//              Heap part
1116+ 2D4B             >
1116+ 2D4B             >
1116+ 2D4B             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E809             >
1116+ E809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E809             >Latest_Definition defl  Heap_Ptr
1116+ E809             >
1116+ E809             >                // dummy db directives used to calculate length of namec
1116+ E809 42 4C 41 4E >                db      "BLANK"
1116+ E80D 4B          >
1116+ E80E             >len_NFA         defl    $ - temp_NFA
1116+ E80E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E809             >
1116+ E809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E80E 4B          >
1116+ E80F             >                org     $-1                 // alter last byte of Name just above to set
1116+ E80E CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E80F             >
1116+ E80F FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E811             >Prev_Ptr        defl    Heap_Ptr
1116+ E811             >
1116+ E811             >mirror_Ptr      defl    $
1116+ E811             >
1116+ E811 4D 2D       >                dw      Dict_Ptr + 2        // xt
1116+ E813             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E813             >
1116+ E813             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E813             >
1116+ E813             >//              ______________________________________________________________________
1116+ E813             >//              Dictionary part
1116+ E813             >
1116+ E813             >                org     Dict_Ptr
1116+ 2D4B             >
1116+ 2D4B 11 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 2D4D             >
1116+ 2D4D             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 2D4D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 2D50             >
1116+ 2D50             >
1116+ 2D50             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 2D50             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 2D50             >
1116+ 2D50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 2D50 5A 27 30 2D                  dw      BL, FILL                // bl fill
1118+ 2D54 F5 24                        dw      EXIT                    // ;
1119+ 2D56
1120+ 2D56              //  ______________________________________________________________________
1121+ 2D56              //
1122+ 2D56              // hold         c --
1123+ 2D56              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 2D56                              Colon_Def HOLD, "HOLD", is_normal
1124+ 2D56             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 2D56             >
1124+ 2D56             >Dict_Ptr        defl    $
1124+ 2D56             >
1124+ 2D56             >//              ______________________________________________________________________
1124+ 2D56             >//              Heap part
1124+ 2D56             >
1124+ 2D56             >
1124+ 2D56             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E813             >
1124+ E813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E813             >Latest_Definition defl  Heap_Ptr
1124+ E813             >
1124+ E813             >                // dummy db directives used to calculate length of namec
1124+ E813 48 4F 4C 44 >                db      "HOLD"
1124+ E817             >len_NFA         defl    $ - temp_NFA
1124+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E813             >
1124+ E813 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E814 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E818             >                org     $-1                 // alter last byte of Name just above to set
1124+ E817 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E818             >
1124+ E818 09 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81A             >Prev_Ptr        defl    Heap_Ptr
1124+ E81A             >
1124+ E81A             >mirror_Ptr      defl    $
1124+ E81A             >
1124+ E81A 58 2D       >                dw      Dict_Ptr + 2        // xt
1124+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81C             >
1124+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81C             >
1124+ E81C             >//              ______________________________________________________________________
1124+ E81C             >//              Dictionary part
1124+ E81C             >
1124+ E81C             >                org     Dict_Ptr
1124+ 2D56             >
1124+ 2D56 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 2D58             >
1124+ 2D58             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 2D58 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 2D5B             >
1124+ 2D5B             >
1124+ 2D5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 2D5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 2D5B             >
1124+ 2D5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 2D5B 53 27                        dw      NEG_ONE                 // -1
1126+ 2D5D 26 28 27 26                  dw      HLD, PLUSSTORE          // hld +!
1127+ 2D61 26 28 3F 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 2D65 5D 26
1128+ 2D67 F5 24                        dw      EXIT                    // ;
1129+ 2D69
1130+ 2D69              //  ______________________________________________________________________
1131+ 2D69              //
1132+ 2D69              // pad         -- a
1133+ 2D69              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 2D69                              Colon_Def PAD, "PAD", is_normal
1134+ 2D69             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 2D69             >
1134+ 2D69             >Dict_Ptr        defl    $
1134+ 2D69             >
1134+ 2D69             >//              ______________________________________________________________________
1134+ 2D69             >//              Heap part
1134+ 2D69             >
1134+ 2D69             >
1134+ 2D69             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81C             >
1134+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81C             >Latest_Definition defl  Heap_Ptr
1134+ E81C             >
1134+ E81C             >                // dummy db directives used to calculate length of namec
1134+ E81C 50 41 44    >                db      "PAD"
1134+ E81F             >len_NFA         defl    $ - temp_NFA
1134+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81C             >
1134+ E81C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E81D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E820             >                org     $-1                 // alter last byte of Name just above to set
1134+ E81F C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E820             >
1134+ E820 13 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E822             >Prev_Ptr        defl    Heap_Ptr
1134+ E822             >
1134+ E822             >mirror_Ptr      defl    $
1134+ E822             >
1134+ E822 6B 2D       >                dw      Dict_Ptr + 2        // xt
1134+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E824             >
1134+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E824             >
1134+ E824             >//              ______________________________________________________________________
1134+ E824             >//              Dictionary part
1134+ E824             >
1134+ E824             >                org     Dict_Ptr
1134+ 2D69             >
1134+ 2D69 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 2D6B             >
1134+ 2D6B             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 2D6B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 2D6E             >
1134+ 2D6E             >
1134+ 2D6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 2D6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 2D6E             >
1134+ 2D6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 2D6E 5C 28                        dw      HERE                    // here
1136+ 2D70 3D 20 44 00                  dw      LIT, 68                 // 68
1137+ 2D74 48 25                        dw      PLUS                    // +
1138+ 2D76 F5 24                        dw      EXIT                    // ;
1139+ 2D78
1140+ 2D78              //  ______________________________________________________________________
1141+ 2D78              //
1142+ 2D78              // word         c -- a
1143+ 2D78              // reads characters from input streams until it encouners a c delimiter.
1144+ 2D78              // Stores that packet so it starts from HERE
1145+ 2D78              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 2D78              // Other occurrences of c are ignored.
1147+ 2D78              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 2D78              // Otherwise text is taken from the disk-block given by BLK.
1149+ 2D78              // "in" variable is incremented of the number of character read.
1150+ 2D78              // The number of characters read is given by ENCLOSE.
1151+ 2D78                              Colon_Def WORD, "WORD", is_normal
1151+ 2D78             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 2D78             >
1151+ 2D78             >Dict_Ptr        defl    $
1151+ 2D78             >
1151+ 2D78             >//              ______________________________________________________________________
1151+ 2D78             >//              Heap part
1151+ 2D78             >
1151+ 2D78             >
1151+ 2D78             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E824             >
1151+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E824             >Latest_Definition defl  Heap_Ptr
1151+ E824             >
1151+ E824             >                // dummy db directives used to calculate length of namec
1151+ E824 57 4F 52 44 >                db      "WORD"
1151+ E828             >len_NFA         defl    $ - temp_NFA
1151+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E824             >
1151+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E825 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E829             >                org     $-1                 // alter last byte of Name just above to set
1151+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E829             >
1151+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82B             >Prev_Ptr        defl    Heap_Ptr
1151+ E82B             >
1151+ E82B             >mirror_Ptr      defl    $
1151+ E82B             >
1151+ E82B 7A 2D       >                dw      Dict_Ptr + 2        // xt
1151+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E82D             >
1151+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E82D             >
1151+ E82D             >//              ______________________________________________________________________
1151+ E82D             >//              Dictionary part
1151+ E82D             >
1151+ E82D             >                org     Dict_Ptr
1151+ 2D78             >
1151+ 2D78 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 2D7A             >
1151+ 2D7A             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 2D7A CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 2D7D             >
1151+ 2D7D             >
1151+ 2D7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 2D7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 2D7D             >
1151+ 2D7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 2D7D D8 27 3F 26                  dw      BLK, FETCH              // blk @
1153+ 2D81                                                              // if
1154+ 2D81 8F 20                        dw      ZBRANCH
1155+ 2D83 0C 00                        dw      Word_Else - $
1156+ 2D85 D8 27 3F 26                  dw          BLK, FETCH          //      blk @
1157+ 2D89 4D 37                        dw          BLOCK               //      block ( forward )
1158+ 2D8B                                                              // else
1159+ 2D8B 82 20                        dw      BRANCH
1160+ 2D8D 06 00                        dw      Word_Endif - $
1161+ 2D8F              Word_Else:
1162+ 2D8F 9C 27 3F 26                  dw         TIB, FETCH           //      tib @
1163+ 2D93              Word_Endif:                                     // endif
1164+ 2D93 DE 27 3F 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 2D97 48 25
1165+ 2D99 C7 25 C3 21                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 2D9D 5C 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 2DA1 22 00 4D 2D
1167+ 2DA5 DE 27 27 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 2DA9 AA 25 9B 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 2DAD FF 24
1169+ 2DAF 15 25 5C 28                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 2DB3 5D 26
1170+ 2DB5 48 25                        dw      PLUS                    // +
1171+ 2DB7 5C 28 61 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 2DBB 0A 25
1172+ 2DBD 36 24                        dw      CMOVE                   // cmove
1173+ 2DBF 5C 28                        dw      HERE                    // here
1174+ 2DC1 F5 24                        dw      EXIT                    // ;
1175+ 2DC3
1176+ 2DC3              //  ______________________________________________________________________
1177+ 2DC3              //
1178+ 2DC3              // (.")         --
1179+ 2DC3              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 2DC3                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 2DC3             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 2DC3             >
1180+ 2DC3             >Dict_Ptr        defl    $
1180+ 2DC3             >
1180+ 2DC3             >//              ______________________________________________________________________
1180+ 2DC3             >//              Heap part
1180+ 2DC3             >
1180+ 2DC3             >
1180+ 2DC3             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E82D             >
1180+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E82D             >Latest_Definition defl  Heap_Ptr
1180+ E82D             >
1180+ E82D             >                // dummy db directives used to calculate length of namec
1180+ E82D 28 2E 22 29 >                db      '(.")'
1180+ E831             >len_NFA         defl    $ - temp_NFA
1180+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E82D             >
1180+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E82E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E832             >                org     $-1                 // alter last byte of Name just above to set
1180+ E831 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E832             >
1180+ E832 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E834             >Prev_Ptr        defl    Heap_Ptr
1180+ E834             >
1180+ E834             >mirror_Ptr      defl    $
1180+ E834             >
1180+ E834 C5 2D       >                dw      Dict_Ptr + 2        // xt
1180+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E836             >
1180+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E836             >
1180+ E836             >//              ______________________________________________________________________
1180+ E836             >//              Dictionary part
1180+ E836             >
1180+ E836             >                org     Dict_Ptr
1180+ 2DC3             >
1180+ 2DC3 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 2DC5             >
1180+ 2DC5             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 2DC5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 2DC8             >
1180+ 2DC8             >
1180+ 2DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 2DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 2DC8             >
1180+ 2DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 2DC8 15 25 D4 2B                  dw      R_OP, COUNT             // r count
1182+ 2DCC CE 25 61 25                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 2DD0 0A 25 48 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 2DD4 FF 24
1184+ 2DD6 28 2C                        dw      TYPE                    // type
1185+ 2DD8 F5 24                        dw      EXIT                    // ;
1186+ 2DDA
1187+ 2DDA              //  ______________________________________________________________________
1188+ 2DDA              //
1189+ 2DDA              // char         -- c
1190+ 2DDA              // get first character from next input word
1191+ 2DDA                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 2DDA             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 2DDA             >
1191+ 2DDA             >Dict_Ptr        defl    $
1191+ 2DDA             >
1191+ 2DDA             >//              ______________________________________________________________________
1191+ 2DDA             >//              Heap part
1191+ 2DDA             >
1191+ 2DDA             >
1191+ 2DDA             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E836             >
1191+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E836             >Latest_Definition defl  Heap_Ptr
1191+ E836             >
1191+ E836             >                // dummy db directives used to calculate length of namec
1191+ E836 43 48 41 52 >                db      "CHAR"
1191+ E83A             >len_NFA         defl    $ - temp_NFA
1191+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E836             >
1191+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E837 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83A D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83B             >
1191+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83D             >Prev_Ptr        defl    Heap_Ptr
1191+ E83D             >
1191+ E83D             >mirror_Ptr      defl    $
1191+ E83D             >
1191+ E83D DC 2D       >                dw      Dict_Ptr + 2        // xt
1191+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E83F             >
1191+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E83F             >
1191+ E83F             >//              ______________________________________________________________________
1191+ E83F             >//              Dictionary part
1191+ E83F             >
1191+ E83F             >                org     Dict_Ptr
1191+ 2DDA             >
1191+ 2DDA 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 2DDC             >
1191+ 2DDC             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 2DDC CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 2DDF             >
1191+ 2DDF             >
1191+ 2DDF             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 2DDF             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 2DDF             >
1191+ 2DDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 2DDF 5A 27 7A 2D                  dw      BL, WORD                // bl word
1193+ 2DE3 61 25 54 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 2DE7 F5 24                        dw      EXIT                    // ;
1195+ 2DE9
1196+ 2DE9              //  ______________________________________________________________________
1197+ 2DE9              //
1198+ 2DE9              // ,"           --
1199+ 2DE9              // compiles a string terminated by " as a counted string from next input stream
1200+ 2DE9                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 2DE9             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 2DE9             >
1200+ 2DE9             >Dict_Ptr        defl    $
1200+ 2DE9             >
1200+ 2DE9             >//              ______________________________________________________________________
1200+ 2DE9             >//              Heap part
1200+ 2DE9             >
1200+ 2DE9             >
1200+ 2DE9             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E83F             >
1200+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E83F             >Latest_Definition defl  Heap_Ptr
1200+ E83F             >
1200+ E83F             >                // dummy db directives used to calculate length of namec
1200+ E83F 2C 22       >                db      ',"'
1200+ E841             >len_NFA         defl    $ - temp_NFA
1200+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E83F             >
1200+ E83F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E840 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E842             >                org     $-1                 // alter last byte of Name just above to set
1200+ E841 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E842             >
1200+ E842 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E844             >Prev_Ptr        defl    Heap_Ptr
1200+ E844             >
1200+ E844             >mirror_Ptr      defl    $
1200+ E844             >
1200+ E844 EB 2D       >                dw      Dict_Ptr + 2        // xt
1200+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E846             >
1200+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E846             >
1200+ E846             >//              ______________________________________________________________________
1200+ E846             >//              Dictionary part
1200+ E846             >
1200+ E846             >                org     Dict_Ptr
1200+ 2DE9             >
1200+ 2DE9 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 2DEB             >
1200+ 2DEB             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 2DEB CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 2DEE             >
1200+ 2DEE             >
1200+ 2DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 2DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 2DEE             >
1200+ 2DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 2DEE 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 2DF2 7A 2D                        dw      WORD                    // word
1203+ 2DF4 54 26 61 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 2DF8 67 28                        dw      ALLOT                   // allot
1205+ 2DFA 37 27 81 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 2DFE F5 24                        dw      EXIT
1207+ 2E00
1208+ 2E00              //  ______________________________________________________________________
1209+ 2E00              //
1210+ 2E00              // .c           c --
1211+ 2E00              // intermediate general purpose string builder, used by ." and .(
1212+ 2E00                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 2E00             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 2E00             >
1212+ 2E00             >Dict_Ptr        defl    $
1212+ 2E00             >
1212+ 2E00             >//              ______________________________________________________________________
1212+ 2E00             >//              Heap part
1212+ 2E00             >
1212+ 2E00             >
1212+ 2E00             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E846             >
1212+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E846             >Latest_Definition defl  Heap_Ptr
1212+ E846             >
1212+ E846             >                // dummy db directives used to calculate length of namec
1212+ E846 2E 43       >                db      ".C"
1212+ E848             >len_NFA         defl    $ - temp_NFA
1212+ E848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E846             >
1212+ E846 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E847 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E849             >                org     $-1                 // alter last byte of Name just above to set
1212+ E848 C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E849             >
1212+ E849 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84B             >Prev_Ptr        defl    Heap_Ptr
1212+ E84B             >
1212+ E84B             >mirror_Ptr      defl    $
1212+ E84B             >
1212+ E84B 02 2E       >                dw      Dict_Ptr + 2        // xt
1212+ E84D             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E84D             >
1212+ E84D             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E84D             >
1212+ E84D             >//              ______________________________________________________________________
1212+ E84D             >//              Dictionary part
1212+ E84D             >
1212+ E84D             >                org     Dict_Ptr
1212+ 2E00             >
1212+ 2E00 4B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 2E02             >
1212+ 2E02             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 2E02 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 2E05             >
1212+ 2E05             >
1212+ 2E05             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 2E05             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 2E05             >
1212+ 2E05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 2E05 02 28 3F 26                  dw      STATE, FETCH            // state @
1214+ 2E09                                                              // if
1215+ 2E09 8F 20                        dw      ZBRANCH
1216+ 2E0B 12 00                        dw      Dot_C_Else - $
1217+ 2E0D 08 2B C5 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 2E11 7A 2D 54 26                  dw          WORD, CFETCH        //      word c@
1219+ 2E15 61 25 67 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 2E19                                                              // else
1221+ 2E19 82 20                        dw      BRANCH
1222+ 2E1B 08 00                        dw      Dot_C_Endif - $
1223+ 2E1D              Dot_C_Else:
1224+ 2E1D 7A 2D D4 2B                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 2E21 28 2C
1225+ 2E23              Dot_C_Endif:                                    // endif
1226+ 2E23 F5 24                        dw      EXIT                    ;
1227+ 2E25
1228+ 2E25              //  ______________________________________________________________________
1229+ 2E25              //
1230+ 2E25              // ."           c --
1231+ 2E25                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 2E25             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 2E25             >
1231+ 2E25             >Dict_Ptr        defl    $
1231+ 2E25             >
1231+ 2E25             >//              ______________________________________________________________________
1231+ 2E25             >//              Heap part
1231+ 2E25             >
1231+ 2E25             >
1231+ 2E25             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E84D             >
1231+ E84D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E84D             >Latest_Definition defl  Heap_Ptr
1231+ E84D             >
1231+ E84D             >                // dummy db directives used to calculate length of namec
1231+ E84D 2E 22       >                db      '."'
1231+ E84F             >len_NFA         defl    $ - temp_NFA
1231+ E84F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E84D             >
1231+ E84D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E84E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E850             >                org     $-1                 // alter last byte of Name just above to set
1231+ E84F A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E850             >
1231+ E850 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E852             >Prev_Ptr        defl    Heap_Ptr
1231+ E852             >
1231+ E852             >mirror_Ptr      defl    $
1231+ E852             >
1231+ E852 27 2E       >                dw      Dict_Ptr + 2        // xt
1231+ E854             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E854             >
1231+ E854             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E854             >
1231+ E854             >//              ______________________________________________________________________
1231+ E854             >//              Dictionary part
1231+ E854             >
1231+ E854             >                org     Dict_Ptr
1231+ 2E25             >
1231+ 2E25 52 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 2E27             >
1231+ 2E27             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 2E27 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 2E2A             >
1231+ 2E2A             >
1231+ 2E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 2E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 2E2A             >
1231+ 2E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 2E2A 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 2E2E 02 2E                        dw      DOT_C                   // [compile] .c
1234+ 2E30 F5 24                        dw      EXIT                    // ; immediate
1235+ 2E32
1236+ 2E32              //  ______________________________________________________________________
1237+ 2E32              //
1238+ 2E32              // .(           c --
1239+ 2E32                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 2E32             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 2E32             >
1239+ 2E32             >Dict_Ptr        defl    $
1239+ 2E32             >
1239+ 2E32             >//              ______________________________________________________________________
1239+ 2E32             >//              Heap part
1239+ 2E32             >
1239+ 2E32             >
1239+ 2E32             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E854             >
1239+ E854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E854             >Latest_Definition defl  Heap_Ptr
1239+ E854             >
1239+ E854             >                // dummy db directives used to calculate length of namec
1239+ E854 2E 28       >                db      ".("
1239+ E856             >len_NFA         defl    $ - temp_NFA
1239+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E854             >
1239+ E854 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E855 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E857             >                org     $-1                 // alter last byte of Name just above to set
1239+ E856 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E857             >
1239+ E857 4D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E859             >Prev_Ptr        defl    Heap_Ptr
1239+ E859             >
1239+ E859             >mirror_Ptr      defl    $
1239+ E859             >
1239+ E859 34 2E       >                dw      Dict_Ptr + 2        // xt
1239+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85B             >
1239+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85B             >
1239+ E85B             >//              ______________________________________________________________________
1239+ E85B             >//              Dictionary part
1239+ E85B             >
1239+ E85B             >                org     Dict_Ptr
1239+ 2E32             >
1239+ 2E32 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 2E34             >
1239+ 2E34             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 2E34 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 2E37             >
1239+ 2E37             >
1239+ 2E37             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 2E37             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 2E37             >
1239+ 2E37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 2E37 3D 20 29 00                  dw      LIT, ")"                // [char] )
1241+ 2E3B 02 2E                        dw      DOT_C                   // [compile] .c
1242+ 2E3D F5 24                        dw      EXIT                    // ; immediate
1243+ 2E3F
1244+ 2E3F              //  ______________________________________________________________________
1245+ 2E3F              //
1246+ 2E3F              // (sgn)        a -- a f
1247+ 2E3F              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 2E3F              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 2E3F              // called by NUMBER and (EXP)
1250+ 2E3F                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 2E3F             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 2E3F             >
1250+ 2E3F             >Dict_Ptr        defl    $
1250+ 2E3F             >
1250+ 2E3F             >//              ______________________________________________________________________
1250+ 2E3F             >//              Heap part
1250+ 2E3F             >
1250+ 2E3F             >
1250+ 2E3F             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85B             >
1250+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85B             >Latest_Definition defl  Heap_Ptr
1250+ E85B             >
1250+ E85B             >                // dummy db directives used to calculate length of namec
1250+ E85B 28 53 47 4E >                db      "(SGN)"
1250+ E85F 29          >
1250+ E860             >len_NFA         defl    $ - temp_NFA
1250+ E860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85B             >
1250+ E85B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E860 29          >
1250+ E861             >                org     $-1                 // alter last byte of Name just above to set
1250+ E860 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E861             >
1250+ E861 54 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E863             >Prev_Ptr        defl    Heap_Ptr
1250+ E863             >
1250+ E863             >mirror_Ptr      defl    $
1250+ E863             >
1250+ E863 41 2E       >                dw      Dict_Ptr + 2        // xt
1250+ E865             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E865             >
1250+ E865             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E865             >
1250+ E865             >//              ______________________________________________________________________
1250+ E865             >//              Dictionary part
1250+ E865             >
1250+ E865             >                org     Dict_Ptr
1250+ 2E3F             >
1250+ 2E3F 63 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 2E41             >
1250+ 2E41             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 2E41 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 2E44             >
1250+ 2E44             >
1250+ 2E44             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 2E44             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 2E44             >
1250+ 2E44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 2E44 CE 25 61 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 2E48 54 26
1252+ 2E4A CE 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 2E4E 2D 00 A7 28
1253+ 2E52                                                              // if
1254+ 2E52 8F 20                        dw      ZBRANCH
1255+ 2E54 12 00                        dw      CSgn_Else_0 - $
1256+ 2E56 B3 25                        dw          DROP                //      drop
1257+ 2E58 61 25                        dw          ONE_PLUS            //      1+
1258+ 2E5A 3E 27 0E 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 2E5E 27 26
1259+ 2E60 3E 27                        dw          ONE                 //      1
1260+ 2E62                                                              // else
1261+ 2E62 82 20                        dw      BRANCH
1262+ 2E64 16 00                        dw      CSgn_Endif_0 - $
1263+ 2E66              CSgn_Else_0:
1264+ 2E66 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 2E6A A7 28
1265+ 2E6C                                                              //      if
1266+ 2E6C 8F 20                        dw          ZBRANCH
1267+ 2E6E 0A 00                        dw          CSgn_Endif_1 - $
1268+ 2E70 61 25                        dw              ONE_PLUS        //          1+
1269+ 2E72 3E 27 0E 28                  dw              ONE, DPL        //          1 dpl
1270+ 2E76 27 26                        dw              PLUSSTORE       //          +!
1271+ 2E78              CSgn_Endif_1                                    //      endif
1272+ 2E78 37 27                        dw          ZERO                //      0
1273+ 2E7A              CSgn_Endif_0:                                   // endif
1274+ 2E7A F5 24                        dw      EXIT
1275+ 2E7C
1276+ 2E7C              //  ______________________________________________________________________
1277+ 2E7C              //
1278+ 2E7C              // (number)     d a -- d1 a1
1279+ 2E7C              // using the current BASE parse characters stored in address a
1280+ 2E7C              // accumulating a double precision integer d
1281+ 2E7C              // the process stops at the first not-convertible character
1282+ 2E7C              // A double-number is kept in CPU registers as HLDE.
1283+ 2E7C              // On the stack a double number is treated as two single numbers
1284+ 2E7C              // where HL is on the top of the stack and DE is the second from top,
1285+ 2E7C              // so in the stack memory it appears as LHED.
1286+ 2E7C              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 2E7C                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 2E7C             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 2E7C             >
1287+ 2E7C             >Dict_Ptr        defl    $
1287+ 2E7C             >
1287+ 2E7C             >//              ______________________________________________________________________
1287+ 2E7C             >//              Heap part
1287+ 2E7C             >
1287+ 2E7C             >
1287+ 2E7C             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E865             >
1287+ E865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E865             >Latest_Definition defl  Heap_Ptr
1287+ E865             >
1287+ E865             >                // dummy db directives used to calculate length of namec
1287+ E865 28 4E 55 4D >                db      "(NUMBER)"
1287+ E869 42 45 52 29 >
1287+ E86D             >len_NFA         defl    $ - temp_NFA
1287+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E865             >
1287+ E865 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E866 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86A 42 45 52 29 >
1287+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1287+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E86E             >
1287+ E86E 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E870             >Prev_Ptr        defl    Heap_Ptr
1287+ E870             >
1287+ E870             >mirror_Ptr      defl    $
1287+ E870             >
1287+ E870 7E 2E       >                dw      Dict_Ptr + 2        // xt
1287+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E872             >
1287+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E872             >
1287+ E872             >//              ______________________________________________________________________
1287+ E872             >//              Dictionary part
1287+ E872             >
1287+ E872             >                org     Dict_Ptr
1287+ 2E7C             >
1287+ 2E7C 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 2E7E             >
1287+ 2E7E             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 2E7E CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 2E81             >
1287+ 2E81             >
1287+ 2E81             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 2E81             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 2E81             >
1287+ 2E81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 2E81                                                              // begin
1289+ 2E81              CNumber_Begin:
1290+ 2E81 61 25                        dw          ONE_PLUS            //      1+
1291+ 2E83 CE 25 FF 24                  dw          DUP, TO_R           //      dup >r
1292+ 2E87 54 26                        dw          CFETCH              //      @
1293+ 2E89 08 28 3F 26                  dw          BASE, FETCH         //      base @
1294+ 2E8D E7 20                        dw          DIGIT               //      digit
1295+ 2E8F                                                              // while
1296+ 2E8F 8F 20                        dw      ZBRANCH
1297+ 2E91 2C 00                        dw      CNumber_While_end - $
1298+ 2E93 C7 25                        dw          SWAP                //      swap
1299+ 2E95 08 28 3F 26                  dw          BASE, FETCH         //      base @
1300+ 2E99 5A 24                        dw          UM_MUL              //      um*
1301+ 2E9B B3 25 D5 25                  dw          DROP, ROT           //      drop rot
1302+ 2E9F 08 28 3F 26                  dw          BASE, FETCH         //      base @
1303+ 2EA3 5A 24                        dw          UM_MUL              //      um*
1304+ 2EA5 52 25                        dw          DPLUS               //      d+
1305+ 2EA7 0E 28 3F 26                  dw          DPL, FETCH          //      dpl @
1306+ 2EAB 61 25                        dw          ONE_PLUS            //      1+
1307+ 2EAD                                                              //      if
1308+ 2EAD 8F 20                        dw          ZBRANCH
1309+ 2EAF 08 00                        dw          CNumber_Endif - $
1310+ 2EB1 3E 27 0E 28                  dw              ONE, DPL        //          1 dpl
1311+ 2EB5 27 26                        dw              PLUSSTORE       //          +!
1312+ 2EB7              CNumber_Endif:                                  //      endif
1313+ 2EB7 0A 25                        dw             R_TO             //      r>  ( balance rp )
1314+ 2EB9 82 20                        dw      BRANCH
1315+ 2EBB C6 FF                        dw      CNumber_Begin - $
1316+ 2EBD              CNumber_While_end:                              // repeat
1317+ 2EBD 0A 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 2EBF F5 24                        dw      EXIT                    // ;
1319+ 2EC1
1320+ 2EC1              //  ______________________________________________________________________
1321+ 2EC1              //
1322+ 2EC1              // (prefix)
1323+ 2EC1                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 2EC1             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 2EC1             >
1323+ 2EC1             >Dict_Ptr        defl    $
1323+ 2EC1             >
1323+ 2EC1             >//              ______________________________________________________________________
1323+ 2EC1             >//              Heap part
1323+ 2EC1             >
1323+ 2EC1             >
1323+ 2EC1             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E872             >
1323+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E872             >Latest_Definition defl  Heap_Ptr
1323+ E872             >
1323+ E872             >                // dummy db directives used to calculate length of namec
1323+ E872 28 50 52 45 >                db      "(PREFIX)"
1323+ E876 46 49 58 29 >
1323+ E87A             >len_NFA         defl    $ - temp_NFA
1323+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E872             >
1323+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E873 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E877 46 49 58 29 >
1323+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87B             >
1323+ E87B 65 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E87D             >Prev_Ptr        defl    Heap_Ptr
1323+ E87D             >
1323+ E87D             >mirror_Ptr      defl    $
1323+ E87D             >
1323+ E87D C3 2E       >                dw      Dict_Ptr + 2        // xt
1323+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E87F             >
1323+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E87F             >
1323+ E87F             >//              ______________________________________________________________________
1323+ E87F             >//              Dictionary part
1323+ E87F             >
1323+ E87F             >                org     Dict_Ptr
1323+ 2EC1             >
1323+ 2EC1 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 2EC3             >
1323+ 2EC3             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 2EC3 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 2EC6             >
1323+ 2EC6             >
1323+ 2EC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 2EC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 2EC6             >
1323+ 2EC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 2EC6 CE 25 61 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 2ECA 54 26
1325+ 2ECC CE 25 FF 24                  dw      DUP, TO_R               // dup >r
1326+ 2ED0 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 2ED4 A7 28
1327+ 2ED6                                                              // if
1328+ 2ED6 8F 20                        dw      ZBRANCH
1329+ 2ED8 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 2EDA 61 25                        dw          ONE_PLUS            //      1+
1331+ 2EDC 3D 20 10 00                  dw          LIT, 16
1332+ 2EE0 08 28 49 26                  dw          BASE, STORE         //      16 base !
1333+ 2EE4              CPrefix_Endif_0:                                // endif
1334+ 2EE4 0A 25                        dw      R_TO                    // r>
1335+ 2EE6 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 2EEA A7 28
1336+ 2EEC                                                              // if
1337+ 2EEC 8F 20                        dw      ZBRANCH
1338+ 2EEE 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 2EF0 61 25                        dw          ONE_PLUS            //      1+
1340+ 2EF2 45 27                        dw          TWO
1341+ 2EF4 08 28 49 26                  dw          BASE, STORE         //      2 base !
1342+ 2EF8              CPrefix_Endif_1:                                // endif
1343+ 2EF8 F5 24                        dw      EXIT
1344+ 2EFA
1345+ 2EFA              //  ______________________________________________________________________
1346+ 2EFA
1347+ 2EFA                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 2EFA             >
1347+ 2EFA             >Dict_Ptr        defl    $
1347+ 2EFA             >
1347+ 2EFA             >//              ______________________________________________________________________
1347+ 2EFA             >//              Heap part
1347+ 2EFA             >
1347+ 2EFA             >
1347+ 2EFA             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E87F             >
1347+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E87F             >Latest_Definition defl  Heap_Ptr
1347+ E87F             >
1347+ E87F             >                // dummy db directives used to calculate length of namec
1347+ E87F 50 44 4F 4D >                db      "PDOM"
1347+ E883             >len_NFA         defl    $ - temp_NFA
1347+ E883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E87F             >
1347+ E87F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E880 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E884             >                org     $-1                 // alter last byte of Name just above to set
1347+ E883 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E884             >
1347+ E884 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E886             >Prev_Ptr        defl    Heap_Ptr
1347+ E886             >
1347+ E886             >mirror_Ptr      defl    $
1347+ E886             >
1347+ E886 FC 2E       >                dw      Dict_Ptr + 2        // xt
1347+ E888             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E888             >
1347+ E888             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E888             >
1347+ E888             >//              ______________________________________________________________________
1347+ E888             >//              Dictionary part
1347+ E888             >
1347+ E888             >                org     Dict_Ptr
1347+ 2EFA             >
1347+ 2EFA 86 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 2EFC             >
1347+ 2EFC             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 2EFC CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 2EFF             >
1347+ 2EFF             >
1347+ 2EFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 2EFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 2EFF             >
1347+ 2EFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 2EFF 2C 2F 2D 3A                  db ',/-:'
1349+ 2F03
1350+ 2F03                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 2F03             >
1350+ 2F03             >Dict_Ptr        defl    $
1350+ 2F03             >
1350+ 2F03             >//              ______________________________________________________________________
1350+ 2F03             >//              Heap part
1350+ 2F03             >
1350+ 2F03             >
1350+ 2F03             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E888             >
1350+ E888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E888             >Latest_Definition defl  Heap_Ptr
1350+ E888             >
1350+ E888             >                // dummy db directives used to calculate length of namec
1350+ E888 50 43 44 4D >                db      "PCDM"
1350+ E88C             >len_NFA         defl    $ - temp_NFA
1350+ E88C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E888             >
1350+ E888 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E889 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E88D             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88C CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E88D             >
1350+ E88D 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E88F             >Prev_Ptr        defl    Heap_Ptr
1350+ E88F             >
1350+ E88F             >mirror_Ptr      defl    $
1350+ E88F             >
1350+ E88F 05 2F       >                dw      Dict_Ptr + 2        // xt
1350+ E891             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E891             >
1350+ E891             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E891             >
1350+ E891             >//              ______________________________________________________________________
1350+ E891             >//              Dictionary part
1350+ E891             >
1350+ E891             >                org     Dict_Ptr
1350+ 2F03             >
1350+ 2F03 8F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 2F05             >
1350+ 2F05             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 2F05 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 2F08             >
1350+ 2F08             >
1350+ 2F08             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 2F08             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 2F08             >
1350+ 2F08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 2F08 2E 2E 2E 2E                  db '....'
1352+ 2F0C
1353+ 2F0C              //  ______________________________________________________________________
1354+ 2F0C              //
1355+ 2F0C              // number       a -- d
1356+ 2F0C                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 2F0C             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 2F0C             >
1356+ 2F0C             >Dict_Ptr        defl    $
1356+ 2F0C             >
1356+ 2F0C             >//              ______________________________________________________________________
1356+ 2F0C             >//              Heap part
1356+ 2F0C             >
1356+ 2F0C             >
1356+ 2F0C             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E891             >
1356+ E891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E891             >Latest_Definition defl  Heap_Ptr
1356+ E891             >
1356+ E891             >                // dummy db directives used to calculate length of namec
1356+ E891 4E 55 4D 42 >                db      "NUMBER"
1356+ E895 45 52       >
1356+ E897             >len_NFA         defl    $ - temp_NFA
1356+ E897             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E891             >
1356+ E891 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E892 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E896 45 52       >
1356+ E898             >                org     $-1                 // alter last byte of Name just above to set
1356+ E897 D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E898             >
1356+ E898 88 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89A             >Prev_Ptr        defl    Heap_Ptr
1356+ E89A             >
1356+ E89A             >mirror_Ptr      defl    $
1356+ E89A             >
1356+ E89A 0E 2F       >                dw      Dict_Ptr + 2        // xt
1356+ E89C             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89C             >
1356+ E89C             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89C             >
1356+ E89C             >//              ______________________________________________________________________
1356+ E89C             >//              Dictionary part
1356+ E89C             >
1356+ E89C             >                org     Dict_Ptr
1356+ 2F0C             >
1356+ 2F0C 9A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 2F0E             >
1356+ 2F0E             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 2F0E CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 2F11             >
1356+ 2F11             >
1356+ 2F11             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 2F11             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 2F11             >
1356+ 2F11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 2F11 37 27 37 27                  dw      ZERO, ZERO              // 0 0
1358+ 2F15 D5 25                        dw      ROT                     // rot
1359+ 2F17 41 2E FF 24                  dw      CSGN, TO_R              // (sgn) >r
1360+ 2F1B 08 28 3F 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 2F1F FF 24
1361+ 2F21 C3 2E                        dw      CPREFIX                 // (prefix)   // ***
1362+ 2F23 53 27 0E 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 2F27 49 26
1363+ 2F29 7E 2E                        dw      CNUMBER                 // (number)
1364+ 2F2B              Number_Begin:                                   // begin
1365+ 2F2B CE 25 54 26                  dw        DUP, CFETCH             // dup c@
1366+ 2F2F FF 24                        dw        TO_R                    // >r
1367+ 2F31 05 2F FC 2E                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 2F35 3D 20 04 00
1368+ 2F39 0A 25                        dw        R_TO                    // r>
1369+ 2F3B F5 21                        dw        C_MAP                   // (map)
1370+ 2F3D 37 27 C7 25                  dw        ZERO, SWAP              // 0 swap
1371+ 2F41 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 2F45 A7 28
1372+ 2F47
1373+ 2F47 8F 20                        dw        ZBRANCH                 // if
1374+ 2F49 0A 00                        dw        Number_Endif_1 - $
1375+ 2F4B 37 27 0E 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 2F4F 49 26
1376+ 2F51 61 25                        dw          ONE_PLUS                //      1+
1377+ 2F53              Number_Endif_1:                                   // endif
1378+ 2F53
1379+ 2F53 8F 20                        dw      ZBRANCH                // while
1380+ 2F55 08 00                        dw      Number_While_end - $
1381+ 2F57 7E 2E                        dw        CNUMBER                 // (number)
1382+ 2F59 82 20                        dw      BRANCH
1383+ 2F5B D0 FF                        dw      Number_Begin - $
1384+ 2F5D              Number_While_end:                               // repeat
1385+ 2F5D
1386+ 2F5D 54 26 5A 27                  dw      CFETCH, BL              // c@ bl
1387+ 2F61 9B 28 37 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 2F65 98 2A
1388+ 2F67 0A 25 08 28                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 2F6B 49 26
1389+ 2F6D 0A 25                        dw      R_TO                    // r>
1390+ 2F6F                                                              // if
1391+ 2F6F 8F 20                        dw      ZBRANCH
1392+ 2F71 04 00                        dw      Number_Endif_2 - $
1393+ 2F73 97 25                        dw          DMINUS              //      dminus
1394+ 2F75              Number_Endif_2:                                 // endif
1395+ 2F75 F5 24                        dw      EXIT                    // ;
1396+ 2F77
1397+ 2F77              //  ______________________________________________________________________
1398+ 2F77              //
1399+ 2F77              // twofind      a -- d
1400+ 2F77                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 2F77             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 2F77             >
1400+ 2F77             >Dict_Ptr        defl    $
1400+ 2F77             >
1400+ 2F77             >//              ______________________________________________________________________
1400+ 2F77             >//              Heap part
1400+ 2F77             >
1400+ 2F77             >
1400+ 2F77             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89C             >
1400+ E89C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89C             >Latest_Definition defl  Heap_Ptr
1400+ E89C             >
1400+ E89C             >                // dummy db directives used to calculate length of namec
1400+ E89C 32 46 49 4E >                db      "2FIND"
1400+ E8A0 44          >
1400+ E8A1             >len_NFA         defl    $ - temp_NFA
1400+ E8A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89C             >
1400+ E89C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E89D 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A1 44          >
1400+ E8A2             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A1 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A2             >
1400+ E8A2 91 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A4             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A4             >
1400+ E8A4             >mirror_Ptr      defl    $
1400+ E8A4             >
1400+ E8A4 79 2F       >                dw      Dict_Ptr + 2        // xt
1400+ E8A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A6             >
1400+ E8A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A6             >
1400+ E8A6             >//              ______________________________________________________________________
1400+ E8A6             >//              Dictionary part
1400+ E8A6             >
1400+ E8A6             >                org     Dict_Ptr
1400+ 2F77             >
1400+ 2F77 A4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 2F79             >
1400+ 2F79             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 2F79 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 2F7C             >
1400+ 2F7C             >
1400+ 2F7C             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 2F7C             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 2F7C             >
1400+ 2F7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 2F7C FF 24 15 25                  dw      TO_R, R_OP              // >r r@
1402+ 2F80 F6 27 3F 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 2F84 3F 26
1403+ 2F86 55 21                        dw      C_FIND                  // (find)
1404+ 2F88 06 29                        dw      QDUP                    // ?dup
1405+ 2F8A 1A 25                        dw      ZEQUAL                  // 0=
1406+ 2F8C                                                              // if
1407+ 2F8C 8F 20                        dw      ZBRANCH
1408+ 2F8E 24 00                        dw      LFind_Endif - $
1409+ 2F90 15 25                        dw          R_OP                //      r@
1410+ 2F92                              // dw          LATEST               //      latest
1411+ 2F92 FC 27 3F 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 2F96 3F 26
1412+ 2F98 55 21                        dw          C_FIND              //      (find)
1413+ 2F9A
1414+ 2F9A 06 29                            dw      QDUP                    // ?dup
1415+ 2F9C 1A 25                            dw      ZEQUAL                  // 0=
1416+ 2F9E                                                                  // if
1417+ 2F9E 8F 20                            dw      ZBRANCH
1418+ 2FA0 12 00                            dw      LFind_Endif2 - $
1419+ 2FA2 15 25                            dw          R_OP                //      r@
1420+ 2FA4 3D 20 F3 31                      dw          LIT, FORTH, TO_BODY
1420+ 2FA8 17 2A
1421+ 2FAA 77 25 77 25                      dw          CELL_PLUS, CELL_PLUS
1422+ 2FAE 3F 26                            dw          FETCH
1423+ 2FB0 55 21                            dw          C_FIND              //      (find)
1424+ 2FB2              LFind_Endif2:                                    // endif
1425+ 2FB2
1426+ 2FB2
1427+ 2FB2              LFind_Endif:                                    // endif
1428+ 2FB2 0A 25 B3 25                  dw      R_TO, DROP              // r> drop
1429+ 2FB6 F5 24                        dw      EXIT                    // ;
1430+ 2FB8
1431+ 2FB8              //  ______________________________________________________________________
1432+ 2FB8              //
1433+ 2FB8              // -find        a -- d
1434+ 2FB8                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 2FB8             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 2FB8             >
1434+ 2FB8             >Dict_Ptr        defl    $
1434+ 2FB8             >
1434+ 2FB8             >//              ______________________________________________________________________
1434+ 2FB8             >//              Heap part
1434+ 2FB8             >
1434+ 2FB8             >
1434+ 2FB8             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A6             >
1434+ E8A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A6             >Latest_Definition defl  Heap_Ptr
1434+ E8A6             >
1434+ E8A6             >                // dummy db directives used to calculate length of namec
1434+ E8A6 2D 46 49 4E >                db      "-FIND"
1434+ E8AA 44          >
1434+ E8AB             >len_NFA         defl    $ - temp_NFA
1434+ E8AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A6             >
1434+ E8A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8A7 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AB 44          >
1434+ E8AC             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AB C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AC             >
1434+ E8AC 9C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8AE             >Prev_Ptr        defl    Heap_Ptr
1434+ E8AE             >
1434+ E8AE             >mirror_Ptr      defl    $
1434+ E8AE             >
1434+ E8AE BA 2F       >                dw      Dict_Ptr + 2        // xt
1434+ E8B0             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B0             >
1434+ E8B0             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B0             >
1434+ E8B0             >//              ______________________________________________________________________
1434+ E8B0             >//              Dictionary part
1434+ E8B0             >
1434+ E8B0             >                org     Dict_Ptr
1434+ 2FB8             >
1434+ 2FB8 AE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 2FBA             >
1434+ 2FBA             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 2FBA CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 2FBD             >
1434+ 2FBD             >
1434+ 2FBD             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 2FBD             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 2FBD             >
1434+ 2FBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 2FBD 5A 27 7A 2D                  dw      BL, WORD                // bl word
1436+ 2FC1 79 2F                        dw      TWOFIND                 // 2find
1437+ 2FC3 F5 24                        dw      EXIT                    // ;
1438+ 2FC5
1439+ 2FC5              //  ______________________________________________________________________
1440+ 2FC5              //
1441+ 2FC5              // (abort)      --
1442+ 2FC5                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 2FC5             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 2FC5             >
1442+ 2FC5             >Dict_Ptr        defl    $
1442+ 2FC5             >
1442+ 2FC5             >//              ______________________________________________________________________
1442+ 2FC5             >//              Heap part
1442+ 2FC5             >
1442+ 2FC5             >
1442+ 2FC5             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B0             >
1442+ E8B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B0             >Latest_Definition defl  Heap_Ptr
1442+ E8B0             >
1442+ E8B0             >                // dummy db directives used to calculate length of namec
1442+ E8B0 28 41 42 4F >                db      "(ABORT)"
1442+ E8B4 52 54 29    >
1442+ E8B7             >len_NFA         defl    $ - temp_NFA
1442+ E8B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B0             >
1442+ E8B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B1 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B5 52 54 29    >
1442+ E8B8             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8B7 A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8B8             >
1442+ E8B8 A6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BA             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BA             >
1442+ E8BA             >mirror_Ptr      defl    $
1442+ E8BA             >
1442+ E8BA C7 2F       >                dw      Dict_Ptr + 2        // xt
1442+ E8BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BC             >
1442+ E8BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BC             >
1442+ E8BC             >//              ______________________________________________________________________
1442+ E8BC             >//              Dictionary part
1442+ E8BC             >
1442+ E8BC             >                org     Dict_Ptr
1442+ 2FC5             >
1442+ 2FC5 BA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 2FC7             >
1442+ 2FC7             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 2FC7 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 2FCA             >
1442+ 2FCA             >
1442+ 2FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 2FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 2FCA             >
1442+ 2FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 2FCA 5A 32                        dw      ABORT                   // abort
1444+ 2FCC F5 24                        dw      EXIT                    // ;
1445+ 2FCE
1446+ 2FCE              //  ______________________________________________________________________
1447+ 2FCE              //
1448+ 2FCE              // error        n --
1449+ 2FCE              // raise an error
1450+ 2FCE              // if WARNING is 0, prints "MSG#n".
1451+ 2FCE              // if WARNING is 1, prints line n of screen 4.
1452+ 2FCE              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 2FCE              // value can be negative or beyond block 4.
1454+ 2FCE                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 2FCE             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 2FCE             >
1454+ 2FCE             >Dict_Ptr        defl    $
1454+ 2FCE             >
1454+ 2FCE             >//              ______________________________________________________________________
1454+ 2FCE             >//              Heap part
1454+ 2FCE             >
1454+ 2FCE             >
1454+ 2FCE             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BC             >
1454+ E8BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BC             >Latest_Definition defl  Heap_Ptr
1454+ E8BC             >
1454+ E8BC             >                // dummy db directives used to calculate length of namec
1454+ E8BC 45 52 52 4F >                db      "ERROR"
1454+ E8C0 52          >
1454+ E8C1             >len_NFA         defl    $ - temp_NFA
1454+ E8C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BC             >
1454+ E8BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8BD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C1 52          >
1454+ E8C2             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C1 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C2             >
1454+ E8C2 B0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C4             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C4             >
1454+ E8C4             >mirror_Ptr      defl    $
1454+ E8C4             >
1454+ E8C4 D0 2F       >                dw      Dict_Ptr + 2        // xt
1454+ E8C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C6             >
1454+ E8C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C6             >
1454+ E8C6             >//              ______________________________________________________________________
1454+ E8C6             >//              Dictionary part
1454+ E8C6             >
1454+ E8C6             >                org     Dict_Ptr
1454+ 2FCE             >
1454+ 2FCE C4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 2FD0             >
1454+ 2FD0             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 2FD0 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 2FD3             >
1454+ 2FD3             >
1454+ 2FD3             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 2FD3             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 2FD3             >
1454+ 2FD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 2FD3 A8 27 3F 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 2FD7 2D 25
1456+ 2FD9                                                              // if
1457+ 2FD9 8F 20                        dw      ZBRANCH
1458+ 2FDB 04 00                        dw      Error_Endif_1 - $
1459+ 2FDD C7 2F                        dw          CABORT              //      (abort)
1460+ 2FDF              Error_Endif_1:                                  // endif
1461+ 2FDF 5C 28 D4 2B                  dw      HERE, COUNT, TYPE       // here count type
1461+ 2FE3 28 2C
1462+ 2FE5 C5 2D                        dw      C_DOT_QUOTE             // .( ? )
1463+ 2FE7 02 3F 20                     db      2, "? "
1464+ 2FEA 8E 35                        dw      MESSAGE                 // message  ( forward )
1465+ 2FEC 90 27 3F 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 2FF0 E5 24
1466+ 2FF2 D8 27 3F 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 2FF6 06 29
1467+ 2FF8                                                              // if
1468+ 2FF8 8F 20                        dw      ZBRANCH
1469+ 2FFA 08 00                        dw      Error_Endif_2 - $
1470+ 2FFC DE 27 3F 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 3000 C7 25
1471+ 3002              Error_Endif_2:                                  // endif
1472+ 3002 1E 32                        dw      QUIT                    // quit ( forward )
1473+ 3004 F5 24                        dw      EXIT                    // ;
1474+ 3006              //  ______________________________________________________________________
1475+ 3006              //
1476+ 3006              // id.          nfa --
1477+ 3006                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 3006             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 3006             >
1477+ 3006             >Dict_Ptr        defl    $
1477+ 3006             >
1477+ 3006             >//              ______________________________________________________________________
1477+ 3006             >//              Heap part
1477+ 3006             >
1477+ 3006             >
1477+ 3006             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C6             >
1477+ E8C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C6             >Latest_Definition defl  Heap_Ptr
1477+ E8C6             >
1477+ E8C6             >                // dummy db directives used to calculate length of namec
1477+ E8C6 49 44 2E    >                db      "ID."
1477+ E8C9             >len_NFA         defl    $ - temp_NFA
1477+ E8C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C6             >
1477+ E8C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8C7 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CA             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8C9 AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CA             >
1477+ E8CA BC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CC             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CC             >
1477+ E8CC             >mirror_Ptr      defl    $
1477+ E8CC             >
1477+ E8CC 08 30       >                dw      Dict_Ptr + 2        // xt
1477+ E8CE             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8CE             >
1477+ E8CE             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8CE             >
1477+ E8CE             >//              ______________________________________________________________________
1477+ E8CE             >//              Dictionary part
1477+ E8CE             >
1477+ E8CE             >                org     Dict_Ptr
1477+ 3006             >
1477+ 3006 CC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 3008             >
1477+ 3008             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 3008 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 300B             >
1477+ 300B             >
1477+ 300B             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 300B             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 300B             >
1477+ 300B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 300B BC 29                        dw      QTOHEAP
1479+ 300D CE 25 3E 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 3011 38 29
1480+ 3013 61 25                        dw      ONE_PLUS                // 1+
1481+ 3015 AA 25 9B 28                  dw      OVER, SUBTRACT          // over -
1482+ 3019 CE 25 FF 24                  dw      DUP, TO_R               // >r
1483+ 301D 6B 2D C7 25                  dw      PAD, SWAP               // pad swap
1484+ 3021 36 24                        dw      CMOVE                   // cmove
1485+ 3023 6B 2D 61 25                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 3027 0A 25 68 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 302B 28 2C 2D 29                  dw      TYPE, SPACE             // type
1488+ 302F F5 24                        dw      EXIT                    // ;
1489+ 3031
1490+ 3031              //  ______________________________________________________________________
1491+ 3031              //
1492+ 3031              // code         -- cccc
1493+ 3031                              Colon_Def CODE,  "CODE", is_normal
1493+ 3031             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 3031             >
1493+ 3031             >Dict_Ptr        defl    $
1493+ 3031             >
1493+ 3031             >//              ______________________________________________________________________
1493+ 3031             >//              Heap part
1493+ 3031             >
1493+ 3031             >
1493+ 3031             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8CE             >
1493+ E8CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8CE             >Latest_Definition defl  Heap_Ptr
1493+ E8CE             >
1493+ E8CE             >                // dummy db directives used to calculate length of namec
1493+ E8CE 43 4F 44 45 >                db      "CODE"
1493+ E8D2             >len_NFA         defl    $ - temp_NFA
1493+ E8D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8CE             >
1493+ E8CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8CF 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D3             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D2 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D3             >
1493+ E8D3 C6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D5             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D5             >
1493+ E8D5             >mirror_Ptr      defl    $
1493+ E8D5             >
1493+ E8D5 33 30       >                dw      Dict_Ptr + 2        // xt
1493+ E8D7             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8D7             >
1493+ E8D7             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8D7             >
1493+ E8D7             >//              ______________________________________________________________________
1493+ E8D7             >//              Dictionary part
1493+ E8D7             >
1493+ E8D7             >                org     Dict_Ptr
1493+ 3031             >
1493+ 3031 D5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 3033             >
1493+ 3033             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 3033 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 3036             >
1493+ 3036             >
1493+ 3036             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 3036             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 3036             >
1493+ 3036             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 3036 BA 2F                        dw      LFIND                   // -find
1495+ 3038                                                              // if
1496+ 3038 8F 20                        dw      ZBRANCH
1497+ 303A 10 00                        dw      Code_Endif - $
1498+ 303C B3 25                        dw          DROP                //      drop
1499+ 303E 22 2A 08 30                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 3042 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 3046 8E 35
1501+ 3048 2D 29                        dw          SPACE               //      space
1502+ 304A              Code_Endif:                                     // endif
1503+ 304A 5C 28                        dw      HERE                    // here
1504+ 304C                                                              // ( ---- here begins NFA ---- )
1505+ 304C CE 25 54 26                  dw      DUP, CFETCH             // dup c@
1506+ 3050 A2 27 3F 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 3054 E0 28
1507+ 3056 61 25                        dw      ONE_PLUS                // 1+
1508+ 3058 CE 25 67 28                  dw      DUP, ALLOT              // dup allot
1509+ 305C 77 25 77 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 3060 FF 24                        dw      TO_R                    // >r
1511+ 3062 CE 25                        dw      DUP                     // dup
1512+ 3064 3D 20                        dw      LIT
1513+ 3066 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 3068 36 26                        dw      TOGGLE                  // toggle
1515+ 306A 5C 28 68 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 306E 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 3072 36 26
1517+ 3074                                                              // ( ---- here is LFA ---- )
1518+ 3074 FC 27 3F 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 3078 3F 26
1519+ 307A 72 28                        dw      COMMA
1520+ 307C CE 25 77 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 3080 72 28
1521+ 3082 CD 29                        dw      HP_FETCH                // hp@
1522+ 3084 FC 27 3F 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 3088 49 26
1523+ 308A CD 29 9E 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 308E 15 25 36 24                  dw      R_OP, CMOVE
1525+ 3092 15 25 89 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 3096 67 28
1526+ 3098 0A 25 CC 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 309C 27 26
1527+ 309E CD 29 7C 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 30A2 72 28                        dw      COMMA
1529+ 30A4 37 27 DF 29                  dw      ZERO, SKIP_HP_PAGE
1530+ 30A8                                                              // ( ---- here is LFA ---- )
1531+ 30A8 F5 24                        dw      EXIT                    // ;
1532+ 30AA
1533+ 30AA              //  ______________________________________________________________________
1534+ 30AA              //
1535+ 30AA              // create       -- cccc     ( compile time )
1536+ 30AA              //              -- a        ( run time )
1537+ 30AA                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 30AA             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 30AA             >
1537+ 30AA             >Dict_Ptr        defl    $
1537+ 30AA             >
1537+ 30AA             >//              ______________________________________________________________________
1537+ 30AA             >//              Heap part
1537+ 30AA             >
1537+ 30AA             >
1537+ 30AA             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8D7             >
1537+ E8D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8D7             >Latest_Definition defl  Heap_Ptr
1537+ E8D7             >
1537+ E8D7             >                // dummy db directives used to calculate length of namec
1537+ E8D7 43 52 45 41 >                db      "CREATE"
1537+ E8DB 54 45       >
1537+ E8DD             >len_NFA         defl    $ - temp_NFA
1537+ E8DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8D7             >
1537+ E8D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8D8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DC 54 45       >
1537+ E8DE             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8DD C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8DE             >
1537+ E8DE CE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E0             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E0             >
1537+ E8E0             >mirror_Ptr      defl    $
1537+ E8E0             >
1537+ E8E0 AC 30       >                dw      Dict_Ptr + 2        // xt
1537+ E8E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E2             >
1537+ E8E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E2             >
1537+ E8E2             >//              ______________________________________________________________________
1537+ E8E2             >//              Dictionary part
1537+ E8E2             >
1537+ E8E2             >                org     Dict_Ptr
1537+ 30AA             >
1537+ 30AA E0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 30AC             >
1537+ 30AC             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 30AC CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 30AF             >
1537+ 30AF             >
1537+ 30AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 30AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 30AF             >
1537+ 30AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 30AF 33 30 44 2B                  dw      CODE, SMUDGE            // code smudge
1539+ 30B3 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 30B7 81 28
1540+ 30B9 3D 20 1E 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 30BD 72 28
1541+ 30BF 80 2B                        dw      C_SEMICOLON_CODE
1542+ 30C1                              // this routine is called from the call coded in CFA
1543+ 30C1              Create_Ptr:
1544+ 30C1
1545+ 30C1
1546+ 30C1
1547+ 30C1                              next
1547+ 30C1 DD E9       >                jp      (ix)
1548+ 30C3
1549+ 30C3              //  ______________________________________________________________________
1550+ 30C3              //
1551+ 30C3              // [compile]    -- cccc     ( compile time )
1552+ 30C3                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 30C3             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 30C3             >
1552+ 30C3             >Dict_Ptr        defl    $
1552+ 30C3             >
1552+ 30C3             >//              ______________________________________________________________________
1552+ 30C3             >//              Heap part
1552+ 30C3             >
1552+ 30C3             >
1552+ 30C3             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E2             >
1552+ E8E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E2             >Latest_Definition defl  Heap_Ptr
1552+ E8E2             >
1552+ E8E2             >                // dummy db directives used to calculate length of namec
1552+ E8E2 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E6 50 49 4C 45 >
1552+ E8EA 5D          >
1552+ E8EB             >len_NFA         defl    $ - temp_NFA
1552+ E8EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E2             >
1552+ E8E2 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E3 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8E7 50 49 4C 45 >
1552+ E8EB 5D          >
1552+ E8EC             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8EB DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EC             >
1552+ E8EC D7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8EE             >Prev_Ptr        defl    Heap_Ptr
1552+ E8EE             >
1552+ E8EE             >mirror_Ptr      defl    $
1552+ E8EE             >
1552+ E8EE C5 30       >                dw      Dict_Ptr + 2        // xt
1552+ E8F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F0             >
1552+ E8F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F0             >
1552+ E8F0             >//              ______________________________________________________________________
1552+ E8F0             >//              Dictionary part
1552+ E8F0             >
1552+ E8F0             >                org     Dict_Ptr
1552+ 30C3             >
1552+ 30C3 EE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 30C5             >
1552+ 30C5             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 30C5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 30C8             >
1552+ 30C8             >
1552+ 30C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 30C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 30C8             >
1552+ 30C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 30C8 BA 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 30CA 1A 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 30CC 37 27 98 2A                  dw      ZERO, QERROR            // 0 ?error
1556+ 30D0 B3 25                        dw      DROP                    // drop       (  cfa  )
1557+ 30D2 72 28                        dw      COMMA                   // ,
1558+ 30D4 F5 24                        dw      EXIT                    // ; immediate
1559+ 30D6
1560+ 30D6              //  ______________________________________________________________________
1561+ 30D6              //
1562+ 30D6              // literal      n --      ( compile time )
1563+ 30D6                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 30D6             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 30D6             >
1563+ 30D6             >Dict_Ptr        defl    $
1563+ 30D6             >
1563+ 30D6             >//              ______________________________________________________________________
1563+ 30D6             >//              Heap part
1563+ 30D6             >
1563+ 30D6             >
1563+ 30D6             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F0             >
1563+ E8F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F0             >Latest_Definition defl  Heap_Ptr
1563+ E8F0             >
1563+ E8F0             >                // dummy db directives used to calculate length of namec
1563+ E8F0 4C 49 54 45 >                db      "LITERAL"
1563+ E8F4 52 41 4C    >
1563+ E8F7             >len_NFA         defl    $ - temp_NFA
1563+ E8F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F0             >
1563+ E8F0 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F1 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F5 52 41 4C    >
1563+ E8F8             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8F7 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8F8             >
1563+ E8F8 E2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FA             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FA             >
1563+ E8FA             >mirror_Ptr      defl    $
1563+ E8FA             >
1563+ E8FA D8 30       >                dw      Dict_Ptr + 2        // xt
1563+ E8FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FC             >
1563+ E8FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FC             >
1563+ E8FC             >//              ______________________________________________________________________
1563+ E8FC             >//              Dictionary part
1563+ E8FC             >
1563+ E8FC             >                org     Dict_Ptr
1563+ 30D6             >
1563+ 30D6 FA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 30D8             >
1563+ 30D8             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 30D8 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 30DB             >
1563+ 30DB             >
1563+ 30DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 30DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 30DB             >
1563+ 30DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 30DB 02 28 3F 26                  dw      STATE, FETCH            // state @
1565+ 30DF                                                              // if
1566+ 30DF 8F 20                        dw      ZBRANCH
1567+ 30E1 08 00                        dw      Literal_Endif - $
1568+ 30E3 08 2B 3D 20                  dw          COMPILE, LIT        //      compile lit
1569+ 30E7 72 28                        dw          COMMA               //      ,
1570+ 30E9              Literal_Endif:                                  // endif
1571+ 30E9 F5 24                        dw      EXIT                    // ; immediate
1572+ 30EB
1573+ 30EB              //  ______________________________________________________________________
1574+ 30EB              //
1575+ 30EB              // dliteral     n --      ( compile time )
1576+ 30EB                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 30EB             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 30EB             >
1576+ 30EB             >Dict_Ptr        defl    $
1576+ 30EB             >
1576+ 30EB             >//              ______________________________________________________________________
1576+ 30EB             >//              Heap part
1576+ 30EB             >
1576+ 30EB             >
1576+ 30EB             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FC             >
1576+ E8FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FC             >Latest_Definition defl  Heap_Ptr
1576+ E8FC             >
1576+ E8FC             >                // dummy db directives used to calculate length of namec
1576+ E8FC 44 4C 49 54 >                db      "DLITERAL"
1576+ E900 45 52 41 4C >
1576+ E904             >len_NFA         defl    $ - temp_NFA
1576+ E904             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FC             >
1576+ E8FC C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E8FD 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E901 45 52 41 4C >
1576+ E905             >                org     $-1                 // alter last byte of Name just above to set
1576+ E904 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E905             >
1576+ E905 F0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E907             >Prev_Ptr        defl    Heap_Ptr
1576+ E907             >
1576+ E907             >mirror_Ptr      defl    $
1576+ E907             >
1576+ E907 ED 30       >                dw      Dict_Ptr + 2        // xt
1576+ E909             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E909             >
1576+ E909             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E909             >
1576+ E909             >//              ______________________________________________________________________
1576+ E909             >//              Dictionary part
1576+ E909             >
1576+ E909             >                org     Dict_Ptr
1576+ 30EB             >
1576+ 30EB 07 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 30ED             >
1576+ 30ED             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 30ED CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 30F0             >
1576+ 30F0             >
1576+ 30F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 30F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 30F0             >
1576+ 30F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 30F0 02 28 3F 26                  dw      STATE, FETCH            // state @
1578+ 30F4                                                              // if
1579+ 30F4 8F 20                        dw      ZBRANCH
1580+ 30F6 08 00                        dw      DLiteral_Endif - $
1581+ 30F8 C7 25                        dw          SWAP                //      swap
1582+ 30FA D8 30 D8 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 30FE              DLiteral_Endif:                                 // endif
1584+ 30FE F5 24                        dw      EXIT                    // ; immediate
1585+ 3100
1586+ 3100              //  ______________________________________________________________________
1587+ 3100              //
1588+ 3100              // [char]       n --      ( compile time )
1589+ 3100              // inside colon definition, gets first character from next input word
1590+ 3100              // and compiles it as literal.
1591+ 3100                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 3100             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 3100             >
1591+ 3100             >Dict_Ptr        defl    $
1591+ 3100             >
1591+ 3100             >//              ______________________________________________________________________
1591+ 3100             >//              Heap part
1591+ 3100             >
1591+ 3100             >
1591+ 3100             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E909             >
1591+ E909             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E909             >Latest_Definition defl  Heap_Ptr
1591+ E909             >
1591+ E909             >                // dummy db directives used to calculate length of namec
1591+ E909 5B 43 48 41 >                db      "[CHAR]"
1591+ E90D 52 5D       >
1591+ E90F             >len_NFA         defl    $ - temp_NFA
1591+ E90F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E909             >
1591+ E909 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90A 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E90E 52 5D       >
1591+ E910             >                org     $-1                 // alter last byte of Name just above to set
1591+ E90F DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E910             >
1591+ E910 FC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E912             >Prev_Ptr        defl    Heap_Ptr
1591+ E912             >
1591+ E912             >mirror_Ptr      defl    $
1591+ E912             >
1591+ E912 02 31       >                dw      Dict_Ptr + 2        // xt
1591+ E914             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E914             >
1591+ E914             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E914             >
1591+ E914             >//              ______________________________________________________________________
1591+ E914             >//              Dictionary part
1591+ E914             >
1591+ E914             >                org     Dict_Ptr
1591+ 3100             >
1591+ 3100 12 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 3102             >
1591+ 3102             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 3102 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 3105             >
1591+ 3105             >
1591+ 3105             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 3105             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 3105             >
1591+ 3105             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 3105 DC 2D D8 30                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 3109 F5 24                        dw      EXIT                    // ; immediate
1594+ 310B
1595+ 310B              //  ______________________________________________________________________
1596+ 310B              //
1597+ 310B              // 0x00         n --      ( compile time )
1598+ 310B                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 310B             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 310B             >
1598+ 310B             >Dict_Ptr        defl    $
1598+ 310B             >
1598+ 310B             >//              ______________________________________________________________________
1598+ 310B             >//              Heap part
1598+ 310B             >
1598+ 310B             >
1598+ 310B             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E914             >
1598+ E914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E914             >Latest_Definition defl  Heap_Ptr
1598+ E914             >
1598+ E914             >                // dummy db directives used to calculate length of namec
1598+ E914 00          >                db      $00
1598+ E915             >len_NFA         defl    $ - temp_NFA
1598+ E915             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E914             >
1598+ E914 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E915 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E916             >                org     $-1                 // alter last byte of Name just above to set
1598+ E915 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E916             >
1598+ E916 09 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E918             >Prev_Ptr        defl    Heap_Ptr
1598+ E918             >
1598+ E918             >mirror_Ptr      defl    $
1598+ E918             >
1598+ E918 0D 31       >                dw      Dict_Ptr + 2        // xt
1598+ E91A             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91A             >
1598+ E91A             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91A             >
1598+ E91A             >//              ______________________________________________________________________
1598+ E91A             >//              Dictionary part
1598+ E91A             >
1598+ E91A             >                org     Dict_Ptr
1598+ 310B             >
1598+ 310B 18 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 310D             >
1598+ 310D             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 310D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 3110             >
1598+ 3110             >
1598+ 3110             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 3110             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 3110             >
1598+ 3110             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 3110 D8 27 3F 26                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 3114 3E 27
1600+ 3116 D5 28                        dw      GREATER                 // > if
1601+ 3118                                                              // if
1602+ 3118 8F 20                        dw      ZBRANCH
1603+ 311A 28 00                        dw      Nul_Else_1 - $
1604+ 311C 3E 27 D8 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 3120 27 26
1605+ 3122 37 27 DE 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 3126 49 26
1606+ 3128 D8 27 3F 26                  dw          BLK, FETCH          //      blk @
1607+ 312C 6F 27                        dw          BSCR                //      b/scr
1608+ 312E 68 25                        dw          ONE_SUBTRACT        //      1 -
1609+ 3130 B5 24                        dw          AND_OP              //      and  ( this is tricky )
1610+ 3132 1A 25                        dw          ZEQUAL              //      0=
1611+ 3134                                                              //      if
1612+ 3134 8F 20                        dw          ZBRANCH
1613+ 3136 08 00                        dw          Nul_Endif_2 - $
1614+ 3138 C0 2A                        dw              QEXEC           //          ?exec
1615+ 313A 0A 25 B3 25                  dw              R_TO, DROP      //          r> drop
1616+ 313E              Nul_Endif_2:                                    //      endif
1617+ 313E 82 20                        dw      BRANCH
1618+ 3140 06 00                        dw      Nul_Endif_1 - $
1619+ 3142              Nul_Else_1:                                     // else
1620+ 3142 0A 25 B3 25                  dw          R_TO, DROP          //      r> drop
1621+ 3146              Nul_Endif_1:                                    // endif
1622+ 3146 F5 24                        dw      EXIT                    // ;
1623+ 3148
1624+ 3148              //  ______________________________________________________________________
1625+ 3148              //
1626+ 3148              // ?stack       --
1627+ 3148              // Raise error #1 if stack is empty and you pop it
1628+ 3148              // Raise error #7 if stack is full.
1629+ 3148              // This means SP must always stay between HERE and FFFF
1630+ 3148              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 3148              // for Next 8K MMU paging this is $DOE8
1632+ 3148                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 3148             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 3148             >
1632+ 3148             >Dict_Ptr        defl    $
1632+ 3148             >
1632+ 3148             >//              ______________________________________________________________________
1632+ 3148             >//              Heap part
1632+ 3148             >
1632+ 3148             >
1632+ 3148             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91A             >
1632+ E91A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91A             >Latest_Definition defl  Heap_Ptr
1632+ E91A             >
1632+ E91A             >                // dummy db directives used to calculate length of namec
1632+ E91A 3F 53 54 41 >                db      "?STACK"
1632+ E91E 43 4B       >
1632+ E920             >len_NFA         defl    $ - temp_NFA
1632+ E920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91A             >
1632+ E91A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91B 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E91F 43 4B       >
1632+ E921             >                org     $-1                 // alter last byte of Name just above to set
1632+ E920 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E921             >
1632+ E921 14 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E923             >Prev_Ptr        defl    Heap_Ptr
1632+ E923             >
1632+ E923             >mirror_Ptr      defl    $
1632+ E923             >
1632+ E923 4A 31       >                dw      Dict_Ptr + 2        // xt
1632+ E925             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E925             >
1632+ E925             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E925             >
1632+ E925             >//              ______________________________________________________________________
1632+ E925             >//              Dictionary part
1632+ E925             >
1632+ E925             >                org     Dict_Ptr
1632+ 3148             >
1632+ 3148 23 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 314A             >
1632+ 314A             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 314A CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 314D             >
1632+ 314D             >
1632+ 314D             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 314D             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 314D             >
1632+ 314D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 314D DC 24                        dw      SPFETCH                 // sp@
1634+ 314F 90 27 3F 26                  dw      S0, FETCH               // s0 @
1635+ 3153 C7 25 B2 28                  dw      SWAP, ULESS             // swap u<
1636+ 3157 3E 27 98 2A                  dw      ONE, QERROR             // 1 ?error
1637+ 315B 5C 28                        dw      HERE                    // here
1638+ 315D 90 27 3F 26                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 3161 C0 28
1639+ 3163                                                              // if
1640+ 3163 8F 20                        dw      ZBRANCH
1641+ 3165 14 00                        dw      QStack_Endif - $
1642+ 3167 DC 24                        dw          SPFETCH             //      sp@
1643+ 3169 5C 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1643+ 316D 80 00
1644+ 316F 48 25 B2 28                  dw          PLUS, ULESS         //      plus u<
1645+ 3173 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 3177 98 2A
1646+ 3179              QStack_Endif:                                   // endif
1647+ 3179 F5 24                        dw      EXIT                    // ;
1648+ 317B
1649+ 317B
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 123  317B                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 317B              //  ______________________________________________________________________
   2+ 317B              //
   3+ 317B              //  L2.asm
   4+ 317B              //
   5+ 317B              //  Level-2 3dos
   6+ 317B              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 317B              //  ______________________________________________________________________
   8+ 317B
   9+ 317B
  10+ 317B              //  ______________________________________________________________________
  11+ 317B              //
  12+ 317B              // interpret    --
  13+ 317B              // This is the text interpreter.
  14+ 317B              // It executes or compiles, depending on STATE, the text coming from
  15+ 317B              // current input stream.
  16+ 317B              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 317B              // the word is interpreted as numeric and converted, using current BASE,
  18+ 317B              // leaving on top of stack a single or double precision number, depending
  19+ 317B              // on the presence of a decimal point.
  20+ 317B              // If the number conversion fails, the terminal is notified with ? followed
  21+ 317B              // by the offending word.
  22+ 317B                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 317B             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 317B             >
  22+ 317B             >Dict_Ptr        defl    $
  22+ 317B             >
  22+ 317B             >//              ______________________________________________________________________
  22+ 317B             >//              Heap part
  22+ 317B             >
  22+ 317B             >
  22+ 317B             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E925             >
  22+ E925             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E925             >Latest_Definition defl  Heap_Ptr
  22+ E925             >
  22+ E925             >                // dummy db directives used to calculate length of namec
  22+ E925 49 4E 54 45 >                db      "INTERPRET"
  22+ E929 52 50 52 45 >
  22+ E92D 54          >
  22+ E92E             >len_NFA         defl    $ - temp_NFA
  22+ E92E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E925             >
  22+ E925 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E926 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92A 52 50 52 45 >
  22+ E92E 54          >
  22+ E92F             >                org     $-1                 // alter last byte of Name just above to set
  22+ E92E D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E92F             >
  22+ E92F 1A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E931             >Prev_Ptr        defl    Heap_Ptr
  22+ E931             >
  22+ E931             >mirror_Ptr      defl    $
  22+ E931             >
  22+ E931 7D 31       >                dw      Dict_Ptr + 2        // xt
  22+ E933             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E933             >
  22+ E933             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E933             >
  22+ E933             >//              ______________________________________________________________________
  22+ E933             >//              Dictionary part
  22+ E933             >
  22+ E933             >                org     Dict_Ptr
  22+ 317B             >
  22+ 317B 31 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 317D             >
  22+ 317D             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 317D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 3180             >
  22+ 3180             >
  22+ 3180             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 3180             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 3180             >
  22+ 3180             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 3180
  24+ 3180              Interpret_Begin:                                        // begin
  25+ 3180 BA 2F                        dw          LFIND                       //      -find
  26+ 3182                                                                      //      if
  27+ 3182 8F 20                        dw          ZBRANCH
  28+ 3184 1A 00                        dw          Interpret_Else_1 - $
  29+ 3186 02 28 3F 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 318A C0 28
  30+ 318C                                                                      //          if
  31+ 318C 8F 20                        dw              ZBRANCH
  32+ 318E 08 00                        dw              Interpret_Else_2 - $
  33+ 3190 1D 2B                        dw                  COMPILE_XT          //              compile,
  34+ 3192                                                                      //          else
  35+ 3192 82 20                        dw              BRANCH
  36+ 3194 06 00                        dw              Interpret_Endif_2 - $
  37+ 3196              Interpret_Else_2:
  38+ 3196 48 20 FE 26                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 319A              Interpret_Endif_2:                                      //          endif
  40+ 319A                                                                      //      else
  41+ 319A 82 20                        dw          BRANCH
  42+ 319C 1A 00                        dw          Interpret_Endif_1 - $
  43+ 319E              Interpret_Else_1:
  44+ 319E 5C 28 0E 2F                  dw              HERE, NUMBER            //          here number
  45+ 31A2 0E 28 3F 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31A6 61 25
  46+ 31A8                                                                      //          if
  47+ 31A8 8F 20                        dw              ZBRANCH
  48+ 31AA 08 00                        dw              Interpret_Else_3 - $
  49+ 31AC              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31AC              //                                                      //              if
  51+ 31AC              //              dw                  ZBRANCH
  52+ 31AC              //              dw                  Interpret_Endif_4 - $
  53+ 31AC              //              dw                      ONE, ZERO       //                  1 0
  54+ 31AC              //              dw                      TWO_DROP        //                  2drop
  55+ 31AC              //Interpret_Endif_4:                                      //              endif
  56+ 31AC ED 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31AE                                                                      //          else
  58+ 31AE 82 20                        dw              BRANCH
  59+ 31B0 06 00                        dw              Interpret_Endif_3 - $
  60+ 31B2              Interpret_Else_3:
  61+ 31B2 B3 25                        dw                  DROP                //              drop
  62+ 31B4 D8 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31B6              Interpret_Endif_3:                                      //          endif
  64+ 31B6              Interpret_Endif_1:                                      //      endif
  65+ 31B6 4A 31                        dw          QSTACK                      //      ?stack
  66+ 31B8 4C 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31BA                                                                      //      if
  68+ 31BA 8F 20                        dw          ZBRANCH
  69+ 31BC 04 00                        dw          Interpret_Endif_5 - $
  70+ 31BE 1E 32                        dw              QUIT                    //          quit
  71+ 31C0              Interpret_Endif_5:                                      //      endif
  72+ 31C0 82 20                        dw      BRANCH
  73+ 31C2 BE FF                        dw      Interpret_Begin - $
  74+ 31C4 F5 24                        dw      EXIT                            // ;
  75+ 31C6
  76+ 31C6              //  ______________________________________________________________________
  77+ 31C6              //
  78+ 31C6              // vocabulary   -- cccc     ( compile time )
  79+ 31C6              // Defining word used in the form   VOCABULARY cccc
  80+ 31C6              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31C6              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31C6              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31C6              // so new definitions can be inserted in that vocabulary.
  84+ 31C6                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31C6             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31C6             >
  84+ 31C6             >Dict_Ptr        defl    $
  84+ 31C6             >
  84+ 31C6             >//              ______________________________________________________________________
  84+ 31C6             >//              Heap part
  84+ 31C6             >
  84+ 31C6             >
  84+ 31C6             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E933             >
  84+ E933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E933             >Latest_Definition defl  Heap_Ptr
  84+ E933             >
  84+ E933             >                // dummy db directives used to calculate length of namec
  84+ E933 56 4F 43 41 >                db      "VOCABULARY"
  84+ E937 42 55 4C 41 >
  84+ E93B 52 59       >
  84+ E93D             >len_NFA         defl    $ - temp_NFA
  84+ E93D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E933             >
  84+ E933 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E934 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E938 42 55 4C 41 >
  84+ E93C 52 59       >
  84+ E93E             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93D D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E93E             >
  84+ E93E 25 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E940             >Prev_Ptr        defl    Heap_Ptr
  84+ E940             >
  84+ E940             >mirror_Ptr      defl    $
  84+ E940             >
  84+ E940 C8 31       >                dw      Dict_Ptr + 2        // xt
  84+ E942             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E942             >
  84+ E942             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E942             >
  84+ E942             >//              ______________________________________________________________________
  84+ E942             >//              Dictionary part
  84+ E942             >
  84+ E942             >                org     Dict_Ptr
  84+ 31C6             >
  84+ 31C6 40 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31C8             >
  84+ 31C8             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31C8 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31CB             >
  84+ 31CB             >
  84+ 31CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31CB             >
  84+ 31CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31CB
  86+ 31CB AC 2B                        dw      CBUILDS
  87+ 31CD
  88+ 31CD                              // dummy word + link part
  89+ 31CD 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31D1 72 28
  90+ 31D3 FC 27 3F 26                  dw      CURRENT, FETCH          // current @
  91+ 31D7 3F 26                        dw      FETCH                   // @
  92+ 31D9                          //  dw      CELL_MINUS              // cell-
  93+ 31D9 72 28                        dw      COMMA                   // ,
  94+ 31DB
  95+ 31DB                              // voc-link part
  96+ 31DB 5C 28                        dw      HERE                    // here
  97+ 31DD BA 27 3F 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31E1 72 28                        dw      COMMA                   // ,
  99+ 31E3 BA 27 49 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31E7                              // DOES part
 101+ 31E7 B7 2B                        dw      DOES_TO                 // does>
 102+ 31E9              Vocabulary_Does:
 103+ 31E9 77 25                        dw      CELL_PLUS               // cell+
 104+ 31EB F6 27 49 26                  dw      CONTEXT, STORE          // context !
 105+ 31EF F5 24                        dw      EXIT                    // ;
 106+ 31F1
 107+ 31F1              //  ______________________________________________________________________
 108+ 31F1              //
 109+ 31F1              // forth        --
 110+ 31F1              // Name of the first vocabulary.
 111+ 31F1              // It makes FORTH the CONTEXT vocabulary.
 112+ 31F1              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 31F1              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 31F1              // of a colon definition to be able to select the vocabulary.
 115+ 31F1
 116+ 31F1                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 31F1             >
 116+ 31F1             >Dict_Ptr        defl    $
 116+ 31F1             >
 116+ 31F1             >//              ______________________________________________________________________
 116+ 31F1             >//              Heap part
 116+ 31F1             >
 116+ 31F1             >
 116+ 31F1             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E942             >
 116+ E942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E942             >Latest_Definition defl  Heap_Ptr
 116+ E942             >
 116+ E942             >                // dummy db directives used to calculate length of namec
 116+ E942 46 4F 52 54 >                db      "FORTH"
 116+ E946 48          >
 116+ E947             >len_NFA         defl    $ - temp_NFA
 116+ E947             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E942             >
 116+ E942 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E943 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E947 48          >
 116+ E948             >                org     $-1                 // alter last byte of Name just above to set
 116+ E947 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E948             >
 116+ E948 33 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94A             >Prev_Ptr        defl    Heap_Ptr
 116+ E94A             >
 116+ E94A             >mirror_Ptr      defl    $
 116+ E94A             >
 116+ E94A F3 31       >                dw      Dict_Ptr + 2        // xt
 116+ E94C             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94C             >
 116+ E94C             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94C             >
 116+ E94C             >//              ______________________________________________________________________
 116+ E94C             >//              Dictionary part
 116+ E94C             >
 116+ E94C             >                org     Dict_Ptr
 116+ 31F1             >
 116+ 31F1 4A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 31F3             >
 116+ 31F3             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 31F3 CD C4 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 31F6             >
 116+ 31F6             >
 116+ 31F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 31F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 31F6             >
 116+ 31F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 31F6 E9 31                        dw      Vocabulary_Does
 118+ 31F8
 119+ 31F8 81 A0                        db      $81, $A0
 120+ 31FA              Forth_Latest_Ptr:
 121+ 31FA 42 09                        dw      Latest_Definition
 122+ 31FC              Voclink_Ptr:
 123+ 31FC 00 00                        dw      0
 124+ 31FE
 125+ 31FE              // ____
 126+ 31FE              // temp_VOC        defl    $                   // save this address
 127+ 31FE              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 31FE              //              db      $81, $A0
 129+ 31FE              // Forth_Latest_Ptr_HEAP:
 130+ 31FE              //                 dw      Latest_Definition
 131+ 31FE              // Voclink_Ptr_HEAP:
 132+ 31FE              //                 dw      0
 133+ 31FE              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 31FE              //                 org     temp_VOC
 135+ 31FE              // ____
 136+ 31FE
 137+ 31FE              // Any new vocabulary is structured as follow:
 138+ 31FE              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 31FE              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 31FE              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 31FE              //       at creations it points to the null-word of its parent vocabulary
 142+ 31FE              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 31FE              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 31FE              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 31FE              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 31FE              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 31FE              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 31FE
 149+ 31FE              //  ______________________________________________________________________
 150+ 31FE              //
 151+ 31FE              // definitions  --
 152+ 31FE              // Used in the form  cccc DEFINITIONS
 153+ 31FE              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 31FE              // vocabulary cccc.
 155+ 31FE                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 31FE             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 31FE             >
 155+ 31FE             >Dict_Ptr        defl    $
 155+ 31FE             >
 155+ 31FE             >//              ______________________________________________________________________
 155+ 31FE             >//              Heap part
 155+ 31FE             >
 155+ 31FE             >
 155+ 31FE             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94C             >
 155+ E94C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94C             >Latest_Definition defl  Heap_Ptr
 155+ E94C             >
 155+ E94C             >                // dummy db directives used to calculate length of namec
 155+ E94C 44 45 46 49 >                db      "DEFINITIONS"
 155+ E950 4E 49 54 49 >
 155+ E954 4F 4E 53    >
 155+ E957             >len_NFA         defl    $ - temp_NFA
 155+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94C             >
 155+ E94C 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E94D 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E951 4E 49 54 49 >
 155+ E955 4F 4E 53    >
 155+ E958             >                org     $-1                 // alter last byte of Name just above to set
 155+ E957 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E958             >
 155+ E958 42 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95A             >Prev_Ptr        defl    Heap_Ptr
 155+ E95A             >
 155+ E95A             >mirror_Ptr      defl    $
 155+ E95A             >
 155+ E95A 00 32       >                dw      Dict_Ptr + 2        // xt
 155+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95C             >
 155+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95C             >
 155+ E95C             >//              ______________________________________________________________________
 155+ E95C             >//              Dictionary part
 155+ E95C             >
 155+ E95C             >                org     Dict_Ptr
 155+ 31FE             >
 155+ 31FE 5A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 3200             >
 155+ 3200             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 3200 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3203             >
 155+ 3203             >
 155+ 3203             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3203             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3203             >
 155+ 3203             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3203 F6 27 3F 26                  dw      CONTEXT, FETCH          // context @
 157+ 3207 FC 27 49 26                  dw      CURRENT, STORE          // current !
 158+ 320B F5 24                        dw      EXIT                    // ;
 159+ 320D
 160+ 320D              //  ______________________________________________________________________
 161+ 320D              //
 162+ 320D              // (            -- cccc )
 163+ 320D              // the following text is interpreted as a comment until a closing )
 164+ 320D                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 320D             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 320D             >
 164+ 320D             >Dict_Ptr        defl    $
 164+ 320D             >
 164+ 320D             >//              ______________________________________________________________________
 164+ 320D             >//              Heap part
 164+ 320D             >
 164+ 320D             >
 164+ 320D             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95C             >
 164+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95C             >Latest_Definition defl  Heap_Ptr
 164+ E95C             >
 164+ E95C             >                // dummy db directives used to calculate length of namec
 164+ E95C 28          >                db      "("
 164+ E95D             >len_NFA         defl    $ - temp_NFA
 164+ E95D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95C             >
 164+ E95C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E95D 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E95E             >                org     $-1                 // alter last byte of Name just above to set
 164+ E95D A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E95E             >
 164+ E95E 4C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E960             >Prev_Ptr        defl    Heap_Ptr
 164+ E960             >
 164+ E960             >mirror_Ptr      defl    $
 164+ E960             >
 164+ E960 0F 32       >                dw      Dict_Ptr + 2        // xt
 164+ E962             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E962             >
 164+ E962             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E962             >
 164+ E962             >//              ______________________________________________________________________
 164+ E962             >//              Dictionary part
 164+ E962             >
 164+ E962             >                org     Dict_Ptr
 164+ 320D             >
 164+ 320D 60 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 320F             >
 164+ 320F             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 320F CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 3212             >
 164+ 3212             >
 164+ 3212             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 3212             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 3212             >
 164+ 3212             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 3212 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3216 7A 2D B3 25                  dw      WORD, DROP              // word drop
 167+ 321A F5 24                        dw      EXIT                    // ;
 168+ 321C
 169+ 321C              //  ______________________________________________________________________
 170+ 321C              //
 171+ 321C              // quit         --
 172+ 321C              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 321C                              Colon_Def QUIT, "QUIT", is_normal
 173+ 321C             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 321C             >
 173+ 321C             >Dict_Ptr        defl    $
 173+ 321C             >
 173+ 321C             >//              ______________________________________________________________________
 173+ 321C             >//              Heap part
 173+ 321C             >
 173+ 321C             >
 173+ 321C             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E962             >
 173+ E962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E962             >Latest_Definition defl  Heap_Ptr
 173+ E962             >
 173+ E962             >                // dummy db directives used to calculate length of namec
 173+ E962 51 55 49 54 >                db      "QUIT"
 173+ E966             >len_NFA         defl    $ - temp_NFA
 173+ E966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E962             >
 173+ E962 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E963 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E967             >                org     $-1                 // alter last byte of Name just above to set
 173+ E966 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E967             >
 173+ E967 5C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E969             >Prev_Ptr        defl    Heap_Ptr
 173+ E969             >
 173+ E969             >mirror_Ptr      defl    $
 173+ E969             >
 173+ E969 1E 32       >                dw      Dict_Ptr + 2        // xt
 173+ E96B             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96B             >
 173+ E96B             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96B             >
 173+ E96B             >//              ______________________________________________________________________
 173+ E96B             >//              Dictionary part
 173+ E96B             >
 173+ E96B             >                org     Dict_Ptr
 173+ 321C             >
 173+ 321C 69 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 321E             >
 173+ 321E             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 321E CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 3221             >
 173+ 3221             >
 173+ 3221             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 3221             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 3221             >
 173+ 3221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 3221
 175+ 3221 44 28 3F 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 3225 99 23 B3 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 3229 37 27 44 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 322D 49 26
 178+ 322F 37 27 D8 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3233 49 26
 179+ 3235 28 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3237                                                              // begin
 181+ 3237              Quit_Begin:
 182+ 3237 96 27 3F 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 323B F0 24
 183+ 323D 4D 22                        dw      CR                      //      cr
 184+ 323F 17 2D                        dw      QUERY                   //      query
 185+ 3241              Next_Breakpoint_1:
 186+ 3241 7D 31                        dw      INTERPRET               //      interpret
 187+ 3243 02 28 3F 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3247 1A 25
 188+ 3249                                                              //      if
 189+ 3249 8F 20                        dw      ZBRANCH
 190+ 324B 07 00                        dw      Quit_Endif - $
 191+ 324D C5 2D                        dw          C_DOT_QUOTE
 192+ 324F 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 3252              Quit_Endif:                                     //      else
 194+ 3252                                                              // again
 195+ 3252 82 20                        dw      BRANCH
 196+ 3254 E3 FF                        dw      Quit_Begin - $
 197+ 3256 F5 24                        dw      EXIT                    // ;
 198+ 3258
 199+ 3258              //  ______________________________________________________________________
 200+ 3258              //
 201+ 3258              // abort        --
 202+ 3258                              Colon_Def ABORT, "ABORT", is_normal
 202+ 3258             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 3258             >
 202+ 3258             >Dict_Ptr        defl    $
 202+ 3258             >
 202+ 3258             >//              ______________________________________________________________________
 202+ 3258             >//              Heap part
 202+ 3258             >
 202+ 3258             >
 202+ 3258             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96B             >
 202+ E96B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96B             >Latest_Definition defl  Heap_Ptr
 202+ E96B             >
 202+ E96B             >                // dummy db directives used to calculate length of namec
 202+ E96B 41 42 4F 52 >                db      "ABORT"
 202+ E96F 54          >
 202+ E970             >len_NFA         defl    $ - temp_NFA
 202+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96B             >
 202+ E96B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96C 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E970 54          >
 202+ E971             >                org     $-1                 // alter last byte of Name just above to set
 202+ E970 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E971             >
 202+ E971 62 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E973             >Prev_Ptr        defl    Heap_Ptr
 202+ E973             >
 202+ E973             >mirror_Ptr      defl    $
 202+ E973             >
 202+ E973 5A 32       >                dw      Dict_Ptr + 2        // xt
 202+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E975             >
 202+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E975             >
 202+ E975             >//              ______________________________________________________________________
 202+ E975             >//              Dictionary part
 202+ E975             >
 202+ E975             >                org     Dict_Ptr
 202+ 3258             >
 202+ 3258 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 325A             >
 202+ 325A             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 325A CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 325D             >
 202+ 325D             >
 202+ 325D             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 325D             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 325D             >
 202+ 325D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 325D 90 27 3F 26                  dw      S0, FETCH               // s0 @
 204+ 3261 5A 27                        dw      BL                      // bl
 205+ 3263 AA 25 49 26                  dw      OVER, STORE             // over !
 206+ 3267 E5 24                        dw      SPSTORE                 // sp!
 207+ 3269 71 2B                        dw      DECIMAL                 // decimal
 208+ 326B F3 31                        dw      FORTH                   // [compile] forth
 209+ 326D 00 32                        dw      DEFINITIONS             // definitions
 210+ 326F
 211+ 326F 28 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 3271 96 27 3F 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 3275 F0 24
 213+ 3277
 214+ 3277              Autoexec_Ptr:
 215+ 3277 B5 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 3279                          //  dw      NOOP
 217+ 3279 1E 32                        dw      QUIT                   // quit
 218+ 327B F5 24                        dw      EXIT                    // ;
 219+ 327D
 220+ 327D              //  ______________________________________________________________________
 221+ 327D              //
 222+ 327D              // warm         --
 223+ 327D                              Colon_Def WARM, "WARM", is_normal
 223+ 327D             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 223+ 327D             >
 223+ 327D             >Dict_Ptr        defl    $
 223+ 327D             >
 223+ 327D             >//              ______________________________________________________________________
 223+ 327D             >//              Heap part
 223+ 327D             >
 223+ 327D             >
 223+ 327D             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E975             >
 223+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E975             >Latest_Definition defl  Heap_Ptr
 223+ E975             >
 223+ E975             >                // dummy db directives used to calculate length of namec
 223+ E975 57 41 52 4D >                db      "WARM"
 223+ E979             >len_NFA         defl    $ - temp_NFA
 223+ E979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E975             >
 223+ E975 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E976 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 223+ E97A             >                org     $-1                 // alter last byte of Name just above to set
 223+ E979 CD          >                db      {b $} | END_BIT     // msb as name end
 223+ E97A             >
 223+ E97A 6B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E97C             >Prev_Ptr        defl    Heap_Ptr
 223+ E97C             >
 223+ E97C             >mirror_Ptr      defl    $
 223+ E97C             >
 223+ E97C 7F 32       >                dw      Dict_Ptr + 2        // xt
 223+ E97E             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E97E             >
 223+ E97E             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E97E             >
 223+ E97E             >//              ______________________________________________________________________
 223+ E97E             >//              Dictionary part
 223+ E97E             >
 223+ E97E             >                org     Dict_Ptr
 223+ 327D             >
 223+ 327D 7C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 327F             >
 223+ 327F             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 327F CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 3282             >
 223+ 3282             >
 223+ 3282             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 3282             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 3282             >
 223+ 3282             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 3282 54 36                        dw      BLK_INIT                // blk-init
 225+ 3284 91 3D                        dw      SPLASH                  // splash
 226+ 3286 3D 20 07 00                  dw      LIT, 7, EMIT            // 7 emit
 226+ 328A 16 29
 227+ 328C 5A 32                        dw      ABORT                   // abort
 228+ 328E F5 24                        dw      EXIT                    // exit
 229+ 3290
 230+ 3290              //  ______________________________________________________________________
 231+ 3290              //
 232+ 3290              // cold         --
 233+ 3290                              Colon_Def COLD, "COLD", is_normal
 233+ 3290             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 233+ 3290             >
 233+ 3290             >Dict_Ptr        defl    $
 233+ 3290             >
 233+ 3290             >//              ______________________________________________________________________
 233+ 3290             >//              Heap part
 233+ 3290             >
 233+ 3290             >
 233+ 3290             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E97E             >
 233+ E97E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E97E             >Latest_Definition defl  Heap_Ptr
 233+ E97E             >
 233+ E97E             >                // dummy db directives used to calculate length of namec
 233+ E97E 43 4F 4C 44 >                db      "COLD"
 233+ E982             >len_NFA         defl    $ - temp_NFA
 233+ E982             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E97E             >
 233+ E97E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E97F 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 233+ E983             >                org     $-1                 // alter last byte of Name just above to set
 233+ E982 C4          >                db      {b $} | END_BIT     // msb as name end
 233+ E983             >
 233+ E983 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E985             >Prev_Ptr        defl    Heap_Ptr
 233+ E985             >
 233+ E985             >mirror_Ptr      defl    $
 233+ E985             >
 233+ E985 92 32       >                dw      Dict_Ptr + 2        // xt
 233+ E987             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E987             >
 233+ E987             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E987             >
 233+ E987             >//              ______________________________________________________________________
 233+ E987             >//              Dictionary part
 233+ E987             >
 233+ E987             >                org     Dict_Ptr
 233+ 3290             >
 233+ 3290 85 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 3292             >
 233+ 3292             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 3292 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 233+ 3295             >
 233+ 3295             >
 233+ 3295             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 3295             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 3295             >
 233+ 3295             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 3295 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 3299 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 329D 3F 26                        dw      FETCH                   // @
 237+ 329F 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 32A3 48 25
 238+ 32A5 3D 20 16 00                  dw      LIT, 22                 // 22
 239+ 32A9 36 24                        dw      CMOVE
 240+ 32AB 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 32AF 3F 26                        dw      FETCH                   // @
 242+ 32B1 3D 20 FA 31                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 32B5 49 26                        dw      STORE                   // !
 244+ 32B7 37 27 D2 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 32BB 49 26
 245+ 32BD C0 27 3F 26                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 32C1 CE 25
 246+ 32C3 2C 28 49 26                  dw      USED, STORE             // used !
 247+ 32C7 32 28 49 26                  dw      PREV, STORE             // prev !
 248+ 32CB 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 32CF 3E 28 49 26
 249+ 32D3              //              dw      LIT, 8
 250+ 32D3              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 32D3 F5 36                        dw      EMPTY_BUFFERS
 252+ 32D5 37 27 D8 27                  dw      ZERO, BLK, STORE
 252+ 32D9 49 26
 253+ 32DB 37 27 44 28                  dw      ZERO, SOURCE_ID, STORE
 253+ 32DF 49 26
 254+ 32E1
 255+ 32E1 7F 32        Warm_Start:     dw      WARM
 256+ 32E3 92 32        Cold_Start:     dw      COLD
 257+ 32E5 F5 24                        dw      EXIT
 258+ 32E7
 259+ 32E7
 260+ 32E7              //  ______________________________________________________________________
 261+ 32E7
 262+ 32E7              Tools_vForth_Directory
 263+ 32E7 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 263+ 32EB 6F 6F 6C 73
 263+ 32EF 2F 76 46 6F
 263+ 32F3 72 74 68 2F
 263+ 32F7 FF
 264+ 32F8 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 264+ 32FC 6F 74 2F 76
 264+ 3300 66 6F 72 74
 264+ 3304 68 2E 62 69
 264+ 3308 6E 00
 265+ 330A
 266+ 330A              Saved_Speed:
 267+ 330A 00                           db      0
 268+ 330B 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 268+ 330F 06 07
 269+ 3311
 270+ 3311              Saved_Layer:
 271+ 3311 00                           db      0           // graphics current mode
 272+ 3312
 273+ 3312              //  ______________________________________________________________________
 274+ 3312              WarmRoutine:
 275+ 3312              ColdRoutine:
 276+ 3312              //  ______________________________________________________________________
 277+ 3312              // 0.
 278+ 3312 D1                           pop     de                      // retrieve return to basic address
 279+ 3313 ED 73 08 20                  ld      (SP_Basic), sp
 280+ 3317 31 00 40                     ld      sp, $4000               // safe area
 281+ 331A D5                           push    de                      // save return to basic address
 282+ 331B D9                           exx
 283+ 331C E5                           push    hl                      // save Basic's h'l' return address
 284+ 331D D9                           exx
 285+ 331E
 286+ 331E              //  ______________________________________________________________________
 287+ 331E              // 1.
 288+ 331E              // Accepts one parameter from Basic as the filename to USE for blocks.
 289+ 331E 7C                           ld      a, h
 290+ 331F B5                           or      l
 291+ 3320 28 1E                        jr      z, Skip_Parameter
 292+ 3322
 293+ 3322 11 63 3F                     ld      de, Blk_filename
 294+ 3325 01 00 00                     ld      bc, 0
 295+ 3328              Parameter_Loop:
 296+ 3328 7E                           ld      a, (hl)
 297+ 3329 FE 3A                        cp      ':'
 298+ 332B 28 08                        jr      z, End_Parameter
 299+ 332D FE 0D                        cp      $0D
 300+ 332F 28 04                        jr      z, End_Parameter
 301+ 3331 ED A0                        ldi
 302+ 3333 18 F3                        jr      Parameter_Loop
 303+ 3335              End_Parameter:
 304+ 3335 AF                           xor     a
 305+ 3336 12                           ld      (de), a
 306+ 3337 21 00 00                     ld      hl, 0
 307+ 333A ED 42                        sbc     hl, bc
 308+ 333C 7D                           ld      a, l
 309+ 333D 32 62 3F                     ld      (Len_Filename), a
 310+ 3340              Skip_Parameter:
 311+ 3340
 312+ 3340              //  ______________________________________________________________________
 313+ 3340              // 2. prepare save-area address and hw register port
 314+ 3340 21 0A 33                     ld      hl, Saved_Speed     // save-area
 315+ 3343              //              ld      bc, $243B               // hw-register port
 316+ 3343              //  ______________________________________________________________________
 317+ 3343              // 2.1
 318+ 3343              // ask / read speed and MMU status
 319+ 3343 3E 07                        ld      a ,$07                  // read current speed
 320+ 3345 CD 03 34                     call    Get_MMU_status
 321+ 3348 16 03                        ld      d, 3                    // set top speed
 322+ 334A B2                           or      d                       // reuse data just read
 323+ 334B ED 92 07                     nextreg 07, a
 324+ 334E
 325+ 334E 1E 06                        ld      e, 6                    // loop limit
 326+ 3350              MMU_read_loop:
 327+ 3350 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 328+ 3352 93                           sub     e
 329+ 3353 CD 03 34                     call    Get_MMU_status
 330+ 3356 1D                           dec     e
 331+ 3357 20 F7                        jr      nz, MMU_read_loop
 332+ 3359              //  ______________________________________________________________________
 333+ 3359              // 2.2
 334+ 3359              // save current LAYER status
 335+ 3359
 336+ 3359 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 337+ 335C 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 338+ 335E 3E 00                        ld      a, 0        // query current status
 339+ 3360 CF                           rst     8
 340+ 3361 94                           db      $94 // carry flag set on success
 341+ 3362
 342+ 3362 32 11 33                     ld      (Saved_Layer), a     // store after MMUs
 343+ 3365              //  ______________________________________________________________________
 344+ 3365              // 2.3
 345+ 3365 21 00 60                     ld      hl, $6000
 346+ 3368 11 00 40                     ld      de, $4000
 347+ 336B CD BD 33                     call    Backup_Restore_MMU
 348+ 336E
 349+ 336E              //  ______________________________________________________________________
 350+ 336E              // 5.
 351+ 336E              // set LAYER 1,2
 352+ 336E D9                           exx
 353+ 336F 01 02 01                     ld      bc, $0102
 354+ 3372 CD 09 34                     call    Set_Layer
 355+ 3375
 356+ 3375              //  ______________________________________________________________________
 357+ 3375              // 6.
 358+ 3375              // Set current drive/directory
 359+ 3375
 360+ 3375              //              ld      a, $00
 361+ 3375              //              rst     8
 362+ 3375              //              defb    $89     ; m_getsetdrv
 363+ 3375              //              rst     8
 364+ 3375              //              defb    $89     ; m_getsetdrv
 365+ 3375
 366+ 3375 CD A3 33                     call    Set_Cur_Dir
 367+ 3378
 368+ 3378              //  ______________________________________________________________________
 369+ 3378              // 2.2
 370+ 3378              // Reserve pages from OS.
 371+ 3378
 372+ 3378 CD DE 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 373+ 337B CD CD 33                     call    Set_forth_MMU
 374+ 337E
 375+ 337E              //  ______________________________________________________________________
 376+ 337E              // 7.
 377+ 337E              // Get current handle via M_GETHANDLE and load ram
 378+ 337E CF                           rst     8
 379+ 337F 8D                           DEFB    $8d             ; M_GETHANDLE
 380+ 3380
 381+ 3380              //  ______________________________________________________________________
 382+ 3380              // 8.
 383+ 3380              // set MMU3-MMU7 to $20-$1C abd load ram7.bin
 384+ 3380
 385+ 3380              //              ld      hl, Filename_Ram7   ; because we are within a dot command
 386+ 3380              //              ld      b, $01          ; $01 request read access
 387+ 3380              //              ld      a, $2A          ; '*'
 388+ 3380              //              rst     8
 389+ 3380              //              DEFB    $9A             ; f_open
 390+ 3380
 391+ 3380 F5                           push    af
 392+ 3381 21 00 E0                     ld      hl, $E000
 393+ 3384 01 FF 1F                     ld      bc, $1FFF
 394+ 3387 CF                           rst     8
 395+ 3388 9D                           DEFB    $9D             ; f_read
 396+ 3389 F1                           pop     af
 397+ 338A CF                           rst     8
 398+ 338B 9B                           DEFB    $9B             ; f_close
 399+ 338C
 400+ 338C              //  ______________________________________________________________________
 401+ 338C              // 9.
 402+ 338C              // pre-set the four main 16-bit registers
 403+ 338C ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 404+ 3390 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 405+ 3394 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 406+ 3398 01 E3 32                     ld      bc, Cold_Start          // Instruction Pointer
 407+ 339B
 408+ 339B 3E 1A                        ld      a, 26
 409+ 339D D7                           rst     $10
 410+ 339E AF                           xor     a
 411+ 339F D7                           rst     $10
 412+ 33A0
 413+ 33A0 FB                           ei
 414+ 33A1
 415+ 33A1                          //  push    ix
 416+ 33A1                          //  pop     hl
 417+ 33A1                          //  rst     $20
 418+ 33A1                              next
 418+ 33A1 DD E9       >                jp      (ix)
 419+ 33A3
 420+ 33A3
 421+ 33A3              //  ______________________________________________________________________
 422+ 33A3              // Routine
 423+ 33A3              // set current directory  /tools/vForth
 424+ 33A3              Set_Cur_Dir:
 425+ 33A3 21 E7 32                     ld      hl, Tools_vForth_Directory
 426+ 33A6 11 00 40                     ld      de, $4000 // use some temporary safe zone
 427+ 33A9 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 428+ 33AC ED B0                        ldir
 429+ 33AE D9                           exx
 430+ 33AF 21 00 40                     ld      hl, $4000
 431+ 33B2                          //  ld      hl, Tools_vForth_Directory
 432+ 33B2 D9                           exx
 433+ 33B3 11 B1 01                     ld      de, $01B1
 434+ 33B6 0E 07                        ld      c, 7
 435+ 33B8 3E 00                        ld      a, 0
 436+ 33BA CF                           rst     8
 437+ 33BB 94                           db      $94 // carry flag set on success !
 438+ 33BC
 439+ 33BC C9                           ret
 440+ 33BD
 441+ 33BD              //  ______________________________________________________________________
 442+ 33BD              // Routine, safe backup
 443+ 33BD              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 444+ 33BD              Backup_Restore_MMU:
 445+ 33BD ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $8000
 446+ 33C1 01 00 20                     ld      bc, $2000
 447+ 33C4 ED B0                        ldir
 448+ 33C6 3A 0B 33                     ld      a, (Saved_MMU)
 449+ 33C9 ED 92 52                     nextreg $52, a
 450+ 33CC C9                           ret
 451+ 33CD
 452+ 33CD              //  ______________________________________________________________________
 453+ 33CD              // Routine
 454+ 33CD              // set MMU7 to $20 and laod ram7.bin
 455+ 33CD              Set_forth_MMU:
 456+ 33CD                      ////    nextreg $53, $28         ;   MMU3  = 24576
 457+ 33CD ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 458+ 33D1 ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 459+ 33D5 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 460+ 33D9 ED 91 57 20                  nextreg $57, $20         ;   MMU7
 461+ 33DD C9                           ret
 462+ 33DE
 463+ 33DE              //  ______________________________________________________________________
 464+ 33DE              // Routine:
 465+ 33DE              // reserve MMU pages
 466+ 33DE              Restore_Reserve_MMU:
 467+ 33DE 2E 1D                        ld      l, $1D      // first page
 468+ 33E0 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 469+ 33E2              Reserve_MMU_Loop:
 470+ 33E2 7D                           ld      a, l            // pass page through a
 471+ 33E3 D9                           exx
 472+ 33E4                               // parameters:
 473+ 33E4              Deallocate_MMU:
 474+ 33E4 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 475+ 33E7 5F                            ld      e, a           // E' is bank-id
 476+ 33E8 D9                           exx
 477+ 33E9 E5                           push    hl
 478+ 33EA
 479+ 33EA 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 480+ 33EC 3E 01                        ld      a, 1
 481+ 33EE 11 BD 01                     ld      de, $01BD  // IDE_BANK
 482+ 33F1 CF                           rst     8
 483+ 33F2 94                           db      $94     // M_P3DOS
 484+ 33F3
 485+ 33F3 E1                           pop     hl
 486+ 33F4 2C                           inc     l       // next page number
 487+ 33F5 25                           dec     h       // decrease counter.
 488+ 33F6 20 EA                        jr      nz, Reserve_MMU_Loop
 489+ 33F8 C9                           ret
 490+ 33F9
 491+ 33F9              //  ______________________________________________________________________
 492+ 33F9              // Routine
 493+ 33F9              // Input:  bc=$243B, a=reg, hl=array
 494+ 33F9              // Operation: set  hardware register  a  to value at  (hl)
 495+ 33F9              // Output: bc=$243B, a=a+1, hl=hl+1
 496+ 33F9              Put_MMU_status:
 497+ 33F9 56                           ld      d, (hl)
 498+ 33FA ED 79                        out     (c), a
 499+ 33FC 04                           inc     b        // 253Bh
 500+ 33FD ED 51                        out     (c), d
 501+ 33FF 05                           dec     b        // 243Bh
 502+ 3400 23                           inc     hl
 503+ 3401 3C                           inc     a
 504+ 3402 C9                           ret
 505+ 3403
 506+ 3403              //  ______________________________________________________________________
 507+ 3403              // Routine
 508+ 3403              // Input:  bc=$243B, a=reg, hl=array
 509+ 3403              // Operation: get current value of hardware register  a  and store at (hl)
 510+ 3403              // Output: bc=$243B, a=a+1, hl=hl+1
 511+ 3403              Get_MMU_status:
 512+ 3403              //              out     (c), a
 513+ 3403              //              inc     b        // 253Bh
 514+ 3403              //              in      d ,(c)
 515+ 3403              //              dec     b        // 243Bh
 516+ 3403 CD 3B 21                     call    NEXTREG_read
 517+ 3406 77                           ld      (hl), a
 518+ 3407 23                           inc     hl
 519+ 3408 C9                           ret
 520+ 3409
 521+ 3409              //  ______________________________________________________________________
 522+ 3409              // Routine
 523+ 3409              // set LAYER B,C
 524+ 3409              // Input: bc=$0102 for Layer 1,2
 525+ 3409              Set_Layer:
 526+ 3409 D9                           exx
 527+ 340A 11 D5 01                     ld      de, $01D5
 528+ 340D 0E 07                        ld      c, 7
 529+ 340F 3E 01                        ld      a, 1
 530+ 3411 CF                           rst     8
 531+ 3412 94                           db      $94
 532+ 3413                              // never stop scrolling: print chr$26;chr$0
 533+ 3413              //              ld      a, 26
 534+ 3413              //              rst     $10
 535+ 3413              //              ld      a, 00
 536+ 3413              //              rst     $10
 537+ 3413 C9                           ret
 538+ 3414
 539+ 3414              //  ______________________________________________________________________
 540+ 3414              //
 541+ 3414              // basic        --
 542+ 3414                              New_Def BASIC, "BASIC", is_code, is_normal
 542+ 3414             >
 542+ 3414             >Dict_Ptr        defl    $
 542+ 3414             >
 542+ 3414             >//              ______________________________________________________________________
 542+ 3414             >//              Heap part
 542+ 3414             >
 542+ 3414             >
 542+ 3414             >                org     (Heap_Ptr & $1FFF) + $E000
 542+ E987             >
 542+ E987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ E987             >Latest_Definition defl  Heap_Ptr
 542+ E987             >
 542+ E987             >                // dummy db directives used to calculate length of namec
 542+ E987 42 41 53 49 >                db      "BASIC"
 542+ E98B 43          >
 542+ E98C             >len_NFA         defl    $ - temp_NFA
 542+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ E987             >
 542+ E987 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ E988 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 542+ E98C 43          >
 542+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 542+ E98C C3          >                db      {b $} | END_BIT     // msb as name end
 542+ E98D             >
 542+ E98D 7E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 542+ E98F             >Prev_Ptr        defl    Heap_Ptr
 542+ E98F             >
 542+ E98F             >mirror_Ptr      defl    $
 542+ E98F             >
 542+ E98F 16 34       >                dw      Dict_Ptr + 2        // xt
 542+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 542+ E991             >
 542+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 542+ E991             >
 542+ E991             >//              ______________________________________________________________________
 542+ E991             >//              Dictionary part
 542+ E991             >
 542+ E991             >                org     Dict_Ptr
 542+ 3414             >
 542+ 3414 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 542+ 3416             >
 542+ 3416             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 3416 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 542+ 3416 ~           >
 542+ 3416 ~           >
 542+ 3416             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 3416             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 3416             >
 542+ 3416             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 3416
 544+ 3416              // using dot-command, no more needs to return bc
 545+ 3416              //              pop     bc                      // return  TOS  value to Basic
 546+ 3416
 547+ 3416 F3                           di
 548+ 3417
 549+ 3417 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 550+ 341A
 551+ 341A                              // address
 552+ 341A 21 0A 33                     ld      hl, Saved_Speed
 553+ 341D 01 3B 24                     ld      bc , $243B
 554+ 3420
 555+ 3420                              // set speed
 556+ 3420 3E 07                        ld      a, $07
 557+ 3422 CD F9 33                     call    Put_MMU_status
 558+ 3425
 559+ 3425                        //    inc     hl
 560+ 3425                        //    inc     hl
 561+ 3425                              // set MMU pages
 562+ 3425 3E 52                        ld      a, $52
 563+ 3427 1E 06                        ld      e, 6
 564+ 3429              MMU_put_loop:
 565+ 3429 CD F9 33                     call    Put_MMU_status
 566+ 342C 1D                           dec     e
 567+ 342D 20 FA                        jr      nz, MMU_put_loop
 568+ 342F              //  ______________________________________________________________________
 569+ 342F                              // restore layer ide mode
 570+ 342F 7E                           ld      a, (hl)
 571+ 3430
 572+ 3430 D9                           exx
 573+ 3431 47                           ld      b, a
 574+ 3432 0F                           rrca
 575+ 3433 0F                           rrca
 576+ 3434 E6 03                        and     3
 577+ 3436 4F                           ld      c, a
 578+ 3437 78                           ld      a, b
 579+ 3438 E6 03                        and     3
 580+ 343A 47                           ld      b, a
 581+ 343B CD 09 34                     call    Set_Layer
 582+ 343E
 583+ 343E              //  ______________________________________________________________________
 584+ 343E              //
 585+ 343E 21 00 40                     ld      hl, $4000
 586+ 3441 11 00 60                     ld      de, $6000
 587+ 3444 CD BD 33                     call    Backup_Restore_MMU
 588+ 3447              //  ______________________________________________________________________
 589+ 3447              //
 590+ 3447                              // free 8k pages
 591+ 3447 3E 03                        ld      a, 3
 592+ 3449 32 E5 33                     ld      (Deallocate_MMU+1), a
 593+ 344C CD DE 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 594+ 344F              //  ______________________________________________________________________
 595+ 344F
 596+ 344F                              // restore basic pointers
 597+ 344F E1                           pop     hl                      // restore h'l'
 598+ 3450 D9                           exx
 599+ 3451 E1                           pop     hl
 600+ 3452 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 601+ 3456 E5                           push    hl
 602+ 3457 FB                           ei
 603+ 3458              Exit_with_error:
 604+ 3458 AF                           xor     a
 605+ 3459 76                           halt
 606+ 345A C9                           ret                             // to where USR Basic was left
 607+ 345B
 608+ 345B              //  ______________________________________________________________________
 609+ 345B              //
 610+ 345B              // +-           n1 n2 -- n3
 611+ 345B              // leaves n1 with the sign of n2 as n3.
 612+ 345B                              Colon_Def PLUS_MINUS, "+-", is_normal
 612+ 345B             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 612+ 345B             >
 612+ 345B             >Dict_Ptr        defl    $
 612+ 345B             >
 612+ 345B             >//              ______________________________________________________________________
 612+ 345B             >//              Heap part
 612+ 345B             >
 612+ 345B             >
 612+ 345B             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E991             >
 612+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E991             >Latest_Definition defl  Heap_Ptr
 612+ E991             >
 612+ E991             >                // dummy db directives used to calculate length of namec
 612+ E991 2B 2D       >                db      "+-"
 612+ E993             >len_NFA         defl    $ - temp_NFA
 612+ E993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E991             >
 612+ E991 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E992 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 612+ E994             >                org     $-1                 // alter last byte of Name just above to set
 612+ E993 AD          >                db      {b $} | END_BIT     // msb as name end
 612+ E994             >
 612+ E994 87 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E996             >Prev_Ptr        defl    Heap_Ptr
 612+ E996             >
 612+ E996             >mirror_Ptr      defl    $
 612+ E996             >
 612+ E996 5D 34       >                dw      Dict_Ptr + 2        // xt
 612+ E998             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E998             >
 612+ E998             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E998             >
 612+ E998             >//              ______________________________________________________________________
 612+ E998             >//              Dictionary part
 612+ E998             >
 612+ E998             >                org     Dict_Ptr
 612+ 345B             >
 612+ 345B 96 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 345D             >
 612+ 345D             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 345D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 3460             >
 612+ 3460             >
 612+ 3460             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 3460             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 3460             >
 612+ 3460             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 3460 2D 25                        dw      ZLESS                   // 0<
 614+ 3462                                                              // if
 615+ 3462 8F 20                        dw      ZBRANCH
 616+ 3464 04 00                        dw      Plus_Minus_Endif - $
 617+ 3466 89 25                        dw          MINUS               //      minus
 618+ 3468              Plus_Minus_Endif:                               // endif
 619+ 3468 F5 24                        dw      EXIT                    // ;
 620+ 346A
 621+ 346A              //  ______________________________________________________________________
 622+ 346A              //
 623+ 346A              // d+-          d1 n -- d2
 624+ 346A              // leaves d1 with the sign of n as d2.
 625+ 346A                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 625+ 346A             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 625+ 346A             >
 625+ 346A             >Dict_Ptr        defl    $
 625+ 346A             >
 625+ 346A             >//              ______________________________________________________________________
 625+ 346A             >//              Heap part
 625+ 346A             >
 625+ 346A             >
 625+ 346A             >                org     (Heap_Ptr & $1FFF) + $E000
 625+ E998             >
 625+ E998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ E998             >Latest_Definition defl  Heap_Ptr
 625+ E998             >
 625+ E998             >                // dummy db directives used to calculate length of namec
 625+ E998 44 2B 2D    >                db      "D+-"
 625+ E99B             >len_NFA         defl    $ - temp_NFA
 625+ E99B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ E998             >
 625+ E998 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ E999 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 625+ E99C             >                org     $-1                 // alter last byte of Name just above to set
 625+ E99B AD          >                db      {b $} | END_BIT     // msb as name end
 625+ E99C             >
 625+ E99C 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 625+ E99E             >Prev_Ptr        defl    Heap_Ptr
 625+ E99E             >
 625+ E99E             >mirror_Ptr      defl    $
 625+ E99E             >
 625+ E99E 6C 34       >                dw      Dict_Ptr + 2        // xt
 625+ E9A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 625+ E9A0             >
 625+ E9A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 625+ E9A0             >
 625+ E9A0             >//              ______________________________________________________________________
 625+ E9A0             >//              Dictionary part
 625+ E9A0             >
 625+ E9A0             >                org     Dict_Ptr
 625+ 346A             >
 625+ 346A 9E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 625+ 346C             >
 625+ 346C             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 346C CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 346F             >
 625+ 346F             >
 625+ 346F             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 346F             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 346F             >
 625+ 346F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 346F 2D 25                        dw      ZLESS                   // 0<
 627+ 3471                                                              // if
 628+ 3471 8F 20                        dw      ZBRANCH
 629+ 3473 04 00                        dw      DPlus_Minus_Endif - $
 630+ 3475 97 25                        dw          DMINUS              //      dminus
 631+ 3477              DPlus_Minus_Endif:                              // endif
 632+ 3477 F5 24                        dw      EXIT                    // ;
 633+ 3479
 634+ 3479              //  ______________________________________________________________________
 635+ 3479              //
 636+ 3479              // abs          n1 -- n2
 637+ 3479                              Colon_Def ABS_OP, "ABS", is_normal
 637+ 3479             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 637+ 3479             >
 637+ 3479             >Dict_Ptr        defl    $
 637+ 3479             >
 637+ 3479             >//              ______________________________________________________________________
 637+ 3479             >//              Heap part
 637+ 3479             >
 637+ 3479             >
 637+ 3479             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ E9A0             >
 637+ E9A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ E9A0             >Latest_Definition defl  Heap_Ptr
 637+ E9A0             >
 637+ E9A0             >                // dummy db directives used to calculate length of namec
 637+ E9A0 41 42 53    >                db      "ABS"
 637+ E9A3             >len_NFA         defl    $ - temp_NFA
 637+ E9A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ E9A0             >
 637+ E9A0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ E9A1 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 637+ E9A4             >                org     $-1                 // alter last byte of Name just above to set
 637+ E9A3 D3          >                db      {b $} | END_BIT     // msb as name end
 637+ E9A4             >
 637+ E9A4 98 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ E9A6             >Prev_Ptr        defl    Heap_Ptr
 637+ E9A6             >
 637+ E9A6             >mirror_Ptr      defl    $
 637+ E9A6             >
 637+ E9A6 7B 34       >                dw      Dict_Ptr + 2        // xt
 637+ E9A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ E9A8             >
 637+ E9A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ E9A8             >
 637+ E9A8             >//              ______________________________________________________________________
 637+ E9A8             >//              Dictionary part
 637+ E9A8             >
 637+ E9A8             >                org     Dict_Ptr
 637+ 3479             >
 637+ 3479 A6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 347B             >
 637+ 347B             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 347B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 347E             >
 637+ 347E             >
 637+ 347E             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 347E             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 347E             >
 637+ 347E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 347E CE 25                        dw      DUP                     // dup
 639+ 3480 5D 34                        dw      PLUS_MINUS              // +-
 640+ 3482 F5 24                        dw      EXIT                    // ;
 641+ 3484
 642+ 3484              //  ______________________________________________________________________
 643+ 3484              //
 644+ 3484              // dabs         d1 -- d2
 645+ 3484                              Colon_Def DABS, "DABS", is_normal
 645+ 3484             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 645+ 3484             >
 645+ 3484             >Dict_Ptr        defl    $
 645+ 3484             >
 645+ 3484             >//              ______________________________________________________________________
 645+ 3484             >//              Heap part
 645+ 3484             >
 645+ 3484             >
 645+ 3484             >                org     (Heap_Ptr & $1FFF) + $E000
 645+ E9A8             >
 645+ E9A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ E9A8             >Latest_Definition defl  Heap_Ptr
 645+ E9A8             >
 645+ E9A8             >                // dummy db directives used to calculate length of namec
 645+ E9A8 44 41 42 53 >                db      "DABS"
 645+ E9AC             >len_NFA         defl    $ - temp_NFA
 645+ E9AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ E9A8             >
 645+ E9A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ E9A9 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 645+ E9AD             >                org     $-1                 // alter last byte of Name just above to set
 645+ E9AC D3          >                db      {b $} | END_BIT     // msb as name end
 645+ E9AD             >
 645+ E9AD A0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 645+ E9AF             >Prev_Ptr        defl    Heap_Ptr
 645+ E9AF             >
 645+ E9AF             >mirror_Ptr      defl    $
 645+ E9AF             >
 645+ E9AF 86 34       >                dw      Dict_Ptr + 2        // xt
 645+ E9B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 645+ E9B1             >
 645+ E9B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 645+ E9B1             >
 645+ E9B1             >//              ______________________________________________________________________
 645+ E9B1             >//              Dictionary part
 645+ E9B1             >
 645+ E9B1             >                org     Dict_Ptr
 645+ 3484             >
 645+ 3484 AF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 645+ 3486             >
 645+ 3486             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 3486 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 645+ 3489             >
 645+ 3489             >
 645+ 3489             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 3489             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 3489             >
 645+ 3489             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 3489 CE 25                        dw      DUP                     // dup
 647+ 348B 6C 34                        dw      DPLUS_MINUS             // d+-
 648+ 348D F5 24                        dw      EXIT                    // ;
 649+ 348F
 650+ 348F              //  ______________________________________________________________________
 651+ 348F              //
 652+ 348F              // m*           n1 n2 -- d
 653+ 348F              // multiply two integer giving a double
 654+ 348F                              Colon_Def MMUL, "M*", is_normal
 654+ 348F             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 654+ 348F             >
 654+ 348F             >Dict_Ptr        defl    $
 654+ 348F             >
 654+ 348F             >//              ______________________________________________________________________
 654+ 348F             >//              Heap part
 654+ 348F             >
 654+ 348F             >
 654+ 348F             >                org     (Heap_Ptr & $1FFF) + $E000
 654+ E9B1             >
 654+ E9B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ E9B1             >Latest_Definition defl  Heap_Ptr
 654+ E9B1             >
 654+ E9B1             >                // dummy db directives used to calculate length of namec
 654+ E9B1 4D 2A       >                db      "M*"
 654+ E9B3             >len_NFA         defl    $ - temp_NFA
 654+ E9B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ E9B1             >
 654+ E9B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ E9B2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 654+ E9B4             >                org     $-1                 // alter last byte of Name just above to set
 654+ E9B3 AA          >                db      {b $} | END_BIT     // msb as name end
 654+ E9B4             >
 654+ E9B4 A8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 654+ E9B6             >Prev_Ptr        defl    Heap_Ptr
 654+ E9B6             >
 654+ E9B6             >mirror_Ptr      defl    $
 654+ E9B6             >
 654+ E9B6 91 34       >                dw      Dict_Ptr + 2        // xt
 654+ E9B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 654+ E9B8             >
 654+ E9B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 654+ E9B8             >
 654+ E9B8             >//              ______________________________________________________________________
 654+ E9B8             >//              Dictionary part
 654+ E9B8             >
 654+ E9B8             >                org     Dict_Ptr
 654+ 348F             >
 654+ 348F B6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 654+ 3491             >
 654+ 3491             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 3491 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 3494             >
 654+ 3494             >
 654+ 3494             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 3494             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 3494             >
 654+ 3494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 3494 1D 26 D0 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 655+ 3498 FF 24
 656+ 349A 7B 34 C7 25                  dw      ABS_OP, SWAP            // abs swap
 657+ 349E 7B 34 5A 24                  dw      ABS_OP, UM_MUL          // abs um*
 658+ 34A2 0A 25 6C 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 659+ 34A6 F5 24                        dw      EXIT                    // ;
 660+ 34A8
 661+ 34A8              //  ______________________________________________________________________
 662+ 34A8              //
 663+ 34A8              // sm/rem       d n -- q r
 664+ 34A8              // Symmetric division: divides a double into n giving quotient q and remainder r
 665+ 34A8              // the remainder has the sign of d.
 666+ 34A8                              Colon_Def SMDIVM, "SM/REM", is_normal
 666+ 34A8             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 666+ 34A8             >
 666+ 34A8             >Dict_Ptr        defl    $
 666+ 34A8             >
 666+ 34A8             >//              ______________________________________________________________________
 666+ 34A8             >//              Heap part
 666+ 34A8             >
 666+ 34A8             >
 666+ 34A8             >                org     (Heap_Ptr & $1FFF) + $E000
 666+ E9B8             >
 666+ E9B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ E9B8             >Latest_Definition defl  Heap_Ptr
 666+ E9B8             >
 666+ E9B8             >                // dummy db directives used to calculate length of namec
 666+ E9B8 53 4D 2F 52 >                db      "SM/REM"
 666+ E9BC 45 4D       >
 666+ E9BE             >len_NFA         defl    $ - temp_NFA
 666+ E9BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ E9B8             >
 666+ E9B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ E9B9 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 666+ E9BD 45 4D       >
 666+ E9BF             >                org     $-1                 // alter last byte of Name just above to set
 666+ E9BE CD          >                db      {b $} | END_BIT     // msb as name end
 666+ E9BF             >
 666+ E9BF B1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 666+ E9C1             >Prev_Ptr        defl    Heap_Ptr
 666+ E9C1             >
 666+ E9C1             >mirror_Ptr      defl    $
 666+ E9C1             >
 666+ E9C1 AA 34       >                dw      Dict_Ptr + 2        // xt
 666+ E9C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 666+ E9C3             >
 666+ E9C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 666+ E9C3             >
 666+ E9C3             >//              ______________________________________________________________________
 666+ E9C3             >//              Dictionary part
 666+ E9C3             >
 666+ E9C3             >                org     Dict_Ptr
 666+ 34A8             >
 666+ 34A8 C1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 666+ 34AA             >
 666+ 34AA             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 34AA CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 34AD             >
 666+ 34AD             >
 666+ 34AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 34AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 34AD             >
 666+ 34AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 34AD AA 25 FF 24                  dw      OVER, TO_R, TO_R        // over >r >r
 667+ 34B1 FF 24
 668+ 34B3 86 34 15 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 668+ 34B7 7B 34
 669+ 34B9 82 24                        dw      UMDIVMOD                // um/mod
 670+ 34BB 0A 25                        dw      R_TO                    // r>
 671+ 34BD 15 25 D0 24                  dw      R_OP, XOR_OP            // r xor
 672+ 34C1 5D 34 C7 25                  dw      PLUS_MINUS, SWAP        // +- swap
 673+ 34C5 0A 25                        dw      R_TO                    // r>
 674+ 34C7 5D 34 C7 25                  dw      PLUS_MINUS, SWAP        // +- swap
 675+ 34CB F5 24                        dw      EXIT                    // ;
 676+ 34CD
 677+ 34CD              //  ______________________________________________________________________
 678+ 34CD              //
 679+ 34CD              // fm/mod       d n -- q r
 680+ 34CD              // Floored division: divides a double into n giving quotient q and remainder r
 681+ 34CD              // the remainder has the sign of d.
 682+ 34CD                              Colon_Def FMDIVM, "FM/MOD", is_normal
 682+ 34CD             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 682+ 34CD             >
 682+ 34CD             >Dict_Ptr        defl    $
 682+ 34CD             >
 682+ 34CD             >//              ______________________________________________________________________
 682+ 34CD             >//              Heap part
 682+ 34CD             >
 682+ 34CD             >
 682+ 34CD             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E9C3             >
 682+ E9C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E9C3             >Latest_Definition defl  Heap_Ptr
 682+ E9C3             >
 682+ E9C3             >                // dummy db directives used to calculate length of namec
 682+ E9C3 46 4D 2F 4D >                db      "FM/MOD"
 682+ E9C7 4F 44       >
 682+ E9C9             >len_NFA         defl    $ - temp_NFA
 682+ E9C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E9C3             >
 682+ E9C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E9C4 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 682+ E9C8 4F 44       >
 682+ E9CA             >                org     $-1                 // alter last byte of Name just above to set
 682+ E9C9 C4          >                db      {b $} | END_BIT     // msb as name end
 682+ E9CA             >
 682+ E9CA B8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E9CC             >Prev_Ptr        defl    Heap_Ptr
 682+ E9CC             >
 682+ E9CC             >mirror_Ptr      defl    $
 682+ E9CC             >
 682+ E9CC CF 34       >                dw      Dict_Ptr + 2        // xt
 682+ E9CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E9CE             >
 682+ E9CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E9CE             >
 682+ E9CE             >//              ______________________________________________________________________
 682+ E9CE             >//              Dictionary part
 682+ E9CE             >
 682+ E9CE             >                org     Dict_Ptr
 682+ 34CD             >
 682+ 34CD CC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 34CF             >
 682+ 34CF             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 34CF CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 34D2             >
 682+ 34D2             >
 682+ 34D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 34D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 34D2             >
 682+ 34D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 34D2 CE 25 FF 24                  dw      DUP, TO_R               // dup >r
 684+ 34D6 AA 34                        dw      SMDIVM
 685+ 34D8 AA 25 CE 25                  dw      OVER, DUP
 686+ 34DC 1A 25 1A 25                  dw      ZEQUAL, ZEQUAL
 687+ 34E0 C7 25 2D 25                  dw      SWAP, ZLESS
 688+ 34E4 15 25 2D 25                  dw      R_OP, ZLESS
 689+ 34E8 D0 24 B5 24                  dw      XOR_OP, AND_OP
 690+ 34EC 8F 20                        dw      ZBRANCH
 691+ 34EE 10 00                        dw      Fm_Mod_Else - $
 692+ 34F0 68 25                        dw          ONE_SUBTRACT
 693+ 34F2 C7 25 0A 25                  dw          SWAP, R_TO
 694+ 34F6 48 25 C7 25                  dw          PLUS, SWAP
 695+ 34FA 82 20                        dw      BRANCH
 696+ 34FC 06 00                        dw      Fm_Mod_Endif - $
 697+ 34FE              Fm_Mod_Else:
 698+ 34FE 0A 25 B3 25                  dw          R_TO, DROP
 699+ 3502              Fm_Mod_Endif:
 700+ 3502 F5 24                        dw      EXIT
 701+ 3504              //              dw      TWO_DUP                 // 2dup
 702+ 3504              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 703+ 3504              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 704+ 3504              //              dw      UMDIVMOD                // um/mod
 705+ 3504              //              dw      SWAP                    // swap
 706+ 3504              //              dw      II, ZLESS               // i'
 707+ 3504              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 708+ 3504              //              dw      R_TO                    // r>
 709+ 3504              //              dw      PLUS_MINUS, SWAP        // +- swap
 710+ 3504              //              dw      R_OP                    // r@
 711+ 3504              //              dw      ZLESS                   // i'
 712+ 3504              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 713+ 3504              //              dw      R_TO                    // r>
 714+ 3504              //              dw      PLUS_MINUS              // +- swap
 715+ 3504              //              dw      EXIT                    // ;
 716+ 3504
 717+ 3504              //  ______________________________________________________________________
 718+ 3504              //
 719+ 3504              // m/mod        d n -- q r
 720+ 3504              // multiply two integer giving a double
 721+ 3504                              Colon_Def MDIVM, "M/MOD", is_normal
 721+ 3504             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 721+ 3504             >
 721+ 3504             >Dict_Ptr        defl    $
 721+ 3504             >
 721+ 3504             >//              ______________________________________________________________________
 721+ 3504             >//              Heap part
 721+ 3504             >
 721+ 3504             >
 721+ 3504             >                org     (Heap_Ptr & $1FFF) + $E000
 721+ E9CE             >
 721+ E9CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ E9CE             >Latest_Definition defl  Heap_Ptr
 721+ E9CE             >
 721+ E9CE             >                // dummy db directives used to calculate length of namec
 721+ E9CE 4D 2F 4D 4F >                db      "M/MOD"
 721+ E9D2 44          >
 721+ E9D3             >len_NFA         defl    $ - temp_NFA
 721+ E9D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ E9CE             >
 721+ E9CE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ E9CF 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 721+ E9D3 44          >
 721+ E9D4             >                org     $-1                 // alter last byte of Name just above to set
 721+ E9D3 C4          >                db      {b $} | END_BIT     // msb as name end
 721+ E9D4             >
 721+ E9D4 C3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 721+ E9D6             >Prev_Ptr        defl    Heap_Ptr
 721+ E9D6             >
 721+ E9D6             >mirror_Ptr      defl    $
 721+ E9D6             >
 721+ E9D6 06 35       >                dw      Dict_Ptr + 2        // xt
 721+ E9D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 721+ E9D8             >
 721+ E9D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 721+ E9D8             >
 721+ E9D8             >//              ______________________________________________________________________
 721+ E9D8             >//              Dictionary part
 721+ E9D8             >
 721+ E9D8             >                org     Dict_Ptr
 721+ 3504             >
 721+ 3504 D6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 721+ 3506             >
 721+ 3506             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 3506 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 3509             >
 721+ 3509             >
 721+ 3509             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 3509             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 3509             >
 721+ 3509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 3509 AA 34                        dw      SMDIVM
 723+ 350B F5 24                        dw      EXIT                    // ;
 724+ 350D
 725+ 350D              //  ______________________________________________________________________
 726+ 350D              //
 727+ 350D              // m/           d n -- q
 728+ 350D              // multiply two integer giving a double
 729+ 350D                              Colon_Def MDIV, "M/", is_normal
 729+ 350D             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 729+ 350D             >
 729+ 350D             >Dict_Ptr        defl    $
 729+ 350D             >
 729+ 350D             >//              ______________________________________________________________________
 729+ 350D             >//              Heap part
 729+ 350D             >
 729+ 350D             >
 729+ 350D             >                org     (Heap_Ptr & $1FFF) + $E000
 729+ E9D8             >
 729+ E9D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 729+ E9D8             >Latest_Definition defl  Heap_Ptr
 729+ E9D8             >
 729+ E9D8             >                // dummy db directives used to calculate length of namec
 729+ E9D8 4D 2F       >                db      "M/"
 729+ E9DA             >len_NFA         defl    $ - temp_NFA
 729+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 729+ E9D8             >
 729+ E9D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 729+ E9D9 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 729+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 729+ E9DA AF          >                db      {b $} | END_BIT     // msb as name end
 729+ E9DB             >
 729+ E9DB CE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 729+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 729+ E9DD             >
 729+ E9DD             >mirror_Ptr      defl    $
 729+ E9DD             >
 729+ E9DD 0F 35       >                dw      Dict_Ptr + 2        // xt
 729+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 729+ E9DF             >
 729+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 729+ E9DF             >
 729+ E9DF             >//              ______________________________________________________________________
 729+ E9DF             >//              Dictionary part
 729+ E9DF             >
 729+ E9DF             >                org     Dict_Ptr
 729+ 350D             >
 729+ 350D DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 729+ 350F             >
 729+ 350F             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 729+ 350F CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 729+ 3512             >
 729+ 3512             >
 729+ 3512             >                endif           ; ok        // for other definitions it "points" the correct handler
 729+ 3512             >                // Use of "; ok" to suppress "warning[fwdref]"
 729+ 3512             >
 729+ 3512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 730+ 3512 06 35 B8 25                  dw      MDIVM, NIP
 731+ 3516 F5 24                        dw      EXIT                    // ;
 732+ 3518
 733+ 3518              //  ______________________________________________________________________
 734+ 3518              //
 735+ 3518              // *            n1 n2 -- n3
 736+ 3518              // multiply two integer
 737+ 3518                              Colon_Def MUL, "*", is_normal
 737+ 3518             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 737+ 3518             >
 737+ 3518             >Dict_Ptr        defl    $
 737+ 3518             >
 737+ 3518             >//              ______________________________________________________________________
 737+ 3518             >//              Heap part
 737+ 3518             >
 737+ 3518             >
 737+ 3518             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E9DF             >
 737+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E9DF             >Latest_Definition defl  Heap_Ptr
 737+ E9DF             >
 737+ E9DF             >                // dummy db directives used to calculate length of namec
 737+ E9DF 2A          >                db      "*"
 737+ E9E0             >len_NFA         defl    $ - temp_NFA
 737+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E9DF             >
 737+ E9DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E9E0 2A          >                db      "*"               // name string in 7-bit ascii, but
 737+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 737+ E9E0 AA          >                db      {b $} | END_BIT     // msb as name end
 737+ E9E1             >
 737+ E9E1 D8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 737+ E9E3             >
 737+ E9E3             >mirror_Ptr      defl    $
 737+ E9E3             >
 737+ E9E3 1A 35       >                dw      Dict_Ptr + 2        // xt
 737+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E9E5             >
 737+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E9E5             >
 737+ E9E5             >//              ______________________________________________________________________
 737+ E9E5             >//              Dictionary part
 737+ E9E5             >
 737+ E9E5             >                org     Dict_Ptr
 737+ 3518             >
 737+ 3518 E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 351A             >
 737+ 351A             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 351A CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 351D             >
 737+ 351D             >
 737+ 351D             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 351D             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 351D             >
 737+ 351D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 351D 91 34 B3 25                  dw      MMUL, DROP              // m* drop
 739+ 3521 F5 24                        dw      EXIT                    // ;
 740+ 3523
 741+ 3523              //  ______________________________________________________________________
 742+ 3523              //
 743+ 3523              // /mod         n1 n2 -- n3 n4
 744+ 3523              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 745+ 3523              // The remainder has the sign of n1
 746+ 3523                              Colon_Def DIVMOD, "/MOD", is_normal
 746+ 3523             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 746+ 3523             >
 746+ 3523             >Dict_Ptr        defl    $
 746+ 3523             >
 746+ 3523             >//              ______________________________________________________________________
 746+ 3523             >//              Heap part
 746+ 3523             >
 746+ 3523             >
 746+ 3523             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E9E5             >
 746+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E9E5             >Latest_Definition defl  Heap_Ptr
 746+ E9E5             >
 746+ E9E5             >                // dummy db directives used to calculate length of namec
 746+ E9E5 2F 4D 4F 44 >                db      "/MOD"
 746+ E9E9             >len_NFA         defl    $ - temp_NFA
 746+ E9E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E9E5             >
 746+ E9E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E9E6 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 746+ E9EA             >                org     $-1                 // alter last byte of Name just above to set
 746+ E9E9 C4          >                db      {b $} | END_BIT     // msb as name end
 746+ E9EA             >
 746+ E9EA DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E9EC             >Prev_Ptr        defl    Heap_Ptr
 746+ E9EC             >
 746+ E9EC             >mirror_Ptr      defl    $
 746+ E9EC             >
 746+ E9EC 25 35       >                dw      Dict_Ptr + 2        // xt
 746+ E9EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E9EE             >
 746+ E9EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E9EE             >
 746+ E9EE             >//              ______________________________________________________________________
 746+ E9EE             >//              Dictionary part
 746+ E9EE             >
 746+ E9EE             >                org     Dict_Ptr
 746+ 3523             >
 746+ 3523 EC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 3525             >
 746+ 3525             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 3525 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 3528             >
 746+ 3528             >
 746+ 3528             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 3528             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 3528             >
 746+ 3528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 3528 FF 24 90 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 747+ 352C 0A 25
 748+ 352E 06 35                        dw      MDIVM                   // m/mod
 749+ 3530 F5 24                        dw      EXIT                    // ;
 750+ 3532
 751+ 3532              //  ______________________________________________________________________
 752+ 3532              //
 753+ 3532              // /            n1 n2 -- n3
 754+ 3532              // division
 755+ 3532                              Colon_Def DIV, "/", is_normal
 755+ 3532             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 755+ 3532             >
 755+ 3532             >Dict_Ptr        defl    $
 755+ 3532             >
 755+ 3532             >//              ______________________________________________________________________
 755+ 3532             >//              Heap part
 755+ 3532             >
 755+ 3532             >
 755+ 3532             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E9EE             >
 755+ E9EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E9EE             >Latest_Definition defl  Heap_Ptr
 755+ E9EE             >
 755+ E9EE             >                // dummy db directives used to calculate length of namec
 755+ E9EE 2F          >                db      "/"
 755+ E9EF             >len_NFA         defl    $ - temp_NFA
 755+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E9EE             >
 755+ E9EE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E9EF 2F          >                db      "/"               // name string in 7-bit ascii, but
 755+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 755+ E9EF AF          >                db      {b $} | END_BIT     // msb as name end
 755+ E9F0             >
 755+ E9F0 E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 755+ E9F2             >
 755+ E9F2             >mirror_Ptr      defl    $
 755+ E9F2             >
 755+ E9F2 34 35       >                dw      Dict_Ptr + 2        // xt
 755+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E9F4             >
 755+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E9F4             >
 755+ E9F4             >//              ______________________________________________________________________
 755+ E9F4             >//              Dictionary part
 755+ E9F4             >
 755+ E9F4             >                org     Dict_Ptr
 755+ 3532             >
 755+ 3532 F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 3534             >
 755+ 3534             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 3534 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 3537             >
 755+ 3537             >
 755+ 3537             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 3537             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 3537             >
 755+ 3537             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 3537 25 35 B8 25                  dw      DIVMOD, NIP             // /mod nip
 757+ 353B F5 24                        dw      EXIT                    // ;
 758+ 353D
 759+ 353D              //  ______________________________________________________________________
 760+ 353D              //
 761+ 353D              // mod          n1 n2 -- n3
 762+ 353D                              Colon_Def MOD, "MOD", is_normal
 762+ 353D             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 762+ 353D             >
 762+ 353D             >Dict_Ptr        defl    $
 762+ 353D             >
 762+ 353D             >//              ______________________________________________________________________
 762+ 353D             >//              Heap part
 762+ 353D             >
 762+ 353D             >
 762+ 353D             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E9F4             >
 762+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E9F4             >Latest_Definition defl  Heap_Ptr
 762+ E9F4             >
 762+ E9F4             >                // dummy db directives used to calculate length of namec
 762+ E9F4 4D 4F 44    >                db      "MOD"
 762+ E9F7             >len_NFA         defl    $ - temp_NFA
 762+ E9F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E9F4             >
 762+ E9F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E9F5 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 762+ E9F8             >                org     $-1                 // alter last byte of Name just above to set
 762+ E9F7 C4          >                db      {b $} | END_BIT     // msb as name end
 762+ E9F8             >
 762+ E9F8 EE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E9FA             >Prev_Ptr        defl    Heap_Ptr
 762+ E9FA             >
 762+ E9FA             >mirror_Ptr      defl    $
 762+ E9FA             >
 762+ E9FA 3F 35       >                dw      Dict_Ptr + 2        // xt
 762+ E9FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E9FC             >
 762+ E9FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E9FC             >
 762+ E9FC             >//              ______________________________________________________________________
 762+ E9FC             >//              Dictionary part
 762+ E9FC             >
 762+ E9FC             >                org     Dict_Ptr
 762+ 353D             >
 762+ 353D FA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 353F             >
 762+ 353F             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 353F CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 3542             >
 762+ 3542             >
 762+ 3542             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 3542             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 3542             >
 762+ 3542             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 3542 25 35 B3 25                  dw      DIVMOD, DROP            // /mod drop
 764+ 3546 F5 24                        dw      EXIT                    // ;
 765+ 3548
 766+ 3548              //  ______________________________________________________________________
 767+ 3548              //
 768+ 3548              // */mod        n1 n2 n3 -- n4 n5
 769+ 3548              // leaves the quotient n5 and the remainder n4 of the operation
 770+ 3548              // (n1 * n2) / n3. The intermediate passage through a double number
 771+ 3548              // avoids loss of precision
 772+ 3548                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 772+ 3548             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 772+ 3548             >
 772+ 3548             >Dict_Ptr        defl    $
 772+ 3548             >
 772+ 3548             >//              ______________________________________________________________________
 772+ 3548             >//              Heap part
 772+ 3548             >
 772+ 3548             >
 772+ 3548             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E9FC             >
 772+ E9FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E9FC             >Latest_Definition defl  Heap_Ptr
 772+ E9FC             >
 772+ E9FC             >                // dummy db directives used to calculate length of namec
 772+ E9FC 2A 2F 4D 4F >                db      "*/MOD"
 772+ EA00 44          >
 772+ EA01             >len_NFA         defl    $ - temp_NFA
 772+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E9FC             >
 772+ E9FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E9FD 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 772+ EA01 44          >
 772+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 772+ EA01 C4          >                db      {b $} | END_BIT     // msb as name end
 772+ EA02             >
 772+ EA02 F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ EA04             >Prev_Ptr        defl    Heap_Ptr
 772+ EA04             >
 772+ EA04             >mirror_Ptr      defl    $
 772+ EA04             >
 772+ EA04 4A 35       >                dw      Dict_Ptr + 2        // xt
 772+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ EA06             >
 772+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ EA06             >
 772+ EA06             >//              ______________________________________________________________________
 772+ EA06             >//              Dictionary part
 772+ EA06             >
 772+ EA06             >                org     Dict_Ptr
 772+ 3548             >
 772+ 3548 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 354A             >
 772+ 354A             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 354A CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 354D             >
 772+ 354D             >
 772+ 354D             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 354D             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 354D             >
 772+ 354D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 354D FF 24 91 34                  dw      TO_R, MMUL              // >r  m*
 774+ 3551 0A 25 06 35                  dw      R_TO, MDIVM             // r>  m/mod
 775+ 3555 F5 24                        dw      EXIT                    // ;
 776+ 3557
 777+ 3557              //  ______________________________________________________________________
 778+ 3557              //
 779+ 3557              // */          n1 n2 n3 -- n4
 780+ 3557              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 781+ 3557                              Colon_Def MUL_DIV, "*/", is_normal
 781+ 3557             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 781+ 3557             >
 781+ 3557             >Dict_Ptr        defl    $
 781+ 3557             >
 781+ 3557             >//              ______________________________________________________________________
 781+ 3557             >//              Heap part
 781+ 3557             >
 781+ 3557             >
 781+ 3557             >                org     (Heap_Ptr & $1FFF) + $E000
 781+ EA06             >
 781+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ EA06             >Latest_Definition defl  Heap_Ptr
 781+ EA06             >
 781+ EA06             >                // dummy db directives used to calculate length of namec
 781+ EA06 2A 2F       >                db      "*/"
 781+ EA08             >len_NFA         defl    $ - temp_NFA
 781+ EA08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ EA06             >
 781+ EA06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ EA07 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 781+ EA09             >                org     $-1                 // alter last byte of Name just above to set
 781+ EA08 AF          >                db      {b $} | END_BIT     // msb as name end
 781+ EA09             >
 781+ EA09 FC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 781+ EA0B             >Prev_Ptr        defl    Heap_Ptr
 781+ EA0B             >
 781+ EA0B             >mirror_Ptr      defl    $
 781+ EA0B             >
 781+ EA0B 59 35       >                dw      Dict_Ptr + 2        // xt
 781+ EA0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 781+ EA0D             >
 781+ EA0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 781+ EA0D             >
 781+ EA0D             >//              ______________________________________________________________________
 781+ EA0D             >//              Dictionary part
 781+ EA0D             >
 781+ EA0D             >                org     Dict_Ptr
 781+ 3557             >
 781+ 3557 0B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 781+ 3559             >
 781+ 3559             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 3559 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 781+ 355C             >
 781+ 355C             >
 781+ 355C             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 355C             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 355C             >
 781+ 355C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 355C 4A 35                        dw     MUL_DIV_MOD              // */mod
 783+ 355E B8 25                        dw     NIP                      // nip
 784+ 3560 F5 24                        dw     EXIT                     // ;
 785+ 3562
 786+ 3562
 787+ 3562              //  ______________________________________________________________________
 788+ 3562              //
 789+ 3562              // m/mod        ud1 u2 -- u3 ud4
 790+ 3562              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 791+ 3562              // All terms are unsigned.
 792+ 3562              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 793+ 3562              //              dw      TO_R                    // >r           ( ud1 )
 794+ 3562              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 795+ 3562              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 796+ 3562              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 797+ 3562              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 798+ 3562              //              dw      EXIT                    // ;
 799+ 3562
 800+ 3562              //  ______________________________________________________________________
 801+ 3562              //
 802+ 3562              // (line)       n1 n2 -- a b
 803+ 3562              // sends the line n1 of block n2 to the disk buffer.
 804+ 3562              // it returns the address a and ca counter b = C/L meaning a whole line.
 805+ 3562                              Colon_Def CLINE, "(LINE)", is_normal
 805+ 3562             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 805+ 3562             >
 805+ 3562             >Dict_Ptr        defl    $
 805+ 3562             >
 805+ 3562             >//              ______________________________________________________________________
 805+ 3562             >//              Heap part
 805+ 3562             >
 805+ 3562             >
 805+ 3562             >                org     (Heap_Ptr & $1FFF) + $E000
 805+ EA0D             >
 805+ EA0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ EA0D             >Latest_Definition defl  Heap_Ptr
 805+ EA0D             >
 805+ EA0D             >                // dummy db directives used to calculate length of namec
 805+ EA0D 28 4C 49 4E >                db      "(LINE)"
 805+ EA11 45 29       >
 805+ EA13             >len_NFA         defl    $ - temp_NFA
 805+ EA13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ EA0D             >
 805+ EA0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ EA0E 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 805+ EA12 45 29       >
 805+ EA14             >                org     $-1                 // alter last byte of Name just above to set
 805+ EA13 A9          >                db      {b $} | END_BIT     // msb as name end
 805+ EA14             >
 805+ EA14 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 805+ EA16             >Prev_Ptr        defl    Heap_Ptr
 805+ EA16             >
 805+ EA16             >mirror_Ptr      defl    $
 805+ EA16             >
 805+ EA16 64 35       >                dw      Dict_Ptr + 2        // xt
 805+ EA18             >Heap_Ptr        defl    $ - $E000           // save current HP
 805+ EA18             >
 805+ EA18             >Current_HP      defl  $ - $E000             // used to set HP once!
 805+ EA18             >
 805+ EA18             >//              ______________________________________________________________________
 805+ EA18             >//              Dictionary part
 805+ EA18             >
 805+ EA18             >                org     Dict_Ptr
 805+ 3562             >
 805+ 3562 16 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 805+ 3564             >
 805+ 3564             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 3564 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 805+ 3567             >
 805+ 3567             >
 805+ 3567             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 3567             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 3567             >
 805+ 3567             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 3567 FF 24                        dw      TO_R                    // >r
 807+ 3569 61 27                        dw      CL                      // c/l
 808+ 356B 68 27 4A 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 809+ 356F 0A 25                        dw      R_TO                    // r>
 810+ 3571 6F 27 1A 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 810+ 3575 48 25
 811+ 3577 4D 37                        dw      BLOCK                   // block   ( forward )
 812+ 3579 48 25                        dw      PLUS                    // +
 813+ 357B 61 27                        dw      CL                      // c/l
 814+ 357D F5 24                        dw      EXIT                    // ;
 815+ 357F
 816+ 357F              //  ______________________________________________________________________
 817+ 357F              //
 818+ 357F              // .line        n1 n2 --
 819+ 357F              // Sends to output line  n1  of screen n2.
 820+ 357F                              Colon_Def DOT_LINE, ".LINE", is_normal
 820+ 357F             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 820+ 357F             >
 820+ 357F             >Dict_Ptr        defl    $
 820+ 357F             >
 820+ 357F             >//              ______________________________________________________________________
 820+ 357F             >//              Heap part
 820+ 357F             >
 820+ 357F             >
 820+ 357F             >                org     (Heap_Ptr & $1FFF) + $E000
 820+ EA18             >
 820+ EA18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 820+ EA18             >Latest_Definition defl  Heap_Ptr
 820+ EA18             >
 820+ EA18             >                // dummy db directives used to calculate length of namec
 820+ EA18 2E 4C 49 4E >                db      ".LINE"
 820+ EA1C 45          >
 820+ EA1D             >len_NFA         defl    $ - temp_NFA
 820+ EA1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 820+ EA18             >
 820+ EA18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 820+ EA19 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 820+ EA1D 45          >
 820+ EA1E             >                org     $-1                 // alter last byte of Name just above to set
 820+ EA1D C5          >                db      {b $} | END_BIT     // msb as name end
 820+ EA1E             >
 820+ EA1E 0D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 820+ EA20             >Prev_Ptr        defl    Heap_Ptr
 820+ EA20             >
 820+ EA20             >mirror_Ptr      defl    $
 820+ EA20             >
 820+ EA20 81 35       >                dw      Dict_Ptr + 2        // xt
 820+ EA22             >Heap_Ptr        defl    $ - $E000           // save current HP
 820+ EA22             >
 820+ EA22             >Current_HP      defl  $ - $E000             // used to set HP once!
 820+ EA22             >
 820+ EA22             >//              ______________________________________________________________________
 820+ EA22             >//              Dictionary part
 820+ EA22             >
 820+ EA22             >                org     Dict_Ptr
 820+ 357F             >
 820+ 357F 20 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 820+ 3581             >
 820+ 3581             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 820+ 3581 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 820+ 3584             >
 820+ 3584             >
 820+ 3584             >                endif           ; ok        // for other definitions it "points" the correct handler
 820+ 3584             >                // Use of "; ok" to suppress "warning[fwdref]"
 820+ 3584             >
 820+ 3584             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 821+ 3584 64 35 3F 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 821+ 3588 28 2C
 822+ 358A F5 24                        dw      EXIT                    // ;
 823+ 358C
 824+ 358C              //  ______________________________________________________________________
 825+ 358C              //
 826+ 358C              // message       n1 n2 --
 827+ 358C              // prints error message to current channel.
 828+ 358C              // if WARNING is 0, prints "MSG#n".
 829+ 358C              // if WARNING is 1, prints line n of screen 4.
 830+ 358C              // if WARNING is -1, see ERROR
 831+ 358C              // value can be negative or beyond block 4.
 832+ 358C                              Colon_Def MESSAGE, "MESSAGE", is_normal
 832+ 358C             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 832+ 358C             >
 832+ 358C             >Dict_Ptr        defl    $
 832+ 358C             >
 832+ 358C             >//              ______________________________________________________________________
 832+ 358C             >//              Heap part
 832+ 358C             >
 832+ 358C             >
 832+ 358C             >                org     (Heap_Ptr & $1FFF) + $E000
 832+ EA22             >
 832+ EA22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 832+ EA22             >Latest_Definition defl  Heap_Ptr
 832+ EA22             >
 832+ EA22             >                // dummy db directives used to calculate length of namec
 832+ EA22 4D 45 53 53 >                db      "MESSAGE"
 832+ EA26 41 47 45    >
 832+ EA29             >len_NFA         defl    $ - temp_NFA
 832+ EA29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 832+ EA22             >
 832+ EA22 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 832+ EA23 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 832+ EA27 41 47 45    >
 832+ EA2A             >                org     $-1                 // alter last byte of Name just above to set
 832+ EA29 C5          >                db      {b $} | END_BIT     // msb as name end
 832+ EA2A             >
 832+ EA2A 18 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 832+ EA2C             >Prev_Ptr        defl    Heap_Ptr
 832+ EA2C             >
 832+ EA2C             >mirror_Ptr      defl    $
 832+ EA2C             >
 832+ EA2C 8E 35       >                dw      Dict_Ptr + 2        // xt
 832+ EA2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 832+ EA2E             >
 832+ EA2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 832+ EA2E             >
 832+ EA2E             >//              ______________________________________________________________________
 832+ EA2E             >//              Dictionary part
 832+ EA2E             >
 832+ EA2E             >                org     Dict_Ptr
 832+ 358C             >
 832+ 358C 2C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 832+ 358E             >
 832+ 358E             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 832+ 358E CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 832+ 3591             >
 832+ 3591             >
 832+ 3591             >                endif           ; ok        // for other definitions it "points" the correct handler
 832+ 3591             >                // Use of "; ok" to suppress "warning[fwdref]"
 832+ 3591             >
 832+ 3591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 833+ 3591 A8 27 3F 26                  dw      WARNING, FETCH          // warning @
 834+ 3595                                                              // if
 835+ 3595 8F 20                        dw      ZBRANCH
 836+ 3597 12 00                        dw      Message_Else - $
 837+ 3599 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 837+ 359D 48 25
 838+ 359F 45 27                        dw          TWO                 //      2
 839+ 35A1 81 35                        dw          DOT_LINE            //      .line
 840+ 35A3 2D 29                        dw          SPACE               //      space
 841+ 35A5                                                              // else
 842+ 35A5
 843+ 35A5 82 20                        dw      BRANCH
 844+ 35A7 0B 00                        dw      Message_ENdif - $
 845+ 35A9              Message_Else:
 846+ 35A9 C5 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 847+ 35AB 04 6D 73 67                  db          4, "msg#"
 847+ 35AF 23
 848+ 35B0 A0 3C                        dw          DOT                 //      .  ( forward )
 849+ 35B2              Message_ENdif:                                  // endif
 850+ 35B2 F5 24                        dw      EXIT                    // ;
 851+ 35B4
 852+ 35B4
 853+ 35B4              //  ______________________________________________________________________
 854+ 35B4              //
 855+ 35B4              // device
 856+ 35B4                              Variable_Def DEVICE,   "DEVICE",   2
 856+ 35B4             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 856+ 35B4             >
 856+ 35B4             >Dict_Ptr        defl    $
 856+ 35B4             >
 856+ 35B4             >//              ______________________________________________________________________
 856+ 35B4             >//              Heap part
 856+ 35B4             >
 856+ 35B4             >
 856+ 35B4             >                org     (Heap_Ptr & $1FFF) + $E000
 856+ EA2E             >
 856+ EA2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 856+ EA2E             >Latest_Definition defl  Heap_Ptr
 856+ EA2E             >
 856+ EA2E             >                // dummy db directives used to calculate length of namec
 856+ EA2E 44 45 56 49 >                db      "DEVICE"
 856+ EA32 43 45       >
 856+ EA34             >len_NFA         defl    $ - temp_NFA
 856+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 856+ EA2E             >
 856+ EA2E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 856+ EA2F 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 856+ EA33 43 45       >
 856+ EA35             >                org     $-1                 // alter last byte of Name just above to set
 856+ EA34 C5          >                db      {b $} | END_BIT     // msb as name end
 856+ EA35             >
 856+ EA35 22 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 856+ EA37             >Prev_Ptr        defl    Heap_Ptr
 856+ EA37             >
 856+ EA37             >mirror_Ptr      defl    $
 856+ EA37             >
 856+ EA37 B6 35       >                dw      Dict_Ptr + 2        // xt
 856+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
 856+ EA39             >
 856+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
 856+ EA39             >
 856+ EA39             >//              ______________________________________________________________________
 856+ EA39             >//              Dictionary part
 856+ EA39             >
 856+ EA39             >                org     Dict_Ptr
 856+ 35B4             >
 856+ 35B4 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 856+ 35B6             >
 856+ 35B6             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 856+ 35B6 CD 1E 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 856+ 35B9             >
 856+ 35B9             >
 856+ 35B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 856+ 35B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 856+ 35B9             >
 856+ 35B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 35B9 02 00       >                dw      2
 857+ 35BB
 858+ 35BB              //  ______________________________________________________________________
 859+ 35BB
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 124  35BB                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 35BB              //  ______________________________________________________________________
   2+ 35BB              //
   3+ 35BB              //  next-opt.asm
   4+ 35BB              //
   5+ 35BB              //  ZX Spectrum Next - peculiar definitions
   6+ 35BB              //  ______________________________________________________________________
   7+ 35BB
   8+ 35BB              //  ______________________________________________________________________
   9+ 35BB              //
  10+ 35BB              // reg@         n -- b
  11+ 35BB              // read Next REGister n giving byte b
  12+ 35BB              //
  13+ 35BB              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35BB              //              dw      LIT, $243B
  15+ 35BB              //              dw      PSTORE
  16+ 35BB              //              dw      LIT, $253B
  17+ 35BB              //              dw      PFETCH
  18+ 35BB              //              dw      EXIT
  19+ 35BB                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35BB             >
  19+ 35BB             >Dict_Ptr        defl    $
  19+ 35BB             >
  19+ 35BB             >//              ______________________________________________________________________
  19+ 35BB             >//              Heap part
  19+ 35BB             >
  19+ 35BB             >
  19+ 35BB             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA39             >
  19+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA39             >Latest_Definition defl  Heap_Ptr
  19+ EA39             >
  19+ EA39             >                // dummy db directives used to calculate length of namec
  19+ EA39 52 45 47 40 >                db      "REG@"
  19+ EA3D             >len_NFA         defl    $ - temp_NFA
  19+ EA3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA39             >
  19+ EA39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3A 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA3E             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3D C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA3E             >
  19+ EA3E 2E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA40             >Prev_Ptr        defl    Heap_Ptr
  19+ EA40             >
  19+ EA40             >mirror_Ptr      defl    $
  19+ EA40             >
  19+ EA40 BD 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA42             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA42             >
  19+ EA42             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA42             >
  19+ EA42             >//              ______________________________________________________________________
  19+ EA42             >//              Dictionary part
  19+ EA42             >
  19+ EA42             >                org     Dict_Ptr
  19+ 35BB             >
  19+ 35BB 40 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35BD             >
  19+ 35BD             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35BD ~           >
  19+ 35BD ~           >
  19+ 35BD             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35BD             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35BD             >
  19+ 35BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35BD D9                           exx
  21+ 35BE 01 3B 24                     ld      bc, $243B
  22+ 35C1 E1                           pop     hl
  23+ 35C2 ED 69                        out     (c), l
  24+ 35C4 04                           inc     b
  25+ 35C5 ED 68                        in      l, (c)
  26+ 35C7 E5                           push    hl
  27+ 35C8 D9                           exx
  28+ 35C9                              next
  28+ 35C9 DD E9       >                jp      (ix)
  29+ 35CB
  30+ 35CB
  31+ 35CB              //  ______________________________________________________________________
  32+ 35CB              //
  33+ 35CB              // reg!         b n --
  34+ 35CB              // write value b to Next REGister n
  35+ 35CB              //
  36+ 35CB              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35CB              //              dw      LIT, $243B
  38+ 35CB              //              dw      PSTORE
  39+ 35CB              //              dw      LIT, $253B
  40+ 35CB              //              dw      PSTORE
  41+ 35CB              //              dw      EXIT
  42+ 35CB                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35CB             >
  42+ 35CB             >Dict_Ptr        defl    $
  42+ 35CB             >
  42+ 35CB             >//              ______________________________________________________________________
  42+ 35CB             >//              Heap part
  42+ 35CB             >
  42+ 35CB             >
  42+ 35CB             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA42             >
  42+ EA42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA42             >Latest_Definition defl  Heap_Ptr
  42+ EA42             >
  42+ EA42             >                // dummy db directives used to calculate length of namec
  42+ EA42 52 45 47 21 >                db      "REG!"
  42+ EA46             >len_NFA         defl    $ - temp_NFA
  42+ EA46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA42             >
  42+ EA42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA43 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA47             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA46 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA47             >
  42+ EA47 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA49             >Prev_Ptr        defl    Heap_Ptr
  42+ EA49             >
  42+ EA49             >mirror_Ptr      defl    $
  42+ EA49             >
  42+ EA49 CD 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA4B             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4B             >
  42+ EA4B             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4B             >
  42+ EA4B             >//              ______________________________________________________________________
  42+ EA4B             >//              Dictionary part
  42+ EA4B             >
  42+ EA4B             >                org     Dict_Ptr
  42+ 35CB             >
  42+ 35CB 49 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35CD             >
  42+ 35CD             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35CD ~           >
  42+ 35CD ~           >
  42+ 35CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35CD             >
  42+ 35CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35CD D9                           exx
  44+ 35CE 01 3B 24                     ld      bc, $243B
  45+ 35D1 E1                           pop     hl
  46+ 35D2 ED 69                        out     (c), l
  47+ 35D4 04                           inc     b
  48+ 35D5 E1                           pop     hl
  49+ 35D6 ED 69                        out     (c), l
  50+ 35D8 D9                           exx
  51+ 35D9                              next
  51+ 35D9 DD E9       >                jp      (ix)
  52+ 35DB
  53+ 35DB
  54+ 35DB              //  ______________________________________________________________________
  55+ 35DB              //
  56+ 35DB              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35DB              // NextZXOS call wrapper.
  58+ 35DB              //  n1 = hl register parameter value
  59+ 35DB              //  n2 = de register parameter value
  60+ 35DB              //  n3 = bc register parameter value
  61+ 35DB              //  n4 =  a register parameter value
  62+ 35DB              //   a = routine address in ROM 3
  63+ 35DB              // ----
  64+ 35DB              //  n5 = hl returned value
  65+ 35DB              //  n6 = de returned value
  66+ 35DB              //  n7 = bc returned value
  67+ 35DB              //  n8 =  a returned value
  68+ 35DB              //   f
  69+ 35DB                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35DB             >
  69+ 35DB             >Dict_Ptr        defl    $
  69+ 35DB             >
  69+ 35DB             >//              ______________________________________________________________________
  69+ 35DB             >//              Heap part
  69+ 35DB             >
  69+ 35DB             >
  69+ 35DB             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4B             >
  69+ EA4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4B             >Latest_Definition defl  Heap_Ptr
  69+ EA4B             >
  69+ EA4B             >                // dummy db directives used to calculate length of namec
  69+ EA4B 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA4F 44 4F 53    >
  69+ EA52             >len_NFA         defl    $ - temp_NFA
  69+ EA52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4B             >
  69+ EA4B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4C 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA50 44 4F 53    >
  69+ EA53             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA52 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA53             >
  69+ EA53 42 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA55             >Prev_Ptr        defl    Heap_Ptr
  69+ EA55             >
  69+ EA55             >mirror_Ptr      defl    $
  69+ EA55             >
  69+ EA55 DD 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA57             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA57             >
  69+ EA57             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA57             >
  69+ EA57             >//              ______________________________________________________________________
  69+ EA57             >//              Dictionary part
  69+ EA57             >
  69+ EA57             >                org     Dict_Ptr
  69+ 35DB             >
  69+ 35DB 55 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35DD             >
  69+ 35DD             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35DD ~           >
  69+ 35DD ~           >
  69+ 35DD             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35DD             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35DD             >
  69+ 35DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35DD D9                            exx
  71+ 35DE E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35DF D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35E0 7B                            ld      a, e
  74+ 35E1 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35E2 D1                            pop     de                  // de' argument              //  n1
  76+ 35E3 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35E4 D9                           exx
  78+ 35E5 E1                           pop     hl                  // entry address a
  79+ 35E6 DD E5                        push    ix
  80+ 35E8 D5                           push    de
  81+ 35E9 C5                           push    bc
  82+ 35EA EB                           ex      de, hl              // de is entry address
  83+ 35EB              //              ld      (SP_Saved), sp
  84+ 35EB              //              ld      sp, Cold_origin - 5
  85+ 35EB              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35EB 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35ED F3                           di
  88+ 35EE CF                           rst     08
  89+ 35EF 94                           db      $94
  90+ 35F0 FB                           ei
  91+ 35F1                      ////    ld      a, (Saved_MMU + 1)
  92+ 35F1                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 35F1
  94+ 35F1              //              ld      sp, (SP_Saved)
  95+ 35F1              //              push    ix
  96+ 35F1              //              pop     hl
  97+ 35F1              //              ld      (IX_Echo), hl
  98+ 35F1 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 35F5
 100+ 35F5 D9                           exx
 101+ 35F6 C1                           pop     bc
 102+ 35F7 D1                           pop     de
 103+ 35F8 DD E1                        pop     ix
 104+ 35FA D9                            exx
 105+ 35FB E5                            push    hl
 106+ 35FC D5                            push    de
 107+ 35FD C5                            push    bc
 108+ 35FE 26 00                         ld      h, 0
 109+ 3600 6F                            ld      l, a
 110+ 3601 E5                            push    hl
 111+ 3602 D9                           exx
 112+ 3603 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 3605 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 3606 E5                           push    hl
 115+ 3607                              next
 115+ 3607 DD E9       >                jp      (ix)
 116+ 3609
 117+ 3609              //  ______________________________________________________________________
 118+ 3609              //
 119+ 3609              // blk-fh
 120+ 3609              //              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 3609              //
 122+ 3609              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 3609              // Len_Filename:   db      30
 124+ 3609              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 125+ 3609              //                 ds      32
 126+ 3609
 127+ 3609              //  ______________________________________________________________________
 128+ 3609              //
 129+ 3609              // blk-seek     n --
 130+ 3609              // seek block n  within blocks!.bin  file
 131+ 3609                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 131+ 3609             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 131+ 3609             >
 131+ 3609             >Dict_Ptr        defl    $
 131+ 3609             >
 131+ 3609             >//              ______________________________________________________________________
 131+ 3609             >//              Heap part
 131+ 3609             >
 131+ 3609             >
 131+ 3609             >                org     (Heap_Ptr & $1FFF) + $E000
 131+ EA57             >
 131+ EA57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 131+ EA57             >Latest_Definition defl  Heap_Ptr
 131+ EA57             >
 131+ EA57             >                // dummy db directives used to calculate length of namec
 131+ EA57 42 4C 4B 2D >                db      "BLK-SEEK"
 131+ EA5B 53 45 45 4B >
 131+ EA5F             >len_NFA         defl    $ - temp_NFA
 131+ EA5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 131+ EA57             >
 131+ EA57 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 131+ EA58 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 131+ EA5C 53 45 45 4B >
 131+ EA60             >                org     $-1                 // alter last byte of Name just above to set
 131+ EA5F CB          >                db      {b $} | END_BIT     // msb as name end
 131+ EA60             >
 131+ EA60 4B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 131+ EA62             >Prev_Ptr        defl    Heap_Ptr
 131+ EA62             >
 131+ EA62             >mirror_Ptr      defl    $
 131+ EA62             >
 131+ EA62 0B 36       >                dw      Dict_Ptr + 2        // xt
 131+ EA64             >Heap_Ptr        defl    $ - $E000           // save current HP
 131+ EA64             >
 131+ EA64             >Current_HP      defl  $ - $E000             // used to set HP once!
 131+ EA64             >
 131+ EA64             >//              ______________________________________________________________________
 131+ EA64             >//              Dictionary part
 131+ EA64             >
 131+ EA64             >                org     Dict_Ptr
 131+ 3609             >
 131+ 3609 62 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 131+ 360B             >
 131+ 360B             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 131+ 360B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 131+ 360E             >
 131+ 360E             >
 131+ 360E             >                endif           ; ok        // for other definitions it "points" the correct handler
 131+ 360E             >                // Use of "; ok" to suppress "warning[fwdref]"
 131+ 360E             >
 131+ 360E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 132+ 360E 68 27 91 34                  dw  BBUF, MMUL
 133+ 3612 58 3F 3F 26                  dw  BLK_FH, FETCH
 134+ 3616 7E 23                        dw  F_SEEK
 135+ 3618 3D 20 2D 00                  dw  LIT, $2D, QERROR
 135+ 361C 98 2A
 136+ 361E F5 24                        dw  EXIT
 137+ 3620
 138+ 3620              //  ______________________________________________________________________
 139+ 3620              //
 140+ 3620              // blk-read     n --
 141+ 3620              // seek block n  within blocks!.bin  file
 142+ 3620                              Colon_Def BLK_READ, "BLK-READ", is_normal
 142+ 3620             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 142+ 3620             >
 142+ 3620             >Dict_Ptr        defl    $
 142+ 3620             >
 142+ 3620             >//              ______________________________________________________________________
 142+ 3620             >//              Heap part
 142+ 3620             >
 142+ 3620             >
 142+ 3620             >                org     (Heap_Ptr & $1FFF) + $E000
 142+ EA64             >
 142+ EA64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 142+ EA64             >Latest_Definition defl  Heap_Ptr
 142+ EA64             >
 142+ EA64             >                // dummy db directives used to calculate length of namec
 142+ EA64 42 4C 4B 2D >                db      "BLK-READ"
 142+ EA68 52 45 41 44 >
 142+ EA6C             >len_NFA         defl    $ - temp_NFA
 142+ EA6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 142+ EA64             >
 142+ EA64 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ EA65 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 142+ EA69 52 45 41 44 >
 142+ EA6D             >                org     $-1                 // alter last byte of Name just above to set
 142+ EA6C C4          >                db      {b $} | END_BIT     // msb as name end
 142+ EA6D             >
 142+ EA6D 57 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 142+ EA6F             >Prev_Ptr        defl    Heap_Ptr
 142+ EA6F             >
 142+ EA6F             >mirror_Ptr      defl    $
 142+ EA6F             >
 142+ EA6F 22 36       >                dw      Dict_Ptr + 2        // xt
 142+ EA71             >Heap_Ptr        defl    $ - $E000           // save current HP
 142+ EA71             >
 142+ EA71             >Current_HP      defl  $ - $E000             // used to set HP once!
 142+ EA71             >
 142+ EA71             >//              ______________________________________________________________________
 142+ EA71             >//              Dictionary part
 142+ EA71             >
 142+ EA71             >                org     Dict_Ptr
 142+ 3620             >
 142+ 3620 6F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 142+ 3622             >
 142+ 3622             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 142+ 3622 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 142+ 3625             >
 142+ 3625             >
 142+ 3625             >                endif           ; ok        // for other definitions it "points" the correct handler
 142+ 3625             >                // Use of "; ok" to suppress "warning[fwdref]"
 142+ 3625             >
 142+ 3625             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 143+ 3625 0B 36                        dw  BLK_SEEK
 144+ 3627 68 27                        dw  BBUF
 145+ 3629 58 3F 3F 26                  dw  BLK_FH, FETCH
 146+ 362D C9 23                        dw  F_READ
 147+ 362F 3D 20 2E 00                  dw  LIT, $2E, QERROR
 147+ 3633 98 2A
 148+ 3635 B3 25                        dw  DROP
 149+ 3637 F5 24                        dw  EXIT
 150+ 3639
 151+ 3639              //  ______________________________________________________________________
 152+ 3639              //
 153+ 3639              // blk-write     n --
 154+ 3639              // seek block n  within blocks!.bin  file
 155+ 3639                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 155+ 3639             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 155+ 3639             >
 155+ 3639             >Dict_Ptr        defl    $
 155+ 3639             >
 155+ 3639             >//              ______________________________________________________________________
 155+ 3639             >//              Heap part
 155+ 3639             >
 155+ 3639             >
 155+ 3639             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ EA71             >
 155+ EA71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ EA71             >Latest_Definition defl  Heap_Ptr
 155+ EA71             >
 155+ EA71             >                // dummy db directives used to calculate length of namec
 155+ EA71 42 4C 4B 2D >                db      "BLK-WRITE"
 155+ EA75 57 52 49 54 >
 155+ EA79 45          >
 155+ EA7A             >len_NFA         defl    $ - temp_NFA
 155+ EA7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ EA71             >
 155+ EA71 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ EA72 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 155+ EA76 57 52 49 54 >
 155+ EA7A 45          >
 155+ EA7B             >                org     $-1                 // alter last byte of Name just above to set
 155+ EA7A C5          >                db      {b $} | END_BIT     // msb as name end
 155+ EA7B             >
 155+ EA7B 64 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ EA7D             >Prev_Ptr        defl    Heap_Ptr
 155+ EA7D             >
 155+ EA7D             >mirror_Ptr      defl    $
 155+ EA7D             >
 155+ EA7D 3B 36       >                dw      Dict_Ptr + 2        // xt
 155+ EA7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ EA7F             >
 155+ EA7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ EA7F             >
 155+ EA7F             >//              ______________________________________________________________________
 155+ EA7F             >//              Dictionary part
 155+ EA7F             >
 155+ EA7F             >                org     Dict_Ptr
 155+ 3639             >
 155+ 3639 7D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 363B             >
 155+ 363B             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 363B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 363E             >
 155+ 363E             >
 155+ 363E             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 363E             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 363E             >
 155+ 363E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 363E 0B 36                        dw  BLK_SEEK
 157+ 3640 68 27                        dw  BBUF
 158+ 3642 58 3F 3F 26                  dw  BLK_FH, FETCH
 159+ 3646 E7 23                        dw  F_WRITE
 160+ 3648 3D 20 2F 00                  dw  LIT, $2F, QERROR
 160+ 364C 98 2A
 161+ 364E B3 25                        dw  DROP
 162+ 3650 F5 24                        dw  EXIT
 163+ 3652
 164+ 3652              //  ______________________________________________________________________
 165+ 3652              //
 166+ 3652              // blk-init     n --
 167+ 3652              // seek block n  within blocks!.bin  file
 168+ 3652                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 168+ 3652             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 168+ 3652             >
 168+ 3652             >Dict_Ptr        defl    $
 168+ 3652             >
 168+ 3652             >//              ______________________________________________________________________
 168+ 3652             >//              Heap part
 168+ 3652             >
 168+ 3652             >
 168+ 3652             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ EA7F             >
 168+ EA7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ EA7F             >Latest_Definition defl  Heap_Ptr
 168+ EA7F             >
 168+ EA7F             >                // dummy db directives used to calculate length of namec
 168+ EA7F 42 4C 4B 2D >                db      "BLK-INIT"
 168+ EA83 49 4E 49 54 >
 168+ EA87             >len_NFA         defl    $ - temp_NFA
 168+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ EA7F             >
 168+ EA7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ EA80 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 168+ EA84 49 4E 49 54 >
 168+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 168+ EA87 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ EA88             >
 168+ EA88 71 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 168+ EA8A             >
 168+ EA8A             >mirror_Ptr      defl    $
 168+ EA8A             >
 168+ EA8A 54 36       >                dw      Dict_Ptr + 2        // xt
 168+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ EA8C             >
 168+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ EA8C             >
 168+ EA8C             >//              ______________________________________________________________________
 168+ EA8C             >//              Dictionary part
 168+ EA8C             >
 168+ EA8C             >                org     Dict_Ptr
 168+ 3652             >
 168+ 3652 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 3654             >
 168+ 3654             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 3654 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 168+ 3657             >
 168+ 3657             >
 168+ 3657             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 3657             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 3657             >
 168+ 3657             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 3657 58 3F 3F 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 169+ 365B 99 23 B3 25
 170+ 365F 5F 3F 61 25                  dw  BLK_FNAME, ONE_PLUS
 171+ 3663 5C 28 4C 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 171+ 3667 FA 23
 172+ 3669                          //    dw  LIT, $2C, QERROR
 173+ 3669
 174+ 3669 8F 20                        dw  ZBRANCH
 175+ 366B 0E 00                        dw  Blk_Init_Endif - $
 176+ 366D
 177+ 366D 3D 20 CF FF                  dw  LIT, $FFCF
 178+ 3671 3D 20 58 34                  dw  LIT, Exit_with_error
 179+ 3675 49 26                        dw  STORE
 180+ 3677
 181+ 3677 16 34                        dw  BASIC
 182+ 3679              Blk_Init_Endif:
 183+ 3679
 184+ 3679 58 3F 49 26                  dw  BLK_FH, STORE
 185+ 367D F5 24                        dw  EXIT
 186+ 367F
 187+ 367F              //  ______________________________________________________________________
 188+ 367F              //
 189+ 367F              // #sec
 190+ 367F              // number of 512-Byte "sectors" available on thie sysstem.
 191+ 367F              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 192+ 367F
 193+ 367F                              Constant_Def NSEC , "#SEC", 32767
 193+ 367F             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 193+ 367F             >
 193+ 367F             >Dict_Ptr        defl    $
 193+ 367F             >
 193+ 367F             >//              ______________________________________________________________________
 193+ 367F             >//              Heap part
 193+ 367F             >
 193+ 367F             >
 193+ 367F             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ EA8C             >
 193+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ EA8C             >Latest_Definition defl  Heap_Ptr
 193+ EA8C             >
 193+ EA8C             >                // dummy db directives used to calculate length of namec
 193+ EA8C 23 53 45 43 >                db      "#SEC"
 193+ EA90             >len_NFA         defl    $ - temp_NFA
 193+ EA90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ EA8C             >
 193+ EA8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ EA8D 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 193+ EA91             >                org     $-1                 // alter last byte of Name just above to set
 193+ EA90 C3          >                db      {b $} | END_BIT     // msb as name end
 193+ EA91             >
 193+ EA91 7F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ EA93             >Prev_Ptr        defl    Heap_Ptr
 193+ EA93             >
 193+ EA93             >mirror_Ptr      defl    $
 193+ EA93             >
 193+ EA93 81 36       >                dw      Dict_Ptr + 2        // xt
 193+ EA95             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ EA95             >
 193+ EA95             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ EA95             >
 193+ EA95             >//              ______________________________________________________________________
 193+ EA95             >//              Dictionary part
 193+ EA95             >
 193+ EA95             >                org     Dict_Ptr
 193+ 367F             >
 193+ 367F 93 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 3681             >
 193+ 3681             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 3681 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 193+ 3684             >
 193+ 3684             >
 193+ 3684             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 3684             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 3684             >
 193+ 3684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 193+ 3684 FF 7F       >                dw      32767
 194+ 3686
 195+ 3686              //  ______________________________________________________________________
 196+ 3686
 197+ 3686
 198+ 3686
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 125  3686                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 3686              //  ______________________________________________________________________
   2+ 3686              //
   3+ 3686              //  L3.asm
   4+ 3686              //
   5+ 3686              //  Continuation of L2.asm
   6+ 3686              //  I/O Block definitions
   7+ 3686              //  ______________________________________________________________________
   8+ 3686
   9+ 3686
  10+ 3686              //  ______________________________________________________________________
  11+ 3686              //
  12+ 3686              // r/w          a n f --
  13+ 3686              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3686                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3686             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3686             >
  14+ 3686             >Dict_Ptr        defl    $
  14+ 3686             >
  14+ 3686             >//              ______________________________________________________________________
  14+ 3686             >//              Heap part
  14+ 3686             >
  14+ 3686             >
  14+ 3686             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA95             >
  14+ EA95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA95             >Latest_Definition defl  Heap_Ptr
  14+ EA95             >
  14+ EA95             >                // dummy db directives used to calculate length of namec
  14+ EA95 52 2F 57    >                db      "R/W"
  14+ EA98             >len_NFA         defl    $ - temp_NFA
  14+ EA98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA95             >
  14+ EA95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA96 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA99             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA98 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA99             >
  14+ EA99 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA9B             >Prev_Ptr        defl    Heap_Ptr
  14+ EA9B             >
  14+ EA9B             >mirror_Ptr      defl    $
  14+ EA9B             >
  14+ EA9B 88 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA9D             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA9D             >
  14+ EA9D             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA9D             >
  14+ EA9D             >//              ______________________________________________________________________
  14+ EA9D             >//              Dictionary part
  14+ EA9D             >
  14+ EA9D             >                org     Dict_Ptr
  14+ 3686             >
  14+ 3686 9B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 3688             >
  14+ 3688             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 3688 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 368B             >
  14+ 368B             >
  14+ 368B             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 368B             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 368B             >
  14+ 368B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 368B FF 24                        dw      TO_R                    // >r
  16+ 368D 68 25                        dw      ONE_SUBTRACT            // 1-
  17+ 368F CE 25 2D 25                  dw      DUP, ZLESS              // dup 0<
  18+ 3693 AA 25 81 36                  dw      OVER, NSEC              // over #sec
  19+ 3697 68 25 D5 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 369B C4 24                        dw      OR_OP                   // or
  21+ 369D 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 36A1 98 2A
  22+ 36A3 0A 25                        dw      R_TO                    // r>
  23+ 36A5                                                              // if
  24+ 36A5 8F 20                        dw      ZBRANCH
  25+ 36A7 08 00                        dw      Read_Write_Else - $
  26+ 36A9 22 36                        dw          BLK_READ            //      blk-read
  27+ 36AB 82 20                        dw      BRANCH
  28+ 36AD 04 00                        dw      Read_Write_Endif - $
  29+ 36AF              Read_Write_Else:                                // else
  30+ 36AF 3B 36                        dw          BLK_WRITE           //      blk-write
  31+ 36B1              Read_Write_Endif:                               // endif
  32+ 36B1 F5 24                        dw      EXIT                    // ;
  33+ 36B3
  34+ 36B3
  35+ 36B3              //  ______________________________________________________________________
  36+ 36B3              //
  37+ 36B3              // +buf        a1 -- a2 f
  38+ 36B3              // advences to next buffer, cyclically rotating along them
  39+ 36B3                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36B3             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36B3             >
  39+ 36B3             >Dict_Ptr        defl    $
  39+ 36B3             >
  39+ 36B3             >//              ______________________________________________________________________
  39+ 36B3             >//              Heap part
  39+ 36B3             >
  39+ 36B3             >
  39+ 36B3             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA9D             >
  39+ EA9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA9D             >Latest_Definition defl  Heap_Ptr
  39+ EA9D             >
  39+ EA9D             >                // dummy db directives used to calculate length of namec
  39+ EA9D 2B 42 55 46 >                db      "+BUF"
  39+ EAA1             >len_NFA         defl    $ - temp_NFA
  39+ EAA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA9D             >
  39+ EA9D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA9E 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAA2             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAA1 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAA2             >
  39+ EAA2 95 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAA4             >Prev_Ptr        defl    Heap_Ptr
  39+ EAA4             >
  39+ EAA4             >mirror_Ptr      defl    $
  39+ EAA4             >
  39+ EAA4 B5 36       >                dw      Dict_Ptr + 2        // xt
  39+ EAA6             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAA6             >
  39+ EAA6             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAA6             >
  39+ EAA6             >//              ______________________________________________________________________
  39+ EAA6             >//              Dictionary part
  39+ EAA6             >
  39+ EAA6             >                org     Dict_Ptr
  39+ 36B3             >
  39+ 36B3 A4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36B5             >
  39+ 36B5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36B5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36B8             >
  39+ 36B8             >
  39+ 36B8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36B8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36B8             >
  39+ 36B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36B8 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36BC 48 25
  41+ 36BE CE 25 C6 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36C2 3F 26
  42+ 36C4 A7 28                        dw      EQUALS                  // =
  43+ 36C6                                                              // if
  44+ 36C6 8F 20                        dw      ZBRANCH
  45+ 36C8 08 00                        dw      PBuf_Endif - $
  46+ 36CA B3 25                        dw          DROP                //      drop
  47+ 36CC C0 27 3F 26                  dw          FIRST, FETCH        //      first @
  48+ 36D0              PBuf_Endif:                                     // endif
  49+ 36D0 CE 25 32 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36D4 3F 26
  50+ 36D6 9B 28                        dw      SUBTRACT                // -
  51+ 36D8 F5 24                        dw      EXIT                    // ;
  52+ 36DA
  53+ 36DA              //  ______________________________________________________________________
  54+ 36DA              //
  55+ 36DA              // update       --
  56+ 36DA              // mark the last used block to be written to disk
  57+ 36DA                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36DA             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36DA             >
  57+ 36DA             >Dict_Ptr        defl    $
  57+ 36DA             >
  57+ 36DA             >//              ______________________________________________________________________
  57+ 36DA             >//              Heap part
  57+ 36DA             >
  57+ 36DA             >
  57+ 36DA             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAA6             >
  57+ EAA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAA6             >Latest_Definition defl  Heap_Ptr
  57+ EAA6             >
  57+ EAA6             >                // dummy db directives used to calculate length of namec
  57+ EAA6 55 50 44 41 >                db      "UPDATE"
  57+ EAAA 54 45       >
  57+ EAAC             >len_NFA         defl    $ - temp_NFA
  57+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAA6             >
  57+ EAA6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAA7 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAAB 54 45       >
  57+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAAC C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAAD             >
  57+ EAAD 9D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  57+ EAAF             >
  57+ EAAF             >mirror_Ptr      defl    $
  57+ EAAF             >
  57+ EAAF DC 36       >                dw      Dict_Ptr + 2        // xt
  57+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAB1             >
  57+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAB1             >
  57+ EAB1             >//              ______________________________________________________________________
  57+ EAB1             >//              Dictionary part
  57+ EAB1             >
  57+ EAB1             >                org     Dict_Ptr
  57+ 36DA             >
  57+ 36DA AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36DC             >
  57+ 36DC             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36DC CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36DF             >
  57+ 36DF             >
  57+ 36DF             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36DF             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36DF             >
  57+ 36DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36DF 32 28 3F 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36E3 3F 26
  59+ 36E5 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36E9 C4 24
  60+ 36EB 32 28 3F 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36EF 49 26
  61+ 36F1 F5 24                        dw      EXIT                    // ;
  62+ 36F3
  63+ 36F3
  64+ 36F3              //  ______________________________________________________________________
  65+ 36F3              //
  66+ 36F3              // empty-buffers --
  67+ 36F3                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 36F3             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 36F3             >
  67+ 36F3             >Dict_Ptr        defl    $
  67+ 36F3             >
  67+ 36F3             >//              ______________________________________________________________________
  67+ 36F3             >//              Heap part
  67+ 36F3             >
  67+ 36F3             >
  67+ 36F3             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAB1             >
  67+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAB1             >Latest_Definition defl  Heap_Ptr
  67+ EAB1             >
  67+ EAB1             >                // dummy db directives used to calculate length of namec
  67+ EAB1 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAB5 59 2D 42 55 >
  67+ EAB9 46 46 45 52 >
  67+ EABD 53          >
  67+ EABE             >len_NFA         defl    $ - temp_NFA
  67+ EABE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAB1             >
  67+ EAB1 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAB2 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAB6 59 2D 42 55 >
  67+ EABA 46 46 45 52 >
  67+ EABE 53          >
  67+ EABF             >                org     $-1                 // alter last byte of Name just above to set
  67+ EABE D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EABF             >
  67+ EABF A6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAC1             >Prev_Ptr        defl    Heap_Ptr
  67+ EAC1             >
  67+ EAC1             >mirror_Ptr      defl    $
  67+ EAC1             >
  67+ EAC1 F5 36       >                dw      Dict_Ptr + 2        // xt
  67+ EAC3             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAC3             >
  67+ EAC3             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAC3             >
  67+ EAC3             >//              ______________________________________________________________________
  67+ EAC3             >//              Dictionary part
  67+ EAC3             >
  67+ EAC3             >                org     Dict_Ptr
  67+ 36F3             >
  67+ 36F3 C1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 36F5             >
  67+ 36F5             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 36F5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 36F8             >
  67+ 36F8             >
  67+ 36F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 36F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 36F8             >
  67+ 36F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 36F8 C0 27 3F 26                  dw      FIRST, FETCH            // first @
  69+ 36FC C6 27 3F 26                  dw      LIMIT, FETCH            // limit @
  70+ 3700 AA 25 9B 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 3704 42 2D
  71+ 3706 F5 24                        dw      EXIT                    // ;
  72+ 3708
  73+ 3708              //  ______________________________________________________________________
  74+ 3708              //
  75+ 3708              // buffer       n -- a
  76+ 3708              // read block n and gives the address to a buffer
  77+ 3708              // any block previously inside the buffer, if modified, is rewritten to
  78+ 3708              // disk before reading the block n.
  79+ 3708
  80+ 3708                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 3708             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 3708             >
  80+ 3708             >Dict_Ptr        defl    $
  80+ 3708             >
  80+ 3708             >//              ______________________________________________________________________
  80+ 3708             >//              Heap part
  80+ 3708             >
  80+ 3708             >
  80+ 3708             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAC3             >
  80+ EAC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAC3             >Latest_Definition defl  Heap_Ptr
  80+ EAC3             >
  80+ EAC3             >                // dummy db directives used to calculate length of namec
  80+ EAC3 42 55 46 46 >                db      "BUFFER"
  80+ EAC7 45 52       >
  80+ EAC9             >len_NFA         defl    $ - temp_NFA
  80+ EAC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAC3             >
  80+ EAC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAC4 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAC8 45 52       >
  80+ EACA             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAC9 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EACA             >
  80+ EACA B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EACC             >Prev_Ptr        defl    Heap_Ptr
  80+ EACC             >
  80+ EACC             >mirror_Ptr      defl    $
  80+ EACC             >
  80+ EACC 0A 37       >                dw      Dict_Ptr + 2        // xt
  80+ EACE             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EACE             >
  80+ EACE             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EACE             >
  80+ EACE             >//              ______________________________________________________________________
  80+ EACE             >//              Dictionary part
  80+ EACE             >
  80+ EACE             >                org     Dict_Ptr
  80+ 3708             >
  80+ 3708 CC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 370A             >
  80+ 370A             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 370A CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 370D             >
  80+ 370D             >
  80+ 370D             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 370D             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 370D             >
  80+ 370D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 370D 2C 28 3F 26                  dw      USED, FETCH             // used @
  82+ 3711 CE 25 FF 24                  dw      DUP, TO_R               // dup >r
  83+ 3715                                                              // begin
  84+ 3715              Buffer_Begin:
  85+ 3715 B5 36                        dw          PBUF                //      +buf
  86+ 3717                                                              // until
  87+ 3717 8F 20                        dw      ZBRANCH
  88+ 3719 FC FF                        dw      Buffer_Begin - $
  89+ 371B 2C 28 49 26                  dw      USED, STORE             // used !
  90+ 371F 15 25 3F 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3723 2D 25
  91+ 3725                                                              // if
  92+ 3725 8F 20                        dw      ZBRANCH
  93+ 3727 14 00                        dw      Buffer_Endif - $
  94+ 3729 15 25 77 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 372D 15 25 3F 26                  dw          R_OP, FETCH         //      r fetch
  96+ 3731 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3735 B5 24                        dw          AND_OP              //      and
  98+ 3737 37 27 88 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 373B              Buffer_Endif:                                   // endif
 100+ 373B 15 25 49 26                  dw      R_OP, STORE             // r !
 101+ 373F 15 25 32 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3743 49 26
 102+ 3745 0A 25 77 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 3749 F5 24                        dw      EXIT                    // ;
 104+ 374B
 105+ 374B              //  ______________________________________________________________________
 106+ 374B              //
 107+ 374B              // block        n -- a
 108+ 374B              // Leaves the buffer address that contains the block n.
 109+ 374B              // If the block is not already present, it will be loaded from disk
 110+ 374B              // The block previously inside the buffer, if modified, is rewritten to
 111+ 374B              // disk before reading the block n.
 112+ 374B              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 374B
 114+ 374B                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 374B             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 374B             >
 114+ 374B             >Dict_Ptr        defl    $
 114+ 374B             >
 114+ 374B             >//              ______________________________________________________________________
 114+ 374B             >//              Heap part
 114+ 374B             >
 114+ 374B             >
 114+ 374B             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EACE             >
 114+ EACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EACE             >Latest_Definition defl  Heap_Ptr
 114+ EACE             >
 114+ EACE             >                // dummy db directives used to calculate length of namec
 114+ EACE 42 4C 4F 43 >                db      "BLOCK"
 114+ EAD2 4B          >
 114+ EAD3             >len_NFA         defl    $ - temp_NFA
 114+ EAD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EACE             >
 114+ EACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EACF 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAD3 4B          >
 114+ EAD4             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAD3 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAD4             >
 114+ EAD4 C3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAD6             >Prev_Ptr        defl    Heap_Ptr
 114+ EAD6             >
 114+ EAD6             >mirror_Ptr      defl    $
 114+ EAD6             >
 114+ EAD6 4D 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAD8             >
 114+ EAD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAD8             >
 114+ EAD8             >//              ______________________________________________________________________
 114+ EAD8             >//              Dictionary part
 114+ EAD8             >
 114+ EAD8             >                org     Dict_Ptr
 114+ 374B             >
 114+ 374B D6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 374D             >
 114+ 374D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 374D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3750             >
 114+ 3750             >
 114+ 3750             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3750             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3750             >
 114+ 3750             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3750                          //  dw      OFFSET, FETCH           // offset @
 116+ 3750                          //  dw      PLUS
 117+ 3750 FF 24                        dw      TO_R                    // + >r
 118+ 3752 32 28 3F 26                  dw      PREV, FETCH             // prev @
 119+ 3756 CE 25 3F 26                  dw      DUP, FETCH              // dup @
 120+ 375A 15 25 9B 28                  dw      R_OP, SUBTRACT          // r -
 121+ 375E CE 25 48 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3762                                                              // if
 123+ 3762 8F 20                        dw        ZBRANCH
 124+ 3764 32 00                        dw        Block_Endif_1 - $
 125+ 3766              Block_Begin:                                    //      begin
 126+ 3766 B5 36 1A 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 376A                                                              //          if
 128+ 376A 8F 20                        dw          ZBRANCH
 129+ 376C 12 00                        dw          Block_Endif_2 - $
 130+ 376E B3 25                        dw              DROP            //              drop
 131+ 3770 15 25 0A 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 3774 CE 25                        dw              DUP             //              dup
 133+ 3776 15 25 3E 27                  dw              R_OP, ONE       //              r 1
 134+ 377A 88 36                        dw              READ_WRITE      //              r/w
 135+ 377C 84 25                        dw              TWO_MINUS       //              2-
 136+ 377E              Block_Endif_2:                                  //          endif
 137+ 377E CE 25 3F 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3782 15 25
 138+ 3784 9B 28 CE 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 3788 48 25 1A 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 378C                                                              //      until
 141+ 378C 8F 20                        dw        ZBRANCH
 142+ 378E D8 FF                        dw        Block_Begin - $
 143+ 3790 CE 25 32 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 3794 49 26
 144+ 3796              Block_Endif_1:                                  // endif
 145+ 3796 0A 25 B3 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 379A 77 25
 146+ 379C F5 24                        dw      EXIT                    // ;
 147+ 379E
 148+ 379E              //  ______________________________________________________________________
 149+ 379E              //
 150+ 379E              // #buff        -- n
 151+ 379E              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 379E                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 379E             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 379E             >
 152+ 379E             >Dict_Ptr        defl    $
 152+ 379E             >
 152+ 379E             >//              ______________________________________________________________________
 152+ 379E             >//              Heap part
 152+ 379E             >
 152+ 379E             >
 152+ 379E             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAD8             >
 152+ EAD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAD8             >Latest_Definition defl  Heap_Ptr
 152+ EAD8             >
 152+ EAD8             >                // dummy db directives used to calculate length of namec
 152+ EAD8 23 42 55 46 >                db      "#BUFF"
 152+ EADC 46          >
 152+ EADD             >len_NFA         defl    $ - temp_NFA
 152+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAD8             >
 152+ EAD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAD9 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EADD 46          >
 152+ EADE             >                org     $-1                 // alter last byte of Name just above to set
 152+ EADD C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EADE             >
 152+ EADE CE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAE0             >Prev_Ptr        defl    Heap_Ptr
 152+ EAE0             >
 152+ EAE0             >mirror_Ptr      defl    $
 152+ EAE0             >
 152+ EAE0 A0 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAE2             >
 152+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAE2             >
 152+ EAE2             >//              ______________________________________________________________________
 152+ EAE2             >//              Dictionary part
 152+ EAE2             >
 152+ EAE2             >                org     Dict_Ptr
 152+ 379E             >
 152+ 379E E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 37A0             >
 152+ 37A0             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 37A0 CD 0B 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 37A3             >
 152+ 37A3             >
 152+ 37A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 37A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 37A3             >
 152+ 37A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 37A3 07 00       >                dw      7
 153+ 37A5
 154+ 37A5              //  ______________________________________________________________________
 155+ 37A5              //
 156+ 37A5              // flush        --
 157+ 37A5                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 37A5             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 37A5             >
 157+ 37A5             >Dict_Ptr        defl    $
 157+ 37A5             >
 157+ 37A5             >//              ______________________________________________________________________
 157+ 37A5             >//              Heap part
 157+ 37A5             >
 157+ 37A5             >
 157+ 37A5             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAE2             >
 157+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAE2             >Latest_Definition defl  Heap_Ptr
 157+ EAE2             >
 157+ EAE2             >                // dummy db directives used to calculate length of namec
 157+ EAE2 46 4C 55 53 >                db      "FLUSH"
 157+ EAE6 48          >
 157+ EAE7             >len_NFA         defl    $ - temp_NFA
 157+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAE2             >
 157+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAE3 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAE7 48          >
 157+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAE7 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAE8             >
 157+ EAE8 D8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 157+ EAEA             >
 157+ EAEA             >mirror_Ptr      defl    $
 157+ EAEA             >
 157+ EAEA A7 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAEC             >
 157+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAEC             >
 157+ EAEC             >//              ______________________________________________________________________
 157+ EAEC             >//              Dictionary part
 157+ EAEC             >
 157+ EAEC             >                org     Dict_Ptr
 157+ 37A5             >
 157+ 37A5 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 37A7             >
 157+ 37A7             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 37A7 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37AA             >
 157+ 37AA             >
 157+ 37AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37AA             >
 157+ 37AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37AA A0 37 61 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37AE 37 27
 159+ 37B0              Flush_Do:                                       // do
 160+ 37B0 CE 20                        dw      C_DO
 161+ 37B2 37 27 0A 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37B6 B3 25
 162+ 37B8                                                              // loop
 163+ 37B8 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37BC 58 3F 3F 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37C0 A5 23 B3 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37C4 F5 24                        dw      EXIT                    // exit
 167+ 37C6
 168+ 37C6              //  ______________________________________________________________________
 169+ 37C6              //
 170+ 37C6              // f_getline    a m fh -- n
 171+ 37C6              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37C6              // Address a is left for subsequent processing
 173+ 37C6              // and n as the actual number of byte read, that is the length of line
 174+ 37C6                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37C6             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37C6             >
 174+ 37C6             >Dict_Ptr        defl    $
 174+ 37C6             >
 174+ 37C6             >//              ______________________________________________________________________
 174+ 37C6             >//              Heap part
 174+ 37C6             >
 174+ 37C6             >
 174+ 37C6             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAEC             >
 174+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAEC             >Latest_Definition defl  Heap_Ptr
 174+ EAEC             >
 174+ EAEC             >                // dummy db directives used to calculate length of namec
 174+ EAEC 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAF0 54 4C 49 4E >
 174+ EAF4 45          >
 174+ EAF5             >len_NFA         defl    $ - temp_NFA
 174+ EAF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAEC             >
 174+ EAEC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAED 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAF1 54 4C 49 4E >
 174+ EAF5 45          >
 174+ EAF6             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAF5 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAF6             >
 174+ EAF6 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAF8             >Prev_Ptr        defl    Heap_Ptr
 174+ EAF8             >
 174+ EAF8             >mirror_Ptr      defl    $
 174+ EAF8             >
 174+ EAF8 C8 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAFA             >
 174+ EAFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAFA             >
 174+ EAFA             >//              ______________________________________________________________________
 174+ EAFA             >//              Dictionary part
 174+ EAFA             >
 174+ EAFA             >                org     Dict_Ptr
 174+ 37C6             >
 174+ 37C6 F8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37C8             >
 174+ 37C8             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37C8 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37CB             >
 174+ 37CB             >
 174+ 37CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37CB             >
 174+ 37CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37CB FF 24                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37CD BE 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37CF 15 25 B1 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37D3 3D 20 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 37D7 98 2A
 179+ 37D9
 180+ 37D9 10 26 AA 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37DD 61 25 C7 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37E1
 183+ 37E1 15 25 C9 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37E5 3D 20 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 37E9 98 2A
 185+ 37EB                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37EB 8F 20                        dw      ZBRANCH
 187+ 37ED 3C 00                        dw      FGetline_Else - $
 188+ 37EF 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 37F3 C3 21
 189+ 37F5 B3 25 B8 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 37F9 C7 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 37FB 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 37FF C3 21
 192+ 3801 B3 25 B8 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 3805 D5 25 E0 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 3809 CE 25 4A 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 380D 49 26
 195+ 380F CE 25 FF 24                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 3813 10 26 0A 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 3817 37 27 52 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 381B 0A 25 7E 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 381F 3D 20 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 3823 98 2A
 200+ 3825                                                              // else
 201+ 3825 82 20                        dw      BRANCH
 202+ 3827 0C 00                        dw      FGetline_Endif - $
 203+ 3829              FGetline_Else:
 204+ 3829 0A 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 382B 10 26 0A 26                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 382F B3 25 37 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3833              FGetline_Endif:                                 // endif
 208+ 3833 FF 24 CE 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 3837 CE 25
 209+ 3839 61 25 C7 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 383D 15 25 36 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3841 1D 26 48 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3845 37 27 C7 25                  dw      ZERO, SWAP              // 0 swap
 213+ 3849 7C 25 49 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 384D 15 25 48 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3851 68 25
 215+ 3853 C7 25 15 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 3857 9B 28
 216+ 3859 4D 2D                        dw      BLANK                   // blank
 217+ 385B 0A 25                        dw      R_TO                    // r>                   ( n )
 218+ 385D F5 24                        dw      EXIT                    // ;
 219+ 385F
 220+ 385F              //  ______________________________________________________________________
 221+ 385F              //
 222+ 385F              // f_include    fh --
 223+ 385F              // Given a filehandle includes the source from file
 224+ 385F                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 385F             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 385F             >
 224+ 385F             >Dict_Ptr        defl    $
 224+ 385F             >
 224+ 385F             >//              ______________________________________________________________________
 224+ 385F             >//              Heap part
 224+ 385F             >
 224+ 385F             >
 224+ 385F             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAFA             >
 224+ EAFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAFA             >Latest_Definition defl  Heap_Ptr
 224+ EAFA             >
 224+ EAFA             >                // dummy db directives used to calculate length of namec
 224+ EAFA 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAFE 43 4C 55 44 >
 224+ EB02 45          >
 224+ EB03             >len_NFA         defl    $ - temp_NFA
 224+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAFA             >
 224+ EAFA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAFB 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAFF 43 4C 55 44 >
 224+ EB03 45          >
 224+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB03 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB04             >
 224+ EB04 EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB06             >Prev_Ptr        defl    Heap_Ptr
 224+ EB06             >
 224+ EB06             >mirror_Ptr      defl    $
 224+ EB06             >
 224+ EB06 61 38       >                dw      Dict_Ptr + 2        // xt
 224+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB08             >
 224+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB08             >
 224+ EB08             >//              ______________________________________________________________________
 224+ EB08             >//              Dictionary part
 224+ EB08             >
 224+ EB08             >                org     Dict_Ptr
 224+ 385F             >
 224+ 385F 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3861             >
 224+ 3861             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3861 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3864             >
 224+ 3864             >
 224+ 3864             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3864             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3864             >
 224+ 3864             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3864 D8 27 3F 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 3868 FF 24
 226+ 386A DE 27 3F 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 386E FF 24
 227+ 3870 44 28 3F 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3874 FF 24
 228+ 3876 15 25                        dw      R_OP                    // r
 229+ 3878                                                              // if
 230+ 3878 8F 20                        dw      ZBRANCH
 231+ 387A 20 00                        dw      FInclude_Else_1 - $
 232+ 387C 15 25 B1 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 3880 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 3884 98 2A
 234+ 3886 DE 27 3F 26                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 388A 84 25                        dw          TWO_MINUS
 236+ 388C 4A 28 3F 26                  dw          SPAN, FETCH         //      span @ -
 237+ 3890 9B 28                        dw          SUBTRACT
 238+ 3892 90 28 52 25                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 3896                                                              // else
 240+ 3896 82 20                        dw      BRANCH
 241+ 3898 06 00                        dw      FInclude_Endif_1 - $
 242+ 389A              FInclude_Else_1:
 243+ 389A 37 27 37 27                  dw          ZERO, ZERO          //      0 0
 244+ 389E                                                              // endif
 245+ 389E              FInclude_Endif_1:
 246+ 389E FF 24 FF 24                  dw      TO_R, TO_R              // >r >r
 247+ 38A2 44 28 49 26                  dw      SOURCE_ID, STORE        // source-id !
 248+ 38A6              FInclude_Begin:                                 // begin
 249+ 38A6 3E 27 4D 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 38AA 68 27
 250+ 38AC 1D 26 4D 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 38B0 C7 25 61 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 38B4 C7 25 7C 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 38B8 44 28 3F 26                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 38BC C8 37                        dw          F_GETLINE           //      f_getline
 255+ 38BE                                                              // while
 256+ 38BE 8F 20                        dw      ZBRANCH
 257+ 38C0 14 00                        dw      FInclude_Repeat - $
 258+ 38C2 3E 27 D8 27                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 38C6 49 26
 259+ 38C8 37 27 DE 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 38CC 49 26
 260+ 38CE 7D 31                        dw          INTERPRET           //      interpret
 261+ 38D0 82 20                        dw      BRANCH
 262+ 38D2 D4 FF                        dw      FInclude_Begin - $
 263+ 38D4              FInclude_Repeat:                                // repeat
 264+ 38D4 44 28 3F 26                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 38D8 37 27 44 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 38DC 49 26
 266+ 38DE 99 23                        dw      F_CLOSE                 // f_close
 267+ 38E0 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 38E4 98 2A
 268+ 38E6 0A 25 0A 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 38EA 0A 25
 269+ 38EC CE 25 44 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 38F0 49 26
 270+ 38F2                                                              // if
 271+ 38F2 8F 20                        dw      ZBRANCH
 272+ 38F4 12 00                        dw      FInclude_Else_2 - $
 273+ 38F6 44 28 3F 26                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 38FA 7E 23                        dw          F_SEEK              //      f_seek
 275+ 38FC 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 3900 98 2A
 276+ 3902                                                              // else
 277+ 3902 82 20                        dw      BRANCH
 278+ 3904 04 00                        dw      FInclude_Endif_2 - $
 279+ 3906              FInclude_Else_2:
 280+ 3906 0A 26                        dw          TWO_DROP            //      2drop
 281+ 3908              FInclude_Endif_2:                               // endif
 282+ 3908 0A 25 DE 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 390C 49 26
 283+ 390E 0A 25 D8 27                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 3912 49 26
 284+ 3914 F5 24                        dw      EXIT                    // ;
 285+ 3916
 286+ 3916              //  ______________________________________________________________________
 287+ 3916              //
 288+ 3916              // open<         -- fh
 289+ 3916              // Open the following filename and return it file-handle
 290+ 3916              // Used in the form OPEN CCCC
 291+ 3916                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 3916             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 3916             >
 291+ 3916             >Dict_Ptr        defl    $
 291+ 3916             >
 291+ 3916             >//              ______________________________________________________________________
 291+ 3916             >//              Heap part
 291+ 3916             >
 291+ 3916             >
 291+ 3916             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB08             >
 291+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB08             >Latest_Definition defl  Heap_Ptr
 291+ EB08             >
 291+ EB08             >                // dummy db directives used to calculate length of namec
 291+ EB08 4F 50 45 4E >                db      "OPEN<"
 291+ EB0C 3C          >
 291+ EB0D             >len_NFA         defl    $ - temp_NFA
 291+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB08             >
 291+ EB08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB09 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB0D 3C          >
 291+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB0D BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB0E             >
 291+ EB0E FA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB10             >Prev_Ptr        defl    Heap_Ptr
 291+ EB10             >
 291+ EB10             >mirror_Ptr      defl    $
 291+ EB10             >
 291+ EB10 18 39       >                dw      Dict_Ptr + 2        // xt
 291+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB12             >
 291+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB12             >
 291+ EB12             >//              ______________________________________________________________________
 291+ EB12             >//              Dictionary part
 291+ EB12             >
 291+ EB12             >                org     Dict_Ptr
 291+ 3916             >
 291+ 3916 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 3918             >
 291+ 3918             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 3918 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 391B             >
 291+ 391B             >
 291+ 391B             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 391B             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 391B             >
 291+ 391B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 391B 5A 27                        dw      BL
 293+ 391D 7A 2D D4 2B                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 3921 AA 25
 294+ 3923 48 25 37 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 3927 C7 25 49 26
 295+ 392B 6B 2D 3E 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 392F FA 23
 296+ 3931 3D 20 2B 00                  dw      LIT, 43                 // 43
 297+ 3935 98 2A                        dw      QERROR                  // ?error
 298+ 3937 F5 24                        dw      EXIT                    // ;
 299+ 3939
 300+ 3939              //  ______________________________________________________________________
 301+ 3939              //
 302+ 3939              // use          -- cccc
 303+ 3939              // Include the following filename
 304+ 3939                              Colon_Def USE, "USE", is_normal
 304+ 3939             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 3939             >
 304+ 3939             >Dict_Ptr        defl    $
 304+ 3939             >
 304+ 3939             >//              ______________________________________________________________________
 304+ 3939             >//              Heap part
 304+ 3939             >
 304+ 3939             >
 304+ 3939             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB12             >
 304+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB12             >Latest_Definition defl  Heap_Ptr
 304+ EB12             >
 304+ EB12             >                // dummy db directives used to calculate length of namec
 304+ EB12 55 53 45    >                db      "USE"
 304+ EB15             >len_NFA         defl    $ - temp_NFA
 304+ EB15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB12             >
 304+ EB12 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB13 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB16             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB15 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB16             >
 304+ EB16 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB18             >Prev_Ptr        defl    Heap_Ptr
 304+ EB18             >
 304+ EB18             >mirror_Ptr      defl    $
 304+ EB18             >
 304+ EB18 3B 39       >                dw      Dict_Ptr + 2        // xt
 304+ EB1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB1A             >
 304+ EB1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB1A             >
 304+ EB1A             >//              ______________________________________________________________________
 304+ EB1A             >//              Dictionary part
 304+ EB1A             >
 304+ EB1A             >                org     Dict_Ptr
 304+ 3939             >
 304+ 3939 18 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 393B             >
 304+ 393B             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 393B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 393E             >
 304+ 393E             >
 304+ 393E             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 393E             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 393E             >
 304+ 393E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 393E 18 39                        dw      OPEN_FH                 // open<
 306+ 3940 58 3F 3F 26                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 3944 99 23 B3 25                  dw      F_CLOSE, DROP           // f_close drop
 308+ 3948 58 3F 49 26                  dw      BLK_FH, STORE           // blk-fh !
 309+ 394C F5 24                        dw      EXIT                    // ;
 310+ 394E
 311+ 394E              //  ______________________________________________________________________
 312+ 394E              //
 313+ 394E              // include      -- cccc
 314+ 394E              // Include the following filename
 315+ 394E                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 394E             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 394E             >
 315+ 394E             >Dict_Ptr        defl    $
 315+ 394E             >
 315+ 394E             >//              ______________________________________________________________________
 315+ 394E             >//              Heap part
 315+ 394E             >
 315+ 394E             >
 315+ 394E             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB1A             >
 315+ EB1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB1A             >Latest_Definition defl  Heap_Ptr
 315+ EB1A             >
 315+ EB1A             >                // dummy db directives used to calculate length of namec
 315+ EB1A 49 4E 43 4C >                db      "INCLUDE"
 315+ EB1E 55 44 45    >
 315+ EB21             >len_NFA         defl    $ - temp_NFA
 315+ EB21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB1A             >
 315+ EB1A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB1B 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB1F 55 44 45    >
 315+ EB22             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB21 C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB22             >
 315+ EB22 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB24             >Prev_Ptr        defl    Heap_Ptr
 315+ EB24             >
 315+ EB24             >mirror_Ptr      defl    $
 315+ EB24             >
 315+ EB24 50 39       >                dw      Dict_Ptr + 2        // xt
 315+ EB26             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB26             >
 315+ EB26             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB26             >
 315+ EB26             >//              ______________________________________________________________________
 315+ EB26             >//              Dictionary part
 315+ EB26             >
 315+ EB26             >                org     Dict_Ptr
 315+ 394E             >
 315+ 394E 24 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 3950             >
 315+ 3950             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 3950 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 3953             >
 315+ 3953             >
 315+ 3953             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 3953             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 3953             >
 315+ 3953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 3953 18 39                        dw      OPEN_FH                 // open
 317+ 3955 CE 25 61 38                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 3959 99 23 B3 25                  dw      F_CLOSE, DROP           // f_close drop
 319+ 395D F5 24                        dw      EXIT                    // ;
 320+ 395F
 321+ 395F              //  ______________________________________________________________________
 322+ 395F              //
 323+ 395F              // needs
 324+ 395F              // check for cccc exists in vocabulary
 325+ 395F              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 395F
 327+ 395F              // temp filename cccc.f as counted string zero-padded
 328+ 395F                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 395F             >
 328+ 395F             >Dict_Ptr        defl    $
 328+ 395F             >
 328+ 395F             >//              ______________________________________________________________________
 328+ 395F             >//              Heap part
 328+ 395F             >
 328+ 395F             >
 328+ 395F             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB26             >
 328+ EB26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB26             >Latest_Definition defl  Heap_Ptr
 328+ EB26             >
 328+ EB26             >                // dummy db directives used to calculate length of namec
 328+ EB26 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB2A 53 2D 57    >
 328+ EB2D             >len_NFA         defl    $ - temp_NFA
 328+ EB2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB26             >
 328+ EB26 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB27 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB2B 53 2D 57    >
 328+ EB2E             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB2D D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB2E             >
 328+ EB2E 1A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB30             >Prev_Ptr        defl    Heap_Ptr
 328+ EB30             >
 328+ EB30             >mirror_Ptr      defl    $
 328+ EB30             >
 328+ EB30 61 39       >                dw      Dict_Ptr + 2        // xt
 328+ EB32             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB32             >
 328+ EB32             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB32             >
 328+ EB32             >//              ______________________________________________________________________
 328+ EB32             >//              Dictionary part
 328+ EB32             >
 328+ EB32             >                org     Dict_Ptr
 328+ 395F             >
 328+ 395F 30 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 3961             >
 328+ 3961             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 3961 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 3964             >
 328+ 3964             >
 328+ 3964             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 3964             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 3964             >
 328+ 3964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 3964 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 3987              // temp complete path+filename
 331+ 3987                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 3987             >
 331+ 3987             >Dict_Ptr        defl    $
 331+ 3987             >
 331+ 3987             >//              ______________________________________________________________________
 331+ 3987             >//              Heap part
 331+ 3987             >
 331+ 3987             >
 331+ 3987             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB32             >
 331+ EB32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB32             >Latest_Definition defl  Heap_Ptr
 331+ EB32             >
 331+ EB32             >                // dummy db directives used to calculate length of namec
 331+ EB32 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB36 53 2D 46 4E >
 331+ EB3A             >len_NFA         defl    $ - temp_NFA
 331+ EB3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB32             >
 331+ EB32 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB33 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB37 53 2D 46 4E >
 331+ EB3B             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB3A CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB3B             >
 331+ EB3B 26 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB3D             >Prev_Ptr        defl    Heap_Ptr
 331+ EB3D             >
 331+ EB3D             >mirror_Ptr      defl    $
 331+ EB3D             >
 331+ EB3D 89 39       >                dw      Dict_Ptr + 2        // xt
 331+ EB3F             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB3F             >
 331+ EB3F             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB3F             >
 331+ EB3F             >//              ______________________________________________________________________
 331+ EB3F             >//              Dictionary part
 331+ EB3F             >
 331+ EB3F             >                org     Dict_Ptr
 331+ 3987             >
 331+ 3987 3D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 3989             >
 331+ 3989             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 3989 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 398C             >
 331+ 398C             >
 331+ 398C             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 398C             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 398C             >
 331+ 398C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 398C 00 00 00...                  ds      40
 333+ 39B4              // constant path
 334+ 39B4                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 39B4             >
 334+ 39B4             >Dict_Ptr        defl    $
 334+ 39B4             >
 334+ 39B4             >//              ______________________________________________________________________
 334+ 39B4             >//              Heap part
 334+ 39B4             >
 334+ 39B4             >
 334+ 39B4             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB3F             >
 334+ EB3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB3F             >Latest_Definition defl  Heap_Ptr
 334+ EB3F             >
 334+ EB3F             >                // dummy db directives used to calculate length of namec
 334+ EB3F 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB43 53 2D 49 4E >
 334+ EB47 43          >
 334+ EB48             >len_NFA         defl    $ - temp_NFA
 334+ EB48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB3F             >
 334+ EB3F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB40 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB44 53 2D 49 4E >
 334+ EB48 43          >
 334+ EB49             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB48 C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB49             >
 334+ EB49 32 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB4B             >Prev_Ptr        defl    Heap_Ptr
 334+ EB4B             >
 334+ EB4B             >mirror_Ptr      defl    $
 334+ EB4B             >
 334+ EB4B B6 39       >                dw      Dict_Ptr + 2        // xt
 334+ EB4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB4D             >
 334+ EB4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB4D             >
 334+ EB4D             >//              ______________________________________________________________________
 334+ EB4D             >//              Dictionary part
 334+ EB4D             >
 334+ EB4D             >                org     Dict_Ptr
 334+ 39B4             >
 334+ 39B4 4B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 39B6             >
 334+ 39B6             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 39B6 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 39B9             >
 334+ 39B9             >
 334+ 39B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 39B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 39B9             >
 334+ 39B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 39B9 04 69 6E 63                  db      4, "inc/", 0
 335+ 39BD 2F 00
 336+ 39BF                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 39BF             >
 336+ 39BF             >Dict_Ptr        defl    $
 336+ 39BF             >
 336+ 39BF             >//              ______________________________________________________________________
 336+ 39BF             >//              Heap part
 336+ 39BF             >
 336+ 39BF             >
 336+ 39BF             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB4D             >
 336+ EB4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB4D             >Latest_Definition defl  Heap_Ptr
 336+ EB4D             >
 336+ EB4D             >                // dummy db directives used to calculate length of namec
 336+ EB4D 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB51 53 2D 4C 49 >
 336+ EB55 42          >
 336+ EB56             >len_NFA         defl    $ - temp_NFA
 336+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB4D             >
 336+ EB4D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB4E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB52 53 2D 4C 49 >
 336+ EB56 42          >
 336+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB56 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB57             >
 336+ EB57 3F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB59             >Prev_Ptr        defl    Heap_Ptr
 336+ EB59             >
 336+ EB59             >mirror_Ptr      defl    $
 336+ EB59             >
 336+ EB59 C1 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB5B             >
 336+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB5B             >
 336+ EB5B             >//              ______________________________________________________________________
 336+ EB5B             >//              Dictionary part
 336+ EB5B             >
 336+ EB5B             >                org     Dict_Ptr
 336+ 39BF             >
 336+ 39BF 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 39C1             >
 336+ 39C1             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 39C1 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 39C4             >
 336+ 39C4             >
 336+ 39C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 39C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 39C4             >
 336+ 39C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 39C4 04 6C 69 62                  db      4, "lib/", 0
 337+ 39C8 2F 00
 338+ 39CA
 339+ 39CA              // Concatenate path at a and filename and include it
 340+ 39CA              // No error is issued if filename doesn't exist.
 341+ 39CA                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 39CA             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 39CA             >
 341+ 39CA             >Dict_Ptr        defl    $
 341+ 39CA             >
 341+ 39CA             >//              ______________________________________________________________________
 341+ 39CA             >//              Heap part
 341+ 39CA             >
 341+ 39CA             >
 341+ 39CA             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB5B             >
 341+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB5B             >Latest_Definition defl  Heap_Ptr
 341+ EB5B             >
 341+ EB5B             >                // dummy db directives used to calculate length of namec
 341+ EB5B 4E 45 45 44 >                db      "NEEDS/"
 341+ EB5F 53 2F       >
 341+ EB61             >len_NFA         defl    $ - temp_NFA
 341+ EB61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB5B             >
 341+ EB5B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB5C 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB60 53 2F       >
 341+ EB62             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB61 AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB62             >
 341+ EB62 4D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB64             >Prev_Ptr        defl    Heap_Ptr
 341+ EB64             >
 341+ EB64             >mirror_Ptr      defl    $
 341+ EB64             >
 341+ EB64 CC 39       >                dw      Dict_Ptr + 2        // xt
 341+ EB66             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB66             >
 341+ EB66             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB66             >
 341+ EB66             >//              ______________________________________________________________________
 341+ EB66             >//              Dictionary part
 341+ EB66             >
 341+ EB66             >                org     Dict_Ptr
 341+ 39CA             >
 341+ 39CA 64 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 39CC             >
 341+ 39CC             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 39CC CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 39CF             >
 341+ 39CF             >
 341+ 39CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 39CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 39CF             >
 341+ 39CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 39CF D4 2B BE 25                  dw      COUNT, TUCK             // n a n
 343+ 39D3 89 39 C7 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 39D7 36 24
 344+ 39D9 89 39 48 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 39DD 61 39 61 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 39E1 C7 25
 346+ 39E3 3D 20 23 00                  dw      LIT, 35
 347+ 39E7 36 24                        dw      CMOVE
 348+ 39E9 89 39                        dw      NEEDS_FN
 349+ 39EB 6B 2D 3E 27                  dw      PAD, ONE, F_OPEN
 349+ 39EF FA 23
 350+ 39F1 1A 25                        dw      ZEQUAL
 351+ 39F3 8F 20                        dw      ZBRANCH
 352+ 39F5 08 00                        dw      Needs_1 - $
 353+ 39F7 61 38                        dw          F_INCLUDE
 354+ 39F9 82 20                        dw      BRANCH
 355+ 39FB 04 00                        dw      Needs_2 - $
 356+ 39FD              Needs_1:
 357+ 39FD              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 39FD              //              dw          LIT, 43, MESSAGE
 359+ 39FD B3 25                        dw          DROP
 360+ 39FF              Needs_2:
 361+ 39FF F5 24                        dw      EXIT                    // ;
 362+ 3A01
 363+ 3A01
 364+ 3A01                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 3A01             >
 364+ 3A01             >Dict_Ptr        defl    $
 364+ 3A01             >
 364+ 3A01             >//              ______________________________________________________________________
 364+ 3A01             >//              Heap part
 364+ 3A01             >
 364+ 3A01             >
 364+ 3A01             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB66             >
 364+ EB66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB66             >Latest_Definition defl  Heap_Ptr
 364+ EB66             >
 364+ EB66             >                // dummy db directives used to calculate length of namec
 364+ EB66 4E 44 4F 4D >                db      "NDOM"
 364+ EB6A             >len_NFA         defl    $ - temp_NFA
 364+ EB6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB66             >
 364+ EB66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB67 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB6B             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB6A CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB6B             >
 364+ EB6B 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB6D             >Prev_Ptr        defl    Heap_Ptr
 364+ EB6D             >
 364+ EB6D             >mirror_Ptr      defl    $
 364+ EB6D             >
 364+ EB6D 03 3A       >                dw      Dict_Ptr + 2        // xt
 364+ EB6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB6F             >
 364+ EB6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB6F             >
 364+ EB6F             >//              ______________________________________________________________________
 364+ EB6F             >//              Dictionary part
 364+ EB6F             >
 364+ EB6F             >                org     Dict_Ptr
 364+ 3A01             >
 364+ 3A01 6D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 3A03             >
 364+ 3A03             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 3A03 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 3A06             >
 364+ 3A06             >
 364+ 3A06             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 3A06             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 3A06             >
 364+ 3A06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 3A06              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 3A06 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 3A0A 7C 5C 3C 3E
 366+ 3A0E 22
 367+ 3A0F 00                           db 0
 368+ 3A10
 369+ 3A10                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 3A10             >
 369+ 3A10             >Dict_Ptr        defl    $
 369+ 3A10             >
 369+ 3A10             >//              ______________________________________________________________________
 369+ 3A10             >//              Heap part
 369+ 3A10             >
 369+ 3A10             >
 369+ 3A10             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB6F             >
 369+ EB6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB6F             >Latest_Definition defl  Heap_Ptr
 369+ EB6F             >
 369+ EB6F             >                // dummy db directives used to calculate length of namec
 369+ EB6F 4E 43 44 4D >                db      "NCDM"
 369+ EB73             >len_NFA         defl    $ - temp_NFA
 369+ EB73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB6F             >
 369+ EB6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB70 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB74             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB73 CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB74             >
 369+ EB74 66 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB76             >Prev_Ptr        defl    Heap_Ptr
 369+ EB76             >
 369+ EB76             >mirror_Ptr      defl    $
 369+ EB76             >
 369+ EB76 12 3A       >                dw      Dict_Ptr + 2        // xt
 369+ EB78             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB78             >
 369+ EB78             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB78             >
 369+ EB78             >//              ______________________________________________________________________
 369+ EB78             >//              Dictionary part
 369+ EB78             >
 369+ EB78             >                org     Dict_Ptr
 369+ 3A10             >
 369+ 3A10 76 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 3A12             >
 369+ 3A12             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 3A12 CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 3A15             >
 369+ 3A15             >
 369+ 3A15             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 3A15             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 3A15             >
 369+ 3A15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 3A15              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 3A15 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 3A19 24 5F 7B 7D
 371+ 3A1D 7E
 372+ 3A1E 00                           db 0
 373+ 3A1F
 374+ 3A1F              // Replace illegal character in filename using the map here above
 375+ 3A1F              // at the moment we need only  "
 376+ 3A1F                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 3A1F             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 3A1F             >
 376+ 3A1F             >Dict_Ptr        defl    $
 376+ 3A1F             >
 376+ 3A1F             >//              ______________________________________________________________________
 376+ 3A1F             >//              Heap part
 376+ 3A1F             >
 376+ 3A1F             >
 376+ 3A1F             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB78             >
 376+ EB78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB78             >Latest_Definition defl  Heap_Ptr
 376+ EB78             >
 376+ EB78             >                // dummy db directives used to calculate length of namec
 376+ EB78 4D 41 50 2D >                db      "MAP-FN"
 376+ EB7C 46 4E       >
 376+ EB7E             >len_NFA         defl    $ - temp_NFA
 376+ EB7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB78             >
 376+ EB78 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB79 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB7D 46 4E       >
 376+ EB7F             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB7E CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB7F             >
 376+ EB7F 6F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB81             >Prev_Ptr        defl    Heap_Ptr
 376+ EB81             >
 376+ EB81             >mirror_Ptr      defl    $
 376+ EB81             >
 376+ EB81 21 3A       >                dw      Dict_Ptr + 2        // xt
 376+ EB83             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB83             >
 376+ EB83             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB83             >
 376+ EB83             >//              ______________________________________________________________________
 376+ EB83             >//              Dictionary part
 376+ EB83             >
 376+ EB83             >                org     Dict_Ptr
 376+ 3A1F             >
 376+ 3A1F 81 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 3A21             >
 376+ 3A21             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 3A21 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 3A24             >
 376+ 3A24             >
 376+ 3A24             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 3A24             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 3A24             >
 376+ 3A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 3A24 D4 2B E1 2B                  dw      COUNT, BOUNDS
 378+ 3A28 CE 20                        dw      C_DO
 379+ 3A2A              Needs_3:
 380+ 3A2A 12 3A 03 3A                  dw          NCDM, NDOM, LIT, 10
 380+ 3A2E 3D 20 0A 00
 381+ 3A32 D4 20 54 26                  dw          I, CFETCH
 382+ 3A36 F5 21                        dw          C_MAP
 383+ 3A38 D4 20 5D 26                  dw          I, CSTORE
 384+ 3A3C              Needs_4:
 385+ 3A3C 7A 20                        dw      C_LOOP
 386+ 3A3E EC FF                        dw      Needs_3 - $
 387+ 3A40 F5 24                        dw      EXIT
 388+ 3A42
 389+ 3A42
 390+ 3A42              // include  "path/cccc.f" if cccc is not defined
 391+ 3A42              // filename cccc.f is temporary stored at NEEDS-W
 392+ 3A42                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 3A42             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 3A42             >
 392+ 3A42             >Dict_Ptr        defl    $
 392+ 3A42             >
 392+ 3A42             >//              ______________________________________________________________________
 392+ 3A42             >//              Heap part
 392+ 3A42             >
 392+ 3A42             >
 392+ 3A42             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB83             >
 392+ EB83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB83             >Latest_Definition defl  Heap_Ptr
 392+ EB83             >
 392+ EB83             >                // dummy db directives used to calculate length of namec
 392+ EB83 4E 45 45 44 >                db      "NEEDS-F"
 392+ EB87 53 2D 46    >
 392+ EB8A             >len_NFA         defl    $ - temp_NFA
 392+ EB8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB83             >
 392+ EB83 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EB84 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EB88 53 2D 46    >
 392+ EB8B             >                org     $-1                 // alter last byte of Name just above to set
 392+ EB8A C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EB8B             >
 392+ EB8B 78 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EB8D             >Prev_Ptr        defl    Heap_Ptr
 392+ EB8D             >
 392+ EB8D             >mirror_Ptr      defl    $
 392+ EB8D             >
 392+ EB8D 44 3A       >                dw      Dict_Ptr + 2        // xt
 392+ EB8F             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EB8F             >
 392+ EB8F             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EB8F             >
 392+ EB8F             >//              ______________________________________________________________________
 392+ EB8F             >//              Dictionary part
 392+ EB8F             >
 392+ EB8F             >                org     Dict_Ptr
 392+ 3A42             >
 392+ 3A42 8D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 3A44             >
 392+ 3A44             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 3A44 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 3A47             >
 392+ 3A47             >
 392+ 3A47             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 3A47             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 3A47             >
 392+ 3A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 3A47 BA 2F                        dw      LFIND
 394+ 3A49 8F 20                        dw      ZBRANCH
 395+ 3A4B 0A 00                        dw      Needs_5 - $
 396+ 3A4D
 397+ 3A4D B3 25 0A 26                  dw          DROP, TWO_DROP
 398+ 3A51 82 20                        dw      BRANCH
 399+ 3A53 2C 00                        dw      Needs_6 - $
 400+ 3A55              Needs_5:
 401+ 3A55 61 39                        dw          NEEDS_W
 402+ 3A57 3D 20 23 00                  dw          LIT, 35
 403+ 3A5B 42 2D                        dw          ERASE                   // a
 404+ 3A5D 5C 28 54 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 3A61 61 25
 405+ 3A63 5C 28 AA 25                  dw          HERE, OVER              // a n here n
 406+ 3A67 61 39 C7 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 3A6B 36 24
 407+ 3A6D 61 39 21 3A                  dw          NEEDS_W, NEEDS_CHECK
 408+ 3A71 61 39 48 25                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 3A75 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 3A79 C7 25 49 26                  dw          SWAP, STORE             // a
 411+ 3A7D CC 39                        dw          NEEDS_SLASH
 412+ 3A7F              Needs_6:
 413+ 3A7F F5 24                        dw      EXIT
 414+ 3A81
 415+ 3A81
 416+ 3A81              // check for cccc exists in vocabulary
 417+ 3A81              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 3A81              // search in inc subdirectory
 419+ 3A81                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 3A81             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 3A81             >
 419+ 3A81             >Dict_Ptr        defl    $
 419+ 3A81             >
 419+ 3A81             >//              ______________________________________________________________________
 419+ 3A81             >//              Heap part
 419+ 3A81             >
 419+ 3A81             >
 419+ 3A81             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EB8F             >
 419+ EB8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EB8F             >Latest_Definition defl  Heap_Ptr
 419+ EB8F             >
 419+ EB8F             >                // dummy db directives used to calculate length of namec
 419+ EB8F 4E 45 45 44 >                db      "NEEDS"
 419+ EB93 53          >
 419+ EB94             >len_NFA         defl    $ - temp_NFA
 419+ EB94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EB8F             >
 419+ EB8F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EB90 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EB94 53          >
 419+ EB95             >                org     $-1                 // alter last byte of Name just above to set
 419+ EB94 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EB95             >
 419+ EB95 83 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EB97             >Prev_Ptr        defl    Heap_Ptr
 419+ EB97             >
 419+ EB97             >mirror_Ptr      defl    $
 419+ EB97             >
 419+ EB97 83 3A       >                dw      Dict_Ptr + 2        // xt
 419+ EB99             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EB99             >
 419+ EB99             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EB99             >
 419+ EB99             >//              ______________________________________________________________________
 419+ EB99             >//              Dictionary part
 419+ EB99             >
 419+ EB99             >                org     Dict_Ptr
 419+ 3A81             >
 419+ 3A81 97 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 3A83             >
 419+ 3A83             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 3A83 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 3A86             >
 419+ 3A86             >
 419+ 3A86             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 3A86             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 3A86             >
 419+ 3A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 3A86 DE 27 3F 26                  dw      TO_IN, FETCH
 421+ 3A8A CE 25                        dw      DUP
 422+ 3A8C B6 39 44 3A                  dw      NEEDS_INC, NEEDS_PATH
 423+ 3A90 DE 27 49 26                  dw      TO_IN, STORE
 424+ 3A94 C1 39 44 3A                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 3A98 DE 27 49 26                  dw      TO_IN, STORE
 426+ 3A9C BA 2F                        dw      LFIND
 427+ 3A9E 8F 20                        dw      ZBRANCH
 428+ 3AA0 08 00                        dw      Needs_10 - $
 429+ 3AA2 0A 26                        dw          TWO_DROP
 430+ 3AA4 82 20                        dw      BRANCH
 431+ 3AA6 10 00                        dw      Needs_11 - $
 432+ 3AA8              Needs_10:
 433+ 3AA8 61 39 D4 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 3AAC 28 2C 2D 29
 434+ 3AB0 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 434+ 3AB4 8E 35
 435+ 3AB6              Needs_11:
 436+ 3AB6 F5 24                        dw      EXIT
 437+ 3AB8
 438+ 3AB8
 439+ 3AB8              //  ______________________________________________________________________
 440+ 3AB8              //
 441+ 3AB8              // load         n --
 442+ 3AB8                              Colon_Def LOAD, "LOAD", is_normal
 442+ 3AB8             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 3AB8             >
 442+ 3AB8             >Dict_Ptr        defl    $
 442+ 3AB8             >
 442+ 3AB8             >//              ______________________________________________________________________
 442+ 3AB8             >//              Heap part
 442+ 3AB8             >
 442+ 3AB8             >
 442+ 3AB8             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EB99             >
 442+ EB99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EB99             >Latest_Definition defl  Heap_Ptr
 442+ EB99             >
 442+ EB99             >                // dummy db directives used to calculate length of namec
 442+ EB99 4C 4F 41 44 >                db      "LOAD"
 442+ EB9D             >len_NFA         defl    $ - temp_NFA
 442+ EB9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EB99             >
 442+ EB99 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EB9A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EB9E             >                org     $-1                 // alter last byte of Name just above to set
 442+ EB9D C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EB9E             >
 442+ EB9E 8F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBA0             >Prev_Ptr        defl    Heap_Ptr
 442+ EBA0             >
 442+ EBA0             >mirror_Ptr      defl    $
 442+ EBA0             >
 442+ EBA0 BA 3A       >                dw      Dict_Ptr + 2        // xt
 442+ EBA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBA2             >
 442+ EBA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBA2             >
 442+ EBA2             >//              ______________________________________________________________________
 442+ EBA2             >//              Dictionary part
 442+ EBA2             >
 442+ EBA2             >                org     Dict_Ptr
 442+ 3AB8             >
 442+ 3AB8 A0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 3ABA             >
 442+ 3ABA             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 3ABA CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 3ABD             >
 442+ 3ABD             >
 442+ 3ABD             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 3ABD             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 3ABD             >
 442+ 3ABD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 3ABD D8 27 3F 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 3AC1 FF 24
 444+ 3AC3 DE 27 3F 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 3AC7 FF 24
 445+ 3AC9
 446+ 3AC9 37 27 DE 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 3ACD 49 26
 447+ 3ACF 6F 27 1A 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 3AD3 D8 27 49 26
 448+ 3AD7 7D 31                        dw      INTERPRET               // interpret
 449+ 3AD9
 450+ 3AD9 0A 25 DE 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 3ADD 49 26
 451+ 3ADF 0A 25 D8 27                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 3AE3 49 26
 452+ 3AE5 F5 24                        dw      EXIT                    // ;
 453+ 3AE7
 454+ 3AE7              //  ______________________________________________________________________
 455+ 3AE7              //
 456+ 3AE7              // -->          --
 457+ 3AE7                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 3AE7             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 3AE7             >
 457+ 3AE7             >Dict_Ptr        defl    $
 457+ 3AE7             >
 457+ 3AE7             >//              ______________________________________________________________________
 457+ 3AE7             >//              Heap part
 457+ 3AE7             >
 457+ 3AE7             >
 457+ 3AE7             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBA2             >
 457+ EBA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBA2             >Latest_Definition defl  Heap_Ptr
 457+ EBA2             >
 457+ EBA2             >                // dummy db directives used to calculate length of namec
 457+ EBA2 2D 2D 3E    >                db      "-->"
 457+ EBA5             >len_NFA         defl    $ - temp_NFA
 457+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBA2             >
 457+ EBA2 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBA3 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBA5 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBA6             >
 457+ EBA6 99 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 457+ EBA8             >
 457+ EBA8             >mirror_Ptr      defl    $
 457+ EBA8             >
 457+ EBA8 E9 3A       >                dw      Dict_Ptr + 2        // xt
 457+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBAA             >
 457+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBAA             >
 457+ EBAA             >//              ______________________________________________________________________
 457+ EBAA             >//              Dictionary part
 457+ EBAA             >
 457+ EBAA             >                org     Dict_Ptr
 457+ 3AE7             >
 457+ 3AE7 A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 3AE9             >
 457+ 3AE9             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 3AE9 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 3AEC             >
 457+ 3AEC             >
 457+ 3AEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 3AEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 3AEC             >
 457+ 3AEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 3AEC F5 2A                        dw      QLOADING                // ?loading
 459+ 3AEE 37 27 DE 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 3AF2 49 26
 460+ 3AF4 6F 27                        dw      BSCR                    // b/scr
 461+ 3AF6 D8 27 3F 26                  dw      BLK, FETCH              // blk @
 462+ 3AFA AA 25                        dw      OVER                    // over
 463+ 3AFC 3F 35                        dw      MOD                     // mod
 464+ 3AFE 9B 28                        dw      SUBTRACT                // -
 465+ 3B00 D8 27 27 26                  dw      BLK, PLUSSTORE          // +!
 466+ 3B04 F5 24                        dw      EXIT                    // ;
 467+ 3B06
 468+ 3B06              //  ______________________________________________________________________
 469+ 3B06              //
 470+ 3B06              // '            -- xt
 471+ 3B06                              Colon_Def TICK, "'", is_normal
 471+ 3B06             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 3B06             >
 471+ 3B06             >Dict_Ptr        defl    $
 471+ 3B06             >
 471+ 3B06             >//              ______________________________________________________________________
 471+ 3B06             >//              Heap part
 471+ 3B06             >
 471+ 3B06             >
 471+ 3B06             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBAA             >
 471+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBAA             >Latest_Definition defl  Heap_Ptr
 471+ EBAA             >
 471+ EBAA             >                // dummy db directives used to calculate length of namec
 471+ EBAA 27          >                db      "'"
 471+ EBAB             >len_NFA         defl    $ - temp_NFA
 471+ EBAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBAA             >
 471+ EBAA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBAB 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBAC             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBAB A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBAC             >
 471+ EBAC A2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBAE             >Prev_Ptr        defl    Heap_Ptr
 471+ EBAE             >
 471+ EBAE             >mirror_Ptr      defl    $
 471+ EBAE             >
 471+ EBAE 08 3B       >                dw      Dict_Ptr + 2        // xt
 471+ EBB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBB0             >
 471+ EBB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBB0             >
 471+ EBB0             >//              ______________________________________________________________________
 471+ EBB0             >//              Dictionary part
 471+ EBB0             >
 471+ EBB0             >                org     Dict_Ptr
 471+ 3B06             >
 471+ 3B06 AE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 3B08             >
 471+ 3B08             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 3B08 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 3B0B             >
 471+ 3B0B             >
 471+ 3B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 3B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 3B0B             >
 471+ 3B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 3B0B BA 2F                        dw      LFIND                   // -find
 473+ 3B0D 1A 25                        dw      ZEQUAL                  // 0=
 474+ 3B0F 37 27 98 2A                  dw      ZERO, QERROR            // 0 ?error
 475+ 3B13 B3 25                        dw      DROP                    // drop
 476+ 3B15 F5 24                        dw      EXIT                    // ;
 477+ 3B17
 478+ 3B17              //  ______________________________________________________________________
 479+ 3B17              //
 480+ 3B17              // forget       -- cccc
 481+ 3B17                              Colon_Def FORGET, "FORGET", is_normal
 481+ 3B17             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 3B17             >
 481+ 3B17             >Dict_Ptr        defl    $
 481+ 3B17             >
 481+ 3B17             >//              ______________________________________________________________________
 481+ 3B17             >//              Heap part
 481+ 3B17             >
 481+ 3B17             >
 481+ 3B17             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBB0             >
 481+ EBB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBB0             >Latest_Definition defl  Heap_Ptr
 481+ EBB0             >
 481+ EBB0             >                // dummy db directives used to calculate length of namec
 481+ EBB0 46 4F 52 47 >                db      "FORGET"
 481+ EBB4 45 54       >
 481+ EBB6             >len_NFA         defl    $ - temp_NFA
 481+ EBB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBB0             >
 481+ EBB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBB1 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBB5 45 54       >
 481+ EBB7             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBB6 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBB7             >
 481+ EBB7 AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBB9             >Prev_Ptr        defl    Heap_Ptr
 481+ EBB9             >
 481+ EBB9             >mirror_Ptr      defl    $
 481+ EBB9             >
 481+ EBB9 19 3B       >                dw      Dict_Ptr + 2        // xt
 481+ EBBB             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBBB             >
 481+ EBBB             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBBB             >
 481+ EBBB             >//              ______________________________________________________________________
 481+ EBBB             >//              Dictionary part
 481+ EBBB             >
 481+ EBBB             >                org     Dict_Ptr
 481+ 3B17             >
 481+ 3B17 B9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 3B19             >
 481+ 3B19             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 3B19 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 3B1C             >
 481+ 3B1C             >
 481+ 3B1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 3B1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 3B1C             >
 481+ 3B1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 3B1C FC 27 3F 26                  dw      CURRENT, FETCH          // current @
 483+ 3B20 F6 27 3F 26                  dw      CONTEXT, FETCH          // context @
 484+ 3B24 9B 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 3B28 17 00 98 2A
 485+ 3B2C 08 3B 17 2A                  dw      TICK, TO_BODY           // ' >body
 486+ 3B30 CE 25 AE 27                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 3B34 3F 26
 487+ 3B36 B2 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 3B3A 15 00 98 2A
 488+ 3B3E CE 25 4C 2A                  dw      DUP, NFA                // dup nfa
 489+ 3B42
 490+ 3B42                          //  dw      DUP
 491+ 3B42                          //  dw      LIT, $E000, LESS
 492+ 3B42                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 3B42                          //  dw      OR_OP, NOT_OP
 494+ 3B42                          //  dw      ZBRANCH
 495+ 3B42                          //  dw      Forget_then - $
 496+ 3B42
 497+ 3B42 55 29 78 29                  dw      MMU7_FETCH, FROM_FAR
 498+ 3B46 CC 27 49 26                  dw      HP, STORE
 499+ 3B4A CE 25 41 2A                  dw      DUP, CFA, CELL_MINUS
 499+ 3B4E 7C 25
 500+ 3B50              // Forget_then:
 501+ 3B50 B4 27 49 26                  dw      DP, STORE               // dp !
 502+ 3B54 57 2A 3F 26                  dw      LFA, FETCH              // lfa @
 503+ 3B58 F6 27 3F 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 3B5C 49 26
 504+ 3B5E F5 24                        dw      EXIT                    // ;
 505+ 3B60
 506+ 3B60              //  ______________________________________________________________________
 507+ 3B60              //
 508+ 3B60              // marker       -- cccc
 509+ 3B60                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 3B60             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 3B60             >
 509+ 3B60             >Dict_Ptr        defl    $
 509+ 3B60             >
 509+ 3B60             >//              ______________________________________________________________________
 509+ 3B60             >//              Heap part
 509+ 3B60             >
 509+ 3B60             >
 509+ 3B60             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBBB             >
 509+ EBBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBBB             >Latest_Definition defl  Heap_Ptr
 509+ EBBB             >
 509+ EBBB             >                // dummy db directives used to calculate length of namec
 509+ EBBB 4D 41 52 4B >                db      "MARKER"
 509+ EBBF 45 52       >
 509+ EBC1             >len_NFA         defl    $ - temp_NFA
 509+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBBB             >
 509+ EBBB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBBC 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBC0 45 52       >
 509+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBC1 D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBC2             >
 509+ EBC2 B0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 509+ EBC4             >
 509+ EBC4             >mirror_Ptr      defl    $
 509+ EBC4             >
 509+ EBC4 62 3B       >                dw      Dict_Ptr + 2        // xt
 509+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBC6             >
 509+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBC6             >
 509+ EBC6             >//              ______________________________________________________________________
 509+ EBC6             >//              Dictionary part
 509+ EBC6             >
 509+ EBC6             >                org     Dict_Ptr
 509+ 3B60             >
 509+ 3B60 C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 3B62             >
 509+ 3B62             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 3B62 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 3B65             >
 509+ 3B65             >
 509+ 3B65             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 3B65             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 3B65             >
 509+ 3B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 3B65 AC 2B                        dw      CBUILDS
 511+ 3B67 BA 27 3F 26                  dw      VOC_LINK, FETCH, COMMA
 511+ 3B6B 72 28
 512+ 3B6D FC 27 3F 26                  dw      CURRENT, FETCH, COMMA
 512+ 3B71 72 28
 513+ 3B73 F6 27 3F 26                  dw      CONTEXT, FETCH, COMMA
 513+ 3B77 72 28
 514+ 3B79 FC 27 3F 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 3B7D 3F 26 72 28
 515+ 3B81 08 2A 66 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 3B85 57 2A 3F 26
 515+ 3B89 72 28
 516+ 3B8B B7 2B                        dw      DOES_TO
 517+ 3B8D CE 25 3F 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 3B91 BA 27 49 26
 517+ 3B95 77 25
 518+ 3B97 CE 25 3F 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 3B9B FC 27 49 26
 518+ 3B9F 77 25
 519+ 3BA1 CE 25 3F 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 3BA5 F6 27 49 26
 519+ 3BA9 77 25
 520+ 3BAB CE 25 3F 26                  dw      DUP, FETCH
 521+ 3BAF                          //  dw      DUP, QHEAPP
 522+ 3BAF                          //  dw      ZBRANCH
 523+ 3BAF                          //  dw      Marker_then - $
 524+ 3BAF CE 25 CC 27                  dw          DUP, HP, STORE
 524+ 3BB3 49 26
 525+ 3BB5 66 2A 41 2A                  dw          PFA, CFA, CELL_MINUS
 525+ 3BB9 7C 25
 526+ 3BBB              // Marker_then:
 527+ 3BBB B4 27 49 26                  dw      DP, STORE, CELL_PLUS
 527+ 3BBF 77 25
 528+ 3BC1 3F 26 FC 27                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 3BC5 3F 26 49 26
 529+ 3BC9 F5 24                        dw      EXIT
 530+ 3BCB
 531+ 3BCB              //  ______________________________________________________________________
 532+ 3BCB              //
 533+ 3BCB              // spaces       n --
 534+ 3BCB                              Colon_Def SPACES, "SPACES", is_normal
 534+ 3BCB             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 3BCB             >
 534+ 3BCB             >Dict_Ptr        defl    $
 534+ 3BCB             >
 534+ 3BCB             >//              ______________________________________________________________________
 534+ 3BCB             >//              Heap part
 534+ 3BCB             >
 534+ 3BCB             >
 534+ 3BCB             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBC6             >
 534+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBC6             >Latest_Definition defl  Heap_Ptr
 534+ EBC6             >
 534+ EBC6             >                // dummy db directives used to calculate length of namec
 534+ EBC6 53 50 41 43 >                db      "SPACES"
 534+ EBCA 45 53       >
 534+ EBCC             >len_NFA         defl    $ - temp_NFA
 534+ EBCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBC6             >
 534+ EBC6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBC7 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBCB 45 53       >
 534+ EBCD             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBCC D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBCD             >
 534+ EBCD BB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBCF             >Prev_Ptr        defl    Heap_Ptr
 534+ EBCF             >
 534+ EBCF             >mirror_Ptr      defl    $
 534+ EBCF             >
 534+ EBCF CD 3B       >                dw      Dict_Ptr + 2        // xt
 534+ EBD1             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBD1             >
 534+ EBD1             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBD1             >
 534+ EBD1             >//              ______________________________________________________________________
 534+ EBD1             >//              Dictionary part
 534+ EBD1             >
 534+ EBD1             >                org     Dict_Ptr
 534+ 3BCB             >
 534+ 3BCB CF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 3BCD             >
 534+ 3BCD             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 3BCD CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 3BD0             >
 534+ 3BD0             >
 534+ 3BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 3BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 3BD0             >
 534+ 3BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 3BD0 37 27 F3 28                  dw      ZERO, MAX
 536+ 3BD4 37 27 A6 20                  dw      ZERO, C_Q_DO
 537+ 3BD8 08 00                        dw      Spaces_Leave - $
 538+ 3BDA              Spaces_Loop:
 539+ 3BDA 2D 29                        dw          SPACE
 540+ 3BDC 7A 20                        dw      C_LOOP
 541+ 3BDE FC FF                        dw      Spaces_Loop - $
 542+ 3BE0              Spaces_Leave:
 543+ 3BE0 F5 24                        dw      EXIT                    // ;
 544+ 3BE2
 545+ 3BE2              //  ______________________________________________________________________
 546+ 3BE2              //
 547+ 3BE2              // <#           --
 548+ 3BE2                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 3BE2             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 3BE2             >
 548+ 3BE2             >Dict_Ptr        defl    $
 548+ 3BE2             >
 548+ 3BE2             >//              ______________________________________________________________________
 548+ 3BE2             >//              Heap part
 548+ 3BE2             >
 548+ 3BE2             >
 548+ 3BE2             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBD1             >
 548+ EBD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBD1             >Latest_Definition defl  Heap_Ptr
 548+ EBD1             >
 548+ EBD1             >                // dummy db directives used to calculate length of namec
 548+ EBD1 3C 23       >                db      "<#"
 548+ EBD3             >len_NFA         defl    $ - temp_NFA
 548+ EBD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBD1             >
 548+ EBD1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBD2 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBD4             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBD3 A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBD4             >
 548+ EBD4 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBD6             >Prev_Ptr        defl    Heap_Ptr
 548+ EBD6             >
 548+ EBD6             >mirror_Ptr      defl    $
 548+ EBD6             >
 548+ EBD6 E4 3B       >                dw      Dict_Ptr + 2        // xt
 548+ EBD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBD8             >
 548+ EBD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBD8             >
 548+ EBD8             >//              ______________________________________________________________________
 548+ EBD8             >//              Dictionary part
 548+ EBD8             >
 548+ EBD8             >                org     Dict_Ptr
 548+ 3BE2             >
 548+ 3BE2 D6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 3BE4             >
 548+ 3BE4             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 3BE4 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 3BE7             >
 548+ 3BE7             >
 548+ 3BE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 3BE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 3BE7             >
 548+ 3BE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 3BE7 6B 2D 26 28                  dw      PAD, HLD, STORE
 549+ 3BEB 49 26
 550+ 3BED F5 24                        dw      EXIT
 551+ 3BEF
 552+ 3BEF              //  ______________________________________________________________________
 553+ 3BEF              //
 554+ 3BEF              // #>           --
 555+ 3BEF                              Colon_Def DASH_END, "#>", is_normal
 555+ 3BEF             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 3BEF             >
 555+ 3BEF             >Dict_Ptr        defl    $
 555+ 3BEF             >
 555+ 3BEF             >//              ______________________________________________________________________
 555+ 3BEF             >//              Heap part
 555+ 3BEF             >
 555+ 3BEF             >
 555+ 3BEF             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBD8             >
 555+ EBD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBD8             >Latest_Definition defl  Heap_Ptr
 555+ EBD8             >
 555+ EBD8             >                // dummy db directives used to calculate length of namec
 555+ EBD8 23 3E       >                db      "#>"
 555+ EBDA             >len_NFA         defl    $ - temp_NFA
 555+ EBDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBD8             >
 555+ EBD8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBD9 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBDB             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBDA BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBDB             >
 555+ EBDB D1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBDD             >Prev_Ptr        defl    Heap_Ptr
 555+ EBDD             >
 555+ EBDD             >mirror_Ptr      defl    $
 555+ EBDD             >
 555+ EBDD F1 3B       >                dw      Dict_Ptr + 2        // xt
 555+ EBDF             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBDF             >
 555+ EBDF             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBDF             >
 555+ EBDF             >//              ______________________________________________________________________
 555+ EBDF             >//              Dictionary part
 555+ EBDF             >
 555+ EBDF             >                org     Dict_Ptr
 555+ 3BEF             >
 555+ 3BEF DD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 3BF1             >
 555+ 3BF1             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 3BF1 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 3BF4             >
 555+ 3BF4             >
 555+ 3BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 3BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 3BF4             >
 555+ 3BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 3BF4 0A 26                        dw      TWO_DROP
 557+ 3BF6 26 28 3F 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 3BFA 6B 2D AA 25
 557+ 3BFE 9B 28
 558+ 3C00 F5 24                        dw      EXIT
 559+ 3C02
 560+ 3C02              //  ______________________________________________________________________
 561+ 3C02              //
 562+ 3C02              // sign         n d -- d
 563+ 3C02                              Colon_Def SIGN, "SIGN", is_normal
 563+ 3C02             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 3C02             >
 563+ 3C02             >Dict_Ptr        defl    $
 563+ 3C02             >
 563+ 3C02             >//              ______________________________________________________________________
 563+ 3C02             >//              Heap part
 563+ 3C02             >
 563+ 3C02             >
 563+ 3C02             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBDF             >
 563+ EBDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBDF             >Latest_Definition defl  Heap_Ptr
 563+ EBDF             >
 563+ EBDF             >                // dummy db directives used to calculate length of namec
 563+ EBDF 53 49 47 4E >                db      "SIGN"
 563+ EBE3             >len_NFA         defl    $ - temp_NFA
 563+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBDF             >
 563+ EBDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBE0 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBE3 CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EBE4             >
 563+ EBE4 D8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 563+ EBE6             >
 563+ EBE6             >mirror_Ptr      defl    $
 563+ EBE6             >
 563+ EBE6 04 3C       >                dw      Dict_Ptr + 2        // xt
 563+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EBE8             >
 563+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EBE8             >
 563+ EBE8             >//              ______________________________________________________________________
 563+ EBE8             >//              Dictionary part
 563+ EBE8             >
 563+ EBE8             >                org     Dict_Ptr
 563+ 3C02             >
 563+ 3C02 E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 3C04             >
 563+ 3C04             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 3C04 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 3C07             >
 563+ 3C07             >
 563+ 3C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 3C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 3C07             >
 563+ 3C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 3C07 2D 25                        dw      ZLESS
 565+ 3C09 8F 20                        dw      ZBRANCH
 566+ 3C0B 08 00                        dw      Sign_Endif - $
 567+ 3C0D 3D 20 2D 00                  dw          LIT, 45, HOLD
 567+ 3C11 58 2D
 568+ 3C13              Sign_Endif:
 569+ 3C13 F5 24                        dw      EXIT
 570+ 3C15
 571+ 3C15              //  ______________________________________________________________________
 572+ 3C15              //
 573+ 3C15              // #           d1 -- d2
 574+ 3C15                              Colon_Def DASH, "#", is_normal
 574+ 3C15             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 3C15             >
 574+ 3C15             >Dict_Ptr        defl    $
 574+ 3C15             >
 574+ 3C15             >//              ______________________________________________________________________
 574+ 3C15             >//              Heap part
 574+ 3C15             >
 574+ 3C15             >
 574+ 3C15             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EBE8             >
 574+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EBE8             >Latest_Definition defl  Heap_Ptr
 574+ EBE8             >
 574+ EBE8             >                // dummy db directives used to calculate length of namec
 574+ EBE8 23          >                db      "#"
 574+ EBE9             >len_NFA         defl    $ - temp_NFA
 574+ EBE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EBE8             >
 574+ EBE8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EBE9 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EBEA             >                org     $-1                 // alter last byte of Name just above to set
 574+ EBE9 A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EBEA             >
 574+ EBEA DF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EBEC             >Prev_Ptr        defl    Heap_Ptr
 574+ EBEC             >
 574+ EBEC             >mirror_Ptr      defl    $
 574+ EBEC             >
 574+ EBEC 17 3C       >                dw      Dict_Ptr + 2        // xt
 574+ EBEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EBEE             >
 574+ EBEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EBEE             >
 574+ EBEE             >//              ______________________________________________________________________
 574+ EBEE             >//              Dictionary part
 574+ EBEE             >
 574+ EBEE             >                org     Dict_Ptr
 574+ 3C15             >
 574+ 3C15 EC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 3C17             >
 574+ 3C17             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 3C17 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 3C1A             >
 574+ 3C1A             >
 574+ 3C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 3C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 3C1A             >
 574+ 3C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 3C1A 08 28 3F 26                  dw      BASE, FETCH
 576+ 3C1E
 577+ 3C1E FF 24                        dw      TO_R                    // >r           ( ud1 )
 578+ 3C20 37 27 15 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 3C24 82 24
 579+ 3C26 0A 25 C7 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 3C2A FF 24
 580+ 3C2C 82 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 3C2E 0A 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 3C30
 583+ 3C30 D5 25                        dw      ROT
 584+ 3C32 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 584+ 3C36 AA 25 C0 28
 585+ 3C3A 8F 20                        dw      ZBRANCH
 586+ 3C3C 08 00                        dw      Dash_Endif - $
 587+ 3C3E 3D 20 07 00                  dw          LIT, 7, PLUS
 587+ 3C42 48 25
 588+ 3C44              Dash_Endif:
 589+ 3C44
 590+ 3C44 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 3C48 48 25 58 2D
 591+ 3C4C F5 24                        dw      EXIT
 592+ 3C4E
 593+ 3C4E              //  ______________________________________________________________________
 594+ 3C4E              //
 595+ 3C4E              // #s           d1 -- d2
 596+ 3C4E                              Colon_Def DASHES, "#S", is_normal
 596+ 3C4E             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 3C4E             >
 596+ 3C4E             >Dict_Ptr        defl    $
 596+ 3C4E             >
 596+ 3C4E             >//              ______________________________________________________________________
 596+ 3C4E             >//              Heap part
 596+ 3C4E             >
 596+ 3C4E             >
 596+ 3C4E             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EBEE             >
 596+ EBEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EBEE             >Latest_Definition defl  Heap_Ptr
 596+ EBEE             >
 596+ EBEE             >                // dummy db directives used to calculate length of namec
 596+ EBEE 23 53       >                db      "#S"
 596+ EBF0             >len_NFA         defl    $ - temp_NFA
 596+ EBF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EBEE             >
 596+ EBEE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EBEF 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EBF1             >                org     $-1                 // alter last byte of Name just above to set
 596+ EBF0 D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EBF1             >
 596+ EBF1 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EBF3             >Prev_Ptr        defl    Heap_Ptr
 596+ EBF3             >
 596+ EBF3             >mirror_Ptr      defl    $
 596+ EBF3             >
 596+ EBF3 50 3C       >                dw      Dict_Ptr + 2        // xt
 596+ EBF5             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EBF5             >
 596+ EBF5             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EBF5             >
 596+ EBF5             >//              ______________________________________________________________________
 596+ EBF5             >//              Dictionary part
 596+ EBF5             >
 596+ EBF5             >                org     Dict_Ptr
 596+ 3C4E             >
 596+ 3C4E F3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 3C50             >
 596+ 3C50             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 3C50 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 3C53             >
 596+ 3C53             >
 596+ 3C53             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 3C53             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 3C53             >
 596+ 3C53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 3C53              Dashes_Begin:
 598+ 3C53 17 3C 1D 26                  dw      DASH, TWO_DUP
 599+ 3C57 C4 24 1A 25                  dw          OR_OP, ZEQUAL
 600+ 3C5B 8F 20                        dw      ZBRANCH
 601+ 3C5D F6 FF                        dw      Dashes_Begin - $
 602+ 3C5F F5 24                        dw      EXIT
 603+ 3C61
 604+ 3C61              //  ______________________________________________________________________
 605+ 3C61              //
 606+ 3C61              // d.r          d n --
 607+ 3C61                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 3C61             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 3C61             >
 607+ 3C61             >Dict_Ptr        defl    $
 607+ 3C61             >
 607+ 3C61             >//              ______________________________________________________________________
 607+ 3C61             >//              Heap part
 607+ 3C61             >
 607+ 3C61             >
 607+ 3C61             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EBF5             >
 607+ EBF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EBF5             >Latest_Definition defl  Heap_Ptr
 607+ EBF5             >
 607+ EBF5             >                // dummy db directives used to calculate length of namec
 607+ EBF5 44 2E 52    >                db      "D.R"
 607+ EBF8             >len_NFA         defl    $ - temp_NFA
 607+ EBF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EBF5             >
 607+ EBF5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EBF6 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EBF9             >                org     $-1                 // alter last byte of Name just above to set
 607+ EBF8 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EBF9             >
 607+ EBF9 EE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EBFB             >Prev_Ptr        defl    Heap_Ptr
 607+ EBFB             >
 607+ EBFB             >mirror_Ptr      defl    $
 607+ EBFB             >
 607+ EBFB 63 3C       >                dw      Dict_Ptr + 2        // xt
 607+ EBFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EBFD             >
 607+ EBFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EBFD             >
 607+ EBFD             >//              ______________________________________________________________________
 607+ EBFD             >//              Dictionary part
 607+ EBFD             >
 607+ EBFD             >                org     Dict_Ptr
 607+ 3C61             >
 607+ 3C61 FB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 3C63             >
 607+ 3C63             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 3C63 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 3C66             >
 607+ 3C66             >
 607+ 3C66             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 3C66             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 3C66             >
 607+ 3C66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 3C66 FF 24                        dw      TO_R
 609+ 3C68 BE 25 86 34                  dw      TUCK, DABS
 610+ 3C6C E4 3B 50 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 3C70 D5 25 04 3C
 610+ 3C74 F1 3B
 611+ 3C76 0A 25                        dw      R_TO
 612+ 3C78 AA 25 9B 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 3C7C CD 3B 28 2C
 613+ 3C80 F5 24                        dw      EXIT
 614+ 3C82
 615+ 3C82              //  ______________________________________________________________________
 616+ 3C82              //
 617+ 3C82              // .r           n1 n2 --
 618+ 3C82                              Colon_Def DOT_R, ".R", is_normal
 618+ 3C82             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 3C82             >
 618+ 3C82             >Dict_Ptr        defl    $
 618+ 3C82             >
 618+ 3C82             >//              ______________________________________________________________________
 618+ 3C82             >//              Heap part
 618+ 3C82             >
 618+ 3C82             >
 618+ 3C82             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EBFD             >
 618+ EBFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EBFD             >Latest_Definition defl  Heap_Ptr
 618+ EBFD             >
 618+ EBFD             >                // dummy db directives used to calculate length of namec
 618+ EBFD 2E 52       >                db      ".R"
 618+ EBFF             >len_NFA         defl    $ - temp_NFA
 618+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EBFD             >
 618+ EBFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EBFE 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 618+ EBFF D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC00             >
 618+ EC00 F5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC02             >Prev_Ptr        defl    Heap_Ptr
 618+ EC02             >
 618+ EC02             >mirror_Ptr      defl    $
 618+ EC02             >
 618+ EC02 84 3C       >                dw      Dict_Ptr + 2        // xt
 618+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC04             >
 618+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC04             >
 618+ EC04             >//              ______________________________________________________________________
 618+ EC04             >//              Dictionary part
 618+ EC04             >
 618+ EC04             >                org     Dict_Ptr
 618+ 3C82             >
 618+ 3C82 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 3C84             >
 618+ 3C84             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 3C84 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3C87             >
 618+ 3C87             >
 618+ 3C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3C87             >
 618+ 3C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3C87 FF 24                        dw      TO_R
 620+ 3C89 90 28 0A 25                  dw      S_TO_D, R_TO
 621+ 3C8D 63 3C                        dw      D_DOT_R
 622+ 3C8F F5 24                        dw      EXIT
 623+ 3C91
 624+ 3C91              //  ______________________________________________________________________
 625+ 3C91              //
 626+ 3C91              // d.           d --
 627+ 3C91                              Colon_Def D_DOT, "D.", is_normal
 627+ 3C91             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 3C91             >
 627+ 3C91             >Dict_Ptr        defl    $
 627+ 3C91             >
 627+ 3C91             >//              ______________________________________________________________________
 627+ 3C91             >//              Heap part
 627+ 3C91             >
 627+ 3C91             >
 627+ 3C91             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC04             >
 627+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC04             >Latest_Definition defl  Heap_Ptr
 627+ EC04             >
 627+ EC04             >                // dummy db directives used to calculate length of namec
 627+ EC04 44 2E       >                db      "D."
 627+ EC06             >len_NFA         defl    $ - temp_NFA
 627+ EC06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC04             >
 627+ EC04 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC05 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC07             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC06 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC07             >
 627+ EC07 FD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC09             >Prev_Ptr        defl    Heap_Ptr
 627+ EC09             >
 627+ EC09             >mirror_Ptr      defl    $
 627+ EC09             >
 627+ EC09 93 3C       >                dw      Dict_Ptr + 2        // xt
 627+ EC0B             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC0B             >
 627+ EC0B             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC0B             >
 627+ EC0B             >//              ______________________________________________________________________
 627+ EC0B             >//              Dictionary part
 627+ EC0B             >
 627+ EC0B             >                org     Dict_Ptr
 627+ 3C91             >
 627+ 3C91 09 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 3C93             >
 627+ 3C93             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 3C93 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 3C96             >
 627+ 3C96             >
 627+ 3C96             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 3C96             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 3C96             >
 627+ 3C96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 3C96 37 27 63 3C                  dw      ZERO, D_DOT_R, SPACE
 628+ 3C9A 2D 29
 629+ 3C9C F5 24                        dw      EXIT
 630+ 3C9E
 631+ 3C9E              //  ______________________________________________________________________
 632+ 3C9E              //
 633+ 3C9E              // .            n --
 634+ 3C9E                              Colon_Def DOT, ".", is_normal
 634+ 3C9E             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 3C9E             >
 634+ 3C9E             >Dict_Ptr        defl    $
 634+ 3C9E             >
 634+ 3C9E             >//              ______________________________________________________________________
 634+ 3C9E             >//              Heap part
 634+ 3C9E             >
 634+ 3C9E             >
 634+ 3C9E             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC0B             >
 634+ EC0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC0B             >Latest_Definition defl  Heap_Ptr
 634+ EC0B             >
 634+ EC0B             >                // dummy db directives used to calculate length of namec
 634+ EC0B 2E          >                db      "."
 634+ EC0C             >len_NFA         defl    $ - temp_NFA
 634+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC0B             >
 634+ EC0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC0C 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC0C AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC0D             >
 634+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 634+ EC0F             >
 634+ EC0F             >mirror_Ptr      defl    $
 634+ EC0F             >
 634+ EC0F A0 3C       >                dw      Dict_Ptr + 2        // xt
 634+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC11             >
 634+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC11             >
 634+ EC11             >//              ______________________________________________________________________
 634+ EC11             >//              Dictionary part
 634+ EC11             >
 634+ EC11             >                org     Dict_Ptr
 634+ 3C9E             >
 634+ 3C9E 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 3CA0             >
 634+ 3CA0             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 3CA0 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 3CA3             >
 634+ 3CA3             >
 634+ 3CA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 3CA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 3CA3             >
 634+ 3CA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 3CA3 90 28 93 3C                  dw      S_TO_D, D_DOT
 636+ 3CA7 F5 24                        dw      EXIT
 637+ 3CA9
 638+ 3CA9              //  ______________________________________________________________________
 639+ 3CA9              //
 640+ 3CA9              // ?            n --
 641+ 3CA9                              Colon_Def QUESTION, "?", is_normal
 641+ 3CA9             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 3CA9             >
 641+ 3CA9             >Dict_Ptr        defl    $
 641+ 3CA9             >
 641+ 3CA9             >//              ______________________________________________________________________
 641+ 3CA9             >//              Heap part
 641+ 3CA9             >
 641+ 3CA9             >
 641+ 3CA9             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC11             >
 641+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC11             >Latest_Definition defl  Heap_Ptr
 641+ EC11             >
 641+ EC11             >                // dummy db directives used to calculate length of namec
 641+ EC11 3F          >                db      "?"
 641+ EC12             >len_NFA         defl    $ - temp_NFA
 641+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC11             >
 641+ EC11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC12 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC12 BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC13             >
 641+ EC13 0B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC15             >Prev_Ptr        defl    Heap_Ptr
 641+ EC15             >
 641+ EC15             >mirror_Ptr      defl    $
 641+ EC15             >
 641+ EC15 AB 3C       >                dw      Dict_Ptr + 2        // xt
 641+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC17             >
 641+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC17             >
 641+ EC17             >//              ______________________________________________________________________
 641+ EC17             >//              Dictionary part
 641+ EC17             >
 641+ EC17             >                org     Dict_Ptr
 641+ 3CA9             >
 641+ 3CA9 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 3CAB             >
 641+ 3CAB             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 3CAB CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 3CAE             >
 641+ 3CAE             >
 641+ 3CAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 3CAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 3CAE             >
 641+ 3CAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 3CAE 3F 26 A0 3C                  dw      FETCH, DOT
 643+ 3CB2 F5 24                        dw      EXIT
 644+ 3CB4
 645+ 3CB4              //  ______________________________________________________________________
 646+ 3CB4              //
 647+ 3CB4              // u.           u --
 648+ 3CB4                              Colon_Def U_DOT, "U.", is_normal
 648+ 3CB4             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 3CB4             >
 648+ 3CB4             >Dict_Ptr        defl    $
 648+ 3CB4             >
 648+ 3CB4             >//              ______________________________________________________________________
 648+ 3CB4             >//              Heap part
 648+ 3CB4             >
 648+ 3CB4             >
 648+ 3CB4             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC17             >
 648+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC17             >Latest_Definition defl  Heap_Ptr
 648+ EC17             >
 648+ EC17             >                // dummy db directives used to calculate length of namec
 648+ EC17 55 2E       >                db      "U."
 648+ EC19             >len_NFA         defl    $ - temp_NFA
 648+ EC19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC17             >
 648+ EC17 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC18 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC1A             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC19 AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC1A             >
 648+ EC1A 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC1C             >Prev_Ptr        defl    Heap_Ptr
 648+ EC1C             >
 648+ EC1C             >mirror_Ptr      defl    $
 648+ EC1C             >
 648+ EC1C B6 3C       >                dw      Dict_Ptr + 2        // xt
 648+ EC1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC1E             >
 648+ EC1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC1E             >
 648+ EC1E             >//              ______________________________________________________________________
 648+ EC1E             >//              Dictionary part
 648+ EC1E             >
 648+ EC1E             >                org     Dict_Ptr
 648+ 3CB4             >
 648+ 3CB4 1C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 3CB6             >
 648+ 3CB6             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 3CB6 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 3CB9             >
 648+ 3CB9             >
 648+ 3CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 3CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 3CB9             >
 648+ 3CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 3CB9 37 27 93 3C                  dw      ZERO, D_DOT
 650+ 3CBD F5 24                        dw      EXIT
 651+ 3CBF
 652+ 3CBF              //  ______________________________________________________________________
 653+ 3CBF              //
 654+ 3CBF              // words        --
 655+ 3CBF                              Colon_Def WORDS, "WORDS", is_normal
 655+ 3CBF             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 3CBF             >
 655+ 3CBF             >Dict_Ptr        defl    $
 655+ 3CBF             >
 655+ 3CBF             >//              ______________________________________________________________________
 655+ 3CBF             >//              Heap part
 655+ 3CBF             >
 655+ 3CBF             >
 655+ 3CBF             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC1E             >
 655+ EC1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC1E             >Latest_Definition defl  Heap_Ptr
 655+ EC1E             >
 655+ EC1E             >                // dummy db directives used to calculate length of namec
 655+ EC1E 57 4F 52 44 >                db      "WORDS"
 655+ EC22 53          >
 655+ EC23             >len_NFA         defl    $ - temp_NFA
 655+ EC23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC1E             >
 655+ EC1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC1F 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC23 53          >
 655+ EC24             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC23 D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC24             >
 655+ EC24 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC26             >Prev_Ptr        defl    Heap_Ptr
 655+ EC26             >
 655+ EC26             >mirror_Ptr      defl    $
 655+ EC26             >
 655+ EC26 C1 3C       >                dw      Dict_Ptr + 2        // xt
 655+ EC28             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC28             >
 655+ EC28             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC28             >
 655+ EC28             >//              ______________________________________________________________________
 655+ EC28             >//              Dictionary part
 655+ EC28             >
 655+ EC28             >                org     Dict_Ptr
 655+ 3CBF             >
 655+ 3CBF 26 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 3CC1             >
 655+ 3CC1             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 3CC1 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 3CC4             >
 655+ 3CC4             >
 655+ 3CC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 3CC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 3CC4             >
 655+ 3CC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 3CC4 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 656+ 3CC8 E4 27 49 26
 657+ 3CCC F6 27 3F 26                  dw      CONTEXT, FETCH, FETCH
 657+ 3CD0 3F 26
 658+ 3CD2              Words_Begin:
 659+ 3CD2 9E 29                        dw          FAR // Q TO HEAP
 660+ 3CD4 CE 25 54 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 3CD8 3D 20 1F 00
 660+ 3CDC B5 24
 661+ 3CDE E4 27 3F 26                  dw          OUT, FETCH, PLUS
 661+ 3CE2 48 25
 662+ 3CE4 61 27 C0 28                  dw          CL, LESS, ZEQUAL
 662+ 3CE8 1A 25
 663+ 3CEA 8F 20                        dw          ZBRANCH
 664+ 3CEC 0A 00                        dw          Words_Endif - $
 665+ 3CEE 4D 22 37 27                  dw              CR, ZERO, OUT, STORE
 665+ 3CF2 E4 27 49 26
 666+ 3CF6              Words_Endif:
 667+ 3CF6 CE 25 08 30                  dw          DUP, ID_DOT
 668+ 3CFA 3E 27 38 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 3CFE 61 25 3F 26
 669+ 3D02 CE 25 1A 25                  dw          DUP, ZEQUAL
 670+ 3D06 4C 23 C4 24                  dw          QTERMINAL, OR_OP
 671+ 3D0A 8F 20                        dw      ZBRANCH
 672+ 3D0C C6 FF                        dw      Words_Begin - $
 673+ 3D0E B3 25                        dw      DROP
 674+ 3D10 F5 24                        dw      EXIT
 675+ 3D12
 676+ 3D12              //  ______________________________________________________________________
 677+ 3D12              //
 678+ 3D12              // list         n --
 679+ 3D12                              Colon_Def LIST, "LIST", is_normal
 679+ 3D12             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 3D12             >
 679+ 3D12             >Dict_Ptr        defl    $
 679+ 3D12             >
 679+ 3D12             >//              ______________________________________________________________________
 679+ 3D12             >//              Heap part
 679+ 3D12             >
 679+ 3D12             >
 679+ 3D12             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC28             >
 679+ EC28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC28             >Latest_Definition defl  Heap_Ptr
 679+ EC28             >
 679+ EC28             >                // dummy db directives used to calculate length of namec
 679+ EC28 4C 49 53 54 >                db      "LIST"
 679+ EC2C             >len_NFA         defl    $ - temp_NFA
 679+ EC2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC28             >
 679+ EC28 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC29 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC2D             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC2C D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC2D             >
 679+ EC2D 1E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC2F             >Prev_Ptr        defl    Heap_Ptr
 679+ EC2F             >
 679+ EC2F             >mirror_Ptr      defl    $
 679+ EC2F             >
 679+ EC2F 14 3D       >                dw      Dict_Ptr + 2        // xt
 679+ EC31             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC31             >
 679+ EC31             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC31             >
 679+ EC31             >//              ______________________________________________________________________
 679+ EC31             >//              Dictionary part
 679+ EC31             >
 679+ EC31             >                org     Dict_Ptr
 679+ 3D12             >
 679+ 3D12 2F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 3D14             >
 679+ 3D14             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 3D14 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 3D17             >
 679+ 3D17             >
 679+ 3D17             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 3D17             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 3D17             >
 679+ 3D17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 3D17 71 2B 4D 22                  dw      DECIMAL, CR
 681+ 3D1B CE 25 EA 27                  dw      DUP, SCR, STORE
 681+ 3D1F 49 26
 682+ 3D21 C5 2D                        dw      C_DOT_QUOTE
 683+ 3D23 05 53 63 72                  db      5, "Scr# "
 683+ 3D27 23 20
 684+ 3D29 A0 3C                        dw      DOT
 685+ 3D2B 76 27 37 27                  dw      LSCR, ZERO, C_DO
 685+ 3D2F CE 20
 686+ 3D31              List_Loop:
 687+ 3D31 4D 22                        dw          CR
 688+ 3D33 D4 20 4C 27                  dw          I, THREE
 689+ 3D37 84 3C 2D 29                  dw          DOT_R, SPACE
 690+ 3D3B D4 20 EA 27                  dw          I, SCR, FETCH, DOT_LINE
 690+ 3D3F 3F 26 81 35
 691+ 3D43 4C 23                        dw          QTERMINAL
 692+ 3D45 8F 20                        dw          ZBRANCH
 693+ 3D47 06 00                        dw          List_Endif - $
 694+ 3D49 9A 20                        dw              C_LEAVE
 695+ 3D4B 06 00                        dw              List_Leave - $
 696+ 3D4D              List_Endif:
 697+ 3D4D 7A 20                        dw      C_LOOP
 698+ 3D4F E2 FF                        dw      List_Loop - $
 699+ 3D51              List_Leave:
 700+ 3D51 4D 22                        dw      CR
 701+ 3D53 F5 24                        dw      EXIT
 702+ 3D55
 703+ 3D55              //  ______________________________________________________________________
 704+ 3D55              //
 705+ 3D55              // index        n1 n2 --
 706+ 3D55                              Colon_Def INDEX, "INDEX", is_normal
 706+ 3D55             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 3D55             >
 706+ 3D55             >Dict_Ptr        defl    $
 706+ 3D55             >
 706+ 3D55             >//              ______________________________________________________________________
 706+ 3D55             >//              Heap part
 706+ 3D55             >
 706+ 3D55             >
 706+ 3D55             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC31             >
 706+ EC31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC31             >Latest_Definition defl  Heap_Ptr
 706+ EC31             >
 706+ EC31             >                // dummy db directives used to calculate length of namec
 706+ EC31 49 4E 44 45 >                db      "INDEX"
 706+ EC35 58          >
 706+ EC36             >len_NFA         defl    $ - temp_NFA
 706+ EC36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC31             >
 706+ EC31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC32 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC36 58          >
 706+ EC37             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC36 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC37             >
 706+ EC37 28 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC39             >Prev_Ptr        defl    Heap_Ptr
 706+ EC39             >
 706+ EC39             >mirror_Ptr      defl    $
 706+ EC39             >
 706+ EC39 57 3D       >                dw      Dict_Ptr + 2        // xt
 706+ EC3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC3B             >
 706+ EC3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC3B             >
 706+ EC3B             >//              ______________________________________________________________________
 706+ EC3B             >//              Dictionary part
 706+ EC3B             >
 706+ EC3B             >                org     Dict_Ptr
 706+ 3D55             >
 706+ 3D55 39 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 3D57             >
 706+ 3D57             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 3D57 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 3D5A             >
 706+ 3D5A             >
 706+ 3D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 3D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 3D5A             >
 706+ 3D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 3D5A 61 25 C7 25                  dw      ONE_PLUS, SWAP, C_DO
 707+ 3D5E CE 20
 708+ 3D60              Index_Loop:
 709+ 3D60 4D 22 D4 20                  dw          CR, I, THREE
 709+ 3D64 4C 27
 710+ 3D66 84 3C 2D 29                  dw          DOT_R, SPACE
 711+ 3D6A 37 27 D4 20                  dw          ZERO, I, DOT_LINE
 711+ 3D6E 81 35
 712+ 3D70 4C 23                        dw          QTERMINAL
 713+ 3D72 8F 20                        dw          ZBRANCH
 714+ 3D74 06 00                        dw          Index_Endif - $
 715+ 3D76 9A 20                        dw              C_LEAVE
 716+ 3D78 06 00                        dw              Index_Leave - $
 717+ 3D7A              Index_Endif:
 718+ 3D7A 7A 20                        dw      C_LOOP
 719+ 3D7C E4 FF                        dw      Index_Loop - $
 720+ 3D7E              Index_Leave:
 721+ 3D7E 4D 22                        dw      CR
 722+ 3D80 F5 24                        dw      EXIT
 723+ 3D82
 724+ 3D82              //  ______________________________________________________________________
 725+ 3D82              //
 726+ 3D82              // cls          --
 727+ 3D82                              Colon_Def CLS, "CLS", is_normal
 727+ 3D82             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 3D82             >
 727+ 3D82             >Dict_Ptr        defl    $
 727+ 3D82             >
 727+ 3D82             >//              ______________________________________________________________________
 727+ 3D82             >//              Heap part
 727+ 3D82             >
 727+ 3D82             >
 727+ 3D82             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC3B             >
 727+ EC3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC3B             >Latest_Definition defl  Heap_Ptr
 727+ EC3B             >
 727+ EC3B             >                // dummy db directives used to calculate length of namec
 727+ EC3B 43 4C 53    >                db      "CLS"
 727+ EC3E             >len_NFA         defl    $ - temp_NFA
 727+ EC3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC3B             >
 727+ EC3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC3C 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC3F             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC3E D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC3F             >
 727+ EC3F 31 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC41             >Prev_Ptr        defl    Heap_Ptr
 727+ EC41             >
 727+ EC41             >mirror_Ptr      defl    $
 727+ EC41             >
 727+ EC41 84 3D       >                dw      Dict_Ptr + 2        // xt
 727+ EC43             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC43             >
 727+ EC43             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC43             >
 727+ EC43             >//              ______________________________________________________________________
 727+ EC43             >//              Dictionary part
 727+ EC43             >
 727+ EC43             >                org     Dict_Ptr
 727+ 3D82             >
 727+ 3D82 41 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 3D84             >
 727+ 3D84             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 3D84 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 3D87             >
 727+ 3D87             >
 727+ 3D87             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 3D87             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 3D87             >
 727+ 3D87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 3D87 3D 20 0E 00                  dw      LIT, $0E, EMITC
 728+ 3D8B 3C 22
 729+ 3D8D F5 24                        dw      EXIT
 730+ 3D8F
 731+ 3D8F              //  ______________________________________________________________________
 732+ 3D8F              //
 733+ 3D8F              // splash       --
 734+ 3D8F              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 3D8F              //              dw      CLS
 736+ 3D8F              //              dw      C_DOT_QUOTE
 737+ 3D8F              //              db      87
 738+ 3D8F              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 3D8F              //              db      "Heap Vocabulary - build 20231014", 13  // 33
 740+ 3D8F              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 3D8F              //              dw      EXIT
 742+ 3D8F
 743+ 3D8F              //  ______________________________________________________________________
 744+ 3D8F              //
 745+ 3D8F              // splash       --
 746+ 3D8F                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 3D8F             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 3D8F             >
 746+ 3D8F             >Dict_Ptr        defl    $
 746+ 3D8F             >
 746+ 3D8F             >//              ______________________________________________________________________
 746+ 3D8F             >//              Heap part
 746+ 3D8F             >
 746+ 3D8F             >
 746+ 3D8F             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC43             >
 746+ EC43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC43             >Latest_Definition defl  Heap_Ptr
 746+ EC43             >
 746+ EC43             >                // dummy db directives used to calculate length of namec
 746+ EC43 53 50 4C 41 >                db      "SPLASH"
 746+ EC47 53 48       >
 746+ EC49             >len_NFA         defl    $ - temp_NFA
 746+ EC49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC43             >
 746+ EC43 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC44 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC48 53 48       >
 746+ EC4A             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC49 C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC4A             >
 746+ EC4A 3B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC4C             >Prev_Ptr        defl    Heap_Ptr
 746+ EC4C             >
 746+ EC4C             >mirror_Ptr      defl    $
 746+ EC4C             >
 746+ EC4C 91 3D       >                dw      Dict_Ptr + 2        // xt
 746+ EC4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC4E             >
 746+ EC4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC4E             >
 746+ EC4E             >//              ______________________________________________________________________
 746+ EC4E             >//              Dictionary part
 746+ EC4E             >
 746+ EC4E             >                org     Dict_Ptr
 746+ 3D8F             >
 746+ 3D8F 4C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 3D91             >
 746+ 3D91             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 3D91 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 3D94             >
 746+ 3D94             >
 746+ 3D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 3D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 3D94             >
 746+ 3D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 3D94 84 3D                        dw      CLS
 748+ 3D96 3D 20 02 00                  dw      LIT, Splash_Ptr
 749+ 3D9A 9E 29                        dw      FAR
 750+ 3D9C D4 2B 28 2C                  dw      COUNT, TYPE
 751+ 3DA0                          //  dw      LIT, 26, EMITC
 752+ 3DA0                          //  dw      ZERO, EMITC
 753+ 3DA0 F5 24                        dw      EXIT
 754+ 3DA2
 755+ 3DA2              //  ______________________________________________________________________
 756+ 3DA2              //
 757+ 3DA2              // video        --
 758+ 3DA2                              Colon_Def VIDEO, "VIDEO", is_normal
 758+ 3DA2             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 758+ 3DA2             >
 758+ 3DA2             >Dict_Ptr        defl    $
 758+ 3DA2             >
 758+ 3DA2             >//              ______________________________________________________________________
 758+ 3DA2             >//              Heap part
 758+ 3DA2             >
 758+ 3DA2             >
 758+ 3DA2             >                org     (Heap_Ptr & $1FFF) + $E000
 758+ EC4E             >
 758+ EC4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 758+ EC4E             >Latest_Definition defl  Heap_Ptr
 758+ EC4E             >
 758+ EC4E             >                // dummy db directives used to calculate length of namec
 758+ EC4E 56 49 44 45 >                db      "VIDEO"
 758+ EC52 4F          >
 758+ EC53             >len_NFA         defl    $ - temp_NFA
 758+ EC53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 758+ EC4E             >
 758+ EC4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 758+ EC4F 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 758+ EC53 4F          >
 758+ EC54             >                org     $-1                 // alter last byte of Name just above to set
 758+ EC53 CF          >                db      {b $} | END_BIT     // msb as name end
 758+ EC54             >
 758+ EC54 43 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 758+ EC56             >Prev_Ptr        defl    Heap_Ptr
 758+ EC56             >
 758+ EC56             >mirror_Ptr      defl    $
 758+ EC56             >
 758+ EC56 A4 3D       >                dw      Dict_Ptr + 2        // xt
 758+ EC58             >Heap_Ptr        defl    $ - $E000           // save current HP
 758+ EC58             >
 758+ EC58             >Current_HP      defl  $ - $E000             // used to set HP once!
 758+ EC58             >
 758+ EC58             >//              ______________________________________________________________________
 758+ EC58             >//              Dictionary part
 758+ EC58             >
 758+ EC58             >                org     Dict_Ptr
 758+ 3DA2             >
 758+ 3DA2 56 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 758+ 3DA4             >
 758+ 3DA4             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 758+ 3DA4 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 758+ 3DA7             >
 758+ 3DA7             >
 758+ 3DA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 758+ 3DA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 758+ 3DA7             >
 758+ 3DA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 759+ 3DA7 45 27 CE 25                  dw      TWO, DUP, DEVICE, STORE
 759+ 3DAB B6 35 49 26
 760+ 3DAF 60 23                        dw      SELECT
 761+ 3DB1 F5 24                        dw      EXIT
 762+ 3DB3
 763+ 3DB3              //  ______________________________________________________________________
 764+ 3DB3              //
 765+ 3DB3              // autoexec     --
 766+ 3DB3              // this word is called the first time the Forth system boot to
 767+ 3DB3              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 768+ 3DB3                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 768+ 3DB3             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 768+ 3DB3             >
 768+ 3DB3             >Dict_Ptr        defl    $
 768+ 3DB3             >
 768+ 3DB3             >//              ______________________________________________________________________
 768+ 3DB3             >//              Heap part
 768+ 3DB3             >
 768+ 3DB3             >
 768+ 3DB3             >                org     (Heap_Ptr & $1FFF) + $E000
 768+ EC58             >
 768+ EC58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ EC58             >Latest_Definition defl  Heap_Ptr
 768+ EC58             >
 768+ EC58             >                // dummy db directives used to calculate length of namec
 768+ EC58 41 55 54 4F >                db      "AUTOEXEC"
 768+ EC5C 45 58 45 43 >
 768+ EC60             >len_NFA         defl    $ - temp_NFA
 768+ EC60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ EC58             >
 768+ EC58 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ EC59 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 768+ EC5D 45 58 45 43 >
 768+ EC61             >                org     $-1                 // alter last byte of Name just above to set
 768+ EC60 C3          >                db      {b $} | END_BIT     // msb as name end
 768+ EC61             >
 768+ EC61 4E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 768+ EC63             >Prev_Ptr        defl    Heap_Ptr
 768+ EC63             >
 768+ EC63             >mirror_Ptr      defl    $
 768+ EC63             >
 768+ EC63 B5 3D       >                dw      Dict_Ptr + 2        // xt
 768+ EC65             >Heap_Ptr        defl    $ - $E000           // save current HP
 768+ EC65             >
 768+ EC65             >Current_HP      defl  $ - $E000             // used to set HP once!
 768+ EC65             >
 768+ EC65             >//              ______________________________________________________________________
 768+ EC65             >//              Dictionary part
 768+ EC65             >
 768+ EC65             >                org     Dict_Ptr
 768+ 3DB3             >
 768+ 3DB3 63 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 768+ 3DB5             >
 768+ 3DB5             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 3DB5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 3DB8             >
 768+ 3DB8             >
 768+ 3DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 3DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 3DB8             >
 768+ 3DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 3DB8 3D 20 0B 00                  dw      LIT, 11
 770+ 3DBC 3D 20 FE 26                  dw      LIT, NOOP
 771+ 3DC0 3D 20 77 32                  dw      LIT, Autoexec_Ptr
 772+ 3DC4 49 26                        dw      STORE
 773+ 3DC6 BA 3A                        dw      LOAD
 774+ 3DC8
 775+ 3DC8              //              dw      NEEDS_FN, ONE, F_OPEN
 776+ 3DC8              //              dw      LIT, 43, QERROR
 777+ 3DC8              //              dw      DUP, F_INCLUDE
 778+ 3DC8              //              dw      F_CLOSE, DROP
 779+ 3DC8
 780+ 3DC8 1E 32                        dw      QUIT
 781+ 3DCA F5 24                        dw      EXIT
 782+ 3DCC
 783+ 3DCC
 784+ 3DCC              //  ______________________________________________________________________
 785+ 3DCC              //
 786+ 3DCC              // bye     --
 787+ 3DCC              //
 788+ 3DCC                              Colon_Def BYE, "BYE", is_normal
 788+ 3DCC             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 788+ 3DCC             >
 788+ 3DCC             >Dict_Ptr        defl    $
 788+ 3DCC             >
 788+ 3DCC             >//              ______________________________________________________________________
 788+ 3DCC             >//              Heap part
 788+ 3DCC             >
 788+ 3DCC             >
 788+ 3DCC             >                org     (Heap_Ptr & $1FFF) + $E000
 788+ EC65             >
 788+ EC65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 788+ EC65             >Latest_Definition defl  Heap_Ptr
 788+ EC65             >
 788+ EC65             >                // dummy db directives used to calculate length of namec
 788+ EC65 42 59 45    >                db      "BYE"
 788+ EC68             >len_NFA         defl    $ - temp_NFA
 788+ EC68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 788+ EC65             >
 788+ EC65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 788+ EC66 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 788+ EC69             >                org     $-1                 // alter last byte of Name just above to set
 788+ EC68 C5          >                db      {b $} | END_BIT     // msb as name end
 788+ EC69             >
 788+ EC69 58 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 788+ EC6B             >Prev_Ptr        defl    Heap_Ptr
 788+ EC6B             >
 788+ EC6B             >mirror_Ptr      defl    $
 788+ EC6B             >
 788+ EC6B CE 3D       >                dw      Dict_Ptr + 2        // xt
 788+ EC6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 788+ EC6D             >
 788+ EC6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 788+ EC6D             >
 788+ EC6D             >//              ______________________________________________________________________
 788+ EC6D             >//              Dictionary part
 788+ EC6D             >
 788+ EC6D             >                org     Dict_Ptr
 788+ 3DCC             >
 788+ 3DCC 6B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 788+ 3DCE             >
 788+ 3DCE             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 788+ 3DCE CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 788+ 3DD1             >
 788+ 3DD1             >
 788+ 3DD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 788+ 3DD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 788+ 3DD1             >
 788+ 3DD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 789+ 3DD1 A7 37                        dw      FLUSH
 790+ 3DD3 F5 36                        dw      EMPTY_BUFFERS
 791+ 3DD5 58 3F 3F 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 791+ 3DD9 99 23 B3 25
 792+ 3DDD 37 27 7D 27                  dw      ZERO, PLUS_ORIGIN
 793+ 3DE1 16 34                        dw      BASIC
 794+ 3DE3
 795+ 3DE3              //  ______________________________________________________________________
 796+ 3DE3              //
 797+ 3DE3              // invv     --
 798+ 3DE3              //
 799+ 3DE3              //              Colon_Def INVV, "INVV", is_normal
 800+ 3DE3              //              dw      LIT, 20, EMITC, ONE, EMITC
 801+ 3DE3              //              dw      EXIT
 802+ 3DE3
 803+ 3DE3              //  ______________________________________________________________________
 804+ 3DE3              //
 805+ 3DE3              // truv     --
 806+ 3DE3              //
 807+ 3DE3              //              Colon_Def TRUV, "TRUV", is_normal
 808+ 3DE3              //              dw      LIT, 20, EMITC, ZERO, EMITC
 809+ 3DE3              //              dw      EXIT
 810+ 3DE3
 811+ 3DE3              //  ______________________________________________________________________
 812+ 3DE3              //
 813+ 3DE3              // mark     --
 814+ 3DE3              //
 815+ 3DE3              //              Colon_Def MARK, "MARK", is_normal
 816+ 3DE3              //              dw      INVV, TYPE, TRUV
 817+ 3DE3              //              dw      EXIT
 818+ 3DE3
 819+ 3DE3              //  ______________________________________________________________________
 820+ 3DE3              //
 821+ 3DE3              // back     --
 822+ 3DE3              //
 823+ 3DE3                              Colon_Def BACK, "BACK", is_normal
 823+ 3DE3             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 823+ 3DE3             >
 823+ 3DE3             >Dict_Ptr        defl    $
 823+ 3DE3             >
 823+ 3DE3             >//              ______________________________________________________________________
 823+ 3DE3             >//              Heap part
 823+ 3DE3             >
 823+ 3DE3             >
 823+ 3DE3             >                org     (Heap_Ptr & $1FFF) + $E000
 823+ EC6D             >
 823+ EC6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ EC6D             >Latest_Definition defl  Heap_Ptr
 823+ EC6D             >
 823+ EC6D             >                // dummy db directives used to calculate length of namec
 823+ EC6D 42 41 43 4B >                db      "BACK"
 823+ EC71             >len_NFA         defl    $ - temp_NFA
 823+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ EC6D             >
 823+ EC6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ EC6E 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 823+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 823+ EC71 CB          >                db      {b $} | END_BIT     // msb as name end
 823+ EC72             >
 823+ EC72 65 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 823+ EC74             >Prev_Ptr        defl    Heap_Ptr
 823+ EC74             >
 823+ EC74             >mirror_Ptr      defl    $
 823+ EC74             >
 823+ EC74 E5 3D       >                dw      Dict_Ptr + 2        // xt
 823+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 823+ EC76             >
 823+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 823+ EC76             >
 823+ EC76             >//              ______________________________________________________________________
 823+ EC76             >//              Dictionary part
 823+ EC76             >
 823+ EC76             >                org     Dict_Ptr
 823+ 3DE3             >
 823+ 3DE3 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 823+ 3DE5             >
 823+ 3DE5             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 3DE5 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 3DE8             >
 823+ 3DE8             >
 823+ 3DE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 3DE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 3DE8             >
 823+ 3DE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 3DE8 5C 28 9B 28                  dw      HERE, SUBTRACT, COMMA
 824+ 3DEC 72 28
 825+ 3DEE F5 24                        dw      EXIT
 826+ 3DF0
 827+ 3DF0              //  ______________________________________________________________________
 828+ 3DF0              //
 829+ 3DF0              // if          ( -- a 2 ) \ compile-time
 830+ 3DF0              // IF ... THEN
 831+ 3DF0              // IF ... ELSE ... ENDIF
 832+ 3DF0                              Colon_Def IF, "IF", is_immediate
 832+ 3DF0             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 832+ 3DF0             >
 832+ 3DF0             >Dict_Ptr        defl    $
 832+ 3DF0             >
 832+ 3DF0             >//              ______________________________________________________________________
 832+ 3DF0             >//              Heap part
 832+ 3DF0             >
 832+ 3DF0             >
 832+ 3DF0             >                org     (Heap_Ptr & $1FFF) + $E000
 832+ EC76             >
 832+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 832+ EC76             >Latest_Definition defl  Heap_Ptr
 832+ EC76             >
 832+ EC76             >                // dummy db directives used to calculate length of namec
 832+ EC76 49 46       >                db      "IF"
 832+ EC78             >len_NFA         defl    $ - temp_NFA
 832+ EC78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 832+ EC76             >
 832+ EC76 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 832+ EC77 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 832+ EC79             >                org     $-1                 // alter last byte of Name just above to set
 832+ EC78 C6          >                db      {b $} | END_BIT     // msb as name end
 832+ EC79             >
 832+ EC79 6D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 832+ EC7B             >Prev_Ptr        defl    Heap_Ptr
 832+ EC7B             >
 832+ EC7B             >mirror_Ptr      defl    $
 832+ EC7B             >
 832+ EC7B F2 3D       >                dw      Dict_Ptr + 2        // xt
 832+ EC7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 832+ EC7D             >
 832+ EC7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 832+ EC7D             >
 832+ EC7D             >//              ______________________________________________________________________
 832+ EC7D             >//              Dictionary part
 832+ EC7D             >
 832+ EC7D             >                org     Dict_Ptr
 832+ 3DF0             >
 832+ 3DF0 7B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 832+ 3DF2             >
 832+ 3DF2             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 832+ 3DF2 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 832+ 3DF5             >
 832+ 3DF5             >
 832+ 3DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 832+ 3DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 832+ 3DF5             >
 832+ 3DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 833+ 3DF5 08 2B 8F 20                  dw      COMPILE, ZBRANCH
 834+ 3DF9 5C 28 37 27                  dw      HERE, ZERO, COMMA
 834+ 3DFD 72 28
 835+ 3DFF 45 27                        dw      TWO
 836+ 3E01 F5 24                        dw      EXIT
 837+ 3E03
 838+ 3E03              //  ______________________________________________________________________
 839+ 3E03              //
 840+ 3E03              // then        ( a 2 -- ) \ compile-time
 841+ 3E03              //
 842+ 3E03                              Colon_Def THEN, "THEN", is_immediate
 842+ 3E03             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 842+ 3E03             >
 842+ 3E03             >Dict_Ptr        defl    $
 842+ 3E03             >
 842+ 3E03             >//              ______________________________________________________________________
 842+ 3E03             >//              Heap part
 842+ 3E03             >
 842+ 3E03             >
 842+ 3E03             >                org     (Heap_Ptr & $1FFF) + $E000
 842+ EC7D             >
 842+ EC7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 842+ EC7D             >Latest_Definition defl  Heap_Ptr
 842+ EC7D             >
 842+ EC7D             >                // dummy db directives used to calculate length of namec
 842+ EC7D 54 48 45 4E >                db      "THEN"
 842+ EC81             >len_NFA         defl    $ - temp_NFA
 842+ EC81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 842+ EC7D             >
 842+ EC7D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 842+ EC7E 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 842+ EC82             >                org     $-1                 // alter last byte of Name just above to set
 842+ EC81 CE          >                db      {b $} | END_BIT     // msb as name end
 842+ EC82             >
 842+ EC82 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 842+ EC84             >Prev_Ptr        defl    Heap_Ptr
 842+ EC84             >
 842+ EC84             >mirror_Ptr      defl    $
 842+ EC84             >
 842+ EC84 05 3E       >                dw      Dict_Ptr + 2        // xt
 842+ EC86             >Heap_Ptr        defl    $ - $E000           // save current HP
 842+ EC86             >
 842+ EC86             >Current_HP      defl  $ - $E000             // used to set HP once!
 842+ EC86             >
 842+ EC86             >//              ______________________________________________________________________
 842+ EC86             >//              Dictionary part
 842+ EC86             >
 842+ EC86             >                org     Dict_Ptr
 842+ 3E03             >
 842+ 3E03 84 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 842+ 3E05             >
 842+ 3E05             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 842+ 3E05 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 842+ 3E08             >
 842+ 3E08             >
 842+ 3E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 842+ 3E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 842+ 3E08             >
 842+ 3E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 843+ 3E08 AD 2A                        dw      QCOMP
 844+ 3E0A 45 27 D1 2A                  dw      TWO, QPAIRS
 845+ 3E0E 5C 28 AA 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 845+ 3E12 9B 28 C7 25
 845+ 3E16 49 26
 846+ 3E18 F5 24                        dw      EXIT
 847+ 3E1A
 848+ 3E1A              //  ______________________________________________________________________
 849+ 3E1A              //
 850+ 3E1A              // endif       ( a 2 -- ) \ compile-time
 851+ 3E1A              //
 852+ 3E1A                              Colon_Def ENDIF, "ENDIF", is_immediate
 852+ 3E1A             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 852+ 3E1A             >
 852+ 3E1A             >Dict_Ptr        defl    $
 852+ 3E1A             >
 852+ 3E1A             >//              ______________________________________________________________________
 852+ 3E1A             >//              Heap part
 852+ 3E1A             >
 852+ 3E1A             >
 852+ 3E1A             >                org     (Heap_Ptr & $1FFF) + $E000
 852+ EC86             >
 852+ EC86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ EC86             >Latest_Definition defl  Heap_Ptr
 852+ EC86             >
 852+ EC86             >                // dummy db directives used to calculate length of namec
 852+ EC86 45 4E 44 49 >                db      "ENDIF"
 852+ EC8A 46          >
 852+ EC8B             >len_NFA         defl    $ - temp_NFA
 852+ EC8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ EC86             >
 852+ EC86 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ EC87 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 852+ EC8B 46          >
 852+ EC8C             >                org     $-1                 // alter last byte of Name just above to set
 852+ EC8B C6          >                db      {b $} | END_BIT     // msb as name end
 852+ EC8C             >
 852+ EC8C 7D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 852+ EC8E             >Prev_Ptr        defl    Heap_Ptr
 852+ EC8E             >
 852+ EC8E             >mirror_Ptr      defl    $
 852+ EC8E             >
 852+ EC8E 1C 3E       >                dw      Dict_Ptr + 2        // xt
 852+ EC90             >Heap_Ptr        defl    $ - $E000           // save current HP
 852+ EC90             >
 852+ EC90             >Current_HP      defl  $ - $E000             // used to set HP once!
 852+ EC90             >
 852+ EC90             >//              ______________________________________________________________________
 852+ EC90             >//              Dictionary part
 852+ EC90             >
 852+ EC90             >                org     Dict_Ptr
 852+ 3E1A             >
 852+ 3E1A 8E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 852+ 3E1C             >
 852+ 3E1C             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 3E1C CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 3E1F             >
 852+ 3E1F             >
 852+ 3E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 3E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 3E1F             >
 852+ 3E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 3E1F 05 3E                        dw      THEN
 854+ 3E21 F5 24                        dw      EXIT
 855+ 3E23
 856+ 3E23              //  ______________________________________________________________________
 857+ 3E23              //
 858+ 3E23              // else        ( a1 2 -- a2 2 ) \ compile-time
 859+ 3E23              //
 860+ 3E23                              Colon_Def ELSE, "ELSE", is_immediate
 860+ 3E23             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 860+ 3E23             >
 860+ 3E23             >Dict_Ptr        defl    $
 860+ 3E23             >
 860+ 3E23             >//              ______________________________________________________________________
 860+ 3E23             >//              Heap part
 860+ 3E23             >
 860+ 3E23             >
 860+ 3E23             >                org     (Heap_Ptr & $1FFF) + $E000
 860+ EC90             >
 860+ EC90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ EC90             >Latest_Definition defl  Heap_Ptr
 860+ EC90             >
 860+ EC90             >                // dummy db directives used to calculate length of namec
 860+ EC90 45 4C 53 45 >                db      "ELSE"
 860+ EC94             >len_NFA         defl    $ - temp_NFA
 860+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ EC90             >
 860+ EC90 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ EC91 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 860+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 860+ EC94 C5          >                db      {b $} | END_BIT     // msb as name end
 860+ EC95             >
 860+ EC95 86 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 860+ EC97             >Prev_Ptr        defl    Heap_Ptr
 860+ EC97             >
 860+ EC97             >mirror_Ptr      defl    $
 860+ EC97             >
 860+ EC97 25 3E       >                dw      Dict_Ptr + 2        // xt
 860+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 860+ EC99             >
 860+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 860+ EC99             >
 860+ EC99             >//              ______________________________________________________________________
 860+ EC99             >//              Dictionary part
 860+ EC99             >
 860+ EC99             >                org     Dict_Ptr
 860+ 3E23             >
 860+ 3E23 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 860+ 3E25             >
 860+ 3E25             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 3E25 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 3E28             >
 860+ 3E28             >
 860+ 3E28             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 3E28             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 3E28             >
 860+ 3E28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 3E28 AD 2A                        dw      QCOMP
 862+ 3E2A 45 27 D1 2A                  dw      TWO, QPAIRS
 863+ 3E2E 08 2B 82 20                  dw      COMPILE, BRANCH
 864+ 3E32 5C 28 37 27                  dw      HERE, ZERO, COMMA
 864+ 3E36 72 28
 865+ 3E38 C7 25 45 27                  dw      SWAP, TWO, THEN
 865+ 3E3C 05 3E
 866+ 3E3E 45 27                        dw      TWO
 867+ 3E40 F5 24                        dw      EXIT
 868+ 3E42
 869+ 3E42              //  ______________________________________________________________________
 870+ 3E42              //
 871+ 3E42              // begin        ( -- a 1 ) \ compile-time
 872+ 3E42              // BEGIN ... AGAIN
 873+ 3E42              // BEGIN ... f UNTIL
 874+ 3E42              // BEGIN ... f WHILE ... REPEAT
 875+ 3E42                              Colon_Def BEGIN, "BEGIN", is_immediate
 875+ 3E42             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 875+ 3E42             >
 875+ 3E42             >Dict_Ptr        defl    $
 875+ 3E42             >
 875+ 3E42             >//              ______________________________________________________________________
 875+ 3E42             >//              Heap part
 875+ 3E42             >
 875+ 3E42             >
 875+ 3E42             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ EC99             >
 875+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ EC99             >Latest_Definition defl  Heap_Ptr
 875+ EC99             >
 875+ EC99             >                // dummy db directives used to calculate length of namec
 875+ EC99 42 45 47 49 >                db      "BEGIN"
 875+ EC9D 4E          >
 875+ EC9E             >len_NFA         defl    $ - temp_NFA
 875+ EC9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ EC99             >
 875+ EC99 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ EC9A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 875+ EC9E 4E          >
 875+ EC9F             >                org     $-1                 // alter last byte of Name just above to set
 875+ EC9E CE          >                db      {b $} | END_BIT     // msb as name end
 875+ EC9F             >
 875+ EC9F 90 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ ECA1             >Prev_Ptr        defl    Heap_Ptr
 875+ ECA1             >
 875+ ECA1             >mirror_Ptr      defl    $
 875+ ECA1             >
 875+ ECA1 44 3E       >                dw      Dict_Ptr + 2        // xt
 875+ ECA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ ECA3             >
 875+ ECA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ ECA3             >
 875+ ECA3             >//              ______________________________________________________________________
 875+ ECA3             >//              Dictionary part
 875+ ECA3             >
 875+ ECA3             >                org     Dict_Ptr
 875+ 3E42             >
 875+ 3E42 A1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 3E44             >
 875+ 3E44             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 3E44 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 3E47             >
 875+ 3E47             >
 875+ 3E47             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 3E47             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 3E47             >
 875+ 3E47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 3E47 AD 2A                        dw      QCOMP
 877+ 3E49 5C 28                        dw      HERE
 878+ 3E4B 45 27                        dw      TWO
 879+ 3E4D F5 24                        dw      EXIT
 880+ 3E4F
 881+ 3E4F              //  ______________________________________________________________________
 882+ 3E4F              //
 883+ 3E4F              // again        ( a 1 -- ) \ compile-time
 884+ 3E4F                              Colon_Def AGAIN, "AGAIN", is_immediate
 884+ 3E4F             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 884+ 3E4F             >
 884+ 3E4F             >Dict_Ptr        defl    $
 884+ 3E4F             >
 884+ 3E4F             >//              ______________________________________________________________________
 884+ 3E4F             >//              Heap part
 884+ 3E4F             >
 884+ 3E4F             >
 884+ 3E4F             >                org     (Heap_Ptr & $1FFF) + $E000
 884+ ECA3             >
 884+ ECA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ ECA3             >Latest_Definition defl  Heap_Ptr
 884+ ECA3             >
 884+ ECA3             >                // dummy db directives used to calculate length of namec
 884+ ECA3 41 47 41 49 >                db      "AGAIN"
 884+ ECA7 4E          >
 884+ ECA8             >len_NFA         defl    $ - temp_NFA
 884+ ECA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ ECA3             >
 884+ ECA3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ ECA4 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 884+ ECA8 4E          >
 884+ ECA9             >                org     $-1                 // alter last byte of Name just above to set
 884+ ECA8 CE          >                db      {b $} | END_BIT     // msb as name end
 884+ ECA9             >
 884+ ECA9 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 884+ ECAB             >Prev_Ptr        defl    Heap_Ptr
 884+ ECAB             >
 884+ ECAB             >mirror_Ptr      defl    $
 884+ ECAB             >
 884+ ECAB 51 3E       >                dw      Dict_Ptr + 2        // xt
 884+ ECAD             >Heap_Ptr        defl    $ - $E000           // save current HP
 884+ ECAD             >
 884+ ECAD             >Current_HP      defl  $ - $E000             // used to set HP once!
 884+ ECAD             >
 884+ ECAD             >//              ______________________________________________________________________
 884+ ECAD             >//              Dictionary part
 884+ ECAD             >
 884+ ECAD             >                org     Dict_Ptr
 884+ 3E4F             >
 884+ 3E4F AB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 884+ 3E51             >
 884+ 3E51             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 3E51 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 884+ 3E54             >
 884+ 3E54             >
 884+ 3E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 3E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 3E54             >
 884+ 3E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 3E54 AD 2A                        dw      QCOMP
 886+ 3E56 45 27 D1 2A                  dw      TWO, QPAIRS
 887+ 3E5A 08 2B 82 20                  dw      COMPILE, BRANCH
 888+ 3E5E E5 3D                        dw      BACK
 889+ 3E60 F5 24                        dw      EXIT
 890+ 3E62
 891+ 3E62              //  ______________________________________________________________________
 892+ 3E62              //
 893+ 3E62              // until        ( a 1 -- ) \ compile-time
 894+ 3E62                              Colon_Def UNTIL, "UNTIL", is_immediate
 894+ 3E62             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 894+ 3E62             >
 894+ 3E62             >Dict_Ptr        defl    $
 894+ 3E62             >
 894+ 3E62             >//              ______________________________________________________________________
 894+ 3E62             >//              Heap part
 894+ 3E62             >
 894+ 3E62             >
 894+ 3E62             >                org     (Heap_Ptr & $1FFF) + $E000
 894+ ECAD             >
 894+ ECAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ ECAD             >Latest_Definition defl  Heap_Ptr
 894+ ECAD             >
 894+ ECAD             >                // dummy db directives used to calculate length of namec
 894+ ECAD 55 4E 54 49 >                db      "UNTIL"
 894+ ECB1 4C          >
 894+ ECB2             >len_NFA         defl    $ - temp_NFA
 894+ ECB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ ECAD             >
 894+ ECAD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ ECAE 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 894+ ECB2 4C          >
 894+ ECB3             >                org     $-1                 // alter last byte of Name just above to set
 894+ ECB2 CC          >                db      {b $} | END_BIT     // msb as name end
 894+ ECB3             >
 894+ ECB3 A3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 894+ ECB5             >Prev_Ptr        defl    Heap_Ptr
 894+ ECB5             >
 894+ ECB5             >mirror_Ptr      defl    $
 894+ ECB5             >
 894+ ECB5 64 3E       >                dw      Dict_Ptr + 2        // xt
 894+ ECB7             >Heap_Ptr        defl    $ - $E000           // save current HP
 894+ ECB7             >
 894+ ECB7             >Current_HP      defl  $ - $E000             // used to set HP once!
 894+ ECB7             >
 894+ ECB7             >//              ______________________________________________________________________
 894+ ECB7             >//              Dictionary part
 894+ ECB7             >
 894+ ECB7             >                org     Dict_Ptr
 894+ 3E62             >
 894+ 3E62 B5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 894+ 3E64             >
 894+ 3E64             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 3E64 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 894+ 3E67             >
 894+ 3E67             >
 894+ 3E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 3E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 3E67             >
 894+ 3E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 3E67 AD 2A                        dw      QCOMP
 896+ 3E69 45 27 D1 2A                  dw      TWO, QPAIRS
 897+ 3E6D 08 2B 8F 20                  dw      COMPILE, ZBRANCH
 898+ 3E71 E5 3D                        dw      BACK
 899+ 3E73 F5 24                        dw      EXIT
 900+ 3E75
 901+ 3E75              //  ______________________________________________________________________
 902+ 3E75              //
 903+ 3E75              // end          ( a 1 -- ) \ compile-time
 904+ 3E75                              Colon_Def END, "END", is_immediate
 904+ 3E75             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 904+ 3E75             >
 904+ 3E75             >Dict_Ptr        defl    $
 904+ 3E75             >
 904+ 3E75             >//              ______________________________________________________________________
 904+ 3E75             >//              Heap part
 904+ 3E75             >
 904+ 3E75             >
 904+ 3E75             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ ECB7             >
 904+ ECB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ ECB7             >Latest_Definition defl  Heap_Ptr
 904+ ECB7             >
 904+ ECB7             >                // dummy db directives used to calculate length of namec
 904+ ECB7 45 4E 44    >                db      "END"
 904+ ECBA             >len_NFA         defl    $ - temp_NFA
 904+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ ECB7             >
 904+ ECB7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ ECB8 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 904+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 904+ ECBA C4          >                db      {b $} | END_BIT     // msb as name end
 904+ ECBB             >
 904+ ECBB AD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 904+ ECBD             >
 904+ ECBD             >mirror_Ptr      defl    $
 904+ ECBD             >
 904+ ECBD 77 3E       >                dw      Dict_Ptr + 2        // xt
 904+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ ECBF             >
 904+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ ECBF             >
 904+ ECBF             >//              ______________________________________________________________________
 904+ ECBF             >//              Dictionary part
 904+ ECBF             >
 904+ ECBF             >                org     Dict_Ptr
 904+ 3E75             >
 904+ 3E75 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 3E77             >
 904+ 3E77             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 3E77 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 3E7A             >
 904+ 3E7A             >
 904+ 3E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 3E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 3E7A             >
 904+ 3E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 3E7A 64 3E                        dw      UNTIL
 906+ 3E7C F5 24                        dw      EXIT
 907+ 3E7E
 908+ 3E7E              //  ______________________________________________________________________
 909+ 3E7E              //
 910+ 3E7E              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 911+ 3E7E                              Colon_Def WHILE, "WHILE", is_immediate
 911+ 3E7E             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 911+ 3E7E             >
 911+ 3E7E             >Dict_Ptr        defl    $
 911+ 3E7E             >
 911+ 3E7E             >//              ______________________________________________________________________
 911+ 3E7E             >//              Heap part
 911+ 3E7E             >
 911+ 3E7E             >
 911+ 3E7E             >                org     (Heap_Ptr & $1FFF) + $E000
 911+ ECBF             >
 911+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ ECBF             >Latest_Definition defl  Heap_Ptr
 911+ ECBF             >
 911+ ECBF             >                // dummy db directives used to calculate length of namec
 911+ ECBF 57 48 49 4C >                db      "WHILE"
 911+ ECC3 45          >
 911+ ECC4             >len_NFA         defl    $ - temp_NFA
 911+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ ECBF             >
 911+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ ECC0 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 911+ ECC4 45          >
 911+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 911+ ECC4 C5          >                db      {b $} | END_BIT     // msb as name end
 911+ ECC5             >
 911+ ECC5 B7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 911+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 911+ ECC7             >
 911+ ECC7             >mirror_Ptr      defl    $
 911+ ECC7             >
 911+ ECC7 80 3E       >                dw      Dict_Ptr + 2        // xt
 911+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 911+ ECC9             >
 911+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 911+ ECC9             >
 911+ ECC9             >//              ______________________________________________________________________
 911+ ECC9             >//              Dictionary part
 911+ ECC9             >
 911+ ECC9             >                org     Dict_Ptr
 911+ 3E7E             >
 911+ 3E7E C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 911+ 3E80             >
 911+ 3E80             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 3E80 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 3E83             >
 911+ 3E83             >
 911+ 3E83             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 3E83             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 3E83             >
 911+ 3E83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 3E83 F2 3D                        dw      IF
 913+ 3E85              //              dw      TWO_PLUS // ( that is 4 )
 914+ 3E85 10 26                        dw      TWO_SWAP
 915+ 3E87 F5 24                        dw      EXIT
 916+ 3E89
 917+ 3E89              //  ______________________________________________________________________
 918+ 3E89              //
 919+ 3E89              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 920+ 3E89                              Colon_Def REPEAT, "REPEAT", is_immediate
 920+ 3E89             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 920+ 3E89             >
 920+ 3E89             >Dict_Ptr        defl    $
 920+ 3E89             >
 920+ 3E89             >//              ______________________________________________________________________
 920+ 3E89             >//              Heap part
 920+ 3E89             >
 920+ 3E89             >
 920+ 3E89             >                org     (Heap_Ptr & $1FFF) + $E000
 920+ ECC9             >
 920+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ ECC9             >Latest_Definition defl  Heap_Ptr
 920+ ECC9             >
 920+ ECC9             >                // dummy db directives used to calculate length of namec
 920+ ECC9 52 45 50 45 >                db      "REPEAT"
 920+ ECCD 41 54       >
 920+ ECCF             >len_NFA         defl    $ - temp_NFA
 920+ ECCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ ECC9             >
 920+ ECC9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ ECCA 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 920+ ECCE 41 54       >
 920+ ECD0             >                org     $-1                 // alter last byte of Name just above to set
 920+ ECCF D4          >                db      {b $} | END_BIT     // msb as name end
 920+ ECD0             >
 920+ ECD0 BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 920+ ECD2             >Prev_Ptr        defl    Heap_Ptr
 920+ ECD2             >
 920+ ECD2             >mirror_Ptr      defl    $
 920+ ECD2             >
 920+ ECD2 8B 3E       >                dw      Dict_Ptr + 2        // xt
 920+ ECD4             >Heap_Ptr        defl    $ - $E000           // save current HP
 920+ ECD4             >
 920+ ECD4             >Current_HP      defl  $ - $E000             // used to set HP once!
 920+ ECD4             >
 920+ ECD4             >//              ______________________________________________________________________
 920+ ECD4             >//              Dictionary part
 920+ ECD4             >
 920+ ECD4             >                org     Dict_Ptr
 920+ 3E89             >
 920+ 3E89 D2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 920+ 3E8B             >
 920+ 3E8B             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 3E8B CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 3E8E             >
 920+ 3E8E             >
 920+ 3E8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 3E8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 3E8E             >
 920+ 3E8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 3E8E 51 3E                        dw      AGAIN
 922+ 3E90              //              dw      TWO_MINUS
 923+ 3E90 05 3E                        dw      THEN
 924+ 3E92 F5 24                        dw      EXIT
 925+ 3E94
 926+ 3E94              //  ______________________________________________________________________
 927+ 3E94              //
 928+ 3E94              // ?do-
 929+ 3E94              // special version of "BACK" used by ?DO and LOOP
 930+ 3E94                              Colon_Def C_DO_BACK, "?DO-", is_normal
 930+ 3E94             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 930+ 3E94             >
 930+ 3E94             >Dict_Ptr        defl    $
 930+ 3E94             >
 930+ 3E94             >//              ______________________________________________________________________
 930+ 3E94             >//              Heap part
 930+ 3E94             >
 930+ 3E94             >
 930+ 3E94             >                org     (Heap_Ptr & $1FFF) + $E000
 930+ ECD4             >
 930+ ECD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ ECD4             >Latest_Definition defl  Heap_Ptr
 930+ ECD4             >
 930+ ECD4             >                // dummy db directives used to calculate length of namec
 930+ ECD4 3F 44 4F 2D >                db      "?DO-"
 930+ ECD8             >len_NFA         defl    $ - temp_NFA
 930+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ ECD4             >
 930+ ECD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ ECD5 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 930+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 930+ ECD8 AD          >                db      {b $} | END_BIT     // msb as name end
 930+ ECD9             >
 930+ ECD9 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 930+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 930+ ECDB             >
 930+ ECDB             >mirror_Ptr      defl    $
 930+ ECDB             >
 930+ ECDB 96 3E       >                dw      Dict_Ptr + 2        // xt
 930+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 930+ ECDD             >
 930+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 930+ ECDD             >
 930+ ECDD             >//              ______________________________________________________________________
 930+ ECDD             >//              Dictionary part
 930+ ECDD             >
 930+ ECDD             >                org     Dict_Ptr
 930+ 3E94             >
 930+ 3E94 DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 930+ 3E96             >
 930+ 3E96             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 3E96 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 3E99             >
 930+ 3E99             >
 930+ 3E99             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 3E99             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 3E99             >
 930+ 3E99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 3E99 E5 3D                        dw      BACK
 932+ 3E9B              CDoBack_Begin:
 933+ 3E9B DC 24 1A 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 933+ 3E9F 3F 26 9B 28
 934+ 3EA3 8F 20                        dw      ZBRANCH
 935+ 3EA5 0A 00                        dw      CDoBack_While - $
 936+ 3EA7 6F 25 05 3E                  dw          TWO_PLUS, THEN
 937+ 3EAB 82 20                        dw      BRANCH
 938+ 3EAD EE FF                        dw      CDoBack_Begin - $
 939+ 3EAF              CDoBack_While:
 940+ 3EAF E0 2A 1A 28                  dw      QCSP, CSP, STORE
 940+ 3EB3 49 26
 941+ 3EB5 F5 24                        dw      EXIT
 942+ 3EB7
 943+ 3EB7              //  ______________________________________________________________________
 944+ 3EB7              //
 945+ 3EB7              // do
 946+ 3EB7              // DO  ... LOOP
 947+ 3EB7              // DO  ... n +LOOP
 948+ 3EB7              // ?DO ... LOOP
 949+ 3EB7              // ?DO ... n +LOOP
 950+ 3EB7                              Colon_Def DO, "DO", is_immediate
 950+ 3EB7             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 950+ 3EB7             >
 950+ 3EB7             >Dict_Ptr        defl    $
 950+ 3EB7             >
 950+ 3EB7             >//              ______________________________________________________________________
 950+ 3EB7             >//              Heap part
 950+ 3EB7             >
 950+ 3EB7             >
 950+ 3EB7             >                org     (Heap_Ptr & $1FFF) + $E000
 950+ ECDD             >
 950+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ ECDD             >Latest_Definition defl  Heap_Ptr
 950+ ECDD             >
 950+ ECDD             >                // dummy db directives used to calculate length of namec
 950+ ECDD 44 4F       >                db      "DO"
 950+ ECDF             >len_NFA         defl    $ - temp_NFA
 950+ ECDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ ECDD             >
 950+ ECDD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ ECDE 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 950+ ECE0             >                org     $-1                 // alter last byte of Name just above to set
 950+ ECDF CF          >                db      {b $} | END_BIT     // msb as name end
 950+ ECE0             >
 950+ ECE0 D4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 950+ ECE2             >Prev_Ptr        defl    Heap_Ptr
 950+ ECE2             >
 950+ ECE2             >mirror_Ptr      defl    $
 950+ ECE2             >
 950+ ECE2 B9 3E       >                dw      Dict_Ptr + 2        // xt
 950+ ECE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 950+ ECE4             >
 950+ ECE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 950+ ECE4             >
 950+ ECE4             >//              ______________________________________________________________________
 950+ ECE4             >//              Dictionary part
 950+ ECE4             >
 950+ ECE4             >                org     Dict_Ptr
 950+ 3EB7             >
 950+ 3EB7 E2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 950+ 3EB9             >
 950+ 3EB9             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 3EB9 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 3EBC             >
 950+ 3EBC             >
 950+ 3EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 3EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 3EBC             >
 950+ 3EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 3EBC 08 2B CE 20                  dw      COMPILE, C_DO
 952+ 3EC0 1A 28 3F 26                  dw      CSP, FETCH, STORE_CSP
 952+ 3EC4 8B 2A
 953+ 3EC6 5C 28 4C 27                  dw      HERE, THREE
 954+ 3ECA F5 24                        dw      EXIT
 955+ 3ECC
 956+ 3ECC              //  ______________________________________________________________________
 957+ 3ECC              //
 958+ 3ECC              // loop
 959+ 3ECC                              Colon_Def LOOP, "LOOP", is_immediate
 959+ 3ECC             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 959+ 3ECC             >
 959+ 3ECC             >Dict_Ptr        defl    $
 959+ 3ECC             >
 959+ 3ECC             >//              ______________________________________________________________________
 959+ 3ECC             >//              Heap part
 959+ 3ECC             >
 959+ 3ECC             >
 959+ 3ECC             >                org     (Heap_Ptr & $1FFF) + $E000
 959+ ECE4             >
 959+ ECE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ ECE4             >Latest_Definition defl  Heap_Ptr
 959+ ECE4             >
 959+ ECE4             >                // dummy db directives used to calculate length of namec
 959+ ECE4 4C 4F 4F 50 >                db      "LOOP"
 959+ ECE8             >len_NFA         defl    $ - temp_NFA
 959+ ECE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ ECE4             >
 959+ ECE4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ ECE5 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 959+ ECE9             >                org     $-1                 // alter last byte of Name just above to set
 959+ ECE8 D0          >                db      {b $} | END_BIT     // msb as name end
 959+ ECE9             >
 959+ ECE9 DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 959+ ECEB             >Prev_Ptr        defl    Heap_Ptr
 959+ ECEB             >
 959+ ECEB             >mirror_Ptr      defl    $
 959+ ECEB             >
 959+ ECEB CE 3E       >                dw      Dict_Ptr + 2        // xt
 959+ ECED             >Heap_Ptr        defl    $ - $E000           // save current HP
 959+ ECED             >
 959+ ECED             >Current_HP      defl  $ - $E000             // used to set HP once!
 959+ ECED             >
 959+ ECED             >//              ______________________________________________________________________
 959+ ECED             >//              Dictionary part
 959+ ECED             >
 959+ ECED             >                org     Dict_Ptr
 959+ 3ECC             >
 959+ 3ECC EB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 959+ 3ECE             >
 959+ 3ECE             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 3ECE CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 3ED1             >
 959+ 3ED1             >
 959+ 3ED1             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 3ED1             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 3ED1             >
 959+ 3ED1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 3ED1 4C 27 D1 2A                  dw      THREE, QPAIRS
 961+ 3ED5 08 2B 7A 20                  dw      COMPILE, C_LOOP
 962+ 3ED9 96 3E                        dw      C_DO_BACK
 963+ 3EDB F5 24                        dw      EXIT
 964+ 3EDD
 965+ 3EDD              //  ______________________________________________________________________
 966+ 3EDD              //
 967+ 3EDD              // +loop
 968+ 3EDD                              Colon_Def PLOOP, "+LOOP", is_immediate
 968+ 3EDD             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 968+ 3EDD             >
 968+ 3EDD             >Dict_Ptr        defl    $
 968+ 3EDD             >
 968+ 3EDD             >//              ______________________________________________________________________
 968+ 3EDD             >//              Heap part
 968+ 3EDD             >
 968+ 3EDD             >
 968+ 3EDD             >                org     (Heap_Ptr & $1FFF) + $E000
 968+ ECED             >
 968+ ECED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ ECED             >Latest_Definition defl  Heap_Ptr
 968+ ECED             >
 968+ ECED             >                // dummy db directives used to calculate length of namec
 968+ ECED 2B 4C 4F 4F >                db      "+LOOP"
 968+ ECF1 50          >
 968+ ECF2             >len_NFA         defl    $ - temp_NFA
 968+ ECF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ ECED             >
 968+ ECED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ ECEE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 968+ ECF2 50          >
 968+ ECF3             >                org     $-1                 // alter last byte of Name just above to set
 968+ ECF2 D0          >                db      {b $} | END_BIT     // msb as name end
 968+ ECF3             >
 968+ ECF3 E4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 968+ ECF5             >Prev_Ptr        defl    Heap_Ptr
 968+ ECF5             >
 968+ ECF5             >mirror_Ptr      defl    $
 968+ ECF5             >
 968+ ECF5 DF 3E       >                dw      Dict_Ptr + 2        // xt
 968+ ECF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 968+ ECF7             >
 968+ ECF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 968+ ECF7             >
 968+ ECF7             >//              ______________________________________________________________________
 968+ ECF7             >//              Dictionary part
 968+ ECF7             >
 968+ ECF7             >                org     Dict_Ptr
 968+ 3EDD             >
 968+ 3EDD F5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 968+ 3EDF             >
 968+ 3EDF             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 3EDF CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 3EE2             >
 968+ 3EE2             >
 968+ 3EE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 3EE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 3EE2             >
 968+ 3EE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 3EE2 4C 27 D1 2A                  dw      THREE, QPAIRS
 970+ 3EE6 08 2B 4B 20                  dw      COMPILE, C_PLOOP
 971+ 3EEA 96 3E                        dw      C_DO_BACK
 972+ 3EEC F5 24                        dw      EXIT
 973+ 3EEE
 974+ 3EEE              //  ______________________________________________________________________
 975+ 3EEE              //
 976+ 3EEE              // ?do
 977+ 3EEE                              Colon_Def QDO, "?DO", is_immediate
 977+ 3EEE             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 977+ 3EEE             >
 977+ 3EEE             >Dict_Ptr        defl    $
 977+ 3EEE             >
 977+ 3EEE             >//              ______________________________________________________________________
 977+ 3EEE             >//              Heap part
 977+ 3EEE             >
 977+ 3EEE             >
 977+ 3EEE             >                org     (Heap_Ptr & $1FFF) + $E000
 977+ ECF7             >
 977+ ECF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ ECF7             >Latest_Definition defl  Heap_Ptr
 977+ ECF7             >
 977+ ECF7             >                // dummy db directives used to calculate length of namec
 977+ ECF7 3F 44 4F    >                db      "?DO"
 977+ ECFA             >len_NFA         defl    $ - temp_NFA
 977+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ ECF7             >
 977+ ECF7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ ECF8 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 977+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
 977+ ECFA CF          >                db      {b $} | END_BIT     // msb as name end
 977+ ECFB             >
 977+ ECFB ED 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 977+ ECFD             >Prev_Ptr        defl    Heap_Ptr
 977+ ECFD             >
 977+ ECFD             >mirror_Ptr      defl    $
 977+ ECFD             >
 977+ ECFD F0 3E       >                dw      Dict_Ptr + 2        // xt
 977+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 977+ ECFF             >
 977+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 977+ ECFF             >
 977+ ECFF             >//              ______________________________________________________________________
 977+ ECFF             >//              Dictionary part
 977+ ECFF             >
 977+ ECFF             >                org     Dict_Ptr
 977+ 3EEE             >
 977+ 3EEE FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 977+ 3EF0             >
 977+ 3EF0             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 3EF0 CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 3EF3             >
 977+ 3EF3             >
 977+ 3EF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 3EF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 3EF3             >
 977+ 3EF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 3EF3 08 2B A6 20                  dw      COMPILE, C_Q_DO
 979+ 3EF7 1A 28 3F 26                  dw      CSP, FETCH, STORE_CSP
 979+ 3EFB 8B 2A
 980+ 3EFD 5C 28 37 27                  dw      HERE, ZERO, COMMA, ZERO
 980+ 3F01 72 28 37 27
 981+ 3F05 5C 28 4C 27                  dw      HERE, THREE
 982+ 3F09 F5 24                        dw      EXIT
 983+ 3F0B
 984+ 3F0B              //  ______________________________________________________________________
 985+ 3F0B              //
 986+ 3F0B              // \
 987+ 3F0B                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 987+ 3F0B             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 987+ 3F0B             >
 987+ 3F0B             >Dict_Ptr        defl    $
 987+ 3F0B             >
 987+ 3F0B             >//              ______________________________________________________________________
 987+ 3F0B             >//              Heap part
 987+ 3F0B             >
 987+ 3F0B             >
 987+ 3F0B             >                org     (Heap_Ptr & $1FFF) + $E000
 987+ ECFF             >
 987+ ECFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ ECFF             >Latest_Definition defl  Heap_Ptr
 987+ ECFF             >
 987+ ECFF             >                // dummy db directives used to calculate length of namec
 987+ ECFF 5C          >                db      "\\"
 987+ ED00             >len_NFA         defl    $ - temp_NFA
 987+ ED00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ ECFF             >
 987+ ECFF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ ED00 5C          >                db      "\\"               // name string in 7-bit ascii, but
 987+ ED01             >                org     $-1                 // alter last byte of Name just above to set
 987+ ED00 DC          >                db      {b $} | END_BIT     // msb as name end
 987+ ED01             >
 987+ ED01 F7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 987+ ED03             >Prev_Ptr        defl    Heap_Ptr
 987+ ED03             >
 987+ ED03             >mirror_Ptr      defl    $
 987+ ED03             >
 987+ ED03 0D 3F       >                dw      Dict_Ptr + 2        // xt
 987+ ED05             >Heap_Ptr        defl    $ - $E000           // save current HP
 987+ ED05             >
 987+ ED05             >Current_HP      defl  $ - $E000             // used to set HP once!
 987+ ED05             >
 987+ ED05             >//              ______________________________________________________________________
 987+ ED05             >//              Dictionary part
 987+ ED05             >
 987+ ED05             >                org     Dict_Ptr
 987+ 3F0B             >
 987+ 3F0B 03 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 987+ 3F0D             >
 987+ 3F0D             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 3F0D CD E2 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 3F10             >
 987+ 3F10             >
 987+ 3F10             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 3F10             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 3F10             >
 987+ 3F10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 3F10 D8 27 3F 26                  dw      BLK, FETCH
 989+ 3F14 8F 20                        dw      ZBRANCH
 990+ 3F16 30 00                        dw      Backslash_Else_1 - $
 991+ 3F18 D8 27 3F 26                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 991+ 3F1C 3E 27 D5 28
 992+ 3F20 8F 20                        dw          ZBRANCH
 993+ 3F22 18 00                        dw          Backslash_Else_2 - $
 994+ 3F24 DE 27 3F 26                  dw              TO_IN, FETCH, CL, MOD, CL
 994+ 3F28 61 27 3F 35
 994+ 3F2C 61 27
 995+ 3F2E C7 25 9B 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 995+ 3F32 DE 27 27 26
 996+ 3F36 82 20                        dw          BRANCH
 997+ 3F38 0A 00                        dw          Backslash_Endif_2 - $
 998+ 3F3A              Backslash_Else_2:
 999+ 3F3A 68 27 7C 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 999+ 3F3E DE 27 49 26
1000+ 3F42              Backslash_Endif_2:
1001+ 3F42 82 20                        dw      BRANCH
1002+ 3F44 10 00                        dw      Backslash_Endif_1 - $
1003+ 3F46              Backslash_Else_1:
1004+ 3F46 37 27 9C 27                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1004+ 3F4A 3F 26 DE 27
1004+ 3F4E 3F 26 48 25
1004+ 3F52 49 26
1005+ 3F54              Backslash_Endif_1:
1006+ 3F54 F5 24                        dw      EXIT
1007+ 3F56
1008+ 3F56              //  ______________________________________________________________________
1009+ 3F56              //
1010+ 3F56              // blk-fh
1011+ 3F56                              Variable_Def BLK_FH,   "BLK-FH",   1
1011+ 3F56             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1011+ 3F56             >
1011+ 3F56             >Dict_Ptr        defl    $
1011+ 3F56             >
1011+ 3F56             >//              ______________________________________________________________________
1011+ 3F56             >//              Heap part
1011+ 3F56             >
1011+ 3F56             >
1011+ 3F56             >                org     (Heap_Ptr & $1FFF) + $E000
1011+ ED05             >
1011+ ED05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ ED05             >Latest_Definition defl  Heap_Ptr
1011+ ED05             >
1011+ ED05             >                // dummy db directives used to calculate length of namec
1011+ ED05 42 4C 4B 2D >                db      "BLK-FH"
1011+ ED09 46 48       >
1011+ ED0B             >len_NFA         defl    $ - temp_NFA
1011+ ED0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ ED05             >
1011+ ED05 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ ED06 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1011+ ED0A 46 48       >
1011+ ED0C             >                org     $-1                 // alter last byte of Name just above to set
1011+ ED0B C8          >                db      {b $} | END_BIT     // msb as name end
1011+ ED0C             >
1011+ ED0C FF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1011+ ED0E             >Prev_Ptr        defl    Heap_Ptr
1011+ ED0E             >
1011+ ED0E             >mirror_Ptr      defl    $
1011+ ED0E             >
1011+ ED0E 58 3F       >                dw      Dict_Ptr + 2        // xt
1011+ ED10             >Heap_Ptr        defl    $ - $E000           // save current HP
1011+ ED10             >
1011+ ED10             >Current_HP      defl  $ - $E000             // used to set HP once!
1011+ ED10             >
1011+ ED10             >//              ______________________________________________________________________
1011+ ED10             >//              Dictionary part
1011+ ED10             >
1011+ ED10             >                org     Dict_Ptr
1011+ 3F56             >
1011+ 3F56 0E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1011+ 3F58             >
1011+ 3F58             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 3F58 CD 1E 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1011+ 3F5B             >
1011+ 3F5B             >
1011+ 3F5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 3F5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 3F5B             >
1011+ 3F5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 3F5B 01 00       >                dw      1
1012+ 3F5D
1013+ 3F5D                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1013+ 3F5D             >
1013+ 3F5D             >Dict_Ptr        defl    $
1013+ 3F5D             >
1013+ 3F5D             >//              ______________________________________________________________________
1013+ 3F5D             >//              Heap part
1013+ 3F5D             >
1013+ 3F5D             >
1013+ 3F5D             >                org     (Heap_Ptr & $1FFF) + $E000
1013+ ED10             >
1013+ ED10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ ED10             >Latest_Definition defl  Heap_Ptr
1013+ ED10             >
1013+ ED10             >                // dummy db directives used to calculate length of namec
1013+ ED10 42 4C 4B 2D >                db      "BLK-FNAME"
1013+ ED14 46 4E 41 4D >
1013+ ED18 45          >
1013+ ED19             >len_NFA         defl    $ - temp_NFA
1013+ ED19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ ED10             >
1013+ ED10 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ ED11 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1013+ ED15 46 4E 41 4D >
1013+ ED19 45          >
1013+ ED1A             >                org     $-1                 // alter last byte of Name just above to set
1013+ ED19 C5          >                db      {b $} | END_BIT     // msb as name end
1013+ ED1A             >
1013+ ED1A 05 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1013+ ED1C             >Prev_Ptr        defl    Heap_Ptr
1013+ ED1C             >
1013+ ED1C             >mirror_Ptr      defl    $
1013+ ED1C             >
1013+ ED1C 5F 3F       >                dw      Dict_Ptr + 2        // xt
1013+ ED1E             >Heap_Ptr        defl    $ - $E000           // save current HP
1013+ ED1E             >
1013+ ED1E             >Current_HP      defl  $ - $E000             // used to set HP once!
1013+ ED1E             >
1013+ ED1E             >//              ______________________________________________________________________
1013+ ED1E             >//              Dictionary part
1013+ ED1E             >
1013+ ED1E             >                org     Dict_Ptr
1013+ 3F5D             >
1013+ 3F5D 1C 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1013+ 3F5F             >
1013+ 3F5F             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 3F5F CD C1 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1013+ 3F62             >
1013+ 3F62             >
1013+ 3F62             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 3F62             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 3F62             >
1013+ 3F62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 3F62 1E           Len_Filename:   db      30
1015+ 3F63 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1015+ 3F67 6F 6F 6C 73
1015+ 3F6B 2F 76 66 6F
1015+ 3F6F 72 74 68 2F
1015+ 3F73 21 42 6C 6F
1015+ 3F77 63 6B 73 2D
1015+ 3F7B 36 34 2E 62
1015+ 3F7F 69 6E 00
1016+ 3F82 00 00 00...                  ds      32
1017+ 3FA2
1018+ 3FA2              Fence_Word:
1019+ 3FA2              //  ______________________________________________________________________
1020+ 3FA2              //
1021+ 3FA2
1022+ 3FA2 00           Here_Dictionary db      0
1023+ 3FA3
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 126  3FA3
 127  3FA3              // now we save the compiled file so we can either run it or debug it
 128  3FA3                              SAVENEX OPEN "output/main.nex", ORIGIN
 129  3FA3                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 130  3FA3                              SAVENEX CFG  0
 131  3FA3                              SAVENEX BANK 2, 0
 132  3FA3                              SAVENEX AUTO
 133  3FA3                              SAVENEX CLOSE
 134  3FA3
 135  3FA3              //              PAGE 7 ;set 7 page to current slot
 136  3FA3              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 137  3FA3              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 138  3FA3
 139  3FA3                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 140  3FA3                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 141  3FA3
 142  3FA3                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 143  3FA3                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 144  3FA3
 145  3FA3                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 146  3FA3                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 147  3FA3
 148  3FA3                              // To run must copy vforth and vforth.bin to /dot directory
 149  3FA3                              // then start with
 150  3FA3                              //      .vforth
 151  3FA3
 152  3FA3                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
