# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20240616
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2024 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     1   // .dot
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  89  0000 ~            Heap_offset     defl    $2000
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  96  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  97  0000 ~            Heap_Ptr        defl    $0002
  98  0000 ~            Heap_offset     defl     0
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000              ORIGIN          equ     $2000                   // for .dot
 105  0000              Heap_Ptr        defl    $0002
 106  0000              Heap_offset     defl     0
 107  0000
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  2000
 115  2000                              if ( -1 == DEBUGGING )
 116  2000 ~                            ds 128                            // for binary comparison
 117  2000                              endif
 118  2000
 119  2000              //  ______________________________________________________________________
 120  2000              //
 121  2000              //  Naming convention for Label vs Forth correspondance
 122  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  2000              //    - Leading "0" is converted into "Z_"
 124  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  2000              //    - Equal sign "=" is converted in EQUAL
 131  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  2000              //    - Exclamation mark "!" is converted in STORE
 135  2000              //    - At-Sign "@" is converted in FETCH
 136  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  2000
 138  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 139  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 FF 32                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 FF 32                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C F6 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 E9 31        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 04 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6E                           db      110
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2024-06-16 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 34 2D 30 36
  67+ E044 2D 31 36 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2024 Matteo Vitturi "                 // 26
  69+ E05B 30 2D 32 30
  69+ E05F 32 34 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20
  70+ E071                              End_Heap
  70+ E071             >Heap_Ptr        defl    $ - $E000
  70+ E071             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E071             >
 124+ E071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E071             >Latest_Definition defl  Heap_Ptr
 124+ E071             >
 124+ E071             >                // dummy db directives used to calculate length of namec
 124+ E071 4C 49 54    >                db      "LIT"
 124+ E074             >len_NFA         defl    $ - temp_NFA
 124+ E074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E071             >
 124+ E071 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E072 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E075             >                org     $-1                 // alter last byte of Name just above to set
 124+ E074 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E075             >
 124+ E075 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E077             >Prev_Ptr        defl    Heap_Ptr
 124+ E077             >
 124+ E077             >mirror_Ptr      defl    $
 124+ E077             >
 124+ E077 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E079             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E079             >
 124+ E079             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E079             >
 124+ E079             >//              ______________________________________________________________________
 124+ E079             >//              Dictionary part
 124+ E079             >
 124+ E079             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 77 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E079             >
 140+ E079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E079             >Latest_Definition defl  Heap_Ptr
 140+ E079             >
 140+ E079             >                // dummy db directives used to calculate length of namec
 140+ E079 45 58 45 43 >                db      "EXECUTE"
 140+ E07D 55 54 45    >
 140+ E080             >len_NFA         defl    $ - temp_NFA
 140+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E079             >
 140+ E079 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07A 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07E 55 54 45    >
 140+ E081             >                org     $-1                 // alter last byte of Name just above to set
 140+ E080 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E081             >
 140+ E081 71 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E083             >Prev_Ptr        defl    Heap_Ptr
 140+ E083             >
 140+ E083             >mirror_Ptr      defl    $
 140+ E083             >
 140+ E083 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E085             >
 140+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E085             >
 140+ E085             >//              ______________________________________________________________________
 140+ E085             >//              Dictionary part
 140+ E085             >
 140+ E085             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 83 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E085             >
 160+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E085             >Latest_Definition defl  Heap_Ptr
 160+ E085             >
 160+ E085             >                // dummy db directives used to calculate length of namec
 160+ E085 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E089 4F 50 29    >
 160+ E08C             >len_NFA         defl    $ - temp_NFA
 160+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E085             >
 160+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08A 4F 50 29    >
 160+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08C A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08D             >
 160+ E08D 79 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08F             >Prev_Ptr        defl    Heap_Ptr
 160+ E08F             >
 160+ E08F             >mirror_Ptr      defl    $
 160+ E08F             >
 160+ E08F 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E091             >
 160+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E091             >
 160+ E091             >//              ______________________________________________________________________
 160+ E091             >//              Dictionary part
 160+ E091             >
 160+ E091             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8F 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E091             >
 215+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E091             >Latest_Definition defl  Heap_Ptr
 215+ E091             >
 215+ E091             >                // dummy db directives used to calculate length of namec
 215+ E091 28 4C 4F 4F >                db      "(LOOP)"
 215+ E095 50 29       >
 215+ E097             >len_NFA         defl    $ - temp_NFA
 215+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E091             >
 215+ E091 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E092 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E096 50 29       >
 215+ E098             >                org     $-1                 // alter last byte of Name just above to set
 215+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E098             >
 215+ E098 85 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09A             >Prev_Ptr        defl    Heap_Ptr
 215+ E09A             >
 215+ E09A             >mirror_Ptr      defl    $
 215+ E09A             >
 215+ E09A 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09C             >
 215+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09C             >
 215+ E09C             >//              ______________________________________________________________________
 215+ E09C             >//              Dictionary part
 215+ E09C             >
 215+ E09C             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09C             >
 225+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09C             >Latest_Definition defl  Heap_Ptr
 225+ E09C             >
 225+ E09C             >                // dummy db directives used to calculate length of namec
 225+ E09C 42 52 41 4E >                db      "BRANCH"
 225+ E0A0 43 48       >
 225+ E0A2             >len_NFA         defl    $ - temp_NFA
 225+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09C             >
 225+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A1 43 48       >
 225+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A2 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A3             >
 225+ E0A3 91 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A5             >
 225+ E0A5             >mirror_Ptr      defl    $
 225+ E0A5             >
 225+ E0A5 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A7             >
 225+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A7             >
 225+ E0A7             >//              ______________________________________________________________________
 225+ E0A7             >//              Dictionary part
 225+ E0A7             >
 225+ E0A7             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A7             >
 245+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A7             >Latest_Definition defl  Heap_Ptr
 245+ E0A7             >
 245+ E0A7             >                // dummy db directives used to calculate length of namec
 245+ E0A7 30 42 52 41 >                db      "0BRANCH"
 245+ E0AB 4E 43 48    >
 245+ E0AE             >len_NFA         defl    $ - temp_NFA
 245+ E0AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A7             >
 245+ E0A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A8 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AC 4E 43 48    >
 245+ E0AF             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AE C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AF             >
 245+ E0AF 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B1             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B1             >
 245+ E0B1             >mirror_Ptr      defl    $
 245+ E0B1             >
 245+ E0B1 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B3             >
 245+ E0B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B3             >
 245+ E0B3             >//              ______________________________________________________________________
 245+ E0B3             >//              Dictionary part
 245+ E0B3             >
 245+ E0B3             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B3             >
 260+ E0B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B3             >Latest_Definition defl  Heap_Ptr
 260+ E0B3             >
 260+ E0B3             >                // dummy db directives used to calculate length of namec
 260+ E0B3 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B7 56 45 29    >
 260+ E0BA             >len_NFA         defl    $ - temp_NFA
 260+ E0BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B3             >
 260+ E0B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B4 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B8 56 45 29    >
 260+ E0BB             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BA A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BB             >
 260+ E0BB A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BD             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BD             >
 260+ E0BD             >mirror_Ptr      defl    $
 260+ E0BD             >
 260+ E0BD 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BF             >
 260+ E0BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BF             >
 260+ E0BF             >//              ______________________________________________________________________
 260+ E0BF             >//              Dictionary part
 260+ E0BF             >
 260+ E0BF             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A                              // ex      de, hl
 262+ 209A                              // *** ldhlrp
 263+ 209A 3E 04                        ld      a, 4
 264+ 209C ED 32                        add     de, a
 265+ 209E                              // *** ldrphl
 266+ 209E                              // ex      de, hl
 267+ 209E 18 E2                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A0                              next
 268+ 20A0 DD E9       >                jp      (ix)
 269+ 20A2
 270+ 20A2              //  ______________________________________________________________________
 271+ 20A2              //
 272+ 20A2              // (?do)        lim ind --
 273+ 20A2              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A2              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A2              // used to skip the loop if lim == ind
 276+ 20A2                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A2             >
 276+ 20A2             >Dict_Ptr        defl    $
 276+ 20A2             >
 276+ 20A2             >//              ______________________________________________________________________
 276+ 20A2             >//              Heap part
 276+ 20A2             >
 276+ 20A2             >
 276+ 20A2             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BF             >
 276+ E0BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BF             >Latest_Definition defl  Heap_Ptr
 276+ E0BF             >
 276+ E0BF             >                // dummy db directives used to calculate length of namec
 276+ E0BF 28 3F 44 4F >                db      "(?DO)"
 276+ E0C3 29          >
 276+ E0C4             >len_NFA         defl    $ - temp_NFA
 276+ E0C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BF             >
 276+ E0BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C4 29          >
 276+ E0C5             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C4 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C5             >
 276+ E0C5 B3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C7             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C7             >
 276+ E0C7             >mirror_Ptr      defl    $
 276+ E0C7             >
 276+ E0C7 A4 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C9             >
 276+ E0C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C9             >
 276+ E0C9             >//              ______________________________________________________________________
 276+ E0C9             >//              Dictionary part
 276+ E0C9             >
 276+ E0C9             >                org     Dict_Ptr
 276+ 20A2             >
 276+ 20A2 C7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A4             >
 276+ 20A4             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A4 ~           >
 276+ 20A4 ~           >
 276+ 20A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A4             >
 276+ 20A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A4 D9                           exx
 278+ 20A5 D1                            pop     de                  // de has the index
 279+ 20A6 E1                            pop     hl                  // hl has the limit
 280+ 20A7 44                            ld      b, h
 281+ 20A8 4D                            ld      c, l
 282+ 20A9 E5                            push    hl                  // put them back to stack for later
 283+ 20AA D5                            push    de
 284+ 20AB A7                            and     a                   // reset carry flag
 285+ 20AC ED 52                         sbc     hl, de              // compute limit - index
 286+ 20AE D9                           exx
 287+ 20AF 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B1 E1                               pop     hl
 289+ 20B2 E1                               pop     hl
 290+ 20B3 18 CD                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B5              Do_Ptr:
 292+ 20B5                              // *** ldhlrp                 // prepare RP
 293+ 20B5                              // *** ex      de, hl
 294+ 20B5                              // dec     de
 295+ 20B5                              // dec     de
 296+ 20B5                              // dec     de
 297+ 20B5                              // dec     de
 298+ 20B5 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 299+ 20B9 D5                           push    de                  // pass it to h'l'
 300+ 20BA                              // *** ex      de, hl
 301+ 20BA                              // *** ldrphl
 302+ 20BA D9                           exx
 303+ 20BB E1                            pop     hl
 304+ 20BC
 305+ 20BC                               // store index as top RP
 306+ 20BC D1                            pop     de
 307+ 20BD 73                            ld      (hl), e
 308+ 20BE 23                            inc     hl
 309+ 20BF 72                            ld      (hl), d
 310+ 20C0 23                            inc     hl
 311+ 20C1                               // stores lim as second from top RP
 312+ 20C1 D1                            pop     de
 313+ 20C2 73                            ld      (hl), e
 314+ 20C3 23                            inc     hl
 315+ 20C4 72                            ld      (hl), d
 316+ 20C5 D9                           exx
 317+ 20C6                              // skip branch-style offseet
 318+ 20C6 03                           inc     bc
 319+ 20C7 03                           inc     bc
 320+ 20C8                              next
 320+ 20C8 DD E9       >                jp      (ix)
 321+ 20CA
 322+ 20CA              //  ______________________________________________________________________
 323+ 20CA              //
 324+ 20CA              // (do)        lim ind --
 325+ 20CA              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CA              // this is a simpler version of (?DO)
 327+ 20CA                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CA             >
 327+ 20CA             >Dict_Ptr        defl    $
 327+ 20CA             >
 327+ 20CA             >//              ______________________________________________________________________
 327+ 20CA             >//              Heap part
 327+ 20CA             >
 327+ 20CA             >
 327+ 20CA             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C9             >
 327+ E0C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C9             >Latest_Definition defl  Heap_Ptr
 327+ E0C9             >
 327+ E0C9             >                // dummy db directives used to calculate length of namec
 327+ E0C9 28 44 4F 29 >                db      "(DO)"
 327+ E0CD             >len_NFA         defl    $ - temp_NFA
 327+ E0CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C9             >
 327+ E0C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CA 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CE             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CD A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CE             >
 327+ E0CE BF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D0             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D0             >
 327+ E0D0             >mirror_Ptr      defl    $
 327+ E0D0             >
 327+ E0D0 CC 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D2             >
 327+ E0D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D2             >
 327+ E0D2             >//              ______________________________________________________________________
 327+ E0D2             >//              Dictionary part
 327+ E0D2             >
 327+ E0D2             >                org     Dict_Ptr
 327+ 20CA             >
 327+ 20CA D0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CC             >
 327+ 20CC             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CC ~           >
 327+ 20CC ~           >
 327+ 20CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CC             >
 327+ 20CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CC 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CD 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 20CE 18 E5                        jr      Do_Ptr
 331+ 20D0
 332+ 20D0              //  ______________________________________________________________________
 333+ 20D0              //
 334+ 20D0              // i            -- n
 335+ 20D0              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D0              // the current value of the index-loop
 337+ 20D0                              New_Def I, "I", is_code, is_normal
 337+ 20D0             >
 337+ 20D0             >Dict_Ptr        defl    $
 337+ 20D0             >
 337+ 20D0             >//              ______________________________________________________________________
 337+ 20D0             >//              Heap part
 337+ 20D0             >
 337+ 20D0             >
 337+ 20D0             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D2             >
 337+ E0D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D2             >Latest_Definition defl  Heap_Ptr
 337+ E0D2             >
 337+ E0D2             >                // dummy db directives used to calculate length of namec
 337+ E0D2 49          >                db      "I"
 337+ E0D3             >len_NFA         defl    $ - temp_NFA
 337+ E0D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D2             >
 337+ E0D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D3 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D4             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D3 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D4             >
 337+ E0D4 C9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D6             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D6             >
 337+ E0D6             >mirror_Ptr      defl    $
 337+ E0D6             >
 337+ E0D6 D2 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D8             >
 337+ E0D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D8             >
 337+ E0D8             >//              ______________________________________________________________________
 337+ E0D8             >//              Dictionary part
 337+ E0D8             >
 337+ E0D8             >                org     Dict_Ptr
 337+ 20D0             >
 337+ 20D0 D6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D2             >
 337+ 20D2             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D2 ~           >
 337+ 20D2 ~           >
 337+ 20D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D2             >
 337+ 20D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D2              I_Ptr:
 339+ 20D2 62                           ld      h, d
 340+ 20D3 6B                           ld      l, e
 341+ 20D4                              // *** ldhlrp
 342+ 20D4              I_Ptr_prime:
 343+ 20D4 7E                           ld      a, (hl)
 344+ 20D5 23                           inc     hl
 345+ 20D6 66                           ld      h, (hl)
 346+ 20D7 6F                           ld      l, a
 347+ 20D8 E5                           push    hl
 348+ 20D9                              next
 348+ 20D9 DD E9       >                jp      (ix)
 349+ 20DB
 350+ 20DB
 351+ 20DB              //  ______________________________________________________________________
 352+ 20DB              //
 353+ 20DB              // i'            -- n
 354+ 20DB              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DB              // the limit of the index-loop
 356+ 20DB
 357+ 20DB                              New_Def II, "I'", is_code, is_normal
 357+ 20DB             >
 357+ 20DB             >Dict_Ptr        defl    $
 357+ 20DB             >
 357+ 20DB             >//              ______________________________________________________________________
 357+ 20DB             >//              Heap part
 357+ 20DB             >
 357+ 20DB             >
 357+ 20DB             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D8             >
 357+ E0D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D8             >Latest_Definition defl  Heap_Ptr
 357+ E0D8             >
 357+ E0D8             >                // dummy db directives used to calculate length of namec
 357+ E0D8 49 27       >                db      "I'"
 357+ E0DA             >len_NFA         defl    $ - temp_NFA
 357+ E0DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D8             >
 357+ E0D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D9 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DB             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DA A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DB             >
 357+ E0DB D2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DD             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DD             >
 357+ E0DD             >mirror_Ptr      defl    $
 357+ E0DD             >
 357+ E0DD DD 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DF             >
 357+ E0DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DF             >
 357+ E0DF             >//              ______________________________________________________________________
 357+ E0DF             >//              Dictionary part
 357+ E0DF             >
 357+ E0DF             >                org     Dict_Ptr
 357+ 20DB             >
 357+ 20DB DD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DD             >
 357+ 20DD             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DD ~           >
 357+ 20DD ~           >
 357+ 20DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DD             >
 357+ 20DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DD 62                           ld      h, d
 359+ 20DE 6B                           ld      l, e
 360+ 20DF                              // *** ldhlrp
 361+ 20DF 23                           inc     hl
 362+ 20E0 23                           inc     hl
 363+ 20E1 18 F1                        jr      I_Ptr_prime
 364+ 20E3
 365+ 20E3
 366+ 20E3              //  ______________________________________________________________________
 367+ 20E3              //
 368+ 20E3              // digit        c n -- u tf  |  ff
 369+ 20E3              // convert a character c using base n
 370+ 20E3              // returns a unsigned number and a true flag
 371+ 20E3              // or just a false flag if the conversion fails
 372+ 20E3                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E3             >
 372+ 20E3             >Dict_Ptr        defl    $
 372+ 20E3             >
 372+ 20E3             >//              ______________________________________________________________________
 372+ 20E3             >//              Heap part
 372+ 20E3             >
 372+ 20E3             >
 372+ 20E3             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DF             >
 372+ E0DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DF             >Latest_Definition defl  Heap_Ptr
 372+ E0DF             >
 372+ E0DF             >                // dummy db directives used to calculate length of namec
 372+ E0DF 44 49 47 49 >                db      "DIGIT"
 372+ E0E3 54          >
 372+ E0E4             >len_NFA         defl    $ - temp_NFA
 372+ E0E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DF             >
 372+ E0DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E0 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E4 54          >
 372+ E0E5             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E4 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E5             >
 372+ E0E5 D8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E7             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E7             >
 372+ E0E7             >mirror_Ptr      defl    $
 372+ E0E7             >
 372+ E0E7 E5 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E9             >
 372+ E0E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E9             >
 372+ E0E9             >//              ______________________________________________________________________
 372+ E0E9             >//              Dictionary part
 372+ E0E9             >
 372+ E0E9             >                org     Dict_Ptr
 372+ 20E3             >
 372+ 20E3 E7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E5             >
 372+ 20E5             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E5 ~           >
 372+ 20E5 ~           >
 372+ 20E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E5             >
 372+ 20E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E5 D9                           exx
 374+ 20E6 E1                           pop     hl                  // l has the base
 375+ 20E7 D1                           pop     de                  // e has the digit
 376+ 20E8 7B                           ld      a, e
 377+ 20E9 FE 60                        cp      $60                 // check if lowercase
 378+ 20EB 38 02                        jr      c, Digit_Uppercase
 379+ 20ED D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20EF              Digit_Uppercase:
 381+ 20EF D6 30                        sub     $30
 382+ 20F1 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F3 FE 0A                            cp      $0A
 384+ 20F5 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F7 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20F9 FE 0A                                cp      $0A
 387+ 20FB 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FD
 389+ 20FD              Digit_Decimal:
 390+ 20FD                              // compare digit
 391+ 20FD BD                           cp      l                   // compare with base
 392+ 20FE 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2100 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2101                              //  ld      hl, -1
 395+ 2101 ED 62                            sbc     hl, hl
 396+ 2103 D5                               push    de
 397+ 2104 E5                               push    hl
 398+ 2105 D9                               exx
 399+ 2106                                  next
 399+ 2106 DD E9       >                jp      (ix)
 400+ 2108              Digit_Fail:
 401+ 2108 21 00 00                     ld      hl, 0
 402+ 210B E5                           push    hl
 403+ 210C D9                           exx
 404+ 210D                              next
 404+ 210D DD E9       >                jp      (ix)
 405+ 210F
 406+ 210F              //  ______________________________________________________________________
 407+ 210F              //
 408+ 210F              //  parametric uppercase routine
 409+ 210F              //  depending on the following op-code the routine can be by-passed
 410+ 210F              //  changing the behaviour of some callers.
 411+ 210F              //  If it is "ret" then the system is Case-Sensitive
 412+ 210F              //  If it is "Nop" then the system is Case-Insensitive
 413+ 210F              //  Only A register is touched.
 414+ 210F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 2110              Case_Upper:
 416+ 2110 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 2112 D8                           ret     c                   // no change if A < "a"
 418+ 2113 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 2115 D0                           ret     nc                  // no change if A > "z"
 420+ 2116 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 2118 C9                           ret
 422+ 2119
 423+ 2119              //  ______________________________________________________________________
 424+ 2119              //
 425+ 2119              //  caseon      --
 426+ 2119              // set system case-sensitivity on
 427+ 2119              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 2119                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 2119             >
 428+ 2119             >Dict_Ptr        defl    $
 428+ 2119             >
 428+ 2119             >//              ______________________________________________________________________
 428+ 2119             >//              Heap part
 428+ 2119             >
 428+ 2119             >
 428+ 2119             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0E9             >
 428+ E0E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0E9             >Latest_Definition defl  Heap_Ptr
 428+ E0E9             >
 428+ E0E9             >                // dummy db directives used to calculate length of namec
 428+ E0E9 43 41 53 45 >                db      "CASEON"
 428+ E0ED 4F 4E       >
 428+ E0EF             >len_NFA         defl    $ - temp_NFA
 428+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0E9             >
 428+ E0E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0EA 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EE 4F 4E       >
 428+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0EF CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0F0             >
 428+ E0F0 DF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 428+ E0F2             >
 428+ E0F2             >mirror_Ptr      defl    $
 428+ E0F2             >
 428+ E0F2 1B 21       >                dw      Dict_Ptr + 2        // xt
 428+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F4             >
 428+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F4             >
 428+ E0F4             >//              ______________________________________________________________________
 428+ E0F4             >//              Dictionary part
 428+ E0F4             >
 428+ E0F4             >                org     Dict_Ptr
 428+ 2119             >
 428+ 2119 F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 211B             >
 428+ 211B             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 211B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 211B ~           >
 428+ 211B ~           >
 428+ 211B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 211B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 211B             >
 428+ 211B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 211B 3E C9                        ld      a, $C9              // "ret"
 430+ 211D 32 0F 21                     ld      (Case_Sensitive), a
 431+ 2120                              next
 431+ 2120 DD E9       >                jp      (ix)
 432+ 2122
 433+ 2122              //  ______________________________________________________________________
 434+ 2122              //
 435+ 2122              //  caseoff     --
 436+ 2122              // set system case-sensitivity on
 437+ 2122              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 2122                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 2122             >
 438+ 2122             >Dict_Ptr        defl    $
 438+ 2122             >
 438+ 2122             >//              ______________________________________________________________________
 438+ 2122             >//              Heap part
 438+ 2122             >
 438+ 2122             >
 438+ 2122             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F4             >
 438+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F4             >Latest_Definition defl  Heap_Ptr
 438+ E0F4             >
 438+ E0F4             >                // dummy db directives used to calculate length of namec
 438+ E0F4 43 41 53 45 >                db      "CASEOFF"
 438+ E0F8 4F 46 46    >
 438+ E0FB             >len_NFA         defl    $ - temp_NFA
 438+ E0FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F4             >
 438+ E0F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0F9 4F 46 46    >
 438+ E0FC             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0FB C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0FC             >
 438+ E0FC E9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FE             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FE             >
 438+ E0FE             >mirror_Ptr      defl    $
 438+ E0FE             >
 438+ E0FE 24 21       >                dw      Dict_Ptr + 2        // xt
 438+ E100             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E100             >
 438+ E100             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E100             >
 438+ E100             >//              ______________________________________________________________________
 438+ E100             >//              Dictionary part
 438+ E100             >
 438+ E100             >                org     Dict_Ptr
 438+ 2122             >
 438+ 2122 FE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 2124             >
 438+ 2124             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 2124 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 2124 ~           >
 438+ 2124 ~           >
 438+ 2124             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 2124             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 2124             >
 438+ 2124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 2124 3E 00                        ld      a, $00              // "nop"
 440+ 2126 32 0F 21                     ld      (Case_Sensitive), a
 441+ 2129                              next
 441+ 2129 DD E9       >                jp      (ix)
 442+ 212B
 443+ 212B              //  ______________________________________________________________________
 444+ 212B              //
 445+ 212B              //  upper       c1 -- c1 | c2
 446+ 212B              // character on top of stack is forced to Uppercase.
 447+ 212B                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 212B             >
 447+ 212B             >Dict_Ptr        defl    $
 447+ 212B             >
 447+ 212B             >//              ______________________________________________________________________
 447+ 212B             >//              Heap part
 447+ 212B             >
 447+ 212B             >
 447+ 212B             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E100             >
 447+ E100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E100             >Latest_Definition defl  Heap_Ptr
 447+ E100             >
 447+ E100             >                // dummy db directives used to calculate length of namec
 447+ E100 55 50 50 45 >                db      "UPPER"
 447+ E104 52          >
 447+ E105             >len_NFA         defl    $ - temp_NFA
 447+ E105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E100             >
 447+ E100 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E101 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E105 52          >
 447+ E106             >                org     $-1                 // alter last byte of Name just above to set
 447+ E105 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E106             >
 447+ E106 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E108             >Prev_Ptr        defl    Heap_Ptr
 447+ E108             >
 447+ E108             >mirror_Ptr      defl    $
 447+ E108             >
 447+ E108 2D 21       >                dw      Dict_Ptr + 2        // xt
 447+ E10A             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E10A             >
 447+ E10A             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E10A             >
 447+ E10A             >//              ______________________________________________________________________
 447+ E10A             >//              Dictionary part
 447+ E10A             >
 447+ E10A             >                org     Dict_Ptr
 447+ 212B             >
 447+ 212B 08 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 212D             >
 447+ 212D             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 212D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 212D ~           >
 447+ 212D ~           >
 447+ 212D             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 212D             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 212D             >
 447+ 212D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 212D E1                           pop     hl
 449+ 212E 7D                           ld      a, l
 450+ 212F CD 10 21                     call    Case_Upper
 451+ 2132 6F                           ld      l, a
 452+ 2133
 453+ 2133                              psh1
 453+ 2133 E5          >                push    hl
 453+ 2134 DD E9       >                jp      (ix)
 454+ 2136
 455+ 2136              //  ______________________________________________________________________
 456+ 2136
 457+ 2136              MMU7_read:
 458+ 2136 3E 57                        ld      a, 87
 459+ 2138              NEXTREG_read:
 460+ 2138 01 3B 24                     ld      bc, $243B
 461+ 213B ED 79                        out     (c), a
 462+ 213D 04                           inc     b
 463+ 213E ED 78                        in      a, (c)
 464+ 2140 C9                           ret
 465+ 2141
 466+ 2141              //  ______________________________________________________________________
 467+ 2141
 468+ 2141              // given an HP-pointer in input, turn it into page + offset
 469+ 2141              TO_FAR_rout:
 470+ 2141 7C                           ld      a, h
 471+ 2142 08                           ex      af, af
 472+ 2143 7C                           ld      a, h
 473+ 2144 F6 E0                        or      $E0
 474+ 2146 67                           ld      h, a
 475+ 2147 08                           ex      af, af
 476+ 2148 07                           rlca
 477+ 2149 07                           rlca
 478+ 214A 07                           rlca
 479+ 214B E6 07                        and     $07
 480+ 214D C6 20                        add     $20
 481+ 214F C9                           ret
 482+ 2150
 483+ 2150
 484+ 2150              //  ______________________________________________________________________
 485+ 2150              //
 486+ 2150              // (find)       addr voc -- 0 | cfa b 1
 487+ 2150              // vocabulary search,
 488+ 2150              // - voc is starting word's NFA
 489+ 2150              // - addr is the string to be searched for
 490+ 2150              // On success, it returns the CFA of found word, the first NFA byte
 491+ 2150              // (which contains length and some flags) and a true flag.
 492+ 2150              // On fail, a false flag  (no more: leaves addr unchanged)
 493+ 2150                              New_Def C_FIND, "(FIND)", is_code, is_normal
 493+ 2150             >
 493+ 2150             >Dict_Ptr        defl    $
 493+ 2150             >
 493+ 2150             >//              ______________________________________________________________________
 493+ 2150             >//              Heap part
 493+ 2150             >
 493+ 2150             >
 493+ 2150             >                org     (Heap_Ptr & $1FFF) + $E000
 493+ E10A             >
 493+ E10A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ E10A             >Latest_Definition defl  Heap_Ptr
 493+ E10A             >
 493+ E10A             >                // dummy db directives used to calculate length of namec
 493+ E10A 28 46 49 4E >                db      "(FIND)"
 493+ E10E 44 29       >
 493+ E110             >len_NFA         defl    $ - temp_NFA
 493+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ E10A             >
 493+ E10A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ E10B 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 493+ E10F 44 29       >
 493+ E111             >                org     $-1                 // alter last byte of Name just above to set
 493+ E110 A9          >                db      {b $} | END_BIT     // msb as name end
 493+ E111             >
 493+ E111 00 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 493+ E113             >Prev_Ptr        defl    Heap_Ptr
 493+ E113             >
 493+ E113             >mirror_Ptr      defl    $
 493+ E113             >
 493+ E113 52 21       >                dw      Dict_Ptr + 2        // xt
 493+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 493+ E115             >
 493+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 493+ E115             >
 493+ E115             >//              ______________________________________________________________________
 493+ E115             >//              Dictionary part
 493+ E115             >
 493+ E115             >                org     Dict_Ptr
 493+ 2150             >
 493+ 2150 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 493+ 2152             >
 493+ 2152             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 2152 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 493+ 2152 ~           >
 493+ 2152 ~           >
 493+ 2152             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 2152             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 2152             >
 493+ 2152             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 2152 D9                           exx
 495+ 2153 CD 36 21                     call    MMU7_read
 496+ 2156 D9                           exx
 497+ 2157 6F                           ld      l, a
 498+ 2158 D9                           exx
 499+ 2159
 500+ 2159 D1                           pop     de                      // de has dictionary pointer
 501+ 215A              Find_VocabularyLoop:
 502+ 215A 7A                               ld      a, d
 503+ 215B D6 60                            sub     $60
 504+ 215D 30 08                            jr      nc, Find_far_endif
 505+ 215F EB                                   ex      de, hl
 506+ 2160 CD 41 21                             call    TO_FAR_rout
 507+ 2163 EB                                   ex      de, hl
 508+ 2164 ED 92 57                             nextreg 87, a
 509+ 2167              Find_far_endif:
 510+ 2167 E1                               pop     hl                  // string pointer to search for
 511+ 2168 E5                               push    hl                  // keep it on stack too for the end.
 512+ 2169 1A                               ld      a, (de)             // save NFA length byte
 513+ 216A 08                               ex      af,af'              // for later use (!)
 514+ 216B 1A                               ld      a, (de)             // reload NFA length byte
 515+ 216C AE                               xor     (hl)                // check if same length
 516+ 216D E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 517+ 216F                                  // word and text haven't the same length, skip to next vocabulary entry
 518+ 216F 20 33                            jr      nz, Find_DifferentLenght
 519+ 2171
 520+ 2171              Find_ThisWord:      // begin loop
 521+ 2171 23                                   inc     hl
 522+ 2172 13                                   inc     de
 523+ 2173 1A                                   ld      a, (de)
 524+ 2174                                      // case insensitive option - begin
 525+ 2174                                      // push    bc
 526+ 2174 E6 80                                and     $80                 // split A in msb and the rest
 527+ 2176 47                                   ld      b, a
 528+ 2177 1A                                   ld      a, (de)
 529+ 2178 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 530+ 217A CD 0F 21                             call    Case_Sensitive      // uppercase routine
 531+ 217D 4F                                   ld      c, a
 532+ 217E 7E                                   ld      a, (hl)
 533+ 217F CD 0F 21                             call    Case_Sensitive      // uppercase routine
 534+ 2182 A9                                   xor     c
 535+ 2183 A8                                   xor     b
 536+ 2184                                      // pop     bc
 537+ 2184                                      // case insensitive option - end
 538+ 2184 87                                   add     a                   // ignore msb during compare
 539+ 2185 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 540+ 2187
 541+ 2187                                  // loop back until last byte msb is found set
 542+ 2187                                  // that bit marks the ending char of this word
 543+ 2187 30 E8                            jr      nc, Find_ThisWord
 544+ 2189
 545+ 2189                                  // match found !
 546+ 2189 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 547+ 218C 19                               add     hl, de
 548+ 218D
 549+ 218D                              //  ld      a, h
 550+ 218D                              //  and     $E0
 551+ 218D                              //  xor     h
 552+ 218D                              //  jr      nz, Non_MMU7
 553+ 218D                                  //  call    MMU7_read
 554+ 218D                                  //  dec     a
 555+ 218D                                  //  jr      z, Non_MMU7
 556+ 218D 5E                                       ld      e, (hl)
 557+ 218E 23                                       inc     hl
 558+ 218F 56                                       ld      d, (hl)
 559+ 2190 EB                                       ex      de, hl
 560+ 2191              //Non_MMU7:
 561+ 2191 E3                               ex      (sp), hl            // CFA on stack and drop addr
 562+ 2192 08                               ex      af, af'             // retrieve NFA byte (!)
 563+ 2193 5F                               ld      e, a
 564+ 2194 16 00                            ld      d, 0
 565+ 2196 21 FF FF                         ld      hl, -1
 566+ 2199 D5                               push    de
 567+ 219A E5                               push    hl
 568+ 219B D9                               exx
 569+ 219C 7D                               ld      a, l
 570+ 219D ED 92 57                         nextreg 87, a
 571+ 21A0                                  next
 571+ 21A0 DD E9       >                jp      (ix)
 572+ 21A2
 573+ 21A2              Find_DidntMatch: // didn't match (*)
 574+ 21A2 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 575+ 21A4
 576+ 21A4              Find_DifferentLenght:
 577+ 21A4                                  // consume chars until the end of the word
 578+ 21A4                                  // that is last byte msb is found set
 579+ 21A4 13                                   inc     de
 580+ 21A5 1A                                   ld      a, (de)
 581+ 21A6 87                                   add     a, a
 582+ 21A7 30 FB                            jr      nc, Find_DifferentLenght
 583+ 21A9
 584+ 21A9              Find_WordEnd:   // word-end  found (**)
 585+ 21A9                                  // take LFA and use it
 586+ 21A9 13                               inc     de
 587+ 21AA EB                               ex      de, hl
 588+ 21AB 5E                               ld      e, (hl)
 589+ 21AC 23                               inc     hl
 590+ 21AD 56                               ld      d, (hl)
 591+ 21AE 7A                               ld      a, d
 592+ 21AF B3                               or      e
 593+ 21B0
 594+ 21B0                              // loop until end of vocabulary
 595+ 21B0 20 A8                        jr      nz, Find_VocabularyLoop
 596+ 21B2
 597+ 21B2 E1                           pop     hl              // without this, leaves addr unchanged
 598+ 21B3 21 00 00                     ld      hl, 0
 599+ 21B6 E5                           push    hl
 600+ 21B7 D9                           exx
 601+ 21B8 7D                           ld      a, l
 602+ 21B9 ED 92 57                     nextreg 87, a
 603+ 21BC                              next
 603+ 21BC DD E9       >                jp      (ix)
 604+ 21BE
 605+ 21BE              //  ______________________________________________________________________
 606+ 21BE              //
 607+ 21BE              // enclose      a c -- a  n1 n2 n3
 608+ 21BE              // starting from a, using delimiter c, determines the offsets:
 609+ 21BE              //   n1   the first character non-delimiter
 610+ 21BE              //   n2   the first delimiter after the text
 611+ 21BE              //   n3   the first character non enclosed.
 612+ 21BE              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 613+ 21BE              // an uncoditional delimiter.
 614+ 21BE              // Examples:
 615+ 21BE              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 616+ 21BE              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 617+ 21BE              // iii:	c  c  'nul'          -- 2  3  2
 618+ 21BE                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 618+ 21BE             >
 618+ 21BE             >Dict_Ptr        defl    $
 618+ 21BE             >
 618+ 21BE             >//              ______________________________________________________________________
 618+ 21BE             >//              Heap part
 618+ 21BE             >
 618+ 21BE             >
 618+ 21BE             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E115             >
 618+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E115             >Latest_Definition defl  Heap_Ptr
 618+ E115             >
 618+ E115             >                // dummy db directives used to calculate length of namec
 618+ E115 45 4E 43 4C >                db      "ENCLOSE"
 618+ E119 4F 53 45    >
 618+ E11C             >len_NFA         defl    $ - temp_NFA
 618+ E11C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E115             >
 618+ E115 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E116 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 618+ E11A 4F 53 45    >
 618+ E11D             >                org     $-1                 // alter last byte of Name just above to set
 618+ E11C C5          >                db      {b $} | END_BIT     // msb as name end
 618+ E11D             >
 618+ E11D 0A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E11F             >Prev_Ptr        defl    Heap_Ptr
 618+ E11F             >
 618+ E11F             >mirror_Ptr      defl    $
 618+ E11F             >
 618+ E11F C0 21       >                dw      Dict_Ptr + 2        // xt
 618+ E121             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E121             >
 618+ E121             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E121             >
 618+ E121             >//              ______________________________________________________________________
 618+ E121             >//              Dictionary part
 618+ E121             >
 618+ E121             >                org     Dict_Ptr
 618+ 21BE             >
 618+ 21BE 1F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 21C0             >
 618+ 21C0             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 21C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 618+ 21C0 ~           >
 618+ 21C0 ~           >
 618+ 21C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 21C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 21C0             >
 618+ 21C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 21C0 D9                           exx
 620+ 21C1 D1                           pop     de                  //  e has the character
 621+ 21C2 E1                           pop     hl                  // hl has the string address
 622+ 21C3 E5                           push    hl
 623+ 21C4 7B                           ld      a, e
 624+ 21C5 11 FF FF                     ld      de, -1              // let's start from -1
 625+ 21C8 2B                           dec     hl
 626+ 21C9              Enclose_NonDelimiter:
 627+ 21C9                              // find first non delimiter
 628+ 21C9 23                               inc     hl
 629+ 21CA 13                               inc     de
 630+ 21CB BE                               cp      (hl)
 631+ 21CC 28 FB                        jr      z, Enclose_NonDelimiter
 632+ 21CE D5                           push    de
 633+ 21CF
 634+ 21CF                              // push    bc                  // save Instruction Pointer
 635+ 21CF
 636+ 21CF 4F                           ld      c, a                // save char
 637+ 21D0 7E                           ld      a, (hl)
 638+ 21D1 A7                           and     a                   // stop if 0x00
 639+ 21D2 20 07                        jr      nz, Enclose_NextChar
 640+ 21D4                              /// case iii. no more character in string
 641+ 21D4                                  // pop     bc                  // restore Instruction Pointer
 642+ 21D4 13                               inc     de
 643+ 21D5 D5                               push    de
 644+ 21D6 1B                               dec     de
 645+ 21D7 D5                               push    de
 646+ 21D8 D9                               exx
 647+ 21D9                                  next
 647+ 21D9 DD E9       >                jp      (ix)
 648+ 21DB              Enclose_NextChar:
 649+ 21DB 79                               ld      a, c
 650+ 21DC 23                               inc     hl
 651+ 21DD 13                               inc     de
 652+ 21DE BE                               cp      (hl)
 653+ 21DF 20 06                            jr      nz, Enclose_NonSeparator
 654+ 21E1                                      // case i. first non enclosed
 655+ 21E1                                      // pop     bc                  // restore Instruction Pointer
 656+ 21E1 D5                                   push    de
 657+ 21E2 13                                   inc     de
 658+ 21E3 D5                                   push    de
 659+ 21E4 D9                                   exx
 660+ 21E5                                      next
 660+ 21E5 DD E9       >                jp      (ix)
 661+ 21E7              Enclose_NonSeparator:
 662+ 21E7 7E                               ld      a, (hl)
 663+ 21E8 A7                               and     a
 664+ 21E9 20 F0                        jr      nz, Enclose_NextChar
 665+ 21EB
 666+ 21EB                              // case ii. separator & terminator
 667+ 21EB                              // pop     bc                  // restore Instruction Pointer
 668+ 21EB D5                           push    de
 669+ 21EC D5                           push    de
 670+ 21ED D9                           exx
 671+ 21EE                              next
 671+ 21EE DD E9       >                jp      (ix)
 672+ 21F0
 673+ 21F0              //  ______________________________________________________________________
 674+ 21F0              //
 675+ 21F0              // (map)        a2 a1 n c1 -- c2
 676+ 21F0              // translate character c1 using mapping string a2 and a2
 677+ 21F0              // if c1 is not present within string a1 then
 678+ 21F0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 679+ 21F0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 679+ 21F0             >
 679+ 21F0             >Dict_Ptr        defl    $
 679+ 21F0             >
 679+ 21F0             >//              ______________________________________________________________________
 679+ 21F0             >//              Heap part
 679+ 21F0             >
 679+ 21F0             >
 679+ 21F0             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E121             >
 679+ E121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E121             >Latest_Definition defl  Heap_Ptr
 679+ E121             >
 679+ E121             >                // dummy db directives used to calculate length of namec
 679+ E121 28 4D 41 50 >                db      "(MAP)"
 679+ E125 29          >
 679+ E126             >len_NFA         defl    $ - temp_NFA
 679+ E126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E121             >
 679+ E121 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E122 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 679+ E126 29          >
 679+ E127             >                org     $-1                 // alter last byte of Name just above to set
 679+ E126 A9          >                db      {b $} | END_BIT     // msb as name end
 679+ E127             >
 679+ E127 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E129             >Prev_Ptr        defl    Heap_Ptr
 679+ E129             >
 679+ E129             >mirror_Ptr      defl    $
 679+ E129             >
 679+ E129 F2 21       >                dw      Dict_Ptr + 2        // xt
 679+ E12B             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E12B             >
 679+ E12B             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E12B             >
 679+ E12B             >//              ______________________________________________________________________
 679+ E12B             >//              Dictionary part
 679+ E12B             >
 679+ E12B             >                org     Dict_Ptr
 679+ 21F0             >
 679+ 21F0 29 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 21F2             >
 679+ 21F2             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 21F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 21F2 ~           >
 679+ 21F2 ~           >
 679+ 21F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 21F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 21F2             >
 679+ 21F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 21F2 D9                           exx
 681+ 21F3 E1                           pop     hl
 682+ 21F4 7D                           ld      a, l
 683+ 21F5 C1                           pop     bc
 684+ 21F6 E1                           pop     hl
 685+ 21F7 50                           ld      d, b
 686+ 21F8 59                           ld      e, c
 687+ 21F9 ED B1                        cpir
 688+ 21FB E1                           pop     hl
 689+ 21FC 20 05                        jr      nz, C_Map_Then
 689+ 21FE
 690+ 21FE 19                               add     hl, de
 691+ 21FF 2B                               dec     hl
 692+ 2200 ED 42                            sbc     hl, bc
 693+ 2202 7E                               ld      a, (hl)
 694+ 2203              C_Map_Then:
 695+ 2203 6F                           ld      l, a
 696+ 2204 26 00                        ld      h, 0
 697+ 2206 E5                           push    hl
 698+ 2207 D9                           exx
 699+ 2208                              next
 699+ 2208 DD E9       >                jp      (ix)
 700+ 220A
 701+ 220A              //  ______________________________________________________________________
 702+ 220A              //
 703+ 220A              // (compare)    a1 a2 n -- b
 704+ 220A              // this word performs a lexicographic compare of n bytes of text at address a1
 705+ 220A              // with n bytes of text at address a2. It returns numeric a value:
 706+ 220A              //  0 : if strings are equal
 707+ 220A              // +1 : if string at a1 greater than string at a2
 708+ 220A              // -1 : if string at a1 less than string at a2
 709+ 220A              // strings can be 256 bytes in length at most.
 710+ 220A                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 710+ 220A             >
 710+ 220A             >Dict_Ptr        defl    $
 710+ 220A             >
 710+ 220A             >//              ______________________________________________________________________
 710+ 220A             >//              Heap part
 710+ 220A             >
 710+ 220A             >
 710+ 220A             >                org     (Heap_Ptr & $1FFF) + $E000
 710+ E12B             >
 710+ E12B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ E12B             >Latest_Definition defl  Heap_Ptr
 710+ E12B             >
 710+ E12B             >                // dummy db directives used to calculate length of namec
 710+ E12B 28 43 4F 4D >                db      "(COMPARE)"
 710+ E12F 50 41 52 45 >
 710+ E133 29          >
 710+ E134             >len_NFA         defl    $ - temp_NFA
 710+ E134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ E12B             >
 710+ E12B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ E12C 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 710+ E130 50 41 52 45 >
 710+ E134 29          >
 710+ E135             >                org     $-1                 // alter last byte of Name just above to set
 710+ E134 A9          >                db      {b $} | END_BIT     // msb as name end
 710+ E135             >
 710+ E135 21 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 710+ E137             >Prev_Ptr        defl    Heap_Ptr
 710+ E137             >
 710+ E137             >mirror_Ptr      defl    $
 710+ E137             >
 710+ E137 0C 22       >                dw      Dict_Ptr + 2        // xt
 710+ E139             >Heap_Ptr        defl    $ - $E000           // save current HP
 710+ E139             >
 710+ E139             >Current_HP      defl  $ - $E000             // used to set HP once!
 710+ E139             >
 710+ E139             >//              ______________________________________________________________________
 710+ E139             >//              Dictionary part
 710+ E139             >
 710+ E139             >                org     Dict_Ptr
 710+ 220A             >
 710+ 220A 37 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 710+ 220C             >
 710+ 220C             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 220C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 710+ 220C ~           >
 710+ 220C ~           >
 710+ 220C             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 220C             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 220C             >
 710+ 220C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 220C D9                           exx
 712+ 220D E1                           pop     hl                  // Number of bytes
 713+ 220E 7D                           ld      a, l
 714+ 220F E1                           pop     hl                  // hl points string a2
 715+ 2210 D1                           pop     de                  // hl points string a1
 716+ 2211              //              push    bc                  // Instruction pointer on stack
 717+ 2211 47                           ld      b, a
 718+ 2212              C_Compare_Loop:
 719+ 2212 7E                               ld      a, (hl)
 720+ 2213 CD 0F 21                         call    Case_Sensitive
 721+ 2216 4F                               ld      c, a
 722+ 2217 1A                               ld      a, (de)
 723+ 2218 CD 0F 21                         call    Case_Sensitive
 724+ 221B B9                               cp      c
 725+ 221C 13                               inc     de
 726+ 221D 23                               inc     hl
 727+ 221E 28 0E                            jr      z, C_Compare_Equal
 728+ 2220 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 729+ 2222 21 01 00                                 ld      hl, 1               // a1 gt a2
 730+ 2225 18 03                                jr      C_Compare_Then      // Else
 731+ 2227              C_Compare_NotLessThan:
 732+ 2227 21 FF FF                                 ld      hl, -1              // a1 lt a2
 733+ 222A              C_Compare_Then:                                 // Endif
 734+ 222A              //                      pop     bc              // restore Instruction Pointer
 735+ 222A E5                                   push    hl
 736+ 222B D9                                   exx
 737+ 222C
 738+ 222C                                      next
 738+ 222C DD E9       >                jp      (ix)
 739+ 222E
 740+ 222E              C_Compare_Equal:
 741+ 222E 10 E2                        djnz    C_Compare_Loop
 742+ 2230 21 00 00                     ld      hl, 0               // a1 eq a2
 743+ 2233              //              pop     bc                  // restore Instruction Pointer
 744+ 2233 E5                           push    hl
 745+ 2234 D9                           exx
 746+ 2235
 747+ 2235                              next
 747+ 2235 DD E9       >                jp      (ix)
 748+ 2237
 749+ 2237              //  ______________________________________________________________________
 750+ 2237              //
 751+ 2237              // emitc        c --
 752+ 2237              // low level emit, calls ROM routine at #10 to send a character to
 753+ 2237              // the the current channel (see SELECT to change stream-channel)
 754+ 2237                              New_Def EMITC, "EMITC", is_code, is_normal
 754+ 2237             >
 754+ 2237             >Dict_Ptr        defl    $
 754+ 2237             >
 754+ 2237             >//              ______________________________________________________________________
 754+ 2237             >//              Heap part
 754+ 2237             >
 754+ 2237             >
 754+ 2237             >                org     (Heap_Ptr & $1FFF) + $E000
 754+ E139             >
 754+ E139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ E139             >Latest_Definition defl  Heap_Ptr
 754+ E139             >
 754+ E139             >                // dummy db directives used to calculate length of namec
 754+ E139 45 4D 49 54 >                db      "EMITC"
 754+ E13D 43          >
 754+ E13E             >len_NFA         defl    $ - temp_NFA
 754+ E13E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ E139             >
 754+ E139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ E13A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 754+ E13E 43          >
 754+ E13F             >                org     $-1                 // alter last byte of Name just above to set
 754+ E13E C3          >                db      {b $} | END_BIT     // msb as name end
 754+ E13F             >
 754+ E13F 2B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 754+ E141             >Prev_Ptr        defl    Heap_Ptr
 754+ E141             >
 754+ E141             >mirror_Ptr      defl    $
 754+ E141             >
 754+ E141 39 22       >                dw      Dict_Ptr + 2        // xt
 754+ E143             >Heap_Ptr        defl    $ - $E000           // save current HP
 754+ E143             >
 754+ E143             >Current_HP      defl  $ - $E000             // used to set HP once!
 754+ E143             >
 754+ E143             >//              ______________________________________________________________________
 754+ E143             >//              Dictionary part
 754+ E143             >
 754+ E143             >                org     Dict_Ptr
 754+ 2237             >
 754+ 2237 41 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 754+ 2239             >
 754+ 2239             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 2239 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 754+ 2239 ~           >
 754+ 2239 ~           >
 754+ 2239             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 2239             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 2239             >
 754+ 2239             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 2239 E1                           pop     hl
 756+ 223A 7D                           ld      a, l
 757+ 223B              Emitc_Ptr:
 758+ 223B C5                           push    bc
 759+ 223C D5                           push    de
 760+ 223D DD E5                        push    ix
 761+ 223F F3                           di
 762+ 2240 D7                           rst     $10
 763+ 2241 FB                           ei
 764+ 2242 DD E1                        pop     ix
 765+ 2244 D1                           pop     de
 766+ 2245 C1                           pop     bc
 767+ 2246 3E FF                        ld      a, 255            // max possible
 768+ 2248 32 8C 5C                     ld      (SCR_CT), a
 769+ 224B                              next
 769+ 224B DD E9       >                jp      (ix)
 770+ 224D
 771+ 224D              //  ______________________________________________________________________
 772+ 224D              //
 773+ 224D              // cr           --
 774+ 224D              // send a CR via EMITC
 775+ 224D                              Colon_Def CR, "CR", is_normal
 775+ 224D             >                New_Def  CR, "CR", Enter_Ptr, is_normal ; ok
 775+ 224D             >
 775+ 224D             >Dict_Ptr        defl    $
 775+ 224D             >
 775+ 224D             >//              ______________________________________________________________________
 775+ 224D             >//              Heap part
 775+ 224D             >
 775+ 224D             >
 775+ 224D             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E143             >
 775+ E143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E143             >Latest_Definition defl  Heap_Ptr
 775+ E143             >
 775+ E143             >                // dummy db directives used to calculate length of namec
 775+ E143 43 52       >                db      "CR"
 775+ E145             >len_NFA         defl    $ - temp_NFA
 775+ E145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E143             >
 775+ E143 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E144 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 775+ E146             >                org     $-1                 // alter last byte of Name just above to set
 775+ E145 D2          >                db      {b $} | END_BIT     // msb as name end
 775+ E146             >
 775+ E146 39 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E148             >Prev_Ptr        defl    Heap_Ptr
 775+ E148             >
 775+ E148             >mirror_Ptr      defl    $
 775+ E148             >
 775+ E148 4F 22       >                dw      Dict_Ptr + 2        // xt
 775+ E14A             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E14A             >
 775+ E14A             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E14A             >
 775+ E14A             >//              ______________________________________________________________________
 775+ E14A             >//              Dictionary part
 775+ E14A             >
 775+ E14A             >                org     Dict_Ptr
 775+ 224D             >
 775+ 224D 48 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 224F             >
 775+ 224F             >CR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 224F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 2252             >
 775+ 2252             >
 775+ 2252             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 2252             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 2252             >
 775+ 2252             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 2252
 777+ 2252 3E 0D                        ld      a, CR_CHAR
 778+ 2254 18 E5                        jr      Emitc_Ptr
 779+ 2256
 780+ 2256              Emitc_Vec:
 781+ 2256 8F 22                        dw      C_Emit_Printable  // comma
 782+ 2258 96 22                        dw      C_Emit_Bel        // bel
 783+ 225A 8F 22                        dw      C_Emit_Printable  // bs
 784+ 225C B0 22                        dw      C_Emit_Tab        // tab
 785+ 225E 8F 22                        dw      C_Emit_Printable  // cr
 786+ 2260 B4 22                        dw      C_Emit_NL         // lf (unix newline)
 787+ 2262 8F 22                        dw      C_Emit_Printable  // blank
 788+ 2264 8F 22                        dw      C_Emit_Printable  // blank
 789+ 2266
 790+ 2266              Emit_Selector_Start:
 791+ 2266 06                           db      $06                 // comma
 792+ 2267 07                           db      $07                 // bel
 793+ 2268 08                           db      $08                 // bs
 794+ 2269 09                           db      $09                 // tab
 795+ 226A 0D                           db      $0D                 // cr
 796+ 226B 0A                           db      $0A                 // lf (unix newline)
 797+ 226C 20                           db      $20
 798+ 226D              Emit_Selector_End:
 799+ 226D 20                           db      $20
 800+ 226E
 801+ 226E              //  ______________________________________________________________________
 802+ 226E              //
 803+ 226E              // (?emit)      c1 -- c2 | c1
 804+ 226E              // decode a character to be sent via EMIT
 805+ 226E              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 806+ 226E              // the routine should resolve anything and convert the character anyway.
 807+ 226E                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 807+ 226E             >
 807+ 226E             >Dict_Ptr        defl    $
 807+ 226E             >
 807+ 226E             >//              ______________________________________________________________________
 807+ 226E             >//              Heap part
 807+ 226E             >
 807+ 226E             >
 807+ 226E             >                org     (Heap_Ptr & $1FFF) + $E000
 807+ E14A             >
 807+ E14A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 807+ E14A             >Latest_Definition defl  Heap_Ptr
 807+ E14A             >
 807+ E14A             >                // dummy db directives used to calculate length of namec
 807+ E14A 28 3F 45 4D >                db      "(?EMIT)"
 807+ E14E 49 54 29    >
 807+ E151             >len_NFA         defl    $ - temp_NFA
 807+ E151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 807+ E14A             >
 807+ E14A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 807+ E14B 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 807+ E14F 49 54 29    >
 807+ E152             >                org     $-1                 // alter last byte of Name just above to set
 807+ E151 A9          >                db      {b $} | END_BIT     // msb as name end
 807+ E152             >
 807+ E152 43 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 807+ E154             >Prev_Ptr        defl    Heap_Ptr
 807+ E154             >
 807+ E154             >mirror_Ptr      defl    $
 807+ E154             >
 807+ E154 70 22       >                dw      Dict_Ptr + 2        // xt
 807+ E156             >Heap_Ptr        defl    $ - $E000           // save current HP
 807+ E156             >
 807+ E156             >Current_HP      defl  $ - $E000             // used to set HP once!
 807+ E156             >
 807+ E156             >//              ______________________________________________________________________
 807+ E156             >//              Dictionary part
 807+ E156             >
 807+ E156             >                org     Dict_Ptr
 807+ 226E             >
 807+ 226E 54 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 807+ 2270             >
 807+ 2270             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 807+ 2270 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 807+ 2270 ~           >
 807+ 2270 ~           >
 807+ 2270             >                endif           ; ok        // for other definitions it "points" the correct handler
 807+ 2270             >                // Use of "; ok" to suppress "warning[fwdref]"
 807+ 2270             >
 807+ 2270             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 808+ 2270 D9                           exx
 809+ 2271 D1                           pop     de
 810+ 2272 7B                           ld      a, e                //  de has c1
 811+ 2273 E6 7F                        and     $7F                 // 7-bit ascii only
 812+ 2275                              // push    bc                  // save Instruction Pointer
 813+ 2275 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 814+ 2278 21 6D 22                     ld      hl, Emit_Selector_End
 815+ 227B ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 816+ 227D 20 0A                        jr      nz, C_Emit_Not_Found
 817+ 227F                                  // Found then decode it
 818+ 227F 21 56 22                         ld      hl, Emitc_Vec
 819+ 2282 09                               add     hl, bc
 820+ 2283 09                               add     hl, bc
 821+ 2284 5E                               ld      e, (hl)
 822+ 2285 23                               inc     hl
 823+ 2286 56                               ld      d, (hl)
 824+ 2287 EB                               ex      de, hl
 825+ 2288                                  // pop     bc                  // restore Instruction Pointer
 826+ 2288 E9                               jp      (hl)                // one of the following labels
 827+ 2289              C_Emit_Not_Found:
 828+ 2289                              // pop     bc                  // restore Instruction Pointer
 829+ 2289 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 830+ 228B 30 02                        jr      nc, C_Emit_Printable
 831+ 228D 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 832+ 228F              C_Emit_Printable:
 833+ 228F 6F                           ld      l, a
 834+ 2290 26 00                        ld      h, 0
 835+ 2292 E5                           push    hl
 836+ 2293 D9                           exx
 837+ 2294                              next
 837+ 2294 DD E9       >                jp      (ix)
 838+ 2296
 839+ 2296              C_Emit_Bel:
 840+ 2296 D9                            exx
 841+ 2297 C5                           push    bc                  // save Instruction Pointer
 842+ 2298 D5                           push    de
 843+ 2299 11 00 01                     ld      de, $0100
 844+ 229C 21 00 02                     ld      hl, $0200
 845+ 229F DD E5                        push    ix                  // save Next Pointer
 846+ 22A1                              // call    $03B6               // bleep Standard-ROM routine
 847+ 22A1 F3                           di
 848+ 22A2 DF                           rst     $18
 849+ 22A3 B6 03                        defw    $03B6
 850+ 22A5 FB                           ei
 851+ 22A6 DD E1                        pop     ix                  // restore Next Pointer
 852+ 22A8 D1                           pop     de
 853+ 22A9 C1                           pop     bc                  // restore Instruction Pointer
 854+ 22AA 21 00 00                     ld      hl, NUL_CHAR
 855+ 22AD E5                           push    hl
 856+ 22AE                              next
 856+ 22AE DD E9       >                jp      (ix)
 857+ 22B0
 858+ 22B0 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 859+ 22B2 18 DB                        jr      C_Emit_Printable
 860+ 22B4                          //  push    hl
 861+ 22B4                          //  exx
 862+ 22B4                          //  next
 863+ 22B4
 864+ 22B4 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 865+ 22B6 18 D7                        jr      C_Emit_Printable
 866+ 22B8                          //  push    hl
 867+ 22B8                          //  exx
 868+ 22B8                          //  next
 869+ 22B8
 870+ 22B8              //  ______________________________________________________________________
 871+ 22B8
 872+ 22B8              Key_Table:
 873+ 22B8 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 874+ 22B9 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 875+ 22BA CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 876+ 22BB CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 877+ 22BC CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 878+ 22BD C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 879+ 22BE C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 880+ 22BF AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 881+ 22C0 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 882+ 22C1 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 883+ 22C2 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 884+ 22C3              Key_MapTo:
 885+ 22C3 18                           db      $18                 // 10: ^X
 886+ 22C4 03                           db      $03                 //  9: ^C
 887+ 22C5 1A                           db      $1A                 //  8: ^Z
 888+ 22C6 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 889+ 22C7 5D                           db      $5D                 //  6: SYMBOL+U : ]
 890+ 22C8 5B                           db      $5B                 //  5: SYMBOL+Y : [
 891+ 22C9 7D                           db      $7D                 //  4: SYMBOL+G : }
 892+ 22CA 7B                           db      $7B                 //  3: SYMBOL+F : {
 893+ 22CB 5C                           db      $5C                 //  2: SYMBOl+D : //
 894+ 22CC 7C                           db      $7C                 //  1: SYMBOL+S : |
 895+ 22CD 7E                           db      $7E                 //  0: SYMBOL+A : ~
 896+ 22CE
 897+ 22CE              //  ______________________________________________________________________
 898+ 22CE              //
 899+ 22CE              // curs         -- c
 900+ 22CE              // wait for a keypress
 901+ 22CE              // This definition need Standard ROM Interrupt to be served
 902+ 22CE
 903+ 22CE                              New_Def CUR, "CURS", is_code, is_normal
 903+ 22CE             >
 903+ 22CE             >Dict_Ptr        defl    $
 903+ 22CE             >
 903+ 22CE             >//              ______________________________________________________________________
 903+ 22CE             >//              Heap part
 903+ 22CE             >
 903+ 22CE             >
 903+ 22CE             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ E156             >
 903+ E156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ E156             >Latest_Definition defl  Heap_Ptr
 903+ E156             >
 903+ E156             >                // dummy db directives used to calculate length of namec
 903+ E156 43 55 52 53 >                db      "CURS"
 903+ E15A             >len_NFA         defl    $ - temp_NFA
 903+ E15A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ E156             >
 903+ E156 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ E157 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 903+ E15B             >                org     $-1                 // alter last byte of Name just above to set
 903+ E15A D3          >                db      {b $} | END_BIT     // msb as name end
 903+ E15B             >
 903+ E15B 4A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ E15D             >Prev_Ptr        defl    Heap_Ptr
 903+ E15D             >
 903+ E15D             >mirror_Ptr      defl    $
 903+ E15D             >
 903+ E15D D0 22       >                dw      Dict_Ptr + 2        // xt
 903+ E15F             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ E15F             >
 903+ E15F             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ E15F             >
 903+ E15F             >//              ______________________________________________________________________
 903+ E15F             >//              Dictionary part
 903+ E15F             >
 903+ E15F             >                org     Dict_Ptr
 903+ 22CE             >
 903+ 22CE 5D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 22D0             >
 903+ 22D0             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 22D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 903+ 22D0 ~           >
 903+ 22D0 ~           >
 903+ 22D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 22D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 22D0             >
 903+ 22D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 22D0
 905+ 22D0 C5                           push    bc                  // save Instruction Pointer
 906+ 22D1 D5                           push    de                  // save Return Stack Pointer
 907+ 22D2 DD E5                        push    ix
 908+ 22D4 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 909+ 22D8                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 910+ 22D8 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 911+ 22DB FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 912+ 22DF
 913+ 22DF              Cur_Wait:
 914+ 22DF 76                               halt
 915+ 22E0 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 916+ 22E2                              //  call    $1601               // SELECT Standard-ROM Routine
 917+ 22E2 DF                               rst     $18
 918+ 22E3 01 16                            dw      $1601
 919+ 22E5
 920+ 22E5                                  // software-flash: flips face every 320 ms
 921+ 22E5 3E 20                            ld      a, $20              // Timing based
 922+ 22E7 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 923+ 22EA
 924+ 22EA 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 925+ 22ED 20 0C                            jr      nz, Cur_Cursor
 926+ 22EF 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 927+ 22F2 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 928+ 22F6 28 03                                jr      z, Cur_Cursor
 929+ 22F8 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 930+ 22FB              Cur_Cursor:
 931+ 22FB D7                               rst     $10
 932+ 22FC 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 933+ 22FE D7                               rst     $10
 934+ 22FF FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 935+ 2303 28 DA                        jr      z, Cur_Wait
 936+ 2305
 937+ 2305 76                           halt    // this is to sync flashing cursor.
 938+ 2306
 939+ 2306 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 940+ 2308 D7                           rst     $10
 941+ 2309 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 942+ 230B D7                           rst     $10
 943+ 230C
 944+ 230C ED 7B 2C 20                  ld      sp, (SP_Saved)
 945+ 2310
 946+ 2310 DD E1                        pop     ix
 947+ 2312 D1                           pop     de                  // Restore Return Stack Pointer
 948+ 2313 C1                           pop     bc                  // Restore Instruction Pointer
 949+ 2314                              next
 949+ 2314 DD E9       >                jp      (ix)
 950+ 2316
 951+ 2316
 952+ 2316              //  ______________________________________________________________________
 953+ 2316              //
 954+ 2316              // key          -- c
 955+ 2316              // This definition need Standard ROM Interrupt to be served
 956+ 2316
 957+ 2316                              New_Def KEY, "KEY", is_code, is_normal
 957+ 2316             >
 957+ 2316             >Dict_Ptr        defl    $
 957+ 2316             >
 957+ 2316             >//              ______________________________________________________________________
 957+ 2316             >//              Heap part
 957+ 2316             >
 957+ 2316             >
 957+ 2316             >                org     (Heap_Ptr & $1FFF) + $E000
 957+ E15F             >
 957+ E15F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ E15F             >Latest_Definition defl  Heap_Ptr
 957+ E15F             >
 957+ E15F             >                // dummy db directives used to calculate length of namec
 957+ E15F 4B 45 59    >                db      "KEY"
 957+ E162             >len_NFA         defl    $ - temp_NFA
 957+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ E15F             >
 957+ E15F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ E160 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 957+ E163             >                org     $-1                 // alter last byte of Name just above to set
 957+ E162 D9          >                db      {b $} | END_BIT     // msb as name end
 957+ E163             >
 957+ E163 56 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 957+ E165             >Prev_Ptr        defl    Heap_Ptr
 957+ E165             >
 957+ E165             >mirror_Ptr      defl    $
 957+ E165             >
 957+ E165 18 23       >                dw      Dict_Ptr + 2        // xt
 957+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 957+ E167             >
 957+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 957+ E167             >
 957+ E167             >//              ______________________________________________________________________
 957+ E167             >//              Dictionary part
 957+ E167             >
 957+ E167             >                org     Dict_Ptr
 957+ 2316             >
 957+ 2316 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 957+ 2318             >
 957+ 2318             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 2318 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 957+ 2318 ~           >
 957+ 2318 ~           >
 957+ 2318             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 2318             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 2318             >
 957+ 2318             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 2318
 959+ 2318 C5                           push    bc                  // Save Instruction Pointer
 960+ 2319
 961+ 2319              Key_Wait:
 962+ 2319 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 963+ 231D 28 FA                        jr      z, Key_Wait
 964+ 231F
 965+ 231F 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 966+ 2322
 967+ 2322                              // decode character from above table
 968+ 2322 21 B8 22                     ld      hl, Key_Table
 969+ 2325 01 0B 00                     ld      bc, $000B
 970+ 2328 ED B1                        cpir
 971+ 232A 20 05                        jr      nz, Key_DontMap
 972+ 232C 21 C3 22                         ld      hl, Key_MapTo
 973+ 232F 09                               add     hl, bc
 974+ 2330 7E                               ld      a, (hl)
 975+ 2331 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 976+ 2333 20 09                        jr      nz, Key_NoCapsLock
 977+ 2335 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 978+ 2338 7E                               ld      a, (hl)
 979+ 2339 EE 08                            xor     $08
 980+ 233B 77                               ld      (hl), a
 981+ 233C 3E 00                            ld      a, NUL_CHAR
 982+ 233E 6F           Key_NoCapsLock: ld      l, a
 983+ 233F 26 00                        ld      h, 0                // Prepare TOS
 984+ 2341
 985+ 2341 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 986+ 2345
 987+ 2345 C1                           pop     bc                  // Restore Instruction Pointer
 988+ 2346
 989+ 2346                              psh1
 989+ 2346 E5          >                push    hl
 989+ 2347 DD E9       >                jp      (ix)
 990+ 2349
 991+ 2349
 992+ 2349              //  ______________________________________________________________________
 993+ 2349              //
 994+ 2349              // click        --
 995+ 2349              // This definition need Standard ROM Interrupt to be served
 996+ 2349              //
 997+ 2349              //              New_Def CLICK, "CLICK", is_code, is_normal
 998+ 2349              //
 999+ 2349              //                push    bc
1000+ 2349              //              ld      a, ($5C48)          // BORDCR system variable
1001+ 2349              //              rra
1002+ 2349              //              rra
1003+ 2349              //              rra
1004+ 2349              //              or      $18                 // quick'n'dirty click
1005+ 2349              //              out     ($fe), a
1006+ 2349              //              ld      b, 0
1007+ 2349              //              djnz    $                   // wait loop
1008+ 2349              //              xor     $18
1009+ 2349              //              out     ($fe), a
1010+ 2349              //                pop     bc
1011+ 2349
1012+ 2349              //              next
1013+ 2349
1014+ 2349              //  ______________________________________________________________________
1015+ 2349              //
1016+ 2349              // key?         -- f
1017+ 2349              // key available
1018+ 2349              //
1019+ 2349              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1020+ 2349              //
1021+ 2349              //              ld      hl, 0000
1022+ 2349              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1023+ 2349              //              jr      z, Key_Q
1024+ 2349              //                  dec     hl
1025+ 2349              // Key_Q:
1026+ 2349              //                psh1
1027+ 2349              //              next
1028+ 2349
1029+ 2349              //  ______________________________________________________________________
1030+ 2349              //
1031+ 2349              // ?terminal    -- FALSE | TRUE
1032+ 2349              // test for BREAK keypress
1033+ 2349                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1033+ 2349             >
1033+ 2349             >Dict_Ptr        defl    $
1033+ 2349             >
1033+ 2349             >//              ______________________________________________________________________
1033+ 2349             >//              Heap part
1033+ 2349             >
1033+ 2349             >
1033+ 2349             >                org     (Heap_Ptr & $1FFF) + $E000
1033+ E167             >
1033+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ E167             >Latest_Definition defl  Heap_Ptr
1033+ E167             >
1033+ E167             >                // dummy db directives used to calculate length of namec
1033+ E167 3F 54 45 52 >                db      "?TERMINAL"
1033+ E16B 4D 49 4E 41 >
1033+ E16F 4C          >
1033+ E170             >len_NFA         defl    $ - temp_NFA
1033+ E170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ E167             >
1033+ E167 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ E168 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1033+ E16C 4D 49 4E 41 >
1033+ E170 4C          >
1033+ E171             >                org     $-1                 // alter last byte of Name just above to set
1033+ E170 CC          >                db      {b $} | END_BIT     // msb as name end
1033+ E171             >
1033+ E171 5F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1033+ E173             >Prev_Ptr        defl    Heap_Ptr
1033+ E173             >
1033+ E173             >mirror_Ptr      defl    $
1033+ E173             >
1033+ E173 4B 23       >                dw      Dict_Ptr + 2        // xt
1033+ E175             >Heap_Ptr        defl    $ - $E000           // save current HP
1033+ E175             >
1033+ E175             >Current_HP      defl  $ - $E000             // used to set HP once!
1033+ E175             >
1033+ E175             >//              ______________________________________________________________________
1033+ E175             >//              Dictionary part
1033+ E175             >
1033+ E175             >                org     Dict_Ptr
1033+ 2349             >
1033+ 2349 73 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1033+ 234B             >
1033+ 234B             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 234B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1033+ 234B ~           >
1033+ 234B ~           >
1033+ 234B             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 234B             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 234B             >
1033+ 234B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 234B D9                           exx
1035+ 234C 01 FE 7F                     ld      bc, $7ffe
1036+ 234F ED 50                        in      d, (c)
1037+ 2351 41                           ld      b, c
1038+ 2352 ED 78                        in      a, (c)
1039+ 2354 B2                           or       d
1040+ 2355 1F                           rra
1041+ 2356 3F                           ccf
1042+ 2357 ED 62                        sbc     hl, hl
1043+ 2359 E5                           push    hl
1044+ 235A D9                           exx
1045+ 235B                              next
1045+ 235B DD E9       >                jp      (ix)
1046+ 235D
1047+ 235D
1048+ 235D              //  ______________________________________________________________________
1049+ 235D              //
1050+ 235D              // inkey        -- c | 0
1051+ 235D              // call ROM inkey$ routine, returns c or "zero".
1052+ 235D              //
1053+ 235D              //              New_Def INKEY, "INKEY", is_code, is_normal
1054+ 235D              //              push    bc
1055+ 235D              //              push    de
1056+ 235D              //              ld      (SP_Saved), sp
1057+ 235D              //              ld      sp, Cold_origin - 5
1058+ 235D              //              ld      sp, TSTACK           // Carefully balanced from startup
1059+ 235D              //              push    ix
1060+ 235D              //              di
1061+ 235D              //              call    $15E6                   // instead of 15E9
1062+ 235D              //              ei
1063+ 235D              //              pop     ix
1064+ 235D              //              ld      sp, (SP_Saved)
1065+ 235D              //              ld      l, a
1066+ 235D              //              ld      h, 0
1067+ 235D              //              pop     de
1068+ 235D              //              pop     bc
1069+ 235D              //              psh1
1070+ 235D
1071+ 235D              //  ______________________________________________________________________
1072+ 235D              //
1073+ 235D              // select      n --
1074+ 235D              // selects the given channel number
1075+ 235D
1076+ 235D                              New_Def SELECT, "SELECT", is_code, is_normal
1076+ 235D             >
1076+ 235D             >Dict_Ptr        defl    $
1076+ 235D             >
1076+ 235D             >//              ______________________________________________________________________
1076+ 235D             >//              Heap part
1076+ 235D             >
1076+ 235D             >
1076+ 235D             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E175             >
1076+ E175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E175             >Latest_Definition defl  Heap_Ptr
1076+ E175             >
1076+ E175             >                // dummy db directives used to calculate length of namec
1076+ E175 53 45 4C 45 >                db      "SELECT"
1076+ E179 43 54       >
1076+ E17B             >len_NFA         defl    $ - temp_NFA
1076+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E175             >
1076+ E175 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E176 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1076+ E17A 43 54       >
1076+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1076+ E17B D4          >                db      {b $} | END_BIT     // msb as name end
1076+ E17C             >
1076+ E17C 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E17E             >Prev_Ptr        defl    Heap_Ptr
1076+ E17E             >
1076+ E17E             >mirror_Ptr      defl    $
1076+ E17E             >
1076+ E17E 5F 23       >                dw      Dict_Ptr + 2        // xt
1076+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E180             >
1076+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E180             >
1076+ E180             >//              ______________________________________________________________________
1076+ E180             >//              Dictionary part
1076+ E180             >
1076+ E180             >                org     Dict_Ptr
1076+ 235D             >
1076+ 235D 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 235F             >
1076+ 235F             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 235F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1076+ 235F ~           >
1076+ 235F ~           >
1076+ 235F             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 235F             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 235F             >
1076+ 235F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 235F E1                           pop     hl
1078+ 2360 C5                           push    bc
1079+ 2361 D5                           push    de
1080+ 2362 7D                           ld      a, l
1081+ 2363 ED 73 2C 20                  ld      (SP_Saved), sp
1082+ 2367                          //  ld      sp, Cold_origin - 5
1083+ 2367 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1084+ 236A DD E5                        push    ix
1085+ 236C                          //  call    $1601
1086+ 236C F3                           di
1087+ 236D DF                           rst     $18
1088+ 236E 01 16                        dw      $1601
1089+ 2370 FB                           ei
1090+ 2371 DD E1                        pop     ix
1091+ 2373 ED 7B 2C 20                  ld      sp, (SP_Saved)
1092+ 2377 D1                           pop     de
1093+ 2378 C1                           pop     bc
1094+ 2379                              next
1094+ 2379 DD E9       >                jp      (ix)
1095+ 237B
1096+ 237B              //  ______________________________________________________________________
1097+ 237B              //
1098+ 237B              // ZX Spectrum Next - Low Level disk primitives.
1099+ 237B              // this include is "here" for backward compatibility
1100+ 237B
1101+ 237B                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++237B              //  ______________________________________________________________________
   2++237B              //
   3++237B              //  next-opt.asm
   4++237B              //
   5++237B              //  ZX Spectrum Next - peculiar definitions
   6++237B              //  ______________________________________________________________________
   7++237B
   8++237B              //  ______________________________________________________________________
   9++237B              //
  10++237B              // f_seek       d u -- f
  11++237B              // Seek to position d in file-handle u.
  12++237B              // Return a false-flag 0 on success, True flag on error
  13++237B                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++237B             >
  13++237B             >Dict_Ptr        defl    $
  13++237B             >
  13++237B             >//              ______________________________________________________________________
  13++237B             >//              Heap part
  13++237B             >
  13++237B             >
  13++237B             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E180             >
  13++E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E180             >Latest_Definition defl  Heap_Ptr
  13++E180             >
  13++E180             >                // dummy db directives used to calculate length of namec
  13++E180 46 5F 53 45 >                db      "F_SEEK"
  13++E184 45 4B       >
  13++E186             >len_NFA         defl    $ - temp_NFA
  13++E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E180             >
  13++E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E181 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E185 45 4B       >
  13++E187             >                org     $-1                 // alter last byte of Name just above to set
  13++E186 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E187             >
  13++E187 75 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E189             >Prev_Ptr        defl    Heap_Ptr
  13++E189             >
  13++E189             >mirror_Ptr      defl    $
  13++E189             >
  13++E189 7D 23       >                dw      Dict_Ptr + 2        // xt
  13++E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18B             >
  13++E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18B             >
  13++E18B             >//              ______________________________________________________________________
  13++E18B             >//              Dictionary part
  13++E18B             >
  13++E18B             >                org     Dict_Ptr
  13++237B             >
  13++237B 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++237D             >
  13++237D             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++237D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++237D ~           >
  13++237D ~           >
  13++237D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++237D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++237D             >
  13++237D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++237D D9                            exx
  15++237E E1                            pop     hl                  // file-handle
  16++237F 7D                            ld      a, l
  17++2380 C1                            pop     bc                  // bc has high-word of d
  18++2381 D1                            pop     de
  19++2382 D9                           exx
  20++2383 DD E5                        push    ix
  21++2385 D5                           push    de
  22++2386 C5                           push    bc                  // save Instruction Pointer
  23++2387 D9                            exx
  24++2388 21 00 00                      ld      hl, 0 // ix, 0
  25++238B CF                            rst     $08
  26++238C 9F                            db      $9F
  27++238D              F_Seek_Exit:
  28++238D C1                           pop     bc                  // restore Instruction Pointer
  29++238E D1                           pop     de
  30++238F DD E1                        pop     ix
  31++2391 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++2393
  33++2393                              psh1
  33++2393 E5          >                push    hl
  33++2394 DD E9       >                jp      (ix)
  34++2396
  35++2396              //  ______________________________________________________________________
  36++2396              //
  37++2396              // f_close      u -- f
  38++2396              // Close file-handle u.
  39++2396              // Return 0 on success, True flag on error
  40++2396
  41++2396                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++2396             >
  41++2396             >Dict_Ptr        defl    $
  41++2396             >
  41++2396             >//              ______________________________________________________________________
  41++2396             >//              Heap part
  41++2396             >
  41++2396             >
  41++2396             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E18B             >
  41++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E18B             >Latest_Definition defl  Heap_Ptr
  41++E18B             >
  41++E18B             >                // dummy db directives used to calculate length of namec
  41++E18B 46 5F 43 4C >                db      "F_CLOSE"
  41++E18F 4F 53 45    >
  41++E192             >len_NFA         defl    $ - temp_NFA
  41++E192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E18B             >
  41++E18B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E18C 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E190 4F 53 45    >
  41++E193             >                org     $-1                 // alter last byte of Name just above to set
  41++E192 C5          >                db      {b $} | END_BIT     // msb as name end
  41++E193             >
  41++E193 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E195             >Prev_Ptr        defl    Heap_Ptr
  41++E195             >
  41++E195             >mirror_Ptr      defl    $
  41++E195             >
  41++E195 98 23       >                dw      Dict_Ptr + 2        // xt
  41++E197             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E197             >
  41++E197             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E197             >
  41++E197             >//              ______________________________________________________________________
  41++E197             >//              Dictionary part
  41++E197             >
  41++E197             >                org     Dict_Ptr
  41++2396             >
  41++2396 95 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++2398             >
  41++2398             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++2398 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++2398 ~           >
  41++2398 ~           >
  41++2398             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++2398             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++2398             >
  41++2398             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++2398
  43++2398 E1                           pop     hl
  44++2399 7D                           ld      a, l                // file-handle
  45++239A DD E5                        push    ix
  46++239C D5                           push    de
  47++239D C5                           push    bc                  // Save Instruction pointer
  48++239E CF                           rst     $08
  49++239F 9B                           db      $9B
  50++23A0 18 EB                        jr      F_Seek_Exit
  51++23A2              //              pop     de
  52++23A2              //              pop     bc
  53++23A2              //              pop     ix
  54++23A2              //              sbc     hl, hl
  55++23A2              //              psh1
  56++23A2
  57++23A2              //  ______________________________________________________________________
  58++23A2              //
  59++23A2              // f_sync      u -- f
  60++23A2              // Close file-handle u.
  61++23A2              // Return 0 on success, True flag on error
  62++23A2
  63++23A2                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++23A2             >
  63++23A2             >Dict_Ptr        defl    $
  63++23A2             >
  63++23A2             >//              ______________________________________________________________________
  63++23A2             >//              Heap part
  63++23A2             >
  63++23A2             >
  63++23A2             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E197             >
  63++E197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E197             >Latest_Definition defl  Heap_Ptr
  63++E197             >
  63++E197             >                // dummy db directives used to calculate length of namec
  63++E197 46 5F 53 59 >                db      "F_SYNC"
  63++E19B 4E 43       >
  63++E19D             >len_NFA         defl    $ - temp_NFA
  63++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E197             >
  63++E197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E198 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E19C 4E 43       >
  63++E19E             >                org     $-1                 // alter last byte of Name just above to set
  63++E19D C3          >                db      {b $} | END_BIT     // msb as name end
  63++E19E             >
  63++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1A0             >Prev_Ptr        defl    Heap_Ptr
  63++E1A0             >
  63++E1A0             >mirror_Ptr      defl    $
  63++E1A0             >
  63++E1A0 A4 23       >                dw      Dict_Ptr + 2        // xt
  63++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1A2             >
  63++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1A2             >
  63++E1A2             >//              ______________________________________________________________________
  63++E1A2             >//              Dictionary part
  63++E1A2             >
  63++E1A2             >                org     Dict_Ptr
  63++23A2             >
  63++23A2 A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++23A4             >
  63++23A4             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++23A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++23A4 ~           >
  63++23A4 ~           >
  63++23A4             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++23A4             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++23A4             >
  63++23A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++23A4 E1                           pop     hl
  65++23A5 7D                           ld      a, l                // file-handle
  66++23A6 DD E5                        push    ix
  67++23A8 D5                           push    de
  68++23A9 C5                           push    bc
  69++23AA CF                           rst     $08
  70++23AB 9C                           db      $9C
  71++23AC 18 DF                        jr      F_Seek_Exit
  72++23AE              //              pop     de
  73++23AE              //              pop     bc
  74++23AE              //              pop     ix
  75++23AE              //              sbc     hl, hl
  76++23AE              //              psh1
  77++23AE
  78++23AE              //  ______________________________________________________________________
  79++23AE              //
  80++23AE              // f_fgetpos    u -- d f
  81++23AE              // Seek to position d in file-handle u.
  82++23AE              // Return a false-flag 0 on success, True flag on error
  83++23AE                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++23AE             >
  83++23AE             >Dict_Ptr        defl    $
  83++23AE             >
  83++23AE             >//              ______________________________________________________________________
  83++23AE             >//              Heap part
  83++23AE             >
  83++23AE             >
  83++23AE             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1A2             >
  83++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1A2             >Latest_Definition defl  Heap_Ptr
  83++E1A2             >
  83++E1A2             >                // dummy db directives used to calculate length of namec
  83++E1A2 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1A6 45 54 50 4F >
  83++E1AA 53          >
  83++E1AB             >len_NFA         defl    $ - temp_NFA
  83++E1AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1A2             >
  83++E1A2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1A3 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1A7 45 54 50 4F >
  83++E1AB 53          >
  83++E1AC             >                org     $-1                 // alter last byte of Name just above to set
  83++E1AB D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1AC             >
  83++E1AC 97 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1AE             >Prev_Ptr        defl    Heap_Ptr
  83++E1AE             >
  83++E1AE             >mirror_Ptr      defl    $
  83++E1AE             >
  83++E1AE B0 23       >                dw      Dict_Ptr + 2        // xt
  83++E1B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1B0             >
  83++E1B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1B0             >
  83++E1B0             >//              ______________________________________________________________________
  83++E1B0             >//              Dictionary part
  83++E1B0             >
  83++E1B0             >                org     Dict_Ptr
  83++23AE             >
  83++23AE AE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++23B0             >
  83++23B0             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++23B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++23B0 ~           >
  83++23B0 ~           >
  83++23B0             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++23B0             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++23B0             >
  83++23B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++23B0 E1                            pop     hl
  85++23B1 7D                            ld      a, l                // file-handle
  86++23B2 DD E5                         push    ix
  87++23B4 D5                            push    de
  88++23B5 C5                            push    bc
  89++23B6 CF                            rst     $08
  90++23B7 A0                            db      $A0
  91++23B8 D9                           exx
  92++23B9 C1                           pop     bc                  // IP
  93++23BA D1                           pop     de                  // Return Stack Pointer
  94++23BB DD E1                        pop     ix
  95++23BD D9                            exx
  96++23BE D5                            push    de
  97++23BF C5                            push    bc
  98++23C0 ED 62                         sbc     hl, hl
  99++23C2 E5                            push    hl
 100++23C3 D9                           exx
 101++23C4                              next
 101++23C4 DD E9       >                jp      (ix)
 102++23C6
 103++23C6              //  ______________________________________________________________________
 104++23C6              //
 105++23C6              // f_read       a b u -- n f
 106++23C6              // Read b bytes from file-handle u to address a
 107++23C6              // Return the actual number n of bytes read
 108++23C6              // Return 0 on success, True flag on error
 109++23C6                              New_Def F_READ, "F_READ", is_code, is_normal
 109++23C6             >
 109++23C6             >Dict_Ptr        defl    $
 109++23C6             >
 109++23C6             >//              ______________________________________________________________________
 109++23C6             >//              Heap part
 109++23C6             >
 109++23C6             >
 109++23C6             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1B0             >
 109++E1B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1B0             >Latest_Definition defl  Heap_Ptr
 109++E1B0             >
 109++E1B0             >                // dummy db directives used to calculate length of namec
 109++E1B0 46 5F 52 45 >                db      "F_READ"
 109++E1B4 41 44       >
 109++E1B6             >len_NFA         defl    $ - temp_NFA
 109++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1B0             >
 109++E1B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1B1 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1B5 41 44       >
 109++E1B7             >                org     $-1                 // alter last byte of Name just above to set
 109++E1B6 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1B7             >
 109++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1B9             >Prev_Ptr        defl    Heap_Ptr
 109++E1B9             >
 109++E1B9             >mirror_Ptr      defl    $
 109++E1B9             >
 109++E1B9 C8 23       >                dw      Dict_Ptr + 2        // xt
 109++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1BB             >
 109++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1BB             >
 109++E1BB             >//              ______________________________________________________________________
 109++E1BB             >//              Dictionary part
 109++E1BB             >
 109++E1BB             >                org     Dict_Ptr
 109++23C6             >
 109++23C6 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++23C8             >
 109++23C8             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++23C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++23C8 ~           >
 109++23C8 ~           >
 109++23C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++23C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++23C8             >
 109++23C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++23C8 D9                            exx
 111++23C9 E1                            pop     hl
 112++23CA 7D                            ld      a, l                // file-handle
 113++23CB C1                            pop     bc                  // bc has bytes to read
 114++23CC DD E3                         ex      (sp), ix            // ix has address
 115++23CE DD E5                         push    ix
 116++23D0 E1                            pop     hl
 117++23D1 D9                           exx
 118++23D2 D5                           push    de                  // Save Return Stack pointer
 119++23D3 C5                           push    bc                  // Save Instruction pointer
 120++23D4 D9                            exx
 121++23D5 CF                            rst     $08
 122++23D6 9D                            db      $9D
 123++23D7              F_Read_Exit:
 124++23D7 D9                           exx
 125++23D8 C1                           pop     bc                  // Restore Instruction pointer
 126++23D9 D1                           pop     de                  // Restore Return Stack pointer
 127++23DA DD E1                        pop     ix                  // Restore ix
 128++23DC D9                            exx
 129++23DD D5                            push    de                  // bytes involved in i/o operation
 130++23DE ED 62                         sbc     hl, hl
 131++23E0 E5                            push    hl
 132++23E1 D9                           exx
 133++23E2                              next
 133++23E2 DD E9       >                jp      (ix)
 134++23E4
 135++23E4              //  ______________________________________________________________________
 136++23E4              //
 137++23E4              // f_write      a b u -- n f
 138++23E4              // Write bytes currently stored at address a to file-handle u.
 139++23E4              // Return the actual n bytes written and 0 on success, True flag on error.
 140++23E4                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 140++23E4             >
 140++23E4             >Dict_Ptr        defl    $
 140++23E4             >
 140++23E4             >//              ______________________________________________________________________
 140++23E4             >//              Heap part
 140++23E4             >
 140++23E4             >
 140++23E4             >                org     (Heap_Ptr & $1FFF) + $E000
 140++E1BB             >
 140++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140++E1BB             >Latest_Definition defl  Heap_Ptr
 140++E1BB             >
 140++E1BB             >                // dummy db directives used to calculate length of namec
 140++E1BB 46 5F 57 52 >                db      "F_WRITE"
 140++E1BF 49 54 45    >
 140++E1C2             >len_NFA         defl    $ - temp_NFA
 140++E1C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140++E1BB             >
 140++E1BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140++E1BC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 140++E1C0 49 54 45    >
 140++E1C3             >                org     $-1                 // alter last byte of Name just above to set
 140++E1C2 C5          >                db      {b $} | END_BIT     // msb as name end
 140++E1C3             >
 140++E1C3 B0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140++E1C5             >Prev_Ptr        defl    Heap_Ptr
 140++E1C5             >
 140++E1C5             >mirror_Ptr      defl    $
 140++E1C5             >
 140++E1C5 E6 23       >                dw      Dict_Ptr + 2        // xt
 140++E1C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 140++E1C7             >
 140++E1C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 140++E1C7             >
 140++E1C7             >//              ______________________________________________________________________
 140++E1C7             >//              Dictionary part
 140++E1C7             >
 140++E1C7             >                org     Dict_Ptr
 140++23E4             >
 140++23E4 C5 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 140++23E6             >
 140++23E6             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140++23E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140++23E6 ~           >
 140++23E6 ~           >
 140++23E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 140++23E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 140++23E6             >
 140++23E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141++23E6 D9                            exx
 142++23E7 E1                            pop     hl
 143++23E8 7D                            ld      a, l                // file-handle
 144++23E9 C1                            pop     bc                  // bc has bytes to read
 145++23EA DD E3                         ex      (sp), ix            // ix has address
 146++23EC DD E5                         push    ix
 147++23EE E1                            pop     hl
 148++23EF D9                           exx
 149++23F0 D5                           push    de                  // Save Return Stack pointer
 150++23F1 C5                           push    bc                  // Save Instruction pointer
 151++23F2 D9                            exx
 152++23F3 CF                            rst     $08
 153++23F4 9E                            db      $9E
 154++23F5 18 E0                         jr F_Read_Exit
 155++23F7              //                exx
 156++23F7              //                pop     de                  // Restore Return Stack pointer
 157++23F7              //                pop     bc                  // Restore Instruction pointer
 158++23F7              //                pop     ix                  // Restore ix
 159++23F7              //                 exx
 160++23F7              //                 push    de                  // bytes involved in i/o operation
 161++23F7              //                 sbc     hl, hl
 162++23F7              //                 push    hl
 163++23F7              //                exx
 164++23F7              //                next
 165++23F7
 166++23F7              //  ______________________________________________________________________
 167++23F7              //
 168++23F7              // f_open       a1 a2 b -- u f
 169++23F7              // open a file
 170++23F7              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 171++23F7              // a2 is address to an 8-byte header data used in some cases.
 172++23F7              // b is access mode-byte, that is a combination of:
 173++23F7              // any/all of:
 174++23F7              //   esx_mode_read          $01 request read access
 175++23F7              //   esx_mode_write         $02 request write access
 176++23F7              //   esx_mode_use_header    $40 read/write +3DOS header
 177++23F7              // plus one of:
 178++23F7              //   esx_mode_open_exist    $00 only open existing file
 179++23F7              //   esx_mode_open_creat    $08 open existing or create file
 180++23F7              //   esx_mode_creat_noexist $04 create new file, error if exists
 181++23F7              //   esx_mode_creat_trunc   $0c create new file, delete existing
 182++23F7              // Return file-handle u and 0 on success, True flag on error
 183++23F7                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 183++23F7             >
 183++23F7             >Dict_Ptr        defl    $
 183++23F7             >
 183++23F7             >//              ______________________________________________________________________
 183++23F7             >//              Heap part
 183++23F7             >
 183++23F7             >
 183++23F7             >                org     (Heap_Ptr & $1FFF) + $E000
 183++E1C7             >
 183++E1C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183++E1C7             >Latest_Definition defl  Heap_Ptr
 183++E1C7             >
 183++E1C7             >                // dummy db directives used to calculate length of namec
 183++E1C7 46 5F 4F 50 >                db      "F_OPEN"
 183++E1CB 45 4E       >
 183++E1CD             >len_NFA         defl    $ - temp_NFA
 183++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183++E1C7             >
 183++E1C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183++E1C8 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 183++E1CC 45 4E       >
 183++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 183++E1CD CE          >                db      {b $} | END_BIT     // msb as name end
 183++E1CE             >
 183++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183++E1D0             >Prev_Ptr        defl    Heap_Ptr
 183++E1D0             >
 183++E1D0             >mirror_Ptr      defl    $
 183++E1D0             >
 183++E1D0 F9 23       >                dw      Dict_Ptr + 2        // xt
 183++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 183++E1D2             >
 183++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 183++E1D2             >
 183++E1D2             >//              ______________________________________________________________________
 183++E1D2             >//              Dictionary part
 183++E1D2             >
 183++E1D2             >                org     Dict_Ptr
 183++23F7             >
 183++23F7 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 183++23F9             >
 183++23F9             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 183++23F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 183++23F9 ~           >
 183++23F9 ~           >
 183++23F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 183++23F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 183++23F9             >
 183++23F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184++23F9 D9                            exx
 185++23FA C1                            pop     bc                  // file-mode
 186++23FB 41                            ld      b, c                // file-mode
 187++23FC D1                            pop     de                  // 8-bytes buffer if any
 188++23FD DD E3                         ex      (sp), ix            // filespec nul-terminated
 189++23FF DD E5                         push    ix
 190++2401 E1                            pop     hl
 191++2402 D9                           exx
 192++2403 D5                           push    de                  // Save Return Stack pointer
 193++2404 C5                           push    bc                  // Save Instruction pointer
 194++2405 D9                            exx
 195++2406 3E 2A                         ld      a, "*"
 196++2408 CF                            rst     $08
 197++2409 9A                            db      $9A
 198++240A              F_Open_Exit:
 199++240A 5F                            ld      e, a                // return the handle-number
 200++240B 16 00                         ld      d, 0
 201++240D 18 C8                        jr F_Read_Exit
 202++240F
 203++240F              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 204++240F              //   \ FILENAME 1+ PAD 1 F_OPEN
 205++240F              //   \ DROP
 206++240F              //   \ F_CLOSE
 207++240F
 208++240F
 209++240F              //  ______________________________________________________________________
 210++240F              //
 211++240F              // f_opendir    a1 -- u f
 212++240F              // open a file
 213++240F                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 213++240F             >
 213++240F             >Dict_Ptr        defl    $
 213++240F             >
 213++240F             >//              ______________________________________________________________________
 213++240F             >//              Heap part
 213++240F             >
 213++240F             >
 213++240F             >                org     (Heap_Ptr & $1FFF) + $E000
 213++E1D2             >
 213++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213++E1D2             >Latest_Definition defl  Heap_Ptr
 213++E1D2             >
 213++E1D2             >                // dummy db directives used to calculate length of namec
 213++E1D2 46 5F 4F 50 >                db      "F_OPENDIR"
 213++E1D6 45 4E 44 49 >
 213++E1DA 52          >
 213++E1DB             >len_NFA         defl    $ - temp_NFA
 213++E1DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213++E1D2             >
 213++E1D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 213++E1D7 45 4E 44 49 >
 213++E1DB 52          >
 213++E1DC             >                org     $-1                 // alter last byte of Name just above to set
 213++E1DB D2          >                db      {b $} | END_BIT     // msb as name end
 213++E1DC             >
 213++E1DC C7 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 213++E1DE             >Prev_Ptr        defl    Heap_Ptr
 213++E1DE             >
 213++E1DE             >mirror_Ptr      defl    $
 213++E1DE             >
 213++E1DE 11 24       >                dw      Dict_Ptr + 2        // xt
 213++E1E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 213++E1E0             >
 213++E1E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 213++E1E0             >
 213++E1E0             >//              ______________________________________________________________________
 213++E1E0             >//              Dictionary part
 213++E1E0             >
 213++E1E0             >                org     Dict_Ptr
 213++240F             >
 213++240F DE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 213++2411             >
 213++2411             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213++2411 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 213++2411 ~           >
 213++2411 ~           >
 213++2411             >                endif           ; ok        // for other definitions it "points" the correct handler
 213++2411             >                // Use of "; ok" to suppress "warning[fwdref]"
 213++2411             >
 213++2411             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214++2411 DD E3                        ex      (sp), ix            // filespec nul-terminated
 215++2413 DD E5                        push    ix
 216++2415 E1                           pop     hl
 217++2416 D5                           push    de                  // Save Return Stack pointer
 218++2417 C5                           push    bc                  // Save Instruction pointer
 219++2418 06 10                        ld      b, $10              // file-mode
 220++241A 3E 43                        ld      a, "C"
 221++241C CF                           rst     $08
 222++241D A3                           db      $A3
 223++241E 18 EA                        jr      F_Open_Exit
 224++2420
 225++2420
 226++2420              //  ______________________________________________________________________
 227++2420              //
 228++2420              // f_readdir    a1 a2 b -- u f
 229++2420              // open a file
 230++2420                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 230++2420             >
 230++2420             >Dict_Ptr        defl    $
 230++2420             >
 230++2420             >//              ______________________________________________________________________
 230++2420             >//              Heap part
 230++2420             >
 230++2420             >
 230++2420             >                org     (Heap_Ptr & $1FFF) + $E000
 230++E1E0             >
 230++E1E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 230++E1E0             >Latest_Definition defl  Heap_Ptr
 230++E1E0             >
 230++E1E0             >                // dummy db directives used to calculate length of namec
 230++E1E0 46 5F 52 45 >                db      "F_READDIR"
 230++E1E4 41 44 44 49 >
 230++E1E8 52          >
 230++E1E9             >len_NFA         defl    $ - temp_NFA
 230++E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 230++E1E0             >
 230++E1E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 230++E1E1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 230++E1E5 41 44 44 49 >
 230++E1E9 52          >
 230++E1EA             >                org     $-1                 // alter last byte of Name just above to set
 230++E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
 230++E1EA             >
 230++E1EA D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 230++E1EC             >Prev_Ptr        defl    Heap_Ptr
 230++E1EC             >
 230++E1EC             >mirror_Ptr      defl    $
 230++E1EC             >
 230++E1EC 22 24       >                dw      Dict_Ptr + 2        // xt
 230++E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 230++E1EE             >
 230++E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 230++E1EE             >
 230++E1EE             >//              ______________________________________________________________________
 230++E1EE             >//              Dictionary part
 230++E1EE             >
 230++E1EE             >                org     Dict_Ptr
 230++2420             >
 230++2420 EC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 230++2422             >
 230++2422             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 230++2422 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 230++2422 ~           >
 230++2422 ~           >
 230++2422             >                endif           ; ok        // for other definitions it "points" the correct handler
 230++2422             >                // Use of "; ok" to suppress "warning[fwdref]"
 230++2422             >
 230++2422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 231++2422 D9                            exx
 232++2423 E1                            pop     hl
 233++2424 7D                            ld      a, l
 234++2425 D1                            pop     de
 235++2426 DD E3                         ex      (sp), ix            // filespec nul-terminated
 236++2428 DD E5                         push    ix
 237++242A E1                            pop     hl
 238++242B D9                           exx
 239++242C D5                           push    de                  // Save Return Stack pointer
 240++242D C5                           push    bc                  // Save Instruction pointer
 241++242E D9                            exx
 242++242F CF                            rst     $08
 243++2430 A4                            db      $A4
 244++2431 18 D7                         jr      F_Open_Exit
 245++2433
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1102+ 2433
1103+ 2433
1104+ 2433              //  ______________________________________________________________________
1105+ 2433              //
1106+ 2433              // cmove    a1 a2 u --
1107+ 2433              // If u > 0, moves memory content starting at address a1 for n bytes long
1108+ 2433              // storing then starting at address addr2.
1109+ 2433              // The content of a1 is moved first. See CMOVE> also.
1110+ 2433                              New_Def CMOVE, "CMOVE", is_code, is_normal
1110+ 2433             >
1110+ 2433             >Dict_Ptr        defl    $
1110+ 2433             >
1110+ 2433             >//              ______________________________________________________________________
1110+ 2433             >//              Heap part
1110+ 2433             >
1110+ 2433             >
1110+ 2433             >                org     (Heap_Ptr & $1FFF) + $E000
1110+ E1EE             >
1110+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ E1EE             >Latest_Definition defl  Heap_Ptr
1110+ E1EE             >
1110+ E1EE             >                // dummy db directives used to calculate length of namec
1110+ E1EE 43 4D 4F 56 >                db      "CMOVE"
1110+ E1F2 45          >
1110+ E1F3             >len_NFA         defl    $ - temp_NFA
1110+ E1F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ E1EE             >
1110+ E1EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ E1EF 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1110+ E1F3 45          >
1110+ E1F4             >                org     $-1                 // alter last byte of Name just above to set
1110+ E1F3 C5          >                db      {b $} | END_BIT     // msb as name end
1110+ E1F4             >
1110+ E1F4 E0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1110+ E1F6             >Prev_Ptr        defl    Heap_Ptr
1110+ E1F6             >
1110+ E1F6             >mirror_Ptr      defl    $
1110+ E1F6             >
1110+ E1F6 35 24       >                dw      Dict_Ptr + 2        // xt
1110+ E1F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1110+ E1F8             >
1110+ E1F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1110+ E1F8             >
1110+ E1F8             >//              ______________________________________________________________________
1110+ E1F8             >//              Dictionary part
1110+ E1F8             >
1110+ E1F8             >                org     Dict_Ptr
1110+ 2433             >
1110+ 2433 F6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1110+ 2435             >
1110+ 2435             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 2435 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1110+ 2435 ~           >
1110+ 2435 ~           >
1110+ 2435             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 2435             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 2435             >
1110+ 2435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 2435 D9                           exx
1112+ 2436
1113+ 2436 C1                           pop     bc                  // bc has counter
1114+ 2437 D1                           pop     de                  // de now has dest
1115+ 2438 E1                           pop     hl                 // hl has source, save Instruction Pointer
1116+ 2439 78                           ld      a, b
1117+ 243A B1                           or      c
1118+ 243B 28 02                        jr      z, Cmove_NoMove
1119+ 243D ED B0                            ldir
1120+ 243F              Cmove_NoMove:
1121+ 243F D9                           exx
1122+ 2440
1123+ 2440                              next
1123+ 2440 DD E9       >                jp      (ix)
1124+ 2442
1125+ 2442              //  ______________________________________________________________________
1126+ 2442              //
1127+ 2442              // cmove>    a1 a2 u --
1128+ 2442              // If u > 0, moves memory content starting at address a1 for n bytes long
1129+ 2442              // storing then starting at address addr2.
1130+ 2442              // The content of a1 is moved last. See cmove.
1131+ 2442                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1131+ 2442             >
1131+ 2442             >Dict_Ptr        defl    $
1131+ 2442             >
1131+ 2442             >//              ______________________________________________________________________
1131+ 2442             >//              Heap part
1131+ 2442             >
1131+ 2442             >
1131+ 2442             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E1F8             >
1131+ E1F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E1F8             >Latest_Definition defl  Heap_Ptr
1131+ E1F8             >
1131+ E1F8             >                // dummy db directives used to calculate length of namec
1131+ E1F8 43 4D 4F 56 >                db      "CMOVE>"
1131+ E1FC 45 3E       >
1131+ E1FE             >len_NFA         defl    $ - temp_NFA
1131+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E1F8             >
1131+ E1F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E1F9 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1131+ E1FD 45 3E       >
1131+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1131+ E1FE BE          >                db      {b $} | END_BIT     // msb as name end
1131+ E1FF             >
1131+ E1FF EE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E201             >Prev_Ptr        defl    Heap_Ptr
1131+ E201             >
1131+ E201             >mirror_Ptr      defl    $
1131+ E201             >
1131+ E201 44 24       >                dw      Dict_Ptr + 2        // xt
1131+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E203             >
1131+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E203             >
1131+ E203             >//              ______________________________________________________________________
1131+ E203             >//              Dictionary part
1131+ E203             >
1131+ E203             >                org     Dict_Ptr
1131+ 2442             >
1131+ 2442 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 2444             >
1131+ 2444             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 2444 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1131+ 2444 ~           >
1131+ 2444 ~           >
1131+ 2444             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 2444             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 2444             >
1131+ 2444             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 2444 D9                           exx
1133+ 2445
1134+ 2445 C1                           pop     bc                  // bc has counter
1135+ 2446 D1                           pop     de                  // de has dest
1136+ 2447 E1                           pop     hl                  // hl has source, save Instruction Pointer
1137+ 2448 78                           ld      a, b
1138+ 2449 B1                           or      c
1139+ 244A 28 08                        jr      z, CmoveV_NoMove
1140+ 244C EB                               ex      de, hl              // compute address to
1141+ 244D 09                               add     hl, bc              // operate backward
1142+ 244E 2B                               dec     hl
1143+ 244F EB                               ex      de, hl
1144+ 2450 09                               add     hl, bc
1145+ 2451 2B                               dec     hl
1146+ 2452 ED B8                            lddr                        // backward
1147+ 2454              CmoveV_NoMove:
1148+ 2454 D9                           exx
1149+ 2455
1150+ 2455                              next
1150+ 2455 DD E9       >                jp      (ix)
1151+ 2457
1152+ 2457              //  ______________________________________________________________________
1153+ 2457              //
1154+ 2457              // um*      u1 u2 -- ud
1155+ 2457              // Unsigned multiplication
1156+ 2457              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1157+ 2457              // On the stack a double number is treated as two single numbers
1158+ 2457              // where DE is on the top of the stack and HL is the second from top,
1159+ 2457              // Instead, in 2VARIABLE a double number is stored as EDLH.
1160+ 2457              // this definition could use "MUL" Z80N new op-code.
1161+ 2457                              New_Def UM_MUL, "UM*", is_code, is_normal
1161+ 2457             >
1161+ 2457             >Dict_Ptr        defl    $
1161+ 2457             >
1161+ 2457             >//              ______________________________________________________________________
1161+ 2457             >//              Heap part
1161+ 2457             >
1161+ 2457             >
1161+ 2457             >                org     (Heap_Ptr & $1FFF) + $E000
1161+ E203             >
1161+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ E203             >Latest_Definition defl  Heap_Ptr
1161+ E203             >
1161+ E203             >                // dummy db directives used to calculate length of namec
1161+ E203 55 4D 2A    >                db      "UM*"
1161+ E206             >len_NFA         defl    $ - temp_NFA
1161+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ E203             >
1161+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ E204 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1161+ E207             >                org     $-1                 // alter last byte of Name just above to set
1161+ E206 AA          >                db      {b $} | END_BIT     // msb as name end
1161+ E207             >
1161+ E207 F8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1161+ E209             >Prev_Ptr        defl    Heap_Ptr
1161+ E209             >
1161+ E209             >mirror_Ptr      defl    $
1161+ E209             >
1161+ E209 59 24       >                dw      Dict_Ptr + 2        // xt
1161+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1161+ E20B             >
1161+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1161+ E20B             >
1161+ E20B             >//              ______________________________________________________________________
1161+ E20B             >//              Dictionary part
1161+ E20B             >
1161+ E20B             >                org     Dict_Ptr
1161+ 2457             >
1161+ 2457 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1161+ 2459             >
1161+ 2459             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 2459 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1161+ 2459 ~           >
1161+ 2459 ~           >
1161+ 2459             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 2459             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 2459             >
1161+ 2459             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 2459 D9                           exx
1163+ 245A D1                           pop     de                    // de has u2 operand
1164+ 245B E1                           pop     hl                    // hl has u1 operand
1165+ 245C 45                           ld      b, l
1166+ 245D 4B                           ld      c, e
1167+ 245E 5D                           ld      e, l
1168+ 245F 6A                           ld      l, d
1169+ 2460 E5                           push    hl
1170+ 2461 69                           ld      l, c
1171+ 2462 ED 30                        mul
1172+ 2464 EB                           ex      de, hl
1173+ 2465 ED 30                        mul
1174+ 2467 AF                           xor     a
1175+ 2468 19                           add     hl, de
1176+ 2469 8F                           adc     a
1177+ 246A 59                           ld      e, c
1178+ 246B 50                           ld      d, b
1179+ 246C ED 30                        mul
1180+ 246E 47                           ld      b, a
1181+ 246F 4C                           ld      c, h
1182+ 2470 7A                           ld      a, d
1183+ 2471 85                           add     l
1184+ 2472 67                           ld      h, a
1185+ 2473 6B                           ld      l, e
1186+ 2474 D1                           pop     de
1187+ 2475 ED 30                        mul
1188+ 2477 EB                           ex      de, hl
1189+ 2478 ED 4A                        adc     hl, bc
1190+ 247A D5                           push    de
1191+ 247B E5                           push    hl
1192+ 247C D9                           exx
1193+ 247D                              next
1193+ 247D DD E9       >                jp      (ix)
1194+ 247F
1195+ 247F              //  ______________________________________________________________________
1196+ 247F              //
1197+ 247F              // um/mod      ud u1 -- q r
1198+ 247F              // divides ud into u1 giving quotient q and remainder r
1199+ 247F              // algorithm takes 16 bit at a time starting from msb
1200+ 247F              // DE grows from lsb upward with quotient result
1201+ 247F              // HL keeps the remainder at each stage of division
1202+ 247F              // each loop 'lowers' the next binary digit to form the current dividend
1203+ 247F                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1203+ 247F             >
1203+ 247F             >Dict_Ptr        defl    $
1203+ 247F             >
1203+ 247F             >//              ______________________________________________________________________
1203+ 247F             >//              Heap part
1203+ 247F             >
1203+ 247F             >
1203+ 247F             >                org     (Heap_Ptr & $1FFF) + $E000
1203+ E20B             >
1203+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ E20B             >Latest_Definition defl  Heap_Ptr
1203+ E20B             >
1203+ E20B             >                // dummy db directives used to calculate length of namec
1203+ E20B 55 4D 2F 4D >                db      "UM/MOD"
1203+ E20F 4F 44       >
1203+ E211             >len_NFA         defl    $ - temp_NFA
1203+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ E20B             >
1203+ E20B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ E20C 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1203+ E210 4F 44       >
1203+ E212             >                org     $-1                 // alter last byte of Name just above to set
1203+ E211 C4          >                db      {b $} | END_BIT     // msb as name end
1203+ E212             >
1203+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1203+ E214             >Prev_Ptr        defl    Heap_Ptr
1203+ E214             >
1203+ E214             >mirror_Ptr      defl    $
1203+ E214             >
1203+ E214 81 24       >                dw      Dict_Ptr + 2        // xt
1203+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1203+ E216             >
1203+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1203+ E216             >
1203+ E216             >//              ______________________________________________________________________
1203+ E216             >//              Dictionary part
1203+ E216             >
1203+ E216             >                org     Dict_Ptr
1203+ 247F             >
1203+ 247F 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1203+ 2481             >
1203+ 2481             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 2481 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1203+ 2481 ~           >
1203+ 2481 ~           >
1203+ 2481             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 2481             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 2481             >
1203+ 2481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 2481 D9                           exx
1205+ 2482 C1                           pop     bc                      // divisor
1206+ 2483
1207+ 2483 E1                           pop     hl                      // < high part
1208+ 2484 D1                           pop     de                      // < low part and
1209+ 2485
1210+ 2485 7D                           ld      a, l                    // check without changing arguments
1211+ 2486 91                           sub     c                       // if divisor is greater than high part
1212+ 2487 7C                           ld      a, h                    // so quotient will be in range
1213+ 2488 98                           sbc     a, b
1214+ 2489 30 20                        jr      nc, Um_DivMod_OutOfRange
1215+ 248B 3E 10                            ld      a, 16
1216+ 248D              Um_DivMod_Loop:
1217+ 248D CB 23                                sla     e
1218+ 248F CB 12                                rl      d
1219+ 2491 ED 6A                                adc     hl, hl
1220+ 2493 30 05                                jr      nc, Um_DivMod_Carry
1221+ 2495 A7                                       and     a
1222+ 2496 ED 42                                    sbc     hl, bc
1223+ 2498 18 07                                jr      Um_DivMod_Endif    // else
1224+ 249A              Um_DivMod_Carry:
1225+ 249A A7                                       and     a
1226+ 249B ED 42                                    sbc     hl, bc
1227+ 249D 30 02                                    jr      nc, Um_DivMod_Endif
1228+ 249F 09                                           add     hl, bc
1229+ 24A0 1B                                           dec     de
1230+ 24A1              Um_DivMod_Endif:                                   // endif
1231+ 24A1 13                                   inc     de
1232+ 24A2 3D                                   dec     a
1233+ 24A3 20 E8                            jr      nz, Um_DivMod_Loop
1234+ 24A5 EB                               ex      de, hl
1235+ 24A6              Um_DivMod_Bailout:
1236+ 24A6 D5                               push    de                  // de := remanider
1237+ 24A7 E5                               push    hl                  // hl := quotient
1238+ 24A8 D9                               exx
1239+ 24A9                                  next
1239+ 24A9 DD E9       >                jp      (ix)
1240+ 24AB
1241+ 24AB              Um_DivMod_OutOfRange:
1242+ 24AB 21 FF FF                     ld      hl, -1
1243+ 24AE 54                           ld      d, h
1244+ 24AF 5D                           ld      e, l
1245+ 24B0 18 F4                        jr      Um_DivMod_Bailout
1246+ 24B2
1247+ 24B2              //  ______________________________________________________________________
1248+ 24B2              //
1249+ 24B2              // and          n1 n2 -- n3
1250+ 24B2              // bit logical AND. Returns n3 as n1 & n2
1251+ 24B2                              New_Def AND_OP, "AND", is_code, is_normal
1251+ 24B2             >
1251+ 24B2             >Dict_Ptr        defl    $
1251+ 24B2             >
1251+ 24B2             >//              ______________________________________________________________________
1251+ 24B2             >//              Heap part
1251+ 24B2             >
1251+ 24B2             >
1251+ 24B2             >                org     (Heap_Ptr & $1FFF) + $E000
1251+ E216             >
1251+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ E216             >Latest_Definition defl  Heap_Ptr
1251+ E216             >
1251+ E216             >                // dummy db directives used to calculate length of namec
1251+ E216 41 4E 44    >                db      "AND"
1251+ E219             >len_NFA         defl    $ - temp_NFA
1251+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ E216             >
1251+ E216 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ E217 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1251+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1251+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1251+ E21A             >
1251+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1251+ E21C             >Prev_Ptr        defl    Heap_Ptr
1251+ E21C             >
1251+ E21C             >mirror_Ptr      defl    $
1251+ E21C             >
1251+ E21C B4 24       >                dw      Dict_Ptr + 2        // xt
1251+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1251+ E21E             >
1251+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1251+ E21E             >
1251+ E21E             >//              ______________________________________________________________________
1251+ E21E             >//              Dictionary part
1251+ E21E             >
1251+ E21E             >                org     Dict_Ptr
1251+ 24B2             >
1251+ 24B2 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1251+ 24B4             >
1251+ 24B4             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 24B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 24B4 ~           >
1251+ 24B4 ~           >
1251+ 24B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 24B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 24B4             >
1251+ 24B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 24B4 D9                           exx
1253+ 24B5 D1                           pop     de
1254+ 24B6 E1                           pop     hl
1255+ 24B7 7B                           ld      a, e
1256+ 24B8 A5                           and     l
1257+ 24B9 6F                           ld      l, a
1258+ 24BA 7A                           ld      a, d
1259+ 24BB A4                           and     h
1260+ 24BC              Boolean_exit:
1261+ 24BC 67                           ld      h, a
1262+ 24BD E5                           push    hl
1263+ 24BE D9                           exx
1264+ 24BF                              next
1264+ 24BF DD E9       >                jp      (ix)
1265+ 24C1
1266+ 24C1              //  ______________________________________________________________________
1267+ 24C1              //
1268+ 24C1              // or           n1 n2 -- n3
1269+ 24C1              // bit logical OR. Returns n3 as n1 | n2
1270+ 24C1                              New_Def OR_OP, "OR", is_code, is_normal
1270+ 24C1             >
1270+ 24C1             >Dict_Ptr        defl    $
1270+ 24C1             >
1270+ 24C1             >//              ______________________________________________________________________
1270+ 24C1             >//              Heap part
1270+ 24C1             >
1270+ 24C1             >
1270+ 24C1             >                org     (Heap_Ptr & $1FFF) + $E000
1270+ E21E             >
1270+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ E21E             >Latest_Definition defl  Heap_Ptr
1270+ E21E             >
1270+ E21E             >                // dummy db directives used to calculate length of namec
1270+ E21E 4F 52       >                db      "OR"
1270+ E220             >len_NFA         defl    $ - temp_NFA
1270+ E220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ E21E             >
1270+ E21E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ E21F 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1270+ E221             >                org     $-1                 // alter last byte of Name just above to set
1270+ E220 D2          >                db      {b $} | END_BIT     // msb as name end
1270+ E221             >
1270+ E221 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1270+ E223             >Prev_Ptr        defl    Heap_Ptr
1270+ E223             >
1270+ E223             >mirror_Ptr      defl    $
1270+ E223             >
1270+ E223 C3 24       >                dw      Dict_Ptr + 2        // xt
1270+ E225             >Heap_Ptr        defl    $ - $E000           // save current HP
1270+ E225             >
1270+ E225             >Current_HP      defl  $ - $E000             // used to set HP once!
1270+ E225             >
1270+ E225             >//              ______________________________________________________________________
1270+ E225             >//              Dictionary part
1270+ E225             >
1270+ E225             >                org     Dict_Ptr
1270+ 24C1             >
1270+ 24C1 23 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1270+ 24C3             >
1270+ 24C3             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 24C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1270+ 24C3 ~           >
1270+ 24C3 ~           >
1270+ 24C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 24C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 24C3             >
1270+ 24C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 24C3 D9                           exx
1272+ 24C4 D1                           pop     de
1273+ 24C5 E1                           pop     hl
1274+ 24C6 7B                           ld      a, e
1275+ 24C7 B5                           or      l
1276+ 24C8 6F                           ld      l, a
1277+ 24C9 7A                           ld      a, d
1278+ 24CA B4                           or      h
1279+ 24CB 18 EF                        jr      Boolean_exit
1280+ 24CD                        //    ld      h, a
1281+ 24CD                        //    push    hl
1282+ 24CD                        //    exx
1283+ 24CD                        //    next
1284+ 24CD
1285+ 24CD              //  ______________________________________________________________________
1286+ 24CD              //
1287+ 24CD              // xor          n1 n2 -- n3
1288+ 24CD              // bit logical OR. Returns n3 as n1 ^ n2
1289+ 24CD                              New_Def XOR_OP, "XOR", is_code, is_normal
1289+ 24CD             >
1289+ 24CD             >Dict_Ptr        defl    $
1289+ 24CD             >
1289+ 24CD             >//              ______________________________________________________________________
1289+ 24CD             >//              Heap part
1289+ 24CD             >
1289+ 24CD             >
1289+ 24CD             >                org     (Heap_Ptr & $1FFF) + $E000
1289+ E225             >
1289+ E225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1289+ E225             >Latest_Definition defl  Heap_Ptr
1289+ E225             >
1289+ E225             >                // dummy db directives used to calculate length of namec
1289+ E225 58 4F 52    >                db      "XOR"
1289+ E228             >len_NFA         defl    $ - temp_NFA
1289+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1289+ E225             >
1289+ E225 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1289+ E226 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1289+ E229             >                org     $-1                 // alter last byte of Name just above to set
1289+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1289+ E229             >
1289+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1289+ E22B             >Prev_Ptr        defl    Heap_Ptr
1289+ E22B             >
1289+ E22B             >mirror_Ptr      defl    $
1289+ E22B             >
1289+ E22B CF 24       >                dw      Dict_Ptr + 2        // xt
1289+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1289+ E22D             >
1289+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1289+ E22D             >
1289+ E22D             >//              ______________________________________________________________________
1289+ E22D             >//              Dictionary part
1289+ E22D             >
1289+ E22D             >                org     Dict_Ptr
1289+ 24CD             >
1289+ 24CD 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1289+ 24CF             >
1289+ 24CF             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1289+ 24CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1289+ 24CF ~           >
1289+ 24CF ~           >
1289+ 24CF             >                endif           ; ok        // for other definitions it "points" the correct handler
1289+ 24CF             >                // Use of "; ok" to suppress "warning[fwdref]"
1289+ 24CF             >
1289+ 24CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1290+ 24CF D9                           exx
1291+ 24D0 D1                           pop     de
1292+ 24D1 E1                           pop     hl
1293+ 24D2 7B                           ld      a, e
1294+ 24D3 AD                           xor     l
1295+ 24D4 6F                           ld      l, a
1296+ 24D5 7A                           ld      a, d
1297+ 24D6 AC                           xor     h
1298+ 24D7 18 E3                        jr      Boolean_exit
1299+ 24D9                        //    ld      h, a
1300+ 24D9                        //    push    hl
1301+ 24D9                        //    exx
1302+ 24D9                        //    next
1303+ 24D9
1304+ 24D9              //  ______________________________________________________________________
1305+ 24D9              //
1306+ 24D9              // sp@      -- a
1307+ 24D9              // returns on top of stack the value of SP before execution
1308+ 24D9                              New_Def SPFETCH, "SP@", is_code, is_normal
1308+ 24D9             >
1308+ 24D9             >Dict_Ptr        defl    $
1308+ 24D9             >
1308+ 24D9             >//              ______________________________________________________________________
1308+ 24D9             >//              Heap part
1308+ 24D9             >
1308+ 24D9             >
1308+ 24D9             >                org     (Heap_Ptr & $1FFF) + $E000
1308+ E22D             >
1308+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ E22D             >Latest_Definition defl  Heap_Ptr
1308+ E22D             >
1308+ E22D             >                // dummy db directives used to calculate length of namec
1308+ E22D 53 50 40    >                db      "SP@"
1308+ E230             >len_NFA         defl    $ - temp_NFA
1308+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ E22D             >
1308+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ E22E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1308+ E231             >                org     $-1                 // alter last byte of Name just above to set
1308+ E230 C0          >                db      {b $} | END_BIT     // msb as name end
1308+ E231             >
1308+ E231 25 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1308+ E233             >Prev_Ptr        defl    Heap_Ptr
1308+ E233             >
1308+ E233             >mirror_Ptr      defl    $
1308+ E233             >
1308+ E233 DB 24       >                dw      Dict_Ptr + 2        // xt
1308+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1308+ E235             >
1308+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1308+ E235             >
1308+ E235             >//              ______________________________________________________________________
1308+ E235             >//              Dictionary part
1308+ E235             >
1308+ E235             >                org     Dict_Ptr
1308+ 24D9             >
1308+ 24D9 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1308+ 24DB             >
1308+ 24DB             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 24DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1308+ 24DB ~           >
1308+ 24DB ~           >
1308+ 24DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 24DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 24DB             >
1308+ 24DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 24DB
1310+ 24DB 21 00 00                     ld      hl, 0
1311+ 24DE 39                           add     hl, sp
1312+ 24DF
1313+ 24DF                              psh1
1313+ 24DF E5          >                push    hl
1313+ 24E0 DD E9       >                jp      (ix)
1314+ 24E2
1315+ 24E2              //  ______________________________________________________________________
1316+ 24E2              //
1317+ 24E2              // sp!      a --
1318+ 24E2              // restore SP to the initial value passed
1319+ 24E2              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1320+ 24E2                              New_Def SPSTORE, "SP!", is_code, is_normal
1320+ 24E2             >
1320+ 24E2             >Dict_Ptr        defl    $
1320+ 24E2             >
1320+ 24E2             >//              ______________________________________________________________________
1320+ 24E2             >//              Heap part
1320+ 24E2             >
1320+ 24E2             >
1320+ 24E2             >                org     (Heap_Ptr & $1FFF) + $E000
1320+ E235             >
1320+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ E235             >Latest_Definition defl  Heap_Ptr
1320+ E235             >
1320+ E235             >                // dummy db directives used to calculate length of namec
1320+ E235 53 50 21    >                db      "SP!"
1320+ E238             >len_NFA         defl    $ - temp_NFA
1320+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ E235             >
1320+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ E236 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1320+ E239             >                org     $-1                 // alter last byte of Name just above to set
1320+ E238 A1          >                db      {b $} | END_BIT     // msb as name end
1320+ E239             >
1320+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1320+ E23B             >Prev_Ptr        defl    Heap_Ptr
1320+ E23B             >
1320+ E23B             >mirror_Ptr      defl    $
1320+ E23B             >
1320+ E23B E4 24       >                dw      Dict_Ptr + 2        // xt
1320+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1320+ E23D             >
1320+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1320+ E23D             >
1320+ E23D             >//              ______________________________________________________________________
1320+ E23D             >//              Dictionary part
1320+ E23D             >
1320+ E23D             >                org     Dict_Ptr
1320+ 24E2             >
1320+ 24E2 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1320+ 24E4             >
1320+ 24E4             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 24E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1320+ 24E4 ~           >
1320+ 24E4 ~           >
1320+ 24E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 24E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 24E4             >
1320+ 24E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 24E4 E1                           pop     hl
1322+ 24E5 F9                           ld      sp, hl
1323+ 24E6
1324+ 24E6                              next
1324+ 24E6 DD E9       >                jp      (ix)
1325+ 24E8
1326+ 24E8              //  ______________________________________________________________________
1327+ 24E8              //
1328+ 24E8              // rp@      -- a
1329+ 24E8              // returns on top of stack the value of Return-Pointer
1330+ 24E8                              New_Def RPFETCH, "RP@", is_code, is_normal
1330+ 24E8             >
1330+ 24E8             >Dict_Ptr        defl    $
1330+ 24E8             >
1330+ 24E8             >//              ______________________________________________________________________
1330+ 24E8             >//              Heap part
1330+ 24E8             >
1330+ 24E8             >
1330+ 24E8             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E23D             >
1330+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E23D             >Latest_Definition defl  Heap_Ptr
1330+ E23D             >
1330+ E23D             >                // dummy db directives used to calculate length of namec
1330+ E23D 52 50 40    >                db      "RP@"
1330+ E240             >len_NFA         defl    $ - temp_NFA
1330+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E23D             >
1330+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E23E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1330+ E241             >                org     $-1                 // alter last byte of Name just above to set
1330+ E240 C0          >                db      {b $} | END_BIT     // msb as name end
1330+ E241             >
1330+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E243             >Prev_Ptr        defl    Heap_Ptr
1330+ E243             >
1330+ E243             >mirror_Ptr      defl    $
1330+ E243             >
1330+ E243 EA 24       >                dw      Dict_Ptr + 2        // xt
1330+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E245             >
1330+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E245             >
1330+ E245             >//              ______________________________________________________________________
1330+ E245             >//              Dictionary part
1330+ E245             >
1330+ E245             >                org     Dict_Ptr
1330+ 24E8             >
1330+ 24E8 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 24EA             >
1330+ 24EA             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 24EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1330+ 24EA ~           >
1330+ 24EA ~           >
1330+ 24EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 24EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 24EA             >
1330+ 24EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 24EA
1332+ 24EA                              // *** ldhlrp
1333+ 24EA                              // *** ex      de, hl
1334+ 24EA D5                           push de
1335+ 24EB
1336+ 24EB                              next
1336+ 24EB DD E9       >                jp      (ix)
1337+ 24ED
1338+ 24ED              //  ______________________________________________________________________
1339+ 24ED              //
1340+ 24ED              // rp!      a --
1341+ 24ED              // restore RP to the initial value passed
1342+ 24ED              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1343+ 24ED                              New_Def RPSTORE, "RP!", is_code, is_normal
1343+ 24ED             >
1343+ 24ED             >Dict_Ptr        defl    $
1343+ 24ED             >
1343+ 24ED             >//              ______________________________________________________________________
1343+ 24ED             >//              Heap part
1343+ 24ED             >
1343+ 24ED             >
1343+ 24ED             >                org     (Heap_Ptr & $1FFF) + $E000
1343+ E245             >
1343+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1343+ E245             >Latest_Definition defl  Heap_Ptr
1343+ E245             >
1343+ E245             >                // dummy db directives used to calculate length of namec
1343+ E245 52 50 21    >                db      "RP!"
1343+ E248             >len_NFA         defl    $ - temp_NFA
1343+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1343+ E245             >
1343+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1343+ E246 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1343+ E249             >                org     $-1                 // alter last byte of Name just above to set
1343+ E248 A1          >                db      {b $} | END_BIT     // msb as name end
1343+ E249             >
1343+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1343+ E24B             >Prev_Ptr        defl    Heap_Ptr
1343+ E24B             >
1343+ E24B             >mirror_Ptr      defl    $
1343+ E24B             >
1343+ E24B EF 24       >                dw      Dict_Ptr + 2        // xt
1343+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1343+ E24D             >
1343+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1343+ E24D             >
1343+ E24D             >//              ______________________________________________________________________
1343+ E24D             >//              Dictionary part
1343+ E24D             >
1343+ E24D             >                org     Dict_Ptr
1343+ 24ED             >
1343+ 24ED 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1343+ 24EF             >
1343+ 24EF             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1343+ 24EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1343+ 24EF ~           >
1343+ 24EF ~           >
1343+ 24EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1343+ 24EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1343+ 24EF             >
1343+ 24EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1344+ 24EF D1                           pop     de
1345+ 24F0                              // *** ex      de, hl
1346+ 24F0                              // *** ldrphl
1347+ 24F0
1348+ 24F0                              next
1348+ 24F0 DD E9       >                jp      (ix)
1349+ 24F2
1350+ 24F2              //  ______________________________________________________________________
1351+ 24F2              //
1352+ 24F2              // exit       --
1353+ 24F2              // exits back to the caller word
1354+ 24F2                              New_Def EXIT, "EXIT", is_code, is_normal
1354+ 24F2             >
1354+ 24F2             >Dict_Ptr        defl    $
1354+ 24F2             >
1354+ 24F2             >//              ______________________________________________________________________
1354+ 24F2             >//              Heap part
1354+ 24F2             >
1354+ 24F2             >
1354+ 24F2             >                org     (Heap_Ptr & $1FFF) + $E000
1354+ E24D             >
1354+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1354+ E24D             >Latest_Definition defl  Heap_Ptr
1354+ E24D             >
1354+ E24D             >                // dummy db directives used to calculate length of namec
1354+ E24D 45 58 49 54 >                db      "EXIT"
1354+ E251             >len_NFA         defl    $ - temp_NFA
1354+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1354+ E24D             >
1354+ E24D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1354+ E24E 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1354+ E252             >                org     $-1                 // alter last byte of Name just above to set
1354+ E251 D4          >                db      {b $} | END_BIT     // msb as name end
1354+ E252             >
1354+ E252 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1354+ E254             >Prev_Ptr        defl    Heap_Ptr
1354+ E254             >
1354+ E254             >mirror_Ptr      defl    $
1354+ E254             >
1354+ E254 F4 24       >                dw      Dict_Ptr + 2        // xt
1354+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1354+ E256             >
1354+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1354+ E256             >
1354+ E256             >//              ______________________________________________________________________
1354+ E256             >//              Dictionary part
1354+ E256             >
1354+ E256             >                org     Dict_Ptr
1354+ 24F2             >
1354+ 24F2 54 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1354+ 24F4             >
1354+ 24F4             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1354+ 24F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1354+ 24F4 ~           >
1354+ 24F4 ~           >
1354+ 24F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1354+ 24F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1354+ 24F4             >
1354+ 24F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1355+ 24F4 EB                           ex      de, hl
1356+ 24F5                              // *** ldhlrp                      // Get Return Stack Pointer
1357+ 24F5 4E                           ld      c, (hl)             // pop Instruction Pointer
1358+ 24F6 23                           inc     hl                  // from Return Stack
1359+ 24F7 46                           ld      b, (hl)
1360+ 24F8 23                           inc     hl
1361+ 24F9                              // *** ldrphl                      // Set Return Stack Pointer
1362+ 24F9 EB                           ex      de, hl
1363+ 24FA                              next
1363+ 24FA DD E9       >                jp      (ix)
1364+ 24FC
1365+ 24FC              //  ______________________________________________________________________
1366+ 24FC              //
1367+ 24FC              // lastl      --
1368+ 24FC              // exits back to the caller word
1369+ 24FC              //              New_Def EXIT, "LASTL", is_code, is_normal
1370+ 24FC              //              push    de
1371+ 24FC              //              ex      de, hl //**
1372+ 24FC              //              // *** ldhlrp                      // Get Return Stack Pointer
1373+ 24FC              //              ld      e, (hl)             // pop Instruction Pointer
1374+ 24FC              //              inc     hl                  // from Return Stack
1375+ 24FC              //              ld      d, (hl)
1376+ 24FC              //              inc     hl
1377+ 24FC              //              ld      (hl), e
1378+ 24FC              //              inc     hl
1379+ 24FC              //              ld      (hl), d
1380+ 24FC              //              add     hl, -3
1381+ 24FC              //              pop     de
1382+ 24FC              //              next
1383+ 24FC
1384+ 24FC              //  ______________________________________________________________________
1385+ 24FC              //
1386+ 24FC              // >r      n --
1387+ 24FC              // pop from calculator-stack and push into return-stack
1388+ 24FC                              New_Def TO_R, ">R", is_code, is_normal
1388+ 24FC             >
1388+ 24FC             >Dict_Ptr        defl    $
1388+ 24FC             >
1388+ 24FC             >//              ______________________________________________________________________
1388+ 24FC             >//              Heap part
1388+ 24FC             >
1388+ 24FC             >
1388+ 24FC             >                org     (Heap_Ptr & $1FFF) + $E000
1388+ E256             >
1388+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ E256             >Latest_Definition defl  Heap_Ptr
1388+ E256             >
1388+ E256             >                // dummy db directives used to calculate length of namec
1388+ E256 3E 52       >                db      ">R"
1388+ E258             >len_NFA         defl    $ - temp_NFA
1388+ E258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ E256             >
1388+ E256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ E257 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1388+ E259             >                org     $-1                 // alter last byte of Name just above to set
1388+ E258 D2          >                db      {b $} | END_BIT     // msb as name end
1388+ E259             >
1388+ E259 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1388+ E25B             >Prev_Ptr        defl    Heap_Ptr
1388+ E25B             >
1388+ E25B             >mirror_Ptr      defl    $
1388+ E25B             >
1388+ E25B FE 24       >                dw      Dict_Ptr + 2        // xt
1388+ E25D             >Heap_Ptr        defl    $ - $E000           // save current HP
1388+ E25D             >
1388+ E25D             >Current_HP      defl  $ - $E000             // used to set HP once!
1388+ E25D             >
1388+ E25D             >//              ______________________________________________________________________
1388+ E25D             >//              Dictionary part
1388+ E25D             >
1388+ E25D             >                org     Dict_Ptr
1388+ 24FC             >
1388+ 24FC 5B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1388+ 24FE             >
1388+ 24FE             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 24FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1388+ 24FE ~           >
1388+ 24FE ~           >
1388+ 24FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 24FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 24FE             >
1388+ 24FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 24FE E1                           pop     hl
1390+ 24FF EB                           ex      de, hl //**
1391+ 2500                              // *** ldhlrp
1392+ 2500 2B                           dec     hl
1393+ 2501 72                           ld      (hl), d             // store current TOS
1394+ 2502 2B                           dec     hl                  // to Return Stack
1395+ 2503 73                           ld      (hl), e
1396+ 2504                              // *** ldrphl
1397+ 2504 EB                           ex      de, hl //**
1398+ 2505                              next
1398+ 2505 DD E9       >                jp      (ix)
1399+ 2507
1400+ 2507              //  ______________________________________________________________________
1401+ 2507              //
1402+ 2507              // r>      -- n
1403+ 2507              // pop from return-stack and push into calculator-stack
1404+ 2507                              New_Def R_TO, "R>", is_code, is_normal
1404+ 2507             >
1404+ 2507             >Dict_Ptr        defl    $
1404+ 2507             >
1404+ 2507             >//              ______________________________________________________________________
1404+ 2507             >//              Heap part
1404+ 2507             >
1404+ 2507             >
1404+ 2507             >                org     (Heap_Ptr & $1FFF) + $E000
1404+ E25D             >
1404+ E25D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1404+ E25D             >Latest_Definition defl  Heap_Ptr
1404+ E25D             >
1404+ E25D             >                // dummy db directives used to calculate length of namec
1404+ E25D 52 3E       >                db      "R>"
1404+ E25F             >len_NFA         defl    $ - temp_NFA
1404+ E25F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1404+ E25D             >
1404+ E25D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1404+ E25E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1404+ E260             >                org     $-1                 // alter last byte of Name just above to set
1404+ E25F BE          >                db      {b $} | END_BIT     // msb as name end
1404+ E260             >
1404+ E260 56 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1404+ E262             >Prev_Ptr        defl    Heap_Ptr
1404+ E262             >
1404+ E262             >mirror_Ptr      defl    $
1404+ E262             >
1404+ E262 09 25       >                dw      Dict_Ptr + 2        // xt
1404+ E264             >Heap_Ptr        defl    $ - $E000           // save current HP
1404+ E264             >
1404+ E264             >Current_HP      defl  $ - $E000             // used to set HP once!
1404+ E264             >
1404+ E264             >//              ______________________________________________________________________
1404+ E264             >//              Dictionary part
1404+ E264             >
1404+ E264             >                org     Dict_Ptr
1404+ 2507             >
1404+ 2507 62 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1404+ 2509             >
1404+ 2509             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1404+ 2509 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1404+ 2509 ~           >
1404+ 2509 ~           >
1404+ 2509             >                endif           ; ok        // for other definitions it "points" the correct handler
1404+ 2509             >                // Use of "; ok" to suppress "warning[fwdref]"
1404+ 2509             >
1404+ 2509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1405+ 2509
1406+ 2509 EB                           ex      de, hl //**
1407+ 250A                              // *** ldhlrp
1408+ 250A 5E                           ld      e, (hl)             // retrieve from Return Stack
1409+ 250B 23                           inc     hl
1410+ 250C 56                           ld      d, (hl)
1411+ 250D 23                           inc     hl
1412+ 250E                              // *** ldrphl
1413+ 250E EB                           ex      de, hl //**
1414+ 250F E5                           push    hl
1415+ 2510                              next
1415+ 2510 DD E9       >                jp      (ix)
1416+ 2512
1417+ 2512              //  ______________________________________________________________________
1418+ 2512              //
1419+ 2512              // r@           -- n
1420+ 2512              // return on top of stack the value of top of return-stack
1421+ 2512              // Since this is the same as I, we alter R's CFA to jump there
1422+ 2512                              New_Def R_OP, "R@", is_code, is_normal
1422+ 2512             >
1422+ 2512             >Dict_Ptr        defl    $
1422+ 2512             >
1422+ 2512             >//              ______________________________________________________________________
1422+ 2512             >//              Heap part
1422+ 2512             >
1422+ 2512             >
1422+ 2512             >                org     (Heap_Ptr & $1FFF) + $E000
1422+ E264             >
1422+ E264             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ E264             >Latest_Definition defl  Heap_Ptr
1422+ E264             >
1422+ E264             >                // dummy db directives used to calculate length of namec
1422+ E264 52 40       >                db      "R@"
1422+ E266             >len_NFA         defl    $ - temp_NFA
1422+ E266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ E264             >
1422+ E264 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ E265 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1422+ E267             >                org     $-1                 // alter last byte of Name just above to set
1422+ E266 C0          >                db      {b $} | END_BIT     // msb as name end
1422+ E267             >
1422+ E267 5D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1422+ E269             >Prev_Ptr        defl    Heap_Ptr
1422+ E269             >
1422+ E269             >mirror_Ptr      defl    $
1422+ E269             >
1422+ E269 14 25       >                dw      Dict_Ptr + 2        // xt
1422+ E26B             >Heap_Ptr        defl    $ - $E000           // save current HP
1422+ E26B             >
1422+ E26B             >Current_HP      defl  $ - $E000             // used to set HP once!
1422+ E26B             >
1422+ E26B             >//              ______________________________________________________________________
1422+ E26B             >//              Dictionary part
1422+ E26B             >
1422+ E26B             >                org     Dict_Ptr
1422+ 2512             >
1422+ 2512 69 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1422+ 2514             >
1422+ 2514             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 2514 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 2514 ~           >
1422+ 2514 ~           >
1422+ 2514             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 2514             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 2514             >
1422+ 2514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 2514                          //  Behave  I_Ptr
1424+ 2514 C3 D2 20                     jp      I_Ptr
1425+ 2517
1426+ 2517              //  ______________________________________________________________________
1427+ 2517              //
1428+ 2517              // r            -- n
1429+ 2517              // return on top of stack the value of top of return-stack
1430+ 2517              // Since this is the same as I, we alter R's CFA to jump there
1431+ 2517              //              New_Def R_OLD, "R", is_code, is_normal
1432+ 2517              //              jp      I_Ptr
1433+ 2517
1434+ 2517              //  ______________________________________________________________________
1435+ 2517              //
1436+ 2517              // 0=           n -- f
1437+ 2517              // true (non zero) if n is zero, false (0) elsewere
1438+ 2517                              New_Def ZEQUAL, "0=", is_code, is_normal
1438+ 2517             >
1438+ 2517             >Dict_Ptr        defl    $
1438+ 2517             >
1438+ 2517             >//              ______________________________________________________________________
1438+ 2517             >//              Heap part
1438+ 2517             >
1438+ 2517             >
1438+ 2517             >                org     (Heap_Ptr & $1FFF) + $E000
1438+ E26B             >
1438+ E26B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1438+ E26B             >Latest_Definition defl  Heap_Ptr
1438+ E26B             >
1438+ E26B             >                // dummy db directives used to calculate length of namec
1438+ E26B 30 3D       >                db      "0="
1438+ E26D             >len_NFA         defl    $ - temp_NFA
1438+ E26D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1438+ E26B             >
1438+ E26B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1438+ E26C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1438+ E26E             >                org     $-1                 // alter last byte of Name just above to set
1438+ E26D BD          >                db      {b $} | END_BIT     // msb as name end
1438+ E26E             >
1438+ E26E 64 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1438+ E270             >Prev_Ptr        defl    Heap_Ptr
1438+ E270             >
1438+ E270             >mirror_Ptr      defl    $
1438+ E270             >
1438+ E270 19 25       >                dw      Dict_Ptr + 2        // xt
1438+ E272             >Heap_Ptr        defl    $ - $E000           // save current HP
1438+ E272             >
1438+ E272             >Current_HP      defl  $ - $E000             // used to set HP once!
1438+ E272             >
1438+ E272             >//              ______________________________________________________________________
1438+ E272             >//              Dictionary part
1438+ E272             >
1438+ E272             >                org     Dict_Ptr
1438+ 2517             >
1438+ 2517 70 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1438+ 2519             >
1438+ 2519             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1438+ 2519 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1438+ 2519 ~           >
1438+ 2519 ~           >
1438+ 2519             >                endif           ; ok        // for other definitions it "points" the correct handler
1438+ 2519             >                // Use of "; ok" to suppress "warning[fwdref]"
1438+ 2519             >
1438+ 2519             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1439+ 2519              Zero_Equal:
1440+ 2519 E1                           pop     hl
1441+ 251A 7D                           ld      a, l
1442+ 251B B4                           or      h
1443+ 251C 21 00 00                     ld      hl, FALSE_FLAG
1444+ 251F 20 01                        jr      nz, ZEqual_Skip
1445+ 2521 2B                               dec     hl
1446+ 2522              ZEqual_Skip:
1447+ 2522                              psh1
1447+ 2522 E5          >                push    hl
1447+ 2523 DD E9       >                jp      (ix)
1448+ 2525
1449+ 2525              //  ______________________________________________________________________
1450+ 2525              //
1451+ 2525              // not         a1 -- a2
1452+ 2525              // increment by 2 top of stack
1453+ 2525                              New_Def NOT_OP, "NOT", is_code, is_normal
1453+ 2525             >
1453+ 2525             >Dict_Ptr        defl    $
1453+ 2525             >
1453+ 2525             >//              ______________________________________________________________________
1453+ 2525             >//              Heap part
1453+ 2525             >
1453+ 2525             >
1453+ 2525             >                org     (Heap_Ptr & $1FFF) + $E000
1453+ E272             >
1453+ E272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1453+ E272             >Latest_Definition defl  Heap_Ptr
1453+ E272             >
1453+ E272             >                // dummy db directives used to calculate length of namec
1453+ E272 4E 4F 54    >                db      "NOT"
1453+ E275             >len_NFA         defl    $ - temp_NFA
1453+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1453+ E272             >
1453+ E272 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1453+ E273 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1453+ E276             >                org     $-1                 // alter last byte of Name just above to set
1453+ E275 D4          >                db      {b $} | END_BIT     // msb as name end
1453+ E276             >
1453+ E276 6B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1453+ E278             >Prev_Ptr        defl    Heap_Ptr
1453+ E278             >
1453+ E278             >mirror_Ptr      defl    $
1453+ E278             >
1453+ E278 27 25       >                dw      Dict_Ptr + 2        // xt
1453+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1453+ E27A             >
1453+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1453+ E27A             >
1453+ E27A             >//              ______________________________________________________________________
1453+ E27A             >//              Dictionary part
1453+ E27A             >
1453+ E27A             >                org     Dict_Ptr
1453+ 2525             >
1453+ 2525 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1453+ 2527             >
1453+ 2527             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1453+ 2527 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1453+ 2527 ~           >
1453+ 2527 ~           >
1453+ 2527             >                endif           ; ok        // for other definitions it "points" the correct handler
1453+ 2527             >                // Use of "; ok" to suppress "warning[fwdref]"
1453+ 2527             >
1453+ 2527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1454+ 2527                          //  Behave  Zero_Equal
1455+ 2527 18 F0                        jr      Zero_Equal
1456+ 2529
1457+ 2529              //  ______________________________________________________________________
1458+ 2529              //
1459+ 2529              // 0<           n -- f
1460+ 2529              // true (non zero) if n is less than zero, false (0) elsewere
1461+ 2529                              New_Def ZLESS, "0<", is_code, is_normal
1461+ 2529             >
1461+ 2529             >Dict_Ptr        defl    $
1461+ 2529             >
1461+ 2529             >//              ______________________________________________________________________
1461+ 2529             >//              Heap part
1461+ 2529             >
1461+ 2529             >
1461+ 2529             >                org     (Heap_Ptr & $1FFF) + $E000
1461+ E27A             >
1461+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1461+ E27A             >Latest_Definition defl  Heap_Ptr
1461+ E27A             >
1461+ E27A             >                // dummy db directives used to calculate length of namec
1461+ E27A 30 3C       >                db      "0<"
1461+ E27C             >len_NFA         defl    $ - temp_NFA
1461+ E27C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1461+ E27A             >
1461+ E27A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1461+ E27B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1461+ E27D             >                org     $-1                 // alter last byte of Name just above to set
1461+ E27C BC          >                db      {b $} | END_BIT     // msb as name end
1461+ E27D             >
1461+ E27D 72 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1461+ E27F             >Prev_Ptr        defl    Heap_Ptr
1461+ E27F             >
1461+ E27F             >mirror_Ptr      defl    $
1461+ E27F             >
1461+ E27F 2B 25       >                dw      Dict_Ptr + 2        // xt
1461+ E281             >Heap_Ptr        defl    $ - $E000           // save current HP
1461+ E281             >
1461+ E281             >Current_HP      defl  $ - $E000             // used to set HP once!
1461+ E281             >
1461+ E281             >//              ______________________________________________________________________
1461+ E281             >//              Dictionary part
1461+ E281             >
1461+ E281             >                org     Dict_Ptr
1461+ 2529             >
1461+ 2529 7F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1461+ 252B             >
1461+ 252B             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1461+ 252B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1461+ 252B ~           >
1461+ 252B ~           >
1461+ 252B             >                endif           ; ok        // for other definitions it "points" the correct handler
1461+ 252B             >                // Use of "; ok" to suppress "warning[fwdref]"
1461+ 252B             >
1461+ 252B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1462+ 252B E1                           pop     hl
1463+ 252C 29                           add     hl, hl
1464+ 252D ED 62                        sbc     hl, hl
1465+ 252F                              psh1
1465+ 252F E5          >                push    hl
1465+ 2530 DD E9       >                jp      (ix)
1466+ 2532
1467+ 2532              //  ______________________________________________________________________
1468+ 2532              //
1469+ 2532              // 0>           n -- f
1470+ 2532              // true (non zero) if n is less than zero, false (0) elsewere
1471+ 2532                              New_Def ZGREATER, "0>", is_code, is_normal
1471+ 2532             >
1471+ 2532             >Dict_Ptr        defl    $
1471+ 2532             >
1471+ 2532             >//              ______________________________________________________________________
1471+ 2532             >//              Heap part
1471+ 2532             >
1471+ 2532             >
1471+ 2532             >                org     (Heap_Ptr & $1FFF) + $E000
1471+ E281             >
1471+ E281             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1471+ E281             >Latest_Definition defl  Heap_Ptr
1471+ E281             >
1471+ E281             >                // dummy db directives used to calculate length of namec
1471+ E281 30 3E       >                db      "0>"
1471+ E283             >len_NFA         defl    $ - temp_NFA
1471+ E283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1471+ E281             >
1471+ E281 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1471+ E282 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1471+ E284             >                org     $-1                 // alter last byte of Name just above to set
1471+ E283 BE          >                db      {b $} | END_BIT     // msb as name end
1471+ E284             >
1471+ E284 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1471+ E286             >Prev_Ptr        defl    Heap_Ptr
1471+ E286             >
1471+ E286             >mirror_Ptr      defl    $
1471+ E286             >
1471+ E286 34 25       >                dw      Dict_Ptr + 2        // xt
1471+ E288             >Heap_Ptr        defl    $ - $E000           // save current HP
1471+ E288             >
1471+ E288             >Current_HP      defl  $ - $E000             // used to set HP once!
1471+ E288             >
1471+ E288             >//              ______________________________________________________________________
1471+ E288             >//              Dictionary part
1471+ E288             >
1471+ E288             >                org     Dict_Ptr
1471+ 2532             >
1471+ 2532 86 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1471+ 2534             >
1471+ 2534             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1471+ 2534 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1471+ 2534 ~           >
1471+ 2534 ~           >
1471+ 2534             >                endif           ; ok        // for other definitions it "points" the correct handler
1471+ 2534             >                // Use of "; ok" to suppress "warning[fwdref]"
1471+ 2534             >
1471+ 2534             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1472+ 2534 E1                           pop     hl
1473+ 2535 7D                           ld      a, l
1474+ 2536 B4                           or      h
1475+ 2537 29                           add     hl, hl
1476+ 2538 21 00 00                     ld      hl, FALSE_FLAG
1477+ 253B 38 04                        jr      c, ZGreater_Skip
1478+ 253D A7                               and     a
1479+ 253E 28 01                            jr      z, ZGreater_Skip
1480+ 2540 2B                                   dec     hl
1481+ 2541              ZGreater_Skip:
1482+ 2541                              psh1
1482+ 2541 E5          >                push    hl
1482+ 2542 DD E9       >                jp      (ix)
1483+ 2544
1484+ 2544              //  ______________________________________________________________________
1485+ 2544              //
1486+ 2544              // +            n1 n2 -- n3
1487+ 2544              // returns the unsigned sum of two top values
1488+ 2544                              New_Def PLUS, "+", is_code, is_normal
1488+ 2544             >
1488+ 2544             >Dict_Ptr        defl    $
1488+ 2544             >
1488+ 2544             >//              ______________________________________________________________________
1488+ 2544             >//              Heap part
1488+ 2544             >
1488+ 2544             >
1488+ 2544             >                org     (Heap_Ptr & $1FFF) + $E000
1488+ E288             >
1488+ E288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1488+ E288             >Latest_Definition defl  Heap_Ptr
1488+ E288             >
1488+ E288             >                // dummy db directives used to calculate length of namec
1488+ E288 2B          >                db      "+"
1488+ E289             >len_NFA         defl    $ - temp_NFA
1488+ E289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1488+ E288             >
1488+ E288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1488+ E289 2B          >                db      "+"               // name string in 7-bit ascii, but
1488+ E28A             >                org     $-1                 // alter last byte of Name just above to set
1488+ E289 AB          >                db      {b $} | END_BIT     // msb as name end
1488+ E28A             >
1488+ E28A 81 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1488+ E28C             >Prev_Ptr        defl    Heap_Ptr
1488+ E28C             >
1488+ E28C             >mirror_Ptr      defl    $
1488+ E28C             >
1488+ E28C 46 25       >                dw      Dict_Ptr + 2        // xt
1488+ E28E             >Heap_Ptr        defl    $ - $E000           // save current HP
1488+ E28E             >
1488+ E28E             >Current_HP      defl  $ - $E000             // used to set HP once!
1488+ E28E             >
1488+ E28E             >//              ______________________________________________________________________
1488+ E28E             >//              Dictionary part
1488+ E28E             >
1488+ E28E             >                org     Dict_Ptr
1488+ 2544             >
1488+ 2544 8C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1488+ 2546             >
1488+ 2546             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1488+ 2546 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1488+ 2546 ~           >
1488+ 2546 ~           >
1488+ 2546             >                endif           ; ok        // for other definitions it "points" the correct handler
1488+ 2546             >                // Use of "; ok" to suppress "warning[fwdref]"
1488+ 2546             >
1488+ 2546             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1489+ 2546 D9                           exx
1490+ 2547 E1                           pop     hl
1491+ 2548 D1                           pop     de
1492+ 2549 19                           add     hl, de
1493+ 254A E5                           push    hl
1494+ 254B D9                           exx
1495+ 254C                              next
1495+ 254C DD E9       >                jp      (ix)
1496+ 254E
1497+ 254E
1498+ 254E              //  ______________________________________________________________________
1499+ 254E              //
1500+ 254E              // d+           d1 d2 -- d3
1501+ 254E              // returns the unsigned sum of two top double-numbers
1502+ 254E              //      d2  d1
1503+ 254E              //      h l h l
1504+ 254E              // SP   LHEDLHED
1505+ 254E              // SP  +01234567
1506+ 254E                              New_Def DPLUS, "D+", is_code, is_normal
1506+ 254E             >
1506+ 254E             >Dict_Ptr        defl    $
1506+ 254E             >
1506+ 254E             >//              ______________________________________________________________________
1506+ 254E             >//              Heap part
1506+ 254E             >
1506+ 254E             >
1506+ 254E             >                org     (Heap_Ptr & $1FFF) + $E000
1506+ E28E             >
1506+ E28E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ E28E             >Latest_Definition defl  Heap_Ptr
1506+ E28E             >
1506+ E28E             >                // dummy db directives used to calculate length of namec
1506+ E28E 44 2B       >                db      "D+"
1506+ E290             >len_NFA         defl    $ - temp_NFA
1506+ E290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ E28E             >
1506+ E28E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ E28F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1506+ E291             >                org     $-1                 // alter last byte of Name just above to set
1506+ E290 AB          >                db      {b $} | END_BIT     // msb as name end
1506+ E291             >
1506+ E291 88 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1506+ E293             >Prev_Ptr        defl    Heap_Ptr
1506+ E293             >
1506+ E293             >mirror_Ptr      defl    $
1506+ E293             >
1506+ E293 50 25       >                dw      Dict_Ptr + 2        // xt
1506+ E295             >Heap_Ptr        defl    $ - $E000           // save current HP
1506+ E295             >
1506+ E295             >Current_HP      defl  $ - $E000             // used to set HP once!
1506+ E295             >
1506+ E295             >//              ______________________________________________________________________
1506+ E295             >//              Dictionary part
1506+ E295             >
1506+ E295             >                org     Dict_Ptr
1506+ 254E             >
1506+ 254E 93 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1506+ 2550             >
1506+ 2550             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 2550 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 2550 ~           >
1506+ 2550 ~           >
1506+ 2550             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 2550             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 2550             >
1506+ 2550             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 2550
1508+ 2550 D9                           exx
1509+ 2551 C1                           pop     bc                  // bc := d2.H
1510+ 2552 D1                           pop     de                  // hl := d2.L
1511+ 2553 E1                           pop     hl                  // d1.H
1512+ 2554 E3                           ex      (sp), hl            // d1.L
1513+ 2555 19                           add     hl, de              // hl := d2.L + d1.L
1514+ 2556 E3                           ex      (sp), hl            // d1.H
1515+ 2557 ED 4A                        adc     hl, bc              // d1.H + d2.H
1516+ 2559 E5                           push    hl
1517+ 255A D9                           exx
1518+ 255B                              next
1518+ 255B DD E9       >                jp      (ix)
1519+ 255D
1520+ 255D              //  ______________________________________________________________________
1521+ 255D              //
1522+ 255D              // 1+           n1 -- n2
1523+ 255D              // increment by 1 top of stack
1524+ 255D                              New_Def ONE_PLUS, "1+", is_code, is_normal
1524+ 255D             >
1524+ 255D             >Dict_Ptr        defl    $
1524+ 255D             >
1524+ 255D             >//              ______________________________________________________________________
1524+ 255D             >//              Heap part
1524+ 255D             >
1524+ 255D             >
1524+ 255D             >                org     (Heap_Ptr & $1FFF) + $E000
1524+ E295             >
1524+ E295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ E295             >Latest_Definition defl  Heap_Ptr
1524+ E295             >
1524+ E295             >                // dummy db directives used to calculate length of namec
1524+ E295 31 2B       >                db      "1+"
1524+ E297             >len_NFA         defl    $ - temp_NFA
1524+ E297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ E295             >
1524+ E295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ E296 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1524+ E298             >                org     $-1                 // alter last byte of Name just above to set
1524+ E297 AB          >                db      {b $} | END_BIT     // msb as name end
1524+ E298             >
1524+ E298 8E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1524+ E29A             >Prev_Ptr        defl    Heap_Ptr
1524+ E29A             >
1524+ E29A             >mirror_Ptr      defl    $
1524+ E29A             >
1524+ E29A 5F 25       >                dw      Dict_Ptr + 2        // xt
1524+ E29C             >Heap_Ptr        defl    $ - $E000           // save current HP
1524+ E29C             >
1524+ E29C             >Current_HP      defl  $ - $E000             // used to set HP once!
1524+ E29C             >
1524+ E29C             >//              ______________________________________________________________________
1524+ E29C             >//              Dictionary part
1524+ E29C             >
1524+ E29C             >                org     Dict_Ptr
1524+ 255D             >
1524+ 255D 9A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1524+ 255F             >
1524+ 255F             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 255F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1524+ 255F ~           >
1524+ 255F ~           >
1524+ 255F             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 255F             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 255F             >
1524+ 255F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 255F E1                           pop     hl
1526+ 2560 23                           inc     hl
1527+ 2561
1528+ 2561                              psh1
1528+ 2561 E5          >                push    hl
1528+ 2562 DD E9       >                jp      (ix)
1529+ 2564
1530+ 2564              //  ______________________________________________________________________
1531+ 2564              //
1532+ 2564              // 1-           n1 -- n2
1533+ 2564              // decrement by 1 top of stack
1534+ 2564                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1534+ 2564             >
1534+ 2564             >Dict_Ptr        defl    $
1534+ 2564             >
1534+ 2564             >//              ______________________________________________________________________
1534+ 2564             >//              Heap part
1534+ 2564             >
1534+ 2564             >
1534+ 2564             >                org     (Heap_Ptr & $1FFF) + $E000
1534+ E29C             >
1534+ E29C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1534+ E29C             >Latest_Definition defl  Heap_Ptr
1534+ E29C             >
1534+ E29C             >                // dummy db directives used to calculate length of namec
1534+ E29C 31 2D       >                db      "1-"
1534+ E29E             >len_NFA         defl    $ - temp_NFA
1534+ E29E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1534+ E29C             >
1534+ E29C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1534+ E29D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1534+ E29F             >                org     $-1                 // alter last byte of Name just above to set
1534+ E29E AD          >                db      {b $} | END_BIT     // msb as name end
1534+ E29F             >
1534+ E29F 95 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1534+ E2A1             >Prev_Ptr        defl    Heap_Ptr
1534+ E2A1             >
1534+ E2A1             >mirror_Ptr      defl    $
1534+ E2A1             >
1534+ E2A1 66 25       >                dw      Dict_Ptr + 2        // xt
1534+ E2A3             >Heap_Ptr        defl    $ - $E000           // save current HP
1534+ E2A3             >
1534+ E2A3             >Current_HP      defl  $ - $E000             // used to set HP once!
1534+ E2A3             >
1534+ E2A3             >//              ______________________________________________________________________
1534+ E2A3             >//              Dictionary part
1534+ E2A3             >
1534+ E2A3             >                org     Dict_Ptr
1534+ 2564             >
1534+ 2564 A1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1534+ 2566             >
1534+ 2566             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1534+ 2566 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1534+ 2566 ~           >
1534+ 2566 ~           >
1534+ 2566             >                endif           ; ok        // for other definitions it "points" the correct handler
1534+ 2566             >                // Use of "; ok" to suppress "warning[fwdref]"
1534+ 2566             >
1534+ 2566             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1535+ 2566 E1                           pop     hl
1536+ 2567 2B                           dec     hl
1537+ 2568
1538+ 2568                              psh1
1538+ 2568 E5          >                push    hl
1538+ 2569 DD E9       >                jp      (ix)
1539+ 256B
1540+ 256B              //  ______________________________________________________________________
1541+ 256B              //
1542+ 256B              // 2+           n1 -- n2
1543+ 256B              // increment by 2 top of stack
1544+ 256B                              New_Def TWO_PLUS, "2+", is_code, is_normal
1544+ 256B             >
1544+ 256B             >Dict_Ptr        defl    $
1544+ 256B             >
1544+ 256B             >//              ______________________________________________________________________
1544+ 256B             >//              Heap part
1544+ 256B             >
1544+ 256B             >
1544+ 256B             >                org     (Heap_Ptr & $1FFF) + $E000
1544+ E2A3             >
1544+ E2A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1544+ E2A3             >Latest_Definition defl  Heap_Ptr
1544+ E2A3             >
1544+ E2A3             >                // dummy db directives used to calculate length of namec
1544+ E2A3 32 2B       >                db      "2+"
1544+ E2A5             >len_NFA         defl    $ - temp_NFA
1544+ E2A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1544+ E2A3             >
1544+ E2A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1544+ E2A4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1544+ E2A6             >                org     $-1                 // alter last byte of Name just above to set
1544+ E2A5 AB          >                db      {b $} | END_BIT     // msb as name end
1544+ E2A6             >
1544+ E2A6 9C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1544+ E2A8             >Prev_Ptr        defl    Heap_Ptr
1544+ E2A8             >
1544+ E2A8             >mirror_Ptr      defl    $
1544+ E2A8             >
1544+ E2A8 6D 25       >                dw      Dict_Ptr + 2        // xt
1544+ E2AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1544+ E2AA             >
1544+ E2AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1544+ E2AA             >
1544+ E2AA             >//              ______________________________________________________________________
1544+ E2AA             >//              Dictionary part
1544+ E2AA             >
1544+ E2AA             >                org     Dict_Ptr
1544+ 256B             >
1544+ 256B A8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1544+ 256D             >
1544+ 256D             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1544+ 256D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1544+ 256D ~           >
1544+ 256D ~           >
1544+ 256D             >                endif           ; ok        // for other definitions it "points" the correct handler
1544+ 256D             >                // Use of "; ok" to suppress "warning[fwdref]"
1544+ 256D             >
1544+ 256D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1545+ 256D              Two_Plus:
1546+ 256D E1                           pop     hl
1547+ 256E 23                           inc     hl
1548+ 256F 23                           inc     hl
1549+ 2570
1550+ 2570                              psh1
1550+ 2570 E5          >                push    hl
1550+ 2571 DD E9       >                jp      (ix)
1551+ 2573
1552+ 2573              //  ______________________________________________________________________
1553+ 2573              //
1554+ 2573              // cell+        a1 -- a2
1555+ 2573              // increment by 2 top of stack
1556+ 2573                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1556+ 2573             >
1556+ 2573             >Dict_Ptr        defl    $
1556+ 2573             >
1556+ 2573             >//              ______________________________________________________________________
1556+ 2573             >//              Heap part
1556+ 2573             >
1556+ 2573             >
1556+ 2573             >                org     (Heap_Ptr & $1FFF) + $E000
1556+ E2AA             >
1556+ E2AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1556+ E2AA             >Latest_Definition defl  Heap_Ptr
1556+ E2AA             >
1556+ E2AA             >                // dummy db directives used to calculate length of namec
1556+ E2AA 43 45 4C 4C >                db      "CELL+"
1556+ E2AE 2B          >
1556+ E2AF             >len_NFA         defl    $ - temp_NFA
1556+ E2AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1556+ E2AA             >
1556+ E2AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1556+ E2AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1556+ E2AF 2B          >
1556+ E2B0             >                org     $-1                 // alter last byte of Name just above to set
1556+ E2AF AB          >                db      {b $} | END_BIT     // msb as name end
1556+ E2B0             >
1556+ E2B0 A3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1556+ E2B2             >Prev_Ptr        defl    Heap_Ptr
1556+ E2B2             >
1556+ E2B2             >mirror_Ptr      defl    $
1556+ E2B2             >
1556+ E2B2 75 25       >                dw      Dict_Ptr + 2        // xt
1556+ E2B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1556+ E2B4             >
1556+ E2B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1556+ E2B4             >
1556+ E2B4             >//              ______________________________________________________________________
1556+ E2B4             >//              Dictionary part
1556+ E2B4             >
1556+ E2B4             >                org     Dict_Ptr
1556+ 2573             >
1556+ 2573 B2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1556+ 2575             >
1556+ 2575             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1556+ 2575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1556+ 2575 ~           >
1556+ 2575 ~           >
1556+ 2575             >                endif           ; ok        // for other definitions it "points" the correct handler
1556+ 2575             >                // Use of "; ok" to suppress "warning[fwdref]"
1556+ 2575             >
1556+ 2575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1557+ 2575 18 F6                        jr      Two_Plus
1558+ 2577
1559+ 2577              //  ______________________________________________________________________
1560+ 2577              //
1561+ 2577              // align        a1 -- a2
1562+ 2577              // align memory : not used
1563+ 2577              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1564+ 2577              //            next
1565+ 2577
1566+ 2577              //  ______________________________________________________________________
1567+ 2577              //
1568+ 2577              // cell-        a1 -- a2
1569+ 2577              // decrement by 2 top of stack
1570+ 2577                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1570+ 2577             >
1570+ 2577             >Dict_Ptr        defl    $
1570+ 2577             >
1570+ 2577             >//              ______________________________________________________________________
1570+ 2577             >//              Heap part
1570+ 2577             >
1570+ 2577             >
1570+ 2577             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E2B4             >
1570+ E2B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E2B4             >Latest_Definition defl  Heap_Ptr
1570+ E2B4             >
1570+ E2B4             >                // dummy db directives used to calculate length of namec
1570+ E2B4 43 45 4C 4C >                db      "CELL-"
1570+ E2B8 2D          >
1570+ E2B9             >len_NFA         defl    $ - temp_NFA
1570+ E2B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E2B4             >
1570+ E2B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E2B5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1570+ E2B9 2D          >
1570+ E2BA             >                org     $-1                 // alter last byte of Name just above to set
1570+ E2B9 AD          >                db      {b $} | END_BIT     // msb as name end
1570+ E2BA             >
1570+ E2BA AA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2BC             >Prev_Ptr        defl    Heap_Ptr
1570+ E2BC             >
1570+ E2BC             >mirror_Ptr      defl    $
1570+ E2BC             >
1570+ E2BC 79 25       >                dw      Dict_Ptr + 2        // xt
1570+ E2BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2BE             >
1570+ E2BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2BE             >
1570+ E2BE             >//              ______________________________________________________________________
1570+ E2BE             >//              Dictionary part
1570+ E2BE             >
1570+ E2BE             >                org     Dict_Ptr
1570+ 2577             >
1570+ 2577 BC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 2579             >
1570+ 2579             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 2579 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 2579 ~           >
1570+ 2579 ~           >
1570+ 2579             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 2579             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 2579             >
1570+ 2579             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 2579              CellMinus:
1572+ 2579 E1                           pop     hl
1573+ 257A 2B                           dec     hl
1574+ 257B 2B                           dec     hl
1575+ 257C
1576+ 257C                              psh1
1576+ 257C E5          >                push    hl
1576+ 257D DD E9       >                jp      (ix)
1577+ 257F
1578+ 257F              //  ______________________________________________________________________
1579+ 257F              //
1580+ 257F              // 2-           a1 -- a2
1581+ 257F              // decrement by 2 top of stack
1582+ 257F                              New_Def TWO_MINUS, "2-", is_code, is_normal
1582+ 257F             >
1582+ 257F             >Dict_Ptr        defl    $
1582+ 257F             >
1582+ 257F             >//              ______________________________________________________________________
1582+ 257F             >//              Heap part
1582+ 257F             >
1582+ 257F             >
1582+ 257F             >                org     (Heap_Ptr & $1FFF) + $E000
1582+ E2BE             >
1582+ E2BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ E2BE             >Latest_Definition defl  Heap_Ptr
1582+ E2BE             >
1582+ E2BE             >                // dummy db directives used to calculate length of namec
1582+ E2BE 32 2D       >                db      "2-"
1582+ E2C0             >len_NFA         defl    $ - temp_NFA
1582+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ E2BE             >
1582+ E2BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ E2BF 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1582+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1582+ E2C0 AD          >                db      {b $} | END_BIT     // msb as name end
1582+ E2C1             >
1582+ E2C1 B4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1582+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1582+ E2C3             >
1582+ E2C3             >mirror_Ptr      defl    $
1582+ E2C3             >
1582+ E2C3 81 25       >                dw      Dict_Ptr + 2        // xt
1582+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1582+ E2C5             >
1582+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1582+ E2C5             >
1582+ E2C5             >//              ______________________________________________________________________
1582+ E2C5             >//              Dictionary part
1582+ E2C5             >
1582+ E2C5             >                org     Dict_Ptr
1582+ 257F             >
1582+ 257F C3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1582+ 2581             >
1582+ 2581             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 2581 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1582+ 2581 ~           >
1582+ 2581 ~           >
1582+ 2581             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 2581             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 2581             >
1582+ 2581             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 2581 C3 79 25                     jp      CellMinus
1584+ 2584
1585+ 2584              //  ______________________________________________________________________
1586+ 2584              //
1587+ 2584              // negate       n1 -- n2
1588+ 2584              // change the sign of number
1589+ 2584                              New_Def MINUS, "NEGATE", is_code, is_normal
1589+ 2584             >
1589+ 2584             >Dict_Ptr        defl    $
1589+ 2584             >
1589+ 2584             >//              ______________________________________________________________________
1589+ 2584             >//              Heap part
1589+ 2584             >
1589+ 2584             >
1589+ 2584             >                org     (Heap_Ptr & $1FFF) + $E000
1589+ E2C5             >
1589+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1589+ E2C5             >Latest_Definition defl  Heap_Ptr
1589+ E2C5             >
1589+ E2C5             >                // dummy db directives used to calculate length of namec
1589+ E2C5 4E 45 47 41 >                db      "NEGATE"
1589+ E2C9 54 45       >
1589+ E2CB             >len_NFA         defl    $ - temp_NFA
1589+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1589+ E2C5             >
1589+ E2C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1589+ E2C6 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1589+ E2CA 54 45       >
1589+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1589+ E2CB C5          >                db      {b $} | END_BIT     // msb as name end
1589+ E2CC             >
1589+ E2CC BE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1589+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1589+ E2CE             >
1589+ E2CE             >mirror_Ptr      defl    $
1589+ E2CE             >
1589+ E2CE 86 25       >                dw      Dict_Ptr + 2        // xt
1589+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1589+ E2D0             >
1589+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1589+ E2D0             >
1589+ E2D0             >//              ______________________________________________________________________
1589+ E2D0             >//              Dictionary part
1589+ E2D0             >
1589+ E2D0             >                org     Dict_Ptr
1589+ 2584             >
1589+ 2584 CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1589+ 2586             >
1589+ 2586             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1589+ 2586 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1589+ 2586 ~           >
1589+ 2586 ~           >
1589+ 2586             >                endif           ; ok        // for other definitions it "points" the correct handler
1589+ 2586             >                // Use of "; ok" to suppress "warning[fwdref]"
1589+ 2586             >
1589+ 2586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1590+ 2586 D9                           exx
1591+ 2587 D1                           pop     de
1592+ 2588 AF                           xor     a
1593+ 2589 67                           ld      h, a
1594+ 258A 6F                           ld      l, a
1595+ 258B ED 52                        sbc     hl, de
1596+ 258D E5                           push    hl
1597+ 258E D9                           exx
1598+ 258F                              next
1598+ 258F DD E9       >                jp      (ix)
1599+ 2591
1600+ 2591              //  ______________________________________________________________________
1601+ 2591              //
1602+ 2591              // dnegate      d1 -- d2
1603+ 2591              // change the sign of a double number
1604+ 2591                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1604+ 2591             >
1604+ 2591             >Dict_Ptr        defl    $
1604+ 2591             >
1604+ 2591             >//              ______________________________________________________________________
1604+ 2591             >//              Heap part
1604+ 2591             >
1604+ 2591             >
1604+ 2591             >                org     (Heap_Ptr & $1FFF) + $E000
1604+ E2D0             >
1604+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1604+ E2D0             >Latest_Definition defl  Heap_Ptr
1604+ E2D0             >
1604+ E2D0             >                // dummy db directives used to calculate length of namec
1604+ E2D0 44 4E 45 47 >                db      "DNEGATE"
1604+ E2D4 41 54 45    >
1604+ E2D7             >len_NFA         defl    $ - temp_NFA
1604+ E2D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1604+ E2D0             >
1604+ E2D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1604+ E2D1 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1604+ E2D5 41 54 45    >
1604+ E2D8             >                org     $-1                 // alter last byte of Name just above to set
1604+ E2D7 C5          >                db      {b $} | END_BIT     // msb as name end
1604+ E2D8             >
1604+ E2D8 C5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1604+ E2DA             >Prev_Ptr        defl    Heap_Ptr
1604+ E2DA             >
1604+ E2DA             >mirror_Ptr      defl    $
1604+ E2DA             >
1604+ E2DA 93 25       >                dw      Dict_Ptr + 2        // xt
1604+ E2DC             >Heap_Ptr        defl    $ - $E000           // save current HP
1604+ E2DC             >
1604+ E2DC             >Current_HP      defl  $ - $E000             // used to set HP once!
1604+ E2DC             >
1604+ E2DC             >//              ______________________________________________________________________
1604+ E2DC             >//              Dictionary part
1604+ E2DC             >
1604+ E2DC             >                org     Dict_Ptr
1604+ 2591             >
1604+ 2591 DA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1604+ 2593             >
1604+ 2593             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1604+ 2593 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1604+ 2593 ~           >
1604+ 2593 ~           >
1604+ 2593             >                endif           ; ok        // for other definitions it "points" the correct handler
1604+ 2593             >                // Use of "; ok" to suppress "warning[fwdref]"
1604+ 2593             >
1604+ 2593             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1605+ 2593 D9                           exx
1606+ 2594 C1                           pop     bc                  // d1.H
1607+ 2595 D1                           pop     de                  // d1.L
1608+ 2596 AF                           xor     a
1609+ 2597 67                           ld      h, a
1610+ 2598 6F                           ld      l, a
1611+ 2599 ED 52                        sbc     hl, de              // subtact from zero
1612+ 259B E5                           push    hl                  // > d2-L
1613+ 259C 67                           ld      h, a
1614+ 259D 6F                           ld      l, a
1615+ 259E ED 42                        sbc     hl, bc              // subtract from zero with carry
1616+ 25A0                                                          // > d2-H
1617+ 25A0 E5                           push    hl
1618+ 25A1 D9                           exx
1619+ 25A2                              next
1619+ 25A2 DD E9       >                jp      (ix)
1620+ 25A4
1621+ 25A4              //  ______________________________________________________________________
1622+ 25A4              //
1623+ 25A4              // over         n1 n2 -- n1 n2 n1
1624+ 25A4              // copy the second value of stack and put it on top.
1625+ 25A4                              New_Def OVER, "OVER", is_code, is_normal
1625+ 25A4             >
1625+ 25A4             >Dict_Ptr        defl    $
1625+ 25A4             >
1625+ 25A4             >//              ______________________________________________________________________
1625+ 25A4             >//              Heap part
1625+ 25A4             >
1625+ 25A4             >
1625+ 25A4             >                org     (Heap_Ptr & $1FFF) + $E000
1625+ E2DC             >
1625+ E2DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ E2DC             >Latest_Definition defl  Heap_Ptr
1625+ E2DC             >
1625+ E2DC             >                // dummy db directives used to calculate length of namec
1625+ E2DC 4F 56 45 52 >                db      "OVER"
1625+ E2E0             >len_NFA         defl    $ - temp_NFA
1625+ E2E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ E2DC             >
1625+ E2DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ E2DD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1625+ E2E1             >                org     $-1                 // alter last byte of Name just above to set
1625+ E2E0 D2          >                db      {b $} | END_BIT     // msb as name end
1625+ E2E1             >
1625+ E2E1 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1625+ E2E3             >Prev_Ptr        defl    Heap_Ptr
1625+ E2E3             >
1625+ E2E3             >mirror_Ptr      defl    $
1625+ E2E3             >
1625+ E2E3 A6 25       >                dw      Dict_Ptr + 2        // xt
1625+ E2E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1625+ E2E5             >
1625+ E2E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1625+ E2E5             >
1625+ E2E5             >//              ______________________________________________________________________
1625+ E2E5             >//              Dictionary part
1625+ E2E5             >
1625+ E2E5             >                org     Dict_Ptr
1625+ 25A4             >
1625+ 25A4 E3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1625+ 25A6             >
1625+ 25A6             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 25A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1625+ 25A6 ~           >
1625+ 25A6 ~           >
1625+ 25A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 25A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 25A6             >
1625+ 25A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 25A6                              // exx     // we can use af instead OPTIMIZATION possible
1627+ 25A6 F1                           pop     af                  //   n2
1628+ 25A7 E1                           pop     hl                  // < n1
1629+ 25A8 E5                           push    hl                  // > n1
1630+ 25A9 F5                           push    af                  // > n2
1631+ 25AA E5                           push    hl                  // > n1
1632+ 25AB                              // exx
1633+ 25AB                              next
1633+ 25AB DD E9       >                jp      (ix)
1634+ 25AD
1635+ 25AD              //  ______________________________________________________________________
1636+ 25AD              //
1637+ 25AD              // drop         n1 --
1638+ 25AD              // drops the top of stack
1639+ 25AD                              New_Def DROP, "DROP", is_code, is_normal
1639+ 25AD             >
1639+ 25AD             >Dict_Ptr        defl    $
1639+ 25AD             >
1639+ 25AD             >//              ______________________________________________________________________
1639+ 25AD             >//              Heap part
1639+ 25AD             >
1639+ 25AD             >
1639+ 25AD             >                org     (Heap_Ptr & $1FFF) + $E000
1639+ E2E5             >
1639+ E2E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1639+ E2E5             >Latest_Definition defl  Heap_Ptr
1639+ E2E5             >
1639+ E2E5             >                // dummy db directives used to calculate length of namec
1639+ E2E5 44 52 4F 50 >                db      "DROP"
1639+ E2E9             >len_NFA         defl    $ - temp_NFA
1639+ E2E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1639+ E2E5             >
1639+ E2E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1639+ E2E6 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1639+ E2EA             >                org     $-1                 // alter last byte of Name just above to set
1639+ E2E9 D0          >                db      {b $} | END_BIT     // msb as name end
1639+ E2EA             >
1639+ E2EA DC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1639+ E2EC             >Prev_Ptr        defl    Heap_Ptr
1639+ E2EC             >
1639+ E2EC             >mirror_Ptr      defl    $
1639+ E2EC             >
1639+ E2EC AF 25       >                dw      Dict_Ptr + 2        // xt
1639+ E2EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1639+ E2EE             >
1639+ E2EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1639+ E2EE             >
1639+ E2EE             >//              ______________________________________________________________________
1639+ E2EE             >//              Dictionary part
1639+ E2EE             >
1639+ E2EE             >                org     Dict_Ptr
1639+ 25AD             >
1639+ 25AD EC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1639+ 25AF             >
1639+ 25AF             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1639+ 25AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1639+ 25AF ~           >
1639+ 25AF ~           >
1639+ 25AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1639+ 25AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1639+ 25AF             >
1639+ 25AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1640+ 25AF E1                           pop     hl                  // < n1 and discard previous TOS
1641+ 25B0                              next
1641+ 25B0 DD E9       >                jp      (ix)
1642+ 25B2
1643+ 25B2              //  ______________________________________________________________________
1644+ 25B2              //
1645+ 25B2              // nip          n1 n2 -- n2
1646+ 25B2              // drops the second elemento on the stack
1647+ 25B2                              New_Def NIP, "NIP", is_code, is_normal
1647+ 25B2             >
1647+ 25B2             >Dict_Ptr        defl    $
1647+ 25B2             >
1647+ 25B2             >//              ______________________________________________________________________
1647+ 25B2             >//              Heap part
1647+ 25B2             >
1647+ 25B2             >
1647+ 25B2             >                org     (Heap_Ptr & $1FFF) + $E000
1647+ E2EE             >
1647+ E2EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1647+ E2EE             >Latest_Definition defl  Heap_Ptr
1647+ E2EE             >
1647+ E2EE             >                // dummy db directives used to calculate length of namec
1647+ E2EE 4E 49 50    >                db      "NIP"
1647+ E2F1             >len_NFA         defl    $ - temp_NFA
1647+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1647+ E2EE             >
1647+ E2EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1647+ E2EF 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1647+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1647+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1647+ E2F2             >
1647+ E2F2 E5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1647+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1647+ E2F4             >
1647+ E2F4             >mirror_Ptr      defl    $
1647+ E2F4             >
1647+ E2F4 B4 25       >                dw      Dict_Ptr + 2        // xt
1647+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1647+ E2F6             >
1647+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1647+ E2F6             >
1647+ E2F6             >//              ______________________________________________________________________
1647+ E2F6             >//              Dictionary part
1647+ E2F6             >
1647+ E2F6             >                org     Dict_Ptr
1647+ 25B2             >
1647+ 25B2 F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1647+ 25B4             >
1647+ 25B4             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1647+ 25B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1647+ 25B4 ~           >
1647+ 25B4 ~           >
1647+ 25B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1647+ 25B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1647+ 25B4             >
1647+ 25B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1648+ 25B4
1649+ 25B4 E1                           pop     hl                  // < n1 discarded
1650+ 25B5 E3                           ex      (sp), hl
1651+ 25B6                              next
1651+ 25B6 DD E9       >                jp      (ix)
1652+ 25B8
1653+ 25B8              //  ______________________________________________________________________
1654+ 25B8              //
1655+ 25B8              // tuck         n1 n2 -- n2 n1 n2
1656+ 25B8              // copy the top element after the second.
1657+ 25B8                              New_Def TUCK, "TUCK", is_code, is_normal
1657+ 25B8             >
1657+ 25B8             >Dict_Ptr        defl    $
1657+ 25B8             >
1657+ 25B8             >//              ______________________________________________________________________
1657+ 25B8             >//              Heap part
1657+ 25B8             >
1657+ 25B8             >
1657+ 25B8             >                org     (Heap_Ptr & $1FFF) + $E000
1657+ E2F6             >
1657+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ E2F6             >Latest_Definition defl  Heap_Ptr
1657+ E2F6             >
1657+ E2F6             >                // dummy db directives used to calculate length of namec
1657+ E2F6 54 55 43 4B >                db      "TUCK"
1657+ E2FA             >len_NFA         defl    $ - temp_NFA
1657+ E2FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ E2F6             >
1657+ E2F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ E2F7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1657+ E2FB             >                org     $-1                 // alter last byte of Name just above to set
1657+ E2FA CB          >                db      {b $} | END_BIT     // msb as name end
1657+ E2FB             >
1657+ E2FB EE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1657+ E2FD             >Prev_Ptr        defl    Heap_Ptr
1657+ E2FD             >
1657+ E2FD             >mirror_Ptr      defl    $
1657+ E2FD             >
1657+ E2FD BA 25       >                dw      Dict_Ptr + 2        // xt
1657+ E2FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1657+ E2FF             >
1657+ E2FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1657+ E2FF             >
1657+ E2FF             >//              ______________________________________________________________________
1657+ E2FF             >//              Dictionary part
1657+ E2FF             >
1657+ E2FF             >                org     Dict_Ptr
1657+ 25B8             >
1657+ 25B8 FD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1657+ 25BA             >
1657+ 25BA             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 25BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1657+ 25BA ~           >
1657+ 25BA ~           >
1657+ 25BA             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 25BA             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 25BA             >
1657+ 25BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 25BA E1                           pop     hl
1659+ 25BB F1                           pop     af                  // < n1
1660+ 25BC E5                           push    hl                  // > n2  and TOS
1661+ 25BD F5                           push    af                  // > n1
1662+ 25BE E5                           push    hl
1663+ 25BF                              next
1663+ 25BF DD E9       >                jp      (ix)
1664+ 25C1
1665+ 25C1              //  ______________________________________________________________________
1666+ 25C1              //
1667+ 25C1              // swap         n1 n2 -- n2 n1
1668+ 25C1              // swaps the two values on top of stack
1669+ 25C1                              New_Def SWAP, "SWAP", is_code, is_normal
1669+ 25C1             >
1669+ 25C1             >Dict_Ptr        defl    $
1669+ 25C1             >
1669+ 25C1             >//              ______________________________________________________________________
1669+ 25C1             >//              Heap part
1669+ 25C1             >
1669+ 25C1             >
1669+ 25C1             >                org     (Heap_Ptr & $1FFF) + $E000
1669+ E2FF             >
1669+ E2FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1669+ E2FF             >Latest_Definition defl  Heap_Ptr
1669+ E2FF             >
1669+ E2FF             >                // dummy db directives used to calculate length of namec
1669+ E2FF 53 57 41 50 >                db      "SWAP"
1669+ E303             >len_NFA         defl    $ - temp_NFA
1669+ E303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1669+ E2FF             >
1669+ E2FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1669+ E300 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1669+ E304             >                org     $-1                 // alter last byte of Name just above to set
1669+ E303 D0          >                db      {b $} | END_BIT     // msb as name end
1669+ E304             >
1669+ E304 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1669+ E306             >Prev_Ptr        defl    Heap_Ptr
1669+ E306             >
1669+ E306             >mirror_Ptr      defl    $
1669+ E306             >
1669+ E306 C3 25       >                dw      Dict_Ptr + 2        // xt
1669+ E308             >Heap_Ptr        defl    $ - $E000           // save current HP
1669+ E308             >
1669+ E308             >Current_HP      defl  $ - $E000             // used to set HP once!
1669+ E308             >
1669+ E308             >//              ______________________________________________________________________
1669+ E308             >//              Dictionary part
1669+ E308             >
1669+ E308             >                org     Dict_Ptr
1669+ 25C1             >
1669+ 25C1 06 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1669+ 25C3             >
1669+ 25C3             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1669+ 25C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1669+ 25C3 ~           >
1669+ 25C3 ~           >
1669+ 25C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1669+ 25C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1669+ 25C3             >
1669+ 25C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1670+ 25C3 E1                           pop     hl                  // < n1
1671+ 25C4 E3                           ex      (sp),hl             // > n2
1672+ 25C5 E5                           push    hl                  // copy n1 to TOS
1673+ 25C6                              next
1673+ 25C6 DD E9       >                jp      (ix)
1674+ 25C8
1675+ 25C8              //  ______________________________________________________________________
1676+ 25C8              //
1677+ 25C8              // dup         n -- n n
1678+ 25C8              // duplicates the top value of stack
1679+ 25C8                              New_Def DUP, "DUP", is_code, is_normal
1679+ 25C8             >
1679+ 25C8             >Dict_Ptr        defl    $
1679+ 25C8             >
1679+ 25C8             >//              ______________________________________________________________________
1679+ 25C8             >//              Heap part
1679+ 25C8             >
1679+ 25C8             >
1679+ 25C8             >                org     (Heap_Ptr & $1FFF) + $E000
1679+ E308             >
1679+ E308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ E308             >Latest_Definition defl  Heap_Ptr
1679+ E308             >
1679+ E308             >                // dummy db directives used to calculate length of namec
1679+ E308 44 55 50    >                db      "DUP"
1679+ E30B             >len_NFA         defl    $ - temp_NFA
1679+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ E308             >
1679+ E308 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ E309 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1679+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1679+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1679+ E30C             >
1679+ E30C FF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1679+ E30E             >Prev_Ptr        defl    Heap_Ptr
1679+ E30E             >
1679+ E30E             >mirror_Ptr      defl    $
1679+ E30E             >
1679+ E30E CA 25       >                dw      Dict_Ptr + 2        // xt
1679+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1679+ E310             >
1679+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1679+ E310             >
1679+ E310             >//              ______________________________________________________________________
1679+ E310             >//              Dictionary part
1679+ E310             >
1679+ E310             >                org     Dict_Ptr
1679+ 25C8             >
1679+ 25C8 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1679+ 25CA             >
1679+ 25CA             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 25CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1679+ 25CA ~           >
1679+ 25CA ~           >
1679+ 25CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 25CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 25CA             >
1679+ 25CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 25CA E1                           pop     hl
1681+ 25CB E5                           push    hl                  // > n duplicate TOS
1682+ 25CC E5                           push    hl
1683+ 25CD                              next
1683+ 25CD DD E9       >                jp      (ix)
1684+ 25CF
1685+ 25CF              //  ______________________________________________________________________
1686+ 25CF              //
1687+ 25CF              // rot         n1 n2 n3 -- n2 n3 n1
1688+ 25CF              // Rotates the 3 top values of stack by picking the 3rd in access-order
1689+ 25CF              // and putting it on top. The other two are shifted down one place.
1690+ 25CF                              New_Def ROT, "ROT", is_code, is_normal
1690+ 25CF             >
1690+ 25CF             >Dict_Ptr        defl    $
1690+ 25CF             >
1690+ 25CF             >//              ______________________________________________________________________
1690+ 25CF             >//              Heap part
1690+ 25CF             >
1690+ 25CF             >
1690+ 25CF             >                org     (Heap_Ptr & $1FFF) + $E000
1690+ E310             >
1690+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1690+ E310             >Latest_Definition defl  Heap_Ptr
1690+ E310             >
1690+ E310             >                // dummy db directives used to calculate length of namec
1690+ E310 52 4F 54    >                db      "ROT"
1690+ E313             >len_NFA         defl    $ - temp_NFA
1690+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1690+ E310             >
1690+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1690+ E311 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1690+ E314             >                org     $-1                 // alter last byte of Name just above to set
1690+ E313 D4          >                db      {b $} | END_BIT     // msb as name end
1690+ E314             >
1690+ E314 08 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1690+ E316             >Prev_Ptr        defl    Heap_Ptr
1690+ E316             >
1690+ E316             >mirror_Ptr      defl    $
1690+ E316             >
1690+ E316 D1 25       >                dw      Dict_Ptr + 2        // xt
1690+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1690+ E318             >
1690+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1690+ E318             >
1690+ E318             >//              ______________________________________________________________________
1690+ E318             >//              Dictionary part
1690+ E318             >
1690+ E318             >                org     Dict_Ptr
1690+ 25CF             >
1690+ 25CF 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1690+ 25D1             >
1690+ 25D1             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1690+ 25D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1690+ 25D1 ~           >
1690+ 25D1 ~           >
1690+ 25D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1690+ 25D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1690+ 25D1             >
1690+ 25D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1691+ 25D1                          //  exx
1692+ 25D1 F1                           pop     af                  // < n3
1693+ 25D2 E1                           pop     hl                  // < n2
1694+ 25D3 E3                           ex      (sp),hl             // > n2 < n1
1695+ 25D4 F5                           push    af                  // > n3
1696+ 25D5 E5                           push    hl                  // copy n1 to TOS
1697+ 25D6                          //  exx
1698+ 25D6                              next
1698+ 25D6 DD E9       >                jp      (ix)
1699+ 25D8
1700+ 25D8              //  ______________________________________________________________________
1701+ 25D8              //
1702+ 25D8              // -rot         n1 n2 n3 -- n3 n1 n2
1703+ 25D8              // Rotates the 3 top values of stack by picking the 1st in access-order
1704+ 25D8              // and putting back to 3rd place. The other two are shifted down one place.
1705+ 25D8                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1705+ 25D8             >
1705+ 25D8             >Dict_Ptr        defl    $
1705+ 25D8             >
1705+ 25D8             >//              ______________________________________________________________________
1705+ 25D8             >//              Heap part
1705+ 25D8             >
1705+ 25D8             >
1705+ 25D8             >                org     (Heap_Ptr & $1FFF) + $E000
1705+ E318             >
1705+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1705+ E318             >Latest_Definition defl  Heap_Ptr
1705+ E318             >
1705+ E318             >                // dummy db directives used to calculate length of namec
1705+ E318 2D 52 4F 54 >                db      "-ROT"
1705+ E31C             >len_NFA         defl    $ - temp_NFA
1705+ E31C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1705+ E318             >
1705+ E318 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1705+ E319 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1705+ E31D             >                org     $-1                 // alter last byte of Name just above to set
1705+ E31C D4          >                db      {b $} | END_BIT     // msb as name end
1705+ E31D             >
1705+ E31D 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1705+ E31F             >Prev_Ptr        defl    Heap_Ptr
1705+ E31F             >
1705+ E31F             >mirror_Ptr      defl    $
1705+ E31F             >
1705+ E31F DA 25       >                dw      Dict_Ptr + 2        // xt
1705+ E321             >Heap_Ptr        defl    $ - $E000           // save current HP
1705+ E321             >
1705+ E321             >Current_HP      defl  $ - $E000             // used to set HP once!
1705+ E321             >
1705+ E321             >//              ______________________________________________________________________
1705+ E321             >//              Dictionary part
1705+ E321             >
1705+ E321             >                org     Dict_Ptr
1705+ 25D8             >
1705+ 25D8 1F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1705+ 25DA             >
1705+ 25DA             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1705+ 25DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1705+ 25DA ~           >
1705+ 25DA ~           >
1705+ 25DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1705+ 25DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1705+ 25DA             >
1705+ 25DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1706+ 25DA                          //  exx
1707+ 25DA E1                           pop     hl                  // < n3
1708+ 25DB F1                           pop     af                  // < n2
1709+ 25DC E3                           ex      (sp),hl             // > n3 < n1
1710+ 25DD E5                           push    hl                  // > n1
1711+ 25DE F5                           push    af                  // copy n3 to TOS
1712+ 25DF                          //  exx
1713+ 25DF                              next
1713+ 25DF DD E9       >                jp      (ix)
1714+ 25E1
1715+ 25E1              //  ______________________________________________________________________
1716+ 25E1              //
1717+ 25E1              // pick        n1 -- nx
1718+ 25E1              // picks the nth element from TOS
1719+ 25E1                              New_Def PICK, "PICK", is_code, is_normal
1719+ 25E1             >
1719+ 25E1             >Dict_Ptr        defl    $
1719+ 25E1             >
1719+ 25E1             >//              ______________________________________________________________________
1719+ 25E1             >//              Heap part
1719+ 25E1             >
1719+ 25E1             >
1719+ 25E1             >                org     (Heap_Ptr & $1FFF) + $E000
1719+ E321             >
1719+ E321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1719+ E321             >Latest_Definition defl  Heap_Ptr
1719+ E321             >
1719+ E321             >                // dummy db directives used to calculate length of namec
1719+ E321 50 49 43 4B >                db      "PICK"
1719+ E325             >len_NFA         defl    $ - temp_NFA
1719+ E325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1719+ E321             >
1719+ E321 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1719+ E322 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1719+ E326             >                org     $-1                 // alter last byte of Name just above to set
1719+ E325 CB          >                db      {b $} | END_BIT     // msb as name end
1719+ E326             >
1719+ E326 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1719+ E328             >Prev_Ptr        defl    Heap_Ptr
1719+ E328             >
1719+ E328             >mirror_Ptr      defl    $
1719+ E328             >
1719+ E328 E3 25       >                dw      Dict_Ptr + 2        // xt
1719+ E32A             >Heap_Ptr        defl    $ - $E000           // save current HP
1719+ E32A             >
1719+ E32A             >Current_HP      defl  $ - $E000             // used to set HP once!
1719+ E32A             >
1719+ E32A             >//              ______________________________________________________________________
1719+ E32A             >//              Dictionary part
1719+ E32A             >
1719+ E32A             >                org     Dict_Ptr
1719+ 25E1             >
1719+ 25E1 28 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1719+ 25E3             >
1719+ 25E3             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1719+ 25E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1719+ 25E3 ~           >
1719+ 25E3 ~           >
1719+ 25E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1719+ 25E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1719+ 25E3             >
1719+ 25E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1720+ 25E3 E1                           pop     hl                  // take TOS as index
1721+ 25E4 29                           add     hl, hl              // as cells
1722+ 25E5 39                           add     hl, sp              // from Stack Pointer
1723+ 25E6 7E                           ld      a, (hl)             // replace TOS
1724+ 25E7 23                           inc     hl
1725+ 25E8 66                           ld      h, (hl)
1726+ 25E9 6F                           ld      l, a
1727+ 25EA E5                           push    hl
1728+ 25EB                              next
1728+ 25EB DD E9       >                jp      (ix)
1729+ 25ED
1730+ 25ED
1731+ 25ED              //  ______________________________________________________________________
1732+ 25ED              //
1733+ 25ED              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1734+ 25ED              // picks the nth element from TOS
1735+ 25ED              //              New_Def ROLL, "ROLL", is_code, is_normal
1736+ 25ED              //              exx                     // we need all registers free
1737+ 25ED              //              pop     hl              // number of cells to roll
1738+ 25ED              //              ld      a, h
1739+ 25ED              //              or       l
1740+ 25ED              //              jr      z, Roll_Zero
1741+ 25ED              //                  add     hl, hl              // number of bytes to move
1742+ 25ED              //                  ld      b, h
1743+ 25ED              //                  ld      c, l
1744+ 25ED              //                  add     hl, sp          // address of n1
1745+ 25ED              //                  ld      a, (hl)         // take n1 into a and a,
1746+ 25ED              //                  inc     hl
1747+ 25ED              //                  ex      af, af'
1748+ 25ED              //                  ld      a, (hl)         // take n1 into a and a,
1749+ 25ED              //                  ld      d, h
1750+ 25ED              //                  ld      e, l
1751+ 25ED              //                  dec     hl
1752+ 25ED              //                  dec     hl
1753+ 25ED              //                  lddr
1754+ 25ED              //                  ex      de, hl
1755+ 25ED              //                  ld      (hl), a
1756+ 25ED              //                  dec     hl
1757+ 25ED              //                  ex      af, af'
1758+ 25ED              //                  ld      (hl), a
1759+ 25ED              //Roll_Zero:
1760+ 25ED              //              exx
1761+ 25ED              //              next
1762+ 25ED
1763+ 25ED
1764+ 25ED              //  ______________________________________________________________________
1765+ 25ED              //
1766+ 25ED              // 2over        d1 d2 -- d1 d2 d1
1767+ 25ED              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1768+ 25ED              // copy the second double of stack and put on top.
1769+ 25ED                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1769+ 25ED             >
1769+ 25ED             >Dict_Ptr        defl    $
1769+ 25ED             >
1769+ 25ED             >//              ______________________________________________________________________
1769+ 25ED             >//              Heap part
1769+ 25ED             >
1769+ 25ED             >
1769+ 25ED             >                org     (Heap_Ptr & $1FFF) + $E000
1769+ E32A             >
1769+ E32A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1769+ E32A             >Latest_Definition defl  Heap_Ptr
1769+ E32A             >
1769+ E32A             >                // dummy db directives used to calculate length of namec
1769+ E32A 32 4F 56 45 >                db      "2OVER"
1769+ E32E 52          >
1769+ E32F             >len_NFA         defl    $ - temp_NFA
1769+ E32F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1769+ E32A             >
1769+ E32A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1769+ E32B 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1769+ E32F 52          >
1769+ E330             >                org     $-1                 // alter last byte of Name just above to set
1769+ E32F D2          >                db      {b $} | END_BIT     // msb as name end
1769+ E330             >
1769+ E330 21 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1769+ E332             >Prev_Ptr        defl    Heap_Ptr
1769+ E332             >
1769+ E332             >mirror_Ptr      defl    $
1769+ E332             >
1769+ E332 EF 25       >                dw      Dict_Ptr + 2        // xt
1769+ E334             >Heap_Ptr        defl    $ - $E000           // save current HP
1769+ E334             >
1769+ E334             >Current_HP      defl  $ - $E000             // used to set HP once!
1769+ E334             >
1769+ E334             >//              ______________________________________________________________________
1769+ E334             >//              Dictionary part
1769+ E334             >
1769+ E334             >                org     Dict_Ptr
1769+ 25ED             >
1769+ 25ED 32 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1769+ 25EF             >
1769+ 25EF             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1769+ 25EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1769+ 25EF ~           >
1769+ 25EF ~           >
1769+ 25EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1769+ 25EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1769+ 25EF             >
1769+ 25EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1770+ 25EF D9                           exx
1771+ 25F0 E1                           pop     hl      // 10
1772+ 25F1 D1                           pop     de      // 10
1773+ 25F2 C1                           pop     bc      // 10
1774+ 25F3 F1                           pop     af      // 10
1775+ 25F4 F5                           push    af      // 11
1776+ 25F5 C5                           push    bc      // 11
1777+ 25F6 D5                           push    de      // 11
1778+ 25F7 E5                           push    hl      // 11
1779+ 25F8 F5                           push    af      // 11
1780+ 25F9 C5                           push    bc      // 11
1781+ 25FA D9                           exx
1782+ 25FB                              next
1782+ 25FB DD E9       >                jp      (ix)
1783+ 25FD
1784+ 25FD              //  ______________________________________________________________________
1785+ 25FD              //
1786+ 25FD              // 2drop        d --
1787+ 25FD              //              n1 n2 --
1788+ 25FD              // drops the top double from stack
1789+ 25FD                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1789+ 25FD             >
1789+ 25FD             >Dict_Ptr        defl    $
1789+ 25FD             >
1789+ 25FD             >//              ______________________________________________________________________
1789+ 25FD             >//              Heap part
1789+ 25FD             >
1789+ 25FD             >
1789+ 25FD             >                org     (Heap_Ptr & $1FFF) + $E000
1789+ E334             >
1789+ E334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1789+ E334             >Latest_Definition defl  Heap_Ptr
1789+ E334             >
1789+ E334             >                // dummy db directives used to calculate length of namec
1789+ E334 32 44 52 4F >                db      "2DROP"
1789+ E338 50          >
1789+ E339             >len_NFA         defl    $ - temp_NFA
1789+ E339             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1789+ E334             >
1789+ E334 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1789+ E335 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1789+ E339 50          >
1789+ E33A             >                org     $-1                 // alter last byte of Name just above to set
1789+ E339 D0          >                db      {b $} | END_BIT     // msb as name end
1789+ E33A             >
1789+ E33A 2A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1789+ E33C             >Prev_Ptr        defl    Heap_Ptr
1789+ E33C             >
1789+ E33C             >mirror_Ptr      defl    $
1789+ E33C             >
1789+ E33C FF 25       >                dw      Dict_Ptr + 2        // xt
1789+ E33E             >Heap_Ptr        defl    $ - $E000           // save current HP
1789+ E33E             >
1789+ E33E             >Current_HP      defl  $ - $E000             // used to set HP once!
1789+ E33E             >
1789+ E33E             >//              ______________________________________________________________________
1789+ E33E             >//              Dictionary part
1789+ E33E             >
1789+ E33E             >                org     Dict_Ptr
1789+ 25FD             >
1789+ 25FD 3C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1789+ 25FF             >
1789+ 25FF             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1789+ 25FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1789+ 25FF ~           >
1789+ 25FF ~           >
1789+ 25FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1789+ 25FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1789+ 25FF             >
1789+ 25FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1790+ 25FF E1                           pop     hl
1791+ 2600 E1                           pop     hl
1792+ 2601                              next
1792+ 2601 DD E9       >                jp      (ix)
1793+ 2603
1794+ 2603              //  ______________________________________________________________________
1795+ 2603              //
1796+ 2603              // 2nip         d1 d2 -- d2
1797+ 2603              //              n1 n2 n3 n4 -- n3 n4
1798+ 2603              // drops the second double on the stack
1799+ 2603              //              New_Def TWO_NIP, 4, "2nip"
1800+ 2603              //              ...
1801+ 2603
1802+ 2603              //  ______________________________________________________________________
1803+ 2603              //
1804+ 2603              // 2tuck         d1 d2 -- d2 d1 d2
1805+ 2603              // copy the top element after the second.
1806+ 2603              //              New_Def TWO_TUCK, 5, "2tuck"
1807+ 2603              //              ...
1808+ 2603
1809+ 2603              //  ______________________________________________________________________
1810+ 2603              //
1811+ 2603              // 2swap         d1 d2 -- d2 d1
1812+ 2603              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1813+ 2603              // swaps the two doubles on top of stack
1814+ 2603                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1814+ 2603             >
1814+ 2603             >Dict_Ptr        defl    $
1814+ 2603             >
1814+ 2603             >//              ______________________________________________________________________
1814+ 2603             >//              Heap part
1814+ 2603             >
1814+ 2603             >
1814+ 2603             >                org     (Heap_Ptr & $1FFF) + $E000
1814+ E33E             >
1814+ E33E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1814+ E33E             >Latest_Definition defl  Heap_Ptr
1814+ E33E             >
1814+ E33E             >                // dummy db directives used to calculate length of namec
1814+ E33E 32 53 57 41 >                db      "2SWAP"
1814+ E342 50          >
1814+ E343             >len_NFA         defl    $ - temp_NFA
1814+ E343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1814+ E33E             >
1814+ E33E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1814+ E33F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1814+ E343 50          >
1814+ E344             >                org     $-1                 // alter last byte of Name just above to set
1814+ E343 D0          >                db      {b $} | END_BIT     // msb as name end
1814+ E344             >
1814+ E344 34 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1814+ E346             >Prev_Ptr        defl    Heap_Ptr
1814+ E346             >
1814+ E346             >mirror_Ptr      defl    $
1814+ E346             >
1814+ E346 05 26       >                dw      Dict_Ptr + 2        // xt
1814+ E348             >Heap_Ptr        defl    $ - $E000           // save current HP
1814+ E348             >
1814+ E348             >Current_HP      defl  $ - $E000             // used to set HP once!
1814+ E348             >
1814+ E348             >//              ______________________________________________________________________
1814+ E348             >//              Dictionary part
1814+ E348             >
1814+ E348             >                org     Dict_Ptr
1814+ 2603             >
1814+ 2603 46 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1814+ 2605             >
1814+ 2605             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1814+ 2605 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1814+ 2605 ~           >
1814+ 2605 ~           >
1814+ 2605             >                endif           ; ok        // for other definitions it "points" the correct handler
1814+ 2605             >                // Use of "; ok" to suppress "warning[fwdref]"
1814+ 2605             >
1814+ 2605             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1815+ 2605 D9                           exx
1816+ 2606 F1                           pop     af                  //   d2-H
1817+ 2607 E1                           pop     hl                  // < d2-L
1818+ 2608 D1                           pop     de                  // < d1-H
1819+ 2609 E3                           ex      (sp), hl            // < d1-L > d2-L
1820+ 260A F5                           push    af                  // > d2-H
1821+ 260B E5                           push    hl                  // > d1-L
1822+ 260C D5                           push    de
1823+ 260D D9                           exx
1824+ 260E                              next
1824+ 260E DD E9       >                jp      (ix)
1825+ 2610
1826+ 2610              //  ______________________________________________________________________
1827+ 2610              //
1828+ 2610              // 2dup         d -- d d
1829+ 2610              //              n1 n2 -- n1 n2 n1 n2
1830+ 2610              // duplicates the top double of stack
1831+ 2610                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1831+ 2610             >
1831+ 2610             >Dict_Ptr        defl    $
1831+ 2610             >
1831+ 2610             >//              ______________________________________________________________________
1831+ 2610             >//              Heap part
1831+ 2610             >
1831+ 2610             >
1831+ 2610             >                org     (Heap_Ptr & $1FFF) + $E000
1831+ E348             >
1831+ E348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ E348             >Latest_Definition defl  Heap_Ptr
1831+ E348             >
1831+ E348             >                // dummy db directives used to calculate length of namec
1831+ E348 32 44 55 50 >                db      "2DUP"
1831+ E34C             >len_NFA         defl    $ - temp_NFA
1831+ E34C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ E348             >
1831+ E348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ E349 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1831+ E34D             >                org     $-1                 // alter last byte of Name just above to set
1831+ E34C D0          >                db      {b $} | END_BIT     // msb as name end
1831+ E34D             >
1831+ E34D 3E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1831+ E34F             >Prev_Ptr        defl    Heap_Ptr
1831+ E34F             >
1831+ E34F             >mirror_Ptr      defl    $
1831+ E34F             >
1831+ E34F 12 26       >                dw      Dict_Ptr + 2        // xt
1831+ E351             >Heap_Ptr        defl    $ - $E000           // save current HP
1831+ E351             >
1831+ E351             >Current_HP      defl  $ - $E000             // used to set HP once!
1831+ E351             >
1831+ E351             >//              ______________________________________________________________________
1831+ E351             >//              Dictionary part
1831+ E351             >
1831+ E351             >                org     Dict_Ptr
1831+ 2610             >
1831+ 2610 4F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1831+ 2612             >
1831+ 2612             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 2612 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1831+ 2612 ~           >
1831+ 2612 ~           >
1831+ 2612             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 2612             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 2612             >
1831+ 2612             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 2612 E1                           pop     hl                  // < d-H
1833+ 2613 F1                           pop     af                  // < d-L
1834+ 2614 F5                           push    af                  // < d-L
1835+ 2615 E5                           push    hl                  // > d-H
1836+ 2616 F5                           push    af                  // > d-L
1837+ 2617 E5                           push    hl                  // > d-H
1838+ 2618                              next
1838+ 2618 DD E9       >                jp      (ix)
1839+ 261A
1840+ 261A              //  ______________________________________________________________________
1841+ 261A              //
1842+ 261A              // 2rot         d1 d2 d3 -- d2 d3 d1
1843+ 261A              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1844+ 261A              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1845+ 261A              // and putting it on top. The other two are shifted down one place.
1846+ 261A              //              New_Def TWO?ROT, 4, "2rot"
1847+ 261A              //              ...
1848+ 261A              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1849+ 261A              //
1850+ 261A              //      d3  |d2  |d1  |
1851+ 261A              //      h l |h l |h l |
1852+ 261A              // SP   LHED|LHED|LHED|
1853+ 261A              // SP  +0123|4567|89ab|
1854+ 261A              //              ld      hl, $000B
1855+ 261A              //              add     hl, sp
1856+ 261A              //              ld      d, (hl)
1857+ 261A              //              dec     hl
1858+ 261A              //              ld      e, (hl)
1859+ 261A              //              dec     hl
1860+ 261A              //              push    de
1861+ 261A              //              ld      d, (hl)
1862+ 261A              //              dec     hl
1863+ 261A              //              ld      e, (hl)
1864+ 261A              //              dec     hl
1865+ 261A              //              push    de
1866+ 261A
1867+ 261A              //      d1  |d3  |d2  |d1  |
1868+ 261A              //      h l |h l |h l |h l |
1869+ 261A              // SP   LHED|LHED|LHED|LHED|
1870+ 261A              // SP       +0123|4567|89ab|
1871+ 261A
1872+ 261A              //              ld      d, h
1873+ 261A              //              ld      e, l
1874+ 261A              //              inc     de
1875+ 261A              //              inc     de
1876+ 261A              //              inc     de
1877+ 261A              //              inc     de
1878+ 261A              //              push    bc
1879+ 261A              //              ld      bc, $000C
1880+ 261A              //              lddr
1881+ 261A              //              pop     bc
1882+ 261A              //              pop     de
1883+ 261A              //              pop     de
1884+ 261A              //
1885+ 261A              //              next
1886+ 261A
1887+ 261A
1888+ 261A              //  ______________________________________________________________________
1889+ 261A              //
1890+ 261A              // +!           n a --
1891+ 261A              // Sums to the content of address a the number n.
1892+ 261A              // It is the same of  a @ n + a !
1893+ 261A                              New_Def PLUSSTORE, "+!", is_code, is_normal
1893+ 261A             >
1893+ 261A             >Dict_Ptr        defl    $
1893+ 261A             >
1893+ 261A             >//              ______________________________________________________________________
1893+ 261A             >//              Heap part
1893+ 261A             >
1893+ 261A             >
1893+ 261A             >                org     (Heap_Ptr & $1FFF) + $E000
1893+ E351             >
1893+ E351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1893+ E351             >Latest_Definition defl  Heap_Ptr
1893+ E351             >
1893+ E351             >                // dummy db directives used to calculate length of namec
1893+ E351 2B 21       >                db      "+!"
1893+ E353             >len_NFA         defl    $ - temp_NFA
1893+ E353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1893+ E351             >
1893+ E351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1893+ E352 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1893+ E354             >                org     $-1                 // alter last byte of Name just above to set
1893+ E353 A1          >                db      {b $} | END_BIT     // msb as name end
1893+ E354             >
1893+ E354 48 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1893+ E356             >Prev_Ptr        defl    Heap_Ptr
1893+ E356             >
1893+ E356             >mirror_Ptr      defl    $
1893+ E356             >
1893+ E356 1C 26       >                dw      Dict_Ptr + 2        // xt
1893+ E358             >Heap_Ptr        defl    $ - $E000           // save current HP
1893+ E358             >
1893+ E358             >Current_HP      defl  $ - $E000             // used to set HP once!
1893+ E358             >
1893+ E358             >//              ______________________________________________________________________
1893+ E358             >//              Dictionary part
1893+ E358             >
1893+ E358             >                org     Dict_Ptr
1893+ 261A             >
1893+ 261A 56 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1893+ 261C             >
1893+ 261C             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1893+ 261C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1893+ 261C ~           >
1893+ 261C ~           >
1893+ 261C             >                endif           ; ok        // for other definitions it "points" the correct handler
1893+ 261C             >                // Use of "; ok" to suppress "warning[fwdref]"
1893+ 261C             >
1893+ 261C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1894+ 261C D9                           exx
1895+ 261D E1                           pop     hl                  // hl is the address
1896+ 261E D1                           pop     de                  // de is the number
1897+ 261F 7E                           ld      a, (hl)
1898+ 2620 83                           add     e
1899+ 2621 77                           ld      (hl), a
1900+ 2622 23                           inc     hl
1901+ 2623 7E                           ld      a, (hl)
1902+ 2624 8A                           adc     d
1903+ 2625 77                           ld      (hl), a
1904+ 2626 D9                           exx
1905+ 2627                              next
1905+ 2627 DD E9       >                jp      (ix)
1906+ 2629
1907+ 2629              //  ______________________________________________________________________
1908+ 2629              //
1909+ 2629              // toggle       a n --
1910+ 2629              // Complements (xor) the byte at addrress  a  with the model n.
1911+ 2629                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1911+ 2629             >
1911+ 2629             >Dict_Ptr        defl    $
1911+ 2629             >
1911+ 2629             >//              ______________________________________________________________________
1911+ 2629             >//              Heap part
1911+ 2629             >
1911+ 2629             >
1911+ 2629             >                org     (Heap_Ptr & $1FFF) + $E000
1911+ E358             >
1911+ E358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1911+ E358             >Latest_Definition defl  Heap_Ptr
1911+ E358             >
1911+ E358             >                // dummy db directives used to calculate length of namec
1911+ E358 54 4F 47 47 >                db      "TOGGLE"
1911+ E35C 4C 45       >
1911+ E35E             >len_NFA         defl    $ - temp_NFA
1911+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1911+ E358             >
1911+ E358 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1911+ E359 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1911+ E35D 4C 45       >
1911+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1911+ E35E C5          >                db      {b $} | END_BIT     // msb as name end
1911+ E35F             >
1911+ E35F 51 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1911+ E361             >Prev_Ptr        defl    Heap_Ptr
1911+ E361             >
1911+ E361             >mirror_Ptr      defl    $
1911+ E361             >
1911+ E361 2B 26       >                dw      Dict_Ptr + 2        // xt
1911+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1911+ E363             >
1911+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1911+ E363             >
1911+ E363             >//              ______________________________________________________________________
1911+ E363             >//              Dictionary part
1911+ E363             >
1911+ E363             >                org     Dict_Ptr
1911+ 2629             >
1911+ 2629 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1911+ 262B             >
1911+ 262B             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1911+ 262B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1911+ 262B ~           >
1911+ 262B ~           >
1911+ 262B             >                endif           ; ok        // for other definitions it "points" the correct handler
1911+ 262B             >                // Use of "; ok" to suppress "warning[fwdref]"
1911+ 262B             >
1911+ 262B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1912+ 262B E1                           pop     hl
1913+ 262C 7D                           ld      a, l
1914+ 262D E1                           pop     hl
1915+ 262E AE                           xor     (hl)
1916+ 262F 77                           ld      (hl), a
1917+ 2630
1918+ 2630                              next
1918+ 2630 DD E9       >                jp      (ix)
1919+ 2632
1920+ 2632              //  ______________________________________________________________________
1921+ 2632              //
1922+ 2632              // @            a -- n
1923+ 2632              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1924+ 2632                              New_Def FETCH, "@", is_code, is_normal
1924+ 2632             >
1924+ 2632             >Dict_Ptr        defl    $
1924+ 2632             >
1924+ 2632             >//              ______________________________________________________________________
1924+ 2632             >//              Heap part
1924+ 2632             >
1924+ 2632             >
1924+ 2632             >                org     (Heap_Ptr & $1FFF) + $E000
1924+ E363             >
1924+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1924+ E363             >Latest_Definition defl  Heap_Ptr
1924+ E363             >
1924+ E363             >                // dummy db directives used to calculate length of namec
1924+ E363 40          >                db      "@"
1924+ E364             >len_NFA         defl    $ - temp_NFA
1924+ E364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1924+ E363             >
1924+ E363 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1924+ E364 40          >                db      "@"               // name string in 7-bit ascii, but
1924+ E365             >                org     $-1                 // alter last byte of Name just above to set
1924+ E364 C0          >                db      {b $} | END_BIT     // msb as name end
1924+ E365             >
1924+ E365 58 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1924+ E367             >Prev_Ptr        defl    Heap_Ptr
1924+ E367             >
1924+ E367             >mirror_Ptr      defl    $
1924+ E367             >
1924+ E367 34 26       >                dw      Dict_Ptr + 2        // xt
1924+ E369             >Heap_Ptr        defl    $ - $E000           // save current HP
1924+ E369             >
1924+ E369             >Current_HP      defl  $ - $E000             // used to set HP once!
1924+ E369             >
1924+ E369             >//              ______________________________________________________________________
1924+ E369             >//              Dictionary part
1924+ E369             >
1924+ E369             >                org     Dict_Ptr
1924+ 2632             >
1924+ 2632 67 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1924+ 2634             >
1924+ 2634             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1924+ 2634 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1924+ 2634 ~           >
1924+ 2634 ~           >
1924+ 2634             >                endif           ; ok        // for other definitions it "points" the correct handler
1924+ 2634             >                // Use of "; ok" to suppress "warning[fwdref]"
1924+ 2634             >
1924+ 2634             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1925+ 2634 E1                           pop     hl
1926+ 2635 7E                           ld      a, (hl)             // low-byte
1927+ 2636 23                           inc     hl
1928+ 2637 66                           ld      h, (hl)             // high-byte
1929+ 2638 6F                           ld      l, a
1930+ 2639 E5                           push    hl
1931+ 263A                              next
1931+ 263A DD E9       >                jp      (ix)
1932+ 263C
1933+ 263C              //  ______________________________________________________________________
1934+ 263C              //
1935+ 263C              // !            n a --
1936+ 263C              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1937+ 263C                              New_Def STORE, "!", is_code, is_normal
1937+ 263C             >
1937+ 263C             >Dict_Ptr        defl    $
1937+ 263C             >
1937+ 263C             >//              ______________________________________________________________________
1937+ 263C             >//              Heap part
1937+ 263C             >
1937+ 263C             >
1937+ 263C             >                org     (Heap_Ptr & $1FFF) + $E000
1937+ E369             >
1937+ E369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1937+ E369             >Latest_Definition defl  Heap_Ptr
1937+ E369             >
1937+ E369             >                // dummy db directives used to calculate length of namec
1937+ E369 21          >                db      "!"
1937+ E36A             >len_NFA         defl    $ - temp_NFA
1937+ E36A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1937+ E369             >
1937+ E369 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1937+ E36A 21          >                db      "!"               // name string in 7-bit ascii, but
1937+ E36B             >                org     $-1                 // alter last byte of Name just above to set
1937+ E36A A1          >                db      {b $} | END_BIT     // msb as name end
1937+ E36B             >
1937+ E36B 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1937+ E36D             >Prev_Ptr        defl    Heap_Ptr
1937+ E36D             >
1937+ E36D             >mirror_Ptr      defl    $
1937+ E36D             >
1937+ E36D 3E 26       >                dw      Dict_Ptr + 2        // xt
1937+ E36F             >Heap_Ptr        defl    $ - $E000           // save current HP
1937+ E36F             >
1937+ E36F             >Current_HP      defl  $ - $E000             // used to set HP once!
1937+ E36F             >
1937+ E36F             >//              ______________________________________________________________________
1937+ E36F             >//              Dictionary part
1937+ E36F             >
1937+ E36F             >                org     Dict_Ptr
1937+ 263C             >
1937+ 263C 6D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1937+ 263E             >
1937+ 263E             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1937+ 263E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1937+ 263E ~           >
1937+ 263E ~           >
1937+ 263E             >                endif           ; ok        // for other definitions it "points" the correct handler
1937+ 263E             >                // Use of "; ok" to suppress "warning[fwdref]"
1937+ 263E             >
1937+ 263E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1938+ 263E D9                           exx
1939+ 263F E1                           pop     hl                  // address
1940+ 2640 D1                           pop     de                  // < n
1941+ 2641 73                           ld      (hl), e             // low-byte
1942+ 2642 23                           inc     hl
1943+ 2643 72                           ld      (hl), d             // high-byte
1944+ 2644 D9                           exx
1945+ 2645                              next
1945+ 2645 DD E9       >                jp      (ix)
1946+ 2647
1947+ 2647              //  ______________________________________________________________________
1948+ 2647              //
1949+ 2647              // c@           a -- c
1950+ 2647              // fetch a character n from address a
1951+ 2647                              New_Def CFETCH, "C@", is_code, is_normal
1951+ 2647             >
1951+ 2647             >Dict_Ptr        defl    $
1951+ 2647             >
1951+ 2647             >//              ______________________________________________________________________
1951+ 2647             >//              Heap part
1951+ 2647             >
1951+ 2647             >
1951+ 2647             >                org     (Heap_Ptr & $1FFF) + $E000
1951+ E36F             >
1951+ E36F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1951+ E36F             >Latest_Definition defl  Heap_Ptr
1951+ E36F             >
1951+ E36F             >                // dummy db directives used to calculate length of namec
1951+ E36F 43 40       >                db      "C@"
1951+ E371             >len_NFA         defl    $ - temp_NFA
1951+ E371             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1951+ E36F             >
1951+ E36F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1951+ E370 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1951+ E372             >                org     $-1                 // alter last byte of Name just above to set
1951+ E371 C0          >                db      {b $} | END_BIT     // msb as name end
1951+ E372             >
1951+ E372 69 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1951+ E374             >Prev_Ptr        defl    Heap_Ptr
1951+ E374             >
1951+ E374             >mirror_Ptr      defl    $
1951+ E374             >
1951+ E374 49 26       >                dw      Dict_Ptr + 2        // xt
1951+ E376             >Heap_Ptr        defl    $ - $E000           // save current HP
1951+ E376             >
1951+ E376             >Current_HP      defl  $ - $E000             // used to set HP once!
1951+ E376             >
1951+ E376             >//              ______________________________________________________________________
1951+ E376             >//              Dictionary part
1951+ E376             >
1951+ E376             >                org     Dict_Ptr
1951+ 2647             >
1951+ 2647 74 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1951+ 2649             >
1951+ 2649             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1951+ 2649 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1951+ 2649 ~           >
1951+ 2649 ~           >
1951+ 2649             >                endif           ; ok        // for other definitions it "points" the correct handler
1951+ 2649             >                // Use of "; ok" to suppress "warning[fwdref]"
1951+ 2649             >
1951+ 2649             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1952+ 2649 E1                           pop     hl
1953+ 264A 6E                           ld      l, (hl)             // low-byte
1954+ 264B 26 00                        ld      h, 0
1955+ 264D
1956+ 264D                              psh1
1956+ 264D E5          >                push    hl
1956+ 264E DD E9       >                jp      (ix)
1957+ 2650
1958+ 2650              //  ______________________________________________________________________
1959+ 2650              //
1960+ 2650              // c!           c a --
1961+ 2650              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1962+ 2650                              New_Def CSTORE, "C!", is_code, is_normal
1962+ 2650             >
1962+ 2650             >Dict_Ptr        defl    $
1962+ 2650             >
1962+ 2650             >//              ______________________________________________________________________
1962+ 2650             >//              Heap part
1962+ 2650             >
1962+ 2650             >
1962+ 2650             >                org     (Heap_Ptr & $1FFF) + $E000
1962+ E376             >
1962+ E376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1962+ E376             >Latest_Definition defl  Heap_Ptr
1962+ E376             >
1962+ E376             >                // dummy db directives used to calculate length of namec
1962+ E376 43 21       >                db      "C!"
1962+ E378             >len_NFA         defl    $ - temp_NFA
1962+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1962+ E376             >
1962+ E376 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1962+ E377 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1962+ E379             >                org     $-1                 // alter last byte of Name just above to set
1962+ E378 A1          >                db      {b $} | END_BIT     // msb as name end
1962+ E379             >
1962+ E379 6F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1962+ E37B             >Prev_Ptr        defl    Heap_Ptr
1962+ E37B             >
1962+ E37B             >mirror_Ptr      defl    $
1962+ E37B             >
1962+ E37B 52 26       >                dw      Dict_Ptr + 2        // xt
1962+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
1962+ E37D             >
1962+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
1962+ E37D             >
1962+ E37D             >//              ______________________________________________________________________
1962+ E37D             >//              Dictionary part
1962+ E37D             >
1962+ E37D             >                org     Dict_Ptr
1962+ 2650             >
1962+ 2650 7B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1962+ 2652             >
1962+ 2652             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1962+ 2652 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1962+ 2652 ~           >
1962+ 2652 ~           >
1962+ 2652             >                endif           ; ok        // for other definitions it "points" the correct handler
1962+ 2652             >                // Use of "; ok" to suppress "warning[fwdref]"
1962+ 2652             >
1962+ 2652             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1963+ 2652 D9                           exx
1964+ 2653 E1                           pop     hl                  // < address
1965+ 2654 D1                           pop     de
1966+ 2655 73                           ld      (hl), e             // low-byte
1967+ 2656 D9                           exx
1968+ 2657                              next
1968+ 2657 DD E9       >                jp      (ix)
1969+ 2659
1970+ 2659              //  ______________________________________________________________________
1971+ 2659              //
1972+ 2659              // 2@           a -- d
1973+ 2659              // fetch a 32 bits number d from address a and leaves it on top of the
1974+ 2659              // stack as two single numbers, high part as top of the stack.
1975+ 2659              // A double number is normally kept in CPU registers as HLDE.
1976+ 2659              // On stack a double number is treated as two single numbers
1977+ 2659              // where BC is on the top of the stack and HL is the second from top,
1978+ 2659              // so the sign of the number can be checked on top of stack
1979+ 2659              // and in the stack memory it appears as LHED.
1980+ 2659                              New_Def TWO_FETCH, "2@", is_code, is_normal
1980+ 2659             >
1980+ 2659             >Dict_Ptr        defl    $
1980+ 2659             >
1980+ 2659             >//              ______________________________________________________________________
1980+ 2659             >//              Heap part
1980+ 2659             >
1980+ 2659             >
1980+ 2659             >                org     (Heap_Ptr & $1FFF) + $E000
1980+ E37D             >
1980+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1980+ E37D             >Latest_Definition defl  Heap_Ptr
1980+ E37D             >
1980+ E37D             >                // dummy db directives used to calculate length of namec
1980+ E37D 32 40       >                db      "2@"
1980+ E37F             >len_NFA         defl    $ - temp_NFA
1980+ E37F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1980+ E37D             >
1980+ E37D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1980+ E37E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1980+ E380             >                org     $-1                 // alter last byte of Name just above to set
1980+ E37F C0          >                db      {b $} | END_BIT     // msb as name end
1980+ E380             >
1980+ E380 76 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1980+ E382             >Prev_Ptr        defl    Heap_Ptr
1980+ E382             >
1980+ E382             >mirror_Ptr      defl    $
1980+ E382             >
1980+ E382 5B 26       >                dw      Dict_Ptr + 2        // xt
1980+ E384             >Heap_Ptr        defl    $ - $E000           // save current HP
1980+ E384             >
1980+ E384             >Current_HP      defl  $ - $E000             // used to set HP once!
1980+ E384             >
1980+ E384             >//              ______________________________________________________________________
1980+ E384             >//              Dictionary part
1980+ E384             >
1980+ E384             >                org     Dict_Ptr
1980+ 2659             >
1980+ 2659 82 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1980+ 265B             >
1980+ 265B             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1980+ 265B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1980+ 265B ~           >
1980+ 265B ~           >
1980+ 265B             >                endif           ; ok        // for other definitions it "points" the correct handler
1980+ 265B             >                // Use of "; ok" to suppress "warning[fwdref]"
1980+ 265B             >
1980+ 265B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1981+ 265B D9                           exx
1982+ 265C E1                           pop     hl                  // address
1983+ 265D 5E                           ld      e, (hl)             // low-byte
1984+ 265E 23                           inc     hl
1985+ 265F 56                           ld      d, (hl)             // high-byte
1986+ 2660 23                           inc     hl
1987+ 2661 4E                           ld      c, (hl)             // low-byte
1988+ 2662 23                           inc     hl
1989+ 2663 46                           ld      b, (hl)             // high-byte
1990+ 2664 C5                           push    bc
1991+ 2665 D5                           push    de
1992+ 2666 D9                           exx
1993+ 2667                              next
1993+ 2667 DD E9       >                jp      (ix)
1994+ 2669
1995+ 2669              //  ______________________________________________________________________
1996+ 2669              //
1997+ 2669              // 2!           d a --
1998+ 2669              // stores a 32 bits number d from address a and leaves it on top of the
1999+ 2669              // stack as two single numbers, high part as top of the stack.
2000+ 2669              // A double number is normally kept in CPU registers as HLDE.
2001+ 2669              // On stack a double number is treated as two single numbers
2002+ 2669              // where BC is on the top of the stack and HL is the second from top,
2003+ 2669              // so the sign of the number can be checked on top of stack
2004+ 2669              // and in the stack memory it appears as LHED.
2005+ 2669                              New_Def TWO_STORE, "2!", is_code, is_normal
2005+ 2669             >
2005+ 2669             >Dict_Ptr        defl    $
2005+ 2669             >
2005+ 2669             >//              ______________________________________________________________________
2005+ 2669             >//              Heap part
2005+ 2669             >
2005+ 2669             >
2005+ 2669             >                org     (Heap_Ptr & $1FFF) + $E000
2005+ E384             >
2005+ E384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2005+ E384             >Latest_Definition defl  Heap_Ptr
2005+ E384             >
2005+ E384             >                // dummy db directives used to calculate length of namec
2005+ E384 32 21       >                db      "2!"
2005+ E386             >len_NFA         defl    $ - temp_NFA
2005+ E386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2005+ E384             >
2005+ E384 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2005+ E385 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2005+ E387             >                org     $-1                 // alter last byte of Name just above to set
2005+ E386 A1          >                db      {b $} | END_BIT     // msb as name end
2005+ E387             >
2005+ E387 7D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2005+ E389             >Prev_Ptr        defl    Heap_Ptr
2005+ E389             >
2005+ E389             >mirror_Ptr      defl    $
2005+ E389             >
2005+ E389 6B 26       >                dw      Dict_Ptr + 2        // xt
2005+ E38B             >Heap_Ptr        defl    $ - $E000           // save current HP
2005+ E38B             >
2005+ E38B             >Current_HP      defl  $ - $E000             // used to set HP once!
2005+ E38B             >
2005+ E38B             >//              ______________________________________________________________________
2005+ E38B             >//              Dictionary part
2005+ E38B             >
2005+ E38B             >                org     Dict_Ptr
2005+ 2669             >
2005+ 2669 89 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2005+ 266B             >
2005+ 266B             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2005+ 266B ~           >                call    runcode ; ok        // for primitive definitions  actual code
2005+ 266B ~           >
2005+ 266B ~           >
2005+ 266B             >                endif           ; ok        // for other definitions it "points" the correct handler
2005+ 266B             >                // Use of "; ok" to suppress "warning[fwdref]"
2005+ 266B             >
2005+ 266B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2006+ 266B D9                           exx
2007+ 266C E1                           pop     hl                  // address
2008+ 266D C1                           pop     bc                  // < high-part
2009+ 266E D1                           pop     de                  // < low-part > Instruction Pointer
2010+ 266F 71                           ld      (hl), c
2011+ 2670 23                           inc     hl
2012+ 2671 70                           ld      (hl), b
2013+ 2672 23                           inc     hl
2014+ 2673 73                           ld      (hl), e
2015+ 2674 23                           inc     hl
2016+ 2675 72                           ld      (hl), d
2017+ 2676 D9                           exx
2018+ 2677                              next
2018+ 2677 DD E9       >                jp      (ix)
2019+ 2679
2020+ 2679              //  ______________________________________________________________________
2021+ 2679              //
2022+ 2679              // p@           a -- c
2023+ 2679              // Read one byte from port a and leave the result on top of stack
2024+ 2679                              New_Def PFETCH, "P@", is_code, is_normal
2024+ 2679             >
2024+ 2679             >Dict_Ptr        defl    $
2024+ 2679             >
2024+ 2679             >//              ______________________________________________________________________
2024+ 2679             >//              Heap part
2024+ 2679             >
2024+ 2679             >
2024+ 2679             >                org     (Heap_Ptr & $1FFF) + $E000
2024+ E38B             >
2024+ E38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2024+ E38B             >Latest_Definition defl  Heap_Ptr
2024+ E38B             >
2024+ E38B             >                // dummy db directives used to calculate length of namec
2024+ E38B 50 40       >                db      "P@"
2024+ E38D             >len_NFA         defl    $ - temp_NFA
2024+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2024+ E38B             >
2024+ E38B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2024+ E38C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2024+ E38E             >                org     $-1                 // alter last byte of Name just above to set
2024+ E38D C0          >                db      {b $} | END_BIT     // msb as name end
2024+ E38E             >
2024+ E38E 84 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2024+ E390             >Prev_Ptr        defl    Heap_Ptr
2024+ E390             >
2024+ E390             >mirror_Ptr      defl    $
2024+ E390             >
2024+ E390 7B 26       >                dw      Dict_Ptr + 2        // xt
2024+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
2024+ E392             >
2024+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
2024+ E392             >
2024+ E392             >//              ______________________________________________________________________
2024+ E392             >//              Dictionary part
2024+ E392             >
2024+ E392             >                org     Dict_Ptr
2024+ 2679             >
2024+ 2679 90 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2024+ 267B             >
2024+ 267B             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2024+ 267B ~           >                call    runcode ; ok        // for primitive definitions  actual code
2024+ 267B ~           >
2024+ 267B ~           >
2024+ 267B             >                endif           ; ok        // for other definitions it "points" the correct handler
2024+ 267B             >                // Use of "; ok" to suppress "warning[fwdref]"
2024+ 267B             >
2024+ 267B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2025+ 267B D9                           exx
2026+ 267C C1                           pop     bc
2027+ 267D 26 00                        ld      h, 0
2028+ 267F ED 68                        in      l, (c)
2029+ 2681 E5                           push    hl
2030+ 2682 D9                           exx
2031+ 2683                              next
2031+ 2683 DD E9       >                jp      (ix)
2032+ 2685
2033+ 2685              //  ______________________________________________________________________
2034+ 2685              //
2035+ 2685              // p!           c a --
2036+ 2685              // Send one byte (top of stack) to port a
2037+ 2685                              New_Def PSTORE, "P!", is_code, is_normal
2037+ 2685             >
2037+ 2685             >Dict_Ptr        defl    $
2037+ 2685             >
2037+ 2685             >//              ______________________________________________________________________
2037+ 2685             >//              Heap part
2037+ 2685             >
2037+ 2685             >
2037+ 2685             >                org     (Heap_Ptr & $1FFF) + $E000
2037+ E392             >
2037+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2037+ E392             >Latest_Definition defl  Heap_Ptr
2037+ E392             >
2037+ E392             >                // dummy db directives used to calculate length of namec
2037+ E392 50 21       >                db      "P!"
2037+ E394             >len_NFA         defl    $ - temp_NFA
2037+ E394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2037+ E392             >
2037+ E392 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2037+ E393 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2037+ E395             >                org     $-1                 // alter last byte of Name just above to set
2037+ E394 A1          >                db      {b $} | END_BIT     // msb as name end
2037+ E395             >
2037+ E395 8B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2037+ E397             >Prev_Ptr        defl    Heap_Ptr
2037+ E397             >
2037+ E397             >mirror_Ptr      defl    $
2037+ E397             >
2037+ E397 87 26       >                dw      Dict_Ptr + 2        // xt
2037+ E399             >Heap_Ptr        defl    $ - $E000           // save current HP
2037+ E399             >
2037+ E399             >Current_HP      defl  $ - $E000             // used to set HP once!
2037+ E399             >
2037+ E399             >//              ______________________________________________________________________
2037+ E399             >//              Dictionary part
2037+ E399             >
2037+ E399             >                org     Dict_Ptr
2037+ 2685             >
2037+ 2685 97 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2037+ 2687             >
2037+ 2687             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2037+ 2687 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2037+ 2687 ~           >
2037+ 2687 ~           >
2037+ 2687             >                endif           ; ok        // for other definitions it "points" the correct handler
2037+ 2687             >                // Use of "; ok" to suppress "warning[fwdref]"
2037+ 2687             >
2037+ 2687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2038+ 2687 D9                           exx
2039+ 2688 C1                           pop     bc
2040+ 2689 E1                           pop     hl                  // < c
2041+ 268A ED 69                        out     (c), l              // low-byte
2042+ 268C D9                           exx
2043+ 268D                              next
2043+ 268D DD E9       >                jp      (ix)
2044+ 268F
2045+ 268F
2046+ 268F              //  ______________________________________________________________________
2047+ 268F              //
2048+ 268F              // 2*           n1 -- n2
2049+ 268F              // doubles the number at top of stack
2050+ 268F                              New_Def TWO_MUL, "2*", is_code, is_normal
2050+ 268F             >
2050+ 268F             >Dict_Ptr        defl    $
2050+ 268F             >
2050+ 268F             >//              ______________________________________________________________________
2050+ 268F             >//              Heap part
2050+ 268F             >
2050+ 268F             >
2050+ 268F             >                org     (Heap_Ptr & $1FFF) + $E000
2050+ E399             >
2050+ E399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2050+ E399             >Latest_Definition defl  Heap_Ptr
2050+ E399             >
2050+ E399             >                // dummy db directives used to calculate length of namec
2050+ E399 32 2A       >                db      "2*"
2050+ E39B             >len_NFA         defl    $ - temp_NFA
2050+ E39B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2050+ E399             >
2050+ E399 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2050+ E39A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2050+ E39C             >                org     $-1                 // alter last byte of Name just above to set
2050+ E39B AA          >                db      {b $} | END_BIT     // msb as name end
2050+ E39C             >
2050+ E39C 92 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2050+ E39E             >Prev_Ptr        defl    Heap_Ptr
2050+ E39E             >
2050+ E39E             >mirror_Ptr      defl    $
2050+ E39E             >
2050+ E39E 91 26       >                dw      Dict_Ptr + 2        // xt
2050+ E3A0             >Heap_Ptr        defl    $ - $E000           // save current HP
2050+ E3A0             >
2050+ E3A0             >Current_HP      defl  $ - $E000             // used to set HP once!
2050+ E3A0             >
2050+ E3A0             >//              ______________________________________________________________________
2050+ E3A0             >//              Dictionary part
2050+ E3A0             >
2050+ E3A0             >                org     Dict_Ptr
2050+ 268F             >
2050+ 268F 9E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2050+ 2691             >
2050+ 2691             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2050+ 2691 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2050+ 2691 ~           >
2050+ 2691 ~           >
2050+ 2691             >                endif           ; ok        // for other definitions it "points" the correct handler
2050+ 2691             >                // Use of "; ok" to suppress "warning[fwdref]"
2050+ 2691             >
2050+ 2691             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2051+ 2691              Two_Mul_Ptr:
2052+ 2691 E1                           pop     hl
2053+ 2692 29                           add     hl, hl
2054+ 2693
2055+ 2693                              psh1
2055+ 2693 E5          >                push    hl
2055+ 2694 DD E9       >                jp      (ix)
2056+ 2696
2057+ 2696              //  ______________________________________________________________________
2058+ 2696              //
2059+ 2696              // 2/           n1 -- n2
2060+ 2696              // halves the top of stack, sign is unchanged
2061+ 2696                              New_Def TWO_DIV, "2/", is_code, is_normal
2061+ 2696             >
2061+ 2696             >Dict_Ptr        defl    $
2061+ 2696             >
2061+ 2696             >//              ______________________________________________________________________
2061+ 2696             >//              Heap part
2061+ 2696             >
2061+ 2696             >
2061+ 2696             >                org     (Heap_Ptr & $1FFF) + $E000
2061+ E3A0             >
2061+ E3A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2061+ E3A0             >Latest_Definition defl  Heap_Ptr
2061+ E3A0             >
2061+ E3A0             >                // dummy db directives used to calculate length of namec
2061+ E3A0 32 2F       >                db      "2/"
2061+ E3A2             >len_NFA         defl    $ - temp_NFA
2061+ E3A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2061+ E3A0             >
2061+ E3A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2061+ E3A1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2061+ E3A3             >                org     $-1                 // alter last byte of Name just above to set
2061+ E3A2 AF          >                db      {b $} | END_BIT     // msb as name end
2061+ E3A3             >
2061+ E3A3 99 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2061+ E3A5             >Prev_Ptr        defl    Heap_Ptr
2061+ E3A5             >
2061+ E3A5             >mirror_Ptr      defl    $
2061+ E3A5             >
2061+ E3A5 98 26       >                dw      Dict_Ptr + 2        // xt
2061+ E3A7             >Heap_Ptr        defl    $ - $E000           // save current HP
2061+ E3A7             >
2061+ E3A7             >Current_HP      defl  $ - $E000             // used to set HP once!
2061+ E3A7             >
2061+ E3A7             >//              ______________________________________________________________________
2061+ E3A7             >//              Dictionary part
2061+ E3A7             >
2061+ E3A7             >                org     Dict_Ptr
2061+ 2696             >
2061+ 2696 A5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2061+ 2698             >
2061+ 2698             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2061+ 2698 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2061+ 2698 ~           >
2061+ 2698 ~           >
2061+ 2698             >                endif           ; ok        // for other definitions it "points" the correct handler
2061+ 2698             >                // Use of "; ok" to suppress "warning[fwdref]"
2061+ 2698             >
2061+ 2698             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2062+ 2698 E1                           pop     hl
2063+ 2699 CB 2C                        sra     h
2064+ 269B CB 1D                        rr      l
2065+ 269D
2066+ 269D                              psh1
2066+ 269D E5          >                push    hl
2066+ 269E DD E9       >                jp      (ix)
2067+ 26A0
2068+ 26A0              //  ______________________________________________________________________
2069+ 26A0              //
2070+ 26A0              // lshift       n1 u -- n2
2071+ 26A0              // bit left shift of u bits
2072+ 26A0                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2072+ 26A0             >
2072+ 26A0             >Dict_Ptr        defl    $
2072+ 26A0             >
2072+ 26A0             >//              ______________________________________________________________________
2072+ 26A0             >//              Heap part
2072+ 26A0             >
2072+ 26A0             >
2072+ 26A0             >                org     (Heap_Ptr & $1FFF) + $E000
2072+ E3A7             >
2072+ E3A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2072+ E3A7             >Latest_Definition defl  Heap_Ptr
2072+ E3A7             >
2072+ E3A7             >                // dummy db directives used to calculate length of namec
2072+ E3A7 4C 53 48 49 >                db      "LSHIFT"
2072+ E3AB 46 54       >
2072+ E3AD             >len_NFA         defl    $ - temp_NFA
2072+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2072+ E3A7             >
2072+ E3A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2072+ E3A8 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2072+ E3AC 46 54       >
2072+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2072+ E3AD D4          >                db      {b $} | END_BIT     // msb as name end
2072+ E3AE             >
2072+ E3AE A0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2072+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2072+ E3B0             >
2072+ E3B0             >mirror_Ptr      defl    $
2072+ E3B0             >
2072+ E3B0 A2 26       >                dw      Dict_Ptr + 2        // xt
2072+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2072+ E3B2             >
2072+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2072+ E3B2             >
2072+ E3B2             >//              ______________________________________________________________________
2072+ E3B2             >//              Dictionary part
2072+ E3B2             >
2072+ E3B2             >                org     Dict_Ptr
2072+ 26A0             >
2072+ 26A0 B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2072+ 26A2             >
2072+ 26A2             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2072+ 26A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2072+ 26A2 ~           >
2072+ 26A2 ~           >
2072+ 26A2             >                endif           ; ok        // for other definitions it "points" the correct handler
2072+ 26A2             >                // Use of "; ok" to suppress "warning[fwdref]"
2072+ 26A2             >
2072+ 26A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2073+ 26A2 D9                           exx
2074+ 26A3 C1                           pop     bc
2075+ 26A4 41                           ld      b, c
2076+ 26A5 D1                           pop     de
2077+ 26A6 ED 28                        bsla    de, b
2078+ 26A8 D5                           push    de
2079+ 26A9 D9                           exx
2080+ 26AA                              next
2080+ 26AA DD E9       >                jp      (ix)
2081+ 26AC
2082+ 26AC              //  ______________________________________________________________________
2083+ 26AC              //
2084+ 26AC              // rshift       n1 u -- n2
2085+ 26AC              // bit right shift of u bits
2086+ 26AC                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2086+ 26AC             >
2086+ 26AC             >Dict_Ptr        defl    $
2086+ 26AC             >
2086+ 26AC             >//              ______________________________________________________________________
2086+ 26AC             >//              Heap part
2086+ 26AC             >
2086+ 26AC             >
2086+ 26AC             >                org     (Heap_Ptr & $1FFF) + $E000
2086+ E3B2             >
2086+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2086+ E3B2             >Latest_Definition defl  Heap_Ptr
2086+ E3B2             >
2086+ E3B2             >                // dummy db directives used to calculate length of namec
2086+ E3B2 52 53 48 49 >                db      "RSHIFT"
2086+ E3B6 46 54       >
2086+ E3B8             >len_NFA         defl    $ - temp_NFA
2086+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2086+ E3B2             >
2086+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2086+ E3B3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2086+ E3B7 46 54       >
2086+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2086+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2086+ E3B9             >
2086+ E3B9 A7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2086+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2086+ E3BB             >
2086+ E3BB             >mirror_Ptr      defl    $
2086+ E3BB             >
2086+ E3BB AE 26       >                dw      Dict_Ptr + 2        // xt
2086+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2086+ E3BD             >
2086+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2086+ E3BD             >
2086+ E3BD             >//              ______________________________________________________________________
2086+ E3BD             >//              Dictionary part
2086+ E3BD             >
2086+ E3BD             >                org     Dict_Ptr
2086+ 26AC             >
2086+ 26AC BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2086+ 26AE             >
2086+ 26AE             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2086+ 26AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2086+ 26AE ~           >
2086+ 26AE ~           >
2086+ 26AE             >                endif           ; ok        // for other definitions it "points" the correct handler
2086+ 26AE             >                // Use of "; ok" to suppress "warning[fwdref]"
2086+ 26AE             >
2086+ 26AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2087+ 26AE D9                           exx
2088+ 26AF C1                           pop     bc
2089+ 26B0 41                           ld      b, c
2090+ 26B1 D1                           pop     de
2091+ 26B2 ED 2A                        bsrl    de, b
2092+ 26B4 D5                           push    de
2093+ 26B5 D9                           exx
2094+ 26B6                              next
2094+ 26B6 DD E9       >                jp      (ix)
2095+ 26B8
2096+ 26B8              //  ______________________________________________________________________
2097+ 26B8              //
2098+ 26B8              // cells        n1 -- n2
2099+ 26B8              // decrement by 2 top of stack
2100+ 26B8                              New_Def CELLS, "CELLS", is_code, is_normal
2100+ 26B8             >
2100+ 26B8             >Dict_Ptr        defl    $
2100+ 26B8             >
2100+ 26B8             >//              ______________________________________________________________________
2100+ 26B8             >//              Heap part
2100+ 26B8             >
2100+ 26B8             >
2100+ 26B8             >                org     (Heap_Ptr & $1FFF) + $E000
2100+ E3BD             >
2100+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2100+ E3BD             >Latest_Definition defl  Heap_Ptr
2100+ E3BD             >
2100+ E3BD             >                // dummy db directives used to calculate length of namec
2100+ E3BD 43 45 4C 4C >                db      "CELLS"
2100+ E3C1 53          >
2100+ E3C2             >len_NFA         defl    $ - temp_NFA
2100+ E3C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2100+ E3BD             >
2100+ E3BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2100+ E3BE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2100+ E3C2 53          >
2100+ E3C3             >                org     $-1                 // alter last byte of Name just above to set
2100+ E3C2 D3          >                db      {b $} | END_BIT     // msb as name end
2100+ E3C3             >
2100+ E3C3 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2100+ E3C5             >Prev_Ptr        defl    Heap_Ptr
2100+ E3C5             >
2100+ E3C5             >mirror_Ptr      defl    $
2100+ E3C5             >
2100+ E3C5 BA 26       >                dw      Dict_Ptr + 2        // xt
2100+ E3C7             >Heap_Ptr        defl    $ - $E000           // save current HP
2100+ E3C7             >
2100+ E3C7             >Current_HP      defl  $ - $E000             // used to set HP once!
2100+ E3C7             >
2100+ E3C7             >//              ______________________________________________________________________
2100+ E3C7             >//              Dictionary part
2100+ E3C7             >
2100+ E3C7             >                org     Dict_Ptr
2100+ 26B8             >
2100+ 26B8 C5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2100+ 26BA             >
2100+ 26BA             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2100+ 26BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2100+ 26BA ~           >
2100+ 26BA ~           >
2100+ 26BA             >                endif           ; ok        // for other definitions it "points" the correct handler
2100+ 26BA             >                // Use of "; ok" to suppress "warning[fwdref]"
2100+ 26BA             >
2100+ 26BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2101+ 26BA 18 D5                        jr      Two_Mul_Ptr
2102+ 26BC
2103+ 26BC
2104+ 26BC              //  ______________________________________________________________________
2105+ 26BC
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 140  26BC                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26BC              //  ______________________________________________________________________
   2+ 26BC              //
   3+ 26BC              //  L1.asm
   4+ 26BC              //
   5+ 26BC              //  Level-1 definitions and derivate
   6+ 26BC              //  ______________________________________________________________________
   7+ 26BC
   8+ 26BC              //  ______________________________________________________________________
   9+ 26BC              //
  10+ 26BC              // :            -- cccc     ( compile time )
  11+ 26BC              //              i*x -- j*x  ( run time )
  12+ 26BC              // Colon Definition
  13+ 26BC                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26BC             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26BC             >
  13+ 26BC             >Dict_Ptr        defl    $
  13+ 26BC             >
  13+ 26BC             >//              ______________________________________________________________________
  13+ 26BC             >//              Heap part
  13+ 26BC             >
  13+ 26BC             >
  13+ 26BC             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C7             >
  13+ E3C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C7             >Latest_Definition defl  Heap_Ptr
  13+ E3C7             >
  13+ E3C7             >                // dummy db directives used to calculate length of namec
  13+ E3C7 3A          >                db      ":"
  13+ E3C8             >len_NFA         defl    $ - temp_NFA
  13+ E3C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C7             >
  13+ E3C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C8 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C9             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C8 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C9             >
  13+ E3C9 BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CB             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >mirror_Ptr      defl    $
  13+ E3CB             >
  13+ E3CB BE 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CD             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CD             >
  13+ E3CD             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CD             >
  13+ E3CD             >//              ______________________________________________________________________
  13+ E3CD             >//              Dictionary part
  13+ E3CD             >
  13+ E3CD             >                org     Dict_Ptr
  13+ 26BC             >
  13+ 26BC CB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26BE             >
  13+ 26BE             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26BE CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26C1             >
  13+ 26C1             >
  13+ 26C1             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26C1             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26C1             >
  13+ 26C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26C1
  15+ 26C1 AB 2A                        dw      QEXEC                   // ?exec
  16+ 26C3 76 2A                        dw      STORE_CSP               // !csp
  17+ 26C5 EF 27 34 26                  dw      CURRENT, FETCH          // current @
  18+ 26C9 E9 27 3E 26                  dw      CONTEXT, STORE          // context !
  19+ 26CD 99 30                        dw      CREATE                  // create  ( forward )
  20+ 26CF 2D 2B                        dw      SMUDGE                  // dmudge
  21+ 26D1 1E 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26D3 69 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26D5                                                              // ... immediate
  24+ 26D5              Enter_Ptr:
  25+ 26D5                              // via call coded in CFA
  26+ 26D5 EB                           ex      de, hl //**
  27+ 26D6                              // *** ldhlrp
  28+ 26D6 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26D7 70                           ld      (hl), b
  30+ 26D8 2B                           dec     hl
  31+ 26D9 71                           ld      (hl), c
  32+ 26DA                              // *** ldrphl
  33+ 26DA EB                           ex      de, hl //**
  34+ 26DB
  35+ 26DB
  36+ 26DB C1                           pop     bc                  // points to PFA of "this" word
  37+ 26DC                              next
  37+ 26DC DD E9       >                jp      (ix)
  38+ 26DE
  39+ 26DE              //  ______________________________________________________________________
  40+ 26DE              //
  41+ 26DE              // ;            --
  42+ 26DE              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26DE                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26DE             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26DE             >
  43+ 26DE             >Dict_Ptr        defl    $
  43+ 26DE             >
  43+ 26DE             >//              ______________________________________________________________________
  43+ 26DE             >//              Heap part
  43+ 26DE             >
  43+ 26DE             >
  43+ 26DE             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CD             >
  43+ E3CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CD             >Latest_Definition defl  Heap_Ptr
  43+ E3CD             >
  43+ E3CD             >                // dummy db directives used to calculate length of namec
  43+ E3CD 3B          >                db      ";"
  43+ E3CE             >len_NFA         defl    $ - temp_NFA
  43+ E3CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CD             >
  43+ E3CD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CE 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CF             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CE BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CF             >
  43+ E3CF C7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D1             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >mirror_Ptr      defl    $
  43+ E3D1             >
  43+ E3D1 E0 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D3             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D3             >
  43+ E3D3             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D3             >
  43+ E3D3             >//              ______________________________________________________________________
  43+ E3D3             >//              Dictionary part
  43+ E3D3             >
  43+ E3D3             >                org     Dict_Ptr
  43+ 26DE             >
  43+ 26DE D1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 26E0             >
  43+ 26E0             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 26E0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 26E3             >
  43+ 26E3             >
  43+ 26E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 26E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 26E3             >
  43+ 26E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 26E3
  45+ 26E3 CB 2A                        dw      QCSP                    // ?csp
  46+ 26E5 F3 2A F4 24                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26E9 2D 2B                        dw      SMUDGE                  // smudge
  48+ 26EB 11 2B                        dw      SQUARED_OPEN            // [
  49+ 26ED F4 24                        dw      EXIT                    // ; immediate
  50+ 26EF
  51+ 26EF              //  ______________________________________________________________________
  52+ 26EF              //
  53+ 26EF              // noop         --
  54+ 26EF
  55+ 26EF                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 26EF             >
  55+ 26EF             >Dict_Ptr        defl    $
  55+ 26EF             >
  55+ 26EF             >//              ______________________________________________________________________
  55+ 26EF             >//              Heap part
  55+ 26EF             >
  55+ 26EF             >
  55+ 26EF             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D3             >
  55+ E3D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D3             >Latest_Definition defl  Heap_Ptr
  55+ E3D3             >
  55+ E3D3             >                // dummy db directives used to calculate length of namec
  55+ E3D3 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D7             >len_NFA         defl    $ - temp_NFA
  55+ E3D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D3             >
  55+ E3D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D8             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D7 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D8             >
  55+ E3D8 CD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DA             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DA             >
  55+ E3DA             >mirror_Ptr      defl    $
  55+ E3DA             >
  55+ E3DA F1 26       >                dw      Dict_Ptr + 2        // xt
  55+ E3DC             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DC             >
  55+ E3DC             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DC             >
  55+ E3DC             >//              ______________________________________________________________________
  55+ E3DC             >//              Dictionary part
  55+ E3DC             >
  55+ E3DC             >                org     Dict_Ptr
  55+ 26EF             >
  55+ 26EF DA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 26F1             >
  55+ 26F1             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 26F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 26F1 ~           >
  55+ 26F1 ~           >
  55+ 26F1             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 26F1             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 26F1             >
  55+ 26F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 26F1                              next
  56+ 26F1 DD E9       >                jp      (ix)
  57+ 26F3
  58+ 26F3              //  ______________________________________________________________________
  59+ 26F3              //
  60+ 26F3              // constant     n -- cccc     ( compile time )
  61+ 26F3              //              -- n          ( run time )
  62+ 26F3              // Constant definition.
  63+ 26F3                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 26F3             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 26F3             >
  63+ 26F3             >Dict_Ptr        defl    $
  63+ 26F3             >
  63+ 26F3             >//              ______________________________________________________________________
  63+ 26F3             >//              Heap part
  63+ 26F3             >
  63+ 26F3             >
  63+ 26F3             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DC             >
  63+ E3DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DC             >Latest_Definition defl  Heap_Ptr
  63+ E3DC             >
  63+ E3DC             >                // dummy db directives used to calculate length of namec
  63+ E3DC 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E0 54 41 4E 54 >
  63+ E3E4             >len_NFA         defl    $ - temp_NFA
  63+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DC             >
  63+ E3DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E4 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E5             >
  63+ E3E5 D3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E7             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >mirror_Ptr      defl    $
  63+ E3E7             >
  63+ E3E7 F5 26       >                dw      Dict_Ptr + 2        // xt
  63+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E9             >
  63+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E9             >
  63+ E3E9             >//              ______________________________________________________________________
  63+ E3E9             >//              Dictionary part
  63+ E3E9             >
  63+ E3E9             >                org     Dict_Ptr
  63+ 26F3             >
  63+ 26F3 E7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 26F5             >
  63+ 26F5             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 26F5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 26F8             >
  63+ 26F8             >
  63+ 26F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 26F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 26F8             >
  63+ 26F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 26F8 99 30                        dw      CREATE                  // create
  65+ 26FA 65 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 26FC 69 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 26FE              Constant_Ptr:
  68+ 26FE
  69+ 26FE
  70+ 26FE E1                           pop     hl
  71+ 26FF
  72+ 26FF 7E                           ld      a, (hl)
  73+ 2700 23                           inc     hl
  74+ 2701 66                           ld      h, (hl)
  75+ 2702 6F                           ld      l, a
  76+ 2703 E5                           push    hl
  77+ 2704                              next
  77+ 2704 DD E9       >                jp      (ix)
  78+ 2706
  79+ 2706              //  ______________________________________________________________________
  80+ 2706              //
  81+ 2706              // variable     n -- cccc     ( compile time )
  82+ 2706              //              -- a          ( run time )
  83+ 2706              // Variable definition, n is the initial value.
  84+ 2706                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2706             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2706             >
  84+ 2706             >Dict_Ptr        defl    $
  84+ 2706             >
  84+ 2706             >//              ______________________________________________________________________
  84+ 2706             >//              Heap part
  84+ 2706             >
  84+ 2706             >
  84+ 2706             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E9             >
  84+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E9             >Latest_Definition defl  Heap_Ptr
  84+ E3E9             >
  84+ E3E9             >                // dummy db directives used to calculate length of namec
  84+ E3E9 56 41 52 49 >                db      "VARIABLE"
  84+ E3ED 41 42 4C 45 >
  84+ E3F1             >len_NFA         defl    $ - temp_NFA
  84+ E3F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E9             >
  84+ E3E9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F1 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F2             >
  84+ E3F2 DC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F4             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >mirror_Ptr      defl    $
  84+ E3F4             >
  84+ E3F4 08 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F6             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F6             >
  84+ E3F6             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F6             >
  84+ E3F6             >//              ______________________________________________________________________
  84+ E3F6             >//              Dictionary part
  84+ E3F6             >
  84+ E3F6             >                org     Dict_Ptr
  84+ 2706             >
  84+ 2706 F4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 2708             >
  84+ 2708             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 2708 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 270B             >
  84+ 270B             >
  84+ 270B             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 270B             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 270B             >
  84+ 270B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 270B
  86+ 270B 2A 27                        dw      ZERO
  87+ 270D F5 26                        dw      CONSTANT                // constant
  88+ 270F 69 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 2711              Variable_Ptr:
  90+ 2711
  91+ 2711
  92+ 2711
  93+ 2711
  94+ 2711                              next
  94+ 2711 DD E9       >                jp      (ix)
  95+ 2713
  96+ 2713              //  ______________________________________________________________________
  97+ 2713              //
  98+ 2713              // user         b -- cccc     ( compile time )
  99+ 2713              //              -- a          ( run time )
 100+ 2713              // User variable definition
 101+ 2713                              Colon_Def USER, "USER", is_normal
 101+ 2713             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 2713             >
 101+ 2713             >Dict_Ptr        defl    $
 101+ 2713             >
 101+ 2713             >//              ______________________________________________________________________
 101+ 2713             >//              Heap part
 101+ 2713             >
 101+ 2713             >
 101+ 2713             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F6             >
 101+ E3F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F6             >Latest_Definition defl  Heap_Ptr
 101+ E3F6             >
 101+ E3F6             >                // dummy db directives used to calculate length of namec
 101+ E3F6 55 53 45 52 >                db      "USER"
 101+ E3FA             >len_NFA         defl    $ - temp_NFA
 101+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F6             >
 101+ E3F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FA D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FB             >
 101+ E3FB E9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FD             >
 101+ E3FD             >mirror_Ptr      defl    $
 101+ E3FD             >
 101+ E3FD 15 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FF             >
 101+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FF             >
 101+ E3FF             >//              ______________________________________________________________________
 101+ E3FF             >//              Dictionary part
 101+ E3FF             >
 101+ E3FF             >                org     Dict_Ptr
 101+ 2713             >
 101+ 2713 FD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 2715             >
 101+ 2715             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 2715 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 2718             >
 101+ 2718             >
 101+ 2718             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 2718             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 2718             >
 101+ 2718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 2718
 103+ 2718 99 30                        dw      CREATE                  // create
 104+ 271A 74 28                        dw      CCOMMA                  // c,
 105+ 271C 69 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 271E
 107+ 271E
 108+ 271E              User_Ptr:
 109+ 271E                              // via call coded in CFA
 110+ 271E E1                           pop     hl
 111+ 271F
 112+ 271F 7E                           ld      a, (hl)
 113+ 2720 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2723 ED 31                        add     hl, a
 115+ 2725 E5                           push    hl
 116+ 2726                              next
 116+ 2726 DD E9       >                jp      (ix)
 117+ 2728
 118+ 2728              //  ______________________________________________________________________
 119+ 2728              //
 120+ 2728                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 2728             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 2728             >
 120+ 2728             >Dict_Ptr        defl    $
 120+ 2728             >
 120+ 2728             >//              ______________________________________________________________________
 120+ 2728             >//              Heap part
 120+ 2728             >
 120+ 2728             >
 120+ 2728             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FF             >
 120+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FF             >Latest_Definition defl  Heap_Ptr
 120+ E3FF             >
 120+ E3FF             >                // dummy db directives used to calculate length of namec
 120+ E3FF 30          >                db      "0"
 120+ E400             >len_NFA         defl    $ - temp_NFA
 120+ E400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FF             >
 120+ E3FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E400 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E401             >                org     $-1                 // alter last byte of Name just above to set
 120+ E400 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E401             >
 120+ E401 F6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E403             >Prev_Ptr        defl    Heap_Ptr
 120+ E403             >
 120+ E403             >mirror_Ptr      defl    $
 120+ E403             >
 120+ E403 2A 27       >                dw      Dict_Ptr + 2        // xt
 120+ E405             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E405             >
 120+ E405             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E405             >
 120+ E405             >//              ______________________________________________________________________
 120+ E405             >//              Dictionary part
 120+ E405             >
 120+ E405             >                org     Dict_Ptr
 120+ 2728             >
 120+ 2728 03 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 272A             >
 120+ 272A             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 272A CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 272D             >
 120+ 272D             >
 120+ 272D             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 272D             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 272D             >
 120+ 272D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 272D 00 00       >                dw      0
 121+ 272F                              Constant_Def ONE        ,   "1"     ,   1
 121+ 272F             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 272F             >
 121+ 272F             >Dict_Ptr        defl    $
 121+ 272F             >
 121+ 272F             >//              ______________________________________________________________________
 121+ 272F             >//              Heap part
 121+ 272F             >
 121+ 272F             >
 121+ 272F             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E405             >
 121+ E405             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E405             >Latest_Definition defl  Heap_Ptr
 121+ E405             >
 121+ E405             >                // dummy db directives used to calculate length of namec
 121+ E405 31          >                db      "1"
 121+ E406             >len_NFA         defl    $ - temp_NFA
 121+ E406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E405             >
 121+ E405 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E406 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E407             >                org     $-1                 // alter last byte of Name just above to set
 121+ E406 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E407             >
 121+ E407 FF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E409             >Prev_Ptr        defl    Heap_Ptr
 121+ E409             >
 121+ E409             >mirror_Ptr      defl    $
 121+ E409             >
 121+ E409 31 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40B             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40B             >
 121+ E40B             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40B             >
 121+ E40B             >//              ______________________________________________________________________
 121+ E40B             >//              Dictionary part
 121+ E40B             >
 121+ E40B             >                org     Dict_Ptr
 121+ 272F             >
 121+ 272F 09 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 2731             >
 121+ 2731             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 2731 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2734             >
 121+ 2734             >
 121+ 2734             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2734             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2734             >
 121+ 2734             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2734 01 00       >                dw      1
 122+ 2736                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2736             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2736             >
 122+ 2736             >Dict_Ptr        defl    $
 122+ 2736             >
 122+ 2736             >//              ______________________________________________________________________
 122+ 2736             >//              Heap part
 122+ 2736             >
 122+ 2736             >
 122+ 2736             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40B             >
 122+ E40B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40B             >Latest_Definition defl  Heap_Ptr
 122+ E40B             >
 122+ E40B             >                // dummy db directives used to calculate length of namec
 122+ E40B 32          >                db      "2"
 122+ E40C             >len_NFA         defl    $ - temp_NFA
 122+ E40C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40B             >
 122+ E40B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40C 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40D             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40C B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40D             >
 122+ E40D 05 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40F             >Prev_Ptr        defl    Heap_Ptr
 122+ E40F             >
 122+ E40F             >mirror_Ptr      defl    $
 122+ E40F             >
 122+ E40F 38 27       >                dw      Dict_Ptr + 2        // xt
 122+ E411             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E411             >
 122+ E411             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E411             >
 122+ E411             >//              ______________________________________________________________________
 122+ E411             >//              Dictionary part
 122+ E411             >
 122+ E411             >                org     Dict_Ptr
 122+ 2736             >
 122+ 2736 0F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 2738             >
 122+ 2738             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 2738 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 273B             >
 122+ 273B             >
 122+ 273B             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 273B             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 273B             >
 122+ 273B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 273B 02 00       >                dw      2
 123+ 273D                              Constant_Def THREE      ,   "3"     ,   3
 123+ 273D             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 273D             >
 123+ 273D             >Dict_Ptr        defl    $
 123+ 273D             >
 123+ 273D             >//              ______________________________________________________________________
 123+ 273D             >//              Heap part
 123+ 273D             >
 123+ 273D             >
 123+ 273D             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E411             >
 123+ E411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E411             >Latest_Definition defl  Heap_Ptr
 123+ E411             >
 123+ E411             >                // dummy db directives used to calculate length of namec
 123+ E411 33          >                db      "3"
 123+ E412             >len_NFA         defl    $ - temp_NFA
 123+ E412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E411             >
 123+ E411 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E412 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E413             >                org     $-1                 // alter last byte of Name just above to set
 123+ E412 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E413             >
 123+ E413 0B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E415             >Prev_Ptr        defl    Heap_Ptr
 123+ E415             >
 123+ E415             >mirror_Ptr      defl    $
 123+ E415             >
 123+ E415 3F 27       >                dw      Dict_Ptr + 2        // xt
 123+ E417             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E417             >
 123+ E417             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E417             >
 123+ E417             >//              ______________________________________________________________________
 123+ E417             >//              Dictionary part
 123+ E417             >
 123+ E417             >                org     Dict_Ptr
 123+ 273D             >
 123+ 273D 15 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 273F             >
 123+ 273F             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 273F CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 2742             >
 123+ 2742             >
 123+ 2742             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 2742             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 2742             >
 123+ 2742             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 2742 03 00       >                dw      3
 124+ 2744                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2744             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2744             >
 124+ 2744             >Dict_Ptr        defl    $
 124+ 2744             >
 124+ 2744             >//              ______________________________________________________________________
 124+ 2744             >//              Heap part
 124+ 2744             >
 124+ 2744             >
 124+ 2744             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E417             >
 124+ E417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E417             >Latest_Definition defl  Heap_Ptr
 124+ E417             >
 124+ E417             >                // dummy db directives used to calculate length of namec
 124+ E417 2D 31       >                db      "-1"
 124+ E419             >len_NFA         defl    $ - temp_NFA
 124+ E419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E417             >
 124+ E417 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E418 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41A             >                org     $-1                 // alter last byte of Name just above to set
 124+ E419 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41A             >
 124+ E41A 11 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41C             >Prev_Ptr        defl    Heap_Ptr
 124+ E41C             >
 124+ E41C             >mirror_Ptr      defl    $
 124+ E41C             >
 124+ E41C 46 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41E             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41E             >
 124+ E41E             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41E             >
 124+ E41E             >//              ______________________________________________________________________
 124+ E41E             >//              Dictionary part
 124+ E41E             >
 124+ E41E             >                org     Dict_Ptr
 124+ 2744             >
 124+ 2744 1C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2746             >
 124+ 2746             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2746 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 2749             >
 124+ 2749             >
 124+ 2749             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 2749             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 2749             >
 124+ 2749             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 2749 FF FF       >                dw      -1
 125+ 274B                              Constant_Def BL         ,   "BL"    , $20
 125+ 274B             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 274B             >
 125+ 274B             >Dict_Ptr        defl    $
 125+ 274B             >
 125+ 274B             >//              ______________________________________________________________________
 125+ 274B             >//              Heap part
 125+ 274B             >
 125+ 274B             >
 125+ 274B             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41E             >
 125+ E41E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41E             >Latest_Definition defl  Heap_Ptr
 125+ E41E             >
 125+ E41E             >                // dummy db directives used to calculate length of namec
 125+ E41E 42 4C       >                db      "BL"
 125+ E420             >len_NFA         defl    $ - temp_NFA
 125+ E420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41E             >
 125+ E41E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E421             >                org     $-1                 // alter last byte of Name just above to set
 125+ E420 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E421             >
 125+ E421 17 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E423             >Prev_Ptr        defl    Heap_Ptr
 125+ E423             >
 125+ E423             >mirror_Ptr      defl    $
 125+ E423             >
 125+ E423 4D 27       >                dw      Dict_Ptr + 2        // xt
 125+ E425             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E425             >
 125+ E425             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E425             >
 125+ E425             >//              ______________________________________________________________________
 125+ E425             >//              Dictionary part
 125+ E425             >
 125+ E425             >                org     Dict_Ptr
 125+ 274B             >
 125+ 274B 23 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 274D             >
 125+ 274D             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 274D CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 2750             >
 125+ 2750             >
 125+ 2750             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 2750             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 2750             >
 125+ 2750             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 2750 20 00       >                dw      $20
 126+ 2752                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 2752             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 2752             >
 126+ 2752             >Dict_Ptr        defl    $
 126+ 2752             >
 126+ 2752             >//              ______________________________________________________________________
 126+ 2752             >//              Heap part
 126+ 2752             >
 126+ 2752             >
 126+ 2752             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E425             >
 126+ E425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E425             >Latest_Definition defl  Heap_Ptr
 126+ E425             >
 126+ E425             >                // dummy db directives used to calculate length of namec
 126+ E425 43 2F 4C    >                db      "C/L"
 126+ E428             >len_NFA         defl    $ - temp_NFA
 126+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E425             >
 126+ E425 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E426 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E429             >                org     $-1                 // alter last byte of Name just above to set
 126+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E429             >
 126+ E429 1E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42B             >Prev_Ptr        defl    Heap_Ptr
 126+ E42B             >
 126+ E42B             >mirror_Ptr      defl    $
 126+ E42B             >
 126+ E42B 54 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42D             >
 126+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42D             >
 126+ E42D             >//              ______________________________________________________________________
 126+ E42D             >//              Dictionary part
 126+ E42D             >
 126+ E42D             >                org     Dict_Ptr
 126+ 2752             >
 126+ 2752 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2754             >
 126+ 2754             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2754 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2757             >
 126+ 2757             >
 126+ 2757             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2757             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2757             >
 126+ 2757             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2757 40 00       >                dw      64
 127+ 2759                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 2759             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 2759             >
 127+ 2759             >Dict_Ptr        defl    $
 127+ 2759             >
 127+ 2759             >//              ______________________________________________________________________
 127+ 2759             >//              Heap part
 127+ 2759             >
 127+ 2759             >
 127+ 2759             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42D             >
 127+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42D             >Latest_Definition defl  Heap_Ptr
 127+ E42D             >
 127+ E42D             >                // dummy db directives used to calculate length of namec
 127+ E42D 42 2F 42 55 >                db      "B/BUF"
 127+ E431 46          >
 127+ E432             >len_NFA         defl    $ - temp_NFA
 127+ E432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42D             >
 127+ E42D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E432 46          >
 127+ E433             >                org     $-1                 // alter last byte of Name just above to set
 127+ E432 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E433             >
 127+ E433 25 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E435             >Prev_Ptr        defl    Heap_Ptr
 127+ E435             >
 127+ E435             >mirror_Ptr      defl    $
 127+ E435             >
 127+ E435 5B 27       >                dw      Dict_Ptr + 2        // xt
 127+ E437             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E437             >
 127+ E437             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E437             >
 127+ E437             >//              ______________________________________________________________________
 127+ E437             >//              Dictionary part
 127+ E437             >
 127+ E437             >                org     Dict_Ptr
 127+ 2759             >
 127+ 2759 35 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 275B             >
 127+ 275B             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 275B CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 275E             >
 127+ 275E             >
 127+ 275E             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 275E             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 275E             >
 127+ 275E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 275E 00 02       >                dw      512
 128+ 2760                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 2760             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 2760             >
 128+ 2760             >Dict_Ptr        defl    $
 128+ 2760             >
 128+ 2760             >//              ______________________________________________________________________
 128+ 2760             >//              Heap part
 128+ 2760             >
 128+ 2760             >
 128+ 2760             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E437             >
 128+ E437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E437             >Latest_Definition defl  Heap_Ptr
 128+ E437             >
 128+ E437             >                // dummy db directives used to calculate length of namec
 128+ E437 42 2F 53 43 >                db      "B/SCR"
 128+ E43B 52          >
 128+ E43C             >len_NFA         defl    $ - temp_NFA
 128+ E43C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E437             >
 128+ E437 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E438 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43C 52          >
 128+ E43D             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43C D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43D             >
 128+ E43D 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43F             >Prev_Ptr        defl    Heap_Ptr
 128+ E43F             >
 128+ E43F             >mirror_Ptr      defl    $
 128+ E43F             >
 128+ E43F 62 27       >                dw      Dict_Ptr + 2        // xt
 128+ E441             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E441             >
 128+ E441             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E441             >
 128+ E441             >//              ______________________________________________________________________
 128+ E441             >//              Dictionary part
 128+ E441             >
 128+ E441             >                org     Dict_Ptr
 128+ 2760             >
 128+ 2760 3F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 2762             >
 128+ 2762             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 2762 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 2765             >
 128+ 2765             >
 128+ 2765             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 2765             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 2765             >
 128+ 2765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 2765 02 00       >                dw      2
 129+ 2767                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2767             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2767             >
 129+ 2767             >Dict_Ptr        defl    $
 129+ 2767             >
 129+ 2767             >//              ______________________________________________________________________
 129+ 2767             >//              Heap part
 129+ 2767             >
 129+ 2767             >
 129+ 2767             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E441             >
 129+ E441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E441             >Latest_Definition defl  Heap_Ptr
 129+ E441             >
 129+ E441             >                // dummy db directives used to calculate length of namec
 129+ E441 4C 2F 53 43 >                db      "L/SCR"
 129+ E445 52          >
 129+ E446             >len_NFA         defl    $ - temp_NFA
 129+ E446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E441             >
 129+ E441 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E442 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E446 52          >
 129+ E447             >                org     $-1                 // alter last byte of Name just above to set
 129+ E446 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E447             >
 129+ E447 37 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E449             >Prev_Ptr        defl    Heap_Ptr
 129+ E449             >
 129+ E449             >mirror_Ptr      defl    $
 129+ E449             >
 129+ E449 69 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44B             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44B             >
 129+ E44B             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44B             >
 129+ E44B             >//              ______________________________________________________________________
 129+ E44B             >//              Dictionary part
 129+ E44B             >
 129+ E44B             >                org     Dict_Ptr
 129+ 2767             >
 129+ 2767 49 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 2769             >
 129+ 2769             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 2769 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 276C             >
 129+ 276C             >
 129+ 276C             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 276C             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 276C             >
 129+ 276C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 276C 10 00       >                dw      16
 130+ 276E
 131+ 276E              //  ______________________________________________________________________
 132+ 276E              //
 133+ 276E              // +origin         --
 134+ 276E              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 276E              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 276E              //              dw      PLUS                    // +
 137+ 276E              //              dw      EXIT                    // ;
 138+ 276E                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 276E             >
 138+ 276E             >Dict_Ptr        defl    $
 138+ 276E             >
 138+ 276E             >//              ______________________________________________________________________
 138+ 276E             >//              Heap part
 138+ 276E             >
 138+ 276E             >
 138+ 276E             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44B             >
 138+ E44B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44B             >Latest_Definition defl  Heap_Ptr
 138+ E44B             >
 138+ E44B             >                // dummy db directives used to calculate length of namec
 138+ E44B 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44F 47 49 4E    >
 138+ E452             >len_NFA         defl    $ - temp_NFA
 138+ E452             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44B             >
 138+ E44B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E450 47 49 4E    >
 138+ E453             >                org     $-1                 // alter last byte of Name just above to set
 138+ E452 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E453             >
 138+ E453 41 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E455             >Prev_Ptr        defl    Heap_Ptr
 138+ E455             >
 138+ E455             >mirror_Ptr      defl    $
 138+ E455             >
 138+ E455 70 27       >                dw      Dict_Ptr + 2        // xt
 138+ E457             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E457             >
 138+ E457             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E457             >
 138+ E457             >//              ______________________________________________________________________
 138+ E457             >//              Dictionary part
 138+ E457             >
 138+ E457             >                org     Dict_Ptr
 138+ 276E             >
 138+ 276E 55 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 2770             >
 138+ 2770             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 2770 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 2770 ~           >
 138+ 2770 ~           >
 138+ 2770             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 2770             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 2770             >
 138+ 2770             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 2770 D9                           exx
 140+ 2771 E1                           pop     hl
 141+ 2772 11 00 20                     ld      de, Cold_origin
 142+ 2775 19                           add     hl, de
 143+ 2776 E5                           push    hl
 144+ 2777 D9                           exx
 145+ 2778                              next
 145+ 2778 DD E9       >                jp      (ix)
 146+ 277A
 147+ 277A
 148+ 277A              //  ______________________________________________________________________
 149+ 277A              //
 150+ 277A                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 277A             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 277A             >
 150+ 277A             >Dict_Ptr        defl    $
 150+ 277A             >
 150+ 277A             >//              ______________________________________________________________________
 150+ 277A             >//              Heap part
 150+ 277A             >
 150+ 277A             >
 150+ 277A             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E457             >
 150+ E457             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E457             >Latest_Definition defl  Heap_Ptr
 150+ E457             >
 150+ E457             >                // dummy db directives used to calculate length of namec
 150+ E457 28 4E 45 58 >                db      "(NEXT)"
 150+ E45B 54 29       >
 150+ E45D             >len_NFA         defl    $ - temp_NFA
 150+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E457             >
 150+ E457 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E458 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45C 54 29       >
 150+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45D A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45E             >
 150+ E45E 4B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E460             >Prev_Ptr        defl    Heap_Ptr
 150+ E460             >
 150+ E460             >mirror_Ptr      defl    $
 150+ E460             >
 150+ E460 7C 27       >                dw      Dict_Ptr + 2        // xt
 150+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E462             >
 150+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E462             >
 150+ E462             >//              ______________________________________________________________________
 150+ E462             >//              Dictionary part
 150+ E462             >
 150+ E462             >                org     Dict_Ptr
 150+ 277A             >
 150+ 277A 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 277C             >
 150+ 277C             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 277C CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 277F             >
 150+ 277F             >
 150+ 277F             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 277F             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 277F             >
 150+ 277F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 277F 34 20       >                dw      Next_Ptr
 151+ 2781
 152+ 2781              //  ______________________________________________________________________
 153+ 2781              //
 154+ 2781
 155+ 2781                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 2781             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 2781             >
 155+ 2781             >Dict_Ptr        defl    $
 155+ 2781             >
 155+ 2781             >//              ______________________________________________________________________
 155+ 2781             >//              Heap part
 155+ 2781             >
 155+ 2781             >
 155+ 2781             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E462             >
 155+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E462             >Latest_Definition defl  Heap_Ptr
 155+ E462             >
 155+ E462             >                // dummy db directives used to calculate length of namec
 155+ E462 53 30       >                db      "S0"
 155+ E464             >len_NFA         defl    $ - temp_NFA
 155+ E464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E462             >
 155+ E462 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E463 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E465             >                org     $-1                 // alter last byte of Name just above to set
 155+ E464 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E465             >
 155+ E465 57 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E467             >Prev_Ptr        defl    Heap_Ptr
 155+ E467             >
 155+ E467             >mirror_Ptr      defl    $
 155+ E467             >
 155+ E467 83 27       >                dw      Dict_Ptr + 2        // xt
 155+ E469             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E469             >
 155+ E469             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E469             >
 155+ E469             >//              ______________________________________________________________________
 155+ E469             >//              Dictionary part
 155+ E469             >
 155+ E469             >                org     Dict_Ptr
 155+ 2781             >
 155+ 2781 67 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 2783             >
 155+ 2783             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 2783 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 2786             >
 155+ 2786             >
 155+ 2786             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 2786             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 2786             >
 155+ 2786             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 2786 06          >                db      06
 156+ 2787                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 2787             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 2787             >
 156+ 2787             >Dict_Ptr        defl    $
 156+ 2787             >
 156+ 2787             >//              ______________________________________________________________________
 156+ 2787             >//              Heap part
 156+ 2787             >
 156+ 2787             >
 156+ 2787             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E469             >
 156+ E469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E469             >Latest_Definition defl  Heap_Ptr
 156+ E469             >
 156+ E469             >                // dummy db directives used to calculate length of namec
 156+ E469 52 30       >                db      "R0"
 156+ E46B             >len_NFA         defl    $ - temp_NFA
 156+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E469             >
 156+ E469 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46B B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46C             >
 156+ E46C 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46E             >Prev_Ptr        defl    Heap_Ptr
 156+ E46E             >
 156+ E46E             >mirror_Ptr      defl    $
 156+ E46E             >
 156+ E46E 89 27       >                dw      Dict_Ptr + 2        // xt
 156+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E470             >
 156+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E470             >
 156+ E470             >//              ______________________________________________________________________
 156+ E470             >//              Dictionary part
 156+ E470             >
 156+ E470             >                org     Dict_Ptr
 156+ 2787             >
 156+ 2787 6E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 2789             >
 156+ 2789             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 2789 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 278C             >
 156+ 278C             >
 156+ 278C             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 278C             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 278C             >
 156+ 278C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 278C 08          >                db      08
 157+ 278D                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 278D             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 278D             >
 157+ 278D             >Dict_Ptr        defl    $
 157+ 278D             >
 157+ 278D             >//              ______________________________________________________________________
 157+ 278D             >//              Heap part
 157+ 278D             >
 157+ 278D             >
 157+ 278D             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E470             >
 157+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E470             >Latest_Definition defl  Heap_Ptr
 157+ E470             >
 157+ E470             >                // dummy db directives used to calculate length of namec
 157+ E470 54 49 42    >                db      "TIB"
 157+ E473             >len_NFA         defl    $ - temp_NFA
 157+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E470             >
 157+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E471 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E474             >                org     $-1                 // alter last byte of Name just above to set
 157+ E473 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E474             >
 157+ E474 69 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E476             >Prev_Ptr        defl    Heap_Ptr
 157+ E476             >
 157+ E476             >mirror_Ptr      defl    $
 157+ E476             >
 157+ E476 8F 27       >                dw      Dict_Ptr + 2        // xt
 157+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E478             >
 157+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E478             >
 157+ E478             >//              ______________________________________________________________________
 157+ E478             >//              Dictionary part
 157+ E478             >
 157+ E478             >                org     Dict_Ptr
 157+ 278D             >
 157+ 278D 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 278F             >
 157+ 278F             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 278F CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 2792             >
 157+ 2792             >
 157+ 2792             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 2792             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 2792             >
 157+ 2792             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 2792 0A          >                db      10
 158+ 2793                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 2793             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 2793             >
 158+ 2793             >Dict_Ptr        defl    $
 158+ 2793             >
 158+ 2793             >//              ______________________________________________________________________
 158+ 2793             >//              Heap part
 158+ 2793             >
 158+ 2793             >
 158+ 2793             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E478             >
 158+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E478             >Latest_Definition defl  Heap_Ptr
 158+ E478             >
 158+ E478             >                // dummy db directives used to calculate length of namec
 158+ E478 57 49 44 54 >                db      "WIDTH"
 158+ E47C 48          >
 158+ E47D             >len_NFA         defl    $ - temp_NFA
 158+ E47D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E478             >
 158+ E478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E479 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47D 48          >
 158+ E47E             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47D C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47E             >
 158+ E47E 70 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E480             >Prev_Ptr        defl    Heap_Ptr
 158+ E480             >
 158+ E480             >mirror_Ptr      defl    $
 158+ E480             >
 158+ E480 95 27       >                dw      Dict_Ptr + 2        // xt
 158+ E482             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E482             >
 158+ E482             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E482             >
 158+ E482             >//              ______________________________________________________________________
 158+ E482             >//              Dictionary part
 158+ E482             >
 158+ E482             >                org     Dict_Ptr
 158+ 2793             >
 158+ 2793 80 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 2795             >
 158+ 2795             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 2795 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 2798             >
 158+ 2798             >
 158+ 2798             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 2798             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 2798             >
 158+ 2798             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 2798 0C          >                db      12
 159+ 2799                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 2799             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 2799             >
 159+ 2799             >Dict_Ptr        defl    $
 159+ 2799             >
 159+ 2799             >//              ______________________________________________________________________
 159+ 2799             >//              Heap part
 159+ 2799             >
 159+ 2799             >
 159+ 2799             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E482             >
 159+ E482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E482             >Latest_Definition defl  Heap_Ptr
 159+ E482             >
 159+ E482             >                // dummy db directives used to calculate length of namec
 159+ E482 57 41 52 4E >                db      "WARNING"
 159+ E486 49 4E 47    >
 159+ E489             >len_NFA         defl    $ - temp_NFA
 159+ E489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E482             >
 159+ E482 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E483 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E487 49 4E 47    >
 159+ E48A             >                org     $-1                 // alter last byte of Name just above to set
 159+ E489 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48A             >
 159+ E48A 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48C             >Prev_Ptr        defl    Heap_Ptr
 159+ E48C             >
 159+ E48C             >mirror_Ptr      defl    $
 159+ E48C             >
 159+ E48C 9B 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48E             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48E             >
 159+ E48E             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48E             >
 159+ E48E             >//              ______________________________________________________________________
 159+ E48E             >//              Dictionary part
 159+ E48E             >
 159+ E48E             >                org     Dict_Ptr
 159+ 2799             >
 159+ 2799 8C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 279B             >
 159+ 279B             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 279B CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 279E             >
 159+ 279E             >
 159+ 279E             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 279E             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 279E             >
 159+ 279E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 279E 0E          >                db      14
 160+ 279F                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 279F             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 279F             >
 160+ 279F             >Dict_Ptr        defl    $
 160+ 279F             >
 160+ 279F             >//              ______________________________________________________________________
 160+ 279F             >//              Heap part
 160+ 279F             >
 160+ 279F             >
 160+ 279F             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48E             >
 160+ E48E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48E             >Latest_Definition defl  Heap_Ptr
 160+ E48E             >
 160+ E48E             >                // dummy db directives used to calculate length of namec
 160+ E48E 46 45 4E 43 >                db      "FENCE"
 160+ E492 45          >
 160+ E493             >len_NFA         defl    $ - temp_NFA
 160+ E493             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48E             >
 160+ E48E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48F 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E493 45          >
 160+ E494             >                org     $-1                 // alter last byte of Name just above to set
 160+ E493 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E494             >
 160+ E494 82 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E496             >Prev_Ptr        defl    Heap_Ptr
 160+ E496             >
 160+ E496             >mirror_Ptr      defl    $
 160+ E496             >
 160+ E496 A1 27       >                dw      Dict_Ptr + 2        // xt
 160+ E498             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E498             >
 160+ E498             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E498             >
 160+ E498             >//              ______________________________________________________________________
 160+ E498             >//              Dictionary part
 160+ E498             >
 160+ E498             >                org     Dict_Ptr
 160+ 279F             >
 160+ 279F 96 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27A1             >
 160+ 27A1             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27A1 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27A4             >
 160+ 27A4             >
 160+ 27A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27A4             >
 160+ 27A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27A4 10          >                db      16
 161+ 27A5                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27A5             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27A5             >
 161+ 27A5             >Dict_Ptr        defl    $
 161+ 27A5             >
 161+ 27A5             >//              ______________________________________________________________________
 161+ 27A5             >//              Heap part
 161+ 27A5             >
 161+ 27A5             >
 161+ 27A5             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E498             >
 161+ E498             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E498             >Latest_Definition defl  Heap_Ptr
 161+ E498             >
 161+ E498             >                // dummy db directives used to calculate length of namec
 161+ E498 44 50       >                db      "DP"
 161+ E49A             >len_NFA         defl    $ - temp_NFA
 161+ E49A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E498             >
 161+ E498 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E499 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49B             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49B             >
 161+ E49B 8E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49D             >Prev_Ptr        defl    Heap_Ptr
 161+ E49D             >
 161+ E49D             >mirror_Ptr      defl    $
 161+ E49D             >
 161+ E49D A7 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49F             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49F             >
 161+ E49F             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49F             >
 161+ E49F             >//              ______________________________________________________________________
 161+ E49F             >//              Dictionary part
 161+ E49F             >
 161+ E49F             >                org     Dict_Ptr
 161+ 27A5             >
 161+ 27A5 9D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27A7             >
 161+ 27A7             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27A7 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27AA             >
 161+ 27AA             >
 161+ 27AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27AA             >
 161+ 27AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27AA 12          >                db      18
 162+ 27AB                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27AB             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27AB             >
 162+ 27AB             >Dict_Ptr        defl    $
 162+ 27AB             >
 162+ 27AB             >//              ______________________________________________________________________
 162+ 27AB             >//              Heap part
 162+ 27AB             >
 162+ 27AB             >
 162+ 27AB             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49F             >
 162+ E49F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49F             >Latest_Definition defl  Heap_Ptr
 162+ E49F             >
 162+ E49F             >                // dummy db directives used to calculate length of namec
 162+ E49F 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A3 4C 49 4E 4B >
 162+ E4A7             >len_NFA         defl    $ - temp_NFA
 162+ E4A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49F             >
 162+ E49F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A7 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A8             >
 162+ E4A8 98 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AA             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >mirror_Ptr      defl    $
 162+ E4AA             >
 162+ E4AA AD 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AC             >
 162+ E4AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AC             >
 162+ E4AC             >//              ______________________________________________________________________
 162+ E4AC             >//              Dictionary part
 162+ E4AC             >
 162+ E4AC             >                org     Dict_Ptr
 162+ 27AB             >
 162+ 27AB AA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27AD             >
 162+ 27AD             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27AD CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27B0             >
 162+ 27B0             >
 162+ 27B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27B0             >
 162+ 27B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27B0 14          >                db      20
 163+ 27B1                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27B1             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27B1             >
 163+ 27B1             >Dict_Ptr        defl    $
 163+ 27B1             >
 163+ 27B1             >//              ______________________________________________________________________
 163+ 27B1             >//              Heap part
 163+ 27B1             >
 163+ 27B1             >
 163+ 27B1             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AC             >
 163+ E4AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AC             >Latest_Definition defl  Heap_Ptr
 163+ E4AC             >
 163+ E4AC             >                // dummy db directives used to calculate length of namec
 163+ E4AC 46 49 52 53 >                db      "FIRST"
 163+ E4B0 54          >
 163+ E4B1             >len_NFA         defl    $ - temp_NFA
 163+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AC             >
 163+ E4AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B1 54          >
 163+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B1 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B2             >
 163+ E4B2 9F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >mirror_Ptr      defl    $
 163+ E4B4             >
 163+ E4B4 B3 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B6             >
 163+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B6             >
 163+ E4B6             >//              ______________________________________________________________________
 163+ E4B6             >//              Dictionary part
 163+ E4B6             >
 163+ E4B6             >                org     Dict_Ptr
 163+ 27B1             >
 163+ 27B1 B4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27B3             >
 163+ 27B3             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27B3 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27B6             >
 163+ 27B6             >
 163+ 27B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27B6             >
 163+ 27B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27B6 16          >                db      22
 164+ 27B7                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27B7             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27B7             >
 164+ 27B7             >Dict_Ptr        defl    $
 164+ 27B7             >
 164+ 27B7             >//              ______________________________________________________________________
 164+ 27B7             >//              Heap part
 164+ 27B7             >
 164+ 27B7             >
 164+ 27B7             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B6             >
 164+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B6             >Latest_Definition defl  Heap_Ptr
 164+ E4B6             >
 164+ E4B6             >                // dummy db directives used to calculate length of namec
 164+ E4B6 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BA 54          >
 164+ E4BB             >len_NFA         defl    $ - temp_NFA
 164+ E4BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B6             >
 164+ E4B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BB 54          >
 164+ E4BC             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BB D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BC             >
 164+ E4BC AC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BE             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >mirror_Ptr      defl    $
 164+ E4BE             >
 164+ E4BE B9 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C0             >
 164+ E4C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C0             >
 164+ E4C0             >//              ______________________________________________________________________
 164+ E4C0             >//              Dictionary part
 164+ E4C0             >
 164+ E4C0             >                org     Dict_Ptr
 164+ 27B7             >
 164+ 27B7 BE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27B9             >
 164+ 27B9             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27B9 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27BC             >
 164+ 27BC             >
 164+ 27BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27BC             >
 164+ 27BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27BC 18          >                db      24
 165+ 27BD                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27BD             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27BD             >
 165+ 27BD             >Dict_Ptr        defl    $
 165+ 27BD             >
 165+ 27BD             >//              ______________________________________________________________________
 165+ 27BD             >//              Heap part
 165+ 27BD             >
 165+ 27BD             >
 165+ 27BD             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C0             >
 165+ E4C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C0             >Latest_Definition defl  Heap_Ptr
 165+ E4C0             >
 165+ E4C0             >                // dummy db directives used to calculate length of namec
 165+ E4C0 48 50       >                db      "HP"
 165+ E4C2             >len_NFA         defl    $ - temp_NFA
 165+ E4C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C0             >
 165+ E4C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C1 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C3             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C2 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C3             >
 165+ E4C3 B6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C5             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C5             >
 165+ E4C5             >mirror_Ptr      defl    $
 165+ E4C5             >
 165+ E4C5 BF 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C7             >
 165+ E4C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C7             >
 165+ E4C7             >//              ______________________________________________________________________
 165+ E4C7             >//              Dictionary part
 165+ E4C7             >
 165+ E4C7             >                org     Dict_Ptr
 165+ 27BD             >
 165+ 27BD C5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27BF             >
 165+ 27BF             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27BF CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27C2             >
 165+ 27C2             >
 165+ 27C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27C2             >
 165+ 27C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27C2 1A          >                db      26
 166+ 27C3                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27C3             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27C3             >
 166+ 27C3             >Dict_Ptr        defl    $
 166+ 27C3             >
 166+ 27C3             >//              ______________________________________________________________________
 166+ 27C3             >//              Heap part
 166+ 27C3             >
 166+ 27C3             >
 166+ 27C3             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C7             >
 166+ E4C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C7             >Latest_Definition defl  Heap_Ptr
 166+ E4C7             >
 166+ E4C7             >                // dummy db directives used to calculate length of namec
 166+ E4C7 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CB 45          >
 166+ E4CC             >len_NFA         defl    $ - temp_NFA
 166+ E4CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C7             >
 166+ E4C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CC 45          >
 166+ E4CD             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CC C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CD             >
 166+ E4CD C0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CF             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >mirror_Ptr      defl    $
 166+ E4CF             >
 166+ E4CF C5 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D1             >
 166+ E4D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D1             >
 166+ E4D1             >//              ______________________________________________________________________
 166+ E4D1             >//              Dictionary part
 166+ E4D1             >
 166+ E4D1             >                org     Dict_Ptr
 166+ 27C3             >
 166+ 27C3 CF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27C5             >
 166+ 27C5             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27C5 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27C8             >
 166+ 27C8             >
 166+ 27C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27C8             >
 166+ 27C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27C8 1C          >                db      28
 167+ 27C9                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27C9             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27C9             >
 167+ 27C9             >Dict_Ptr        defl    $
 167+ 27C9             >
 167+ 27C9             >//              ______________________________________________________________________
 167+ 27C9             >//              Heap part
 167+ 27C9             >
 167+ 27C9             >
 167+ 27C9             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D1             >
 167+ E4D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D1             >Latest_Definition defl  Heap_Ptr
 167+ E4D1             >
 167+ E4D1             >                // dummy db directives used to calculate length of namec
 167+ E4D1 42 4C 4B    >                db      "BLK"
 167+ E4D4             >len_NFA         defl    $ - temp_NFA
 167+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D1             >
 167+ E4D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D2 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D4 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D5             >
 167+ E4D5 C7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D7             >
 167+ E4D7             >mirror_Ptr      defl    $
 167+ E4D7             >
 167+ E4D7 CB 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D9             >
 167+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D9             >
 167+ E4D9             >//              ______________________________________________________________________
 167+ E4D9             >//              Dictionary part
 167+ E4D9             >
 167+ E4D9             >                org     Dict_Ptr
 167+ 27C9             >
 167+ 27C9 D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27CB             >
 167+ 27CB             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27CB CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27CE             >
 167+ 27CE             >
 167+ 27CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27CE             >
 167+ 27CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27CE 1E          >                db      30
 168+ 27CF                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27CF             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27CF             >
 168+ 27CF             >Dict_Ptr        defl    $
 168+ 27CF             >
 168+ 27CF             >//              ______________________________________________________________________
 168+ 27CF             >//              Heap part
 168+ 27CF             >
 168+ 27CF             >
 168+ 27CF             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D9             >
 168+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D9             >Latest_Definition defl  Heap_Ptr
 168+ E4D9             >
 168+ E4D9             >                // dummy db directives used to calculate length of namec
 168+ E4D9 3E 49 4E    >                db      ">IN"
 168+ E4DC             >len_NFA         defl    $ - temp_NFA
 168+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D9             >
 168+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DA 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DC CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DD             >
 168+ E4DD D1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DF             >
 168+ E4DF             >mirror_Ptr      defl    $
 168+ E4DF             >
 168+ E4DF D1 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E1             >
 168+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E1             >
 168+ E4E1             >//              ______________________________________________________________________
 168+ E4E1             >//              Dictionary part
 168+ E4E1             >
 168+ E4E1             >                org     Dict_Ptr
 168+ 27CF             >
 168+ 27CF DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27D1             >
 168+ 27D1             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27D1 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27D4             >
 168+ 27D4             >
 168+ 27D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27D4             >
 168+ 27D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27D4 20          >                db      32
 169+ 27D5                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27D5             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27D5             >
 169+ 27D5             >Dict_Ptr        defl    $
 169+ 27D5             >
 169+ 27D5             >//              ______________________________________________________________________
 169+ 27D5             >//              Heap part
 169+ 27D5             >
 169+ 27D5             >
 169+ 27D5             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E1             >
 169+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E1             >Latest_Definition defl  Heap_Ptr
 169+ E4E1             >
 169+ E4E1             >                // dummy db directives used to calculate length of namec
 169+ E4E1 4F 55 54    >                db      "OUT"
 169+ E4E4             >len_NFA         defl    $ - temp_NFA
 169+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E1             >
 169+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E5             >
 169+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E7             >
 169+ E4E7             >mirror_Ptr      defl    $
 169+ E4E7             >
 169+ E4E7 D7 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E9             >
 169+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E9             >
 169+ E4E9             >//              ______________________________________________________________________
 169+ E4E9             >//              Dictionary part
 169+ E4E9             >
 169+ E4E9             >                org     Dict_Ptr
 169+ 27D5             >
 169+ 27D5 E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27D7             >
 169+ 27D7             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27D7 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27DA             >
 169+ 27DA             >
 169+ 27DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27DA             >
 169+ 27DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27DA 22          >                db      34
 170+ 27DB                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27DB             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27DB             >
 170+ 27DB             >Dict_Ptr        defl    $
 170+ 27DB             >
 170+ 27DB             >//              ______________________________________________________________________
 170+ 27DB             >//              Heap part
 170+ 27DB             >
 170+ 27DB             >
 170+ 27DB             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E9             >
 170+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E9             >Latest_Definition defl  Heap_Ptr
 170+ E4E9             >
 170+ E4E9             >                // dummy db directives used to calculate length of namec
 170+ E4E9 53 43 52    >                db      "SCR"
 170+ E4EC             >len_NFA         defl    $ - temp_NFA
 170+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E9             >
 170+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EA 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EC D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4ED             >
 170+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EF             >
 170+ E4EF             >mirror_Ptr      defl    $
 170+ E4EF             >
 170+ E4EF DD 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F1             >
 170+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F1             >
 170+ E4F1             >//              ______________________________________________________________________
 170+ E4F1             >//              Dictionary part
 170+ E4F1             >
 170+ E4F1             >                org     Dict_Ptr
 170+ 27DB             >
 170+ 27DB EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27DD             >
 170+ 27DD             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27DD CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 27E0             >
 170+ 27E0             >
 170+ 27E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 27E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 27E0             >
 170+ 27E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 27E0 24          >                db      36
 171+ 27E1                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 27E1             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 27E1             >
 171+ 27E1             >Dict_Ptr        defl    $
 171+ 27E1             >
 171+ 27E1             >//              ______________________________________________________________________
 171+ 27E1             >//              Heap part
 171+ 27E1             >
 171+ 27E1             >
 171+ 27E1             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F1             >
 171+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F1             >Latest_Definition defl  Heap_Ptr
 171+ E4F1             >
 171+ E4F1             >                // dummy db directives used to calculate length of namec
 171+ E4F1 4F 46 46 53 >                db      "OFFSET"
 171+ E4F5 45 54       >
 171+ E4F7             >len_NFA         defl    $ - temp_NFA
 171+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F1             >
 171+ E4F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F6 45 54       >
 171+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F7 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F8             >
 171+ E4F8 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FA             >
 171+ E4FA             >mirror_Ptr      defl    $
 171+ E4FA             >
 171+ E4FA E3 27       >                dw      Dict_Ptr + 2        // xt
 171+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FC             >
 171+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FC             >
 171+ E4FC             >//              ______________________________________________________________________
 171+ E4FC             >//              Dictionary part
 171+ E4FC             >
 171+ E4FC             >                org     Dict_Ptr
 171+ 27E1             >
 171+ 27E1 FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 27E3             >
 171+ 27E3             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 27E3 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27E6             >
 171+ 27E6             >
 171+ 27E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27E6             >
 171+ 27E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27E6 26          >                db      38
 172+ 27E7                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27E7             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27E7             >
 172+ 27E7             >Dict_Ptr        defl    $
 172+ 27E7             >
 172+ 27E7             >//              ______________________________________________________________________
 172+ 27E7             >//              Heap part
 172+ 27E7             >
 172+ 27E7             >
 172+ 27E7             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FC             >
 172+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FC             >Latest_Definition defl  Heap_Ptr
 172+ E4FC             >
 172+ E4FC             >                // dummy db directives used to calculate length of namec
 172+ E4FC 43 4F 4E 54 >                db      "CONTEXT"
 172+ E500 45 58 54    >
 172+ E503             >len_NFA         defl    $ - temp_NFA
 172+ E503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FC             >
 172+ E4FC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E501 45 58 54    >
 172+ E504             >                org     $-1                 // alter last byte of Name just above to set
 172+ E503 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E504             >
 172+ E504 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E506             >Prev_Ptr        defl    Heap_Ptr
 172+ E506             >
 172+ E506             >mirror_Ptr      defl    $
 172+ E506             >
 172+ E506 E9 27       >                dw      Dict_Ptr + 2        // xt
 172+ E508             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E508             >
 172+ E508             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E508             >
 172+ E508             >//              ______________________________________________________________________
 172+ E508             >//              Dictionary part
 172+ E508             >
 172+ E508             >                org     Dict_Ptr
 172+ 27E7             >
 172+ 27E7 06 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27E9             >
 172+ 27E9             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27E9 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 27EC             >
 172+ 27EC             >
 172+ 27EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 27EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 27EC             >
 172+ 27EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 27EC 28          >                db      40
 173+ 27ED                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 27ED             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 27ED             >
 173+ 27ED             >Dict_Ptr        defl    $
 173+ 27ED             >
 173+ 27ED             >//              ______________________________________________________________________
 173+ 27ED             >//              Heap part
 173+ 27ED             >
 173+ 27ED             >
 173+ 27ED             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E508             >
 173+ E508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E508             >Latest_Definition defl  Heap_Ptr
 173+ E508             >
 173+ E508             >                // dummy db directives used to calculate length of namec
 173+ E508 43 55 52 52 >                db      "CURRENT"
 173+ E50C 45 4E 54    >
 173+ E50F             >len_NFA         defl    $ - temp_NFA
 173+ E50F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E508             >
 173+ E508 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E509 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50D 45 4E 54    >
 173+ E510             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50F D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E510             >
 173+ E510 FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E512             >Prev_Ptr        defl    Heap_Ptr
 173+ E512             >
 173+ E512             >mirror_Ptr      defl    $
 173+ E512             >
 173+ E512 EF 27       >                dw      Dict_Ptr + 2        // xt
 173+ E514             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E514             >
 173+ E514             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E514             >
 173+ E514             >//              ______________________________________________________________________
 173+ E514             >//              Dictionary part
 173+ E514             >
 173+ E514             >                org     Dict_Ptr
 173+ 27ED             >
 173+ 27ED 12 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 27EF             >
 173+ 27EF             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 27EF CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 27F2             >
 173+ 27F2             >
 173+ 27F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 27F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 27F2             >
 173+ 27F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 27F2 2A          >                db      42
 174+ 27F3                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 27F3             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 27F3             >
 174+ 27F3             >Dict_Ptr        defl    $
 174+ 27F3             >
 174+ 27F3             >//              ______________________________________________________________________
 174+ 27F3             >//              Heap part
 174+ 27F3             >
 174+ 27F3             >
 174+ 27F3             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E514             >
 174+ E514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E514             >Latest_Definition defl  Heap_Ptr
 174+ E514             >
 174+ E514             >                // dummy db directives used to calculate length of namec
 174+ E514 53 54 41 54 >                db      "STATE"
 174+ E518 45          >
 174+ E519             >len_NFA         defl    $ - temp_NFA
 174+ E519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E514             >
 174+ E514 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E515 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E519 45          >
 174+ E51A             >                org     $-1                 // alter last byte of Name just above to set
 174+ E519 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51A             >
 174+ E51A 08 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51C             >Prev_Ptr        defl    Heap_Ptr
 174+ E51C             >
 174+ E51C             >mirror_Ptr      defl    $
 174+ E51C             >
 174+ E51C F5 27       >                dw      Dict_Ptr + 2        // xt
 174+ E51E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51E             >
 174+ E51E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51E             >
 174+ E51E             >//              ______________________________________________________________________
 174+ E51E             >//              Dictionary part
 174+ E51E             >
 174+ E51E             >                org     Dict_Ptr
 174+ 27F3             >
 174+ 27F3 1C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 27F5             >
 174+ 27F5             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 27F5 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 27F8             >
 174+ 27F8             >
 174+ 27F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 27F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 27F8             >
 174+ 27F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 27F8 2C          >                db      44
 175+ 27F9                              User_Def BASE       , "BASE"      , 46 //
 175+ 27F9             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 27F9             >
 175+ 27F9             >Dict_Ptr        defl    $
 175+ 27F9             >
 175+ 27F9             >//              ______________________________________________________________________
 175+ 27F9             >//              Heap part
 175+ 27F9             >
 175+ 27F9             >
 175+ 27F9             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51E             >
 175+ E51E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51E             >Latest_Definition defl  Heap_Ptr
 175+ E51E             >
 175+ E51E             >                // dummy db directives used to calculate length of namec
 175+ E51E 42 41 53 45 >                db      "BASE"
 175+ E522             >len_NFA         defl    $ - temp_NFA
 175+ E522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51E             >
 175+ E51E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51F 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E523             >                org     $-1                 // alter last byte of Name just above to set
 175+ E522 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E523             >
 175+ E523 14 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E525             >Prev_Ptr        defl    Heap_Ptr
 175+ E525             >
 175+ E525             >mirror_Ptr      defl    $
 175+ E525             >
 175+ E525 FB 27       >                dw      Dict_Ptr + 2        // xt
 175+ E527             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E527             >
 175+ E527             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E527             >
 175+ E527             >//              ______________________________________________________________________
 175+ E527             >//              Dictionary part
 175+ E527             >
 175+ E527             >                org     Dict_Ptr
 175+ 27F9             >
 175+ 27F9 25 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 27FB             >
 175+ 27FB             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 27FB CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 27FE             >
 175+ 27FE             >
 175+ 27FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 27FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 27FE             >
 175+ 27FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 27FE 2E          >                db      46
 176+ 27FF                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 27FF             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 27FF             >
 176+ 27FF             >Dict_Ptr        defl    $
 176+ 27FF             >
 176+ 27FF             >//              ______________________________________________________________________
 176+ 27FF             >//              Heap part
 176+ 27FF             >
 176+ 27FF             >
 176+ 27FF             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E527             >
 176+ E527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E527             >Latest_Definition defl  Heap_Ptr
 176+ E527             >
 176+ E527             >                // dummy db directives used to calculate length of namec
 176+ E527 44 50 4C    >                db      "DPL"
 176+ E52A             >len_NFA         defl    $ - temp_NFA
 176+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E527             >
 176+ E527 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E528 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52A CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52B             >
 176+ E52B 1E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52D             >Prev_Ptr        defl    Heap_Ptr
 176+ E52D             >
 176+ E52D             >mirror_Ptr      defl    $
 176+ E52D             >
 176+ E52D 01 28       >                dw      Dict_Ptr + 2        // xt
 176+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52F             >
 176+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52F             >
 176+ E52F             >//              ______________________________________________________________________
 176+ E52F             >//              Dictionary part
 176+ E52F             >
 176+ E52F             >                org     Dict_Ptr
 176+ 27FF             >
 176+ 27FF 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 2801             >
 176+ 2801             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 2801 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2804             >
 176+ 2804             >
 176+ 2804             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2804             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2804             >
 176+ 2804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2804 30          >                db      48
 177+ 2805                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 2805             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 2805             >
 177+ 2805             >Dict_Ptr        defl    $
 177+ 2805             >
 177+ 2805             >//              ______________________________________________________________________
 177+ 2805             >//              Heap part
 177+ 2805             >
 177+ 2805             >
 177+ 2805             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52F             >
 177+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52F             >Latest_Definition defl  Heap_Ptr
 177+ E52F             >
 177+ E52F             >                // dummy db directives used to calculate length of namec
 177+ E52F 46 4C 44    >                db      "FLD"
 177+ E532             >len_NFA         defl    $ - temp_NFA
 177+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52F             >
 177+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E530 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E533             >                org     $-1                 // alter last byte of Name just above to set
 177+ E532 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E533             >
 177+ E533 27 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E535             >Prev_Ptr        defl    Heap_Ptr
 177+ E535             >
 177+ E535             >mirror_Ptr      defl    $
 177+ E535             >
 177+ E535 07 28       >                dw      Dict_Ptr + 2        // xt
 177+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E537             >
 177+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E537             >
 177+ E537             >//              ______________________________________________________________________
 177+ E537             >//              Dictionary part
 177+ E537             >
 177+ E537             >                org     Dict_Ptr
 177+ 2805             >
 177+ 2805 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2807             >
 177+ 2807             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2807 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 280A             >
 177+ 280A             >
 177+ 280A             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 280A             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 280A             >
 177+ 280A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 280A 32          >                db      50
 178+ 280B                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 280B             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 280B             >
 178+ 280B             >Dict_Ptr        defl    $
 178+ 280B             >
 178+ 280B             >//              ______________________________________________________________________
 178+ 280B             >//              Heap part
 178+ 280B             >
 178+ 280B             >
 178+ 280B             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E537             >
 178+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E537             >Latest_Definition defl  Heap_Ptr
 178+ E537             >
 178+ E537             >                // dummy db directives used to calculate length of namec
 178+ E537 43 53 50    >                db      "CSP"
 178+ E53A             >len_NFA         defl    $ - temp_NFA
 178+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E537             >
 178+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E538 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53A D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53B             >
 178+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53D             >Prev_Ptr        defl    Heap_Ptr
 178+ E53D             >
 178+ E53D             >mirror_Ptr      defl    $
 178+ E53D             >
 178+ E53D 0D 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53F             >
 178+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53F             >
 178+ E53F             >//              ______________________________________________________________________
 178+ E53F             >//              Dictionary part
 178+ E53F             >
 178+ E53F             >                org     Dict_Ptr
 178+ 280B             >
 178+ 280B 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 280D             >
 178+ 280D             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 280D CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 2810             >
 178+ 2810             >
 178+ 2810             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 2810             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 2810             >
 178+ 2810             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 2810 34          >                db      52
 179+ 2811                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 2811             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 2811             >
 179+ 2811             >Dict_Ptr        defl    $
 179+ 2811             >
 179+ 2811             >//              ______________________________________________________________________
 179+ 2811             >//              Heap part
 179+ 2811             >
 179+ 2811             >
 179+ 2811             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53F             >
 179+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53F             >Latest_Definition defl  Heap_Ptr
 179+ E53F             >
 179+ E53F             >                // dummy db directives used to calculate length of namec
 179+ E53F 52 23       >                db      "R#"
 179+ E541             >len_NFA         defl    $ - temp_NFA
 179+ E541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53F             >
 179+ E53F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E540 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E542             >                org     $-1                 // alter last byte of Name just above to set
 179+ E541 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E542             >
 179+ E542 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E544             >Prev_Ptr        defl    Heap_Ptr
 179+ E544             >
 179+ E544             >mirror_Ptr      defl    $
 179+ E544             >
 179+ E544 13 28       >                dw      Dict_Ptr + 2        // xt
 179+ E546             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E546             >
 179+ E546             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E546             >
 179+ E546             >//              ______________________________________________________________________
 179+ E546             >//              Dictionary part
 179+ E546             >
 179+ E546             >                org     Dict_Ptr
 179+ 2811             >
 179+ 2811 44 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 2813             >
 179+ 2813             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 2813 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2816             >
 179+ 2816             >
 179+ 2816             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2816             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2816             >
 179+ 2816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2816 36          >                db      54
 180+ 2817                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2817             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2817             >
 180+ 2817             >Dict_Ptr        defl    $
 180+ 2817             >
 180+ 2817             >//              ______________________________________________________________________
 180+ 2817             >//              Heap part
 180+ 2817             >
 180+ 2817             >
 180+ 2817             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E546             >
 180+ E546             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E546             >Latest_Definition defl  Heap_Ptr
 180+ E546             >
 180+ E546             >                // dummy db directives used to calculate length of namec
 180+ E546 48 4C 44    >                db      "HLD"
 180+ E549             >len_NFA         defl    $ - temp_NFA
 180+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E546             >
 180+ E546 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E547 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 180+ E549 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54A             >
 180+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54C             >Prev_Ptr        defl    Heap_Ptr
 180+ E54C             >
 180+ E54C             >mirror_Ptr      defl    $
 180+ E54C             >
 180+ E54C 19 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54E             >
 180+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54E             >
 180+ E54E             >//              ______________________________________________________________________
 180+ E54E             >//              Dictionary part
 180+ E54E             >
 180+ E54E             >                org     Dict_Ptr
 180+ 2817             >
 180+ 2817 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 2819             >
 180+ 2819             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 2819 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 281C             >
 180+ 281C             >
 180+ 281C             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 281C             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 281C             >
 180+ 281C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 281C 38          >                db      56
 181+ 281D                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 281D             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 281D             >
 181+ 281D             >Dict_Ptr        defl    $
 181+ 281D             >
 181+ 281D             >//              ______________________________________________________________________
 181+ 281D             >//              Heap part
 181+ 281D             >
 181+ 281D             >
 181+ 281D             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54E             >
 181+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54E             >Latest_Definition defl  Heap_Ptr
 181+ E54E             >
 181+ E54E             >                // dummy db directives used to calculate length of namec
 181+ E54E 55 53 45 44 >                db      "USED"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54E             >
 181+ E54E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54F 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 46 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 1F 28       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 281D             >
 181+ 281D 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 281F             >
 181+ 281F             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 281F CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 2822             >
 181+ 2822             >
 181+ 2822             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 2822             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 2822             >
 181+ 2822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 2822 3A          >                db      58
 182+ 2823                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2823             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2823             >
 182+ 2823             >Dict_Ptr        defl    $
 182+ 2823             >
 182+ 2823             >//              ______________________________________________________________________
 182+ 2823             >//              Heap part
 182+ 2823             >
 182+ 2823             >
 182+ 2823             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 25 28       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 2823             >
 182+ 2823 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 2825             >
 182+ 2825             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 2825 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 2828             >
 182+ 2828             >
 182+ 2828             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 2828             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 2828             >
 182+ 2828             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 2828 3C          >                db      60
 183+ 2829                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 2829             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 2829             >
 183+ 2829             >Dict_Ptr        defl    $
 183+ 2829             >
 183+ 2829             >//              ______________________________________________________________________
 183+ 2829             >//              Heap part
 183+ 2829             >
 183+ 2829             >
 183+ 2829             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 2B 28       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 2829             >
 183+ 2829 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 282B             >
 183+ 282B             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 282B CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 282E             >
 183+ 282E             >
 183+ 282E             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 282E             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 282E             >
 183+ 282E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 282E 3E          >                db      62
 184+ 282F                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 282F             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 282F             >
 184+ 282F             >Dict_Ptr        defl    $
 184+ 282F             >
 184+ 282F             >//              ______________________________________________________________________
 184+ 282F             >//              Heap part
 184+ 282F             >
 184+ 282F             >
 184+ 282F             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 31 28       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 282F             >
 184+ 282F 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 2831             >
 184+ 2831             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 2831 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2834             >
 184+ 2834             >
 184+ 2834             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2834             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2834             >
 184+ 2834             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2834 40          >                db      64
 185+ 2835                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 2835             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 2835             >
 185+ 2835             >Dict_Ptr        defl    $
 185+ 2835             >
 185+ 2835             >//              ______________________________________________________________________
 185+ 2835             >//              Heap part
 185+ 2835             >
 185+ 2835             >
 185+ 2835             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 37 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 2835             >
 185+ 2835 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2837             >
 185+ 2837             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2837 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 283A             >
 185+ 283A             >
 185+ 283A             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 283A             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 283A             >
 185+ 283A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 283A 42          >                db      66
 186+ 283B                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 283B             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 283B             >
 186+ 283B             >Dict_Ptr        defl    $
 186+ 283B             >
 186+ 283B             >//              ______________________________________________________________________
 186+ 283B             >//              Heap part
 186+ 283B             >
 186+ 283B             >
 186+ 283B             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 3D 28       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 283B             >
 186+ 283B 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 283D             >
 186+ 283D             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 283D CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 2840             >
 186+ 2840             >
 186+ 2840             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 2840             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 2840             >
 186+ 2840             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 2840 44          >                db      68
 187+ 2841                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 2841             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 2841             >
 187+ 2841             >Dict_Ptr        defl    $
 187+ 2841             >
 187+ 2841             >//              ______________________________________________________________________
 187+ 2841             >//              Heap part
 187+ 2841             >
 187+ 2841             >
 187+ 2841             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 43 28       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 2841             >
 187+ 2841 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2843             >
 187+ 2843             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2843 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2846             >
 187+ 2846             >
 187+ 2846             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2846             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2846             >
 187+ 2846             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2846 46          >                db      70
 188+ 2847                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2847             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2847             >
 188+ 2847             >Dict_Ptr        defl    $
 188+ 2847             >
 188+ 2847             >//              ______________________________________________________________________
 188+ 2847             >//              Heap part
 188+ 2847             >
 188+ 2847             >
 188+ 2847             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A 49 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 2847             >
 188+ 2847 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 2849             >
 188+ 2849             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 2849 CD 1E 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 284C             >
 188+ 284C             >
 188+ 284C             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 284C             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 284C             >
 188+ 284C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 284C 48          >                db      72
 189+ 284D
 190+ 284D              //  ______________________________________________________________________
 191+ 284D              //
 192+ 284D              // here         -- a
 193+ 284D                              Colon_Def HERE, "HERE", is_normal
 193+ 284D             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 284D             >
 193+ 284D             >Dict_Ptr        defl    $
 193+ 284D             >
 193+ 284D             >//              ______________________________________________________________________
 193+ 284D             >//              Heap part
 193+ 284D             >
 193+ 284D             >
 193+ 284D             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 4F 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 284D             >
 193+ 284D A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 284F             >
 193+ 284F             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 284F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 2852             >
 193+ 2852             >
 193+ 2852             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 2852             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 2852             >
 193+ 2852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 2852 A7 27 34 26                  dw      DP, FETCH               // dp @
 195+ 2856 F4 24                        dw      EXIT                    // ;
 196+ 2858
 197+ 2858              //  ______________________________________________________________________
 198+ 2858              //
 199+ 2858              // allot        n --
 200+ 2858                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2858             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2858             >
 200+ 2858             >Dict_Ptr        defl    $
 200+ 2858             >
 200+ 2858             >//              ______________________________________________________________________
 200+ 2858             >//              Heap part
 200+ 2858             >
 200+ 2858             >
 200+ 2858             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD 5A 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 2858             >
 200+ 2858 AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 285A             >
 200+ 285A             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 285A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 285D             >
 200+ 285D             >
 200+ 285D             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 285D             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 285D             >
 200+ 285D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 285D A7 27 1C 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 2861 F4 24                        dw      EXIT                    // ;
 203+ 2863
 204+ 2863              //  ______________________________________________________________________
 205+ 2863              //
 206+ 2863              // comma        n --
 207+ 2863                              Colon_Def COMMA, ",", is_normal
 207+ 2863             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2863             >
 207+ 2863             >Dict_Ptr        defl    $
 207+ 2863             >
 207+ 2863             >//              ______________________________________________________________________
 207+ 2863             >//              Heap part
 207+ 2863             >
 207+ 2863             >
 207+ 2863             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 65 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 2863             >
 207+ 2863 B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 2865             >
 207+ 2865             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 2865 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2868             >
 207+ 2868             >
 207+ 2868             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2868             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2868             >
 207+ 2868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2868 4F 28 3E 26                  dw      HERE, STORE             // here !
 209+ 286C 38 27 5A 28                  dw      TWO, ALLOT              // 2 allot
 210+ 2870 F4 24                        dw      EXIT                    // ;
 211+ 2872
 212+ 2872              //  ______________________________________________________________________
 213+ 2872              //
 214+ 2872              // ccomma       c --
 215+ 2872                              Colon_Def CCOMMA, "C,", is_normal
 215+ 2872             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 2872             >
 215+ 2872             >Dict_Ptr        defl    $
 215+ 2872             >
 215+ 2872             >//              ______________________________________________________________________
 215+ 2872             >//              Heap part
 215+ 2872             >
 215+ 2872             >
 215+ 2872             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA 74 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 2872             >
 215+ 2872 BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2874             >
 215+ 2874             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2874 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2877             >
 215+ 2877             >
 215+ 2877             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2877             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2877             >
 215+ 2877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2877 4F 28 52 26                  dw      HERE, CSTORE            // here c!
 217+ 287B 31 27 5A 28                  dw      ONE, ALLOT              // 1 allot
 218+ 287F F4 24                        dw      EXIT                    // ;
 219+ 2881
 220+ 2881              //  ______________________________________________________________________
 221+ 2881              //
 222+ 2881              // hpcomma      n --
 223+ 2881              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 2881              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 2881              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 2881              //              dw      EXIT                    // ;
 227+ 2881
 228+ 2881              //  ______________________________________________________________________
 229+ 2881              //
 230+ 2881              // s>d          n -- d
 231+ 2881              // converts a single precision integer in a double precision
 232+ 2881                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 2881             >
 232+ 2881             >Dict_Ptr        defl    $
 232+ 2881             >
 232+ 2881             >//              ______________________________________________________________________
 232+ 2881             >//              Heap part
 232+ 2881             >
 232+ 2881             >
 232+ 2881             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BC             >
 232+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BC             >Latest_Definition defl  Heap_Ptr
 232+ E5BC             >
 232+ E5BC             >                // dummy db directives used to calculate length of namec
 232+ E5BC 53 3E 44    >                db      "S>D"
 232+ E5BF             >len_NFA         defl    $ - temp_NFA
 232+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BC             >
 232+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C0             >
 232+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C2             >
 232+ E5C2             >mirror_Ptr      defl    $
 232+ E5C2             >
 232+ E5C2 83 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C4             >
 232+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C4             >
 232+ E5C4             >//              ______________________________________________________________________
 232+ E5C4             >//              Dictionary part
 232+ E5C4             >
 232+ E5C4             >                org     Dict_Ptr
 232+ 2881             >
 232+ 2881 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 2883             >
 232+ 2883             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 2883 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 2883 ~           >
 232+ 2883 ~           >
 232+ 2883             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 2883             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 2883             >
 232+ 2883             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 2883 E1                           pop     hl
 234+ 2884 7C                           ld      a, h
 235+ 2885 E5                           push    hl
 236+ 2886 17                           rla
 237+ 2887 ED 62                        sbc     hl, hl
 238+ 2889 E5                           push    hl
 239+ 288A                              next
 239+ 288A DD E9       >                jp      (ix)
 240+ 288C
 241+ 288C              //  ______________________________________________________________________
 242+ 288C              //
 243+ 288C              // -            n1 n2 -- n3
 244+ 288C              // subtraction
 245+ 288C                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 288C             >
 245+ 288C             >Dict_Ptr        defl    $
 245+ 288C             >
 245+ 288C             >//              ______________________________________________________________________
 245+ 288C             >//              Heap part
 245+ 288C             >
 245+ 288C             >
 245+ 288C             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C4             >
 245+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C4             >Latest_Definition defl  Heap_Ptr
 245+ E5C4             >
 245+ E5C4             >                // dummy db directives used to calculate length of namec
 245+ E5C4 2D          >                db      "-"
 245+ E5C5             >len_NFA         defl    $ - temp_NFA
 245+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C4             >
 245+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C6             >
 245+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >mirror_Ptr      defl    $
 245+ E5C8             >
 245+ E5C8 8E 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CA             >
 245+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CA             >
 245+ E5CA             >//              ______________________________________________________________________
 245+ E5CA             >//              Dictionary part
 245+ E5CA             >
 245+ E5CA             >                org     Dict_Ptr
 245+ 288C             >
 245+ 288C C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 288E             >
 245+ 288E             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 288E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 288E ~           >
 245+ 288E ~           >
 245+ 288E             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 288E             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 288E             >
 245+ 288E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 288E D9                           exx
 247+ 288F D1                           pop     de
 248+ 2890 E1                           pop     hl
 249+ 2891 A7                           and     a
 250+ 2892 ED 52                        sbc     hl, de
 251+ 2894 E5                           push    hl
 252+ 2895 D9                           exx
 253+ 2896                              next
 253+ 2896 DD E9       >                jp      (ix)
 254+ 2898
 255+ 2898
 256+ 2898              //  ______________________________________________________________________
 257+ 2898              //
 258+ 2898              // =            n1 n2 -- n3
 259+ 2898              // equals
 260+ 2898                              Colon_Def EQUALS, "=", is_normal
 260+ 2898             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 2898             >
 260+ 2898             >Dict_Ptr        defl    $
 260+ 2898             >
 260+ 2898             >//              ______________________________________________________________________
 260+ 2898             >//              Heap part
 260+ 2898             >
 260+ 2898             >
 260+ 2898             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CA             >
 260+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CA             >Latest_Definition defl  Heap_Ptr
 260+ E5CA             >
 260+ E5CA             >                // dummy db directives used to calculate length of namec
 260+ E5CA 3D          >                db      "="
 260+ E5CB             >len_NFA         defl    $ - temp_NFA
 260+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CA             >
 260+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CC             >
 260+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >mirror_Ptr      defl    $
 260+ E5CE             >
 260+ E5CE 9A 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D0             >
 260+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D0             >
 260+ E5D0             >//              ______________________________________________________________________
 260+ E5D0             >//              Dictionary part
 260+ E5D0             >
 260+ E5D0             >                org     Dict_Ptr
 260+ 2898             >
 260+ 2898 CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 289A             >
 260+ 289A             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 289A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 289D             >
 260+ 289D             >
 260+ 289D             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 289D             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 289D             >
 260+ 289D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 289D 8E 28 19 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28A1 F4 24                        dw      EXIT                    // ;
 263+ 28A3
 264+ 28A3              //  ______________________________________________________________________
 265+ 28A3              //
 266+ 28A3              // u<           u1 u2 -- u3
 267+ 28A3              // unsigned less-than
 268+ 28A3                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28A3             >
 268+ 28A3             >Dict_Ptr        defl    $
 268+ 28A3             >
 268+ 28A3             >//              ______________________________________________________________________
 268+ 28A3             >//              Heap part
 268+ 28A3             >
 268+ 28A3             >
 268+ 28A3             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D0             >
 268+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D0             >Latest_Definition defl  Heap_Ptr
 268+ E5D0             >
 268+ E5D0             >                // dummy db directives used to calculate length of namec
 268+ E5D0 55 3C       >                db      "U<"
 268+ E5D2             >len_NFA         defl    $ - temp_NFA
 268+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D0             >
 268+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D3             >
 268+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D5             >
 268+ E5D5             >mirror_Ptr      defl    $
 268+ E5D5             >
 268+ E5D5 A5 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D7             >
 268+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D7             >
 268+ E5D7             >//              ______________________________________________________________________
 268+ E5D7             >//              Dictionary part
 268+ E5D7             >
 268+ E5D7             >                org     Dict_Ptr
 268+ 28A3             >
 268+ 28A3 D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28A5             >
 268+ 28A5             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28A5 ~           >
 268+ 28A5 ~           >
 268+ 28A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28A5             >
 268+ 28A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28A5 D9                           exx
 270+ 28A6 D1                           pop     de
 271+ 28A7 E1                           pop     hl
 272+ 28A8              Unsigned_Less_Exit:
 273+ 28A8 A7                           and     a
 274+ 28A9 ED 52                        sbc     hl, de
 275+ 28AB ED 62                        sbc     hl, hl
 276+ 28AD E5                           push    hl
 277+ 28AE D9                           exx
 278+ 28AF                              next
 278+ 28AF DD E9       >                jp      (ix)
 279+ 28B1
 280+ 28B1              //  ______________________________________________________________________
 281+ 28B1              //
 282+ 28B1              // <           n1 n2 -- n3
 283+ 28B1              // less-than
 284+ 28B1                              New_Def LESS, "<", is_code, is_normal
 284+ 28B1             >
 284+ 28B1             >Dict_Ptr        defl    $
 284+ 28B1             >
 284+ 28B1             >//              ______________________________________________________________________
 284+ 28B1             >//              Heap part
 284+ 28B1             >
 284+ 28B1             >
 284+ 28B1             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5D7             >
 284+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5D7             >Latest_Definition defl  Heap_Ptr
 284+ E5D7             >
 284+ E5D7             >                // dummy db directives used to calculate length of namec
 284+ E5D7 3C          >                db      "<"
 284+ E5D8             >len_NFA         defl    $ - temp_NFA
 284+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5D7             >
 284+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5D9             >
 284+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DB             >
 284+ E5DB             >mirror_Ptr      defl    $
 284+ E5DB             >
 284+ E5DB B3 28       >                dw      Dict_Ptr + 2        // xt
 284+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5DD             >
 284+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5DD             >
 284+ E5DD             >//              ______________________________________________________________________
 284+ E5DD             >//              Dictionary part
 284+ E5DD             >
 284+ E5DD             >                org     Dict_Ptr
 284+ 28B1             >
 284+ 28B1 DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 28B3             >
 284+ 28B3             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 28B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 28B3 ~           >
 284+ 28B3 ~           >
 284+ 28B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 28B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 28B3             >
 284+ 28B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 28B3 D9                           exx
 286+ 28B4 E1                           pop     hl
 287+ 28B5 D1                           pop     de
 288+ 28B6 01 00 80                     ld      bc, $8000
 289+ 28B9 09                           add     hl, bc
 290+ 28BA EB                           ex      de, hl
 291+ 28BB 09                           add     hl, bc
 292+ 28BC 18 EA                        jr      Unsigned_Less_Exit
 293+ 28BE              //              and     a
 294+ 28BE              //              sbc     hl, de
 295+ 28BE              //              sbc     hl, hl
 296+ 28BE              //              push    hl
 297+ 28BE              //              exx
 298+ 28BE              //              next
 299+ 28BE
 300+ 28BE              //  ______________________________________________________________________
 301+ 28BE              //
 302+ 28BE              // >            n1 n2 -- n3
 303+ 28BE              // greater than
 304+ 28BE                              Colon_Def GREATER, ">", is_normal
 304+ 28BE             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28BE             >
 304+ 28BE             >Dict_Ptr        defl    $
 304+ 28BE             >
 304+ 28BE             >//              ______________________________________________________________________
 304+ 28BE             >//              Heap part
 304+ 28BE             >
 304+ 28BE             >
 304+ 28BE             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DD             >
 304+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DD             >Latest_Definition defl  Heap_Ptr
 304+ E5DD             >
 304+ E5DD             >                // dummy db directives used to calculate length of namec
 304+ E5DD 3E          >                db      ">"
 304+ E5DE             >len_NFA         defl    $ - temp_NFA
 304+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DD             >
 304+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DF             >
 304+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >mirror_Ptr      defl    $
 304+ E5E1             >
 304+ E5E1 C0 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E3             >
 304+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E3             >
 304+ E5E3             >//              ______________________________________________________________________
 304+ E5E3             >//              Dictionary part
 304+ E5E3             >
 304+ E5E3             >                org     Dict_Ptr
 304+ 28BE             >
 304+ 28BE E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28C0             >
 304+ 28C0             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28C0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28C3             >
 304+ 28C3             >
 304+ 28C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28C3             >
 304+ 28C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28C3 C3 25 B3 28                  dw      SWAP, LESS              // swap <
 306+ 28C7 F4 24                        dw      EXIT                    // ;
 307+ 28C9              //  ______________________________________________________________________
 308+ 28C9              //
 309+ 28C9              // min          n1 n2 -- n3
 310+ 28C9              // minimum between n1 and n2
 311+ 28C9                              Colon_Def MIN, "MIN" , is_normal
 311+ 28C9             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28C9             >
 311+ 28C9             >Dict_Ptr        defl    $
 311+ 28C9             >
 311+ 28C9             >//              ______________________________________________________________________
 311+ 28C9             >//              Heap part
 311+ 28C9             >
 311+ 28C9             >
 311+ 28C9             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E3             >
 311+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E3             >Latest_Definition defl  Heap_Ptr
 311+ E5E3             >
 311+ E5E3             >                // dummy db directives used to calculate length of namec
 311+ E5E3 4D 49 4E    >                db      "MIN"
 311+ E5E6             >len_NFA         defl    $ - temp_NFA
 311+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E3             >
 311+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E7             >
 311+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E9             >
 311+ E5E9             >mirror_Ptr      defl    $
 311+ E5E9             >
 311+ E5E9 CB 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EB             >
 311+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EB             >
 311+ E5EB             >//              ______________________________________________________________________
 311+ E5EB             >//              Dictionary part
 311+ E5EB             >
 311+ E5EB             >                org     Dict_Ptr
 311+ 28C9             >
 311+ 28C9 E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28CB             >
 311+ 28CB             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28CB CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28CE             >
 311+ 28CE             >
 311+ 28CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28CE             >
 311+ 28CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28CE 12 26                        dw      TWO_DUP                 // 2dup
 313+ 28D0 C0 28                        dw      GREATER                 // >
 314+ 28D2 8F 20                        dw      ZBRANCH
 315+ 28D4 04 00                        dw      Min_Skip - $   // if
 316+ 28D6 C3 25                        dw          SWAP                //      swap
 317+ 28D8              Min_Skip:                                       // endif
 318+ 28D8 AF 25                        dw      DROP                    // drop
 319+ 28DA F4 24                        dw      EXIT                    // ;
 320+ 28DC
 321+ 28DC              //  ______________________________________________________________________
 322+ 28DC              //
 323+ 28DC              // max          n1 n2 -- n3
 324+ 28DC              // maximum between n1 and n2
 325+ 28DC                              Colon_Def MAX, "MAX", is_normal
 325+ 28DC             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 28DC             >
 325+ 28DC             >Dict_Ptr        defl    $
 325+ 28DC             >
 325+ 28DC             >//              ______________________________________________________________________
 325+ 28DC             >//              Heap part
 325+ 28DC             >
 325+ 28DC             >
 325+ 28DC             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EB             >
 325+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EB             >Latest_Definition defl  Heap_Ptr
 325+ E5EB             >
 325+ E5EB             >                // dummy db directives used to calculate length of namec
 325+ E5EB 4D 41 58    >                db      "MAX"
 325+ E5EE             >len_NFA         defl    $ - temp_NFA
 325+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EB             >
 325+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EF             >
 325+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F1             >
 325+ E5F1             >mirror_Ptr      defl    $
 325+ E5F1             >
 325+ E5F1 DE 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F3             >
 325+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F3             >
 325+ E5F3             >//              ______________________________________________________________________
 325+ E5F3             >//              Dictionary part
 325+ E5F3             >
 325+ E5F3             >                org     Dict_Ptr
 325+ 28DC             >
 325+ 28DC F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 28DE             >
 325+ 28DE             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 28DE CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 28E1             >
 325+ 28E1             >
 325+ 28E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 28E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 28E1             >
 325+ 28E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 28E1 12 26                        dw      TWO_DUP                 // 2dup
 327+ 28E3 B3 28                        dw      LESS                    // <
 328+ 28E5 8F 20                        dw      ZBRANCH
 329+ 28E7 04 00                        dw      Max_Skip - $   // if
 330+ 28E9 C3 25                        dw          SWAP                //      swap
 331+ 28EB              Max_Skip:                                       // endif
 332+ 28EB AF 25                        dw      DROP                    // drop
 333+ 28ED F4 24                        dw      EXIT                    // ;
 334+ 28EF
 335+ 28EF              //  ______________________________________________________________________
 336+ 28EF              //
 337+ 28EF              // ?dup         n -- 0 | n n
 338+ 28EF              // duplicate if not zero
 339+ 28EF                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 28EF             >
 339+ 28EF             >Dict_Ptr        defl    $
 339+ 28EF             >
 339+ 28EF             >//              ______________________________________________________________________
 339+ 28EF             >//              Heap part
 339+ 28EF             >
 339+ 28EF             >
 339+ 28EF             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F3             >
 339+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F3             >Latest_Definition defl  Heap_Ptr
 339+ E5F3             >
 339+ E5F3             >                // dummy db directives used to calculate length of namec
 339+ E5F3 3F 44 55 50 >                db      "?DUP"
 339+ E5F7             >len_NFA         defl    $ - temp_NFA
 339+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F3             >
 339+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F8             >
 339+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FA             >
 339+ E5FA             >mirror_Ptr      defl    $
 339+ E5FA             >
 339+ E5FA F1 28       >                dw      Dict_Ptr + 2        // xt
 339+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FC             >
 339+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FC             >
 339+ E5FC             >//              ______________________________________________________________________
 339+ E5FC             >//              Dictionary part
 339+ E5FC             >
 339+ E5FC             >                org     Dict_Ptr
 339+ 28EF             >
 339+ 28EF FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 28F1             >
 339+ 28F1             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 28F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 28F1 ~           >
 339+ 28F1 ~           >
 339+ 28F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 28F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 28F1             >
 339+ 28F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 28F1              QDup_Ptr:
 341+ 28F1 E1                           pop     hl
 342+ 28F2 7C                           ld      a, h
 343+ 28F3 B5                           or      l
 344+ 28F4 28 01                        jr      z, QDup_Skip
 345+ 28F6 E5                               push    hl
 346+ 28F7              QDup_Skip:
 347+ 28F7                              psh1
 347+ 28F7 E5          >                push    hl
 347+ 28F8 DD E9       >                jp      (ix)
 348+ 28FA
 349+ 28FA              //  ______________________________________________________________________
 350+ 28FA              //
 351+ 28FA              // -dup         n -- 0 | n n
 352+ 28FA              // duplicate if not zero
 353+ 28FA                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 28FA             >
 353+ 28FA             >Dict_Ptr        defl    $
 353+ 28FA             >
 353+ 28FA             >//              ______________________________________________________________________
 353+ 28FA             >//              Heap part
 353+ 28FA             >
 353+ 28FA             >
 353+ 28FA             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FC             >
 353+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FC             >Latest_Definition defl  Heap_Ptr
 353+ E5FC             >
 353+ E5FC             >                // dummy db directives used to calculate length of namec
 353+ E5FC 2D 44 55 50 >                db      "-DUP"
 353+ E600             >len_NFA         defl    $ - temp_NFA
 353+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FC             >
 353+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E601             >                org     $-1                 // alter last byte of Name just above to set
 353+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E601             >
 353+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E603             >Prev_Ptr        defl    Heap_Ptr
 353+ E603             >
 353+ E603             >mirror_Ptr      defl    $
 353+ E603             >
 353+ E603 FC 28       >                dw      Dict_Ptr + 2        // xt
 353+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E605             >
 353+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E605             >
 353+ E605             >//              ______________________________________________________________________
 353+ E605             >//              Dictionary part
 353+ E605             >
 353+ E605             >                org     Dict_Ptr
 353+ 28FA             >
 353+ 28FA 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 28FC             >
 353+ 28FC             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 28FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 28FC ~           >
 353+ 28FC ~           >
 353+ 28FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 28FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 28FC             >
 353+ 28FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 28FC C3 F1 28                     jp      QDup_Ptr
 355+ 28FF
 356+ 28FF              //  ______________________________________________________________________
 357+ 28FF              //
 358+ 28FF              // emit         c --
 359+ 28FF                              Colon_Def EMIT, "EMIT", is_normal
 359+ 28FF             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 28FF             >
 359+ 28FF             >Dict_Ptr        defl    $
 359+ 28FF             >
 359+ 28FF             >//              ______________________________________________________________________
 359+ 28FF             >//              Heap part
 359+ 28FF             >
 359+ 28FF             >
 359+ 28FF             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E605             >
 359+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E605             >Latest_Definition defl  Heap_Ptr
 359+ E605             >
 359+ E605             >                // dummy db directives used to calculate length of namec
 359+ E605 45 4D 49 54 >                db      "EMIT"
 359+ E609             >len_NFA         defl    $ - temp_NFA
 359+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E605             >
 359+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 359+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60A             >
 359+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60C             >Prev_Ptr        defl    Heap_Ptr
 359+ E60C             >
 359+ E60C             >mirror_Ptr      defl    $
 359+ E60C             >
 359+ E60C 01 29       >                dw      Dict_Ptr + 2        // xt
 359+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60E             >
 359+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60E             >
 359+ E60E             >//              ______________________________________________________________________
 359+ E60E             >//              Dictionary part
 359+ E60E             >
 359+ E60E             >                org     Dict_Ptr
 359+ 28FF             >
 359+ 28FF 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 2901             >
 359+ 2901             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 2901 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 2904             >
 359+ 2904             >
 359+ 2904             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 2904             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 2904             >
 359+ 2904             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 2904 70 22                        dw      C_EMIT                      // (?emit)
 361+ 2906 F1 28                        dw      QDUP                        // ?dup
 362+ 2908                                                                  // if
 363+ 2908 8F 20                        dw      ZBRANCH
 364+ 290A 0A 00                        dw      Emit_Skip - $
 365+ 290C 39 22                        dw          EMITC                   //      emitc
 366+ 290E 31 27                        dw          ONE                     //      1
 367+ 2910 D7 27 1C 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 2914              Emit_Skip:                                          // endif
 369+ 2914 F4 24                        dw      EXIT                        // ;
 370+ 2916
 371+ 2916              //  ______________________________________________________________________
 372+ 2916              //
 373+ 2916              // space        --
 374+ 2916                              Colon_Def SPACE, "SPACE", is_normal
 374+ 2916             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 2916             >
 374+ 2916             >Dict_Ptr        defl    $
 374+ 2916             >
 374+ 2916             >//              ______________________________________________________________________
 374+ 2916             >//              Heap part
 374+ 2916             >
 374+ 2916             >
 374+ 2916             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60E             >
 374+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60E             >Latest_Definition defl  Heap_Ptr
 374+ E60E             >
 374+ E60E             >                // dummy db directives used to calculate length of namec
 374+ E60E 53 50 41 43 >                db      "SPACE"
 374+ E612 45          >
 374+ E613             >len_NFA         defl    $ - temp_NFA
 374+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60E             >
 374+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E613 45          >
 374+ E614             >                org     $-1                 // alter last byte of Name just above to set
 374+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E614             >
 374+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E616             >Prev_Ptr        defl    Heap_Ptr
 374+ E616             >
 374+ E616             >mirror_Ptr      defl    $
 374+ E616             >
 374+ E616 18 29       >                dw      Dict_Ptr + 2        // xt
 374+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E618             >
 374+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E618             >
 374+ E618             >//              ______________________________________________________________________
 374+ E618             >//              Dictionary part
 374+ E618             >
 374+ E618             >                org     Dict_Ptr
 374+ 2916             >
 374+ 2916 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 2918             >
 374+ 2918             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 2918 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 291B             >
 374+ 291B             >
 374+ 291B             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 291B             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 291B             >
 374+ 291B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 291B 4D 27 01 29                  dw      BL, EMIT                // bl emit
 376+ 291F F4 24                        dw      EXIT                    // ;
 377+ 2921
 378+ 2921              //  ______________________________________________________________________
 379+ 2921              //
 380+ 2921              // traverse     a n -- a
 381+ 2921              // A dictionary entry is structured as follows
 382+ 2921              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 2921              //      +1   word name, last character is toggled with $80
 384+ 2921              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 2921              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 2921              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 2921              //
 388+ 2921                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 2921             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 2921             >
 388+ 2921             >Dict_Ptr        defl    $
 388+ 2921             >
 388+ 2921             >//              ______________________________________________________________________
 388+ 2921             >//              Heap part
 388+ 2921             >
 388+ 2921             >
 388+ 2921             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E618             >
 388+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E618             >Latest_Definition defl  Heap_Ptr
 388+ E618             >
 388+ E618             >                // dummy db directives used to calculate length of namec
 388+ E618 54 52 41 56 >                db      "TRAVERSE"
 388+ E61C 45 52 53 45 >
 388+ E620             >len_NFA         defl    $ - temp_NFA
 388+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E618             >
 388+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61D 45 52 53 45 >
 388+ E621             >                org     $-1                 // alter last byte of Name just above to set
 388+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E621             >
 388+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E623             >Prev_Ptr        defl    Heap_Ptr
 388+ E623             >
 388+ E623             >mirror_Ptr      defl    $
 388+ E623             >
 388+ E623 23 29       >                dw      Dict_Ptr + 2        // xt
 388+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E625             >
 388+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E625             >
 388+ E625             >//              ______________________________________________________________________
 388+ E625             >//              Dictionary part
 388+ E625             >
 388+ E625             >                org     Dict_Ptr
 388+ 2921             >
 388+ 2921 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 2923             >
 388+ 2923             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 2923 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 2926             >
 388+ 2926             >
 388+ 2926             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 2926             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 2926             >
 388+ 2926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 2926 C3 25                        dw      SWAP                    // swap
 390+ 2928              Traverse_Begin:                                 // begin
 391+ 2928 A6 25 46 25                  dw          OVER, PLUS          //      over +
 392+ 292C 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2930 A6 25 49 26                  dw          OVER, CFETCH        //      over @
 394+ 2934 B3 28                        dw          LESS                //      <
 395+ 2936                                                              // until
 396+ 2936 8F 20                        dw      ZBRANCH
 397+ 2938 F0 FF                        dw      Traverse_Begin - $
 398+ 293A B4 25                        dw      NIP                     //  nip
 399+ 293C F4 24                        dw      EXIT                    //  ;
 400+ 293E
 401+ 293E              //  ______________________________________________________________________
 402+ 293E              //
 403+ 293E              // mmu7@        -- n
 404+ 293E              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 293E
 406+ 293E                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 293E             >
 406+ 293E             >Dict_Ptr        defl    $
 406+ 293E             >
 406+ 293E             >//              ______________________________________________________________________
 406+ 293E             >//              Heap part
 406+ 293E             >
 406+ 293E             >
 406+ 293E             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E625             >
 406+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E625             >Latest_Definition defl  Heap_Ptr
 406+ E625             >
 406+ E625             >                // dummy db directives used to calculate length of namec
 406+ E625 4D 4D 55 37 >                db      "MMU7@"
 406+ E629 40          >
 406+ E62A             >len_NFA         defl    $ - temp_NFA
 406+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E625             >
 406+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62A 40          >
 406+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62B             >
 406+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62D             >Prev_Ptr        defl    Heap_Ptr
 406+ E62D             >
 406+ E62D             >mirror_Ptr      defl    $
 406+ E62D             >
 406+ E62D 40 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62F             >
 406+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62F             >
 406+ E62F             >//              ______________________________________________________________________
 406+ E62F             >//              Dictionary part
 406+ E62F             >
 406+ E62F             >                org     Dict_Ptr
 406+ 293E             >
 406+ 293E 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2940             >
 406+ 2940             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2940 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2940 ~           >
 406+ 2940 ~           >
 406+ 2940             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2940             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2940             >
 406+ 2940             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2940 D9                           exx
 408+ 2941 CD 36 21                     call    MMU7_read
 409+ 2944 D9                           exx
 410+ 2945 6F                           ld      l, a
 411+ 2946 26 00                        ld      h, 0
 412+ 2948 E5                           push    hl
 413+ 2949                              next
 413+ 2949 DD E9       >                jp      (ix)
 414+ 294B
 415+ 294B              //  ______________________________________________________________________
 416+ 294B              //
 417+ 294B              // mmu7!        n --
 418+ 294B              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 294B              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 294B
 421+ 294B                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 294B             >
 421+ 294B             >Dict_Ptr        defl    $
 421+ 294B             >
 421+ 294B             >//              ______________________________________________________________________
 421+ 294B             >//              Heap part
 421+ 294B             >
 421+ 294B             >
 421+ 294B             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62F             >
 421+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62F             >Latest_Definition defl  Heap_Ptr
 421+ E62F             >
 421+ E62F             >                // dummy db directives used to calculate length of namec
 421+ E62F 4D 4D 55 37 >                db      "MMU7!"
 421+ E633 21          >
 421+ E634             >len_NFA         defl    $ - temp_NFA
 421+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62F             >
 421+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E634 21          >
 421+ E635             >                org     $-1                 // alter last byte of Name just above to set
 421+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E635             >
 421+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E637             >Prev_Ptr        defl    Heap_Ptr
 421+ E637             >
 421+ E637             >mirror_Ptr      defl    $
 421+ E637             >
 421+ E637 4D 29       >                dw      Dict_Ptr + 2        // xt
 421+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E639             >
 421+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E639             >
 421+ E639             >//              ______________________________________________________________________
 421+ E639             >//              Dictionary part
 421+ E639             >
 421+ E639             >                org     Dict_Ptr
 421+ 294B             >
 421+ 294B 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 294D             >
 421+ 294D             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 294D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 294D ~           >
 421+ 294D ~           >
 421+ 294D             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 294D             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 294D             >
 421+ 294D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 294D E1                           pop     hl
 423+ 294E 7D                           ld      a, l
 424+ 294F ED 92 57                     nextreg 87, a
 425+ 2952
 426+ 2952                              next
 426+ 2952 DD E9       >                jp      (ix)
 427+ 2954
 428+ 2954              //  ______________________________________________________________________
 429+ 2954              //
 430+ 2954              // >far         ha -- a n
 431+ 2954              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 2954              // take lower bits of H and L as an offset from E000h
 433+ 2954              // then return address  a  between E000h-FFFFh
 434+ 2954              // and page number n  between 64-71 (40h-47h)
 435+ 2954              // For example, in hex:
 436+ 2954              //   0000 >FAR  gives  40.E000
 437+ 2954              //   1FFF >FAR  gives  40.FFFF
 438+ 2954              //   2000 >FAR  gives  41.E000
 439+ 2954              //   3FFF >FAR  gives  41.FFFF
 440+ 2954              //   EFFF >FAR  gives  47.EFFF
 441+ 2954              //   FFFF >FAR  gives  47.FFFF
 442+ 2954                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 2954             >
 442+ 2954             >Dict_Ptr        defl    $
 442+ 2954             >
 442+ 2954             >//              ______________________________________________________________________
 442+ 2954             >//              Heap part
 442+ 2954             >
 442+ 2954             >
 442+ 2954             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E639             >
 442+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E639             >Latest_Definition defl  Heap_Ptr
 442+ E639             >
 442+ E639             >                // dummy db directives used to calculate length of namec
 442+ E639 3E 46 41 52 >                db      ">FAR"
 442+ E63D             >len_NFA         defl    $ - temp_NFA
 442+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E639             >
 442+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63E             >
 442+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E640             >Prev_Ptr        defl    Heap_Ptr
 442+ E640             >
 442+ E640             >mirror_Ptr      defl    $
 442+ E640             >
 442+ E640 56 29       >                dw      Dict_Ptr + 2        // xt
 442+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E642             >
 442+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E642             >
 442+ E642             >//              ______________________________________________________________________
 442+ E642             >//              Dictionary part
 442+ E642             >
 442+ E642             >                org     Dict_Ptr
 442+ 2954             >
 442+ 2954 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 2956             >
 442+ 2956             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 2956 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 2956 ~           >
 442+ 2956 ~           >
 442+ 2956             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 2956             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 2956             >
 442+ 2956             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 2956 E1                           pop     hl
 444+ 2957 CD 41 21                     call    TO_FAR_rout
 445+ 295A E5                           push    hl
 446+ 295B 6F                           ld      l, a
 447+ 295C 26 00                        ld      h, 0
 448+ 295E E5                           push    hl
 449+ 295F                              next
 449+ 295F DD E9       >                jp      (ix)
 450+ 2961
 451+ 2961              //  ______________________________________________________________________
 452+ 2961              //
 453+ 2961              // <far         a n  -- ha
 454+ 2961              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 2961              // reverse of >FAR: encodes a FAR address compressing
 456+ 2961              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 2961                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 2961             >
 457+ 2961             >Dict_Ptr        defl    $
 457+ 2961             >
 457+ 2961             >//              ______________________________________________________________________
 457+ 2961             >//              Heap part
 457+ 2961             >
 457+ 2961             >
 457+ 2961             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E642             >
 457+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E642             >Latest_Definition defl  Heap_Ptr
 457+ E642             >
 457+ E642             >                // dummy db directives used to calculate length of namec
 457+ E642 3C 46 41 52 >                db      "<FAR"
 457+ E646             >len_NFA         defl    $ - temp_NFA
 457+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E642             >
 457+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E647             >                org     $-1                 // alter last byte of Name just above to set
 457+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E647             >
 457+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E649             >Prev_Ptr        defl    Heap_Ptr
 457+ E649             >
 457+ E649             >mirror_Ptr      defl    $
 457+ E649             >
 457+ E649 63 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64B             >
 457+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64B             >
 457+ E64B             >//              ______________________________________________________________________
 457+ E64B             >//              Dictionary part
 457+ E64B             >
 457+ E64B             >                org     Dict_Ptr
 457+ 2961             >
 457+ 2961 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2963             >
 457+ 2963             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2963 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2963 ~           >
 457+ 2963 ~           >
 457+ 2963             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2963             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2963             >
 457+ 2963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2963 E1                           pop     hl                  // page number in l
 459+ 2964 7D                           ld      a, l
 460+ 2965 E6 07                        and     07
 461+ 2967 0F                           rrca
 462+ 2968 0F                           rrca
 463+ 2969 0F                           rrca
 464+ 296A 08                           ex      af, af
 465+ 296B E1                           pop     hl                  // address in hl
 466+ 296C 7C                           ld      a, h
 467+ 296D E6 1F                        and     $1F
 468+ 296F 67                           ld      h, a
 469+ 2970 08                           ex      af, af
 470+ 2971 B4                           or      h
 471+ 2972 67                           ld      h, a
 472+ 2973                              psh1
 472+ 2973 E5          >                push    hl
 472+ 2974 DD E9       >                jp      (ix)
 473+ 2976
 474+ 2976              //  ______________________________________________________________________
 475+ 2976              //
 476+ 2976              // ?IN_MMU7        a -- f
 477+ 2976              // check if address lies on MMU7
 478+ 2976              // tf is passed address is on MMU7
 479+ 2976                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 2976             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 2976             >
 479+ 2976             >Dict_Ptr        defl    $
 479+ 2976             >
 479+ 2976             >//              ______________________________________________________________________
 479+ 2976             >//              Heap part
 479+ 2976             >
 479+ 2976             >
 479+ 2976             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E64B             >
 479+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E64B             >Latest_Definition defl  Heap_Ptr
 479+ E64B             >
 479+ E64B             >                // dummy db directives used to calculate length of namec
 479+ E64B 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E64F 4D 4D 55 37 >
 479+ E653             >len_NFA         defl    $ - temp_NFA
 479+ E653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E64B             >
 479+ E64B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E650 4D 4D 55 37 >
 479+ E654             >                org     $-1                 // alter last byte of Name just above to set
 479+ E653 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E654             >
 479+ E654 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E656             >Prev_Ptr        defl    Heap_Ptr
 479+ E656             >
 479+ E656             >mirror_Ptr      defl    $
 479+ E656             >
 479+ E656 78 29       >                dw      Dict_Ptr + 2        // xt
 479+ E658             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E658             >
 479+ E658             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E658             >
 479+ E658             >//              ______________________________________________________________________
 479+ E658             >//              Dictionary part
 479+ E658             >
 479+ E658             >                org     Dict_Ptr
 479+ 2976             >
 479+ 2976 56 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 2978             >
 479+ 2978             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 2978 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 297B             >
 479+ 297B             >
 479+ 297B             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 297B             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 297B             >
 479+ 297B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 297B CA 25                        dw      DUP
 481+ 297D 3D 20 00 E0                  dw      LIT, $E000
 482+ 2981 A5 28                        dw      ULESS
 483+ 2983 27 25                        dw      NOT_OP
 484+ 2985 F4 24                        dw      EXIT
 485+ 2987
 486+ 2987              //  ______________________________________________________________________
 487+ 2987              //
 488+ 2987              // far          hp -- ha
 489+ 2987              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 2987              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 2987              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 2987                              Colon_Def FAR, "FAR", is_normal
 492+ 2987             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 2987             >
 492+ 2987             >Dict_Ptr        defl    $
 492+ 2987             >
 492+ 2987             >//              ______________________________________________________________________
 492+ 2987             >//              Heap part
 492+ 2987             >
 492+ 2987             >
 492+ 2987             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E658             >
 492+ E658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E658             >Latest_Definition defl  Heap_Ptr
 492+ E658             >
 492+ E658             >                // dummy db directives used to calculate length of namec
 492+ E658 46 41 52    >                db      "FAR"
 492+ E65B             >len_NFA         defl    $ - temp_NFA
 492+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E658             >
 492+ E658 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E659 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 492+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E65C             >
 492+ E65C 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E65E             >Prev_Ptr        defl    Heap_Ptr
 492+ E65E             >
 492+ E65E             >mirror_Ptr      defl    $
 492+ E65E             >
 492+ E65E 89 29       >                dw      Dict_Ptr + 2        // xt
 492+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E660             >
 492+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E660             >
 492+ E660             >//              ______________________________________________________________________
 492+ E660             >//              Dictionary part
 492+ E660             >
 492+ E660             >                org     Dict_Ptr
 492+ 2987             >
 492+ 2987 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 2989             >
 492+ 2989             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 2989 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 298C             >
 492+ 298C             >
 492+ 298C             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 298C             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 298C             >
 492+ 298C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 298C 56 29                        dw      TO_FAR
 494+ 298E 4D 29                        dw      MMU7_STORE
 495+ 2990 F4 24                        dw      EXIT
 496+ 2992
 497+ 2992              //  ______________________________________________________________________
 498+ 2992              //
 499+ 2992              // ?HEAP_PTR       n -- n f
 500+ 2992              // check if it's a non-zero heap-pointer or less than $6300
 501+ 2992              // tf if passed argument is an hp
 502+ 2992              // ff if passed argument isn't hp
 503+ 2992                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 2992             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 2992             >
 503+ 2992             >Dict_Ptr        defl    $
 503+ 2992             >
 503+ 2992             >//              ______________________________________________________________________
 503+ 2992             >//              Heap part
 503+ 2992             >
 503+ 2992             >
 503+ 2992             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E660             >
 503+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E660             >Latest_Definition defl  Heap_Ptr
 503+ E660             >
 503+ E660             >                // dummy db directives used to calculate length of namec
 503+ E660 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E664 50 5F 50 54 >
 503+ E668 52          >
 503+ E669             >len_NFA         defl    $ - temp_NFA
 503+ E669             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E660             >
 503+ E660 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E661 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E665 50 5F 50 54 >
 503+ E669 52          >
 503+ E66A             >                org     $-1                 // alter last byte of Name just above to set
 503+ E669 D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E66A             >
 503+ E66A 58 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E66C             >Prev_Ptr        defl    Heap_Ptr
 503+ E66C             >
 503+ E66C             >mirror_Ptr      defl    $
 503+ E66C             >
 503+ E66C 94 29       >                dw      Dict_Ptr + 2        // xt
 503+ E66E             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E66E             >
 503+ E66E             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E66E             >
 503+ E66E             >//              ______________________________________________________________________
 503+ E66E             >//              Dictionary part
 503+ E66E             >
 503+ E66E             >                org     Dict_Ptr
 503+ 2992             >
 503+ 2992 6C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 2994             >
 503+ 2994             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 2994 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 2997             >
 503+ 2997             >
 503+ 2997             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 2997             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 2997             >
 503+ 2997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 2997 CA 25                        dw      DUP
 505+ 2999 8F 20                        dw      ZBRANCH
 506+ 299B 08 00                        dw      QHeap_Skip - $
 507+ 299D 3D 20 00 63                  dw          LIT, $6300
 508+ 29A1 A5 28                        dw          ULESS
 509+ 29A3              QHeap_Skip:                                          // endif
 510+ 29A3 F4 24                        dw      EXIT                        // ;
 511+ 29A5
 512+ 29A5              //  ______________________________________________________________________
 513+ 29A5              //
 514+ 29A5              // ?>heap       n1 -- n2
 515+ 29A5              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 29A5              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 29A5              // and converted to heap address updating MMU7 via FAR
 518+ 29A5                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 29A5             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 29A5             >
 518+ 29A5             >Dict_Ptr        defl    $
 518+ 29A5             >
 518+ 29A5             >//              ______________________________________________________________________
 518+ 29A5             >//              Heap part
 518+ 29A5             >
 518+ 29A5             >
 518+ 29A5             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E66E             >
 518+ E66E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E66E             >Latest_Definition defl  Heap_Ptr
 518+ E66E             >
 518+ E66E             >                // dummy db directives used to calculate length of namec
 518+ E66E 3F 3E 48 45 >                db      "?>HEAP"
 518+ E672 41 50       >
 518+ E674             >len_NFA         defl    $ - temp_NFA
 518+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E66E             >
 518+ E66E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E66F 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E673 41 50       >
 518+ E675             >                org     $-1                 // alter last byte of Name just above to set
 518+ E674 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E675             >
 518+ E675 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E677             >Prev_Ptr        defl    Heap_Ptr
 518+ E677             >
 518+ E677             >mirror_Ptr      defl    $
 518+ E677             >
 518+ E677 A7 29       >                dw      Dict_Ptr + 2        // xt
 518+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E679             >
 518+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E679             >
 518+ E679             >//              ______________________________________________________________________
 518+ E679             >//              Dictionary part
 518+ E679             >
 518+ E679             >                org     Dict_Ptr
 518+ 29A5             >
 518+ 29A5 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 29A7             >
 518+ 29A7             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 29A7 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 29AA             >
 518+ 29AA             >
 518+ 29AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 29AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 29AA             >
 518+ 29AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 29AA CA 25                        dw      DUP
 520+ 29AC 94 29                        dw      QHEAPP
 521+ 29AE 8F 20                        dw      ZBRANCH
 522+ 29B0 04 00                        dw      Q2Heap_Skip - $
 523+ 29B2 89 29                        dw          FAR
 524+ 29B4              Q2Heap_Skip:                                          // endif
 525+ 29B4 F4 24                        dw      EXIT                        // ;
 526+ 29B6
 527+ 29B6              //  ______________________________________________________________________
 528+ 29B6              //
 529+ 29B6              // hp_fetch     -- a
 530+ 29B6                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 29B6             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 29B6             >
 530+ 29B6             >Dict_Ptr        defl    $
 530+ 29B6             >
 530+ 29B6             >//              ______________________________________________________________________
 530+ 29B6             >//              Heap part
 530+ 29B6             >
 530+ 29B6             >
 530+ 29B6             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E679             >
 530+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E679             >Latest_Definition defl  Heap_Ptr
 530+ E679             >
 530+ E679             >                // dummy db directives used to calculate length of namec
 530+ E679 48 50 40    >                db      "HP@"
 530+ E67C             >len_NFA         defl    $ - temp_NFA
 530+ E67C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E679             >
 530+ E679 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E67A 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E67D             >                org     $-1                 // alter last byte of Name just above to set
 530+ E67C C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E67D             >
 530+ E67D 6E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E67F             >Prev_Ptr        defl    Heap_Ptr
 530+ E67F             >
 530+ E67F             >mirror_Ptr      defl    $
 530+ E67F             >
 530+ E67F B8 29       >                dw      Dict_Ptr + 2        // xt
 530+ E681             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E681             >
 530+ E681             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E681             >
 530+ E681             >//              ______________________________________________________________________
 530+ E681             >//              Dictionary part
 530+ E681             >
 530+ E681             >                org     Dict_Ptr
 530+ 29B6             >
 530+ 29B6 7F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 29B8             >
 530+ 29B8             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 29B8 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 29BB             >
 530+ 29BB             >
 530+ 29BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 29BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 29BB             >
 530+ 29BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29BB BF 27 34 26                  dw      HP, FETCH               // hp @
 532+ 29BF F4 24                        dw      EXIT                    // ;
 533+ 29C1
 534+ 29C1              //  ______________________________________________________________________
 535+ 29C1              //
 536+ 29C1              // page-watermark   -- n
 537+ 29C1              // how much a 8K page can be filled..
 538+ 29C1                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 29C1             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 29C1             >
 538+ 29C1             >Dict_Ptr        defl    $
 538+ 29C1             >
 538+ 29C1             >//              ______________________________________________________________________
 538+ 29C1             >//              Heap part
 538+ 29C1             >
 538+ 29C1             >
 538+ 29C1             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E681             >
 538+ E681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E681             >Latest_Definition defl  Heap_Ptr
 538+ E681             >
 538+ E681             >                // dummy db directives used to calculate length of namec
 538+ E681 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E685 2D 57 41 54 >
 538+ E689 45 52 4D 41 >
 538+ E68D 52 4B       >
 538+ E68F             >len_NFA         defl    $ - temp_NFA
 538+ E68F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E681             >
 538+ E681 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E686 2D 57 41 54 >
 538+ E68A 45 52 4D 41 >
 538+ E68E 52 4B       >
 538+ E690             >                org     $-1                 // alter last byte of Name just above to set
 538+ E68F CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E690             >
 538+ E690 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E692             >Prev_Ptr        defl    Heap_Ptr
 538+ E692             >
 538+ E692             >mirror_Ptr      defl    $
 538+ E692             >
 538+ E692 C3 29       >                dw      Dict_Ptr + 2        // xt
 538+ E694             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E694             >
 538+ E694             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E694             >
 538+ E694             >//              ______________________________________________________________________
 538+ E694             >//              Dictionary part
 538+ E694             >
 538+ E694             >                org     Dict_Ptr
 538+ 29C1             >
 538+ 29C1 92 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 29C3             >
 538+ 29C3             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 29C3 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 29C6             >
 538+ 29C6             >
 538+ 29C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 29C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 29C6             >
 538+ 29C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 29C6 80 1F       >                dw      $1F80
 539+ 29C8
 540+ 29C8              //  ______________________________________________________________________
 541+ 29C8              //
 542+ 29C8              // skip-hp-page ha -- a
 543+ 29C8                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 29C8             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 29C8             >
 543+ 29C8             >Dict_Ptr        defl    $
 543+ 29C8             >
 543+ 29C8             >//              ______________________________________________________________________
 543+ 29C8             >//              Heap part
 543+ 29C8             >
 543+ 29C8             >
 543+ 29C8             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E694             >
 543+ E694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E694             >Latest_Definition defl  Heap_Ptr
 543+ E694             >
 543+ E694             >                // dummy db directives used to calculate length of namec
 543+ E694 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E698 2D 48 50 2D >
 543+ E69C 50 41 47 45 >
 543+ E6A0             >len_NFA         defl    $ - temp_NFA
 543+ E6A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E694             >
 543+ E694 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E699 2D 48 50 2D >
 543+ E69D 50 41 47 45 >
 543+ E6A1             >                org     $-1                 // alter last byte of Name just above to set
 543+ E6A0 C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E6A1             >
 543+ E6A1 81 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A3             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A3             >
 543+ E6A3             >mirror_Ptr      defl    $
 543+ E6A3             >
 543+ E6A3 CA 29       >                dw      Dict_Ptr + 2        // xt
 543+ E6A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A5             >
 543+ E6A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A5             >
 543+ E6A5             >//              ______________________________________________________________________
 543+ E6A5             >//              Dictionary part
 543+ E6A5             >
 543+ E6A5             >                org     Dict_Ptr
 543+ 29C8             >
 543+ 29C8 A3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 29CA             >
 543+ 29CA             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 29CA CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 29CD             >
 543+ 29CD             >
 543+ 29CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 29CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 29CD             >
 543+ 29CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 29CD B8 29                        dw      HP_FETCH                // hp@
 545+ 29CF 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 29D3 B4 24
 546+ 29D5 46 25                        dw      PLUS
 547+ 29D7 C3 29                        dw      PAGE_WATERMARK
 548+ 29D9 C0 28                        dw      GREATER
 549+ 29DB 8F 20                        dw      ZBRANCH
 550+ 29DD 12 00                        dw      Skip_Skip - $   // if
 551+ 29DF B8 29                        dw      HP_FETCH
 552+ 29E1 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 29E5 C3 24
 553+ 29E7 5F 25 6D 25                  dw      ONE_PLUS, TWO_PLUS
 554+ 29EB BF 27 3E 26                  dw      HP, STORE
 555+ 29EF              Skip_Skip:
 556+ 29EF F4 24                        dw      EXIT                    // ;
 557+ 29F1              //  ______________________________________________________________________
 558+ 29F1              //
 559+ 29F1              // latest       -- nfa
 560+ 29F1                              Colon_Def LATEST, "LATEST", is_normal
 560+ 29F1             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 29F1             >
 560+ 29F1             >Dict_Ptr        defl    $
 560+ 29F1             >
 560+ 29F1             >//              ______________________________________________________________________
 560+ 29F1             >//              Heap part
 560+ 29F1             >
 560+ 29F1             >
 560+ 29F1             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A5             >
 560+ E6A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A5             >Latest_Definition defl  Heap_Ptr
 560+ E6A5             >
 560+ E6A5             >                // dummy db directives used to calculate length of namec
 560+ E6A5 4C 41 54 45 >                db      "LATEST"
 560+ E6A9 53 54       >
 560+ E6AB             >len_NFA         defl    $ - temp_NFA
 560+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A5             >
 560+ E6A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A6 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6AA 53 54       >
 560+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6AB D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6AC             >
 560+ E6AC 94 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 560+ E6AE             >
 560+ E6AE             >mirror_Ptr      defl    $
 560+ E6AE             >
 560+ E6AE F3 29       >                dw      Dict_Ptr + 2        // xt
 560+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6B0             >
 560+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6B0             >
 560+ E6B0             >//              ______________________________________________________________________
 560+ E6B0             >//              Dictionary part
 560+ E6B0             >
 560+ E6B0             >                org     Dict_Ptr
 560+ 29F1             >
 560+ 29F1 AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 29F3             >
 560+ 29F3             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 29F3 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 29F6             >
 560+ 29F6             >
 560+ 29F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 29F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 29F6             >
 560+ 29F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 29F6 EF 27                        dw      CURRENT                 // current
 562+ 29F8 34 26 34 26                  dw      FETCH, FETCH            // @ @
 563+ 29FC 89 29                        dw      FAR // Q TO HEAP
 564+ 29FE F4 24                        dw      EXIT                    // ;
 565+ 2A00
 566+ 2A00              //  ______________________________________________________________________
 567+ 2A00              //
 568+ 2A00              // >body        cfa -- pfa
 569+ 2A00                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 2A00             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 2A00             >
 569+ 2A00             >Dict_Ptr        defl    $
 569+ 2A00             >
 569+ 2A00             >//              ______________________________________________________________________
 569+ 2A00             >//              Heap part
 569+ 2A00             >
 569+ 2A00             >
 569+ 2A00             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6B0             >
 569+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6B0             >Latest_Definition defl  Heap_Ptr
 569+ E6B0             >
 569+ E6B0             >                // dummy db directives used to calculate length of namec
 569+ E6B0 3E 42 4F 44 >                db      ">BODY"
 569+ E6B4 59          >
 569+ E6B5             >len_NFA         defl    $ - temp_NFA
 569+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6B0             >
 569+ E6B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6B1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B5 59          >
 569+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B5 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B6             >
 569+ E6B6 A5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 569+ E6B8             >
 569+ E6B8             >mirror_Ptr      defl    $
 569+ E6B8             >
 569+ E6B8 02 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6BA             >
 569+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6BA             >
 569+ E6BA             >//              ______________________________________________________________________
 569+ E6BA             >//              Dictionary part
 569+ E6BA             >
 569+ E6BA             >                org     Dict_Ptr
 569+ 2A00             >
 569+ 2A00 B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A02             >
 569+ 2A02             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A02 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A05             >
 569+ 2A05             >
 569+ 2A05             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A05             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A05             >
 569+ 2A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A05 3F 27 46 25                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 2A09 F4 24                        dw      EXIT                    // ;
 572+ 2A0B
 573+ 2A0B              //  ______________________________________________________________________
 574+ 2A0B              //
 575+ 2A0B              // <name        cfa -- nfa
 576+ 2A0B                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 2A0B             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 2A0B             >
 576+ 2A0B             >Dict_Ptr        defl    $
 576+ 2A0B             >
 576+ 2A0B             >//              ______________________________________________________________________
 576+ 2A0B             >//              Heap part
 576+ 2A0B             >
 576+ 2A0B             >
 576+ 2A0B             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6BA             >
 576+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6BA             >Latest_Definition defl  Heap_Ptr
 576+ E6BA             >
 576+ E6BA             >                // dummy db directives used to calculate length of namec
 576+ E6BA 3C 4E 41 4D >                db      "<NAME"
 576+ E6BE 45          >
 576+ E6BF             >len_NFA         defl    $ - temp_NFA
 576+ E6BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6BA             >
 576+ E6BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6BB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6BF 45          >
 576+ E6C0             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6BF C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6C0             >
 576+ E6C0 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6C2             >Prev_Ptr        defl    Heap_Ptr
 576+ E6C2             >
 576+ E6C2             >mirror_Ptr      defl    $
 576+ E6C2             >
 576+ E6C2 0D 2A       >                dw      Dict_Ptr + 2        // xt
 576+ E6C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C4             >
 576+ E6C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C4             >
 576+ E6C4             >//              ______________________________________________________________________
 576+ E6C4             >//              Dictionary part
 576+ E6C4             >
 576+ E6C4             >                org     Dict_Ptr
 576+ 2A0B             >
 576+ 2A0B C2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 2A0D             >
 576+ 2A0D             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 2A0D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 2A10             >
 576+ 2A10             >
 576+ 2A10             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 2A10             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 2A10             >
 576+ 2A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 2A10 79 25                        dw      CELL_MINUS              // cell-
 578+ 2A12 CA 25 34 26                  dw      DUP, FETCH
 579+ 2A16 94 29                        dw      QHEAPP
 580+ 2A18 8F 20                        dw      ZBRANCH
 581+ 2A1A 08 00                        dw      ToName_Skip - $
 582+ 2A1C 34 26 89 29                  dw          FETCH, FAR
 583+ 2A20 79 25                        dw          CELL_MINUS
 584+ 2A22              ToName_Skip:                                    // endif
 585+ 2A22
 586+ 2A22 66 25                        dw      ONE_SUBTRACT            // 1-
 587+ 2A24 46 27                        dw      NEG_ONE                 // -1
 588+ 2A26 23 29                        dw      TRAVERSE                // traverse
 589+ 2A28 F4 24                        dw      EXIT                    // ;
 590+ 2A2A
 591+ 2A2A              //  ______________________________________________________________________
 592+ 2A2A              //
 593+ 2A2A              // cfa          pfa -- cfa
 594+ 2A2A                              Colon_Def CFA, "CFA", is_normal
 594+ 2A2A             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 2A2A             >
 594+ 2A2A             >Dict_Ptr        defl    $
 594+ 2A2A             >
 594+ 2A2A             >//              ______________________________________________________________________
 594+ 2A2A             >//              Heap part
 594+ 2A2A             >
 594+ 2A2A             >
 594+ 2A2A             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C4             >
 594+ E6C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C4             >Latest_Definition defl  Heap_Ptr
 594+ E6C4             >
 594+ E6C4             >                // dummy db directives used to calculate length of namec
 594+ E6C4 43 46 41    >                db      "CFA"
 594+ E6C7             >len_NFA         defl    $ - temp_NFA
 594+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C4             >
 594+ E6C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C5 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6C7 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6C8             >
 594+ E6C8 BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 594+ E6CA             >
 594+ E6CA             >mirror_Ptr      defl    $
 594+ E6CA             >
 594+ E6CA 2C 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6CC             >
 594+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6CC             >
 594+ E6CC             >//              ______________________________________________________________________
 594+ E6CC             >//              Dictionary part
 594+ E6CC             >
 594+ E6CC             >                org     Dict_Ptr
 594+ 2A2A             >
 594+ 2A2A CA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A2C             >
 594+ 2A2C             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A2C CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A2F             >
 594+ 2A2F             >
 594+ 2A2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A2F             >
 594+ 2A2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A2F 3F 27 8E 28                  dw      THREE, SUBTRACT         // 3 -
 596+ 2A33 F4 24                        dw      EXIT                    // ;
 597+ 2A35
 598+ 2A35              //  ______________________________________________________________________
 599+ 2A35              //
 600+ 2A35              // nfa          pfa -- nfa
 601+ 2A35                              Colon_Def NFA, "NFA", is_normal
 601+ 2A35             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 2A35             >
 601+ 2A35             >Dict_Ptr        defl    $
 601+ 2A35             >
 601+ 2A35             >//              ______________________________________________________________________
 601+ 2A35             >//              Heap part
 601+ 2A35             >
 601+ 2A35             >
 601+ 2A35             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6CC             >
 601+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6CC             >Latest_Definition defl  Heap_Ptr
 601+ E6CC             >
 601+ E6CC             >                // dummy db directives used to calculate length of namec
 601+ E6CC 4E 46 41    >                db      "NFA"
 601+ E6CF             >len_NFA         defl    $ - temp_NFA
 601+ E6CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6CC             >
 601+ E6CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6CD 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6D0             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6CF C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6D0             >
 601+ E6D0 C4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6D2             >Prev_Ptr        defl    Heap_Ptr
 601+ E6D2             >
 601+ E6D2             >mirror_Ptr      defl    $
 601+ E6D2             >
 601+ E6D2 37 2A       >                dw      Dict_Ptr + 2        // xt
 601+ E6D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D4             >
 601+ E6D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D4             >
 601+ E6D4             >//              ______________________________________________________________________
 601+ E6D4             >//              Dictionary part
 601+ E6D4             >
 601+ E6D4             >                org     Dict_Ptr
 601+ 2A35             >
 601+ 2A35 D2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 2A37             >
 601+ 2A37             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 2A37 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 2A3A             >
 601+ 2A3A             >
 601+ 2A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 2A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 2A3A             >
 601+ 2A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 2A3A 2C 2A                        dw      CFA                     // cfa
 603+ 2A3C 0D 2A                        dw      TO_NAME                 // traverse
 604+ 2A3E F4 24                        dw      EXIT                    // ;
 605+ 2A40
 606+ 2A40              //  ______________________________________________________________________
 607+ 2A40              //
 608+ 2A40              // lfa          pfa -- lfa
 609+ 2A40                              Colon_Def LFA, "LFA", is_normal
 609+ 2A40             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 2A40             >
 609+ 2A40             >Dict_Ptr        defl    $
 609+ 2A40             >
 609+ 2A40             >//              ______________________________________________________________________
 609+ 2A40             >//              Heap part
 609+ 2A40             >
 609+ 2A40             >
 609+ 2A40             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D4             >
 609+ E6D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D4             >Latest_Definition defl  Heap_Ptr
 609+ E6D4             >
 609+ E6D4             >                // dummy db directives used to calculate length of namec
 609+ E6D4 4C 46 41    >                db      "LFA"
 609+ E6D7             >len_NFA         defl    $ - temp_NFA
 609+ E6D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D4             >
 609+ E6D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D5 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6D8             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6D7 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6D8             >
 609+ E6D8 CC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DA             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DA             >
 609+ E6DA             >mirror_Ptr      defl    $
 609+ E6DA             >
 609+ E6DA 42 2A       >                dw      Dict_Ptr + 2        // xt
 609+ E6DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6DC             >
 609+ E6DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6DC             >
 609+ E6DC             >//              ______________________________________________________________________
 609+ E6DC             >//              Dictionary part
 609+ E6DC             >
 609+ E6DC             >                org     Dict_Ptr
 609+ 2A40             >
 609+ 2A40 DA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 2A42             >
 609+ 2A42             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 2A42 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 2A45             >
 609+ 2A45             >
 609+ 2A45             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 2A45             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 2A45             >
 609+ 2A45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 2A45 37 2A                        dw      NFA                     // nfa
 611+ 2A47 31 27                        dw      ONE                     // 1
 612+ 2A49 23 29                        dw      TRAVERSE                // traverse
 613+ 2A4B 5F 25                        dw      ONE_PLUS                // 1+
 614+ 2A4D F4 24                        dw      EXIT                    // ;
 615+ 2A4F
 616+ 2A4F              //  ______________________________________________________________________
 617+ 2A4F              //
 618+ 2A4F              // pfa          nfa -- pfa
 619+ 2A4F                              Colon_Def PFA, "PFA", is_normal
 619+ 2A4F             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 2A4F             >
 619+ 2A4F             >Dict_Ptr        defl    $
 619+ 2A4F             >
 619+ 2A4F             >//              ______________________________________________________________________
 619+ 2A4F             >//              Heap part
 619+ 2A4F             >
 619+ 2A4F             >
 619+ 2A4F             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6DC             >
 619+ E6DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6DC             >Latest_Definition defl  Heap_Ptr
 619+ E6DC             >
 619+ E6DC             >                // dummy db directives used to calculate length of namec
 619+ E6DC 50 46 41    >                db      "PFA"
 619+ E6DF             >len_NFA         defl    $ - temp_NFA
 619+ E6DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6DC             >
 619+ E6DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6DD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6E0             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6DF C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6E0             >
 619+ E6E0 D4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6E2             >Prev_Ptr        defl    Heap_Ptr
 619+ E6E2             >
 619+ E6E2             >mirror_Ptr      defl    $
 619+ E6E2             >
 619+ E6E2 51 2A       >                dw      Dict_Ptr + 2        // xt
 619+ E6E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E4             >
 619+ E6E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E4             >
 619+ E6E4             >//              ______________________________________________________________________
 619+ E6E4             >//              Dictionary part
 619+ E6E4             >
 619+ E6E4             >                org     Dict_Ptr
 619+ 2A4F             >
 619+ 2A4F E2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 2A51             >
 619+ 2A51             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 2A51 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 2A54             >
 619+ 2A54             >
 619+ 2A54             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 2A54             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 2A54             >
 619+ 2A54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 2A54 A7 29                        dw      QTOHEAP
 621+ 2A56 31 27                        dw      ONE                     // 1
 622+ 2A58 23 29                        dw      TRAVERSE                // traverse
 623+ 2A5A 5F 25                        dw      ONE_PLUS                // 1+
 624+ 2A5C 75 25                        dw      CELL_PLUS               // cell+
 625+ 2A5E 78 29                        dw      QMMU7
 626+ 2A60 8F 20                        dw      ZBRANCH
 627+ 2A62 0E 00                        dw      PFA_Skip - $
 628+ 2A64 40 29                        dw          MMU7_FETCH
 629+ 2A66 31 27 8E 28                  dw          ONE, SUBTRACT
 630+ 2A6A 8F 20                        dw          ZBRANCH
 631+ 2A6C 04 00                        dw          PFA_Skip - $
 632+ 2A6E 34 26                        dw              FETCH
 633+ 2A70              PFA_Skip:                                    // endif
 634+ 2A70 02 2A                        dw      TO_BODY                 // >body
 635+ 2A72 F4 24                        dw      EXIT                    // ;
 636+ 2A74
 637+ 2A74              //  ______________________________________________________________________
 638+ 2A74              //
 639+ 2A74              // !csp         --
 640+ 2A74              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 2A74                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 2A74             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 2A74             >
 641+ 2A74             >Dict_Ptr        defl    $
 641+ 2A74             >
 641+ 2A74             >//              ______________________________________________________________________
 641+ 2A74             >//              Heap part
 641+ 2A74             >
 641+ 2A74             >
 641+ 2A74             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E4             >
 641+ E6E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E4             >Latest_Definition defl  Heap_Ptr
 641+ E6E4             >
 641+ E6E4             >                // dummy db directives used to calculate length of namec
 641+ E6E4 21 43 53 50 >                db      "!CSP"
 641+ E6E8             >len_NFA         defl    $ - temp_NFA
 641+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E4             >
 641+ E6E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E5 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6E8 D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6E9             >
 641+ E6E9 DC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 641+ E6EB             >
 641+ E6EB             >mirror_Ptr      defl    $
 641+ E6EB             >
 641+ E6EB 76 2A       >                dw      Dict_Ptr + 2        // xt
 641+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6ED             >
 641+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6ED             >
 641+ E6ED             >//              ______________________________________________________________________
 641+ E6ED             >//              Dictionary part
 641+ E6ED             >
 641+ E6ED             >                org     Dict_Ptr
 641+ 2A74             >
 641+ 2A74 EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 2A76             >
 641+ 2A76             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 2A76 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 2A79             >
 641+ 2A79             >
 641+ 2A79             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 2A79             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 2A79             >
 641+ 2A79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 2A79 DB 24                        dw      SPFETCH                 // sp@
 643+ 2A7B 0D 28 3E 26                  dw      CSP, STORE              // csp !
 644+ 2A7F F4 24                        dw      EXIT                    // ;
 645+ 2A81
 646+ 2A81              //  ______________________________________________________________________
 647+ 2A81              //
 648+ 2A81              // ?error       f n --
 649+ 2A81              // rase error n if flag f it true
 650+ 2A81                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 2A81             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 2A81             >
 650+ 2A81             >Dict_Ptr        defl    $
 650+ 2A81             >
 650+ 2A81             >//              ______________________________________________________________________
 650+ 2A81             >//              Heap part
 650+ 2A81             >
 650+ 2A81             >
 650+ 2A81             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6ED             >
 650+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6ED             >Latest_Definition defl  Heap_Ptr
 650+ E6ED             >
 650+ E6ED             >                // dummy db directives used to calculate length of namec
 650+ E6ED 3F 45 52 52 >                db      "?ERROR"
 650+ E6F1 4F 52       >
 650+ E6F3             >len_NFA         defl    $ - temp_NFA
 650+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6ED             >
 650+ E6ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6EE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6F2 4F 52       >
 650+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F3 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F4             >
 650+ E6F4 E4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F6             >
 650+ E6F6             >mirror_Ptr      defl    $
 650+ E6F6             >
 650+ E6F6 83 2A       >                dw      Dict_Ptr + 2        // xt
 650+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6F8             >
 650+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6F8             >
 650+ E6F8             >//              ______________________________________________________________________
 650+ E6F8             >//              Dictionary part
 650+ E6F8             >
 650+ E6F8             >                org     Dict_Ptr
 650+ 2A81             >
 650+ 2A81 F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 2A83             >
 650+ 2A83             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 2A83 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 2A86             >
 650+ 2A86             >
 650+ 2A86             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 2A86             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 2A86             >
 650+ 2A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 2A86 C3 25                        dw      SWAP                    // swap
 652+ 2A88                                                              // if
 653+ 2A88 8F 20                        dw      ZBRANCH
 654+ 2A8A 08 00                        dw      QError_Else - $
 655+ 2A8C BD 2F                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 2A8E                                                              // else
 657+ 2A8E 82 20                        dw      BRANCH
 658+ 2A90 04 00                        dw      QError_Endif - $
 659+ 2A92              QError_Else:
 660+ 2A92 AF 25                        dw          DROP                //      drop
 661+ 2A94              QError_Endif:                                   // endif
 662+ 2A94 F4 24                        dw      EXIT                    // ;
 663+ 2A96
 664+ 2A96              //  ______________________________________________________________________
 665+ 2A96              //
 666+ 2A96              // ?comp       --
 667+ 2A96              // raise msg #17 if not compiling
 668+ 2A96                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 2A96             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 2A96             >
 668+ 2A96             >Dict_Ptr        defl    $
 668+ 2A96             >
 668+ 2A96             >//              ______________________________________________________________________
 668+ 2A96             >//              Heap part
 668+ 2A96             >
 668+ 2A96             >
 668+ 2A96             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6F8             >
 668+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6F8             >Latest_Definition defl  Heap_Ptr
 668+ E6F8             >
 668+ E6F8             >                // dummy db directives used to calculate length of namec
 668+ E6F8 3F 43 4F 4D >                db      "?COMP"
 668+ E6FC 50          >
 668+ E6FD             >len_NFA         defl    $ - temp_NFA
 668+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6F8             >
 668+ E6F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E6FD 50          >
 668+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 668+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E6FE             >
 668+ E6FE ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E700             >Prev_Ptr        defl    Heap_Ptr
 668+ E700             >
 668+ E700             >mirror_Ptr      defl    $
 668+ E700             >
 668+ E700 98 2A       >                dw      Dict_Ptr + 2        // xt
 668+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E702             >
 668+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E702             >
 668+ E702             >//              ______________________________________________________________________
 668+ E702             >//              Dictionary part
 668+ E702             >
 668+ E702             >                org     Dict_Ptr
 668+ 2A96             >
 668+ 2A96 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 2A98             >
 668+ 2A98             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 2A98 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 2A9B             >
 668+ 2A9B             >
 668+ 2A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 2A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 2A9B             >
 668+ 2A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 2A9B F5 27 34 26                  dw      STATE, FETCH            // state @
 670+ 2A9F 19 25                        dw      ZEQUAL                  // 0=
 671+ 2AA1 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 2AA5 83 2A                        dw      QERROR                  // ?error
 673+ 2AA7 F4 24                        dw      EXIT                    // ;
 674+ 2AA9
 675+ 2AA9              //  ______________________________________________________________________
 676+ 2AA9              //
 677+ 2AA9              // ?exec       --
 678+ 2AA9              // raise msg #18 if compiling
 679+ 2AA9                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 2AA9             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 2AA9             >
 679+ 2AA9             >Dict_Ptr        defl    $
 679+ 2AA9             >
 679+ 2AA9             >//              ______________________________________________________________________
 679+ 2AA9             >//              Heap part
 679+ 2AA9             >
 679+ 2AA9             >
 679+ 2AA9             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E702             >
 679+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E702             >Latest_Definition defl  Heap_Ptr
 679+ E702             >
 679+ E702             >                // dummy db directives used to calculate length of namec
 679+ E702 3F 45 58 45 >                db      "?EXEC"
 679+ E706 43          >
 679+ E707             >len_NFA         defl    $ - temp_NFA
 679+ E707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E702             >
 679+ E702 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E703 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E707 43          >
 679+ E708             >                org     $-1                 // alter last byte of Name just above to set
 679+ E707 C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E708             >
 679+ E708 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E70A             >Prev_Ptr        defl    Heap_Ptr
 679+ E70A             >
 679+ E70A             >mirror_Ptr      defl    $
 679+ E70A             >
 679+ E70A AB 2A       >                dw      Dict_Ptr + 2        // xt
 679+ E70C             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E70C             >
 679+ E70C             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E70C             >
 679+ E70C             >//              ______________________________________________________________________
 679+ E70C             >//              Dictionary part
 679+ E70C             >
 679+ E70C             >                org     Dict_Ptr
 679+ 2AA9             >
 679+ 2AA9 0A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 2AAB             >
 679+ 2AAB             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 2AAB CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 2AAE             >
 679+ 2AAE             >
 679+ 2AAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 2AAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 2AAE             >
 679+ 2AAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 2AAE F5 27 34 26                  dw      STATE, FETCH            // state @
 681+ 2AB2 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 2AB6 83 2A                        dw      QERROR                  // ?error
 683+ 2AB8 F4 24                        dw      EXIT                    // ;
 684+ 2ABA
 685+ 2ABA              //  ______________________________________________________________________
 686+ 2ABA              //
 687+ 2ABA              // ?pairs       n1 n2 --
 688+ 2ABA              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 2ABA                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 2ABA             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 2ABA             >
 689+ 2ABA             >Dict_Ptr        defl    $
 689+ 2ABA             >
 689+ 2ABA             >//              ______________________________________________________________________
 689+ 2ABA             >//              Heap part
 689+ 2ABA             >
 689+ 2ABA             >
 689+ 2ABA             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E70C             >
 689+ E70C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E70C             >Latest_Definition defl  Heap_Ptr
 689+ E70C             >
 689+ E70C             >                // dummy db directives used to calculate length of namec
 689+ E70C 3F 50 41 49 >                db      "?PAIRS"
 689+ E710 52 53       >
 689+ E712             >len_NFA         defl    $ - temp_NFA
 689+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E70C             >
 689+ E70C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E70D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E711 52 53       >
 689+ E713             >                org     $-1                 // alter last byte of Name just above to set
 689+ E712 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E713             >
 689+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E715             >Prev_Ptr        defl    Heap_Ptr
 689+ E715             >
 689+ E715             >mirror_Ptr      defl    $
 689+ E715             >
 689+ E715 BC 2A       >                dw      Dict_Ptr + 2        // xt
 689+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E717             >
 689+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E717             >
 689+ E717             >//              ______________________________________________________________________
 689+ E717             >//              Dictionary part
 689+ E717             >
 689+ E717             >                org     Dict_Ptr
 689+ 2ABA             >
 689+ 2ABA 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 2ABC             >
 689+ 2ABC             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 2ABC CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 2ABF             >
 689+ 2ABF             >
 689+ 2ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 2ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 2ABF             >
 689+ 2ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 2ABF 8E 28                        dw      SUBTRACT                // -
 691+ 2AC1 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 2AC5 83 2A                        dw      QERROR                  // ?error
 693+ 2AC7 F4 24                        dw      EXIT                    // ;
 694+ 2AC9
 695+ 2AC9              //  ______________________________________________________________________
 696+ 2AC9              //
 697+ 2AC9              // ?csp       --
 698+ 2AC9              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 2AC9              // Compiler relies on that for  syntax checking of structures
 700+ 2AC9                              Colon_Def QCSP, "?CSP", is_normal
 700+ 2AC9             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 2AC9             >
 700+ 2AC9             >Dict_Ptr        defl    $
 700+ 2AC9             >
 700+ 2AC9             >//              ______________________________________________________________________
 700+ 2AC9             >//              Heap part
 700+ 2AC9             >
 700+ 2AC9             >
 700+ 2AC9             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E717             >
 700+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E717             >Latest_Definition defl  Heap_Ptr
 700+ E717             >
 700+ E717             >                // dummy db directives used to calculate length of namec
 700+ E717 3F 43 53 50 >                db      "?CSP"
 700+ E71B             >len_NFA         defl    $ - temp_NFA
 700+ E71B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E717             >
 700+ E717 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E718 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E71C             >                org     $-1                 // alter last byte of Name just above to set
 700+ E71B D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E71C             >
 700+ E71C 0C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E71E             >Prev_Ptr        defl    Heap_Ptr
 700+ E71E             >
 700+ E71E             >mirror_Ptr      defl    $
 700+ E71E             >
 700+ E71E CB 2A       >                dw      Dict_Ptr + 2        // xt
 700+ E720             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E720             >
 700+ E720             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E720             >
 700+ E720             >//              ______________________________________________________________________
 700+ E720             >//              Dictionary part
 700+ E720             >
 700+ E720             >                org     Dict_Ptr
 700+ 2AC9             >
 700+ 2AC9 1E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 2ACB             >
 700+ 2ACB             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 2ACB CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 2ACE             >
 700+ 2ACE             >
 700+ 2ACE             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 2ACE             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 2ACE             >
 700+ 2ACE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 2ACE DB 24                        dw      SPFETCH                 // sp@
 702+ 2AD0 0D 28 34 26                  dw      CSP, FETCH              // csp @
 703+ 2AD4 8E 28                        dw      SUBTRACT                // -
 704+ 2AD6 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 2ADA 83 2A                        dw      QERROR                  // ?error
 706+ 2ADC F4 24                        dw      EXIT                    // ;
 707+ 2ADE
 708+ 2ADE              //  ______________________________________________________________________
 709+ 2ADE              //
 710+ 2ADE              // ?loading      --
 711+ 2ADE              // raise msg #22 if not loading
 712+ 2ADE                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 2ADE             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 2ADE             >
 712+ 2ADE             >Dict_Ptr        defl    $
 712+ 2ADE             >
 712+ 2ADE             >//              ______________________________________________________________________
 712+ 2ADE             >//              Heap part
 712+ 2ADE             >
 712+ 2ADE             >
 712+ 2ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E720             >
 712+ E720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E720             >Latest_Definition defl  Heap_Ptr
 712+ E720             >
 712+ E720             >                // dummy db directives used to calculate length of namec
 712+ E720 3F 4C 4F 41 >                db      "?LOADING"
 712+ E724 44 49 4E 47 >
 712+ E728             >len_NFA         defl    $ - temp_NFA
 712+ E728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E720             >
 712+ E720 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E721 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E725 44 49 4E 47 >
 712+ E729             >                org     $-1                 // alter last byte of Name just above to set
 712+ E728 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E729             >
 712+ E729 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E72B             >Prev_Ptr        defl    Heap_Ptr
 712+ E72B             >
 712+ E72B             >mirror_Ptr      defl    $
 712+ E72B             >
 712+ E72B E0 2A       >                dw      Dict_Ptr + 2        // xt
 712+ E72D             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E72D             >
 712+ E72D             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E72D             >
 712+ E72D             >//              ______________________________________________________________________
 712+ E72D             >//              Dictionary part
 712+ E72D             >
 712+ E72D             >                org     Dict_Ptr
 712+ 2ADE             >
 712+ 2ADE 2B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 2AE0             >
 712+ 2AE0             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 2AE0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 2AE3             >
 712+ 2AE3             >
 712+ 2AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 2AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 2AE3             >
 712+ 2AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 2AE3 CB 27 34 26                  dw      BLK, FETCH              // blk @
 714+ 2AE7 19 25                        dw      ZEQUAL                  // 0=
 715+ 2AE9 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 2AED 83 2A                        dw      QERROR                  // ?error
 717+ 2AEF F4 24                        dw      EXIT                    // ;
 718+ 2AF1
 719+ 2AF1              //  ______________________________________________________________________
 720+ 2AF1              //
 721+ 2AF1              // compile      --
 722+ 2AF1              // compiles the following word
 723+ 2AF1                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 2AF1             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 2AF1             >
 723+ 2AF1             >Dict_Ptr        defl    $
 723+ 2AF1             >
 723+ 2AF1             >//              ______________________________________________________________________
 723+ 2AF1             >//              Heap part
 723+ 2AF1             >
 723+ 2AF1             >
 723+ 2AF1             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E72D             >
 723+ E72D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E72D             >Latest_Definition defl  Heap_Ptr
 723+ E72D             >
 723+ E72D             >                // dummy db directives used to calculate length of namec
 723+ E72D 43 4F 4D 50 >                db      "COMPILE"
 723+ E731 49 4C 45    >
 723+ E734             >len_NFA         defl    $ - temp_NFA
 723+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E72D             >
 723+ E72D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E72E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E732 49 4C 45    >
 723+ E735             >                org     $-1                 // alter last byte of Name just above to set
 723+ E734 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E735             >
 723+ E735 20 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E737             >Prev_Ptr        defl    Heap_Ptr
 723+ E737             >
 723+ E737             >mirror_Ptr      defl    $
 723+ E737             >
 723+ E737 F3 2A       >                dw      Dict_Ptr + 2        // xt
 723+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E739             >
 723+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E739             >
 723+ E739             >//              ______________________________________________________________________
 723+ E739             >//              Dictionary part
 723+ E739             >
 723+ E739             >                org     Dict_Ptr
 723+ 2AF1             >
 723+ 2AF1 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 2AF3             >
 723+ 2AF3             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 2AF3 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 2AF6             >
 723+ 2AF6             >
 723+ 2AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 2AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 2AF6             >
 723+ 2AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 2AF6 98 2A                        dw      QCOMP                   // ?comp
 725+ 2AF8 09 25                        dw      R_TO                    // r>
 726+ 2AFA CA 25 75 25                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 2AFE FE 24                        dw      TO_R                    // >r
 728+ 2B00 34 26 65 28                  dw      FETCH, COMMA            // @ ,
 729+ 2B04 F4 24                        dw      EXIT                    // ;
 730+ 2B06
 731+ 2B06              //  ______________________________________________________________________
 732+ 2B06              //
 733+ 2B06              // compile,     --
 734+ 2B06              // compiles the following word
 735+ 2B06                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 2B06             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 2B06             >
 735+ 2B06             >Dict_Ptr        defl    $
 735+ 2B06             >
 735+ 2B06             >//              ______________________________________________________________________
 735+ 2B06             >//              Heap part
 735+ 2B06             >
 735+ 2B06             >
 735+ 2B06             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E739             >
 735+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E739             >Latest_Definition defl  Heap_Ptr
 735+ E739             >
 735+ E739             >                // dummy db directives used to calculate length of namec
 735+ E739 43 4F 4D 50 >                db      "COMPILE,"
 735+ E73D 49 4C 45 2C >
 735+ E741             >len_NFA         defl    $ - temp_NFA
 735+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E739             >
 735+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E73A 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E73E 49 4C 45 2C >
 735+ E742             >                org     $-1                 // alter last byte of Name just above to set
 735+ E741 AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E742             >
 735+ E742 2D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E744             >Prev_Ptr        defl    Heap_Ptr
 735+ E744             >
 735+ E744             >mirror_Ptr      defl    $
 735+ E744             >
 735+ E744 08 2B       >                dw      Dict_Ptr + 2        // xt
 735+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E746             >
 735+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E746             >
 735+ E746             >//              ______________________________________________________________________
 735+ E746             >//              Dictionary part
 735+ E746             >
 735+ E746             >                org     Dict_Ptr
 735+ 2B06             >
 735+ 2B06 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 2B08             >
 735+ 2B08             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 2B08 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 2B0B             >
 735+ 2B0B             >
 735+ 2B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 2B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 2B0B             >
 735+ 2B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 2B0B              //              dw      QCOMP                   // ?comp
 737+ 2B0B 65 28                        dw      COMMA                   // ,
 738+ 2B0D F4 24                        dw      EXIT                    // ;
 739+ 2B0F
 740+ 2B0F              //  ______________________________________________________________________
 741+ 2B0F              //
 742+ 2B0F              // [            --
 743+ 2B0F              // stop compilation
 744+ 2B0F                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 2B0F             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 2B0F             >
 744+ 2B0F             >Dict_Ptr        defl    $
 744+ 2B0F             >
 744+ 2B0F             >//              ______________________________________________________________________
 744+ 2B0F             >//              Heap part
 744+ 2B0F             >
 744+ 2B0F             >
 744+ 2B0F             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E746             >
 744+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E746             >Latest_Definition defl  Heap_Ptr
 744+ E746             >
 744+ E746             >                // dummy db directives used to calculate length of namec
 744+ E746 5B          >                db      "["
 744+ E747             >len_NFA         defl    $ - temp_NFA
 744+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E746             >
 744+ E746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E747 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E748             >                org     $-1                 // alter last byte of Name just above to set
 744+ E747 DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E748             >
 744+ E748 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E74A             >Prev_Ptr        defl    Heap_Ptr
 744+ E74A             >
 744+ E74A             >mirror_Ptr      defl    $
 744+ E74A             >
 744+ E74A 11 2B       >                dw      Dict_Ptr + 2        // xt
 744+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E74C             >
 744+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E74C             >
 744+ E74C             >//              ______________________________________________________________________
 744+ E74C             >//              Dictionary part
 744+ E74C             >
 744+ E74C             >                org     Dict_Ptr
 744+ 2B0F             >
 744+ 2B0F 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 2B11             >
 744+ 2B11             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 2B11 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 2B14             >
 744+ 2B14             >
 744+ 2B14             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 2B14             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 2B14             >
 744+ 2B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 2B14 2A 27                        dw      ZERO                    // 0
 746+ 2B16 F5 27 3E 26                  dw      STATE, STORE            // state !
 747+ 2B1A F4 24                        dw      EXIT                    // ; immediate
 748+ 2B1C
 749+ 2B1C              //  ______________________________________________________________________
 750+ 2B1C              //
 751+ 2B1C              // ]            --
 752+ 2B1C              // start compilation
 753+ 2B1C                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 2B1C             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 2B1C             >
 753+ 2B1C             >Dict_Ptr        defl    $
 753+ 2B1C             >
 753+ 2B1C             >//              ______________________________________________________________________
 753+ 2B1C             >//              Heap part
 753+ 2B1C             >
 753+ 2B1C             >
 753+ 2B1C             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E74C             >
 753+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E74C             >Latest_Definition defl  Heap_Ptr
 753+ E74C             >
 753+ E74C             >                // dummy db directives used to calculate length of namec
 753+ E74C 5D          >                db      "]"
 753+ E74D             >len_NFA         defl    $ - temp_NFA
 753+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E74C             >
 753+ E74C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E74D 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 753+ E74D DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E74E             >
 753+ E74E 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E750             >Prev_Ptr        defl    Heap_Ptr
 753+ E750             >
 753+ E750             >mirror_Ptr      defl    $
 753+ E750             >
 753+ E750 1E 2B       >                dw      Dict_Ptr + 2        // xt
 753+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E752             >
 753+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E752             >
 753+ E752             >//              ______________________________________________________________________
 753+ E752             >//              Dictionary part
 753+ E752             >
 753+ E752             >                org     Dict_Ptr
 753+ 2B1C             >
 753+ 2B1C 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 2B1E             >
 753+ 2B1E             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 2B1E CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 2B21             >
 753+ 2B21             >
 753+ 2B21             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 2B21             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 2B21             >
 753+ 2B21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 2B21 3D 20 C0 00                  dw      LIT, $C0                // 192
 755+ 2B25 F5 27 3E 26                  dw      STATE, STORE            // state !
 756+ 2B29 F4 24                        dw      EXIT                    // ;
 757+ 2B2B
 758+ 2B2B              //  ______________________________________________________________________
 759+ 2B2B              //
 760+ 2B2B              // smudge       --
 761+ 2B2B              // toggle smudge bit of latest definition
 762+ 2B2B                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 2B2B             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 2B2B             >
 762+ 2B2B             >Dict_Ptr        defl    $
 762+ 2B2B             >
 762+ 2B2B             >//              ______________________________________________________________________
 762+ 2B2B             >//              Heap part
 762+ 2B2B             >
 762+ 2B2B             >
 762+ 2B2B             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E752             >
 762+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E752             >Latest_Definition defl  Heap_Ptr
 762+ E752             >
 762+ E752             >                // dummy db directives used to calculate length of namec
 762+ E752 53 4D 55 44 >                db      "SMUDGE"
 762+ E756 47 45       >
 762+ E758             >len_NFA         defl    $ - temp_NFA
 762+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E752             >
 762+ E752 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E753 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E757 47 45       >
 762+ E759             >                org     $-1                 // alter last byte of Name just above to set
 762+ E758 C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E759             >
 762+ E759 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E75B             >Prev_Ptr        defl    Heap_Ptr
 762+ E75B             >
 762+ E75B             >mirror_Ptr      defl    $
 762+ E75B             >
 762+ E75B 2D 2B       >                dw      Dict_Ptr + 2        // xt
 762+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E75D             >
 762+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E75D             >
 762+ E75D             >//              ______________________________________________________________________
 762+ E75D             >//              Dictionary part
 762+ E75D             >
 762+ E75D             >                org     Dict_Ptr
 762+ 2B2B             >
 762+ 2B2B 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 2B2D             >
 762+ 2B2D             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 2B2D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 2B30             >
 762+ 2B30             >
 762+ 2B30             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 2B30             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 2B30             >
 762+ 2B30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 2B30 F3 29                        dw      LATEST                  // latest
 764+ 2B32 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 2B36 2B 26                        dw      TOGGLE                  // toggle
 766+ 2B38 F4 24                        dw      EXIT                    // ;
 767+ 2B3A
 768+ 2B3A              //  ______________________________________________________________________
 769+ 2B3A              //
 770+ 2B3A              // immediate    --
 771+ 2B3A              // make immediate the latest definition
 772+ 2B3A                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 2B3A             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 2B3A             >
 772+ 2B3A             >Dict_Ptr        defl    $
 772+ 2B3A             >
 772+ 2B3A             >//              ______________________________________________________________________
 772+ 2B3A             >//              Heap part
 772+ 2B3A             >
 772+ 2B3A             >
 772+ 2B3A             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E75D             >
 772+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E75D             >Latest_Definition defl  Heap_Ptr
 772+ E75D             >
 772+ E75D             >                // dummy db directives used to calculate length of namec
 772+ E75D 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E761 44 49 41 54 >
 772+ E765 45          >
 772+ E766             >len_NFA         defl    $ - temp_NFA
 772+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E75D             >
 772+ E75D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E762 44 49 41 54 >
 772+ E766 45          >
 772+ E767             >                org     $-1                 // alter last byte of Name just above to set
 772+ E766 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E767             >
 772+ E767 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E769             >Prev_Ptr        defl    Heap_Ptr
 772+ E769             >
 772+ E769             >mirror_Ptr      defl    $
 772+ E769             >
 772+ E769 3C 2B       >                dw      Dict_Ptr + 2        // xt
 772+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E76B             >
 772+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E76B             >
 772+ E76B             >//              ______________________________________________________________________
 772+ E76B             >//              Dictionary part
 772+ E76B             >
 772+ E76B             >                org     Dict_Ptr
 772+ 2B3A             >
 772+ 2B3A 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 2B3C             >
 772+ 2B3C             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 2B3C CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 2B3F             >
 772+ 2B3F             >
 772+ 2B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 2B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 2B3F             >
 772+ 2B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 2B3F F3 29                        dw      LATEST                  // latest
 774+ 2B41 3D 20 40 00                  dw      LIT, $40                // 64
 775+ 2B45 2B 26                        dw      TOGGLE                  // toggle
 776+ 2B47 F4 24                        dw      EXIT                    // ;
 777+ 2B49
 778+ 2B49              //  ______________________________________________________________________
 779+ 2B49              //
 780+ 2B49              // hex          --
 781+ 2B49              // change numeration base
 782+ 2B49                              Colon_Def HEX, "HEX", is_normal
 782+ 2B49             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 2B49             >
 782+ 2B49             >Dict_Ptr        defl    $
 782+ 2B49             >
 782+ 2B49             >//              ______________________________________________________________________
 782+ 2B49             >//              Heap part
 782+ 2B49             >
 782+ 2B49             >
 782+ 2B49             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E76B             >
 782+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E76B             >Latest_Definition defl  Heap_Ptr
 782+ E76B             >
 782+ E76B             >                // dummy db directives used to calculate length of namec
 782+ E76B 48 45 58    >                db      "HEX"
 782+ E76E             >len_NFA         defl    $ - temp_NFA
 782+ E76E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E76B             >
 782+ E76B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E76C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E76F             >                org     $-1                 // alter last byte of Name just above to set
 782+ E76E D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E76F             >
 782+ E76F 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E771             >Prev_Ptr        defl    Heap_Ptr
 782+ E771             >
 782+ E771             >mirror_Ptr      defl    $
 782+ E771             >
 782+ E771 4B 2B       >                dw      Dict_Ptr + 2        // xt
 782+ E773             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E773             >
 782+ E773             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E773             >
 782+ E773             >//              ______________________________________________________________________
 782+ E773             >//              Dictionary part
 782+ E773             >
 782+ E773             >                org     Dict_Ptr
 782+ 2B49             >
 782+ 2B49 71 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 2B4B             >
 782+ 2B4B             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 2B4B CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 2B4E             >
 782+ 2B4E             >
 782+ 2B4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 2B4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 2B4E             >
 782+ 2B4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 2B4E 3D 20 10 00                  dw      LIT, 16                 // 16
 784+ 2B52 FB 27 3E 26                  dw      BASE, STORE             // base !
 785+ 2B56 F4 24                        dw      EXIT                    // ;
 786+ 2B58
 787+ 2B58              //  ______________________________________________________________________
 788+ 2B58              //
 789+ 2B58              // decimal      --
 790+ 2B58              // change numeration base
 791+ 2B58                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 2B58             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 2B58             >
 791+ 2B58             >Dict_Ptr        defl    $
 791+ 2B58             >
 791+ 2B58             >//              ______________________________________________________________________
 791+ 2B58             >//              Heap part
 791+ 2B58             >
 791+ 2B58             >
 791+ 2B58             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E773             >
 791+ E773             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E773             >Latest_Definition defl  Heap_Ptr
 791+ E773             >
 791+ E773             >                // dummy db directives used to calculate length of namec
 791+ E773 44 45 43 49 >                db      "DECIMAL"
 791+ E777 4D 41 4C    >
 791+ E77A             >len_NFA         defl    $ - temp_NFA
 791+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E773             >
 791+ E773 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E774 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E778 4D 41 4C    >
 791+ E77B             >                org     $-1                 // alter last byte of Name just above to set
 791+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E77B             >
 791+ E77B 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E77D             >Prev_Ptr        defl    Heap_Ptr
 791+ E77D             >
 791+ E77D             >mirror_Ptr      defl    $
 791+ E77D             >
 791+ E77D 5A 2B       >                dw      Dict_Ptr + 2        // xt
 791+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E77F             >
 791+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E77F             >
 791+ E77F             >//              ______________________________________________________________________
 791+ E77F             >//              Dictionary part
 791+ E77F             >
 791+ E77F             >                org     Dict_Ptr
 791+ 2B58             >
 791+ 2B58 7D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 2B5A             >
 791+ 2B5A             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 2B5A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 2B5D             >
 791+ 2B5D             >
 791+ 2B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 2B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 2B5D             >
 791+ 2B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 2B5D 3D 20 0A 00                  dw      LIT, 10                 // 10
 793+ 2B61 FB 27 3E 26                  dw      BASE, STORE             // base !
 794+ 2B65 F4 24                        dw      EXIT                    // ;
 795+ 2B67
 796+ 2B67              //  ______________________________________________________________________
 797+ 2B67              //
 798+ 2B67              // (;code)       --
 799+ 2B67              // patch to CFA to call/jump to the "following code"
 800+ 2B67                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 2B67             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 2B67             >
 800+ 2B67             >Dict_Ptr        defl    $
 800+ 2B67             >
 800+ 2B67             >//              ______________________________________________________________________
 800+ 2B67             >//              Heap part
 800+ 2B67             >
 800+ 2B67             >
 800+ 2B67             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E77F             >
 800+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E77F             >Latest_Definition defl  Heap_Ptr
 800+ E77F             >
 800+ E77F             >                // dummy db directives used to calculate length of namec
 800+ E77F 28 3B 43 4F >                db      "(;CODE)"
 800+ E783 44 45 29    >
 800+ E786             >len_NFA         defl    $ - temp_NFA
 800+ E786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E77F             >
 800+ E77F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E780 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E784 44 45 29    >
 800+ E787             >                org     $-1                 // alter last byte of Name just above to set
 800+ E786 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E787             >
 800+ E787 73 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E789             >Prev_Ptr        defl    Heap_Ptr
 800+ E789             >
 800+ E789             >mirror_Ptr      defl    $
 800+ E789             >
 800+ E789 69 2B       >                dw      Dict_Ptr + 2        // xt
 800+ E78B             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78B             >
 800+ E78B             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78B             >
 800+ E78B             >//              ______________________________________________________________________
 800+ E78B             >//              Dictionary part
 800+ E78B             >
 800+ E78B             >                org     Dict_Ptr
 800+ 2B67             >
 800+ 2B67 89 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 2B69             >
 800+ 2B69             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 2B69 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 2B6C             >
 800+ 2B6C             >
 800+ 2B6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 2B6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 2B6C             >
 800+ 2B6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 2B6C 09 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 2B6E F3 29                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 2B70 51 2A 2C 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 2B74
 805+ 2B74 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 2B78 A6 25 52 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 2B7C 5F 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 2B7E
 809+ 2B7E 3E 26                        dw      STORE                   // !
 810+ 2B80 F4 24                        dw      EXIT                    // ;
 811+ 2B82
 812+ 2B82              //  ______________________________________________________________________
 813+ 2B82              //
 814+ 2B82              // ;code        --
 815+ 2B82                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 2B82             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 2B82             >
 815+ 2B82             >Dict_Ptr        defl    $
 815+ 2B82             >
 815+ 2B82             >//              ______________________________________________________________________
 815+ 2B82             >//              Heap part
 815+ 2B82             >
 815+ 2B82             >
 815+ 2B82             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E78B             >
 815+ E78B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E78B             >Latest_Definition defl  Heap_Ptr
 815+ E78B             >
 815+ E78B             >                // dummy db directives used to calculate length of namec
 815+ E78B 3B 43 4F 44 >                db      ";CODE"
 815+ E78F 45          >
 815+ E790             >len_NFA         defl    $ - temp_NFA
 815+ E790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E78B             >
 815+ E78B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E78C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E790 45          >
 815+ E791             >                org     $-1                 // alter last byte of Name just above to set
 815+ E790 C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E791             >
 815+ E791 7F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E793             >Prev_Ptr        defl    Heap_Ptr
 815+ E793             >
 815+ E793             >mirror_Ptr      defl    $
 815+ E793             >
 815+ E793 84 2B       >                dw      Dict_Ptr + 2        // xt
 815+ E795             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E795             >
 815+ E795             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E795             >
 815+ E795             >//              ______________________________________________________________________
 815+ E795             >//              Dictionary part
 815+ E795             >
 815+ E795             >                org     Dict_Ptr
 815+ 2B82             >
 815+ 2B82 93 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 2B84             >
 815+ 2B84             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 2B84 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 2B87             >
 815+ 2B87             >
 815+ 2B87             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 2B87             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 2B87             >
 815+ 2B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 2B87 CB 2A                        dw      QCSP                    // ?csp
 817+ 2B89 F3 2A                        dw      COMPILE                 // compile
 818+ 2B8B 69 2B                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 2B8D 11 2B                        dw      SQUARED_OPEN            // [
 820+ 2B8F F1 26                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 2B91 F4 24                        dw      EXIT                    // ; immediate
 822+ 2B93
 823+ 2B93              //  ______________________________________________________________________
 824+ 2B93              //
 825+ 2B93              // <builds      --
 826+ 2B93                              Colon_Def CBUILDS, "<BUILDS", is_normal
 826+ 2B93             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 826+ 2B93             >
 826+ 2B93             >Dict_Ptr        defl    $
 826+ 2B93             >
 826+ 2B93             >//              ______________________________________________________________________
 826+ 2B93             >//              Heap part
 826+ 2B93             >
 826+ 2B93             >
 826+ 2B93             >                org     (Heap_Ptr & $1FFF) + $E000
 826+ E795             >
 826+ E795             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ E795             >Latest_Definition defl  Heap_Ptr
 826+ E795             >
 826+ E795             >                // dummy db directives used to calculate length of namec
 826+ E795 3C 42 55 49 >                db      "<BUILDS"
 826+ E799 4C 44 53    >
 826+ E79C             >len_NFA         defl    $ - temp_NFA
 826+ E79C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ E795             >
 826+ E795 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ E796 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 826+ E79A 4C 44 53    >
 826+ E79D             >                org     $-1                 // alter last byte of Name just above to set
 826+ E79C D3          >                db      {b $} | END_BIT     // msb as name end
 826+ E79D             >
 826+ E79D 8B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 826+ E79F             >Prev_Ptr        defl    Heap_Ptr
 826+ E79F             >
 826+ E79F             >mirror_Ptr      defl    $
 826+ E79F             >
 826+ E79F 95 2B       >                dw      Dict_Ptr + 2        // xt
 826+ E7A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 826+ E7A1             >
 826+ E7A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 826+ E7A1             >
 826+ E7A1             >//              ______________________________________________________________________
 826+ E7A1             >//              Dictionary part
 826+ E7A1             >
 826+ E7A1             >                org     Dict_Ptr
 826+ 2B93             >
 826+ 2B93 9F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 826+ 2B95             >
 826+ 2B95             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 2B95 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 2B98             >
 826+ 2B98             >
 826+ 2B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 2B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 2B98             >
 826+ 2B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 2B98 2A 27                        dw      ZERO                    // 0
 828+ 2B9A F5 26                        dw      CONSTANT                // constant
 829+ 2B9C F4 24                        dw      EXIT                    // ;
 830+ 2B9E
 831+ 2B9E              //  ______________________________________________________________________
 832+ 2B9E              //
 833+ 2B9E              // recurse      --
 834+ 2B9E              //              Colon_Def RECURSE, "RECURSE", is_immediate
 835+ 2B9E              //              dw      QCOMP                   // ?comp
 836+ 2B9E              //              dw      LATEST                  // latest
 837+ 2B9E              //              dw      PFA, CFA                // pfa cfa
 838+ 2B9E              //              dw      COMMA                   // ,
 839+ 2B9E              //              dw      EXIT                    // ; immediate
 840+ 2B9E
 841+ 2B9E              //  ______________________________________________________________________
 842+ 2B9E              //
 843+ 2B9E              // does>     --
 844+ 2B9E                              Colon_Def DOES_TO, "DOES>", is_normal
 844+ 2B9E             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 844+ 2B9E             >
 844+ 2B9E             >Dict_Ptr        defl    $
 844+ 2B9E             >
 844+ 2B9E             >//              ______________________________________________________________________
 844+ 2B9E             >//              Heap part
 844+ 2B9E             >
 844+ 2B9E             >
 844+ 2B9E             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ E7A1             >
 844+ E7A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ E7A1             >Latest_Definition defl  Heap_Ptr
 844+ E7A1             >
 844+ E7A1             >                // dummy db directives used to calculate length of namec
 844+ E7A1 44 4F 45 53 >                db      "DOES>"
 844+ E7A5 3E          >
 844+ E7A6             >len_NFA         defl    $ - temp_NFA
 844+ E7A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ E7A1             >
 844+ E7A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ E7A2 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 844+ E7A6 3E          >
 844+ E7A7             >                org     $-1                 // alter last byte of Name just above to set
 844+ E7A6 BE          >                db      {b $} | END_BIT     // msb as name end
 844+ E7A7             >
 844+ E7A7 95 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ E7A9             >Prev_Ptr        defl    Heap_Ptr
 844+ E7A9             >
 844+ E7A9             >mirror_Ptr      defl    $
 844+ E7A9             >
 844+ E7A9 A0 2B       >                dw      Dict_Ptr + 2        // xt
 844+ E7AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ E7AB             >
 844+ E7AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ E7AB             >
 844+ E7AB             >//              ______________________________________________________________________
 844+ E7AB             >//              Dictionary part
 844+ E7AB             >
 844+ E7AB             >                org     Dict_Ptr
 844+ 2B9E             >
 844+ 2B9E A9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 2BA0             >
 844+ 2BA0             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 2BA0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 2BA3             >
 844+ 2BA3             >
 844+ 2BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 2BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 2BA3             >
 844+ 2BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 2BA3 09 25                        dw      R_TO                    // r>
 846+ 2BA5 F3 29                        dw      LATEST                  // latest
 847+ 2BA7 51 2A                        dw      PFA                     // pfa
 848+ 2BA9 3E 26                        dw      STORE                   // !        \ old use of <BUILDS
 849+ 2BAB              //              dw      COMMA                   // ,        \ new use of CREATE
 850+ 2BAB 69 2B                        dw      C_SEMICOLON_CODE        // ;code
 851+ 2BAD              Does_Ptr:
 852+ 2BAD                              // via call coded in CFA
 853+ 2BAD EB                           ex      de, hl //**
 854+ 2BAE                              // *** ldhlrp
 855+ 2BAE 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 856+ 2BAF 70                           ld      (hl), b
 857+ 2BB0 2B                           dec     hl
 858+ 2BB1 71                           ld      (hl), c
 859+ 2BB2                              // *** ldrphl
 860+ 2BB2 EB                           ex      de, hl //**
 861+ 2BB3 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 862+ 2BB4
 863+ 2BB4 4E                           ld      c, (hl)
 864+ 2BB5 23                           inc     hl
 865+ 2BB6 46                           ld      b, (hl)
 866+ 2BB7 23                           inc     hl
 867+ 2BB8
 868+ 2BB8                              psh1
 868+ 2BB8 E5          >                push    hl
 868+ 2BB9 DD E9       >                jp      (ix)
 869+ 2BBB                              // SMUDGE !
 870+ 2BBB
 871+ 2BBB              //  ______________________________________________________________________
 872+ 2BBB              //
 873+ 2BBB              // count        a -- a2 n
 874+ 2BBB              // expects a counted string at address a, returns string address and counter
 875+ 2BBB                              New_Def COUNT, "COUNT", is_code, is_normal
 875+ 2BBB             >
 875+ 2BBB             >Dict_Ptr        defl    $
 875+ 2BBB             >
 875+ 2BBB             >//              ______________________________________________________________________
 875+ 2BBB             >//              Heap part
 875+ 2BBB             >
 875+ 2BBB             >
 875+ 2BBB             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ E7AB             >
 875+ E7AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ E7AB             >Latest_Definition defl  Heap_Ptr
 875+ E7AB             >
 875+ E7AB             >                // dummy db directives used to calculate length of namec
 875+ E7AB 43 4F 55 4E >                db      "COUNT"
 875+ E7AF 54          >
 875+ E7B0             >len_NFA         defl    $ - temp_NFA
 875+ E7B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ E7AB             >
 875+ E7AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ E7AC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 875+ E7B0 54          >
 875+ E7B1             >                org     $-1                 // alter last byte of Name just above to set
 875+ E7B0 D4          >                db      {b $} | END_BIT     // msb as name end
 875+ E7B1             >
 875+ E7B1 A1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ E7B3             >Prev_Ptr        defl    Heap_Ptr
 875+ E7B3             >
 875+ E7B3             >mirror_Ptr      defl    $
 875+ E7B3             >
 875+ E7B3 BD 2B       >                dw      Dict_Ptr + 2        // xt
 875+ E7B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ E7B5             >
 875+ E7B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ E7B5             >
 875+ E7B5             >//              ______________________________________________________________________
 875+ E7B5             >//              Dictionary part
 875+ E7B5             >
 875+ E7B5             >                org     Dict_Ptr
 875+ 2BBB             >
 875+ 2BBB B3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 2BBD             >
 875+ 2BBD             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 2BBD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 875+ 2BBD ~           >
 875+ 2BBD ~           >
 875+ 2BBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 2BBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 2BBD             >
 875+ 2BBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 2BBD D9                           exx
 877+ 2BBE E1                           pop     hl
 878+ 2BBF 5E                           ld      e, (hl)
 879+ 2BC0 16 00                        ld      d, 0
 880+ 2BC2 23                           inc     hl
 881+ 2BC3              Count_Here:
 882+ 2BC3 E5                           push    hl
 883+ 2BC4 D5                           push    de
 884+ 2BC5 D9                           exx
 885+ 2BC6                              next
 885+ 2BC6 DD E9       >                jp      (ix)
 886+ 2BC8              //                pop     hl
 887+ 2BC8              //                ld      a, (hl)
 888+ 2BC8              //                inc     hl
 889+ 2BC8              //                push    hl
 890+ 2BC8              //                ld      h, 0
 891+ 2BC8              //                ld      l, a
 892+ 2BC8              //                push    hl
 893+ 2BC8              //                next
 894+ 2BC8
 895+ 2BC8              //  ______________________________________________________________________
 896+ 2BC8              //
 897+ 2BC8              // bounds       a n -- a+n n
 898+ 2BC8              // given an address and a length ( a n ) calculate the bound addresses
 899+ 2BC8              // suitable for DO-LOOP
 900+ 2BC8                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 900+ 2BC8             >
 900+ 2BC8             >Dict_Ptr        defl    $
 900+ 2BC8             >
 900+ 2BC8             >//              ______________________________________________________________________
 900+ 2BC8             >//              Heap part
 900+ 2BC8             >
 900+ 2BC8             >
 900+ 2BC8             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ E7B5             >
 900+ E7B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ E7B5             >Latest_Definition defl  Heap_Ptr
 900+ E7B5             >
 900+ E7B5             >                // dummy db directives used to calculate length of namec
 900+ E7B5 42 4F 55 4E >                db      "BOUNDS"
 900+ E7B9 44 53       >
 900+ E7BB             >len_NFA         defl    $ - temp_NFA
 900+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ E7B5             >
 900+ E7B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ E7B6 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 900+ E7BA 44 53       >
 900+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 900+ E7BB D3          >                db      {b $} | END_BIT     // msb as name end
 900+ E7BC             >
 900+ E7BC AB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 900+ E7BE             >
 900+ E7BE             >mirror_Ptr      defl    $
 900+ E7BE             >
 900+ E7BE CA 2B       >                dw      Dict_Ptr + 2        // xt
 900+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ E7C0             >
 900+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ E7C0             >
 900+ E7C0             >//              ______________________________________________________________________
 900+ E7C0             >//              Dictionary part
 900+ E7C0             >
 900+ E7C0             >                org     Dict_Ptr
 900+ 2BC8             >
 900+ 2BC8 BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 2BCA             >
 900+ 2BCA             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 2BCA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 2BCA ~           >
 900+ 2BCA ~           >
 900+ 2BCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 2BCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 2BCA             >
 900+ 2BCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 2BCA D9                           exx
 902+ 2BCB E1                           pop     hl
 903+ 2BCC D1                           pop     de
 904+ 2BCD 19                           add     hl, de
 905+ 2BCE 18 F3                        jr      Count_Here
 906+ 2BD0                              // push    hl
 907+ 2BD0                              // push    de
 908+ 2BD0                              // exx
 909+ 2BD0                              // next
 910+ 2BD0
 911+ 2BD0              //  ______________________________________________________________________
 912+ 2BD0              //
 913+ 2BD0              // leave        --
 914+ 2BD0              // Compile (leave) to leave current LOOP and jump just after it
 915+ 2BD0                              Colon_Def LEAVE, "LEAVE", is_immediate
 915+ 2BD0             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 915+ 2BD0             >
 915+ 2BD0             >Dict_Ptr        defl    $
 915+ 2BD0             >
 915+ 2BD0             >//              ______________________________________________________________________
 915+ 2BD0             >//              Heap part
 915+ 2BD0             >
 915+ 2BD0             >
 915+ 2BD0             >                org     (Heap_Ptr & $1FFF) + $E000
 915+ E7C0             >
 915+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ E7C0             >Latest_Definition defl  Heap_Ptr
 915+ E7C0             >
 915+ E7C0             >                // dummy db directives used to calculate length of namec
 915+ E7C0 4C 45 41 56 >                db      "LEAVE"
 915+ E7C4 45          >
 915+ E7C5             >len_NFA         defl    $ - temp_NFA
 915+ E7C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ E7C0             >
 915+ E7C0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ E7C1 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 915+ E7C5 45          >
 915+ E7C6             >                org     $-1                 // alter last byte of Name just above to set
 915+ E7C5 C5          >                db      {b $} | END_BIT     // msb as name end
 915+ E7C6             >
 915+ E7C6 B5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 915+ E7C8             >Prev_Ptr        defl    Heap_Ptr
 915+ E7C8             >
 915+ E7C8             >mirror_Ptr      defl    $
 915+ E7C8             >
 915+ E7C8 D2 2B       >                dw      Dict_Ptr + 2        // xt
 915+ E7CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 915+ E7CA             >
 915+ E7CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 915+ E7CA             >
 915+ E7CA             >//              ______________________________________________________________________
 915+ E7CA             >//              Dictionary part
 915+ E7CA             >
 915+ E7CA             >                org     Dict_Ptr
 915+ 2BD0             >
 915+ 2BD0 C8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 915+ 2BD2             >
 915+ 2BD2             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 2BD2 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 2BD5             >
 915+ 2BD5             >
 915+ 2BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 2BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 2BD5             >
 915+ 2BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 2BD5 F3 2A 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 917+ 2BD9 4F 28 FE 24                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 917+ 2BDD 2A 27 65 28
 918+ 2BE1 2A 27 2A 27                  dw      ZERO, ZERO
 919+ 2BE5 DB 24 CA 25                  dw      SPFETCH, DUP
 920+ 2BE9 75 25 75 25                  dw      CELL_PLUS, CELL_PLUS
 921+ 2BED BA 25                        dw      TUCK
 922+ 2BEF 0D 28 34 26                  dw      CSP, FETCH
 923+ 2BF3 C3 25 8E 28                  dw      SWAP, SUBTRACT
 924+ 2BF7 35 24                        dw      CMOVE
 925+ 2BF9 0D 28 34 26                  dw      CSP, FETCH, CELL_MINUS
 925+ 2BFD 79 25
 926+ 2BFF 09 25 A6 25                  dw      R_TO, OVER, STORE
 926+ 2C03 3E 26
 927+ 2C05 79 25 2A 27                  dw      CELL_MINUS, ZERO
 928+ 2C09 C3 25 3E 26                  dw      SWAP, STORE
 929+ 2C0D F4 24                        dw      EXIT                    // ;
 930+ 2C0F
 931+ 2C0F              //  ______________________________________________________________________
 932+ 2C0F              //
 933+ 2C0F              // type         a n --
 934+ 2C0F              // Sends to current output channel n characters starting at address a.
 935+ 2C0F                              Colon_Def TYPE, "TYPE", is_normal
 935+ 2C0F             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 935+ 2C0F             >
 935+ 2C0F             >Dict_Ptr        defl    $
 935+ 2C0F             >
 935+ 2C0F             >//              ______________________________________________________________________
 935+ 2C0F             >//              Heap part
 935+ 2C0F             >
 935+ 2C0F             >
 935+ 2C0F             >                org     (Heap_Ptr & $1FFF) + $E000
 935+ E7CA             >
 935+ E7CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ E7CA             >Latest_Definition defl  Heap_Ptr
 935+ E7CA             >
 935+ E7CA             >                // dummy db directives used to calculate length of namec
 935+ E7CA 54 59 50 45 >                db      "TYPE"
 935+ E7CE             >len_NFA         defl    $ - temp_NFA
 935+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ E7CA             >
 935+ E7CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ E7CB 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 935+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 935+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 935+ E7CF             >
 935+ E7CF C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 935+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 935+ E7D1             >
 935+ E7D1             >mirror_Ptr      defl    $
 935+ E7D1             >
 935+ E7D1 11 2C       >                dw      Dict_Ptr + 2        // xt
 935+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 935+ E7D3             >
 935+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 935+ E7D3             >
 935+ E7D3             >//              ______________________________________________________________________
 935+ E7D3             >//              Dictionary part
 935+ E7D3             >
 935+ E7D3             >                org     Dict_Ptr
 935+ 2C0F             >
 935+ 2C0F D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 935+ 2C11             >
 935+ 2C11             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 2C11 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 2C14             >
 935+ 2C14             >
 935+ 2C14             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 2C14             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 2C14             >
 935+ 2C14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 2C14 CA 2B                        dw      BOUNDS                  // bounds
 937+ 2C16 A4 20                        dw      C_Q_DO                  // ?do
 938+ 2C18 0C 00                        dw      Type_Skip - $
 939+ 2C1A              Type_Loop:
 940+ 2C1A D2 20 49 26                  dw          I, CFETCH           //      i c@
 941+ 2C1E 01 29                        dw          EMIT                //      emit
 942+ 2C20 7A 20                        dw      C_LOOP                  // loop
 943+ 2C22 F8 FF                        dw      Type_Loop - $
 944+ 2C24              Type_Skip:
 945+ 2C24 F4 24                        dw      EXIT                    // ;
 946+ 2C26
 947+ 2C26              //  ______________________________________________________________________
 948+ 2C26              //
 949+ 2C26              // -trailing    a n1 -- a n2
 950+ 2C26              // Assumes that an n1 bytes-long string is stored at address a
 951+ 2C26              // and the string contains a space delimited word,
 952+ 2C26              // Finds n2 as the position of the first character after the word.
 953+ 2C26                              Colon_Def LTRAILING, "-TRAILING", is_normal
 953+ 2C26             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 953+ 2C26             >
 953+ 2C26             >Dict_Ptr        defl    $
 953+ 2C26             >
 953+ 2C26             >//              ______________________________________________________________________
 953+ 2C26             >//              Heap part
 953+ 2C26             >
 953+ 2C26             >
 953+ 2C26             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ E7D3             >
 953+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ E7D3             >Latest_Definition defl  Heap_Ptr
 953+ E7D3             >
 953+ E7D3             >                // dummy db directives used to calculate length of namec
 953+ E7D3 2D 54 52 41 >                db      "-TRAILING"
 953+ E7D7 49 4C 49 4E >
 953+ E7DB 47          >
 953+ E7DC             >len_NFA         defl    $ - temp_NFA
 953+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ E7D3             >
 953+ E7D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ E7D4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 953+ E7D8 49 4C 49 4E >
 953+ E7DC 47          >
 953+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 953+ E7DC C7          >                db      {b $} | END_BIT     // msb as name end
 953+ E7DD             >
 953+ E7DD CA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 953+ E7DF             >
 953+ E7DF             >mirror_Ptr      defl    $
 953+ E7DF             >
 953+ E7DF 28 2C       >                dw      Dict_Ptr + 2        // xt
 953+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ E7E1             >
 953+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ E7E1             >
 953+ E7E1             >//              ______________________________________________________________________
 953+ E7E1             >//              Dictionary part
 953+ E7E1             >
 953+ E7E1             >                org     Dict_Ptr
 953+ 2C26             >
 953+ 2C26 DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 2C28             >
 953+ 2C28             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 2C28 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 953+ 2C2B             >
 953+ 2C2B             >
 953+ 2C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 2C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 2C2B             >
 953+ 2C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 2C2B CA 25 2A 27                  dw      DUP, ZERO               // dup 0
 955+ 2C2F                                                              // do
 956+ 2C2F A4 20                        dw      C_Q_DO
 957+ 2C31 20 00                        dw      LTrailing_Leave - $
 958+ 2C33              LTrailing_Loop:
 959+ 2C33 12 26 46 25                  dw          TWO_DUP, PLUS       //      2dup +
 960+ 2C37 66 25                        dw          ONE_SUBTRACT        //      1-
 961+ 2C39 49 26                        dw          CFETCH              //      c@
 962+ 2C3B 4D 27 8E 28                  dw          BL, SUBTRACT        //      bl -
 963+ 2C3F                                                              //      if
 964+ 2C3F 8F 20                        dw          ZBRANCH
 965+ 2C41 0A 00                        dw          LTrailing_Else - $
 966+ 2C43 9A 20                        dw              C_LEAVE         //          leave
 967+ 2C45 0C 00                        dw              LTrailing_Leave - $
 968+ 2C47 82 20                        dw          BRANCH              //      else
 969+ 2C49 04 00                        dw          LTrailing_Endif - $
 970+ 2C4B              LTrailing_Else:
 971+ 2C4B 66 25                        dw              ONE_SUBTRACT    //          1-
 972+ 2C4D              LTrailing_Endif:                                //      endif
 973+ 2C4D                                                              // loop
 974+ 2C4D 7A 20                        dw      C_LOOP
 975+ 2C4F E4 FF                        dw      LTrailing_Loop - $
 976+ 2C51              LTrailing_Leave:
 977+ 2C51 F4 24                        dw      EXIT                    // ;
 978+ 2C53
 979+ 2C53              //  ______________________________________________________________________
 980+ 2C53              //
 981+ 2C53              // accept       a n1 -- n2
 982+ 2C53              // Accepts at most n1 characters from terminal and stores them at address a
 983+ 2C53              // CR stops input. A 'nul' is added as trailer.
 984+ 2C53              // n2 is the string length. n2 is kept in span user variable also.
 985+ 2C53                              Colon_Def ACCEPT, "ACCEPT", is_normal
 985+ 2C53             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 985+ 2C53             >
 985+ 2C53             >Dict_Ptr        defl    $
 985+ 2C53             >
 985+ 2C53             >//              ______________________________________________________________________
 985+ 2C53             >//              Heap part
 985+ 2C53             >
 985+ 2C53             >
 985+ 2C53             >                org     (Heap_Ptr & $1FFF) + $E000
 985+ E7E1             >
 985+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ E7E1             >Latest_Definition defl  Heap_Ptr
 985+ E7E1             >
 985+ E7E1             >                // dummy db directives used to calculate length of namec
 985+ E7E1 41 43 43 45 >                db      "ACCEPT"
 985+ E7E5 50 54       >
 985+ E7E7             >len_NFA         defl    $ - temp_NFA
 985+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ E7E1             >
 985+ E7E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ E7E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 985+ E7E6 50 54       >
 985+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 985+ E7E7 D4          >                db      {b $} | END_BIT     // msb as name end
 985+ E7E8             >
 985+ E7E8 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 985+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 985+ E7EA             >
 985+ E7EA             >mirror_Ptr      defl    $
 985+ E7EA             >
 985+ E7EA 55 2C       >                dw      Dict_Ptr + 2        // xt
 985+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 985+ E7EC             >
 985+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 985+ E7EC             >
 985+ E7EC             >//              ______________________________________________________________________
 985+ E7EC             >//              Dictionary part
 985+ E7EC             >
 985+ E7EC             >                org     Dict_Ptr
 985+ 2C53             >
 985+ 2C53 EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 985+ 2C55             >
 985+ 2C55             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 2C55 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 2C58             >
 985+ 2C58             >
 985+ 2C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 2C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 2C58             >
 985+ 2C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 2C58 A6 25 46 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 986+ 2C5C A6 25
 987+ 2C5E 2A 27 DA 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 988+ 2C62                                                              // do
 989+ 2C62 A4 20                        dw      C_Q_DO
 990+ 2C64 8C 00                        dw      Accept_Leave - $
 991+ 2C66              Accept_Loop:
 992+ 2C66 D0 22                        dw          CUR
 993+ 2C68 AF 25 18 23                  dw          DROP, KEY           //      drop key        ( a  c )
 994+ 2C6C CA 25                        dw          DUP                 //      dup             ( a  c  c )
 995+ 2C6E 3D 20 0E 00                  dw          LIT, $0E            //      0E
 996+ 2C72 70 27                        dw          PLUS_ORIGIN         //      +origin
 997+ 2C74 34 26                        dw          FETCH               //      @               ( a  c  c  del )
 998+ 2C76 9A 28                        dw          EQUALS              //      =               ( a  c  c==del )
 999+ 2C78                                                              //      if
1000+ 2C78 8F 20                        dw          ZBRANCH
1001+ 2C7A 2C 00                        dw          Accept_Else_0 - $
1002+ 2C7C AF 25                        dw              DROP            //          drop        ( a  )
1003+ 2C7E CA 25 D2 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1003+ 2C82 9A 28
1004+ 2C84 31 27 B4 24                  dw              ONE, AND_OP     //          1 and
1005+ 2C88 CA 25                        dw              DUP             //          dup         ( a  a==i  a==i )
1006+ 2C8A 09 25                        dw              R_TO            //          r> 2 - + r>
1007+ 2C8C 81 25 46 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1008+ 2C90 FE 24                        dw              TO_R            //
1009+ 2C92                                                              //          if
1010+ 2C92 8F 20                        dw              ZBRANCH
1011+ 2C94 0A 00                        dw              Accept_Else_1 - $
1012+ 2C96 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1013+ 2C9A                                                              //          else
1014+ 2C9A 82 20                        dw              BRANCH
1015+ 2C9C 06 00                        dw              Accept_Endif_1 - $
1016+ 2C9E              Accept_Else_1:
1017+ 2C9E 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1018+ 2CA2              Accept_Endif_1:                                 //          endif
1019+ 2CA2 82 20                        dw          BRANCH
1020+ 2CA4 2E 00                        dw          Accept_Endif_0 - $
1021+ 2CA6              Accept_Else_0:                                  //      else
1022+ 2CA6 CA 25                        dw              DUP             //          dup         ( a  c  c )
1023+ 2CA8 3D 20 0D 00                  dw              LIT, 13         //          13
1024+ 2CAC 9A 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1025+ 2CAE                                                              //          if
1026+ 2CAE 8F 20                        dw              ZBRANCH
1027+ 2CB0 0C 00                        dw              Accept_Else_2 - $
1028+ 2CB2 AF 25 4D 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1029+ 2CB6 2A 27                        dw                  ZERO        //              0       ( a  c  0 )
1030+ 2CB8                                                              //          else
1031+ 2CB8 82 20                        dw              BRANCH
1032+ 2CBA 04 00                        dw              Accept_Endif_2 - $
1033+ 2CBC              Accept_Else_2:
1034+ 2CBC CA 25                        dw                  DUP         //              dup     ( a  c  c )
1035+ 2CBE                                                              //          endif
1036+ 2CBE              Accept_Endif_2:
1037+ 2CBE D2 20 52 26                  dw              I, CSTORE       //          i           ( a  c )
1038+ 2CC2 CA 25 4D 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1038+ 2CC6 B3 28
1039+ 2CC8                                                              //          if
1040+ 2CC8 8F 20                        dw              ZBRANCH
1041+ 2CCA 08 00                        dw              Accept_Endif_3 - $
1042+ 2CCC 09 25                        dw                  R_TO        //              r>
1043+ 2CCE 66 25                        dw                  ONE_SUBTRACT//              1-
1044+ 2CD0 FE 24                        dw                  TO_R        //              >r
1045+ 2CD2                                                              //          endif
1046+ 2CD2              Accept_Endif_3:
1047+ 2CD2              Accept_Endif_0:                                 //      endif
1048+ 2CD2 01 29                        dw          EMIT                //      emit
1049+ 2CD4
1050+ 2CD4 2A 27 D2 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1050+ 2CD8 5F 25
1051+ 2CDA 3E 26                        dw          STORE               //          ( zero pad )
1052+ 2CDC D2 20                        dw          I                   //      i
1053+ 2CDE D2 20 49 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1053+ 2CE2 19 25
1054+ 2CE4 8F 20                        dw          ZBRANCH             //
1055+ 2CE6 06 00                        dw              Accept_Endif_4 - $
1056+ 2CE8 9A 20                        dw                  C_LEAVE     //              leave
1057+ 2CEA 06 00                        dw                  Accept_Leave - $
1058+ 2CEC              Accept_Endif_4:                                 //      endif
1059+ 2CEC                                                              // loop
1060+ 2CEC 7A 20                        dw      C_LOOP
1061+ 2CEE 78 FF                        dw      Accept_Loop - $
1062+ 2CF0              Accept_Leave:
1063+ 2CF0 C3 25 8E 28                  dw      SWAP, SUBTRACT          // swap -
1064+ 2CF4 5F 25                        dw      ONE_PLUS                // 1+
1065+ 2CF6 CA 25 3D 28                  dw      DUP, SPAN, STORE        // dup span !
1065+ 2CFA 3E 26
1066+ 2CFC F4 24                        dw      EXIT                    // ;
1067+ 2CFE
1068+ 2CFE              //  ______________________________________________________________________
1069+ 2CFE              //
1070+ 2CFE              // expect      a n --
1071+ 2CFE              // Accepts at most n1 characters from terminal and stores them at address a
1072+ 2CFE              // CR stops input. A 'nul' is added as trailer.
1073+ 2CFE              // n2 is the string length. n2 is kept in span user variable also.
1074+ 2CFE              //              Colon_Def EXPECT, "EXPECT", is_normal
1075+ 2CFE              //              dw      ACCEPT, DROP            // accept drop
1076+ 2CFE              //              dw      EXIT                    // ;
1077+ 2CFE
1078+ 2CFE              //  ______________________________________________________________________
1079+ 2CFE              //
1080+ 2CFE              // query        --
1081+ 2CFE              // Accept at most 80 character from console. CR stops.
1082+ 2CFE              // Text is stored in TIB. Variable IN is zeroed.
1083+ 2CFE                              Colon_Def QUERY, "QUERY", is_normal
1083+ 2CFE             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1083+ 2CFE             >
1083+ 2CFE             >Dict_Ptr        defl    $
1083+ 2CFE             >
1083+ 2CFE             >//              ______________________________________________________________________
1083+ 2CFE             >//              Heap part
1083+ 2CFE             >
1083+ 2CFE             >
1083+ 2CFE             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E7EC             >
1083+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E7EC             >Latest_Definition defl  Heap_Ptr
1083+ E7EC             >
1083+ E7EC             >                // dummy db directives used to calculate length of namec
1083+ E7EC 51 55 45 52 >                db      "QUERY"
1083+ E7F0 59          >
1083+ E7F1             >len_NFA         defl    $ - temp_NFA
1083+ E7F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E7EC             >
1083+ E7EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E7ED 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1083+ E7F1 59          >
1083+ E7F2             >                org     $-1                 // alter last byte of Name just above to set
1083+ E7F1 D9          >                db      {b $} | END_BIT     // msb as name end
1083+ E7F2             >
1083+ E7F2 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E7F4             >Prev_Ptr        defl    Heap_Ptr
1083+ E7F4             >
1083+ E7F4             >mirror_Ptr      defl    $
1083+ E7F4             >
1083+ E7F4 00 2D       >                dw      Dict_Ptr + 2        // xt
1083+ E7F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E7F6             >
1083+ E7F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E7F6             >
1083+ E7F6             >//              ______________________________________________________________________
1083+ E7F6             >//              Dictionary part
1083+ E7F6             >
1083+ E7F6             >                org     Dict_Ptr
1083+ 2CFE             >
1083+ 2CFE F4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 2D00             >
1083+ 2D00             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 2D00 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 2D03             >
1083+ 2D03             >
1083+ 2D03             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 2D03             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 2D03             >
1083+ 2D03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 2D03 8F 27 34 26                  dw      TIB, FETCH              // tib @
1085+ 2D07 3D 20 50 00                  dw      LIT, 80                 // 80
1086+ 2D0B 55 2C AF 25                  dw      ACCEPT, DROP            // accept drop
1087+ 2D0F 2A 27 D1 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1087+ 2D13 3E 26
1088+ 2D15 F4 24                        dw      EXIT                    // ;
1089+ 2D17
1090+ 2D17              //  ______________________________________________________________________
1091+ 2D17              //
1092+ 2D17              // fill        a n c --
1093+ 2D17              // If n > 0, fills n locations starting from address a with the value c.
1094+ 2D17                              New_Def FILL, "FILL", is_code, is_normal
1094+ 2D17             >
1094+ 2D17             >Dict_Ptr        defl    $
1094+ 2D17             >
1094+ 2D17             >//              ______________________________________________________________________
1094+ 2D17             >//              Heap part
1094+ 2D17             >
1094+ 2D17             >
1094+ 2D17             >                org     (Heap_Ptr & $1FFF) + $E000
1094+ E7F6             >
1094+ E7F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ E7F6             >Latest_Definition defl  Heap_Ptr
1094+ E7F6             >
1094+ E7F6             >                // dummy db directives used to calculate length of namec
1094+ E7F6 46 49 4C 4C >                db      "FILL"
1094+ E7FA             >len_NFA         defl    $ - temp_NFA
1094+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ E7F6             >
1094+ E7F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ E7F7 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1094+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1094+ E7FA CC          >                db      {b $} | END_BIT     // msb as name end
1094+ E7FB             >
1094+ E7FB EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1094+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1094+ E7FD             >
1094+ E7FD             >mirror_Ptr      defl    $
1094+ E7FD             >
1094+ E7FD 19 2D       >                dw      Dict_Ptr + 2        // xt
1094+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1094+ E7FF             >
1094+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1094+ E7FF             >
1094+ E7FF             >//              ______________________________________________________________________
1094+ E7FF             >//              Dictionary part
1094+ E7FF             >
1094+ E7FF             >                org     Dict_Ptr
1094+ 2D17             >
1094+ 2D17 FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1094+ 2D19             >
1094+ 2D19             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 2D19 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1094+ 2D19 ~           >
1094+ 2D19 ~           >
1094+ 2D19             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 2D19             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 2D19             >
1094+ 2D19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 2D19 D9                           exx
1096+ 2D1A D1                           pop     de                  // de has character
1097+ 2D1B C1                           pop     bc                  // bc has counter
1098+ 2D1C E1                           pop     hl                  // hl has address, save Instruction Pointer
1099+ 2D1D              Fill_Loop:
1100+ 2D1D 78                               ld      a, b
1101+ 2D1E B1                               or      c
1102+ 2D1F 28 05                        jr      z, Fill_While_End
1103+ 2D21 73                               ld      (hl), e
1104+ 2D22 0B                               dec     bc
1105+ 2D23 23                               inc     hl
1106+ 2D24 18 F7                        jr      Fill_Loop
1107+ 2D26              Fill_While_End:
1108+ 2D26 D9                           exx
1109+ 2D27                              next
1109+ 2D27 DD E9       >                jp      (ix)
1110+ 2D29
1111+ 2D29              //  ______________________________________________________________________
1112+ 2D29              //
1113+ 2D29              // erase        a n --
1114+ 2D29              // If n > 0, fills n locations starting from address a with 'nul' characters.
1115+ 2D29                              Colon_Def ERASE, "ERASE", is_normal
1115+ 2D29             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1115+ 2D29             >
1115+ 2D29             >Dict_Ptr        defl    $
1115+ 2D29             >
1115+ 2D29             >//              ______________________________________________________________________
1115+ 2D29             >//              Heap part
1115+ 2D29             >
1115+ 2D29             >
1115+ 2D29             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E7FF             >
1115+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E7FF             >Latest_Definition defl  Heap_Ptr
1115+ E7FF             >
1115+ E7FF             >                // dummy db directives used to calculate length of namec
1115+ E7FF 45 52 41 53 >                db      "ERASE"
1115+ E803 45          >
1115+ E804             >len_NFA         defl    $ - temp_NFA
1115+ E804             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E7FF             >
1115+ E7FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E800 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1115+ E804 45          >
1115+ E805             >                org     $-1                 // alter last byte of Name just above to set
1115+ E804 C5          >                db      {b $} | END_BIT     // msb as name end
1115+ E805             >
1115+ E805 F6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E807             >Prev_Ptr        defl    Heap_Ptr
1115+ E807             >
1115+ E807             >mirror_Ptr      defl    $
1115+ E807             >
1115+ E807 2B 2D       >                dw      Dict_Ptr + 2        // xt
1115+ E809             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E809             >
1115+ E809             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E809             >
1115+ E809             >//              ______________________________________________________________________
1115+ E809             >//              Dictionary part
1115+ E809             >
1115+ E809             >                org     Dict_Ptr
1115+ 2D29             >
1115+ 2D29 07 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 2D2B             >
1115+ 2D2B             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 2D2B CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 2D2E             >
1115+ 2D2E             >
1115+ 2D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 2D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 2D2E             >
1115+ 2D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 2D2E 2A 27 19 2D                  dw      ZERO, FILL              // 0 fill
1117+ 2D32 F4 24                        dw      EXIT                    // ;
1118+ 2D34
1119+ 2D34              //  ______________________________________________________________________
1120+ 2D34              //
1121+ 2D34              // blank        a n --
1122+ 2D34              // If n > 0, fills n locations starting from address a with 'nul' characters.
1123+ 2D34                              Colon_Def BLANK, "BLANK", is_normal
1123+ 2D34             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1123+ 2D34             >
1123+ 2D34             >Dict_Ptr        defl    $
1123+ 2D34             >
1123+ 2D34             >//              ______________________________________________________________________
1123+ 2D34             >//              Heap part
1123+ 2D34             >
1123+ 2D34             >
1123+ 2D34             >                org     (Heap_Ptr & $1FFF) + $E000
1123+ E809             >
1123+ E809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ E809             >Latest_Definition defl  Heap_Ptr
1123+ E809             >
1123+ E809             >                // dummy db directives used to calculate length of namec
1123+ E809 42 4C 41 4E >                db      "BLANK"
1123+ E80D 4B          >
1123+ E80E             >len_NFA         defl    $ - temp_NFA
1123+ E80E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ E809             >
1123+ E809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ E80A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1123+ E80E 4B          >
1123+ E80F             >                org     $-1                 // alter last byte of Name just above to set
1123+ E80E CB          >                db      {b $} | END_BIT     // msb as name end
1123+ E80F             >
1123+ E80F FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1123+ E811             >Prev_Ptr        defl    Heap_Ptr
1123+ E811             >
1123+ E811             >mirror_Ptr      defl    $
1123+ E811             >
1123+ E811 36 2D       >                dw      Dict_Ptr + 2        // xt
1123+ E813             >Heap_Ptr        defl    $ - $E000           // save current HP
1123+ E813             >
1123+ E813             >Current_HP      defl  $ - $E000             // used to set HP once!
1123+ E813             >
1123+ E813             >//              ______________________________________________________________________
1123+ E813             >//              Dictionary part
1123+ E813             >
1123+ E813             >                org     Dict_Ptr
1123+ 2D34             >
1123+ 2D34 11 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1123+ 2D36             >
1123+ 2D36             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 2D36 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 2D39             >
1123+ 2D39             >
1123+ 2D39             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 2D39             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 2D39             >
1123+ 2D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 2D39 4D 27 19 2D                  dw      BL, FILL                // bl fill
1125+ 2D3D F4 24                        dw      EXIT                    // ;
1126+ 2D3F
1127+ 2D3F              //  ______________________________________________________________________
1128+ 2D3F              //
1129+ 2D3F              // hold         c --
1130+ 2D3F              // Used between <# and #> to insert a character c in numeric formatting.
1131+ 2D3F                              Colon_Def HOLD, "HOLD", is_normal
1131+ 2D3F             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1131+ 2D3F             >
1131+ 2D3F             >Dict_Ptr        defl    $
1131+ 2D3F             >
1131+ 2D3F             >//              ______________________________________________________________________
1131+ 2D3F             >//              Heap part
1131+ 2D3F             >
1131+ 2D3F             >
1131+ 2D3F             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E813             >
1131+ E813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E813             >Latest_Definition defl  Heap_Ptr
1131+ E813             >
1131+ E813             >                // dummy db directives used to calculate length of namec
1131+ E813 48 4F 4C 44 >                db      "HOLD"
1131+ E817             >len_NFA         defl    $ - temp_NFA
1131+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E813             >
1131+ E813 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E814 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1131+ E818             >                org     $-1                 // alter last byte of Name just above to set
1131+ E817 C4          >                db      {b $} | END_BIT     // msb as name end
1131+ E818             >
1131+ E818 09 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E81A             >Prev_Ptr        defl    Heap_Ptr
1131+ E81A             >
1131+ E81A             >mirror_Ptr      defl    $
1131+ E81A             >
1131+ E81A 41 2D       >                dw      Dict_Ptr + 2        // xt
1131+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E81C             >
1131+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E81C             >
1131+ E81C             >//              ______________________________________________________________________
1131+ E81C             >//              Dictionary part
1131+ E81C             >
1131+ E81C             >                org     Dict_Ptr
1131+ 2D3F             >
1131+ 2D3F 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 2D41             >
1131+ 2D41             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 2D41 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1131+ 2D44             >
1131+ 2D44             >
1131+ 2D44             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 2D44             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 2D44             >
1131+ 2D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 2D44 46 27                        dw      NEG_ONE                 // -1
1133+ 2D46 19 28 1C 26                  dw      HLD, PLUSSTORE          // hld +!
1134+ 2D4A 19 28 34 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1134+ 2D4E 52 26
1135+ 2D50 F4 24                        dw      EXIT                    // ;
1136+ 2D52
1137+ 2D52              //  ______________________________________________________________________
1138+ 2D52              //
1139+ 2D52              // pad         -- a
1140+ 2D52              // leaves the buffer text address. This is at a fixed distance over HERE.
1141+ 2D52                              Colon_Def PAD, "PAD", is_normal
1141+ 2D52             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1141+ 2D52             >
1141+ 2D52             >Dict_Ptr        defl    $
1141+ 2D52             >
1141+ 2D52             >//              ______________________________________________________________________
1141+ 2D52             >//              Heap part
1141+ 2D52             >
1141+ 2D52             >
1141+ 2D52             >                org     (Heap_Ptr & $1FFF) + $E000
1141+ E81C             >
1141+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ E81C             >Latest_Definition defl  Heap_Ptr
1141+ E81C             >
1141+ E81C             >                // dummy db directives used to calculate length of namec
1141+ E81C 50 41 44    >                db      "PAD"
1141+ E81F             >len_NFA         defl    $ - temp_NFA
1141+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ E81C             >
1141+ E81C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ E81D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1141+ E820             >                org     $-1                 // alter last byte of Name just above to set
1141+ E81F C4          >                db      {b $} | END_BIT     // msb as name end
1141+ E820             >
1141+ E820 13 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1141+ E822             >Prev_Ptr        defl    Heap_Ptr
1141+ E822             >
1141+ E822             >mirror_Ptr      defl    $
1141+ E822             >
1141+ E822 54 2D       >                dw      Dict_Ptr + 2        // xt
1141+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1141+ E824             >
1141+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1141+ E824             >
1141+ E824             >//              ______________________________________________________________________
1141+ E824             >//              Dictionary part
1141+ E824             >
1141+ E824             >                org     Dict_Ptr
1141+ 2D52             >
1141+ 2D52 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1141+ 2D54             >
1141+ 2D54             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 2D54 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1141+ 2D57             >
1141+ 2D57             >
1141+ 2D57             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 2D57             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 2D57             >
1141+ 2D57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 2D57 4F 28                        dw      HERE                    // here
1143+ 2D59 3D 20 44 00                  dw      LIT, 68                 // 68
1144+ 2D5D 46 25                        dw      PLUS                    // +
1145+ 2D5F F4 24                        dw      EXIT                    // ;
1146+ 2D61
1147+ 2D61              //  ______________________________________________________________________
1148+ 2D61              //
1149+ 2D61              // word         c -- a
1150+ 2D61              // reads characters from input streams until it encouners a c delimiter.
1151+ 2D61              // Stores that packet so it starts from HERE
1152+ 2D61              // WORD leaves a counter as first byte and ends the packet with two spaces.
1153+ 2D61              // Other occurrences of c are ignored.
1154+ 2D61              // If BLK is zero, text is taken from terminal buffer TIB.
1155+ 2D61              // Otherwise text is taken from the disk-block given by BLK.
1156+ 2D61              // "in" variable is incremented of the number of character read.
1157+ 2D61              // The number of characters read is given by ENCLOSE.
1158+ 2D61                              Colon_Def WORD, "WORD", is_normal
1158+ 2D61             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1158+ 2D61             >
1158+ 2D61             >Dict_Ptr        defl    $
1158+ 2D61             >
1158+ 2D61             >//              ______________________________________________________________________
1158+ 2D61             >//              Heap part
1158+ 2D61             >
1158+ 2D61             >
1158+ 2D61             >                org     (Heap_Ptr & $1FFF) + $E000
1158+ E824             >
1158+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ E824             >Latest_Definition defl  Heap_Ptr
1158+ E824             >
1158+ E824             >                // dummy db directives used to calculate length of namec
1158+ E824 57 4F 52 44 >                db      "WORD"
1158+ E828             >len_NFA         defl    $ - temp_NFA
1158+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ E824             >
1158+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ E825 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1158+ E829             >                org     $-1                 // alter last byte of Name just above to set
1158+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1158+ E829             >
1158+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1158+ E82B             >Prev_Ptr        defl    Heap_Ptr
1158+ E82B             >
1158+ E82B             >mirror_Ptr      defl    $
1158+ E82B             >
1158+ E82B 63 2D       >                dw      Dict_Ptr + 2        // xt
1158+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1158+ E82D             >
1158+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1158+ E82D             >
1158+ E82D             >//              ______________________________________________________________________
1158+ E82D             >//              Dictionary part
1158+ E82D             >
1158+ E82D             >                org     Dict_Ptr
1158+ 2D61             >
1158+ 2D61 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1158+ 2D63             >
1158+ 2D63             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 2D63 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 2D66             >
1158+ 2D66             >
1158+ 2D66             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 2D66             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 2D66             >
1158+ 2D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 2D66 CB 27 34 26                  dw      BLK, FETCH              // blk @
1160+ 2D6A                                                              // if
1161+ 2D6A 8F 20                        dw      ZBRANCH
1162+ 2D6C 0C 00                        dw      Word_Else - $
1163+ 2D6E CB 27 34 26                  dw          BLK, FETCH          //      blk @
1164+ 2D72 31 37                        dw          BLOCK               //      block ( forward )
1165+ 2D74                                                              // else
1166+ 2D74 82 20                        dw      BRANCH
1167+ 2D76 06 00                        dw      Word_Endif - $
1168+ 2D78              Word_Else:
1169+ 2D78 8F 27 34 26                  dw         TIB, FETCH           //      tib @
1170+ 2D7C              Word_Endif:                                     // endif
1171+ 2D7C D1 27 34 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1171+ 2D80 46 25
1172+ 2D82 C3 25 C0 21                  dw      SWAP, ENCLOSE           // swap enclose
1173+ 2D86 4F 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1173+ 2D8A 22 00 36 2D
1174+ 2D8E D1 27 1C 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1175+ 2D92 A6 25 8E 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1175+ 2D96 FE 24
1176+ 2D98 14 25 4F 28                  dw      R_OP, HERE, CSTORE      // r here c!
1176+ 2D9C 52 26
1177+ 2D9E 46 25                        dw      PLUS                    // +
1178+ 2DA0 4F 28 5F 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1178+ 2DA4 09 25
1179+ 2DA6 35 24                        dw      CMOVE                   // cmove
1180+ 2DA8 4F 28                        dw      HERE                    // here
1181+ 2DAA F4 24                        dw      EXIT                    // ;
1182+ 2DAC
1183+ 2DAC              //  ______________________________________________________________________
1184+ 2DAC              //
1185+ 2DAC              // (.")         --
1186+ 2DAC              // Direct procedure compiled by ." and  .(  It executes TYPE.
1187+ 2DAC                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1187+ 2DAC             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1187+ 2DAC             >
1187+ 2DAC             >Dict_Ptr        defl    $
1187+ 2DAC             >
1187+ 2DAC             >//              ______________________________________________________________________
1187+ 2DAC             >//              Heap part
1187+ 2DAC             >
1187+ 2DAC             >
1187+ 2DAC             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E82D             >
1187+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E82D             >Latest_Definition defl  Heap_Ptr
1187+ E82D             >
1187+ E82D             >                // dummy db directives used to calculate length of namec
1187+ E82D 28 2E 22 29 >                db      '(.")'
1187+ E831             >len_NFA         defl    $ - temp_NFA
1187+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E82D             >
1187+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E82E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1187+ E832             >                org     $-1                 // alter last byte of Name just above to set
1187+ E831 A9          >                db      {b $} | END_BIT     // msb as name end
1187+ E832             >
1187+ E832 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E834             >Prev_Ptr        defl    Heap_Ptr
1187+ E834             >
1187+ E834             >mirror_Ptr      defl    $
1187+ E834             >
1187+ E834 AE 2D       >                dw      Dict_Ptr + 2        // xt
1187+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E836             >
1187+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E836             >
1187+ E836             >//              ______________________________________________________________________
1187+ E836             >//              Dictionary part
1187+ E836             >
1187+ E836             >                org     Dict_Ptr
1187+ 2DAC             >
1187+ 2DAC 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 2DAE             >
1187+ 2DAE             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 2DAE CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 2DB1             >
1187+ 2DB1             >
1187+ 2DB1             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 2DB1             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 2DB1             >
1187+ 2DB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 2DB1 14 25 BD 2B                  dw      R_OP, COUNT             // r count
1189+ 2DB5 CA 25 5F 25                  dw      DUP, ONE_PLUS           // dup 1+
1190+ 2DB9 09 25 46 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1190+ 2DBD FE 24
1191+ 2DBF 11 2C                        dw      TYPE                    // type
1192+ 2DC1 F4 24                        dw      EXIT                    // ;
1193+ 2DC3
1194+ 2DC3              //  ______________________________________________________________________
1195+ 2DC3              //
1196+ 2DC3              // char         -- c
1197+ 2DC3              // get first character from next input word
1198+ 2DC3                              Colon_Def CHAR,  "CHAR", is_normal
1198+ 2DC3             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1198+ 2DC3             >
1198+ 2DC3             >Dict_Ptr        defl    $
1198+ 2DC3             >
1198+ 2DC3             >//              ______________________________________________________________________
1198+ 2DC3             >//              Heap part
1198+ 2DC3             >
1198+ 2DC3             >
1198+ 2DC3             >                org     (Heap_Ptr & $1FFF) + $E000
1198+ E836             >
1198+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ E836             >Latest_Definition defl  Heap_Ptr
1198+ E836             >
1198+ E836             >                // dummy db directives used to calculate length of namec
1198+ E836 43 48 41 52 >                db      "CHAR"
1198+ E83A             >len_NFA         defl    $ - temp_NFA
1198+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ E836             >
1198+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ E837 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1198+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1198+ E83A D2          >                db      {b $} | END_BIT     // msb as name end
1198+ E83B             >
1198+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1198+ E83D             >Prev_Ptr        defl    Heap_Ptr
1198+ E83D             >
1198+ E83D             >mirror_Ptr      defl    $
1198+ E83D             >
1198+ E83D C5 2D       >                dw      Dict_Ptr + 2        // xt
1198+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1198+ E83F             >
1198+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1198+ E83F             >
1198+ E83F             >//              ______________________________________________________________________
1198+ E83F             >//              Dictionary part
1198+ E83F             >
1198+ E83F             >                org     Dict_Ptr
1198+ 2DC3             >
1198+ 2DC3 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1198+ 2DC5             >
1198+ 2DC5             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 2DC5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 2DC8             >
1198+ 2DC8             >
1198+ 2DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 2DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 2DC8             >
1198+ 2DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 2DC8 4D 27 63 2D                  dw      BL, WORD                // bl word
1200+ 2DCC 5F 25 49 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1201+ 2DD0 F4 24                        dw      EXIT                    // ;
1202+ 2DD2
1203+ 2DD2              //  ______________________________________________________________________
1204+ 2DD2              //
1205+ 2DD2              // ,"           --
1206+ 2DD2              // compiles a string terminated by " as a counted string from next input stream
1207+ 2DD2                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1207+ 2DD2             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1207+ 2DD2             >
1207+ 2DD2             >Dict_Ptr        defl    $
1207+ 2DD2             >
1207+ 2DD2             >//              ______________________________________________________________________
1207+ 2DD2             >//              Heap part
1207+ 2DD2             >
1207+ 2DD2             >
1207+ 2DD2             >                org     (Heap_Ptr & $1FFF) + $E000
1207+ E83F             >
1207+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ E83F             >Latest_Definition defl  Heap_Ptr
1207+ E83F             >
1207+ E83F             >                // dummy db directives used to calculate length of namec
1207+ E83F 2C 22       >                db      ',"'
1207+ E841             >len_NFA         defl    $ - temp_NFA
1207+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ E83F             >
1207+ E83F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ E840 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1207+ E842             >                org     $-1                 // alter last byte of Name just above to set
1207+ E841 A2          >                db      {b $} | END_BIT     // msb as name end
1207+ E842             >
1207+ E842 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1207+ E844             >Prev_Ptr        defl    Heap_Ptr
1207+ E844             >
1207+ E844             >mirror_Ptr      defl    $
1207+ E844             >
1207+ E844 D4 2D       >                dw      Dict_Ptr + 2        // xt
1207+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1207+ E846             >
1207+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1207+ E846             >
1207+ E846             >//              ______________________________________________________________________
1207+ E846             >//              Dictionary part
1207+ E846             >
1207+ E846             >                org     Dict_Ptr
1207+ 2DD2             >
1207+ 2DD2 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1207+ 2DD4             >
1207+ 2DD4             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 2DD4 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 2DD7             >
1207+ 2DD7             >
1207+ 2DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 2DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 2DD7             >
1207+ 2DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 2DD7 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1209+ 2DDB 63 2D                        dw      WORD                    // word
1210+ 2DDD 49 26 5F 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1211+ 2DE1 5A 28                        dw      ALLOT                   // allot
1212+ 2DE3 2A 27 74 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1213+ 2DE7 F4 24                        dw      EXIT
1214+ 2DE9
1215+ 2DE9              //  ______________________________________________________________________
1216+ 2DE9              //
1217+ 2DE9              // .c           c --
1218+ 2DE9              // intermediate general purpose string builder, used by ." and .(
1219+ 2DE9                              Colon_Def DOT_C,  ".C", is_immediate
1219+ 2DE9             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1219+ 2DE9             >
1219+ 2DE9             >Dict_Ptr        defl    $
1219+ 2DE9             >
1219+ 2DE9             >//              ______________________________________________________________________
1219+ 2DE9             >//              Heap part
1219+ 2DE9             >
1219+ 2DE9             >
1219+ 2DE9             >                org     (Heap_Ptr & $1FFF) + $E000
1219+ E846             >
1219+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ E846             >Latest_Definition defl  Heap_Ptr
1219+ E846             >
1219+ E846             >                // dummy db directives used to calculate length of namec
1219+ E846 2E 43       >                db      ".C"
1219+ E848             >len_NFA         defl    $ - temp_NFA
1219+ E848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ E846             >
1219+ E846 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ E847 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1219+ E849             >                org     $-1                 // alter last byte of Name just above to set
1219+ E848 C3          >                db      {b $} | END_BIT     // msb as name end
1219+ E849             >
1219+ E849 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1219+ E84B             >Prev_Ptr        defl    Heap_Ptr
1219+ E84B             >
1219+ E84B             >mirror_Ptr      defl    $
1219+ E84B             >
1219+ E84B EB 2D       >                dw      Dict_Ptr + 2        // xt
1219+ E84D             >Heap_Ptr        defl    $ - $E000           // save current HP
1219+ E84D             >
1219+ E84D             >Current_HP      defl  $ - $E000             // used to set HP once!
1219+ E84D             >
1219+ E84D             >//              ______________________________________________________________________
1219+ E84D             >//              Dictionary part
1219+ E84D             >
1219+ E84D             >                org     Dict_Ptr
1219+ 2DE9             >
1219+ 2DE9 4B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1219+ 2DEB             >
1219+ 2DEB             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 2DEB CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1219+ 2DEE             >
1219+ 2DEE             >
1219+ 2DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 2DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 2DEE             >
1219+ 2DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 2DEE F5 27 34 26                  dw      STATE, FETCH            // state @
1221+ 2DF2                                                              // if
1222+ 2DF2 8F 20                        dw      ZBRANCH
1223+ 2DF4 12 00                        dw      Dot_C_Else - $
1224+ 2DF6 F3 2A AE 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1225+ 2DFA 63 2D 49 26                  dw          WORD, CFETCH        //      word c@
1226+ 2DFE 5F 25 5A 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1227+ 2E02                                                              // else
1228+ 2E02 82 20                        dw      BRANCH
1229+ 2E04 08 00                        dw      Dot_C_Endif - $
1230+ 2E06              Dot_C_Else:
1231+ 2E06 63 2D BD 2B                  dw          WORD, COUNT, TYPE   //      word count type
1231+ 2E0A 11 2C
1232+ 2E0C              Dot_C_Endif:                                    // endif
1233+ 2E0C F4 24                        dw      EXIT                    ;
1234+ 2E0E
1235+ 2E0E              //  ______________________________________________________________________
1236+ 2E0E              //
1237+ 2E0E              // ."           c --
1238+ 2E0E                              Colon_Def DOT_QUOTE,  '."', is_immediate
1238+ 2E0E             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1238+ 2E0E             >
1238+ 2E0E             >Dict_Ptr        defl    $
1238+ 2E0E             >
1238+ 2E0E             >//              ______________________________________________________________________
1238+ 2E0E             >//              Heap part
1238+ 2E0E             >
1238+ 2E0E             >
1238+ 2E0E             >                org     (Heap_Ptr & $1FFF) + $E000
1238+ E84D             >
1238+ E84D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ E84D             >Latest_Definition defl  Heap_Ptr
1238+ E84D             >
1238+ E84D             >                // dummy db directives used to calculate length of namec
1238+ E84D 2E 22       >                db      '."'
1238+ E84F             >len_NFA         defl    $ - temp_NFA
1238+ E84F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ E84D             >
1238+ E84D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ E84E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1238+ E850             >                org     $-1                 // alter last byte of Name just above to set
1238+ E84F A2          >                db      {b $} | END_BIT     // msb as name end
1238+ E850             >
1238+ E850 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1238+ E852             >Prev_Ptr        defl    Heap_Ptr
1238+ E852             >
1238+ E852             >mirror_Ptr      defl    $
1238+ E852             >
1238+ E852 10 2E       >                dw      Dict_Ptr + 2        // xt
1238+ E854             >Heap_Ptr        defl    $ - $E000           // save current HP
1238+ E854             >
1238+ E854             >Current_HP      defl  $ - $E000             // used to set HP once!
1238+ E854             >
1238+ E854             >//              ______________________________________________________________________
1238+ E854             >//              Dictionary part
1238+ E854             >
1238+ E854             >                org     Dict_Ptr
1238+ 2E0E             >
1238+ 2E0E 52 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1238+ 2E10             >
1238+ 2E10             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 2E10 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 2E13             >
1238+ 2E13             >
1238+ 2E13             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 2E13             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 2E13             >
1238+ 2E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 2E13 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1240+ 2E17 EB 2D                        dw      DOT_C                   // [compile] .c
1241+ 2E19 F4 24                        dw      EXIT                    // ; immediate
1242+ 2E1B
1243+ 2E1B              //  ______________________________________________________________________
1244+ 2E1B              //
1245+ 2E1B              // .(           c --
1246+ 2E1B                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1246+ 2E1B             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1246+ 2E1B             >
1246+ 2E1B             >Dict_Ptr        defl    $
1246+ 2E1B             >
1246+ 2E1B             >//              ______________________________________________________________________
1246+ 2E1B             >//              Heap part
1246+ 2E1B             >
1246+ 2E1B             >
1246+ 2E1B             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E854             >
1246+ E854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E854             >Latest_Definition defl  Heap_Ptr
1246+ E854             >
1246+ E854             >                // dummy db directives used to calculate length of namec
1246+ E854 2E 28       >                db      ".("
1246+ E856             >len_NFA         defl    $ - temp_NFA
1246+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E854             >
1246+ E854 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E855 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1246+ E857             >                org     $-1                 // alter last byte of Name just above to set
1246+ E856 A8          >                db      {b $} | END_BIT     // msb as name end
1246+ E857             >
1246+ E857 4D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E859             >Prev_Ptr        defl    Heap_Ptr
1246+ E859             >
1246+ E859             >mirror_Ptr      defl    $
1246+ E859             >
1246+ E859 1D 2E       >                dw      Dict_Ptr + 2        // xt
1246+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E85B             >
1246+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E85B             >
1246+ E85B             >//              ______________________________________________________________________
1246+ E85B             >//              Dictionary part
1246+ E85B             >
1246+ E85B             >                org     Dict_Ptr
1246+ 2E1B             >
1246+ 2E1B 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 2E1D             >
1246+ 2E1D             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 2E1D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 2E20             >
1246+ 2E20             >
1246+ 2E20             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 2E20             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 2E20             >
1246+ 2E20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 2E20 3D 20 29 00                  dw      LIT, ")"                // [char] )
1248+ 2E24 EB 2D                        dw      DOT_C                   // [compile] .c
1249+ 2E26 F4 24                        dw      EXIT                    // ; immediate
1250+ 2E28
1251+ 2E28              //  ______________________________________________________________________
1252+ 2E28              //
1253+ 2E28              // (sgn)        a -- a f
1254+ 2E28              // determines if char in addr a is a sign (+ or -), and in that case increments
1255+ 2E28              // a flag. Returns f as the sign, true for negative, false for positive.
1256+ 2E28              // called by NUMBER and (EXP)
1257+ 2E28                              Colon_Def CSGN,  "(SGN)", is_normal
1257+ 2E28             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1257+ 2E28             >
1257+ 2E28             >Dict_Ptr        defl    $
1257+ 2E28             >
1257+ 2E28             >//              ______________________________________________________________________
1257+ 2E28             >//              Heap part
1257+ 2E28             >
1257+ 2E28             >
1257+ 2E28             >                org     (Heap_Ptr & $1FFF) + $E000
1257+ E85B             >
1257+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ E85B             >Latest_Definition defl  Heap_Ptr
1257+ E85B             >
1257+ E85B             >                // dummy db directives used to calculate length of namec
1257+ E85B 28 53 47 4E >                db      "(SGN)"
1257+ E85F 29          >
1257+ E860             >len_NFA         defl    $ - temp_NFA
1257+ E860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ E85B             >
1257+ E85B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ E85C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1257+ E860 29          >
1257+ E861             >                org     $-1                 // alter last byte of Name just above to set
1257+ E860 A9          >                db      {b $} | END_BIT     // msb as name end
1257+ E861             >
1257+ E861 54 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1257+ E863             >Prev_Ptr        defl    Heap_Ptr
1257+ E863             >
1257+ E863             >mirror_Ptr      defl    $
1257+ E863             >
1257+ E863 2A 2E       >                dw      Dict_Ptr + 2        // xt
1257+ E865             >Heap_Ptr        defl    $ - $E000           // save current HP
1257+ E865             >
1257+ E865             >Current_HP      defl  $ - $E000             // used to set HP once!
1257+ E865             >
1257+ E865             >//              ______________________________________________________________________
1257+ E865             >//              Dictionary part
1257+ E865             >
1257+ E865             >                org     Dict_Ptr
1257+ 2E28             >
1257+ 2E28 63 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1257+ 2E2A             >
1257+ 2E2A             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 2E2A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 2E2D             >
1257+ 2E2D             >
1257+ 2E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 2E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 2E2D             >
1257+ 2E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 2E2D CA 25 5F 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1258+ 2E31 49 26
1259+ 2E33 CA 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1259+ 2E37 2D 00 9A 28
1260+ 2E3B                                                              // if
1261+ 2E3B 8F 20                        dw      ZBRANCH
1262+ 2E3D 12 00                        dw      CSgn_Else_0 - $
1263+ 2E3F AF 25                        dw          DROP                //      drop
1264+ 2E41 5F 25                        dw          ONE_PLUS            //      1+
1265+ 2E43 31 27 01 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1265+ 2E47 1C 26
1266+ 2E49 31 27                        dw          ONE                 //      1
1267+ 2E4B                                                              // else
1268+ 2E4B 82 20                        dw      BRANCH
1269+ 2E4D 16 00                        dw      CSgn_Endif_0 - $
1270+ 2E4F              CSgn_Else_0:
1271+ 2E4F 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1271+ 2E53 9A 28
1272+ 2E55                                                              //      if
1273+ 2E55 8F 20                        dw          ZBRANCH
1274+ 2E57 0A 00                        dw          CSgn_Endif_1 - $
1275+ 2E59 5F 25                        dw              ONE_PLUS        //          1+
1276+ 2E5B 31 27 01 28                  dw              ONE, DPL        //          1 dpl
1277+ 2E5F 1C 26                        dw              PLUSSTORE       //          +!
1278+ 2E61              CSgn_Endif_1                                    //      endif
1279+ 2E61 2A 27                        dw          ZERO                //      0
1280+ 2E63              CSgn_Endif_0:                                   // endif
1281+ 2E63 F4 24                        dw      EXIT
1282+ 2E65
1283+ 2E65              //  ______________________________________________________________________
1284+ 2E65              //
1285+ 2E65              // (number)     d a -- d1 a1
1286+ 2E65              // using the current BASE parse characters stored in address a
1287+ 2E65              // accumulating a double precision integer d
1288+ 2E65              // the process stops at the first not-convertible character
1289+ 2E65              // A double-number is kept in CPU registers as HLDE.
1290+ 2E65              // On the stack a double number is treated as two single numbers
1291+ 2E65              // where HL is on the top of the stack and DE is the second from top,
1292+ 2E65              // so in the stack memory it appears as LHED.
1293+ 2E65              // Instead, in 2VARIABLE a double number is stored as EDLH.
1294+ 2E65                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1294+ 2E65             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1294+ 2E65             >
1294+ 2E65             >Dict_Ptr        defl    $
1294+ 2E65             >
1294+ 2E65             >//              ______________________________________________________________________
1294+ 2E65             >//              Heap part
1294+ 2E65             >
1294+ 2E65             >
1294+ 2E65             >                org     (Heap_Ptr & $1FFF) + $E000
1294+ E865             >
1294+ E865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ E865             >Latest_Definition defl  Heap_Ptr
1294+ E865             >
1294+ E865             >                // dummy db directives used to calculate length of namec
1294+ E865 28 4E 55 4D >                db      "(NUMBER)"
1294+ E869 42 45 52 29 >
1294+ E86D             >len_NFA         defl    $ - temp_NFA
1294+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ E865             >
1294+ E865 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ E866 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1294+ E86A 42 45 52 29 >
1294+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1294+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1294+ E86E             >
1294+ E86E 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1294+ E870             >Prev_Ptr        defl    Heap_Ptr
1294+ E870             >
1294+ E870             >mirror_Ptr      defl    $
1294+ E870             >
1294+ E870 67 2E       >                dw      Dict_Ptr + 2        // xt
1294+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1294+ E872             >
1294+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1294+ E872             >
1294+ E872             >//              ______________________________________________________________________
1294+ E872             >//              Dictionary part
1294+ E872             >
1294+ E872             >                org     Dict_Ptr
1294+ 2E65             >
1294+ 2E65 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1294+ 2E67             >
1294+ 2E67             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 2E67 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1294+ 2E6A             >
1294+ 2E6A             >
1294+ 2E6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 2E6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 2E6A             >
1294+ 2E6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 2E6A                                                              // begin
1296+ 2E6A              CNumber_Begin:
1297+ 2E6A 5F 25                        dw          ONE_PLUS            //      1+
1298+ 2E6C CA 25 FE 24                  dw          DUP, TO_R           //      dup >r
1299+ 2E70 49 26                        dw          CFETCH              //      @
1300+ 2E72 FB 27 34 26                  dw          BASE, FETCH         //      base @
1301+ 2E76 E5 20                        dw          DIGIT               //      digit
1302+ 2E78                                                              // while
1303+ 2E78 8F 20                        dw      ZBRANCH
1304+ 2E7A 2C 00                        dw      CNumber_While_end - $
1305+ 2E7C C3 25                        dw          SWAP                //      swap
1306+ 2E7E FB 27 34 26                  dw          BASE, FETCH         //      base @
1307+ 2E82 59 24                        dw          UM_MUL              //      um*
1308+ 2E84 AF 25 D1 25                  dw          DROP, ROT           //      drop rot
1309+ 2E88 FB 27 34 26                  dw          BASE, FETCH         //      base @
1310+ 2E8C 59 24                        dw          UM_MUL              //      um*
1311+ 2E8E 50 25                        dw          DPLUS               //      d+
1312+ 2E90 01 28 34 26                  dw          DPL, FETCH          //      dpl @
1313+ 2E94 5F 25                        dw          ONE_PLUS            //      1+
1314+ 2E96                                                              //      if
1315+ 2E96 8F 20                        dw          ZBRANCH
1316+ 2E98 08 00                        dw          CNumber_Endif - $
1317+ 2E9A 31 27 01 28                  dw              ONE, DPL        //          1 dpl
1318+ 2E9E 1C 26                        dw              PLUSSTORE       //          +!
1319+ 2EA0              CNumber_Endif:                                  //      endif
1320+ 2EA0 09 25                        dw             R_TO             //      r>  ( balance rp )
1321+ 2EA2 82 20                        dw      BRANCH
1322+ 2EA4 C6 FF                        dw      CNumber_Begin - $
1323+ 2EA6              CNumber_While_end:                              // repeat
1324+ 2EA6 09 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1325+ 2EA8 F4 24                        dw      EXIT                    // ;
1326+ 2EAA
1327+ 2EAA              //  ______________________________________________________________________
1328+ 2EAA              //
1329+ 2EAA              // (prefix)
1330+ 2EAA                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1330+ 2EAA             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1330+ 2EAA             >
1330+ 2EAA             >Dict_Ptr        defl    $
1330+ 2EAA             >
1330+ 2EAA             >//              ______________________________________________________________________
1330+ 2EAA             >//              Heap part
1330+ 2EAA             >
1330+ 2EAA             >
1330+ 2EAA             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E872             >
1330+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E872             >Latest_Definition defl  Heap_Ptr
1330+ E872             >
1330+ E872             >                // dummy db directives used to calculate length of namec
1330+ E872 28 50 52 45 >                db      "(PREFIX)"
1330+ E876 46 49 58 29 >
1330+ E87A             >len_NFA         defl    $ - temp_NFA
1330+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E872             >
1330+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E873 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1330+ E877 46 49 58 29 >
1330+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1330+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1330+ E87B             >
1330+ E87B 65 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E87D             >Prev_Ptr        defl    Heap_Ptr
1330+ E87D             >
1330+ E87D             >mirror_Ptr      defl    $
1330+ E87D             >
1330+ E87D AC 2E       >                dw      Dict_Ptr + 2        // xt
1330+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E87F             >
1330+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E87F             >
1330+ E87F             >//              ______________________________________________________________________
1330+ E87F             >//              Dictionary part
1330+ E87F             >
1330+ E87F             >                org     Dict_Ptr
1330+ 2EAA             >
1330+ 2EAA 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 2EAC             >
1330+ 2EAC             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 2EAC CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1330+ 2EAF             >
1330+ 2EAF             >
1330+ 2EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 2EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 2EAF             >
1330+ 2EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 2EAF CA 25 5F 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1331+ 2EB3 49 26
1332+ 2EB5 CA 25 FE 24                  dw      DUP, TO_R               // dup >r
1333+ 2EB9 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1333+ 2EBD 9A 28
1334+ 2EBF                                                              // if
1335+ 2EBF 8F 20                        dw      ZBRANCH
1336+ 2EC1 06 00                        dw      CPrefix_Endif_0 - $
1337+ 2EC3 5F 25                        dw          ONE_PLUS            //      1+
1338+ 2EC5 4B 2B                        dw          HEX
1339+ 2EC7              CPrefix_Endif_0:                                // endif
1340+ 2EC7 14 25                        dw      R_OP                    // r@
1341+ 2EC9 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1341+ 2ECD 9A 28
1342+ 2ECF                                                              // if
1343+ 2ECF 8F 20                        dw      ZBRANCH
1344+ 2ED1 0A 00                        dw      CPrefix_Endif_1 - $
1345+ 2ED3 5F 25                        dw          ONE_PLUS            //      1+
1346+ 2ED5 38 27                        dw          TWO
1347+ 2ED7 FB 27 3E 26                  dw          BASE, STORE         //      2 base !
1348+ 2EDB              CPrefix_Endif_1:                                // endif
1349+ 2EDB 09 25                        dw      R_TO                    // r>
1350+ 2EDD 3D 20 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1350+ 2EE1 9A 28
1351+ 2EE3                                                              // if
1352+ 2EE3 8F 20                        dw      ZBRANCH
1353+ 2EE5 06 00                        dw      CPrefix_Endif_2 - $
1354+ 2EE7 5F 25                        dw          ONE_PLUS            //      1+
1355+ 2EE9 5A 2B                        dw          DECIMAL
1356+ 2EEB              CPrefix_Endif_2:                                // endif
1357+ 2EEB F4 24                        dw      EXIT
1358+ 2EED
1359+ 2EED              //  ______________________________________________________________________
1360+ 2EED
1361+ 2EED              PDOM_PTR:
1362+ 2EED              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1363+ 2EED 2C 2F 2D 3A                  db ',/-:'
1364+ 2EF1              PCDM_PTR:
1365+ 2EF1              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1366+ 2EF1 2E 2E 2E 2E                  db '....'
1367+ 2EF5
1368+ 2EF5              //  ______________________________________________________________________
1369+ 2EF5              //
1370+ 2EF5              // number       a -- d
1371+ 2EF5                              Colon_Def NUMBER,  "NUMBER", is_normal
1371+ 2EF5             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1371+ 2EF5             >
1371+ 2EF5             >Dict_Ptr        defl    $
1371+ 2EF5             >
1371+ 2EF5             >//              ______________________________________________________________________
1371+ 2EF5             >//              Heap part
1371+ 2EF5             >
1371+ 2EF5             >
1371+ 2EF5             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E87F             >
1371+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E87F             >Latest_Definition defl  Heap_Ptr
1371+ E87F             >
1371+ E87F             >                // dummy db directives used to calculate length of namec
1371+ E87F 4E 55 4D 42 >                db      "NUMBER"
1371+ E883 45 52       >
1371+ E885             >len_NFA         defl    $ - temp_NFA
1371+ E885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E87F             >
1371+ E87F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E880 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1371+ E884 45 52       >
1371+ E886             >                org     $-1                 // alter last byte of Name just above to set
1371+ E885 D2          >                db      {b $} | END_BIT     // msb as name end
1371+ E886             >
1371+ E886 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E888             >Prev_Ptr        defl    Heap_Ptr
1371+ E888             >
1371+ E888             >mirror_Ptr      defl    $
1371+ E888             >
1371+ E888 F7 2E       >                dw      Dict_Ptr + 2        // xt
1371+ E88A             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E88A             >
1371+ E88A             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E88A             >
1371+ E88A             >//              ______________________________________________________________________
1371+ E88A             >//              Dictionary part
1371+ E88A             >
1371+ E88A             >                org     Dict_Ptr
1371+ 2EF5             >
1371+ 2EF5 88 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 2EF7             >
1371+ 2EF7             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 2EF7 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 2EFA             >
1371+ 2EFA             >
1371+ 2EFA             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 2EFA             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 2EFA             >
1371+ 2EFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 2EFA 2A 27 2A 27                  dw      ZERO, ZERO              // 0 0
1373+ 2EFE D1 25                        dw      ROT                     // rot
1374+ 2F00
1375+ 2F00 FB 27 34 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1375+ 2F04 FE 24
1376+ 2F06 AC 2E                        dw      CPREFIX                 // (prefix)   // ***
1377+ 2F08
1378+ 2F08 2A 2E FE 24                  dw      CSGN, TO_R              // (sgn) >r
1379+ 2F0C
1380+ 2F0C 46 27 01 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1380+ 2F10 3E 26
1381+ 2F12 67 2E                        dw      CNUMBER                 // (number)
1382+ 2F14              Number_Begin:                                   // begin
1383+ 2F14 CA 25 49 26                  dw        DUP, CFETCH             // dup c@
1384+ 2F18 FE 24                        dw        TO_R                    // >r
1385+ 2F1A                          //  dw        PCDM, PDOM              //  pcdm pdom
1386+ 2F1A 3D 20 F1 2E                  dw        LIT, PCDM_PTR           //
1387+ 2F1E 3D 20 ED 2E                  dw        LIT, PDOM_PTR           //
1388+ 2F22 3D 20 04 00                  dw        LIT, 4                  //  4
1389+ 2F26 09 25                        dw        R_TO                    // r>
1390+ 2F28 F2 21                        dw        C_MAP                   // (map)
1391+ 2F2A 2A 27 C3 25                  dw        ZERO, SWAP              // 0 swap
1392+ 2F2E 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1392+ 2F32 9A 28
1393+ 2F34
1394+ 2F34 8F 20                        dw        ZBRANCH                 // if
1395+ 2F36 0A 00                        dw        Number_Endif_1 - $
1396+ 2F38 2A 27 01 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1396+ 2F3C 3E 26
1397+ 2F3E 5F 25                        dw          ONE_PLUS                //      1+
1398+ 2F40              Number_Endif_1:                                   // endif
1399+ 2F40
1400+ 2F40 8F 20                        dw      ZBRANCH                // while
1401+ 2F42 08 00                        dw      Number_While_end - $
1402+ 2F44 67 2E                        dw        CNUMBER                 // (number)
1403+ 2F46 82 20                        dw      BRANCH
1404+ 2F48 CC FF                        dw      Number_Begin - $
1405+ 2F4A              Number_While_end:                               // repeat
1406+ 2F4A
1407+ 2F4A 49 26 4D 27                  dw      CFETCH, BL              // c@ bl
1408+ 2F4E 8E 28 2A 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1408+ 2F52 83 2A
1409+ 2F54 09 25                        dw      R_TO                    // r>
1410+ 2F56                                                              // if
1411+ 2F56 8F 20                        dw      ZBRANCH
1412+ 2F58 04 00                        dw      Number_Endif_2 - $
1413+ 2F5A 93 25                        dw          DMINUS              //      dminus
1414+ 2F5C              Number_Endif_2:                                 // endif
1415+ 2F5C 09 25 FB 27                  dw      R_TO, BASE, STORE       // r> base !  // ***
1415+ 2F60 3E 26
1416+ 2F62 F4 24                        dw      EXIT                    // ;
1417+ 2F64
1418+ 2F64              //  ______________________________________________________________________
1419+ 2F64              //
1420+ 2F64              // twofind      a -- d
1421+ 2F64                              Colon_Def TWOFIND,  "2FIND", is_normal
1421+ 2F64             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1421+ 2F64             >
1421+ 2F64             >Dict_Ptr        defl    $
1421+ 2F64             >
1421+ 2F64             >//              ______________________________________________________________________
1421+ 2F64             >//              Heap part
1421+ 2F64             >
1421+ 2F64             >
1421+ 2F64             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E88A             >
1421+ E88A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E88A             >Latest_Definition defl  Heap_Ptr
1421+ E88A             >
1421+ E88A             >                // dummy db directives used to calculate length of namec
1421+ E88A 32 46 49 4E >                db      "2FIND"
1421+ E88E 44          >
1421+ E88F             >len_NFA         defl    $ - temp_NFA
1421+ E88F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E88A             >
1421+ E88A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E88B 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1421+ E88F 44          >
1421+ E890             >                org     $-1                 // alter last byte of Name just above to set
1421+ E88F C4          >                db      {b $} | END_BIT     // msb as name end
1421+ E890             >
1421+ E890 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E892             >Prev_Ptr        defl    Heap_Ptr
1421+ E892             >
1421+ E892             >mirror_Ptr      defl    $
1421+ E892             >
1421+ E892 66 2F       >                dw      Dict_Ptr + 2        // xt
1421+ E894             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E894             >
1421+ E894             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E894             >
1421+ E894             >//              ______________________________________________________________________
1421+ E894             >//              Dictionary part
1421+ E894             >
1421+ E894             >                org     Dict_Ptr
1421+ 2F64             >
1421+ 2F64 92 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 2F66             >
1421+ 2F66             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 2F66 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1421+ 2F69             >
1421+ 2F69             >
1421+ 2F69             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 2F69             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 2F69             >
1421+ 2F69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 2F69 FE 24 14 25                  dw      TO_R, R_OP              // >r r@
1423+ 2F6D E9 27 34 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1423+ 2F71 34 26
1424+ 2F73 52 21                        dw      C_FIND                  // (find)
1425+ 2F75 F1 28                        dw      QDUP                    // ?dup
1426+ 2F77 19 25                        dw      ZEQUAL                  // 0=
1427+ 2F79                                                              // if
1428+ 2F79 8F 20                        dw      ZBRANCH
1429+ 2F7B 24 00                        dw      LFind_Endif - $
1430+ 2F7D 14 25                        dw          R_OP                //      r@
1431+ 2F7F                              // dw          LATEST               //      latest
1432+ 2F7F EF 27 34 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1432+ 2F83 34 26
1433+ 2F85 52 21                        dw          C_FIND              //      (find)
1434+ 2F87
1435+ 2F87 F1 28                            dw      QDUP                    // ?dup
1436+ 2F89 19 25                            dw      ZEQUAL                  // 0=
1437+ 2F8B                                                                  // if
1438+ 2F8B 8F 20                            dw      ZBRANCH
1439+ 2F8D 12 00                            dw      LFind_Endif2 - $
1440+ 2F8F 14 25                            dw          R_OP                //      r@
1441+ 2F91 3D 20 E0 31                      dw          LIT, FORTH, TO_BODY
1441+ 2F95 02 2A
1442+ 2F97 75 25 75 25                      dw          CELL_PLUS, CELL_PLUS
1443+ 2F9B 34 26                            dw          FETCH
1444+ 2F9D 52 21                            dw          C_FIND              //      (find)
1445+ 2F9F              LFind_Endif2:                                    // endif
1446+ 2F9F
1447+ 2F9F
1448+ 2F9F              LFind_Endif:                                    // endif
1449+ 2F9F 09 25 AF 25                  dw      R_TO, DROP              // r> drop
1450+ 2FA3 F4 24                        dw      EXIT                    // ;
1451+ 2FA5
1452+ 2FA5              //  ______________________________________________________________________
1453+ 2FA5              //
1454+ 2FA5              // -find        a -- d
1455+ 2FA5                              Colon_Def LFIND,  "-FIND", is_normal
1455+ 2FA5             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1455+ 2FA5             >
1455+ 2FA5             >Dict_Ptr        defl    $
1455+ 2FA5             >
1455+ 2FA5             >//              ______________________________________________________________________
1455+ 2FA5             >//              Heap part
1455+ 2FA5             >
1455+ 2FA5             >
1455+ 2FA5             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E894             >
1455+ E894             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E894             >Latest_Definition defl  Heap_Ptr
1455+ E894             >
1455+ E894             >                // dummy db directives used to calculate length of namec
1455+ E894 2D 46 49 4E >                db      "-FIND"
1455+ E898 44          >
1455+ E899             >len_NFA         defl    $ - temp_NFA
1455+ E899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E894             >
1455+ E894 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E895 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1455+ E899 44          >
1455+ E89A             >                org     $-1                 // alter last byte of Name just above to set
1455+ E899 C4          >                db      {b $} | END_BIT     // msb as name end
1455+ E89A             >
1455+ E89A 8A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E89C             >Prev_Ptr        defl    Heap_Ptr
1455+ E89C             >
1455+ E89C             >mirror_Ptr      defl    $
1455+ E89C             >
1455+ E89C A7 2F       >                dw      Dict_Ptr + 2        // xt
1455+ E89E             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E89E             >
1455+ E89E             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E89E             >
1455+ E89E             >//              ______________________________________________________________________
1455+ E89E             >//              Dictionary part
1455+ E89E             >
1455+ E89E             >                org     Dict_Ptr
1455+ 2FA5             >
1455+ 2FA5 9C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 2FA7             >
1455+ 2FA7             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 2FA7 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1455+ 2FAA             >
1455+ 2FAA             >
1455+ 2FAA             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 2FAA             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 2FAA             >
1455+ 2FAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 2FAA 4D 27 63 2D                  dw      BL, WORD                // bl word
1457+ 2FAE 66 2F                        dw      TWOFIND                 // 2find
1458+ 2FB0 F4 24                        dw      EXIT                    // ;
1459+ 2FB2
1460+ 2FB2              //  ______________________________________________________________________
1461+ 2FB2              //
1462+ 2FB2              // (abort)      --
1463+ 2FB2                              Colon_Def CABORT,  "(ABORT)", is_normal
1463+ 2FB2             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1463+ 2FB2             >
1463+ 2FB2             >Dict_Ptr        defl    $
1463+ 2FB2             >
1463+ 2FB2             >//              ______________________________________________________________________
1463+ 2FB2             >//              Heap part
1463+ 2FB2             >
1463+ 2FB2             >
1463+ 2FB2             >                org     (Heap_Ptr & $1FFF) + $E000
1463+ E89E             >
1463+ E89E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ E89E             >Latest_Definition defl  Heap_Ptr
1463+ E89E             >
1463+ E89E             >                // dummy db directives used to calculate length of namec
1463+ E89E 28 41 42 4F >                db      "(ABORT)"
1463+ E8A2 52 54 29    >
1463+ E8A5             >len_NFA         defl    $ - temp_NFA
1463+ E8A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ E89E             >
1463+ E89E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ E89F 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1463+ E8A3 52 54 29    >
1463+ E8A6             >                org     $-1                 // alter last byte of Name just above to set
1463+ E8A5 A9          >                db      {b $} | END_BIT     // msb as name end
1463+ E8A6             >
1463+ E8A6 94 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1463+ E8A8             >Prev_Ptr        defl    Heap_Ptr
1463+ E8A8             >
1463+ E8A8             >mirror_Ptr      defl    $
1463+ E8A8             >
1463+ E8A8 B4 2F       >                dw      Dict_Ptr + 2        // xt
1463+ E8AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1463+ E8AA             >
1463+ E8AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1463+ E8AA             >
1463+ E8AA             >//              ______________________________________________________________________
1463+ E8AA             >//              Dictionary part
1463+ E8AA             >
1463+ E8AA             >                org     Dict_Ptr
1463+ 2FB2             >
1463+ 2FB2 A8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1463+ 2FB4             >
1463+ 2FB4             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 2FB4 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1463+ 2FB7             >
1463+ 2FB7             >
1463+ 2FB7             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 2FB7             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 2FB7             >
1463+ 2FB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 2FB7 47 32                        dw      ABORT                   // abort
1465+ 2FB9 F4 24                        dw      EXIT                    // ;
1466+ 2FBB
1467+ 2FBB              //  ______________________________________________________________________
1468+ 2FBB              //
1469+ 2FBB              // error        n --
1470+ 2FBB              // raise an error
1471+ 2FBB              // if WARNING is 0, prints "MSG#n".
1472+ 2FBB              // if WARNING is 1, prints line n of screen 4.
1473+ 2FBB              // if WARNING is -1 does (ABORT) that normally does ABORT
1474+ 2FBB              // value can be negative or beyond block 4.
1475+ 2FBB                              Colon_Def ERROR,  "ERROR", is_normal
1475+ 2FBB             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1475+ 2FBB             >
1475+ 2FBB             >Dict_Ptr        defl    $
1475+ 2FBB             >
1475+ 2FBB             >//              ______________________________________________________________________
1475+ 2FBB             >//              Heap part
1475+ 2FBB             >
1475+ 2FBB             >
1475+ 2FBB             >                org     (Heap_Ptr & $1FFF) + $E000
1475+ E8AA             >
1475+ E8AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ E8AA             >Latest_Definition defl  Heap_Ptr
1475+ E8AA             >
1475+ E8AA             >                // dummy db directives used to calculate length of namec
1475+ E8AA 45 52 52 4F >                db      "ERROR"
1475+ E8AE 52          >
1475+ E8AF             >len_NFA         defl    $ - temp_NFA
1475+ E8AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ E8AA             >
1475+ E8AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ E8AB 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1475+ E8AF 52          >
1475+ E8B0             >                org     $-1                 // alter last byte of Name just above to set
1475+ E8AF D2          >                db      {b $} | END_BIT     // msb as name end
1475+ E8B0             >
1475+ E8B0 9E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1475+ E8B2             >Prev_Ptr        defl    Heap_Ptr
1475+ E8B2             >
1475+ E8B2             >mirror_Ptr      defl    $
1475+ E8B2             >
1475+ E8B2 BD 2F       >                dw      Dict_Ptr + 2        // xt
1475+ E8B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1475+ E8B4             >
1475+ E8B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1475+ E8B4             >
1475+ E8B4             >//              ______________________________________________________________________
1475+ E8B4             >//              Dictionary part
1475+ E8B4             >
1475+ E8B4             >                org     Dict_Ptr
1475+ 2FBB             >
1475+ 2FBB B2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1475+ 2FBD             >
1475+ 2FBD             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 2FBD CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1475+ 2FC0             >
1475+ 2FC0             >
1475+ 2FC0             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 2FC0             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 2FC0             >
1475+ 2FC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 2FC0 9B 27 34 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1476+ 2FC4 2B 25
1477+ 2FC6                                                              // if
1478+ 2FC6 8F 20                        dw      ZBRANCH
1479+ 2FC8 04 00                        dw      Error_Endif_1 - $
1480+ 2FCA B4 2F                        dw          CABORT              //      (abort)
1481+ 2FCC              Error_Endif_1:                                  // endif
1482+ 2FCC 4F 28 BD 2B                  dw      HERE, COUNT, TYPE       // here count type
1482+ 2FD0 11 2C
1483+ 2FD2 AE 2D                        dw      C_DOT_QUOTE             // .( ? )
1484+ 2FD4 02 3F 20                     db      2, "? "
1485+ 2FD7 72 35                        dw      MESSAGE                 // message  ( forward )
1486+ 2FD9 83 27 34 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1486+ 2FDD E4 24
1487+ 2FDF CB 27 34 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1487+ 2FE3 F1 28
1488+ 2FE5                                                              // if
1489+ 2FE5 8F 20                        dw      ZBRANCH
1490+ 2FE7 08 00                        dw      Error_Endif_2 - $
1491+ 2FE9 D1 27 34 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1491+ 2FED C3 25
1492+ 2FEF              Error_Endif_2:                                  // endif
1493+ 2FEF 0B 32                        dw      QUIT                    // quit ( forward )
1494+ 2FF1 F4 24                        dw      EXIT                    // ;
1495+ 2FF3              //  ______________________________________________________________________
1496+ 2FF3              //
1497+ 2FF3              // id.          nfa --
1498+ 2FF3                              Colon_Def ID_DOT,  "ID.", is_normal
1498+ 2FF3             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1498+ 2FF3             >
1498+ 2FF3             >Dict_Ptr        defl    $
1498+ 2FF3             >
1498+ 2FF3             >//              ______________________________________________________________________
1498+ 2FF3             >//              Heap part
1498+ 2FF3             >
1498+ 2FF3             >
1498+ 2FF3             >                org     (Heap_Ptr & $1FFF) + $E000
1498+ E8B4             >
1498+ E8B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ E8B4             >Latest_Definition defl  Heap_Ptr
1498+ E8B4             >
1498+ E8B4             >                // dummy db directives used to calculate length of namec
1498+ E8B4 49 44 2E    >                db      "ID."
1498+ E8B7             >len_NFA         defl    $ - temp_NFA
1498+ E8B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ E8B4             >
1498+ E8B4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ E8B5 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1498+ E8B8             >                org     $-1                 // alter last byte of Name just above to set
1498+ E8B7 AE          >                db      {b $} | END_BIT     // msb as name end
1498+ E8B8             >
1498+ E8B8 AA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1498+ E8BA             >Prev_Ptr        defl    Heap_Ptr
1498+ E8BA             >
1498+ E8BA             >mirror_Ptr      defl    $
1498+ E8BA             >
1498+ E8BA F5 2F       >                dw      Dict_Ptr + 2        // xt
1498+ E8BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1498+ E8BC             >
1498+ E8BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1498+ E8BC             >
1498+ E8BC             >//              ______________________________________________________________________
1498+ E8BC             >//              Dictionary part
1498+ E8BC             >
1498+ E8BC             >                org     Dict_Ptr
1498+ 2FF3             >
1498+ 2FF3 BA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1498+ 2FF5             >
1498+ 2FF5             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 2FF5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1498+ 2FF8             >
1498+ 2FF8             >
1498+ 2FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 2FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 2FF8             >
1498+ 2FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 2FF8 A7 29                        dw      QTOHEAP
1500+ 2FFA CA 25 31 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1500+ 2FFE 23 29
1501+ 3000 5F 25                        dw      ONE_PLUS                // 1+
1502+ 3002 A6 25 8E 28                  dw      OVER, SUBTRACT          // over -
1503+ 3006 CA 25 FE 24                  dw      DUP, TO_R               // >r
1504+ 300A 54 2D C3 25                  dw      PAD, SWAP               // pad swap
1505+ 300E 35 24                        dw      CMOVE                   // cmove
1506+ 3010 54 2D 5F 25                  dw      PAD, ONE_PLUS           // pad 1+
1507+ 3014 09 25 66 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1508+ 3018 11 2C 18 29                  dw      TYPE, SPACE             // type
1509+ 301C F4 24                        dw      EXIT                    // ;
1510+ 301E
1511+ 301E              //  ______________________________________________________________________
1512+ 301E              //
1513+ 301E              // code         -- cccc
1514+ 301E                              Colon_Def CODE,  "CODE", is_normal
1514+ 301E             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1514+ 301E             >
1514+ 301E             >Dict_Ptr        defl    $
1514+ 301E             >
1514+ 301E             >//              ______________________________________________________________________
1514+ 301E             >//              Heap part
1514+ 301E             >
1514+ 301E             >
1514+ 301E             >                org     (Heap_Ptr & $1FFF) + $E000
1514+ E8BC             >
1514+ E8BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ E8BC             >Latest_Definition defl  Heap_Ptr
1514+ E8BC             >
1514+ E8BC             >                // dummy db directives used to calculate length of namec
1514+ E8BC 43 4F 44 45 >                db      "CODE"
1514+ E8C0             >len_NFA         defl    $ - temp_NFA
1514+ E8C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ E8BC             >
1514+ E8BC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ E8BD 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1514+ E8C1             >                org     $-1                 // alter last byte of Name just above to set
1514+ E8C0 C5          >                db      {b $} | END_BIT     // msb as name end
1514+ E8C1             >
1514+ E8C1 B4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1514+ E8C3             >Prev_Ptr        defl    Heap_Ptr
1514+ E8C3             >
1514+ E8C3             >mirror_Ptr      defl    $
1514+ E8C3             >
1514+ E8C3 20 30       >                dw      Dict_Ptr + 2        // xt
1514+ E8C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1514+ E8C5             >
1514+ E8C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1514+ E8C5             >
1514+ E8C5             >//              ______________________________________________________________________
1514+ E8C5             >//              Dictionary part
1514+ E8C5             >
1514+ E8C5             >                org     Dict_Ptr
1514+ 301E             >
1514+ 301E C3 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1514+ 3020             >
1514+ 3020             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 3020 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1514+ 3023             >
1514+ 3023             >
1514+ 3023             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 3023             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 3023             >
1514+ 3023             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 3023 A7 2F                        dw      LFIND                   // -find
1516+ 3025                                                              // if
1517+ 3025 8F 20                        dw      ZBRANCH
1518+ 3027 10 00                        dw      Code_Endif - $
1519+ 3029 AF 25                        dw          DROP                //      drop
1520+ 302B 0D 2A F5 2F                  dw          TO_NAME, ID_DOT     //      >name id.
1521+ 302F 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1521+ 3033 72 35
1522+ 3035 18 29                        dw          SPACE               //      space
1523+ 3037              Code_Endif:                                     // endif
1524+ 3037 4F 28                        dw      HERE                    // here
1525+ 3039                                                              // ( ---- here begins NFA ---- )
1526+ 3039 CA 25 49 26                  dw      DUP, CFETCH             // dup c@
1527+ 303D 95 27 34 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1527+ 3041 CB 28
1528+ 3043 5F 25                        dw      ONE_PLUS                // 1+
1529+ 3045 CA 25 5A 28                  dw      DUP, ALLOT              // dup allot
1530+ 3049 75 25 75 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1531+ 304D FE 24                        dw      TO_R                    // >r
1532+ 304F CA 25                        dw      DUP                     // dup
1533+ 3051 3D 20                        dw      LIT
1534+ 3053 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1535+ 3055 2B 26                        dw      TOGGLE                  // toggle
1536+ 3057 4F 28 66 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1537+ 305B 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1537+ 305F 2B 26
1538+ 3061                                                              // ( ---- here is LFA ---- )
1539+ 3061 EF 27 34 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1539+ 3065 34 26
1540+ 3067 65 28                        dw      COMMA
1541+ 3069 CA 25 75 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1541+ 306D 65 28
1542+ 306F B8 29                        dw      HP_FETCH                // hp@
1543+ 3071 EF 27 34 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1543+ 3075 3E 26
1544+ 3077 B8 29 89 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1545+ 307B 14 25 35 24                  dw      R_OP, CMOVE
1546+ 307F 14 25 86 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1546+ 3083 5A 28
1547+ 3085 09 25 BF 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1547+ 3089 1C 26
1548+ 308B B8 29 79 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1549+ 308F 65 28                        dw      COMMA
1550+ 3091 2A 27 CA 29                  dw      ZERO, SKIP_HP_PAGE
1551+ 3095                                                              // ( ---- here is LFA ---- )
1552+ 3095 F4 24                        dw      EXIT                    // ;
1553+ 3097
1554+ 3097              //  ______________________________________________________________________
1555+ 3097              //
1556+ 3097              // create       -- cccc     ( compile time )
1557+ 3097              //              -- a        ( run time )
1558+ 3097                              Colon_Def CREATE,  "CREATE", is_normal
1558+ 3097             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1558+ 3097             >
1558+ 3097             >Dict_Ptr        defl    $
1558+ 3097             >
1558+ 3097             >//              ______________________________________________________________________
1558+ 3097             >//              Heap part
1558+ 3097             >
1558+ 3097             >
1558+ 3097             >                org     (Heap_Ptr & $1FFF) + $E000
1558+ E8C5             >
1558+ E8C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ E8C5             >Latest_Definition defl  Heap_Ptr
1558+ E8C5             >
1558+ E8C5             >                // dummy db directives used to calculate length of namec
1558+ E8C5 43 52 45 41 >                db      "CREATE"
1558+ E8C9 54 45       >
1558+ E8CB             >len_NFA         defl    $ - temp_NFA
1558+ E8CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ E8C5             >
1558+ E8C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ E8C6 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1558+ E8CA 54 45       >
1558+ E8CC             >                org     $-1                 // alter last byte of Name just above to set
1558+ E8CB C5          >                db      {b $} | END_BIT     // msb as name end
1558+ E8CC             >
1558+ E8CC BC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1558+ E8CE             >Prev_Ptr        defl    Heap_Ptr
1558+ E8CE             >
1558+ E8CE             >mirror_Ptr      defl    $
1558+ E8CE             >
1558+ E8CE 99 30       >                dw      Dict_Ptr + 2        // xt
1558+ E8D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1558+ E8D0             >
1558+ E8D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1558+ E8D0             >
1558+ E8D0             >//              ______________________________________________________________________
1558+ E8D0             >//              Dictionary part
1558+ E8D0             >
1558+ E8D0             >                org     Dict_Ptr
1558+ 3097             >
1558+ 3097 CE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1558+ 3099             >
1558+ 3099             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 3099 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1558+ 309C             >
1558+ 309C             >
1558+ 309C             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 309C             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 309C             >
1558+ 309C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 309C 20 30 2D 2B                  dw      CODE, SMUDGE            // code smudge
1560+ 30A0 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1560+ 30A4 74 28
1561+ 30A6 3D 20 11 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1561+ 30AA 65 28
1562+ 30AC 69 2B                        dw      C_SEMICOLON_CODE
1563+ 30AE                              // this routine is called from the call coded in CFA
1564+ 30AE              Create_Ptr:
1565+ 30AE
1566+ 30AE
1567+ 30AE
1568+ 30AE                              next
1568+ 30AE DD E9       >                jp      (ix)
1569+ 30B0
1570+ 30B0              //  ______________________________________________________________________
1571+ 30B0              //
1572+ 30B0              // [compile]    -- cccc     ( compile time )
1573+ 30B0                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1573+ 30B0             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1573+ 30B0             >
1573+ 30B0             >Dict_Ptr        defl    $
1573+ 30B0             >
1573+ 30B0             >//              ______________________________________________________________________
1573+ 30B0             >//              Heap part
1573+ 30B0             >
1573+ 30B0             >
1573+ 30B0             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8D0             >
1573+ E8D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8D0             >Latest_Definition defl  Heap_Ptr
1573+ E8D0             >
1573+ E8D0             >                // dummy db directives used to calculate length of namec
1573+ E8D0 5B 43 4F 4D >                db      "[COMPILE]"
1573+ E8D4 50 49 4C 45 >
1573+ E8D8 5D          >
1573+ E8D9             >len_NFA         defl    $ - temp_NFA
1573+ E8D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8D0             >
1573+ E8D0 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8D1 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1573+ E8D5 50 49 4C 45 >
1573+ E8D9 5D          >
1573+ E8DA             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8D9 DD          >                db      {b $} | END_BIT     // msb as name end
1573+ E8DA             >
1573+ E8DA C5 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8DC             >Prev_Ptr        defl    Heap_Ptr
1573+ E8DC             >
1573+ E8DC             >mirror_Ptr      defl    $
1573+ E8DC             >
1573+ E8DC B2 30       >                dw      Dict_Ptr + 2        // xt
1573+ E8DE             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8DE             >
1573+ E8DE             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8DE             >
1573+ E8DE             >//              ______________________________________________________________________
1573+ E8DE             >//              Dictionary part
1573+ E8DE             >
1573+ E8DE             >                org     Dict_Ptr
1573+ 30B0             >
1573+ 30B0 DC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 30B2             >
1573+ 30B2             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 30B2 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 30B5             >
1573+ 30B5             >
1573+ 30B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 30B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 30B5             >
1573+ 30B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 30B5 A7 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1575+ 30B7 19 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1576+ 30B9 2A 27 83 2A                  dw      ZERO, QERROR            // 0 ?error
1577+ 30BD AF 25                        dw      DROP                    // drop       (  cfa  )
1578+ 30BF 65 28                        dw      COMMA                   // ,
1579+ 30C1 F4 24                        dw      EXIT                    // ; immediate
1580+ 30C3
1581+ 30C3              //  ______________________________________________________________________
1582+ 30C3              //
1583+ 30C3              // literal      n --      ( compile time )
1584+ 30C3                              Colon_Def LITERAL,  "LITERAL", is_immediate
1584+ 30C3             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1584+ 30C3             >
1584+ 30C3             >Dict_Ptr        defl    $
1584+ 30C3             >
1584+ 30C3             >//              ______________________________________________________________________
1584+ 30C3             >//              Heap part
1584+ 30C3             >
1584+ 30C3             >
1584+ 30C3             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E8DE             >
1584+ E8DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E8DE             >Latest_Definition defl  Heap_Ptr
1584+ E8DE             >
1584+ E8DE             >                // dummy db directives used to calculate length of namec
1584+ E8DE 4C 49 54 45 >                db      "LITERAL"
1584+ E8E2 52 41 4C    >
1584+ E8E5             >len_NFA         defl    $ - temp_NFA
1584+ E8E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E8DE             >
1584+ E8DE C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E8DF 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1584+ E8E3 52 41 4C    >
1584+ E8E6             >                org     $-1                 // alter last byte of Name just above to set
1584+ E8E5 CC          >                db      {b $} | END_BIT     // msb as name end
1584+ E8E6             >
1584+ E8E6 D0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E8E8             >Prev_Ptr        defl    Heap_Ptr
1584+ E8E8             >
1584+ E8E8             >mirror_Ptr      defl    $
1584+ E8E8             >
1584+ E8E8 C5 30       >                dw      Dict_Ptr + 2        // xt
1584+ E8EA             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E8EA             >
1584+ E8EA             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E8EA             >
1584+ E8EA             >//              ______________________________________________________________________
1584+ E8EA             >//              Dictionary part
1584+ E8EA             >
1584+ E8EA             >                org     Dict_Ptr
1584+ 30C3             >
1584+ 30C3 E8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 30C5             >
1584+ 30C5             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 30C5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1584+ 30C8             >
1584+ 30C8             >
1584+ 30C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 30C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 30C8             >
1584+ 30C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 30C8 F5 27 34 26                  dw      STATE, FETCH            // state @
1586+ 30CC                                                              // if
1587+ 30CC 8F 20                        dw      ZBRANCH
1588+ 30CE 08 00                        dw      Literal_Endif - $
1589+ 30D0 F3 2A 3D 20                  dw          COMPILE, LIT        //      compile lit
1590+ 30D4 65 28                        dw          COMMA               //      ,
1591+ 30D6              Literal_Endif:                                  // endif
1592+ 30D6 F4 24                        dw      EXIT                    // ; immediate
1593+ 30D8
1594+ 30D8              //  ______________________________________________________________________
1595+ 30D8              //
1596+ 30D8              // dliteral     n --      ( compile time )
1597+ 30D8                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1597+ 30D8             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1597+ 30D8             >
1597+ 30D8             >Dict_Ptr        defl    $
1597+ 30D8             >
1597+ 30D8             >//              ______________________________________________________________________
1597+ 30D8             >//              Heap part
1597+ 30D8             >
1597+ 30D8             >
1597+ 30D8             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E8EA             >
1597+ E8EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E8EA             >Latest_Definition defl  Heap_Ptr
1597+ E8EA             >
1597+ E8EA             >                // dummy db directives used to calculate length of namec
1597+ E8EA 44 4C 49 54 >                db      "DLITERAL"
1597+ E8EE 45 52 41 4C >
1597+ E8F2             >len_NFA         defl    $ - temp_NFA
1597+ E8F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E8EA             >
1597+ E8EA C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E8EB 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1597+ E8EF 45 52 41 4C >
1597+ E8F3             >                org     $-1                 // alter last byte of Name just above to set
1597+ E8F2 CC          >                db      {b $} | END_BIT     // msb as name end
1597+ E8F3             >
1597+ E8F3 DE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E8F5             >Prev_Ptr        defl    Heap_Ptr
1597+ E8F5             >
1597+ E8F5             >mirror_Ptr      defl    $
1597+ E8F5             >
1597+ E8F5 DA 30       >                dw      Dict_Ptr + 2        // xt
1597+ E8F7             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E8F7             >
1597+ E8F7             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E8F7             >
1597+ E8F7             >//              ______________________________________________________________________
1597+ E8F7             >//              Dictionary part
1597+ E8F7             >
1597+ E8F7             >                org     Dict_Ptr
1597+ 30D8             >
1597+ 30D8 F5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 30DA             >
1597+ 30DA             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 30DA CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1597+ 30DD             >
1597+ 30DD             >
1597+ 30DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 30DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 30DD             >
1597+ 30DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 30DD F5 27 34 26                  dw      STATE, FETCH            // state @
1599+ 30E1                                                              // if
1600+ 30E1 8F 20                        dw      ZBRANCH
1601+ 30E3 08 00                        dw      DLiteral_Endif - $
1602+ 30E5 C3 25                        dw          SWAP                //      swap
1603+ 30E7 C5 30 C5 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1604+ 30EB              DLiteral_Endif:                                 // endif
1605+ 30EB F4 24                        dw      EXIT                    // ; immediate
1606+ 30ED
1607+ 30ED              //  ______________________________________________________________________
1608+ 30ED              //
1609+ 30ED              // [char]       n --      ( compile time )
1610+ 30ED              // inside colon definition, gets first character from next input word
1611+ 30ED              // and compiles it as literal.
1612+ 30ED                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1612+ 30ED             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1612+ 30ED             >
1612+ 30ED             >Dict_Ptr        defl    $
1612+ 30ED             >
1612+ 30ED             >//              ______________________________________________________________________
1612+ 30ED             >//              Heap part
1612+ 30ED             >
1612+ 30ED             >
1612+ 30ED             >                org     (Heap_Ptr & $1FFF) + $E000
1612+ E8F7             >
1612+ E8F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ E8F7             >Latest_Definition defl  Heap_Ptr
1612+ E8F7             >
1612+ E8F7             >                // dummy db directives used to calculate length of namec
1612+ E8F7 5B 43 48 41 >                db      "[CHAR]"
1612+ E8FB 52 5D       >
1612+ E8FD             >len_NFA         defl    $ - temp_NFA
1612+ E8FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ E8F7             >
1612+ E8F7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ E8F8 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1612+ E8FC 52 5D       >
1612+ E8FE             >                org     $-1                 // alter last byte of Name just above to set
1612+ E8FD DD          >                db      {b $} | END_BIT     // msb as name end
1612+ E8FE             >
1612+ E8FE EA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1612+ E900             >Prev_Ptr        defl    Heap_Ptr
1612+ E900             >
1612+ E900             >mirror_Ptr      defl    $
1612+ E900             >
1612+ E900 EF 30       >                dw      Dict_Ptr + 2        // xt
1612+ E902             >Heap_Ptr        defl    $ - $E000           // save current HP
1612+ E902             >
1612+ E902             >Current_HP      defl  $ - $E000             // used to set HP once!
1612+ E902             >
1612+ E902             >//              ______________________________________________________________________
1612+ E902             >//              Dictionary part
1612+ E902             >
1612+ E902             >                org     Dict_Ptr
1612+ 30ED             >
1612+ 30ED 00 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1612+ 30EF             >
1612+ 30EF             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 30EF CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1612+ 30F2             >
1612+ 30F2             >
1612+ 30F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 30F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 30F2             >
1612+ 30F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 30F2 C5 2D C5 30                  dw      CHAR, LITERAL           // char [compile] literal
1614+ 30F6 F4 24                        dw      EXIT                    // ; immediate
1615+ 30F8
1616+ 30F8              //  ______________________________________________________________________
1617+ 30F8              //
1618+ 30F8              // 0x00         n --      ( compile time )
1619+ 30F8                              Colon_Def NUL_WORD,  $00, is_immediate
1619+ 30F8             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1619+ 30F8             >
1619+ 30F8             >Dict_Ptr        defl    $
1619+ 30F8             >
1619+ 30F8             >//              ______________________________________________________________________
1619+ 30F8             >//              Heap part
1619+ 30F8             >
1619+ 30F8             >
1619+ 30F8             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E902             >
1619+ E902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E902             >Latest_Definition defl  Heap_Ptr
1619+ E902             >
1619+ E902             >                // dummy db directives used to calculate length of namec
1619+ E902 00          >                db      $00
1619+ E903             >len_NFA         defl    $ - temp_NFA
1619+ E903             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E902             >
1619+ E902 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E903 00          >                db      $00               // name string in 7-bit ascii, but
1619+ E904             >                org     $-1                 // alter last byte of Name just above to set
1619+ E903 80          >                db      {b $} | END_BIT     // msb as name end
1619+ E904             >
1619+ E904 F7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E906             >Prev_Ptr        defl    Heap_Ptr
1619+ E906             >
1619+ E906             >mirror_Ptr      defl    $
1619+ E906             >
1619+ E906 FA 30       >                dw      Dict_Ptr + 2        // xt
1619+ E908             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E908             >
1619+ E908             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E908             >
1619+ E908             >//              ______________________________________________________________________
1619+ E908             >//              Dictionary part
1619+ E908             >
1619+ E908             >                org     Dict_Ptr
1619+ 30F8             >
1619+ 30F8 06 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 30FA             >
1619+ 30FA             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 30FA CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1619+ 30FD             >
1619+ 30FD             >
1619+ 30FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 30FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 30FD             >
1619+ 30FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 30FD CB 27 34 26                  dw      BLK, FETCH, ONE         // blk @ 1
1620+ 3101 31 27
1621+ 3103 C0 28                        dw      GREATER                 // > if
1622+ 3105                                                              // if
1623+ 3105 8F 20                        dw      ZBRANCH
1624+ 3107 28 00                        dw      Nul_Else_1 - $
1625+ 3109 31 27 CB 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1625+ 310D 1C 26
1626+ 310F 2A 27 D1 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1626+ 3113 3E 26
1627+ 3115 CB 27 34 26                  dw          BLK, FETCH          //      blk @
1628+ 3119 62 27                        dw          BSCR                //      b/scr
1629+ 311B 66 25                        dw          ONE_SUBTRACT        //      1 -
1630+ 311D B4 24                        dw          AND_OP              //      and  ( this is tricky )
1631+ 311F 19 25                        dw          ZEQUAL              //      0=
1632+ 3121                                                              //      if
1633+ 3121 8F 20                        dw          ZBRANCH
1634+ 3123 08 00                        dw          Nul_Endif_2 - $
1635+ 3125 AB 2A                        dw              QEXEC           //          ?exec
1636+ 3127 09 25 AF 25                  dw              R_TO, DROP      //          r> drop
1637+ 312B              Nul_Endif_2:                                    //      endif
1638+ 312B 82 20                        dw      BRANCH
1639+ 312D 06 00                        dw      Nul_Endif_1 - $
1640+ 312F              Nul_Else_1:                                     // else
1641+ 312F 09 25 AF 25                  dw          R_TO, DROP          //      r> drop
1642+ 3133              Nul_Endif_1:                                    // endif
1643+ 3133 F4 24                        dw      EXIT                    // ;
1644+ 3135
1645+ 3135              //  ______________________________________________________________________
1646+ 3135              //
1647+ 3135              // ?stack       --
1648+ 3135              // Raise error #1 if stack is empty and you pop it
1649+ 3135              // Raise error #7 if stack is full.
1650+ 3135              // This means SP must always stay between HERE and FFFF
1651+ 3135              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1652+ 3135              // for Next 8K MMU paging this is $DOE8
1653+ 3135                              Colon_Def QSTACK, "?STACK", is_normal
1653+ 3135             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1653+ 3135             >
1653+ 3135             >Dict_Ptr        defl    $
1653+ 3135             >
1653+ 3135             >//              ______________________________________________________________________
1653+ 3135             >//              Heap part
1653+ 3135             >
1653+ 3135             >
1653+ 3135             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E908             >
1653+ E908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E908             >Latest_Definition defl  Heap_Ptr
1653+ E908             >
1653+ E908             >                // dummy db directives used to calculate length of namec
1653+ E908 3F 53 54 41 >                db      "?STACK"
1653+ E90C 43 4B       >
1653+ E90E             >len_NFA         defl    $ - temp_NFA
1653+ E90E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E908             >
1653+ E908 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E909 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1653+ E90D 43 4B       >
1653+ E90F             >                org     $-1                 // alter last byte of Name just above to set
1653+ E90E CB          >                db      {b $} | END_BIT     // msb as name end
1653+ E90F             >
1653+ E90F 02 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E911             >Prev_Ptr        defl    Heap_Ptr
1653+ E911             >
1653+ E911             >mirror_Ptr      defl    $
1653+ E911             >
1653+ E911 37 31       >                dw      Dict_Ptr + 2        // xt
1653+ E913             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E913             >
1653+ E913             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E913             >
1653+ E913             >//              ______________________________________________________________________
1653+ E913             >//              Dictionary part
1653+ E913             >
1653+ E913             >                org     Dict_Ptr
1653+ 3135             >
1653+ 3135 11 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 3137             >
1653+ 3137             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 3137 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 313A             >
1653+ 313A             >
1653+ 313A             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 313A             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 313A             >
1653+ 313A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 313A DB 24                        dw      SPFETCH                 // sp@
1655+ 313C 83 27 34 26                  dw      S0, FETCH               // s0 @
1656+ 3140 C3 25 A5 28                  dw      SWAP, ULESS             // swap u<
1657+ 3144 31 27 83 2A                  dw      ONE, QERROR             // 1 ?error
1658+ 3148 4F 28                        dw      HERE                    // here
1659+ 314A 83 27 34 26                  dw      S0, FETCH, LESS         // s0 @ <
1659+ 314E B3 28
1660+ 3150                                                              // if
1661+ 3150 8F 20                        dw      ZBRANCH
1662+ 3152 14 00                        dw      QStack_Endif - $
1663+ 3154 DB 24                        dw          SPFETCH             //      sp@
1664+ 3156 4F 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1664+ 315A 80 00
1665+ 315C 46 25 A5 28                  dw          PLUS, ULESS         //      plus u<
1666+ 3160 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1666+ 3164 83 2A
1667+ 3166              QStack_Endif:                                   // endif
1668+ 3166 F4 24                        dw      EXIT                    // ;
1669+ 3168
1670+ 3168
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 141  3168                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 3168              //  ______________________________________________________________________
   2+ 3168              //
   3+ 3168              //  L2.asm
   4+ 3168              //
   5+ 3168              //  Level-2 3dos
   6+ 3168              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 3168              //  ______________________________________________________________________
   8+ 3168
   9+ 3168
  10+ 3168              //  ______________________________________________________________________
  11+ 3168              //
  12+ 3168              // interpret    --
  13+ 3168              // This is the text interpreter.
  14+ 3168              // It executes or compiles, depending on STATE, the text coming from
  15+ 3168              // current input stream.
  16+ 3168              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 3168              // the word is interpreted as numeric and converted, using current BASE,
  18+ 3168              // leaving on top of stack a single or double precision number, depending
  19+ 3168              // on the presence of a decimal point.
  20+ 3168              // If the number conversion fails, the terminal is notified with ? followed
  21+ 3168              // by the offending word.
  22+ 3168                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 3168             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 3168             >
  22+ 3168             >Dict_Ptr        defl    $
  22+ 3168             >
  22+ 3168             >//              ______________________________________________________________________
  22+ 3168             >//              Heap part
  22+ 3168             >
  22+ 3168             >
  22+ 3168             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E913             >
  22+ E913             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E913             >Latest_Definition defl  Heap_Ptr
  22+ E913             >
  22+ E913             >                // dummy db directives used to calculate length of namec
  22+ E913 49 4E 54 45 >                db      "INTERPRET"
  22+ E917 52 50 52 45 >
  22+ E91B 54          >
  22+ E91C             >len_NFA         defl    $ - temp_NFA
  22+ E91C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E913             >
  22+ E913 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E914 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E918 52 50 52 45 >
  22+ E91C 54          >
  22+ E91D             >                org     $-1                 // alter last byte of Name just above to set
  22+ E91C D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E91D             >
  22+ E91D 08 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E91F             >Prev_Ptr        defl    Heap_Ptr
  22+ E91F             >
  22+ E91F             >mirror_Ptr      defl    $
  22+ E91F             >
  22+ E91F 6A 31       >                dw      Dict_Ptr + 2        // xt
  22+ E921             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E921             >
  22+ E921             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E921             >
  22+ E921             >//              ______________________________________________________________________
  22+ E921             >//              Dictionary part
  22+ E921             >
  22+ E921             >                org     Dict_Ptr
  22+ 3168             >
  22+ 3168 1F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 316A             >
  22+ 316A             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 316A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 316D             >
  22+ 316D             >
  22+ 316D             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 316D             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 316D             >
  22+ 316D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 316D
  24+ 316D              Interpret_Begin:                                        // begin
  25+ 316D A7 2F                        dw          LFIND                       //      -find
  26+ 316F                                                                      //      if
  27+ 316F 8F 20                        dw          ZBRANCH
  28+ 3171 1A 00                        dw          Interpret_Else_1 - $
  29+ 3173 F5 27 34 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 3177 B3 28
  30+ 3179                                                                      //          if
  31+ 3179 8F 20                        dw              ZBRANCH
  32+ 317B 08 00                        dw              Interpret_Else_2 - $
  33+ 317D 08 2B                        dw                  COMPILE_XT          //              compile,
  34+ 317F                                                                      //          else
  35+ 317F 82 20                        dw              BRANCH
  36+ 3181 06 00                        dw              Interpret_Endif_2 - $
  37+ 3183              Interpret_Else_2:
  38+ 3183 48 20 F1 26                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 3187              Interpret_Endif_2:                                      //          endif
  40+ 3187                                                                      //      else
  41+ 3187 82 20                        dw          BRANCH
  42+ 3189 1A 00                        dw          Interpret_Endif_1 - $
  43+ 318B              Interpret_Else_1:
  44+ 318B 4F 28 F7 2E                  dw              HERE, NUMBER            //          here number
  45+ 318F 01 28 34 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 3193 5F 25
  46+ 3195                                                                      //          if
  47+ 3195 8F 20                        dw              ZBRANCH
  48+ 3197 08 00                        dw              Interpret_Else_3 - $
  49+ 3199              //              dw                  NMODE, FETCH        //              nmode @
  50+ 3199              //                                                      //              if
  51+ 3199              //              dw                  ZBRANCH
  52+ 3199              //              dw                  Interpret_Endif_4 - $
  53+ 3199              //              dw                      ONE, ZERO       //                  1 0
  54+ 3199              //              dw                      TWO_DROP        //                  2drop
  55+ 3199              //Interpret_Endif_4:                                      //              endif
  56+ 3199 DA 30                        dw                  DLITERAL            //              [compile] dliteral
  57+ 319B                                                                      //          else
  58+ 319B 82 20                        dw              BRANCH
  59+ 319D 06 00                        dw              Interpret_Endif_3 - $
  60+ 319F              Interpret_Else_3:
  61+ 319F AF 25                        dw                  DROP                //              drop
  62+ 31A1 C5 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31A3              Interpret_Endif_3:                                      //          endif
  64+ 31A3              Interpret_Endif_1:                                      //      endif
  65+ 31A3 37 31                        dw          QSTACK                      //      ?stack
  66+ 31A5 4B 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31A7                                                                      //      if
  68+ 31A7 8F 20                        dw          ZBRANCH
  69+ 31A9 04 00                        dw          Interpret_Endif_5 - $
  70+ 31AB 0B 32                        dw              QUIT                    //          quit
  71+ 31AD              Interpret_Endif_5:                                      //      endif
  72+ 31AD 82 20                        dw      BRANCH
  73+ 31AF BE FF                        dw      Interpret_Begin - $
  74+ 31B1 F4 24                        dw      EXIT                            // ;
  75+ 31B3
  76+ 31B3              //  ______________________________________________________________________
  77+ 31B3              //
  78+ 31B3              // vocabulary   -- cccc     ( compile time )
  79+ 31B3              // Defining word used in the form   VOCABULARY cccc
  80+ 31B3              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31B3              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31B3              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31B3              // so new definitions can be inserted in that vocabulary.
  84+ 31B3                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31B3             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31B3             >
  84+ 31B3             >Dict_Ptr        defl    $
  84+ 31B3             >
  84+ 31B3             >//              ______________________________________________________________________
  84+ 31B3             >//              Heap part
  84+ 31B3             >
  84+ 31B3             >
  84+ 31B3             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E921             >
  84+ E921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E921             >Latest_Definition defl  Heap_Ptr
  84+ E921             >
  84+ E921             >                // dummy db directives used to calculate length of namec
  84+ E921 56 4F 43 41 >                db      "VOCABULARY"
  84+ E925 42 55 4C 41 >
  84+ E929 52 59       >
  84+ E92B             >len_NFA         defl    $ - temp_NFA
  84+ E92B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E921             >
  84+ E921 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E922 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E926 42 55 4C 41 >
  84+ E92A 52 59       >
  84+ E92C             >                org     $-1                 // alter last byte of Name just above to set
  84+ E92B D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E92C             >
  84+ E92C 13 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E92E             >Prev_Ptr        defl    Heap_Ptr
  84+ E92E             >
  84+ E92E             >mirror_Ptr      defl    $
  84+ E92E             >
  84+ E92E B5 31       >                dw      Dict_Ptr + 2        // xt
  84+ E930             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E930             >
  84+ E930             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E930             >
  84+ E930             >//              ______________________________________________________________________
  84+ E930             >//              Dictionary part
  84+ E930             >
  84+ E930             >                org     Dict_Ptr
  84+ 31B3             >
  84+ 31B3 2E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31B5             >
  84+ 31B5             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31B5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31B8             >
  84+ 31B8             >
  84+ 31B8             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31B8             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31B8             >
  84+ 31B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31B8
  86+ 31B8 95 2B                        dw      CBUILDS
  87+ 31BA
  88+ 31BA                              // dummy word + link part
  89+ 31BA 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31BE 65 28
  90+ 31C0 EF 27 34 26                  dw      CURRENT, FETCH          // current @
  91+ 31C4 34 26                        dw      FETCH                   // @
  92+ 31C6                          //  dw      CELL_MINUS              // cell-
  93+ 31C6 65 28                        dw      COMMA                   // ,
  94+ 31C8
  95+ 31C8                              // voc-link part
  96+ 31C8 4F 28                        dw      HERE                    // here
  97+ 31CA AD 27 34 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31CE 65 28                        dw      COMMA                   // ,
  99+ 31D0 AD 27 3E 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31D4                              // DOES part
 101+ 31D4 A0 2B                        dw      DOES_TO                 // does>
 102+ 31D6              Vocabulary_Does:
 103+ 31D6 75 25                        dw      CELL_PLUS               // cell+
 104+ 31D8 E9 27 3E 26                  dw      CONTEXT, STORE          // context !
 105+ 31DC F4 24                        dw      EXIT                    // ;
 106+ 31DE
 107+ 31DE              //  ______________________________________________________________________
 108+ 31DE              //
 109+ 31DE              // forth        --
 110+ 31DE              // Name of the first vocabulary.
 111+ 31DE              // It makes FORTH the CONTEXT vocabulary.
 112+ 31DE              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 31DE              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 31DE              // of a colon definition to be able to select the vocabulary.
 115+ 31DE
 116+ 31DE                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 31DE             >
 116+ 31DE             >Dict_Ptr        defl    $
 116+ 31DE             >
 116+ 31DE             >//              ______________________________________________________________________
 116+ 31DE             >//              Heap part
 116+ 31DE             >
 116+ 31DE             >
 116+ 31DE             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E930             >
 116+ E930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E930             >Latest_Definition defl  Heap_Ptr
 116+ E930             >
 116+ E930             >                // dummy db directives used to calculate length of namec
 116+ E930 46 4F 52 54 >                db      "FORTH"
 116+ E934 48          >
 116+ E935             >len_NFA         defl    $ - temp_NFA
 116+ E935             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E930             >
 116+ E930 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E931 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E935 48          >
 116+ E936             >                org     $-1                 // alter last byte of Name just above to set
 116+ E935 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E936             >
 116+ E936 21 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E938             >Prev_Ptr        defl    Heap_Ptr
 116+ E938             >
 116+ E938             >mirror_Ptr      defl    $
 116+ E938             >
 116+ E938 E0 31       >                dw      Dict_Ptr + 2        // xt
 116+ E93A             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E93A             >
 116+ E93A             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E93A             >
 116+ E93A             >//              ______________________________________________________________________
 116+ E93A             >//              Dictionary part
 116+ E93A             >
 116+ E93A             >                org     Dict_Ptr
 116+ 31DE             >
 116+ 31DE 38 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 31E0             >
 116+ 31E0             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 31E0 CD AD 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 31E3             >
 116+ 31E3             >
 116+ 31E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 31E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 31E3             >
 116+ 31E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 31E3 D6 31                        dw      Vocabulary_Does
 118+ 31E5
 119+ 31E5 81 A0                        db      $81, $A0
 120+ 31E7              Forth_Latest_Ptr:
 121+ 31E7 30 09                        dw      Latest_Definition
 122+ 31E9              Voclink_Ptr:
 123+ 31E9 00 00                        dw      0
 124+ 31EB
 125+ 31EB              // ____
 126+ 31EB              // temp_VOC        defl    $                   // save this address
 127+ 31EB              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 31EB              //              db      $81, $A0
 129+ 31EB              // Forth_Latest_Ptr_HEAP:
 130+ 31EB              //                 dw      Latest_Definition
 131+ 31EB              // Voclink_Ptr_HEAP:
 132+ 31EB              //                 dw      0
 133+ 31EB              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 31EB              //                 org     temp_VOC
 135+ 31EB              // ____
 136+ 31EB
 137+ 31EB              // Any new vocabulary is structured as follow:
 138+ 31EB              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 31EB              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 31EB              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 31EB              //       at creations it points to the null-word of its parent vocabulary
 142+ 31EB              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 31EB              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 31EB              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 31EB              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 31EB              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 31EB              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 31EB
 149+ 31EB              //  ______________________________________________________________________
 150+ 31EB              //
 151+ 31EB              // definitions  --
 152+ 31EB              // Used in the form  cccc DEFINITIONS
 153+ 31EB              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 31EB              // vocabulary cccc.
 155+ 31EB                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 31EB             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 31EB             >
 155+ 31EB             >Dict_Ptr        defl    $
 155+ 31EB             >
 155+ 31EB             >//              ______________________________________________________________________
 155+ 31EB             >//              Heap part
 155+ 31EB             >
 155+ 31EB             >
 155+ 31EB             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E93A             >
 155+ E93A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E93A             >Latest_Definition defl  Heap_Ptr
 155+ E93A             >
 155+ E93A             >                // dummy db directives used to calculate length of namec
 155+ E93A 44 45 46 49 >                db      "DEFINITIONS"
 155+ E93E 4E 49 54 49 >
 155+ E942 4F 4E 53    >
 155+ E945             >len_NFA         defl    $ - temp_NFA
 155+ E945             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E93A             >
 155+ E93A 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E93B 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E93F 4E 49 54 49 >
 155+ E943 4F 4E 53    >
 155+ E946             >                org     $-1                 // alter last byte of Name just above to set
 155+ E945 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E946             >
 155+ E946 30 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E948             >Prev_Ptr        defl    Heap_Ptr
 155+ E948             >
 155+ E948             >mirror_Ptr      defl    $
 155+ E948             >
 155+ E948 ED 31       >                dw      Dict_Ptr + 2        // xt
 155+ E94A             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E94A             >
 155+ E94A             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E94A             >
 155+ E94A             >//              ______________________________________________________________________
 155+ E94A             >//              Dictionary part
 155+ E94A             >
 155+ E94A             >                org     Dict_Ptr
 155+ 31EB             >
 155+ 31EB 48 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 31ED             >
 155+ 31ED             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 31ED CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 31F0             >
 155+ 31F0             >
 155+ 31F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 31F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 31F0             >
 155+ 31F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 31F0 E9 27 34 26                  dw      CONTEXT, FETCH          // context @
 157+ 31F4 EF 27 3E 26                  dw      CURRENT, STORE          // current !
 158+ 31F8 F4 24                        dw      EXIT                    // ;
 159+ 31FA
 160+ 31FA              //  ______________________________________________________________________
 161+ 31FA              //
 162+ 31FA              // (            -- cccc )
 163+ 31FA              // the following text is interpreted as a comment until a closing )
 164+ 31FA                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 31FA             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 31FA             >
 164+ 31FA             >Dict_Ptr        defl    $
 164+ 31FA             >
 164+ 31FA             >//              ______________________________________________________________________
 164+ 31FA             >//              Heap part
 164+ 31FA             >
 164+ 31FA             >
 164+ 31FA             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E94A             >
 164+ E94A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E94A             >Latest_Definition defl  Heap_Ptr
 164+ E94A             >
 164+ E94A             >                // dummy db directives used to calculate length of namec
 164+ E94A 28          >                db      "("
 164+ E94B             >len_NFA         defl    $ - temp_NFA
 164+ E94B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E94A             >
 164+ E94A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E94B 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E94C             >                org     $-1                 // alter last byte of Name just above to set
 164+ E94B A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E94C             >
 164+ E94C 3A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E94E             >Prev_Ptr        defl    Heap_Ptr
 164+ E94E             >
 164+ E94E             >mirror_Ptr      defl    $
 164+ E94E             >
 164+ E94E FC 31       >                dw      Dict_Ptr + 2        // xt
 164+ E950             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E950             >
 164+ E950             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E950             >
 164+ E950             >//              ______________________________________________________________________
 164+ E950             >//              Dictionary part
 164+ E950             >
 164+ E950             >                org     Dict_Ptr
 164+ 31FA             >
 164+ 31FA 4E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 31FC             >
 164+ 31FC             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 31FC CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 31FF             >
 164+ 31FF             >
 164+ 31FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 31FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 31FF             >
 164+ 31FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 31FF 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3203 63 2D AF 25                  dw      WORD, DROP              // word drop
 167+ 3207 F4 24                        dw      EXIT                    // ;
 168+ 3209
 169+ 3209              //  ______________________________________________________________________
 170+ 3209              //
 171+ 3209              // quit         --
 172+ 3209              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 3209                              Colon_Def QUIT, "QUIT", is_normal
 173+ 3209             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 3209             >
 173+ 3209             >Dict_Ptr        defl    $
 173+ 3209             >
 173+ 3209             >//              ______________________________________________________________________
 173+ 3209             >//              Heap part
 173+ 3209             >
 173+ 3209             >
 173+ 3209             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E950             >
 173+ E950             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E950             >Latest_Definition defl  Heap_Ptr
 173+ E950             >
 173+ E950             >                // dummy db directives used to calculate length of namec
 173+ E950 51 55 49 54 >                db      "QUIT"
 173+ E954             >len_NFA         defl    $ - temp_NFA
 173+ E954             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E950             >
 173+ E950 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E951 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E955             >                org     $-1                 // alter last byte of Name just above to set
 173+ E954 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E955             >
 173+ E955 4A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E957             >Prev_Ptr        defl    Heap_Ptr
 173+ E957             >
 173+ E957             >mirror_Ptr      defl    $
 173+ E957             >
 173+ E957 0B 32       >                dw      Dict_Ptr + 2        // xt
 173+ E959             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E959             >
 173+ E959             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E959             >
 173+ E959             >//              ______________________________________________________________________
 173+ E959             >//              Dictionary part
 173+ E959             >
 173+ E959             >                org     Dict_Ptr
 173+ 3209             >
 173+ 3209 57 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 320B             >
 173+ 320B             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 320B CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 320E             >
 173+ 320E             >
 173+ 320E             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 320E             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 320E             >
 173+ 320E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 320E
 175+ 320E 37 28 34 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 3212 98 23 AF 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 3216 2A 27 37 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 321A 3E 26
 178+ 321C 2A 27 CB 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3220 3E 26
 179+ 3222 11 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3224                                                              // begin
 181+ 3224              Quit_Begin:
 182+ 3224 89 27 34 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 3228 EF 24
 183+ 322A 4F 22                        dw      CR                      //      cr
 184+ 322C 00 2D                        dw      QUERY                   //      query
 185+ 322E              Next_Breakpoint_1:
 186+ 322E 6A 31                        dw      INTERPRET               //      interpret
 187+ 3230 F5 27 34 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3234 19 25
 188+ 3236                                                              //      if
 189+ 3236 8F 20                        dw      ZBRANCH
 190+ 3238 07 00                        dw      Quit_Endif - $
 191+ 323A AE 2D                        dw          C_DOT_QUOTE
 192+ 323C 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 323F              Quit_Endif:                                     //      else
 194+ 323F                                                              // again
 195+ 323F 82 20                        dw      BRANCH
 196+ 3241 E3 FF                        dw      Quit_Begin - $
 197+ 3243 F4 24                        dw      EXIT                    // ;
 198+ 3245
 199+ 3245              //  ______________________________________________________________________
 200+ 3245              //
 201+ 3245              // abort        --
 202+ 3245                              Colon_Def ABORT, "ABORT", is_normal
 202+ 3245             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 3245             >
 202+ 3245             >Dict_Ptr        defl    $
 202+ 3245             >
 202+ 3245             >//              ______________________________________________________________________
 202+ 3245             >//              Heap part
 202+ 3245             >
 202+ 3245             >
 202+ 3245             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E959             >
 202+ E959             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E959             >Latest_Definition defl  Heap_Ptr
 202+ E959             >
 202+ E959             >                // dummy db directives used to calculate length of namec
 202+ E959 41 42 4F 52 >                db      "ABORT"
 202+ E95D 54          >
 202+ E95E             >len_NFA         defl    $ - temp_NFA
 202+ E95E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E959             >
 202+ E959 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E95A 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E95E 54          >
 202+ E95F             >                org     $-1                 // alter last byte of Name just above to set
 202+ E95E D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E95F             >
 202+ E95F 50 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E961             >Prev_Ptr        defl    Heap_Ptr
 202+ E961             >
 202+ E961             >mirror_Ptr      defl    $
 202+ E961             >
 202+ E961 47 32       >                dw      Dict_Ptr + 2        // xt
 202+ E963             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E963             >
 202+ E963             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E963             >
 202+ E963             >//              ______________________________________________________________________
 202+ E963             >//              Dictionary part
 202+ E963             >
 202+ E963             >                org     Dict_Ptr
 202+ 3245             >
 202+ 3245 61 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 3247             >
 202+ 3247             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 3247 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 324A             >
 202+ 324A             >
 202+ 324A             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 324A             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 324A             >
 202+ 324A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 324A 83 27 34 26                  dw      S0, FETCH               // s0 @
 204+ 324E 4D 27                        dw      BL                      // bl
 205+ 3250 A6 25 3E 26                  dw      OVER, STORE             // over !
 206+ 3254 E4 24                        dw      SPSTORE                 // sp!
 207+ 3256 5A 2B                        dw      DECIMAL                 // decimal
 208+ 3258 E0 31                        dw      FORTH                   // [compile] forth
 209+ 325A ED 31                        dw      DEFINITIONS             // definitions
 210+ 325C
 211+ 325C 11 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 325E 89 27 34 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 3262 EF 24
 213+ 3264
 214+ 3264              Autoexec_Ptr:
 215+ 3264 91 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 3266 0B 32                        dw      QUIT                    // quit
 217+ 3268              //              dw      EXIT                    // ;
 218+ 3268
 219+ 3268              //  ______________________________________________________________________
 220+ 3268              //
 221+ 3268              // warm         --
 222+ 3268                              Colon_Def WARM, "WARM", is_normal
 222+ 3268             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 3268             >
 222+ 3268             >Dict_Ptr        defl    $
 222+ 3268             >
 222+ 3268             >//              ______________________________________________________________________
 222+ 3268             >//              Heap part
 222+ 3268             >
 222+ 3268             >
 222+ 3268             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E963             >
 222+ E963             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E963             >Latest_Definition defl  Heap_Ptr
 222+ E963             >
 222+ E963             >                // dummy db directives used to calculate length of namec
 222+ E963 57 41 52 4D >                db      "WARM"
 222+ E967             >len_NFA         defl    $ - temp_NFA
 222+ E967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E963             >
 222+ E963 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E964 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E968             >                org     $-1                 // alter last byte of Name just above to set
 222+ E967 CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E968             >
 222+ E968 59 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E96A             >Prev_Ptr        defl    Heap_Ptr
 222+ E96A             >
 222+ E96A             >mirror_Ptr      defl    $
 222+ E96A             >
 222+ E96A 6A 32       >                dw      Dict_Ptr + 2        // xt
 222+ E96C             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E96C             >
 222+ E96C             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E96C             >
 222+ E96C             >//              ______________________________________________________________________
 222+ E96C             >//              Dictionary part
 222+ E96C             >
 222+ E96C             >                org     Dict_Ptr
 222+ 3268             >
 222+ 3268 6A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 326A             >
 222+ 326A             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 326A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 326D             >
 222+ 326D             >
 222+ 326D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 326D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 326D             >
 222+ 326D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 326D 38 36                        dw      BLK_INIT                // blk-init
 224+ 326F                          //  dw      SPLASH                  // splash
 225+ 326F                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 326F 47 32                        dw      ABORT                   // abort
 227+ 3271                          //  dw      EXIT                    // exit
 228+ 3271
 229+ 3271              //  ______________________________________________________________________
 230+ 3271              //
 231+ 3271              // cold         --
 232+ 3271                              Colon_Def COLD, "COLD", is_normal
 232+ 3271             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 3271             >
 232+ 3271             >Dict_Ptr        defl    $
 232+ 3271             >
 232+ 3271             >//              ______________________________________________________________________
 232+ 3271             >//              Heap part
 232+ 3271             >
 232+ 3271             >
 232+ 3271             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E96C             >
 232+ E96C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E96C             >Latest_Definition defl  Heap_Ptr
 232+ E96C             >
 232+ E96C             >                // dummy db directives used to calculate length of namec
 232+ E96C 43 4F 4C 44 >                db      "COLD"
 232+ E970             >len_NFA         defl    $ - temp_NFA
 232+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E96C             >
 232+ E96C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E96D 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E971             >                org     $-1                 // alter last byte of Name just above to set
 232+ E970 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E971             >
 232+ E971 63 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E973             >Prev_Ptr        defl    Heap_Ptr
 232+ E973             >
 232+ E973             >mirror_Ptr      defl    $
 232+ E973             >
 232+ E973 73 32       >                dw      Dict_Ptr + 2        // xt
 232+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E975             >
 232+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E975             >
 232+ E975             >//              ______________________________________________________________________
 232+ E975             >//              Dictionary part
 232+ E975             >
 232+ E975             >                org     Dict_Ptr
 232+ 3271             >
 232+ 3271 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 3273             >
 232+ 3273             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 3273 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 3276             >
 232+ 3276             >
 232+ 3276             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 3276             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 3276             >
 232+ 3276             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 3276 F1 26 F1 26                  dw      NOOP, NOOP
 234+ 327A 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 327E 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 3282 34 26                        dw      FETCH                   // @
 237+ 3284 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 3288 46 25
 238+ 328A 3D 20 16 00                  dw      LIT, 22                 // 22
 239+ 328E 35 24                        dw      CMOVE
 240+ 3290 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 3294 34 26                        dw      FETCH                   // @
 242+ 3296 3D 20 E7 31                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 329A 3E 26                        dw      STORE                   // !
 244+ 329C 2A 27 C5 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 32A0 3E 26
 245+ 32A2 B3 27 34 26                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 32A6 CA 25
 246+ 32A8 1F 28 3E 26                  dw      USED, STORE             // used !
 247+ 32AC 25 28 3E 26                  dw      PREV, STORE             // prev !
 248+ 32B0 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 32B4 31 28 3E 26
 249+ 32B8              //              dw      LIT, 8
 250+ 32B8              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 32B8 D9 36                        dw      EMPTY_BUFFERS
 252+ 32BA 2A 27 CB 27                  dw      ZERO, BLK, STORE
 252+ 32BE 3E 26
 253+ 32C0 2A 27 37 28                  dw      ZERO, SOURCE_ID, STORE
 253+ 32C4 3E 26
 254+ 32C6
 255+ 32C6 3D 20 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 255+ 32CA 39 22
 256+ 32CC 2A 27 39 22                  dw      ZERO, EMITC
 257+ 32D0
 258+ 32D0 6A 32        Warm_Start:     dw      WARM
 259+ 32D2 73 32        Cold_Start:     dw      COLD
 260+ 32D4              //              dw      EXIT
 261+ 32D4
 262+ 32D4
 263+ 32D4              //  ______________________________________________________________________
 264+ 32D4
 265+ 32D4              Tools_vForth_Directory
 266+ 32D4 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 266+ 32D8 6F 6F 6C 73
 266+ 32DC 2F 76 46 6F
 266+ 32E0 72 74 68 2F
 266+ 32E4 FF
 267+ 32E5 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 267+ 32E9 6F 74 2F 76
 267+ 32ED 66 6F 72 74
 267+ 32F1 68 2E 62 69
 267+ 32F5 6E 00
 268+ 32F7
 269+ 32F7              Saved_Speed:
 270+ 32F7 00                           db      0
 271+ 32F8 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 271+ 32FC 06 07
 272+ 32FE
 273+ 32FE              Saved_Layer:
 274+ 32FE 00                           db      0           // graphics current mode
 275+ 32FF
 276+ 32FF              //  ______________________________________________________________________
 277+ 32FF              WarmRoutine:
 278+ 32FF              ColdRoutine:
 279+ 32FF              //  ______________________________________________________________________
 280+ 32FF              // 0.
 281+ 32FF D1                           pop     de                      // retrieve return to basic address
 282+ 3300 ED 73 08 20                  ld      (SP_Basic), sp
 283+ 3304 31 00 40                     ld      sp, $4000               // safe area
 284+ 3307 D5                           push    de                      // save return to basic address
 285+ 3308 D9                           exx
 286+ 3309 E5                           push    hl                      // save Basic's h'l' return address
 287+ 330A D9                           exx
 288+ 330B
 289+ 330B              //  ______________________________________________________________________
 290+ 330B              // 1.
 291+ 330B              // Accepts one parameter from Basic as the filename to load
 292+ 330B 7C                           ld      a, h
 293+ 330C B5                           or      l
 294+ 330D 28 15                        jr      z, Skip_Parameter
 295+ 330F
 296+ 330F 11 53 39                     ld      de, Param
 297+ 3312 01 00 00                     ld      bc, 0
 298+ 3315              Parameter_Loop:
 299+ 3315 7E                           ld      a, (hl)
 300+ 3316 FE 3A                        cp      ':'
 301+ 3318 28 08                        jr      z, End_Parameter
 302+ 331A FE 0D                        cp      $0D
 303+ 331C 28 04                        jr      z, End_Parameter
 304+ 331E ED A0                        ldi
 305+ 3320 18 F3                        jr      Parameter_Loop
 306+ 3322              End_Parameter:
 307+ 3322                              // append 0x00
 308+ 3322 AF                           xor     a
 309+ 3323 12                           ld      (de), a
 310+ 3324                          //  ld      hl, 0
 311+ 3324                          //  sbc     hl, bc
 312+ 3324                          //  ld      a, l
 313+ 3324                          //  ld      (Len_Filename), a
 314+ 3324              Skip_Parameter:
 315+ 3324
 316+ 3324              //  ______________________________________________________________________
 317+ 3324              // 2. prepare save-area address and hw register port
 318+ 3324 21 F7 32                     ld      hl, Saved_Speed     // save-area
 319+ 3327              //              ld      bc, $243B               // hw-register port
 320+ 3327              //  ______________________________________________________________________
 321+ 3327              // 2.1
 322+ 3327              // ask / read speed and MMU status
 323+ 3327 3E 07                        ld      a ,$07                  // read current speed
 324+ 3329 CD E7 33                     call    Get_MMU_status
 325+ 332C 16 03                        ld      d, 3                    // set top speed
 326+ 332E B2                           or      d                       // reuse data just read
 327+ 332F ED 92 07                     nextreg 07, a
 328+ 3332
 329+ 3332 1E 06                        ld      e, 6                    // loop limit
 330+ 3334              MMU_read_loop:
 331+ 3334 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 332+ 3336 93                           sub     e
 333+ 3337 CD E7 33                     call    Get_MMU_status
 334+ 333A 1D                           dec     e
 335+ 333B 20 F7                        jr      nz, MMU_read_loop
 336+ 333D              //  ______________________________________________________________________
 337+ 333D              // 2.2
 338+ 333D              // save current LAYER status
 339+ 333D
 340+ 333D 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 341+ 3340 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 342+ 3342 3E 00                        ld      a, 0        // query current status
 343+ 3344 CF                           rst     8
 344+ 3345 94                           db      $94         // carry flag set on success
 345+ 3346
 346+ 3346 32 FE 32                     ld      (Saved_Layer), a     // store after MMUs
 347+ 3349              //  ______________________________________________________________________
 348+ 3349              // 2.3
 349+ 3349              // Reserve from OS twelve pages from $1D upward.
 350+ 3349 CD C2 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 351+ 334C
 352+ 334C              //  ______________________________________________________________________
 353+ 334C              // 2.4
 354+ 334C              // Backup MMU2 content to page $28
 355+ 334C 21 00 60                     ld      hl, $6000
 356+ 334F 11 00 40                     ld      de, $4000
 357+ 3352 CD A1 33                     call    Backup_Restore_MMU
 358+ 3355
 359+ 3355              //  ______________________________________________________________________
 360+ 3355              // 5.
 361+ 3355              // set LAYER 1,2
 362+ 3355 D9                           exx
 363+ 3356 01 02 01                     ld      bc, $0102
 364+ 3359 CD ED 33                     call    Set_Layer
 365+ 335C
 366+ 335C              //  ______________________________________________________________________
 367+ 335C              // 6.
 368+ 335C              // Set current drive/directory
 369+ 335C
 370+ 335C              //              ld      a, $00
 371+ 335C              //              rst     8
 372+ 335C              //              defb    $89     ; m_getsetdrv
 373+ 335C              //              rst     8
 374+ 335C              //              defb    $89     ; m_getsetdrv
 375+ 335C
 376+ 335C CD 87 33                     call    Set_Cur_Dir
 377+ 335F
 378+ 335F              //  ______________________________________________________________________
 379+ 335F              // 6.1
 380+ 335F              // Setup MMU for Forth system (set MMU3-MMU7 to $20-$1C)
 381+ 335F CD B1 33                     call    Set_forth_MMU
 382+ 3362
 383+ 3362              //  ______________________________________________________________________
 384+ 3362              // 7.
 385+ 3362              // Get current handle via M_GETHANDLE and load ram
 386+ 3362 CF                           rst     8
 387+ 3363 8D                           DEFB    $8d             ; M_GETHANDLE
 388+ 3364 F5                           push    af
 389+ 3365 21 00 E0                     ld      hl, $E000
 390+ 3368 01 FF 1F                     ld      bc, $1FFF
 391+ 336B CF                           rst     8
 392+ 336C 9D                           DEFB    $9D             ; f_read
 393+ 336D F1                           pop     af
 394+ 336E CF                           rst     8
 395+ 336F 9B                           DEFB    $9B             ; f_close
 396+ 3370
 397+ 3370              //  ______________________________________________________________________
 398+ 3370              // 8.
 399+ 3370              // pre-set the four main 16-bit registers
 400+ 3370 ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 401+ 3374 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 402+ 3378 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 403+ 337C 01 D2 32                     ld      bc, Cold_Start          // Instruction Pointer
 404+ 337F
 405+ 337F                              // never stop scrolling: print chr$26;chr$0
 406+ 337F 3E 1A                        ld      a, 26
 407+ 3381 D7                           rst     $10
 408+ 3382 AF                           xor     a
 409+ 3383 D7                           rst     $10
 410+ 3384
 411+ 3384 FB                           ei
 412+ 3385
 413+ 3385                          //  push    ix
 414+ 3385                          //  pop     hl
 415+ 3385                          //  rst     $20
 416+ 3385                              next
 416+ 3385 DD E9       >                jp      (ix)
 417+ 3387
 418+ 3387
 419+ 3387              //  ______________________________________________________________________
 420+ 3387              // Routine
 421+ 3387              // set current directory  /tools/vForth
 422+ 3387              Set_Cur_Dir:
 423+ 3387 21 D4 32                     ld      hl, Tools_vForth_Directory
 424+ 338A 11 00 40                     ld      de, $4000 // use some temporary safe zone
 425+ 338D 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 426+ 3390 ED B0                        ldir
 427+ 3392 D9                           exx
 428+ 3393 21 00 40                     ld      hl, $4000
 429+ 3396                          //  ld      hl, Tools_vForth_Directory
 430+ 3396 D9                           exx
 431+ 3397 11 B1 01                     ld      de, $01B1
 432+ 339A 0E 07                        ld      c, 7
 433+ 339C 3E 00                        ld      a, 0
 434+ 339E CF                           rst     8
 435+ 339F 94                           db      $94     // carry flag set on success !
 436+ 33A0
 437+ 33A0 C9                           ret
 438+ 33A1
 439+ 33A1              //  ______________________________________________________________________
 440+ 33A1              // Routine, safe backup
 441+ 33A1              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 442+ 33A1              Backup_Restore_MMU:
 443+ 33A1 ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $6000
 444+ 33A5 01 00 20                     ld      bc, $2000
 445+ 33A8 ED B0                        ldir
 446+ 33AA 3A F8 32                     ld      a, (Saved_MMU)
 447+ 33AD ED 92 52                     nextreg $52, a
 448+ 33B0 C9                           ret
 449+ 33B1
 450+ 33B1              //  ______________________________________________________________________
 451+ 33B1              // Routine
 452+ 33B1              // set MMU7 to $20 and laod ram7.bin
 453+ 33B1              Set_forth_MMU:
 454+ 33B1                      ////    nextreg $53, $28         ;   MMU3  = 24576
 455+ 33B1 ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 456+ 33B5 ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 457+ 33B9 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 458+ 33BD ED 91 57 20                  nextreg $57, $20         ;   MMU7
 459+ 33C1 C9                           ret
 460+ 33C2
 461+ 33C2              //  ______________________________________________________________________
 462+ 33C2              // Routine:
 463+ 33C2              // reserve MMU pages
 464+ 33C2              Restore_Reserve_MMU:
 465+ 33C2 2E 1D                        ld      l, $1D      // first page
 466+ 33C4 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 467+ 33C6              Reserve_MMU_Loop:
 468+ 33C6 7D                           ld      a, l            // pass page through a
 469+ 33C7 D9                           exx
 470+ 33C8                               // parameters:
 471+ 33C8              Deallocate_MMU:
 472+ 33C8 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 473+ 33CB 5F                            ld      e, a           // E' is bank-id
 474+ 33CC D9                           exx
 475+ 33CD E5                           push    hl
 476+ 33CE
 477+ 33CE 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 478+ 33D0 3E 01                        ld      a, 1
 479+ 33D2 11 BD 01                     ld      de, $01BD  // IDE_BANK
 480+ 33D5 CF                           rst     8
 481+ 33D6 94                           db      $94     // M_P3DOS
 482+ 33D7
 483+ 33D7 E1                           pop     hl
 484+ 33D8 2C                           inc     l       // next page number
 485+ 33D9 25                           dec     h       // decrease counter.
 486+ 33DA 20 EA                        jr      nz, Reserve_MMU_Loop
 487+ 33DC C9                           ret
 488+ 33DD
 489+ 33DD              //  ______________________________________________________________________
 490+ 33DD              // Routine
 491+ 33DD              // Input:  bc=$243B, a=reg, hl=array
 492+ 33DD              // Operation: set  hardware register  a  to value at  (hl)
 493+ 33DD              // Output: bc=$243B, a=a+1, hl=hl+1
 494+ 33DD              Put_MMU_status:
 495+ 33DD 56                           ld      d, (hl)
 496+ 33DE ED 79                        out     (c), a
 497+ 33E0 04                           inc     b        // 253Bh
 498+ 33E1 ED 51                        out     (c), d
 499+ 33E3 05                           dec     b        // 243Bh
 500+ 33E4 23                           inc     hl
 501+ 33E5 3C                           inc     a
 502+ 33E6 C9                           ret
 503+ 33E7
 504+ 33E7              //  ______________________________________________________________________
 505+ 33E7              // Routine
 506+ 33E7              // Input:  bc=$243B, a=reg, hl=array
 507+ 33E7              // Operation: get current value of hardware register  a  and store at (hl)
 508+ 33E7              // Output: bc=$243B, a=a+1, hl=hl+1
 509+ 33E7              Get_MMU_status:
 510+ 33E7              //              out     (c), a
 511+ 33E7              //              inc     b        // 253Bh
 512+ 33E7              //              in      d ,(c)
 513+ 33E7              //              dec     b        // 243Bh
 514+ 33E7 CD 38 21                     call    NEXTREG_read
 515+ 33EA 77                           ld      (hl), a
 516+ 33EB 23                           inc     hl
 517+ 33EC C9                           ret
 518+ 33ED
 519+ 33ED              //  ______________________________________________________________________
 520+ 33ED              // Routine
 521+ 33ED              // set LAYER B,C
 522+ 33ED              // Input: bc=$0102 for Layer 1,2
 523+ 33ED              Set_Layer:
 524+ 33ED D9                           exx
 525+ 33EE 11 D5 01                     ld      de, $01D5
 526+ 33F1 0E 07                        ld      c, 7
 527+ 33F3 3E 01                        ld      a, 1
 528+ 33F5 CF                           rst     8
 529+ 33F6 94                           db      $94
 530+ 33F7 C9                           ret
 531+ 33F8
 532+ 33F8              //  ______________________________________________________________________
 533+ 33F8              //
 534+ 33F8              // basic        --
 535+ 33F8                              New_Def BASIC, "BASIC", is_code, is_normal
 535+ 33F8             >
 535+ 33F8             >Dict_Ptr        defl    $
 535+ 33F8             >
 535+ 33F8             >//              ______________________________________________________________________
 535+ 33F8             >//              Heap part
 535+ 33F8             >
 535+ 33F8             >
 535+ 33F8             >                org     (Heap_Ptr & $1FFF) + $E000
 535+ E975             >
 535+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 535+ E975             >Latest_Definition defl  Heap_Ptr
 535+ E975             >
 535+ E975             >                // dummy db directives used to calculate length of namec
 535+ E975 42 41 53 49 >                db      "BASIC"
 535+ E979 43          >
 535+ E97A             >len_NFA         defl    $ - temp_NFA
 535+ E97A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 535+ E975             >
 535+ E975 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 535+ E976 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 535+ E97A 43          >
 535+ E97B             >                org     $-1                 // alter last byte of Name just above to set
 535+ E97A C3          >                db      {b $} | END_BIT     // msb as name end
 535+ E97B             >
 535+ E97B 6C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 535+ E97D             >Prev_Ptr        defl    Heap_Ptr
 535+ E97D             >
 535+ E97D             >mirror_Ptr      defl    $
 535+ E97D             >
 535+ E97D FA 33       >                dw      Dict_Ptr + 2        // xt
 535+ E97F             >Heap_Ptr        defl    $ - $E000           // save current HP
 535+ E97F             >
 535+ E97F             >Current_HP      defl  $ - $E000             // used to set HP once!
 535+ E97F             >
 535+ E97F             >//              ______________________________________________________________________
 535+ E97F             >//              Dictionary part
 535+ E97F             >
 535+ E97F             >                org     Dict_Ptr
 535+ 33F8             >
 535+ 33F8 7D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 535+ 33FA             >
 535+ 33FA             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 535+ 33FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 535+ 33FA ~           >
 535+ 33FA ~           >
 535+ 33FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 535+ 33FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 535+ 33FA             >
 535+ 33FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 536+ 33FA
 537+ 33FA              // using dot-command, no more needs to return bc
 538+ 33FA              //              pop     bc                      // return  TOS  value to Basic
 539+ 33FA
 540+ 33FA F3                           di
 541+ 33FB
 542+ 33FB 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 543+ 33FE
 544+ 33FE                              // address
 545+ 33FE 21 F7 32                     ld      hl, Saved_Speed
 546+ 3401 01 3B 24                     ld      bc , $243B
 547+ 3404
 548+ 3404                              // set speed
 549+ 3404 3E 07                        ld      a, $07
 550+ 3406 CD DD 33                     call    Put_MMU_status
 551+ 3409
 552+ 3409                        //    inc     hl
 553+ 3409                        //    inc     hl
 554+ 3409                              // set MMU pages
 555+ 3409 3E 52                        ld      a, $52
 556+ 340B 1E 06                        ld      e, 6
 557+ 340D              MMU_put_loop:
 558+ 340D CD DD 33                     call    Put_MMU_status
 559+ 3410 1D                           dec     e
 560+ 3411 20 FA                        jr      nz, MMU_put_loop
 561+ 3413              //  ______________________________________________________________________
 562+ 3413                              // restore layer ide mode
 563+ 3413 7E                           ld      a, (hl)
 564+ 3414
 565+ 3414 D9                           exx
 566+ 3415 47                           ld      b, a
 567+ 3416 0F                           rrca
 568+ 3417 0F                           rrca
 569+ 3418 E6 03                        and     3
 570+ 341A 4F                           ld      c, a
 571+ 341B 78                           ld      a, b
 572+ 341C E6 03                        and     3
 573+ 341E 47                           ld      b, a
 574+ 341F CD ED 33                     call    Set_Layer
 575+ 3422
 576+ 3422              //  ______________________________________________________________________
 577+ 3422              //
 578+ 3422 21 00 40                     ld      hl, $4000
 579+ 3425 11 00 60                     ld      de, $6000
 580+ 3428 CD A1 33                     call    Backup_Restore_MMU
 581+ 342B              //  ______________________________________________________________________
 582+ 342B              //
 583+ 342B                              // free 8k pages
 584+ 342B 3E 03                        ld      a, 3
 585+ 342D 32 C9 33                     ld      (Deallocate_MMU+1), a
 586+ 3430 CD C2 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 587+ 3433              //  ______________________________________________________________________
 588+ 3433
 589+ 3433                              // restore basic pointers
 590+ 3433 E1                           pop     hl                      // restore h'l'
 591+ 3434 D9                           exx
 592+ 3435 E1                           pop     hl
 593+ 3436 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 594+ 343A E5                           push    hl
 595+ 343B FB                           ei
 596+ 343C              Exit_with_error:
 597+ 343C AF                           xor     a
 598+ 343D 76                           halt
 599+ 343E C9                           ret                             // to where USR Basic was left
 600+ 343F
 601+ 343F              //  ______________________________________________________________________
 602+ 343F              //
 603+ 343F              // +-           n1 n2 -- n3
 604+ 343F              // leaves n1 with the sign of n2 as n3.
 605+ 343F                              Colon_Def PLUS_MINUS, "+-", is_normal
 605+ 343F             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 605+ 343F             >
 605+ 343F             >Dict_Ptr        defl    $
 605+ 343F             >
 605+ 343F             >//              ______________________________________________________________________
 605+ 343F             >//              Heap part
 605+ 343F             >
 605+ 343F             >
 605+ 343F             >                org     (Heap_Ptr & $1FFF) + $E000
 605+ E97F             >
 605+ E97F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 605+ E97F             >Latest_Definition defl  Heap_Ptr
 605+ E97F             >
 605+ E97F             >                // dummy db directives used to calculate length of namec
 605+ E97F 2B 2D       >                db      "+-"
 605+ E981             >len_NFA         defl    $ - temp_NFA
 605+ E981             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 605+ E97F             >
 605+ E97F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 605+ E980 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 605+ E982             >                org     $-1                 // alter last byte of Name just above to set
 605+ E981 AD          >                db      {b $} | END_BIT     // msb as name end
 605+ E982             >
 605+ E982 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 605+ E984             >Prev_Ptr        defl    Heap_Ptr
 605+ E984             >
 605+ E984             >mirror_Ptr      defl    $
 605+ E984             >
 605+ E984 41 34       >                dw      Dict_Ptr + 2        // xt
 605+ E986             >Heap_Ptr        defl    $ - $E000           // save current HP
 605+ E986             >
 605+ E986             >Current_HP      defl  $ - $E000             // used to set HP once!
 605+ E986             >
 605+ E986             >//              ______________________________________________________________________
 605+ E986             >//              Dictionary part
 605+ E986             >
 605+ E986             >                org     Dict_Ptr
 605+ 343F             >
 605+ 343F 84 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 605+ 3441             >
 605+ 3441             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 605+ 3441 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 605+ 3444             >
 605+ 3444             >
 605+ 3444             >                endif           ; ok        // for other definitions it "points" the correct handler
 605+ 3444             >                // Use of "; ok" to suppress "warning[fwdref]"
 605+ 3444             >
 605+ 3444             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 606+ 3444 2B 25                        dw      ZLESS                   // 0<
 607+ 3446                                                              // if
 608+ 3446 8F 20                        dw      ZBRANCH
 609+ 3448 04 00                        dw      Plus_Minus_Endif - $
 610+ 344A 86 25                        dw          MINUS               //      minus
 611+ 344C              Plus_Minus_Endif:                               // endif
 612+ 344C F4 24                        dw      EXIT                    // ;
 613+ 344E
 614+ 344E              //  ______________________________________________________________________
 615+ 344E              //
 616+ 344E              // d+-          d1 n -- d2
 617+ 344E              // leaves d1 with the sign of n as d2.
 618+ 344E                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 618+ 344E             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 618+ 344E             >
 618+ 344E             >Dict_Ptr        defl    $
 618+ 344E             >
 618+ 344E             >//              ______________________________________________________________________
 618+ 344E             >//              Heap part
 618+ 344E             >
 618+ 344E             >
 618+ 344E             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E986             >
 618+ E986             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E986             >Latest_Definition defl  Heap_Ptr
 618+ E986             >
 618+ E986             >                // dummy db directives used to calculate length of namec
 618+ E986 44 2B 2D    >                db      "D+-"
 618+ E989             >len_NFA         defl    $ - temp_NFA
 618+ E989             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E986             >
 618+ E986 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E987 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 618+ E98A             >                org     $-1                 // alter last byte of Name just above to set
 618+ E989 AD          >                db      {b $} | END_BIT     // msb as name end
 618+ E98A             >
 618+ E98A 7F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E98C             >Prev_Ptr        defl    Heap_Ptr
 618+ E98C             >
 618+ E98C             >mirror_Ptr      defl    $
 618+ E98C             >
 618+ E98C 50 34       >                dw      Dict_Ptr + 2        // xt
 618+ E98E             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E98E             >
 618+ E98E             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E98E             >
 618+ E98E             >//              ______________________________________________________________________
 618+ E98E             >//              Dictionary part
 618+ E98E             >
 618+ E98E             >                org     Dict_Ptr
 618+ 344E             >
 618+ 344E 8C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 3450             >
 618+ 3450             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 3450 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3453             >
 618+ 3453             >
 618+ 3453             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3453             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3453             >
 618+ 3453             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3453 2B 25                        dw      ZLESS                   // 0<
 620+ 3455                                                              // if
 621+ 3455 8F 20                        dw      ZBRANCH
 622+ 3457 04 00                        dw      DPlus_Minus_Endif - $
 623+ 3459 93 25                        dw          DMINUS              //      dminus
 624+ 345B              DPlus_Minus_Endif:                              // endif
 625+ 345B F4 24                        dw      EXIT                    // ;
 626+ 345D
 627+ 345D              //  ______________________________________________________________________
 628+ 345D              //
 629+ 345D              // abs          n1 -- n2
 630+ 345D                              Colon_Def ABS_OP, "ABS", is_normal
 630+ 345D             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 630+ 345D             >
 630+ 345D             >Dict_Ptr        defl    $
 630+ 345D             >
 630+ 345D             >//              ______________________________________________________________________
 630+ 345D             >//              Heap part
 630+ 345D             >
 630+ 345D             >
 630+ 345D             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ E98E             >
 630+ E98E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ E98E             >Latest_Definition defl  Heap_Ptr
 630+ E98E             >
 630+ E98E             >                // dummy db directives used to calculate length of namec
 630+ E98E 41 42 53    >                db      "ABS"
 630+ E991             >len_NFA         defl    $ - temp_NFA
 630+ E991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ E98E             >
 630+ E98E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ E98F 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 630+ E992             >                org     $-1                 // alter last byte of Name just above to set
 630+ E991 D3          >                db      {b $} | END_BIT     // msb as name end
 630+ E992             >
 630+ E992 86 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ E994             >Prev_Ptr        defl    Heap_Ptr
 630+ E994             >
 630+ E994             >mirror_Ptr      defl    $
 630+ E994             >
 630+ E994 5F 34       >                dw      Dict_Ptr + 2        // xt
 630+ E996             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ E996             >
 630+ E996             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ E996             >
 630+ E996             >//              ______________________________________________________________________
 630+ E996             >//              Dictionary part
 630+ E996             >
 630+ E996             >                org     Dict_Ptr
 630+ 345D             >
 630+ 345D 94 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 345F             >
 630+ 345F             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 345F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3462             >
 630+ 3462             >
 630+ 3462             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3462             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3462             >
 630+ 3462             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3462 CA 25                        dw      DUP                     // dup
 632+ 3464 41 34                        dw      PLUS_MINUS              // +-
 633+ 3466 F4 24                        dw      EXIT                    // ;
 634+ 3468
 635+ 3468              //  ______________________________________________________________________
 636+ 3468              //
 637+ 3468              // dabs         d1 -- d2
 638+ 3468                              Colon_Def DABS, "DABS", is_normal
 638+ 3468             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 638+ 3468             >
 638+ 3468             >Dict_Ptr        defl    $
 638+ 3468             >
 638+ 3468             >//              ______________________________________________________________________
 638+ 3468             >//              Heap part
 638+ 3468             >
 638+ 3468             >
 638+ 3468             >                org     (Heap_Ptr & $1FFF) + $E000
 638+ E996             >
 638+ E996             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ E996             >Latest_Definition defl  Heap_Ptr
 638+ E996             >
 638+ E996             >                // dummy db directives used to calculate length of namec
 638+ E996 44 41 42 53 >                db      "DABS"
 638+ E99A             >len_NFA         defl    $ - temp_NFA
 638+ E99A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ E996             >
 638+ E996 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ E997 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 638+ E99B             >                org     $-1                 // alter last byte of Name just above to set
 638+ E99A D3          >                db      {b $} | END_BIT     // msb as name end
 638+ E99B             >
 638+ E99B 8E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 638+ E99D             >Prev_Ptr        defl    Heap_Ptr
 638+ E99D             >
 638+ E99D             >mirror_Ptr      defl    $
 638+ E99D             >
 638+ E99D 6A 34       >                dw      Dict_Ptr + 2        // xt
 638+ E99F             >Heap_Ptr        defl    $ - $E000           // save current HP
 638+ E99F             >
 638+ E99F             >Current_HP      defl  $ - $E000             // used to set HP once!
 638+ E99F             >
 638+ E99F             >//              ______________________________________________________________________
 638+ E99F             >//              Dictionary part
 638+ E99F             >
 638+ E99F             >                org     Dict_Ptr
 638+ 3468             >
 638+ 3468 9D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 638+ 346A             >
 638+ 346A             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 346A CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 346D             >
 638+ 346D             >
 638+ 346D             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 346D             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 346D             >
 638+ 346D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 346D CA 25                        dw      DUP                     // dup
 640+ 346F 50 34                        dw      DPLUS_MINUS             // d+-
 641+ 3471 F4 24                        dw      EXIT                    // ;
 642+ 3473
 643+ 3473              //  ______________________________________________________________________
 644+ 3473              //
 645+ 3473              // m*           n1 n2 -- d
 646+ 3473              // multiply two integer giving a double
 647+ 3473                              Colon_Def MMUL, "M*", is_normal
 647+ 3473             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 647+ 3473             >
 647+ 3473             >Dict_Ptr        defl    $
 647+ 3473             >
 647+ 3473             >//              ______________________________________________________________________
 647+ 3473             >//              Heap part
 647+ 3473             >
 647+ 3473             >
 647+ 3473             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ E99F             >
 647+ E99F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ E99F             >Latest_Definition defl  Heap_Ptr
 647+ E99F             >
 647+ E99F             >                // dummy db directives used to calculate length of namec
 647+ E99F 4D 2A       >                db      "M*"
 647+ E9A1             >len_NFA         defl    $ - temp_NFA
 647+ E9A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ E99F             >
 647+ E99F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ E9A0 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 647+ E9A2             >                org     $-1                 // alter last byte of Name just above to set
 647+ E9A1 AA          >                db      {b $} | END_BIT     // msb as name end
 647+ E9A2             >
 647+ E9A2 96 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ E9A4             >Prev_Ptr        defl    Heap_Ptr
 647+ E9A4             >
 647+ E9A4             >mirror_Ptr      defl    $
 647+ E9A4             >
 647+ E9A4 75 34       >                dw      Dict_Ptr + 2        // xt
 647+ E9A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ E9A6             >
 647+ E9A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ E9A6             >
 647+ E9A6             >//              ______________________________________________________________________
 647+ E9A6             >//              Dictionary part
 647+ E9A6             >
 647+ E9A6             >                org     Dict_Ptr
 647+ 3473             >
 647+ 3473 A4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 3475             >
 647+ 3475             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 3475 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 3478             >
 647+ 3478             >
 647+ 3478             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 3478             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 3478             >
 647+ 3478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 3478 12 26 CF 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 648+ 347C FE 24
 649+ 347E 5F 34 C3 25                  dw      ABS_OP, SWAP            // abs swap
 650+ 3482 5F 34 59 24                  dw      ABS_OP, UM_MUL          // abs um*
 651+ 3486 09 25 50 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 652+ 348A F4 24                        dw      EXIT                    // ;
 653+ 348C
 654+ 348C              //  ______________________________________________________________________
 655+ 348C              //
 656+ 348C              // sm/rem       d n -- q r
 657+ 348C              // Symmetric division: divides a double into n giving quotient q and remainder r
 658+ 348C              // the remainder has the sign of d.
 659+ 348C                              Colon_Def SMDIVM, "SM/REM", is_normal
 659+ 348C             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 659+ 348C             >
 659+ 348C             >Dict_Ptr        defl    $
 659+ 348C             >
 659+ 348C             >//              ______________________________________________________________________
 659+ 348C             >//              Heap part
 659+ 348C             >
 659+ 348C             >
 659+ 348C             >                org     (Heap_Ptr & $1FFF) + $E000
 659+ E9A6             >
 659+ E9A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 659+ E9A6             >Latest_Definition defl  Heap_Ptr
 659+ E9A6             >
 659+ E9A6             >                // dummy db directives used to calculate length of namec
 659+ E9A6 53 4D 2F 52 >                db      "SM/REM"
 659+ E9AA 45 4D       >
 659+ E9AC             >len_NFA         defl    $ - temp_NFA
 659+ E9AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 659+ E9A6             >
 659+ E9A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 659+ E9A7 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 659+ E9AB 45 4D       >
 659+ E9AD             >                org     $-1                 // alter last byte of Name just above to set
 659+ E9AC CD          >                db      {b $} | END_BIT     // msb as name end
 659+ E9AD             >
 659+ E9AD 9F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 659+ E9AF             >Prev_Ptr        defl    Heap_Ptr
 659+ E9AF             >
 659+ E9AF             >mirror_Ptr      defl    $
 659+ E9AF             >
 659+ E9AF 8E 34       >                dw      Dict_Ptr + 2        // xt
 659+ E9B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 659+ E9B1             >
 659+ E9B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 659+ E9B1             >
 659+ E9B1             >//              ______________________________________________________________________
 659+ E9B1             >//              Dictionary part
 659+ E9B1             >
 659+ E9B1             >                org     Dict_Ptr
 659+ 348C             >
 659+ 348C AF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 659+ 348E             >
 659+ 348E             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 659+ 348E CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 659+ 3491             >
 659+ 3491             >
 659+ 3491             >                endif           ; ok        // for other definitions it "points" the correct handler
 659+ 3491             >                // Use of "; ok" to suppress "warning[fwdref]"
 659+ 3491             >
 659+ 3491             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 660+ 3491 A6 25 FE 24                  dw      OVER, TO_R, TO_R        // over >r >r
 660+ 3495 FE 24
 661+ 3497 6A 34 14 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 661+ 349B 5F 34
 662+ 349D 81 24                        dw      UMDIVMOD                // um/mod
 663+ 349F 09 25                        dw      R_TO                    // r>
 664+ 34A1 14 25 CF 24                  dw      R_OP, XOR_OP            // r xor
 665+ 34A5 41 34 C3 25                  dw      PLUS_MINUS, SWAP        // +- swap
 666+ 34A9 09 25                        dw      R_TO                    // r>
 667+ 34AB 41 34 C3 25                  dw      PLUS_MINUS, SWAP        // +- swap
 668+ 34AF F4 24                        dw      EXIT                    // ;
 669+ 34B1
 670+ 34B1              //  ______________________________________________________________________
 671+ 34B1              //
 672+ 34B1              // fm/mod       d n -- q r
 673+ 34B1              // Floored division: divides a double into n giving quotient q and remainder r
 674+ 34B1              // the remainder has the sign of d.
 675+ 34B1                              Colon_Def FMDIVM, "FM/MOD", is_normal
 675+ 34B1             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 675+ 34B1             >
 675+ 34B1             >Dict_Ptr        defl    $
 675+ 34B1             >
 675+ 34B1             >//              ______________________________________________________________________
 675+ 34B1             >//              Heap part
 675+ 34B1             >
 675+ 34B1             >
 675+ 34B1             >                org     (Heap_Ptr & $1FFF) + $E000
 675+ E9B1             >
 675+ E9B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 675+ E9B1             >Latest_Definition defl  Heap_Ptr
 675+ E9B1             >
 675+ E9B1             >                // dummy db directives used to calculate length of namec
 675+ E9B1 46 4D 2F 4D >                db      "FM/MOD"
 675+ E9B5 4F 44       >
 675+ E9B7             >len_NFA         defl    $ - temp_NFA
 675+ E9B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 675+ E9B1             >
 675+ E9B1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 675+ E9B2 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 675+ E9B6 4F 44       >
 675+ E9B8             >                org     $-1                 // alter last byte of Name just above to set
 675+ E9B7 C4          >                db      {b $} | END_BIT     // msb as name end
 675+ E9B8             >
 675+ E9B8 A6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 675+ E9BA             >Prev_Ptr        defl    Heap_Ptr
 675+ E9BA             >
 675+ E9BA             >mirror_Ptr      defl    $
 675+ E9BA             >
 675+ E9BA B3 34       >                dw      Dict_Ptr + 2        // xt
 675+ E9BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 675+ E9BC             >
 675+ E9BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 675+ E9BC             >
 675+ E9BC             >//              ______________________________________________________________________
 675+ E9BC             >//              Dictionary part
 675+ E9BC             >
 675+ E9BC             >                org     Dict_Ptr
 675+ 34B1             >
 675+ 34B1 BA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 675+ 34B3             >
 675+ 34B3             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 675+ 34B3 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 675+ 34B6             >
 675+ 34B6             >
 675+ 34B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 675+ 34B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 675+ 34B6             >
 675+ 34B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 676+ 34B6 CA 25 FE 24                  dw      DUP, TO_R               // dup >r
 677+ 34BA 8E 34                        dw      SMDIVM
 678+ 34BC A6 25 CA 25                  dw      OVER, DUP
 679+ 34C0 19 25 19 25                  dw      ZEQUAL, ZEQUAL
 680+ 34C4 C3 25 2B 25                  dw      SWAP, ZLESS
 681+ 34C8 14 25 2B 25                  dw      R_OP, ZLESS
 682+ 34CC CF 24 B4 24                  dw      XOR_OP, AND_OP
 683+ 34D0 8F 20                        dw      ZBRANCH
 684+ 34D2 10 00                        dw      Fm_Mod_Else - $
 685+ 34D4 66 25                        dw          ONE_SUBTRACT
 686+ 34D6 C3 25 09 25                  dw          SWAP, R_TO
 687+ 34DA 46 25 C3 25                  dw          PLUS, SWAP
 688+ 34DE 82 20                        dw      BRANCH
 689+ 34E0 06 00                        dw      Fm_Mod_Endif - $
 690+ 34E2              Fm_Mod_Else:
 691+ 34E2 09 25 AF 25                  dw          R_TO, DROP
 692+ 34E6              Fm_Mod_Endif:
 693+ 34E6 F4 24                        dw      EXIT
 694+ 34E8              //              dw      TWO_DUP                 // 2dup
 695+ 34E8              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 696+ 34E8              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 697+ 34E8              //              dw      UMDIVMOD                // um/mod
 698+ 34E8              //              dw      SWAP                    // swap
 699+ 34E8              //              dw      II, ZLESS               // i'
 700+ 34E8              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 701+ 34E8              //              dw      R_TO                    // r>
 702+ 34E8              //              dw      PLUS_MINUS, SWAP        // +- swap
 703+ 34E8              //              dw      R_OP                    // r@
 704+ 34E8              //              dw      ZLESS                   // i'
 705+ 34E8              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 706+ 34E8              //              dw      R_TO                    // r>
 707+ 34E8              //              dw      PLUS_MINUS              // +- swap
 708+ 34E8              //              dw      EXIT                    // ;
 709+ 34E8
 710+ 34E8              //  ______________________________________________________________________
 711+ 34E8              //
 712+ 34E8              // m/mod        d n -- q r
 713+ 34E8              // multiply two integer giving a double
 714+ 34E8                              Colon_Def MDIVM, "M/MOD", is_normal
 714+ 34E8             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 714+ 34E8             >
 714+ 34E8             >Dict_Ptr        defl    $
 714+ 34E8             >
 714+ 34E8             >//              ______________________________________________________________________
 714+ 34E8             >//              Heap part
 714+ 34E8             >
 714+ 34E8             >
 714+ 34E8             >                org     (Heap_Ptr & $1FFF) + $E000
 714+ E9BC             >
 714+ E9BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 714+ E9BC             >Latest_Definition defl  Heap_Ptr
 714+ E9BC             >
 714+ E9BC             >                // dummy db directives used to calculate length of namec
 714+ E9BC 4D 2F 4D 4F >                db      "M/MOD"
 714+ E9C0 44          >
 714+ E9C1             >len_NFA         defl    $ - temp_NFA
 714+ E9C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 714+ E9BC             >
 714+ E9BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 714+ E9BD 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 714+ E9C1 44          >
 714+ E9C2             >                org     $-1                 // alter last byte of Name just above to set
 714+ E9C1 C4          >                db      {b $} | END_BIT     // msb as name end
 714+ E9C2             >
 714+ E9C2 B1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 714+ E9C4             >Prev_Ptr        defl    Heap_Ptr
 714+ E9C4             >
 714+ E9C4             >mirror_Ptr      defl    $
 714+ E9C4             >
 714+ E9C4 EA 34       >                dw      Dict_Ptr + 2        // xt
 714+ E9C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 714+ E9C6             >
 714+ E9C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 714+ E9C6             >
 714+ E9C6             >//              ______________________________________________________________________
 714+ E9C6             >//              Dictionary part
 714+ E9C6             >
 714+ E9C6             >                org     Dict_Ptr
 714+ 34E8             >
 714+ 34E8 C4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 714+ 34EA             >
 714+ 34EA             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 714+ 34EA CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 714+ 34ED             >
 714+ 34ED             >
 714+ 34ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 714+ 34ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 714+ 34ED             >
 714+ 34ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 715+ 34ED 8E 34                        dw      SMDIVM
 716+ 34EF F4 24                        dw      EXIT                    // ;
 717+ 34F1
 718+ 34F1              //  ______________________________________________________________________
 719+ 34F1              //
 720+ 34F1              // m/           d n -- q
 721+ 34F1              // multiply two integer giving a double
 722+ 34F1                              Colon_Def MDIV, "M/", is_normal
 722+ 34F1             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 722+ 34F1             >
 722+ 34F1             >Dict_Ptr        defl    $
 722+ 34F1             >
 722+ 34F1             >//              ______________________________________________________________________
 722+ 34F1             >//              Heap part
 722+ 34F1             >
 722+ 34F1             >
 722+ 34F1             >                org     (Heap_Ptr & $1FFF) + $E000
 722+ E9C6             >
 722+ E9C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 722+ E9C6             >Latest_Definition defl  Heap_Ptr
 722+ E9C6             >
 722+ E9C6             >                // dummy db directives used to calculate length of namec
 722+ E9C6 4D 2F       >                db      "M/"
 722+ E9C8             >len_NFA         defl    $ - temp_NFA
 722+ E9C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 722+ E9C6             >
 722+ E9C6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 722+ E9C7 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 722+ E9C9             >                org     $-1                 // alter last byte of Name just above to set
 722+ E9C8 AF          >                db      {b $} | END_BIT     // msb as name end
 722+ E9C9             >
 722+ E9C9 BC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 722+ E9CB             >Prev_Ptr        defl    Heap_Ptr
 722+ E9CB             >
 722+ E9CB             >mirror_Ptr      defl    $
 722+ E9CB             >
 722+ E9CB F3 34       >                dw      Dict_Ptr + 2        // xt
 722+ E9CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 722+ E9CD             >
 722+ E9CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 722+ E9CD             >
 722+ E9CD             >//              ______________________________________________________________________
 722+ E9CD             >//              Dictionary part
 722+ E9CD             >
 722+ E9CD             >                org     Dict_Ptr
 722+ 34F1             >
 722+ 34F1 CB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 722+ 34F3             >
 722+ 34F3             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 722+ 34F3 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 722+ 34F6             >
 722+ 34F6             >
 722+ 34F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 722+ 34F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 722+ 34F6             >
 722+ 34F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 723+ 34F6 EA 34 B4 25                  dw      MDIVM, NIP
 724+ 34FA F4 24                        dw      EXIT                    // ;
 725+ 34FC
 726+ 34FC              //  ______________________________________________________________________
 727+ 34FC              //
 728+ 34FC              // *            n1 n2 -- n3
 729+ 34FC              // multiply two integer
 730+ 34FC                              Colon_Def MUL, "*", is_normal
 730+ 34FC             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 730+ 34FC             >
 730+ 34FC             >Dict_Ptr        defl    $
 730+ 34FC             >
 730+ 34FC             >//              ______________________________________________________________________
 730+ 34FC             >//              Heap part
 730+ 34FC             >
 730+ 34FC             >
 730+ 34FC             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ E9CD             >
 730+ E9CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ E9CD             >Latest_Definition defl  Heap_Ptr
 730+ E9CD             >
 730+ E9CD             >                // dummy db directives used to calculate length of namec
 730+ E9CD 2A          >                db      "*"
 730+ E9CE             >len_NFA         defl    $ - temp_NFA
 730+ E9CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ E9CD             >
 730+ E9CD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ E9CE 2A          >                db      "*"               // name string in 7-bit ascii, but
 730+ E9CF             >                org     $-1                 // alter last byte of Name just above to set
 730+ E9CE AA          >                db      {b $} | END_BIT     // msb as name end
 730+ E9CF             >
 730+ E9CF C6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ E9D1             >Prev_Ptr        defl    Heap_Ptr
 730+ E9D1             >
 730+ E9D1             >mirror_Ptr      defl    $
 730+ E9D1             >
 730+ E9D1 FE 34       >                dw      Dict_Ptr + 2        // xt
 730+ E9D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ E9D3             >
 730+ E9D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ E9D3             >
 730+ E9D3             >//              ______________________________________________________________________
 730+ E9D3             >//              Dictionary part
 730+ E9D3             >
 730+ E9D3             >                org     Dict_Ptr
 730+ 34FC             >
 730+ 34FC D1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 34FE             >
 730+ 34FE             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 34FE CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 3501             >
 730+ 3501             >
 730+ 3501             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 3501             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 3501             >
 730+ 3501             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 3501 75 34 AF 25                  dw      MMUL, DROP              // m* drop
 732+ 3505 F4 24                        dw      EXIT                    // ;
 733+ 3507
 734+ 3507              //  ______________________________________________________________________
 735+ 3507              //
 736+ 3507              // /mod         n1 n2 -- n3 n4
 737+ 3507              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 738+ 3507              // The remainder has the sign of n1
 739+ 3507                              Colon_Def DIVMOD, "/MOD", is_normal
 739+ 3507             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 739+ 3507             >
 739+ 3507             >Dict_Ptr        defl    $
 739+ 3507             >
 739+ 3507             >//              ______________________________________________________________________
 739+ 3507             >//              Heap part
 739+ 3507             >
 739+ 3507             >
 739+ 3507             >                org     (Heap_Ptr & $1FFF) + $E000
 739+ E9D3             >
 739+ E9D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ E9D3             >Latest_Definition defl  Heap_Ptr
 739+ E9D3             >
 739+ E9D3             >                // dummy db directives used to calculate length of namec
 739+ E9D3 2F 4D 4F 44 >                db      "/MOD"
 739+ E9D7             >len_NFA         defl    $ - temp_NFA
 739+ E9D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ E9D3             >
 739+ E9D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ E9D4 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 739+ E9D8             >                org     $-1                 // alter last byte of Name just above to set
 739+ E9D7 C4          >                db      {b $} | END_BIT     // msb as name end
 739+ E9D8             >
 739+ E9D8 CD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 739+ E9DA             >Prev_Ptr        defl    Heap_Ptr
 739+ E9DA             >
 739+ E9DA             >mirror_Ptr      defl    $
 739+ E9DA             >
 739+ E9DA 09 35       >                dw      Dict_Ptr + 2        // xt
 739+ E9DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 739+ E9DC             >
 739+ E9DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 739+ E9DC             >
 739+ E9DC             >//              ______________________________________________________________________
 739+ E9DC             >//              Dictionary part
 739+ E9DC             >
 739+ E9DC             >                org     Dict_Ptr
 739+ 3507             >
 739+ 3507 DA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 739+ 3509             >
 739+ 3509             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 3509 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 739+ 350C             >
 739+ 350C             >
 739+ 350C             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 350C             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 350C             >
 739+ 350C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 350C FE 24 83 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 740+ 3510 09 25
 741+ 3512 EA 34                        dw      MDIVM                   // m/mod
 742+ 3514 F4 24                        dw      EXIT                    // ;
 743+ 3516
 744+ 3516              //  ______________________________________________________________________
 745+ 3516              //
 746+ 3516              // /            n1 n2 -- n3
 747+ 3516              // division
 748+ 3516                              Colon_Def DIV, "/", is_normal
 748+ 3516             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 748+ 3516             >
 748+ 3516             >Dict_Ptr        defl    $
 748+ 3516             >
 748+ 3516             >//              ______________________________________________________________________
 748+ 3516             >//              Heap part
 748+ 3516             >
 748+ 3516             >
 748+ 3516             >                org     (Heap_Ptr & $1FFF) + $E000
 748+ E9DC             >
 748+ E9DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 748+ E9DC             >Latest_Definition defl  Heap_Ptr
 748+ E9DC             >
 748+ E9DC             >                // dummy db directives used to calculate length of namec
 748+ E9DC 2F          >                db      "/"
 748+ E9DD             >len_NFA         defl    $ - temp_NFA
 748+ E9DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 748+ E9DC             >
 748+ E9DC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 748+ E9DD 2F          >                db      "/"               // name string in 7-bit ascii, but
 748+ E9DE             >                org     $-1                 // alter last byte of Name just above to set
 748+ E9DD AF          >                db      {b $} | END_BIT     // msb as name end
 748+ E9DE             >
 748+ E9DE D3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 748+ E9E0             >Prev_Ptr        defl    Heap_Ptr
 748+ E9E0             >
 748+ E9E0             >mirror_Ptr      defl    $
 748+ E9E0             >
 748+ E9E0 18 35       >                dw      Dict_Ptr + 2        // xt
 748+ E9E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 748+ E9E2             >
 748+ E9E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 748+ E9E2             >
 748+ E9E2             >//              ______________________________________________________________________
 748+ E9E2             >//              Dictionary part
 748+ E9E2             >
 748+ E9E2             >                org     Dict_Ptr
 748+ 3516             >
 748+ 3516 E0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 748+ 3518             >
 748+ 3518             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 748+ 3518 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 748+ 351B             >
 748+ 351B             >
 748+ 351B             >                endif           ; ok        // for other definitions it "points" the correct handler
 748+ 351B             >                // Use of "; ok" to suppress "warning[fwdref]"
 748+ 351B             >
 748+ 351B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 749+ 351B 09 35 B4 25                  dw      DIVMOD, NIP             // /mod nip
 750+ 351F F4 24                        dw      EXIT                    // ;
 751+ 3521
 752+ 3521              //  ______________________________________________________________________
 753+ 3521              //
 754+ 3521              // mod          n1 n2 -- n3
 755+ 3521                              Colon_Def MOD, "MOD", is_normal
 755+ 3521             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 755+ 3521             >
 755+ 3521             >Dict_Ptr        defl    $
 755+ 3521             >
 755+ 3521             >//              ______________________________________________________________________
 755+ 3521             >//              Heap part
 755+ 3521             >
 755+ 3521             >
 755+ 3521             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E9E2             >
 755+ E9E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E9E2             >Latest_Definition defl  Heap_Ptr
 755+ E9E2             >
 755+ E9E2             >                // dummy db directives used to calculate length of namec
 755+ E9E2 4D 4F 44    >                db      "MOD"
 755+ E9E5             >len_NFA         defl    $ - temp_NFA
 755+ E9E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E9E2             >
 755+ E9E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E9E3 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 755+ E9E6             >                org     $-1                 // alter last byte of Name just above to set
 755+ E9E5 C4          >                db      {b $} | END_BIT     // msb as name end
 755+ E9E6             >
 755+ E9E6 DC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E9E8             >Prev_Ptr        defl    Heap_Ptr
 755+ E9E8             >
 755+ E9E8             >mirror_Ptr      defl    $
 755+ E9E8             >
 755+ E9E8 23 35       >                dw      Dict_Ptr + 2        // xt
 755+ E9EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E9EA             >
 755+ E9EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E9EA             >
 755+ E9EA             >//              ______________________________________________________________________
 755+ E9EA             >//              Dictionary part
 755+ E9EA             >
 755+ E9EA             >                org     Dict_Ptr
 755+ 3521             >
 755+ 3521 E8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 3523             >
 755+ 3523             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 3523 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 3526             >
 755+ 3526             >
 755+ 3526             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 3526             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 3526             >
 755+ 3526             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 3526 09 35 AF 25                  dw      DIVMOD, DROP            // /mod drop
 757+ 352A F4 24                        dw      EXIT                    // ;
 758+ 352C
 759+ 352C              //  ______________________________________________________________________
 760+ 352C              //
 761+ 352C              // */mod        n1 n2 n3 -- n4 n5
 762+ 352C              // leaves the quotient n5 and the remainder n4 of the operation
 763+ 352C              // (n1 * n2) / n3. The intermediate passage through a double number
 764+ 352C              // avoids loss of precision
 765+ 352C                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 765+ 352C             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 765+ 352C             >
 765+ 352C             >Dict_Ptr        defl    $
 765+ 352C             >
 765+ 352C             >//              ______________________________________________________________________
 765+ 352C             >//              Heap part
 765+ 352C             >
 765+ 352C             >
 765+ 352C             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E9EA             >
 765+ E9EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E9EA             >Latest_Definition defl  Heap_Ptr
 765+ E9EA             >
 765+ E9EA             >                // dummy db directives used to calculate length of namec
 765+ E9EA 2A 2F 4D 4F >                db      "*/MOD"
 765+ E9EE 44          >
 765+ E9EF             >len_NFA         defl    $ - temp_NFA
 765+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E9EA             >
 765+ E9EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E9EB 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 765+ E9EF 44          >
 765+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 765+ E9EF C4          >                db      {b $} | END_BIT     // msb as name end
 765+ E9F0             >
 765+ E9F0 E2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 765+ E9F2             >
 765+ E9F2             >mirror_Ptr      defl    $
 765+ E9F2             >
 765+ E9F2 2E 35       >                dw      Dict_Ptr + 2        // xt
 765+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E9F4             >
 765+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E9F4             >
 765+ E9F4             >//              ______________________________________________________________________
 765+ E9F4             >//              Dictionary part
 765+ E9F4             >
 765+ E9F4             >                org     Dict_Ptr
 765+ 352C             >
 765+ 352C F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 352E             >
 765+ 352E             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 352E CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 3531             >
 765+ 3531             >
 765+ 3531             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 3531             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 3531             >
 765+ 3531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 3531 FE 24 75 34                  dw      TO_R, MMUL              // >r  m*
 767+ 3535 09 25 EA 34                  dw      R_TO, MDIVM             // r>  m/mod
 768+ 3539 F4 24                        dw      EXIT                    // ;
 769+ 353B
 770+ 353B              //  ______________________________________________________________________
 771+ 353B              //
 772+ 353B              // */          n1 n2 n3 -- n4
 773+ 353B              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 774+ 353B                              Colon_Def MUL_DIV, "*/", is_normal
 774+ 353B             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 774+ 353B             >
 774+ 353B             >Dict_Ptr        defl    $
 774+ 353B             >
 774+ 353B             >//              ______________________________________________________________________
 774+ 353B             >//              Heap part
 774+ 353B             >
 774+ 353B             >
 774+ 353B             >                org     (Heap_Ptr & $1FFF) + $E000
 774+ E9F4             >
 774+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ E9F4             >Latest_Definition defl  Heap_Ptr
 774+ E9F4             >
 774+ E9F4             >                // dummy db directives used to calculate length of namec
 774+ E9F4 2A 2F       >                db      "*/"
 774+ E9F6             >len_NFA         defl    $ - temp_NFA
 774+ E9F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ E9F4             >
 774+ E9F4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ E9F5 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 774+ E9F7             >                org     $-1                 // alter last byte of Name just above to set
 774+ E9F6 AF          >                db      {b $} | END_BIT     // msb as name end
 774+ E9F7             >
 774+ E9F7 EA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 774+ E9F9             >Prev_Ptr        defl    Heap_Ptr
 774+ E9F9             >
 774+ E9F9             >mirror_Ptr      defl    $
 774+ E9F9             >
 774+ E9F9 3D 35       >                dw      Dict_Ptr + 2        // xt
 774+ E9FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 774+ E9FB             >
 774+ E9FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 774+ E9FB             >
 774+ E9FB             >//              ______________________________________________________________________
 774+ E9FB             >//              Dictionary part
 774+ E9FB             >
 774+ E9FB             >                org     Dict_Ptr
 774+ 353B             >
 774+ 353B F9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 774+ 353D             >
 774+ 353D             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 353D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 3540             >
 774+ 3540             >
 774+ 3540             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 3540             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 3540             >
 774+ 3540             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 3540 2E 35                        dw     MUL_DIV_MOD              // */mod
 776+ 3542 B4 25                        dw     NIP                      // nip
 777+ 3544 F4 24                        dw     EXIT                     // ;
 778+ 3546
 779+ 3546
 780+ 3546              //  ______________________________________________________________________
 781+ 3546              //
 782+ 3546              // m/mod        ud1 u2 -- u3 ud4
 783+ 3546              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 784+ 3546              // All terms are unsigned.
 785+ 3546              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 786+ 3546              //              dw      TO_R                    // >r           ( ud1 )
 787+ 3546              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 788+ 3546              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 789+ 3546              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 790+ 3546              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 791+ 3546              //              dw      EXIT                    // ;
 792+ 3546
 793+ 3546              //  ______________________________________________________________________
 794+ 3546              //
 795+ 3546              // (line)       n1 n2 -- a b
 796+ 3546              // sends the line n1 of block n2 to the disk buffer.
 797+ 3546              // it returns the address a and ca counter b = C/L meaning a whole line.
 798+ 3546                              Colon_Def CLINE, "(LINE)", is_normal
 798+ 3546             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 798+ 3546             >
 798+ 3546             >Dict_Ptr        defl    $
 798+ 3546             >
 798+ 3546             >//              ______________________________________________________________________
 798+ 3546             >//              Heap part
 798+ 3546             >
 798+ 3546             >
 798+ 3546             >                org     (Heap_Ptr & $1FFF) + $E000
 798+ E9FB             >
 798+ E9FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 798+ E9FB             >Latest_Definition defl  Heap_Ptr
 798+ E9FB             >
 798+ E9FB             >                // dummy db directives used to calculate length of namec
 798+ E9FB 28 4C 49 4E >                db      "(LINE)"
 798+ E9FF 45 29       >
 798+ EA01             >len_NFA         defl    $ - temp_NFA
 798+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 798+ E9FB             >
 798+ E9FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 798+ E9FC 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 798+ EA00 45 29       >
 798+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 798+ EA01 A9          >                db      {b $} | END_BIT     // msb as name end
 798+ EA02             >
 798+ EA02 F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 798+ EA04             >Prev_Ptr        defl    Heap_Ptr
 798+ EA04             >
 798+ EA04             >mirror_Ptr      defl    $
 798+ EA04             >
 798+ EA04 48 35       >                dw      Dict_Ptr + 2        // xt
 798+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 798+ EA06             >
 798+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 798+ EA06             >
 798+ EA06             >//              ______________________________________________________________________
 798+ EA06             >//              Dictionary part
 798+ EA06             >
 798+ EA06             >                org     Dict_Ptr
 798+ 3546             >
 798+ 3546 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 798+ 3548             >
 798+ 3548             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 798+ 3548 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 798+ 354B             >
 798+ 354B             >
 798+ 354B             >                endif           ; ok        // for other definitions it "points" the correct handler
 798+ 354B             >                // Use of "; ok" to suppress "warning[fwdref]"
 798+ 354B             >
 798+ 354B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 799+ 354B FE 24                        dw      TO_R                    // >r
 800+ 354D 54 27                        dw      CL                      // c/l
 801+ 354F 5B 27 2E 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 802+ 3553 09 25                        dw      R_TO                    // r>
 803+ 3555 62 27 FE 34                  dw      BSCR, MUL, PLUS         // b/scr * +
 803+ 3559 46 25
 804+ 355B 31 37                        dw      BLOCK                   // block   ( forward )
 805+ 355D 46 25                        dw      PLUS                    // +
 806+ 355F 54 27                        dw      CL                      // c/l
 807+ 3561 F4 24                        dw      EXIT                    // ;
 808+ 3563
 809+ 3563              //  ______________________________________________________________________
 810+ 3563              //
 811+ 3563              // .line        n1 n2 --
 812+ 3563              // Sends to output line  n1  of screen n2.
 813+ 3563                              Colon_Def DOT_LINE, ".LINE", is_normal
 813+ 3563             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 813+ 3563             >
 813+ 3563             >Dict_Ptr        defl    $
 813+ 3563             >
 813+ 3563             >//              ______________________________________________________________________
 813+ 3563             >//              Heap part
 813+ 3563             >
 813+ 3563             >
 813+ 3563             >                org     (Heap_Ptr & $1FFF) + $E000
 813+ EA06             >
 813+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ EA06             >Latest_Definition defl  Heap_Ptr
 813+ EA06             >
 813+ EA06             >                // dummy db directives used to calculate length of namec
 813+ EA06 2E 4C 49 4E >                db      ".LINE"
 813+ EA0A 45          >
 813+ EA0B             >len_NFA         defl    $ - temp_NFA
 813+ EA0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ EA06             >
 813+ EA06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ EA07 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 813+ EA0B 45          >
 813+ EA0C             >                org     $-1                 // alter last byte of Name just above to set
 813+ EA0B C5          >                db      {b $} | END_BIT     // msb as name end
 813+ EA0C             >
 813+ EA0C FB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 813+ EA0E             >Prev_Ptr        defl    Heap_Ptr
 813+ EA0E             >
 813+ EA0E             >mirror_Ptr      defl    $
 813+ EA0E             >
 813+ EA0E 65 35       >                dw      Dict_Ptr + 2        // xt
 813+ EA10             >Heap_Ptr        defl    $ - $E000           // save current HP
 813+ EA10             >
 813+ EA10             >Current_HP      defl  $ - $E000             // used to set HP once!
 813+ EA10             >
 813+ EA10             >//              ______________________________________________________________________
 813+ EA10             >//              Dictionary part
 813+ EA10             >
 813+ EA10             >                org     Dict_Ptr
 813+ 3563             >
 813+ 3563 0E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 813+ 3565             >
 813+ 3565             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 3565 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 3568             >
 813+ 3568             >
 813+ 3568             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 3568             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 3568             >
 813+ 3568             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 3568 48 35 28 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 814+ 356C 11 2C
 815+ 356E F4 24                        dw      EXIT                    // ;
 816+ 3570
 817+ 3570              //  ______________________________________________________________________
 818+ 3570              //
 819+ 3570              // message       n1 n2 --
 820+ 3570              // prints error message to current channel.
 821+ 3570              // if WARNING is 0, prints "MSG#n".
 822+ 3570              // if WARNING is 1, prints line n of screen 4.
 823+ 3570              // if WARNING is -1, see ERROR
 824+ 3570              // value can be negative or beyond block 4.
 825+ 3570                              Colon_Def MESSAGE, "MESSAGE", is_normal
 825+ 3570             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 825+ 3570             >
 825+ 3570             >Dict_Ptr        defl    $
 825+ 3570             >
 825+ 3570             >//              ______________________________________________________________________
 825+ 3570             >//              Heap part
 825+ 3570             >
 825+ 3570             >
 825+ 3570             >                org     (Heap_Ptr & $1FFF) + $E000
 825+ EA10             >
 825+ EA10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ EA10             >Latest_Definition defl  Heap_Ptr
 825+ EA10             >
 825+ EA10             >                // dummy db directives used to calculate length of namec
 825+ EA10 4D 45 53 53 >                db      "MESSAGE"
 825+ EA14 41 47 45    >
 825+ EA17             >len_NFA         defl    $ - temp_NFA
 825+ EA17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ EA10             >
 825+ EA10 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ EA11 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 825+ EA15 41 47 45    >
 825+ EA18             >                org     $-1                 // alter last byte of Name just above to set
 825+ EA17 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ EA18             >
 825+ EA18 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 825+ EA1A             >Prev_Ptr        defl    Heap_Ptr
 825+ EA1A             >
 825+ EA1A             >mirror_Ptr      defl    $
 825+ EA1A             >
 825+ EA1A 72 35       >                dw      Dict_Ptr + 2        // xt
 825+ EA1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 825+ EA1C             >
 825+ EA1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 825+ EA1C             >
 825+ EA1C             >//              ______________________________________________________________________
 825+ EA1C             >//              Dictionary part
 825+ EA1C             >
 825+ EA1C             >                org     Dict_Ptr
 825+ 3570             >
 825+ 3570 1A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 825+ 3572             >
 825+ 3572             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 3572 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 3575             >
 825+ 3575             >
 825+ 3575             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 3575             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 3575             >
 825+ 3575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 3575 9B 27 34 26                  dw      WARNING, FETCH          // warning @
 827+ 3579                                                              // if
 828+ 3579 8F 20                        dw      ZBRANCH
 829+ 357B 12 00                        dw      Message_Else - $
 830+ 357D 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 830+ 3581 46 25
 831+ 3583 38 27                        dw          TWO                 //      2
 832+ 3585 65 35                        dw          DOT_LINE            //      .line
 833+ 3587 18 29                        dw          SPACE               //      space
 834+ 3589                                                              // else
 835+ 3589
 836+ 3589 82 20                        dw      BRANCH
 837+ 358B 0B 00                        dw      Message_ENdif - $
 838+ 358D              Message_Else:
 839+ 358D AE 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 840+ 358F 04 6D 73 67                  db          4, "msg#"
 840+ 3593 23
 841+ 3594 7C 3C                        dw          DOT                 //      .  ( forward )
 842+ 3596              Message_ENdif:                                  // endif
 843+ 3596 F4 24                        dw      EXIT                    // ;
 844+ 3598
 845+ 3598
 846+ 3598              //  ______________________________________________________________________
 847+ 3598              //
 848+ 3598              // device
 849+ 3598                              Variable_Def DEVICE,   "DEVICE",   2
 849+ 3598             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 849+ 3598             >
 849+ 3598             >Dict_Ptr        defl    $
 849+ 3598             >
 849+ 3598             >//              ______________________________________________________________________
 849+ 3598             >//              Heap part
 849+ 3598             >
 849+ 3598             >
 849+ 3598             >                org     (Heap_Ptr & $1FFF) + $E000
 849+ EA1C             >
 849+ EA1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 849+ EA1C             >Latest_Definition defl  Heap_Ptr
 849+ EA1C             >
 849+ EA1C             >                // dummy db directives used to calculate length of namec
 849+ EA1C 44 45 56 49 >                db      "DEVICE"
 849+ EA20 43 45       >
 849+ EA22             >len_NFA         defl    $ - temp_NFA
 849+ EA22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 849+ EA1C             >
 849+ EA1C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 849+ EA1D 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 849+ EA21 43 45       >
 849+ EA23             >                org     $-1                 // alter last byte of Name just above to set
 849+ EA22 C5          >                db      {b $} | END_BIT     // msb as name end
 849+ EA23             >
 849+ EA23 10 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 849+ EA25             >Prev_Ptr        defl    Heap_Ptr
 849+ EA25             >
 849+ EA25             >mirror_Ptr      defl    $
 849+ EA25             >
 849+ EA25 9A 35       >                dw      Dict_Ptr + 2        // xt
 849+ EA27             >Heap_Ptr        defl    $ - $E000           // save current HP
 849+ EA27             >
 849+ EA27             >Current_HP      defl  $ - $E000             // used to set HP once!
 849+ EA27             >
 849+ EA27             >//              ______________________________________________________________________
 849+ EA27             >//              Dictionary part
 849+ EA27             >
 849+ EA27             >                org     Dict_Ptr
 849+ 3598             >
 849+ 3598 25 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 849+ 359A             >
 849+ 359A             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 849+ 359A CD 11 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 849+ 359D             >
 849+ 359D             >
 849+ 359D             >                endif           ; ok        // for other definitions it "points" the correct handler
 849+ 359D             >                // Use of "; ok" to suppress "warning[fwdref]"
 849+ 359D             >
 849+ 359D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 849+ 359D 02 00       >                dw      2
 850+ 359F
 851+ 359F              //  ______________________________________________________________________
 852+ 359F
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 142  359F                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 359F              //  ______________________________________________________________________
   2+ 359F              //
   3+ 359F              //  next-opt.asm
   4+ 359F              //
   5+ 359F              //  ZX Spectrum Next - peculiar definitions
   6+ 359F              //  ______________________________________________________________________
   7+ 359F
   8+ 359F              //  ______________________________________________________________________
   9+ 359F              //
  10+ 359F              // reg@         n -- b
  11+ 359F              // read Next REGister n giving byte b
  12+ 359F              //
  13+ 359F              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 359F              //              dw      LIT, $243B
  15+ 359F              //              dw      PSTORE
  16+ 359F              //              dw      LIT, $253B
  17+ 359F              //              dw      PFETCH
  18+ 359F              //              dw      EXIT
  19+ 359F                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 359F             >
  19+ 359F             >Dict_Ptr        defl    $
  19+ 359F             >
  19+ 359F             >//              ______________________________________________________________________
  19+ 359F             >//              Heap part
  19+ 359F             >
  19+ 359F             >
  19+ 359F             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA27             >
  19+ EA27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA27             >Latest_Definition defl  Heap_Ptr
  19+ EA27             >
  19+ EA27             >                // dummy db directives used to calculate length of namec
  19+ EA27 52 45 47 40 >                db      "REG@"
  19+ EA2B             >len_NFA         defl    $ - temp_NFA
  19+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA27             >
  19+ EA27 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA28 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA2B C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA2C             >
  19+ EA2C 1C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA2E             >Prev_Ptr        defl    Heap_Ptr
  19+ EA2E             >
  19+ EA2E             >mirror_Ptr      defl    $
  19+ EA2E             >
  19+ EA2E A1 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA30             >
  19+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA30             >
  19+ EA30             >//              ______________________________________________________________________
  19+ EA30             >//              Dictionary part
  19+ EA30             >
  19+ EA30             >                org     Dict_Ptr
  19+ 359F             >
  19+ 359F 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35A1             >
  19+ 35A1             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35A1 ~           >
  19+ 35A1 ~           >
  19+ 35A1             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35A1             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35A1             >
  19+ 35A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35A1 D9                           exx
  21+ 35A2 01 3B 24                     ld      bc, $243B
  22+ 35A5 E1                           pop     hl
  23+ 35A6 ED 69                        out     (c), l
  24+ 35A8 04                           inc     b
  25+ 35A9 ED 68                        in      l, (c)
  26+ 35AB E5                           push    hl
  27+ 35AC D9                           exx
  28+ 35AD                              next
  28+ 35AD DD E9       >                jp      (ix)
  29+ 35AF
  30+ 35AF
  31+ 35AF              //  ______________________________________________________________________
  32+ 35AF              //
  33+ 35AF              // reg!         b n --
  34+ 35AF              // write value b to Next REGister n
  35+ 35AF              //
  36+ 35AF              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35AF              //              dw      LIT, $243B
  38+ 35AF              //              dw      PSTORE
  39+ 35AF              //              dw      LIT, $253B
  40+ 35AF              //              dw      PSTORE
  41+ 35AF              //              dw      EXIT
  42+ 35AF                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35AF             >
  42+ 35AF             >Dict_Ptr        defl    $
  42+ 35AF             >
  42+ 35AF             >//              ______________________________________________________________________
  42+ 35AF             >//              Heap part
  42+ 35AF             >
  42+ 35AF             >
  42+ 35AF             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA30             >
  42+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA30             >Latest_Definition defl  Heap_Ptr
  42+ EA30             >
  42+ EA30             >                // dummy db directives used to calculate length of namec
  42+ EA30 52 45 47 21 >                db      "REG!"
  42+ EA34             >len_NFA         defl    $ - temp_NFA
  42+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA30             >
  42+ EA30 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA31 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA35             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA34 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA35             >
  42+ EA35 27 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA37             >Prev_Ptr        defl    Heap_Ptr
  42+ EA37             >
  42+ EA37             >mirror_Ptr      defl    $
  42+ EA37             >
  42+ EA37 B1 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA39             >
  42+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA39             >
  42+ EA39             >//              ______________________________________________________________________
  42+ EA39             >//              Dictionary part
  42+ EA39             >
  42+ EA39             >                org     Dict_Ptr
  42+ 35AF             >
  42+ 35AF 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35B1             >
  42+ 35B1             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35B1 ~           >
  42+ 35B1 ~           >
  42+ 35B1             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35B1             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35B1             >
  42+ 35B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35B1 D9                           exx
  44+ 35B2 01 3B 24                     ld      bc, $243B
  45+ 35B5 E1                           pop     hl
  46+ 35B6 ED 69                        out     (c), l
  47+ 35B8 04                           inc     b
  48+ 35B9 E1                           pop     hl
  49+ 35BA ED 69                        out     (c), l
  50+ 35BC D9                           exx
  51+ 35BD                              next
  51+ 35BD DD E9       >                jp      (ix)
  52+ 35BF
  53+ 35BF
  54+ 35BF              //  ______________________________________________________________________
  55+ 35BF              //
  56+ 35BF              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35BF              // NextZXOS call wrapper.
  58+ 35BF              //  n1 = hl register parameter value
  59+ 35BF              //  n2 = de register parameter value
  60+ 35BF              //  n3 = bc register parameter value
  61+ 35BF              //  n4 =  a register parameter value
  62+ 35BF              //   a = routine address in ROM 3
  63+ 35BF              // ----
  64+ 35BF              //  n5 = hl returned value
  65+ 35BF              //  n6 = de returned value
  66+ 35BF              //  n7 = bc returned value
  67+ 35BF              //  n8 =  a returned value
  68+ 35BF              //   f
  69+ 35BF                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35BF             >
  69+ 35BF             >Dict_Ptr        defl    $
  69+ 35BF             >
  69+ 35BF             >//              ______________________________________________________________________
  69+ 35BF             >//              Heap part
  69+ 35BF             >
  69+ 35BF             >
  69+ 35BF             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA39             >
  69+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA39             >Latest_Definition defl  Heap_Ptr
  69+ EA39             >
  69+ EA39             >                // dummy db directives used to calculate length of namec
  69+ EA39 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA3D 44 4F 53    >
  69+ EA40             >len_NFA         defl    $ - temp_NFA
  69+ EA40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA39             >
  69+ EA39 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA3A 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA3E 44 4F 53    >
  69+ EA41             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA40 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA41             >
  69+ EA41 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA43             >Prev_Ptr        defl    Heap_Ptr
  69+ EA43             >
  69+ EA43             >mirror_Ptr      defl    $
  69+ EA43             >
  69+ EA43 C1 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA45             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA45             >
  69+ EA45             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA45             >
  69+ EA45             >//              ______________________________________________________________________
  69+ EA45             >//              Dictionary part
  69+ EA45             >
  69+ EA45             >                org     Dict_Ptr
  69+ 35BF             >
  69+ 35BF 43 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35C1             >
  69+ 35C1             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35C1 ~           >
  69+ 35C1 ~           >
  69+ 35C1             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35C1             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35C1             >
  69+ 35C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35C1 D9                            exx
  71+ 35C2 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35C3 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35C4 7B                            ld      a, e
  74+ 35C5 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35C6 D1                            pop     de                  // de' argument              //  n1
  76+ 35C7 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35C8 D9                           exx
  78+ 35C9 E1                           pop     hl                  // entry address a
  79+ 35CA DD E5                        push    ix
  80+ 35CC D5                           push    de
  81+ 35CD C5                           push    bc
  82+ 35CE EB                           ex      de, hl              // de is entry address
  83+ 35CF              //              ld      (SP_Saved), sp
  84+ 35CF              //              ld      sp, Cold_origin - 5
  85+ 35CF              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35CF 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 35D1 F3                           di
  88+ 35D2 CF                           rst     08
  89+ 35D3 94                           db      $94
  90+ 35D4 FB                           ei
  91+ 35D5                      ////    ld      a, (Saved_MMU + 1)
  92+ 35D5                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 35D5
  94+ 35D5              //              ld      sp, (SP_Saved)
  95+ 35D5              //              push    ix
  96+ 35D5              //              pop     hl
  97+ 35D5              //              ld      (IX_Echo), hl
  98+ 35D5 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 35D9
 100+ 35D9 D9                           exx
 101+ 35DA C1                           pop     bc
 102+ 35DB D1                           pop     de
 103+ 35DC DD E1                        pop     ix
 104+ 35DE D9                            exx
 105+ 35DF E5                            push    hl
 106+ 35E0 D5                            push    de
 107+ 35E1 C5                            push    bc
 108+ 35E2 26 00                         ld      h, 0
 109+ 35E4 6F                            ld      l, a
 110+ 35E5 E5                            push    hl
 111+ 35E6 D9                           exx
 112+ 35E7 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 35E9 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 35EA E5                           push    hl
 115+ 35EB                              next
 115+ 35EB DD E9       >                jp      (ix)
 116+ 35ED
 117+ 35ED              //  ______________________________________________________________________
 118+ 35ED              //
 119+ 35ED              // blk-fh
 120+ 35ED              // MOVED AT THE END.
 121+ 35ED              //              Variable_Def BLK_FH,   "BLK-FH",   1
 122+ 35ED              //
 123+ 35ED              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 124+ 35ED              // Len_Filename:   db      30
 125+ 35ED              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 126+ 35ED              //                 ds      32
 127+ 35ED
 128+ 35ED              //  ______________________________________________________________________
 129+ 35ED              //
 130+ 35ED              // blk-seek     n --
 131+ 35ED              // seek block n  within blocks!.bin  file
 132+ 35ED                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 35ED             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 35ED             >
 132+ 35ED             >Dict_Ptr        defl    $
 132+ 35ED             >
 132+ 35ED             >//              ______________________________________________________________________
 132+ 35ED             >//              Heap part
 132+ 35ED             >
 132+ 35ED             >
 132+ 35ED             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA45             >
 132+ EA45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA45             >Latest_Definition defl  Heap_Ptr
 132+ EA45             >
 132+ EA45             >                // dummy db directives used to calculate length of namec
 132+ EA45 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA49 53 45 45 4B >
 132+ EA4D             >len_NFA         defl    $ - temp_NFA
 132+ EA4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA45             >
 132+ EA45 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA46 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA4A 53 45 45 4B >
 132+ EA4E             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA4D CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA4E             >
 132+ EA4E 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA50             >Prev_Ptr        defl    Heap_Ptr
 132+ EA50             >
 132+ EA50             >mirror_Ptr      defl    $
 132+ EA50             >
 132+ EA50 EF 35       >                dw      Dict_Ptr + 2        // xt
 132+ EA52             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA52             >
 132+ EA52             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA52             >
 132+ EA52             >//              ______________________________________________________________________
 132+ EA52             >//              Dictionary part
 132+ EA52             >
 132+ EA52             >                org     Dict_Ptr
 132+ 35ED             >
 132+ 35ED 50 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 35EF             >
 132+ 35EF             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 35EF CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 35F2             >
 132+ 35F2             >
 132+ 35F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 35F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 35F2             >
 132+ 35F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 35F2 5B 27 75 34                  dw  BBUF, MMUL
 134+ 35F6 3A 3F 34 26                  dw  BLK_FH, FETCH
 135+ 35FA 7D 23                        dw  F_SEEK
 136+ 35FC 3D 20 2D 00                  dw  LIT, $2D, QERROR
 136+ 3600 83 2A
 137+ 3602 F4 24                        dw  EXIT
 138+ 3604
 139+ 3604              //  ______________________________________________________________________
 140+ 3604              //
 141+ 3604              // blk-read     n --
 142+ 3604              // seek block n  within blocks!.bin  file
 143+ 3604                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 3604             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 3604             >
 143+ 3604             >Dict_Ptr        defl    $
 143+ 3604             >
 143+ 3604             >//              ______________________________________________________________________
 143+ 3604             >//              Heap part
 143+ 3604             >
 143+ 3604             >
 143+ 3604             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA52             >
 143+ EA52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA52             >Latest_Definition defl  Heap_Ptr
 143+ EA52             >
 143+ EA52             >                // dummy db directives used to calculate length of namec
 143+ EA52 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA56 52 45 41 44 >
 143+ EA5A             >len_NFA         defl    $ - temp_NFA
 143+ EA5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA52             >
 143+ EA52 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA53 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA57 52 45 41 44 >
 143+ EA5B             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA5A C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA5B             >
 143+ EA5B 45 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA5D             >Prev_Ptr        defl    Heap_Ptr
 143+ EA5D             >
 143+ EA5D             >mirror_Ptr      defl    $
 143+ EA5D             >
 143+ EA5D 06 36       >                dw      Dict_Ptr + 2        // xt
 143+ EA5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA5F             >
 143+ EA5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA5F             >
 143+ EA5F             >//              ______________________________________________________________________
 143+ EA5F             >//              Dictionary part
 143+ EA5F             >
 143+ EA5F             >                org     Dict_Ptr
 143+ 3604             >
 143+ 3604 5D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 3606             >
 143+ 3606             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 3606 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 3609             >
 143+ 3609             >
 143+ 3609             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 3609             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 3609             >
 143+ 3609             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 3609 EF 35                        dw  BLK_SEEK
 145+ 360B 5B 27                        dw  BBUF
 146+ 360D 3A 3F 34 26                  dw  BLK_FH, FETCH
 147+ 3611 C8 23                        dw  F_READ
 148+ 3613 3D 20 2E 00                  dw  LIT, $2E, QERROR
 148+ 3617 83 2A
 149+ 3619 AF 25                        dw  DROP
 150+ 361B F4 24                        dw  EXIT
 151+ 361D
 152+ 361D              //  ______________________________________________________________________
 153+ 361D              //
 154+ 361D              // blk-write     n --
 155+ 361D              // seek block n  within blocks!.bin  file
 156+ 361D                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 361D             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 361D             >
 156+ 361D             >Dict_Ptr        defl    $
 156+ 361D             >
 156+ 361D             >//              ______________________________________________________________________
 156+ 361D             >//              Heap part
 156+ 361D             >
 156+ 361D             >
 156+ 361D             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA5F             >
 156+ EA5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA5F             >Latest_Definition defl  Heap_Ptr
 156+ EA5F             >
 156+ EA5F             >                // dummy db directives used to calculate length of namec
 156+ EA5F 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA63 57 52 49 54 >
 156+ EA67 45          >
 156+ EA68             >len_NFA         defl    $ - temp_NFA
 156+ EA68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA5F             >
 156+ EA5F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA60 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA64 57 52 49 54 >
 156+ EA68 45          >
 156+ EA69             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA68 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA69             >
 156+ EA69 52 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA6B             >Prev_Ptr        defl    Heap_Ptr
 156+ EA6B             >
 156+ EA6B             >mirror_Ptr      defl    $
 156+ EA6B             >
 156+ EA6B 1F 36       >                dw      Dict_Ptr + 2        // xt
 156+ EA6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA6D             >
 156+ EA6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA6D             >
 156+ EA6D             >//              ______________________________________________________________________
 156+ EA6D             >//              Dictionary part
 156+ EA6D             >
 156+ EA6D             >                org     Dict_Ptr
 156+ 361D             >
 156+ 361D 6B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 361F             >
 156+ 361F             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 361F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 3622             >
 156+ 3622             >
 156+ 3622             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 3622             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 3622             >
 156+ 3622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 3622 EF 35                        dw  BLK_SEEK
 158+ 3624 5B 27                        dw  BBUF
 159+ 3626 3A 3F 34 26                  dw  BLK_FH, FETCH
 160+ 362A E6 23                        dw  F_WRITE
 161+ 362C 3D 20 2F 00                  dw  LIT, $2F, QERROR
 161+ 3630 83 2A
 162+ 3632 AF 25                        dw  DROP
 163+ 3634 F4 24                        dw  EXIT
 164+ 3636
 165+ 3636              //  ______________________________________________________________________
 166+ 3636              //
 167+ 3636              // blk-init     n --
 168+ 3636              // seek block n  within blocks!.bin  file
 169+ 3636                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 3636             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 3636             >
 169+ 3636             >Dict_Ptr        defl    $
 169+ 3636             >
 169+ 3636             >//              ______________________________________________________________________
 169+ 3636             >//              Heap part
 169+ 3636             >
 169+ 3636             >
 169+ 3636             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA6D             >
 169+ EA6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA6D             >Latest_Definition defl  Heap_Ptr
 169+ EA6D             >
 169+ EA6D             >                // dummy db directives used to calculate length of namec
 169+ EA6D 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA71 49 4E 49 54 >
 169+ EA75             >len_NFA         defl    $ - temp_NFA
 169+ EA75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA6D             >
 169+ EA6D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA6E 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA72 49 4E 49 54 >
 169+ EA76             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA75 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA76             >
 169+ EA76 5F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA78             >Prev_Ptr        defl    Heap_Ptr
 169+ EA78             >
 169+ EA78             >mirror_Ptr      defl    $
 169+ EA78             >
 169+ EA78 38 36       >                dw      Dict_Ptr + 2        // xt
 169+ EA7A             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EA7A             >
 169+ EA7A             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EA7A             >
 169+ EA7A             >//              ______________________________________________________________________
 169+ EA7A             >//              Dictionary part
 169+ EA7A             >
 169+ EA7A             >                org     Dict_Ptr
 169+ 3636             >
 169+ 3636 78 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 3638             >
 169+ 3638             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 3638 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 363B             >
 169+ 363B             >
 169+ 363B             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 363B             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 363B             >
 169+ 363B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 363B 3A 3F 34 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 363F 98 23 AF 25
 171+ 3643 41 3F 5F 25                  dw  BLK_FNAME, ONE_PLUS
 172+ 3647 4F 28 3F 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 364B F9 23
 173+ 364D                          //    dw  LIT, $2C, QERROR
 174+ 364D
 175+ 364D 8F 20                        dw  ZBRANCH
 176+ 364F 0E 00                        dw  Blk_Init_Endif - $
 177+ 3651
 178+ 3651 3D 20 CF FF                  dw  LIT, $FFCF                  // PATCH op-code RST $08, $FF
 179+ 3655 3D 20 3C 34                  dw  LIT, Exit_with_error
 180+ 3659 3E 26                        dw  STORE
 181+ 365B
 182+ 365B FA 33                        dw  BASIC
 183+ 365D              Blk_Init_Endif:
 184+ 365D
 185+ 365D 3A 3F 3E 26                  dw  BLK_FH, STORE
 186+ 3661 F4 24                        dw  EXIT
 187+ 3663
 188+ 3663              //  ______________________________________________________________________
 189+ 3663              //
 190+ 3663              // #sec
 191+ 3663              // number of 512-Byte "sectors" available on thie sysstem.
 192+ 3663              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 193+ 3663
 194+ 3663                              Constant_Def NSEC , "#SEC", 32767
 194+ 3663             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 194+ 3663             >
 194+ 3663             >Dict_Ptr        defl    $
 194+ 3663             >
 194+ 3663             >//              ______________________________________________________________________
 194+ 3663             >//              Heap part
 194+ 3663             >
 194+ 3663             >
 194+ 3663             >                org     (Heap_Ptr & $1FFF) + $E000
 194+ EA7A             >
 194+ EA7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ EA7A             >Latest_Definition defl  Heap_Ptr
 194+ EA7A             >
 194+ EA7A             >                // dummy db directives used to calculate length of namec
 194+ EA7A 23 53 45 43 >                db      "#SEC"
 194+ EA7E             >len_NFA         defl    $ - temp_NFA
 194+ EA7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ EA7A             >
 194+ EA7A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ EA7B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 194+ EA7F             >                org     $-1                 // alter last byte of Name just above to set
 194+ EA7E C3          >                db      {b $} | END_BIT     // msb as name end
 194+ EA7F             >
 194+ EA7F 6D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194+ EA81             >Prev_Ptr        defl    Heap_Ptr
 194+ EA81             >
 194+ EA81             >mirror_Ptr      defl    $
 194+ EA81             >
 194+ EA81 65 36       >                dw      Dict_Ptr + 2        // xt
 194+ EA83             >Heap_Ptr        defl    $ - $E000           // save current HP
 194+ EA83             >
 194+ EA83             >Current_HP      defl  $ - $E000             // used to set HP once!
 194+ EA83             >
 194+ EA83             >//              ______________________________________________________________________
 194+ EA83             >//              Dictionary part
 194+ EA83             >
 194+ EA83             >                org     Dict_Ptr
 194+ 3663             >
 194+ 3663 81 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 194+ 3665             >
 194+ 3665             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 3665 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 194+ 3668             >
 194+ 3668             >
 194+ 3668             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 3668             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 3668             >
 194+ 3668             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 3668 FF 7F       >                dw      32767
 195+ 366A
 196+ 366A              //  ______________________________________________________________________
 197+ 366A
 198+ 366A
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 143  366A                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 366A              //  ______________________________________________________________________
   2+ 366A              //
   3+ 366A              //  L3.asm
   4+ 366A              //
   5+ 366A              //  Continuation of L2.asm
   6+ 366A              //  I/O Block definitions
   7+ 366A              //  ______________________________________________________________________
   8+ 366A
   9+ 366A
  10+ 366A              //  ______________________________________________________________________
  11+ 366A              //
  12+ 366A              // r/w          a n f --
  13+ 366A              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 366A                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 366A             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 366A             >
  14+ 366A             >Dict_Ptr        defl    $
  14+ 366A             >
  14+ 366A             >//              ______________________________________________________________________
  14+ 366A             >//              Heap part
  14+ 366A             >
  14+ 366A             >
  14+ 366A             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA83             >
  14+ EA83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA83             >Latest_Definition defl  Heap_Ptr
  14+ EA83             >
  14+ EA83             >                // dummy db directives used to calculate length of namec
  14+ EA83 52 2F 57    >                db      "R/W"
  14+ EA86             >len_NFA         defl    $ - temp_NFA
  14+ EA86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA83             >
  14+ EA83 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA84 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA87             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA86 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA87             >
  14+ EA87 7A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA89             >Prev_Ptr        defl    Heap_Ptr
  14+ EA89             >
  14+ EA89             >mirror_Ptr      defl    $
  14+ EA89             >
  14+ EA89 6C 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA8B             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA8B             >
  14+ EA8B             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA8B             >
  14+ EA8B             >//              ______________________________________________________________________
  14+ EA8B             >//              Dictionary part
  14+ EA8B             >
  14+ EA8B             >                org     Dict_Ptr
  14+ 366A             >
  14+ 366A 89 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 366C             >
  14+ 366C             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 366C CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 366F             >
  14+ 366F             >
  14+ 366F             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 366F             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 366F             >
  14+ 366F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 366F FE 24                        dw      TO_R                    // >r
  16+ 3671 66 25                        dw      ONE_SUBTRACT            // 1-
  17+ 3673 CA 25 2B 25                  dw      DUP, ZLESS              // dup 0<
  18+ 3677 A6 25 65 36                  dw      OVER, NSEC              // over #sec
  19+ 367B 66 25 C0 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 367F C3 24                        dw      OR_OP                   // or
  21+ 3681 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 3685 83 2A
  22+ 3687 09 25                        dw      R_TO                    // r>
  23+ 3689                                                              // if
  24+ 3689 8F 20                        dw      ZBRANCH
  25+ 368B 08 00                        dw      Read_Write_Else - $
  26+ 368D 06 36                        dw          BLK_READ            //      blk-read
  27+ 368F 82 20                        dw      BRANCH
  28+ 3691 04 00                        dw      Read_Write_Endif - $
  29+ 3693              Read_Write_Else:                                // else
  30+ 3693 1F 36                        dw          BLK_WRITE           //      blk-write
  31+ 3695              Read_Write_Endif:                               // endif
  32+ 3695 F4 24                        dw      EXIT                    // ;
  33+ 3697
  34+ 3697
  35+ 3697              //  ______________________________________________________________________
  36+ 3697              //
  37+ 3697              // +buf        a1 -- a2 f
  38+ 3697              // advences to next buffer, cyclically rotating along them
  39+ 3697                              Colon_Def PBUF, "+BUF", is_normal
  39+ 3697             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 3697             >
  39+ 3697             >Dict_Ptr        defl    $
  39+ 3697             >
  39+ 3697             >//              ______________________________________________________________________
  39+ 3697             >//              Heap part
  39+ 3697             >
  39+ 3697             >
  39+ 3697             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA8B             >
  39+ EA8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA8B             >Latest_Definition defl  Heap_Ptr
  39+ EA8B             >
  39+ EA8B             >                // dummy db directives used to calculate length of namec
  39+ EA8B 2B 42 55 46 >                db      "+BUF"
  39+ EA8F             >len_NFA         defl    $ - temp_NFA
  39+ EA8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA8B             >
  39+ EA8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA8C 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EA90             >                org     $-1                 // alter last byte of Name just above to set
  39+ EA8F C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EA90             >
  39+ EA90 83 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EA92             >Prev_Ptr        defl    Heap_Ptr
  39+ EA92             >
  39+ EA92             >mirror_Ptr      defl    $
  39+ EA92             >
  39+ EA92 99 36       >                dw      Dict_Ptr + 2        // xt
  39+ EA94             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EA94             >
  39+ EA94             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EA94             >
  39+ EA94             >//              ______________________________________________________________________
  39+ EA94             >//              Dictionary part
  39+ EA94             >
  39+ EA94             >                org     Dict_Ptr
  39+ 3697             >
  39+ 3697 92 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 3699             >
  39+ 3699             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 3699 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 369C             >
  39+ 369C             >
  39+ 369C             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 369C             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 369C             >
  39+ 369C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 369C 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36A0 46 25
  41+ 36A2 CA 25 B9 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36A6 34 26
  42+ 36A8 9A 28                        dw      EQUALS                  // =
  43+ 36AA                                                              // if
  44+ 36AA 8F 20                        dw      ZBRANCH
  45+ 36AC 08 00                        dw      PBuf_Endif - $
  46+ 36AE AF 25                        dw          DROP                //      drop
  47+ 36B0 B3 27 34 26                  dw          FIRST, FETCH        //      first @
  48+ 36B4              PBuf_Endif:                                     // endif
  49+ 36B4 CA 25 25 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36B8 34 26
  50+ 36BA 8E 28                        dw      SUBTRACT                // -
  51+ 36BC F4 24                        dw      EXIT                    // ;
  52+ 36BE
  53+ 36BE              //  ______________________________________________________________________
  54+ 36BE              //
  55+ 36BE              // update       --
  56+ 36BE              // mark the last used block to be written to disk
  57+ 36BE                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36BE             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36BE             >
  57+ 36BE             >Dict_Ptr        defl    $
  57+ 36BE             >
  57+ 36BE             >//              ______________________________________________________________________
  57+ 36BE             >//              Heap part
  57+ 36BE             >
  57+ 36BE             >
  57+ 36BE             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EA94             >
  57+ EA94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EA94             >Latest_Definition defl  Heap_Ptr
  57+ EA94             >
  57+ EA94             >                // dummy db directives used to calculate length of namec
  57+ EA94 55 50 44 41 >                db      "UPDATE"
  57+ EA98 54 45       >
  57+ EA9A             >len_NFA         defl    $ - temp_NFA
  57+ EA9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EA94             >
  57+ EA94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EA95 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EA99 54 45       >
  57+ EA9B             >                org     $-1                 // alter last byte of Name just above to set
  57+ EA9A C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EA9B             >
  57+ EA9B 8B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EA9D             >Prev_Ptr        defl    Heap_Ptr
  57+ EA9D             >
  57+ EA9D             >mirror_Ptr      defl    $
  57+ EA9D             >
  57+ EA9D C0 36       >                dw      Dict_Ptr + 2        // xt
  57+ EA9F             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EA9F             >
  57+ EA9F             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EA9F             >
  57+ EA9F             >//              ______________________________________________________________________
  57+ EA9F             >//              Dictionary part
  57+ EA9F             >
  57+ EA9F             >                org     Dict_Ptr
  57+ 36BE             >
  57+ 36BE 9D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36C0             >
  57+ 36C0             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36C0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36C3             >
  57+ 36C3             >
  57+ 36C3             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36C3             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36C3             >
  57+ 36C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36C3 25 28 34 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36C7 34 26
  59+ 36C9 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36CD C3 24
  60+ 36CF 25 28 34 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 36D3 3E 26
  61+ 36D5 F4 24                        dw      EXIT                    // ;
  62+ 36D7
  63+ 36D7
  64+ 36D7              //  ______________________________________________________________________
  65+ 36D7              //
  66+ 36D7              // empty-buffers --
  67+ 36D7                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 36D7             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 36D7             >
  67+ 36D7             >Dict_Ptr        defl    $
  67+ 36D7             >
  67+ 36D7             >//              ______________________________________________________________________
  67+ 36D7             >//              Heap part
  67+ 36D7             >
  67+ 36D7             >
  67+ 36D7             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EA9F             >
  67+ EA9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EA9F             >Latest_Definition defl  Heap_Ptr
  67+ EA9F             >
  67+ EA9F             >                // dummy db directives used to calculate length of namec
  67+ EA9F 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAA3 59 2D 42 55 >
  67+ EAA7 46 46 45 52 >
  67+ EAAB 53          >
  67+ EAAC             >len_NFA         defl    $ - temp_NFA
  67+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EA9F             >
  67+ EA9F 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAA0 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAA4 59 2D 42 55 >
  67+ EAA8 46 46 45 52 >
  67+ EAAC 53          >
  67+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAAC D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAAD             >
  67+ EAAD 94 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  67+ EAAF             >
  67+ EAAF             >mirror_Ptr      defl    $
  67+ EAAF             >
  67+ EAAF D9 36       >                dw      Dict_Ptr + 2        // xt
  67+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAB1             >
  67+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAB1             >
  67+ EAB1             >//              ______________________________________________________________________
  67+ EAB1             >//              Dictionary part
  67+ EAB1             >
  67+ EAB1             >                org     Dict_Ptr
  67+ 36D7             >
  67+ 36D7 AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 36D9             >
  67+ 36D9             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 36D9 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 36DC             >
  67+ 36DC             >
  67+ 36DC             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 36DC             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 36DC             >
  67+ 36DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 36DC B3 27 34 26                  dw      FIRST, FETCH            // first @
  69+ 36E0 B9 27 34 26                  dw      LIMIT, FETCH            // limit @
  70+ 36E4 A6 25 8E 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 36E8 2B 2D
  71+ 36EA F4 24                        dw      EXIT                    // ;
  72+ 36EC
  73+ 36EC              //  ______________________________________________________________________
  74+ 36EC              //
  75+ 36EC              // buffer       n -- a
  76+ 36EC              // read block n and gives the address to a buffer
  77+ 36EC              // any block previously inside the buffer, if modified, is rewritten to
  78+ 36EC              // disk before reading the block n.
  79+ 36EC
  80+ 36EC                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 36EC             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 36EC             >
  80+ 36EC             >Dict_Ptr        defl    $
  80+ 36EC             >
  80+ 36EC             >//              ______________________________________________________________________
  80+ 36EC             >//              Heap part
  80+ 36EC             >
  80+ 36EC             >
  80+ 36EC             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAB1             >
  80+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAB1             >Latest_Definition defl  Heap_Ptr
  80+ EAB1             >
  80+ EAB1             >                // dummy db directives used to calculate length of namec
  80+ EAB1 42 55 46 46 >                db      "BUFFER"
  80+ EAB5 45 52       >
  80+ EAB7             >len_NFA         defl    $ - temp_NFA
  80+ EAB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAB1             >
  80+ EAB1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAB2 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAB6 45 52       >
  80+ EAB8             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAB7 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAB8             >
  80+ EAB8 9F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EABA             >Prev_Ptr        defl    Heap_Ptr
  80+ EABA             >
  80+ EABA             >mirror_Ptr      defl    $
  80+ EABA             >
  80+ EABA EE 36       >                dw      Dict_Ptr + 2        // xt
  80+ EABC             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EABC             >
  80+ EABC             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EABC             >
  80+ EABC             >//              ______________________________________________________________________
  80+ EABC             >//              Dictionary part
  80+ EABC             >
  80+ EABC             >                org     Dict_Ptr
  80+ 36EC             >
  80+ 36EC BA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 36EE             >
  80+ 36EE             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 36EE CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 36F1             >
  80+ 36F1             >
  80+ 36F1             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 36F1             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 36F1             >
  80+ 36F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 36F1 1F 28 34 26                  dw      USED, FETCH             // used @
  82+ 36F5 CA 25 FE 24                  dw      DUP, TO_R               // dup >r
  83+ 36F9                                                              // begin
  84+ 36F9              Buffer_Begin:
  85+ 36F9 99 36                        dw          PBUF                //      +buf
  86+ 36FB                                                              // until
  87+ 36FB 8F 20                        dw      ZBRANCH
  88+ 36FD FC FF                        dw      Buffer_Begin - $
  89+ 36FF 1F 28 3E 26                  dw      USED, STORE             // used !
  90+ 3703 14 25 34 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3707 2B 25
  91+ 3709                                                              // if
  92+ 3709 8F 20                        dw      ZBRANCH
  93+ 370B 14 00                        dw      Buffer_Endif - $
  94+ 370D 14 25 75 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 3711 14 25 34 26                  dw          R_OP, FETCH         //      r fetch
  96+ 3715 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3719 B4 24                        dw          AND_OP              //      and
  98+ 371B 2A 27 6C 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 371F              Buffer_Endif:                                   // endif
 100+ 371F 14 25 3E 26                  dw      R_OP, STORE             // r !
 101+ 3723 14 25 25 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3727 3E 26
 102+ 3729 09 25 75 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 372D F4 24                        dw      EXIT                    // ;
 104+ 372F
 105+ 372F              //  ______________________________________________________________________
 106+ 372F              //
 107+ 372F              // block        n -- a
 108+ 372F              // Leaves the buffer address that contains the block n.
 109+ 372F              // If the block is not already present, it will be loaded from disk
 110+ 372F              // The block previously inside the buffer, if modified, is rewritten to
 111+ 372F              // disk before reading the block n.
 112+ 372F              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 372F
 114+ 372F                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 372F             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 372F             >
 114+ 372F             >Dict_Ptr        defl    $
 114+ 372F             >
 114+ 372F             >//              ______________________________________________________________________
 114+ 372F             >//              Heap part
 114+ 372F             >
 114+ 372F             >
 114+ 372F             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EABC             >
 114+ EABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EABC             >Latest_Definition defl  Heap_Ptr
 114+ EABC             >
 114+ EABC             >                // dummy db directives used to calculate length of namec
 114+ EABC 42 4C 4F 43 >                db      "BLOCK"
 114+ EAC0 4B          >
 114+ EAC1             >len_NFA         defl    $ - temp_NFA
 114+ EAC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EABC             >
 114+ EABC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EABD 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAC1 4B          >
 114+ EAC2             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAC1 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAC2             >
 114+ EAC2 B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAC4             >Prev_Ptr        defl    Heap_Ptr
 114+ EAC4             >
 114+ EAC4             >mirror_Ptr      defl    $
 114+ EAC4             >
 114+ EAC4 31 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAC6             >
 114+ EAC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAC6             >
 114+ EAC6             >//              ______________________________________________________________________
 114+ EAC6             >//              Dictionary part
 114+ EAC6             >
 114+ EAC6             >                org     Dict_Ptr
 114+ 372F             >
 114+ 372F C4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 3731             >
 114+ 3731             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 3731 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3734             >
 114+ 3734             >
 114+ 3734             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3734             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3734             >
 114+ 3734             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3734                          //  dw      OFFSET, FETCH           // offset @
 116+ 3734                          //  dw      PLUS
 117+ 3734 FE 24                        dw      TO_R                    // + >r
 118+ 3736 25 28 34 26                  dw      PREV, FETCH             // prev @
 119+ 373A CA 25 34 26                  dw      DUP, FETCH              // dup @
 120+ 373E 14 25 8E 28                  dw      R_OP, SUBTRACT          // r -
 121+ 3742 CA 25 46 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3746                                                              // if
 123+ 3746 8F 20                        dw        ZBRANCH
 124+ 3748 32 00                        dw        Block_Endif_1 - $
 125+ 374A              Block_Begin:                                    //      begin
 126+ 374A 99 36 19 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 374E                                                              //          if
 128+ 374E 8F 20                        dw          ZBRANCH
 129+ 3750 12 00                        dw          Block_Endif_2 - $
 130+ 3752 AF 25                        dw              DROP            //              drop
 131+ 3754 14 25 EE 36                  dw              R_OP, BUFFER    //              r buffer
 132+ 3758 CA 25                        dw              DUP             //              dup
 133+ 375A 14 25 31 27                  dw              R_OP, ONE       //              r 1
 134+ 375E 6C 36                        dw              READ_WRITE      //              r/w
 135+ 3760 81 25                        dw              TWO_MINUS       //              2-
 136+ 3762              Block_Endif_2:                                  //          endif
 137+ 3762 CA 25 34 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3766 14 25
 138+ 3768 8E 28 CA 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 376C 46 25 19 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 3770                                                              //      until
 141+ 3770 8F 20                        dw        ZBRANCH
 142+ 3772 D8 FF                        dw        Block_Begin - $
 143+ 3774 CA 25 25 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 3778 3E 26
 144+ 377A              Block_Endif_1:                                  // endif
 145+ 377A 09 25 AF 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 377E 75 25
 146+ 3780 F4 24                        dw      EXIT                    // ;
 147+ 3782
 148+ 3782              //  ______________________________________________________________________
 149+ 3782              //
 150+ 3782              // #buff        -- n
 151+ 3782              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 3782                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 3782             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 3782             >
 152+ 3782             >Dict_Ptr        defl    $
 152+ 3782             >
 152+ 3782             >//              ______________________________________________________________________
 152+ 3782             >//              Heap part
 152+ 3782             >
 152+ 3782             >
 152+ 3782             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAC6             >
 152+ EAC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAC6             >Latest_Definition defl  Heap_Ptr
 152+ EAC6             >
 152+ EAC6             >                // dummy db directives used to calculate length of namec
 152+ EAC6 23 42 55 46 >                db      "#BUFF"
 152+ EACA 46          >
 152+ EACB             >len_NFA         defl    $ - temp_NFA
 152+ EACB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAC6             >
 152+ EAC6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAC7 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EACB 46          >
 152+ EACC             >                org     $-1                 // alter last byte of Name just above to set
 152+ EACB C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EACC             >
 152+ EACC BC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EACE             >Prev_Ptr        defl    Heap_Ptr
 152+ EACE             >
 152+ EACE             >mirror_Ptr      defl    $
 152+ EACE             >
 152+ EACE 84 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAD0             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAD0             >
 152+ EAD0             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAD0             >
 152+ EAD0             >//              ______________________________________________________________________
 152+ EAD0             >//              Dictionary part
 152+ EAD0             >
 152+ EAD0             >                org     Dict_Ptr
 152+ 3782             >
 152+ 3782 CE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 3784             >
 152+ 3784             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 3784 CD FE 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 3787             >
 152+ 3787             >
 152+ 3787             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 3787             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 3787             >
 152+ 3787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 3787 07 00       >                dw      7
 153+ 3789
 154+ 3789              //  ______________________________________________________________________
 155+ 3789              //
 156+ 3789              // flush        --
 157+ 3789                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 3789             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 3789             >
 157+ 3789             >Dict_Ptr        defl    $
 157+ 3789             >
 157+ 3789             >//              ______________________________________________________________________
 157+ 3789             >//              Heap part
 157+ 3789             >
 157+ 3789             >
 157+ 3789             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAD0             >
 157+ EAD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAD0             >Latest_Definition defl  Heap_Ptr
 157+ EAD0             >
 157+ EAD0             >                // dummy db directives used to calculate length of namec
 157+ EAD0 46 4C 55 53 >                db      "FLUSH"
 157+ EAD4 48          >
 157+ EAD5             >len_NFA         defl    $ - temp_NFA
 157+ EAD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAD0             >
 157+ EAD0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAD1 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAD5 48          >
 157+ EAD6             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAD5 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAD6             >
 157+ EAD6 C6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAD8             >Prev_Ptr        defl    Heap_Ptr
 157+ EAD8             >
 157+ EAD8             >mirror_Ptr      defl    $
 157+ EAD8             >
 157+ EAD8 8B 37       >                dw      Dict_Ptr + 2        // xt
 157+ EADA             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EADA             >
 157+ EADA             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EADA             >
 157+ EADA             >//              ______________________________________________________________________
 157+ EADA             >//              Dictionary part
 157+ EADA             >
 157+ EADA             >                org     Dict_Ptr
 157+ 3789             >
 157+ 3789 D8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 378B             >
 157+ 378B             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 378B CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 378E             >
 157+ 378E             >
 157+ 378E             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 378E             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 378E             >
 157+ 378E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 378E 84 37 5F 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 3792 2A 27
 159+ 3794              Flush_Do:                                       // do
 160+ 3794 CC 20                        dw      C_DO
 161+ 3796 2A 27 EE 36                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 379A AF 25
 162+ 379C                                                              // loop
 163+ 379C 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37A0 3A 3F 34 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37A4 A4 23 AF 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37A8 F4 24                        dw      EXIT                    // exit
 167+ 37AA
 168+ 37AA              //  ______________________________________________________________________
 169+ 37AA              //
 170+ 37AA              // f_getline    a m fh -- n
 171+ 37AA              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37AA              // Address a is left for subsequent processing
 173+ 37AA              // and n as the actual number of byte read, that is the length of line
 174+ 37AA                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37AA             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37AA             >
 174+ 37AA             >Dict_Ptr        defl    $
 174+ 37AA             >
 174+ 37AA             >//              ______________________________________________________________________
 174+ 37AA             >//              Heap part
 174+ 37AA             >
 174+ 37AA             >
 174+ 37AA             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EADA             >
 174+ EADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EADA             >Latest_Definition defl  Heap_Ptr
 174+ EADA             >
 174+ EADA             >                // dummy db directives used to calculate length of namec
 174+ EADA 46 5F 47 45 >                db      "F_GETLINE"
 174+ EADE 54 4C 49 4E >
 174+ EAE2 45          >
 174+ EAE3             >len_NFA         defl    $ - temp_NFA
 174+ EAE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EADA             >
 174+ EADA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EADB 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EADF 54 4C 49 4E >
 174+ EAE3 45          >
 174+ EAE4             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAE3 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAE4             >
 174+ EAE4 D0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAE6             >Prev_Ptr        defl    Heap_Ptr
 174+ EAE6             >
 174+ EAE6             >mirror_Ptr      defl    $
 174+ EAE6             >
 174+ EAE6 AC 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAE8             >
 174+ EAE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAE8             >
 174+ EAE8             >//              ______________________________________________________________________
 174+ EAE8             >//              Dictionary part
 174+ EAE8             >
 174+ EAE8             >                org     Dict_Ptr
 174+ 37AA             >
 174+ 37AA E6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37AC             >
 174+ 37AC             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37AC CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37AF             >
 174+ 37AF             >
 174+ 37AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37AF             >
 174+ 37AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37AF FE 24                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37B1 BA 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37B3 14 25 B0 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37B7 3D 20 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 37BB 83 2A
 179+ 37BD
 180+ 37BD 05 26 A6 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37C1 5F 25 C3 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37C5
 183+ 37C5 14 25 C8 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37C9 3D 20 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 37CD 83 2A
 185+ 37CF                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37CF 8F 20                        dw      ZBRANCH
 187+ 37D1 3C 00                        dw      FGetline_Else - $
 188+ 37D3 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 37D7 C0 21
 189+ 37D9 AF 25 B4 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 37DD C3 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 37DF 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 37E3 C0 21
 192+ 37E5 AF 25 B4 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 37E9 D1 25 CB 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 37ED CA 25 3D 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 37F1 3E 26
 195+ 37F3 CA 25 FE 24                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 37F7 05 26 09 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 37FB 2A 27 50 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 37FF 09 25 7D 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 3803 3D 20 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 3807 83 2A
 200+ 3809                                                              // else
 201+ 3809 82 20                        dw      BRANCH
 202+ 380B 0C 00                        dw      FGetline_Endif - $
 203+ 380D              FGetline_Else:
 204+ 380D 09 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 380F 05 26 FF 25                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 3813 AF 25 2A 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3817              FGetline_Endif:                                 // endif
 208+ 3817 FE 24 CA 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 381B CA 25
 209+ 381D 5F 25 C3 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 3821 14 25 35 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3825 12 26 46 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3829 2A 27 C3 25                  dw      ZERO, SWAP              // 0 swap
 213+ 382D 79 25 3E 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 3831 14 25 46 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3835 66 25
 215+ 3837 C3 25 14 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 383B 8E 28
 216+ 383D 36 2D                        dw      BLANK                   // blank
 217+ 383F 09 25                        dw      R_TO                    // r>                   ( n )
 218+ 3841 F4 24                        dw      EXIT                    // ;
 219+ 3843
 220+ 3843              //  ______________________________________________________________________
 221+ 3843              //
 222+ 3843              // f_include    fh --
 223+ 3843              // Given a filehandle includes the source from file
 224+ 3843                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 3843             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 3843             >
 224+ 3843             >Dict_Ptr        defl    $
 224+ 3843             >
 224+ 3843             >//              ______________________________________________________________________
 224+ 3843             >//              Heap part
 224+ 3843             >
 224+ 3843             >
 224+ 3843             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAE8             >
 224+ EAE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAE8             >Latest_Definition defl  Heap_Ptr
 224+ EAE8             >
 224+ EAE8             >                // dummy db directives used to calculate length of namec
 224+ EAE8 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAEC 43 4C 55 44 >
 224+ EAF0 45          >
 224+ EAF1             >len_NFA         defl    $ - temp_NFA
 224+ EAF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAE8             >
 224+ EAE8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAE9 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAED 43 4C 55 44 >
 224+ EAF1 45          >
 224+ EAF2             >                org     $-1                 // alter last byte of Name just above to set
 224+ EAF1 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EAF2             >
 224+ EAF2 DA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EAF4             >Prev_Ptr        defl    Heap_Ptr
 224+ EAF4             >
 224+ EAF4             >mirror_Ptr      defl    $
 224+ EAF4             >
 224+ EAF4 45 38       >                dw      Dict_Ptr + 2        // xt
 224+ EAF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EAF6             >
 224+ EAF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EAF6             >
 224+ EAF6             >//              ______________________________________________________________________
 224+ EAF6             >//              Dictionary part
 224+ EAF6             >
 224+ EAF6             >                org     Dict_Ptr
 224+ 3843             >
 224+ 3843 F4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3845             >
 224+ 3845             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3845 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3848             >
 224+ 3848             >
 224+ 3848             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3848             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3848             >
 224+ 3848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3848 CB 27 34 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 384C FE 24
 226+ 384E D1 27 34 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 3852 FE 24
 227+ 3854 37 28 34 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3858 FE 24
 228+ 385A 14 25                        dw      R_OP                    // r
 229+ 385C 34 25                        dw      ZGREATER                // 0>  (filehandle)
 230+ 385E                                                              // if
 231+ 385E 8F 20                        dw      ZBRANCH
 232+ 3860 20 00                        dw      FInclude_Else_1 - $
 233+ 3862 14 25 B0 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 3866 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 386A 83 2A
 235+ 386C D1 27 34 26                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 3870 81 25                        dw          TWO_MINUS
 237+ 3872 3D 28 34 26                  dw          SPAN, FETCH         //      span @ -
 238+ 3876 8E 28                        dw          SUBTRACT
 239+ 3878 83 28 50 25                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 387C                                                              // else
 241+ 387C 82 20                        dw      BRANCH
 242+ 387E 06 00                        dw      FInclude_Endif_1 - $
 243+ 3880              FInclude_Else_1:
 244+ 3880 2A 27 2A 27                  dw          ZERO, ZERO          //      0 0
 245+ 3884                                                              // endif
 246+ 3884              FInclude_Endif_1:
 247+ 3884 FE 24 FE 24                  dw      TO_R, TO_R              // >r >r
 248+ 3888 37 28 3E 26                  dw      SOURCE_ID, STORE        // source-id !
 249+ 388C              FInclude_Begin:                                 // begin
 250+ 388C 31 27 31 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 3890 5B 27
 251+ 3892 12 26 36 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 3896 C3 25 5F 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 389A C3 25 79 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 389E 37 28 34 26                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 38A2 AC 37                        dw          F_GETLINE           //      f_getline
 256+ 38A4                                                              // while
 257+ 38A4 8F 20                        dw      ZBRANCH
 258+ 38A6 14 00                        dw      FInclude_Repeat - $
 259+ 38A8 31 27 CB 27                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 38AC 3E 26
 260+ 38AE 2A 27 D1 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 38B2 3E 26
 261+ 38B4 6A 31                        dw          INTERPRET           //      interpret
 262+ 38B6 82 20                        dw      BRANCH
 263+ 38B8 D4 FF                        dw      FInclude_Begin - $
 264+ 38BA              FInclude_Repeat:                                // repeat
 265+ 38BA                              //  close current file
 266+ 38BA 37 28 34 26                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 38BE 98 23                        dw      F_CLOSE                 // f_close
 268+ 38C0 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 38C4 83 2A
 269+ 38C6
 270+ 38C6 09 25 09 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 38CA 09 25
 271+ 38CC CA 25 37 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 38D0 3E 26
 272+ 38D2 34 25                        dw      ZGREATER                // 0>
 273+ 38D4                                                              // if
 274+ 38D4 8F 20                        dw      ZBRANCH
 275+ 38D6 12 00                        dw      FInclude_Else_2 - $
 276+ 38D8 37 28 34 26                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 38DC 7D 23                        dw          F_SEEK              //      f_seek
 278+ 38DE 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 38E2 83 2A
 279+ 38E4                                                              // else
 280+ 38E4 82 20                        dw      BRANCH
 281+ 38E6 04 00                        dw      FInclude_Endif_2 - $
 282+ 38E8              FInclude_Else_2:
 283+ 38E8 FF 25                        dw          TWO_DROP            //      2drop
 284+ 38EA              FInclude_Endif_2:                               // endif
 285+ 38EA 09 25 D1 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 38EE 3E 26
 286+ 38F0 09 25 CB 27                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 38F4 3E 26
 287+ 38F6 F4 24                        dw      EXIT                    // ;
 288+ 38F8
 289+ 38F8              //  ______________________________________________________________________
 290+ 38F8              //
 291+ 38F8              // open<         -- fh
 292+ 38F8              // Open the following filename and return it file-handle
 293+ 38F8              // Used in the form OPEN CCCC
 294+ 38F8                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 38F8             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 38F8             >
 294+ 38F8             >Dict_Ptr        defl    $
 294+ 38F8             >
 294+ 38F8             >//              ______________________________________________________________________
 294+ 38F8             >//              Heap part
 294+ 38F8             >
 294+ 38F8             >
 294+ 38F8             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EAF6             >
 294+ EAF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EAF6             >Latest_Definition defl  Heap_Ptr
 294+ EAF6             >
 294+ EAF6             >                // dummy db directives used to calculate length of namec
 294+ EAF6 4F 50 45 4E >                db      "OPEN<"
 294+ EAFA 3C          >
 294+ EAFB             >len_NFA         defl    $ - temp_NFA
 294+ EAFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EAF6             >
 294+ EAF6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EAF7 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EAFB 3C          >
 294+ EAFC             >                org     $-1                 // alter last byte of Name just above to set
 294+ EAFB BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EAFC             >
 294+ EAFC E8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EAFE             >Prev_Ptr        defl    Heap_Ptr
 294+ EAFE             >
 294+ EAFE             >mirror_Ptr      defl    $
 294+ EAFE             >
 294+ EAFE FA 38       >                dw      Dict_Ptr + 2        // xt
 294+ EB00             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB00             >
 294+ EB00             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB00             >
 294+ EB00             >//              ______________________________________________________________________
 294+ EB00             >//              Dictionary part
 294+ EB00             >
 294+ EB00             >                org     Dict_Ptr
 294+ 38F8             >
 294+ 38F8 FE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 38FA             >
 294+ 38FA             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 38FA CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 38FD             >
 294+ 38FD             >
 294+ 38FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 38FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 38FD             >
 294+ 38FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 38FD 4D 27                        dw      BL
 296+ 38FF 63 2D BD 2B                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 3903 A6 25
 297+ 3905 46 25 2A 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 3909 C3 25 3E 26
 298+ 390D 54 2D 31 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 3911 F9 23
 299+ 3913 3D 20 2B 00                  dw      LIT, 43                 // 43
 300+ 3917 83 2A                        dw      QERROR                  // ?error
 301+ 3919 F4 24                        dw      EXIT                    // ;
 302+ 391B
 303+ 391B              //  ______________________________________________________________________
 304+ 391B              //
 305+ 391B              // use          -- cccc
 306+ 391B              // Include the following filename
 307+ 391B              //              Colon_Def USE, "USE", is_normal
 308+ 391B              //              dw      OPEN_FH                 // open<
 309+ 391B              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 391B              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 391B              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 391B              //              dw      EXIT                    // ;
 313+ 391B
 314+ 391B              //  ______________________________________________________________________
 315+ 391B              //
 316+ 391B              // include      -- cccc
 317+ 391B              // Include the following filename
 318+ 391B                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 391B             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 391B             >
 318+ 391B             >Dict_Ptr        defl    $
 318+ 391B             >
 318+ 391B             >//              ______________________________________________________________________
 318+ 391B             >//              Heap part
 318+ 391B             >
 318+ 391B             >
 318+ 391B             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB00             >
 318+ EB00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB00             >Latest_Definition defl  Heap_Ptr
 318+ EB00             >
 318+ EB00             >                // dummy db directives used to calculate length of namec
 318+ EB00 49 4E 43 4C >                db      "INCLUDE"
 318+ EB04 55 44 45    >
 318+ EB07             >len_NFA         defl    $ - temp_NFA
 318+ EB07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB00             >
 318+ EB00 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB01 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB05 55 44 45    >
 318+ EB08             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB07 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB08             >
 318+ EB08 F6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB0A             >Prev_Ptr        defl    Heap_Ptr
 318+ EB0A             >
 318+ EB0A             >mirror_Ptr      defl    $
 318+ EB0A             >
 318+ EB0A 1D 39       >                dw      Dict_Ptr + 2        // xt
 318+ EB0C             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB0C             >
 318+ EB0C             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB0C             >
 318+ EB0C             >//              ______________________________________________________________________
 318+ EB0C             >//              Dictionary part
 318+ EB0C             >
 318+ EB0C             >                org     Dict_Ptr
 318+ 391B             >
 318+ 391B 0A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 391D             >
 318+ 391D             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 391D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 3920             >
 318+ 3920             >
 318+ 3920             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 3920             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 3920             >
 318+ 3920             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 3920 FA 38                        dw      OPEN_FH                 // open<
 320+ 3922 45 38                        dw      F_INCLUDE               //  f_include
 321+ 3924 F4 24                        dw      EXIT                    // ;
 322+ 3926
 323+ 3926              //  ______________________________________________________________________
 324+ 3926              //
 325+ 3926              // needs
 326+ 3926              // check for cccc exists in vocabulary
 327+ 3926              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 3926
 329+ 3926              // temp filename cccc.f as counted string zero-padded
 330+ 3926                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 3926             >
 330+ 3926             >Dict_Ptr        defl    $
 330+ 3926             >
 330+ 3926             >//              ______________________________________________________________________
 330+ 3926             >//              Heap part
 330+ 3926             >
 330+ 3926             >
 330+ 3926             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB0C             >
 330+ EB0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB0C             >Latest_Definition defl  Heap_Ptr
 330+ EB0C             >
 330+ EB0C             >                // dummy db directives used to calculate length of namec
 330+ EB0C 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB10 53 2D 57    >
 330+ EB13             >len_NFA         defl    $ - temp_NFA
 330+ EB13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB0C             >
 330+ EB0C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB0D 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB11 53 2D 57    >
 330+ EB14             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB13 D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB14             >
 330+ EB14 00 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB16             >Prev_Ptr        defl    Heap_Ptr
 330+ EB16             >
 330+ EB16             >mirror_Ptr      defl    $
 330+ EB16             >
 330+ EB16 28 39       >                dw      Dict_Ptr + 2        // xt
 330+ EB18             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB18             >
 330+ EB18             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB18             >
 330+ EB18             >//              ______________________________________________________________________
 330+ EB18             >//              Dictionary part
 330+ EB18             >
 330+ EB18             >                org     Dict_Ptr
 330+ 3926             >
 330+ 3926 16 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 3928             >
 330+ 3928             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 3928 CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 392B             >
 330+ 392B             >
 330+ 392B             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 392B             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 392B             >
 330+ 392B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 392B 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 394E              // temp complete path+filename
 333+ 394E                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 394E             >
 333+ 394E             >Dict_Ptr        defl    $
 333+ 394E             >
 333+ 394E             >//              ______________________________________________________________________
 333+ 394E             >//              Heap part
 333+ 394E             >
 333+ 394E             >
 333+ 394E             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB18             >
 333+ EB18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB18             >Latest_Definition defl  Heap_Ptr
 333+ EB18             >
 333+ EB18             >                // dummy db directives used to calculate length of namec
 333+ EB18 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB1C 53 2D 46 4E >
 333+ EB20             >len_NFA         defl    $ - temp_NFA
 333+ EB20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB18             >
 333+ EB18 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB19 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB1D 53 2D 46 4E >
 333+ EB21             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB20 CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB21             >
 333+ EB21 0C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB23             >Prev_Ptr        defl    Heap_Ptr
 333+ EB23             >
 333+ EB23             >mirror_Ptr      defl    $
 333+ EB23             >
 333+ EB23 50 39       >                dw      Dict_Ptr + 2        // xt
 333+ EB25             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB25             >
 333+ EB25             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB25             >
 333+ EB25             >//              ______________________________________________________________________
 333+ EB25             >//              Dictionary part
 333+ EB25             >
 333+ EB25             >                org     Dict_Ptr
 333+ 394E             >
 333+ 394E 23 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 3950             >
 333+ 3950             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 3950 CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 3953             >
 333+ 3953             >
 333+ 3953             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 3953             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 3953             >
 333+ 3953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 3953 63 3A 2F 74  Param:          db      "c:/tools/vforth/lib/autoexec.f", 0
 334+ 3957 6F 6F 6C 73
 334+ 395B 2F 76 66 6F
 334+ 395F 72 74 68 2F
 334+ 3963 6C 69 62 2F
 334+ 3967 61 75 74 6F
 334+ 396B 65 78 65 63
 334+ 396F 2E 66 00
 335+ 3972 00 00 00...                  ds      30
 336+ 3990              // constant path
 337+ 3990                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 3990             >
 337+ 3990             >Dict_Ptr        defl    $
 337+ 3990             >
 337+ 3990             >//              ______________________________________________________________________
 337+ 3990             >//              Heap part
 337+ 3990             >
 337+ 3990             >
 337+ 3990             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB25             >
 337+ EB25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB25             >Latest_Definition defl  Heap_Ptr
 337+ EB25             >
 337+ EB25             >                // dummy db directives used to calculate length of namec
 337+ EB25 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB29 53 2D 49 4E >
 337+ EB2D 43          >
 337+ EB2E             >len_NFA         defl    $ - temp_NFA
 337+ EB2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB25             >
 337+ EB25 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB26 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB2A 53 2D 49 4E >
 337+ EB2E 43          >
 337+ EB2F             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB2E C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB2F             >
 337+ EB2F 18 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB31             >Prev_Ptr        defl    Heap_Ptr
 337+ EB31             >
 337+ EB31             >mirror_Ptr      defl    $
 337+ EB31             >
 337+ EB31 92 39       >                dw      Dict_Ptr + 2        // xt
 337+ EB33             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB33             >
 337+ EB33             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB33             >
 337+ EB33             >//              ______________________________________________________________________
 337+ EB33             >//              Dictionary part
 337+ EB33             >
 337+ EB33             >                org     Dict_Ptr
 337+ 3990             >
 337+ 3990 31 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 3992             >
 337+ 3992             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 3992 CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 3995             >
 337+ 3995             >
 337+ 3995             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 3995             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 3995             >
 337+ 3995             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 3995 04 69 6E 63                  db      4, "inc/", 0
 338+ 3999 2F 00
 339+ 399B                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 399B             >
 339+ 399B             >Dict_Ptr        defl    $
 339+ 399B             >
 339+ 399B             >//              ______________________________________________________________________
 339+ 399B             >//              Heap part
 339+ 399B             >
 339+ 399B             >
 339+ 399B             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB33             >
 339+ EB33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB33             >Latest_Definition defl  Heap_Ptr
 339+ EB33             >
 339+ EB33             >                // dummy db directives used to calculate length of namec
 339+ EB33 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB37 53 2D 4C 49 >
 339+ EB3B 42          >
 339+ EB3C             >len_NFA         defl    $ - temp_NFA
 339+ EB3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB33             >
 339+ EB33 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB34 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB38 53 2D 4C 49 >
 339+ EB3C 42          >
 339+ EB3D             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB3C C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB3D             >
 339+ EB3D 25 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB3F             >Prev_Ptr        defl    Heap_Ptr
 339+ EB3F             >
 339+ EB3F             >mirror_Ptr      defl    $
 339+ EB3F             >
 339+ EB3F 9D 39       >                dw      Dict_Ptr + 2        // xt
 339+ EB41             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB41             >
 339+ EB41             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB41             >
 339+ EB41             >//              ______________________________________________________________________
 339+ EB41             >//              Dictionary part
 339+ EB41             >
 339+ EB41             >                org     Dict_Ptr
 339+ 399B             >
 339+ 399B 3F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 399D             >
 339+ 399D             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 399D CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 39A0             >
 339+ 39A0             >
 339+ 39A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 39A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 39A0             >
 339+ 39A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 39A0 04 6C 69 62                  db      4, "lib/", 0
 340+ 39A4 2F 00
 341+ 39A6
 342+ 39A6              // Concatenate path at a and filename and include it
 343+ 39A6              // No error is issued if filename doesn't exist.
 344+ 39A6                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 39A6             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 39A6             >
 344+ 39A6             >Dict_Ptr        defl    $
 344+ 39A6             >
 344+ 39A6             >//              ______________________________________________________________________
 344+ 39A6             >//              Heap part
 344+ 39A6             >
 344+ 39A6             >
 344+ 39A6             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB41             >
 344+ EB41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB41             >Latest_Definition defl  Heap_Ptr
 344+ EB41             >
 344+ EB41             >                // dummy db directives used to calculate length of namec
 344+ EB41 4E 45 45 44 >                db      "NEEDS/"
 344+ EB45 53 2F       >
 344+ EB47             >len_NFA         defl    $ - temp_NFA
 344+ EB47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB41             >
 344+ EB41 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB42 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB46 53 2F       >
 344+ EB48             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB47 AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB48             >
 344+ EB48 33 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB4A             >Prev_Ptr        defl    Heap_Ptr
 344+ EB4A             >
 344+ EB4A             >mirror_Ptr      defl    $
 344+ EB4A             >
 344+ EB4A A8 39       >                dw      Dict_Ptr + 2        // xt
 344+ EB4C             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB4C             >
 344+ EB4C             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB4C             >
 344+ EB4C             >//              ______________________________________________________________________
 344+ EB4C             >//              Dictionary part
 344+ EB4C             >
 344+ EB4C             >                org     Dict_Ptr
 344+ 39A6             >
 344+ 39A6 4A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 39A8             >
 344+ 39A8             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 39A8 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 39AB             >
 344+ 39AB             >
 344+ 39AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 39AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 39AB             >
 344+ 39AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 39AB BD 2B BA 25                  dw      COUNT, TUCK             // n a n
 346+ 39AF 50 39 C3 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 39B3 35 24
 347+ 39B5 50 39 46 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 39B9 28 39 5F 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 39BD C3 25
 349+ 39BF 3D 20 23 00                  dw      LIT, 35
 350+ 39C3 35 24                        dw      CMOVE
 351+ 39C5 50 39                        dw      NEEDS_FN
 352+ 39C7 54 2D 31 27                  dw      PAD, ONE, F_OPEN
 352+ 39CB F9 23
 353+ 39CD 19 25                        dw      ZEQUAL
 354+ 39CF 8F 20                        dw      ZBRANCH
 355+ 39D1 08 00                        dw      Needs_1 - $
 356+ 39D3 45 38                        dw          F_INCLUDE
 357+ 39D5 82 20                        dw      BRANCH
 358+ 39D7 04 00                        dw      Needs_2 - $
 359+ 39D9              Needs_1:
 360+ 39D9              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 39D9              //              dw          LIT, 43, MESSAGE
 362+ 39D9 AF 25                        dw          DROP
 363+ 39DB              Needs_2:
 364+ 39DB F4 24                        dw      EXIT                    // ;
 365+ 39DD
 366+ 39DD
 367+ 39DD                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 39DD             >
 367+ 39DD             >Dict_Ptr        defl    $
 367+ 39DD             >
 367+ 39DD             >//              ______________________________________________________________________
 367+ 39DD             >//              Heap part
 367+ 39DD             >
 367+ 39DD             >
 367+ 39DD             >                org     (Heap_Ptr & $1FFF) + $E000
 367+ EB4C             >
 367+ EB4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ EB4C             >Latest_Definition defl  Heap_Ptr
 367+ EB4C             >
 367+ EB4C             >                // dummy db directives used to calculate length of namec
 367+ EB4C 4E 44 4F 4D >                db      "NDOM"
 367+ EB50             >len_NFA         defl    $ - temp_NFA
 367+ EB50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ EB4C             >
 367+ EB4C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ EB4D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 367+ EB51             >                org     $-1                 // alter last byte of Name just above to set
 367+ EB50 CD          >                db      {b $} | END_BIT     // msb as name end
 367+ EB51             >
 367+ EB51 41 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 367+ EB53             >Prev_Ptr        defl    Heap_Ptr
 367+ EB53             >
 367+ EB53             >mirror_Ptr      defl    $
 367+ EB53             >
 367+ EB53 DF 39       >                dw      Dict_Ptr + 2        // xt
 367+ EB55             >Heap_Ptr        defl    $ - $E000           // save current HP
 367+ EB55             >
 367+ EB55             >Current_HP      defl  $ - $E000             // used to set HP once!
 367+ EB55             >
 367+ EB55             >//              ______________________________________________________________________
 367+ EB55             >//              Dictionary part
 367+ EB55             >
 367+ EB55             >                org     Dict_Ptr
 367+ 39DD             >
 367+ 39DD 53 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 367+ 39DF             >
 367+ 39DF             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 39DF CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 367+ 39E2             >
 367+ 39E2             >
 367+ 39E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 39E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 39E2             >
 367+ 39E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 39E2              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 39E2 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 39E6 7C 5C 3C 3E
 369+ 39EA 22
 370+ 39EB 00                           db 0
 371+ 39EC
 372+ 39EC                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 372+ 39EC             >
 372+ 39EC             >Dict_Ptr        defl    $
 372+ 39EC             >
 372+ 39EC             >//              ______________________________________________________________________
 372+ 39EC             >//              Heap part
 372+ 39EC             >
 372+ 39EC             >
 372+ 39EC             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ EB55             >
 372+ EB55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ EB55             >Latest_Definition defl  Heap_Ptr
 372+ EB55             >
 372+ EB55             >                // dummy db directives used to calculate length of namec
 372+ EB55 4E 43 44 4D >                db      "NCDM"
 372+ EB59             >len_NFA         defl    $ - temp_NFA
 372+ EB59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ EB55             >
 372+ EB55 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ EB56 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 372+ EB5A             >                org     $-1                 // alter last byte of Name just above to set
 372+ EB59 CD          >                db      {b $} | END_BIT     // msb as name end
 372+ EB5A             >
 372+ EB5A 4C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ EB5C             >Prev_Ptr        defl    Heap_Ptr
 372+ EB5C             >
 372+ EB5C             >mirror_Ptr      defl    $
 372+ EB5C             >
 372+ EB5C EE 39       >                dw      Dict_Ptr + 2        // xt
 372+ EB5E             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ EB5E             >
 372+ EB5E             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ EB5E             >
 372+ EB5E             >//              ______________________________________________________________________
 372+ EB5E             >//              Dictionary part
 372+ EB5E             >
 372+ EB5E             >                org     Dict_Ptr
 372+ 39EC             >
 372+ 39EC 5C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 39EE             >
 372+ 39EE             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 39EE CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 372+ 39F1             >
 372+ 39F1             >
 372+ 39F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 39F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 39F1             >
 372+ 39F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 39F1              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 39F1 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 39F5 24 5F 7B 7D
 374+ 39F9 7E
 375+ 39FA 00                           db 0
 376+ 39FB
 377+ 39FB              // Replace illegal character in filename using the map here above
 378+ 39FB              // at the moment we need only  "
 379+ 39FB                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 39FB             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 39FB             >
 379+ 39FB             >Dict_Ptr        defl    $
 379+ 39FB             >
 379+ 39FB             >//              ______________________________________________________________________
 379+ 39FB             >//              Heap part
 379+ 39FB             >
 379+ 39FB             >
 379+ 39FB             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB5E             >
 379+ EB5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB5E             >Latest_Definition defl  Heap_Ptr
 379+ EB5E             >
 379+ EB5E             >                // dummy db directives used to calculate length of namec
 379+ EB5E 4D 41 50 2D >                db      "MAP-FN"
 379+ EB62 46 4E       >
 379+ EB64             >len_NFA         defl    $ - temp_NFA
 379+ EB64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB5E             >
 379+ EB5E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB5F 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB63 46 4E       >
 379+ EB65             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB64 CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB65             >
 379+ EB65 55 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB67             >Prev_Ptr        defl    Heap_Ptr
 379+ EB67             >
 379+ EB67             >mirror_Ptr      defl    $
 379+ EB67             >
 379+ EB67 FD 39       >                dw      Dict_Ptr + 2        // xt
 379+ EB69             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB69             >
 379+ EB69             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB69             >
 379+ EB69             >//              ______________________________________________________________________
 379+ EB69             >//              Dictionary part
 379+ EB69             >
 379+ EB69             >                org     Dict_Ptr
 379+ 39FB             >
 379+ 39FB 67 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 39FD             >
 379+ 39FD             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 39FD CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 3A00             >
 379+ 3A00             >
 379+ 3A00             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 3A00             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 3A00             >
 379+ 3A00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 3A00 BD 2B CA 2B                  dw      COUNT, BOUNDS
 381+ 3A04 CC 20                        dw      C_DO
 382+ 3A06              Needs_3:
 383+ 3A06 EE 39 DF 39                  dw          NCDM, NDOM, LIT, 10
 383+ 3A0A 3D 20 0A 00
 384+ 3A0E D2 20 49 26                  dw          I, CFETCH
 385+ 3A12 F2 21                        dw          C_MAP
 386+ 3A14 D2 20 52 26                  dw          I, CSTORE
 387+ 3A18              Needs_4:
 388+ 3A18 7A 20                        dw      C_LOOP
 389+ 3A1A EC FF                        dw      Needs_3 - $
 390+ 3A1C F4 24                        dw      EXIT
 391+ 3A1E
 392+ 3A1E
 393+ 3A1E              // include  "path/cccc.f" if cccc is not defined
 394+ 3A1E              // filename cccc.f is temporary stored at NEEDS-W
 395+ 3A1E                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 395+ 3A1E             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 395+ 3A1E             >
 395+ 3A1E             >Dict_Ptr        defl    $
 395+ 3A1E             >
 395+ 3A1E             >//              ______________________________________________________________________
 395+ 3A1E             >//              Heap part
 395+ 3A1E             >
 395+ 3A1E             >
 395+ 3A1E             >                org     (Heap_Ptr & $1FFF) + $E000
 395+ EB69             >
 395+ EB69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ EB69             >Latest_Definition defl  Heap_Ptr
 395+ EB69             >
 395+ EB69             >                // dummy db directives used to calculate length of namec
 395+ EB69 4E 45 45 44 >                db      "NEEDS-F"
 395+ EB6D 53 2D 46    >
 395+ EB70             >len_NFA         defl    $ - temp_NFA
 395+ EB70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ EB69             >
 395+ EB69 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ EB6A 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 395+ EB6E 53 2D 46    >
 395+ EB71             >                org     $-1                 // alter last byte of Name just above to set
 395+ EB70 C6          >                db      {b $} | END_BIT     // msb as name end
 395+ EB71             >
 395+ EB71 5E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 395+ EB73             >Prev_Ptr        defl    Heap_Ptr
 395+ EB73             >
 395+ EB73             >mirror_Ptr      defl    $
 395+ EB73             >
 395+ EB73 20 3A       >                dw      Dict_Ptr + 2        // xt
 395+ EB75             >Heap_Ptr        defl    $ - $E000           // save current HP
 395+ EB75             >
 395+ EB75             >Current_HP      defl  $ - $E000             // used to set HP once!
 395+ EB75             >
 395+ EB75             >//              ______________________________________________________________________
 395+ EB75             >//              Dictionary part
 395+ EB75             >
 395+ EB75             >                org     Dict_Ptr
 395+ 3A1E             >
 395+ 3A1E 73 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 395+ 3A20             >
 395+ 3A20             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 3A20 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 3A23             >
 395+ 3A23             >
 395+ 3A23             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 3A23             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 3A23             >
 395+ 3A23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 3A23 A7 2F                        dw      LFIND
 397+ 3A25 8F 20                        dw      ZBRANCH
 398+ 3A27 0A 00                        dw      Needs_5 - $
 399+ 3A29
 400+ 3A29 AF 25 FF 25                  dw          DROP, TWO_DROP
 401+ 3A2D 82 20                        dw      BRANCH
 402+ 3A2F 2C 00                        dw      Needs_6 - $
 403+ 3A31              Needs_5:
 404+ 3A31 28 39                        dw          NEEDS_W
 405+ 3A33 3D 20 23 00                  dw          LIT, 35
 406+ 3A37 2B 2D                        dw          ERASE                   // a
 407+ 3A39 4F 28 49 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 407+ 3A3D 5F 25
 408+ 3A3F 4F 28 A6 25                  dw          HERE, OVER              // a n here n
 409+ 3A43 28 39 C3 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 409+ 3A47 35 24
 410+ 3A49 28 39 FD 39                  dw          NEEDS_W, NEEDS_CHECK
 411+ 3A4D 28 39 46 25                  dw          NEEDS_W, PLUS           // a a1+1
 412+ 3A51 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 413+ 3A55 C3 25 3E 26                  dw          SWAP, STORE             // a
 414+ 3A59 A8 39                        dw          NEEDS_SLASH
 415+ 3A5B              Needs_6:
 416+ 3A5B F4 24                        dw      EXIT
 417+ 3A5D
 418+ 3A5D
 419+ 3A5D              // check for cccc exists in vocabulary
 420+ 3A5D              // if it doesn't then  INCLUDE  inc/cccc.F
 421+ 3A5D              // search in inc subdirectory
 422+ 3A5D                              Colon_Def NEEDS, "NEEDS", is_normal
 422+ 3A5D             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 422+ 3A5D             >
 422+ 3A5D             >Dict_Ptr        defl    $
 422+ 3A5D             >
 422+ 3A5D             >//              ______________________________________________________________________
 422+ 3A5D             >//              Heap part
 422+ 3A5D             >
 422+ 3A5D             >
 422+ 3A5D             >                org     (Heap_Ptr & $1FFF) + $E000
 422+ EB75             >
 422+ EB75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ EB75             >Latest_Definition defl  Heap_Ptr
 422+ EB75             >
 422+ EB75             >                // dummy db directives used to calculate length of namec
 422+ EB75 4E 45 45 44 >                db      "NEEDS"
 422+ EB79 53          >
 422+ EB7A             >len_NFA         defl    $ - temp_NFA
 422+ EB7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ EB75             >
 422+ EB75 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ EB76 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 422+ EB7A 53          >
 422+ EB7B             >                org     $-1                 // alter last byte of Name just above to set
 422+ EB7A D3          >                db      {b $} | END_BIT     // msb as name end
 422+ EB7B             >
 422+ EB7B 69 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 422+ EB7D             >Prev_Ptr        defl    Heap_Ptr
 422+ EB7D             >
 422+ EB7D             >mirror_Ptr      defl    $
 422+ EB7D             >
 422+ EB7D 5F 3A       >                dw      Dict_Ptr + 2        // xt
 422+ EB7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 422+ EB7F             >
 422+ EB7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 422+ EB7F             >
 422+ EB7F             >//              ______________________________________________________________________
 422+ EB7F             >//              Dictionary part
 422+ EB7F             >
 422+ EB7F             >                org     Dict_Ptr
 422+ 3A5D             >
 422+ 3A5D 7D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 422+ 3A5F             >
 422+ 3A5F             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 3A5F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 3A62             >
 422+ 3A62             >
 422+ 3A62             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 3A62             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 3A62             >
 422+ 3A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 3A62 D1 27 34 26                  dw      TO_IN, FETCH
 424+ 3A66 CA 25                        dw      DUP
 425+ 3A68 92 39 20 3A                  dw      NEEDS_INC, NEEDS_PATH
 426+ 3A6C D1 27 3E 26                  dw      TO_IN, STORE
 427+ 3A70 9D 39 20 3A                  dw      NEEDS_LIB, NEEDS_PATH
 428+ 3A74 D1 27 3E 26                  dw      TO_IN, STORE
 429+ 3A78 A7 2F                        dw      LFIND
 430+ 3A7A 8F 20                        dw      ZBRANCH
 431+ 3A7C 08 00                        dw      Needs_10 - $
 432+ 3A7E FF 25                        dw          TWO_DROP
 433+ 3A80 82 20                        dw      BRANCH
 434+ 3A82 10 00                        dw      Needs_11 - $
 435+ 3A84              Needs_10:
 436+ 3A84 28 39 BD 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 436+ 3A88 11 2C 18 29
 437+ 3A8C 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 437+ 3A90 72 35
 438+ 3A92              Needs_11:
 439+ 3A92 F4 24                        dw      EXIT
 440+ 3A94
 441+ 3A94
 442+ 3A94              //  ______________________________________________________________________
 443+ 3A94              //
 444+ 3A94              // load         n --
 445+ 3A94                              Colon_Def LOAD, "LOAD", is_normal
 445+ 3A94             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 445+ 3A94             >
 445+ 3A94             >Dict_Ptr        defl    $
 445+ 3A94             >
 445+ 3A94             >//              ______________________________________________________________________
 445+ 3A94             >//              Heap part
 445+ 3A94             >
 445+ 3A94             >
 445+ 3A94             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ EB7F             >
 445+ EB7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ EB7F             >Latest_Definition defl  Heap_Ptr
 445+ EB7F             >
 445+ EB7F             >                // dummy db directives used to calculate length of namec
 445+ EB7F 4C 4F 41 44 >                db      "LOAD"
 445+ EB83             >len_NFA         defl    $ - temp_NFA
 445+ EB83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ EB7F             >
 445+ EB7F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ EB80 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 445+ EB84             >                org     $-1                 // alter last byte of Name just above to set
 445+ EB83 C4          >                db      {b $} | END_BIT     // msb as name end
 445+ EB84             >
 445+ EB84 75 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ EB86             >Prev_Ptr        defl    Heap_Ptr
 445+ EB86             >
 445+ EB86             >mirror_Ptr      defl    $
 445+ EB86             >
 445+ EB86 96 3A       >                dw      Dict_Ptr + 2        // xt
 445+ EB88             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ EB88             >
 445+ EB88             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ EB88             >
 445+ EB88             >//              ______________________________________________________________________
 445+ EB88             >//              Dictionary part
 445+ EB88             >
 445+ EB88             >                org     Dict_Ptr
 445+ 3A94             >
 445+ 3A94 86 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 3A96             >
 445+ 3A96             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 3A96 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 3A99             >
 445+ 3A99             >
 445+ 3A99             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 3A99             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 3A99             >
 445+ 3A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 3A99 CB 27 34 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 446+ 3A9D FE 24
 447+ 3A9F D1 27 34 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 447+ 3AA3 FE 24
 448+ 3AA5
 449+ 3AA5 2A 27 D1 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 449+ 3AA9 3E 26
 450+ 3AAB 62 27 FE 34                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 450+ 3AAF CB 27 3E 26
 451+ 3AB3 6A 31                        dw      INTERPRET               // interpret
 452+ 3AB5
 453+ 3AB5 09 25 D1 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 453+ 3AB9 3E 26
 454+ 3ABB 09 25 CB 27                  dw      R_TO, BLK, STORE        // r> blk !
 454+ 3ABF 3E 26
 455+ 3AC1 F4 24                        dw      EXIT                    // ;
 456+ 3AC3
 457+ 3AC3              //  ______________________________________________________________________
 458+ 3AC3              //
 459+ 3AC3              // -->          --
 460+ 3AC3                              Colon_Def LOAD_NEXT, "-->", is_immediate
 460+ 3AC3             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 460+ 3AC3             >
 460+ 3AC3             >Dict_Ptr        defl    $
 460+ 3AC3             >
 460+ 3AC3             >//              ______________________________________________________________________
 460+ 3AC3             >//              Heap part
 460+ 3AC3             >
 460+ 3AC3             >
 460+ 3AC3             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ EB88             >
 460+ EB88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ EB88             >Latest_Definition defl  Heap_Ptr
 460+ EB88             >
 460+ EB88             >                // dummy db directives used to calculate length of namec
 460+ EB88 2D 2D 3E    >                db      "-->"
 460+ EB8B             >len_NFA         defl    $ - temp_NFA
 460+ EB8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ EB88             >
 460+ EB88 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ EB89 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 460+ EB8C             >                org     $-1                 // alter last byte of Name just above to set
 460+ EB8B BE          >                db      {b $} | END_BIT     // msb as name end
 460+ EB8C             >
 460+ EB8C 7F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ EB8E             >Prev_Ptr        defl    Heap_Ptr
 460+ EB8E             >
 460+ EB8E             >mirror_Ptr      defl    $
 460+ EB8E             >
 460+ EB8E C5 3A       >                dw      Dict_Ptr + 2        // xt
 460+ EB90             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ EB90             >
 460+ EB90             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ EB90             >
 460+ EB90             >//              ______________________________________________________________________
 460+ EB90             >//              Dictionary part
 460+ EB90             >
 460+ EB90             >                org     Dict_Ptr
 460+ 3AC3             >
 460+ 3AC3 8E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 3AC5             >
 460+ 3AC5             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 3AC5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 3AC8             >
 460+ 3AC8             >
 460+ 3AC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 3AC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 3AC8             >
 460+ 3AC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 3AC8 E0 2A                        dw      QLOADING                // ?loading
 462+ 3ACA 2A 27 D1 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 462+ 3ACE 3E 26
 463+ 3AD0 62 27                        dw      BSCR                    // b/scr
 464+ 3AD2 CB 27 34 26                  dw      BLK, FETCH              // blk @
 465+ 3AD6 A6 25                        dw      OVER                    // over
 466+ 3AD8 23 35                        dw      MOD                     // mod
 467+ 3ADA 8E 28                        dw      SUBTRACT                // -
 468+ 3ADC CB 27 1C 26                  dw      BLK, PLUSSTORE          // +!
 469+ 3AE0 F4 24                        dw      EXIT                    // ;
 470+ 3AE2
 471+ 3AE2              //  ______________________________________________________________________
 472+ 3AE2              //
 473+ 3AE2              // '            -- xt
 474+ 3AE2                              Colon_Def TICK, "'", is_normal
 474+ 3AE2             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 474+ 3AE2             >
 474+ 3AE2             >Dict_Ptr        defl    $
 474+ 3AE2             >
 474+ 3AE2             >//              ______________________________________________________________________
 474+ 3AE2             >//              Heap part
 474+ 3AE2             >
 474+ 3AE2             >
 474+ 3AE2             >                org     (Heap_Ptr & $1FFF) + $E000
 474+ EB90             >
 474+ EB90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ EB90             >Latest_Definition defl  Heap_Ptr
 474+ EB90             >
 474+ EB90             >                // dummy db directives used to calculate length of namec
 474+ EB90 27          >                db      "'"
 474+ EB91             >len_NFA         defl    $ - temp_NFA
 474+ EB91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ EB90             >
 474+ EB90 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ EB91 27          >                db      "'"               // name string in 7-bit ascii, but
 474+ EB92             >                org     $-1                 // alter last byte of Name just above to set
 474+ EB91 A7          >                db      {b $} | END_BIT     // msb as name end
 474+ EB92             >
 474+ EB92 88 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 474+ EB94             >Prev_Ptr        defl    Heap_Ptr
 474+ EB94             >
 474+ EB94             >mirror_Ptr      defl    $
 474+ EB94             >
 474+ EB94 E4 3A       >                dw      Dict_Ptr + 2        // xt
 474+ EB96             >Heap_Ptr        defl    $ - $E000           // save current HP
 474+ EB96             >
 474+ EB96             >Current_HP      defl  $ - $E000             // used to set HP once!
 474+ EB96             >
 474+ EB96             >//              ______________________________________________________________________
 474+ EB96             >//              Dictionary part
 474+ EB96             >
 474+ EB96             >                org     Dict_Ptr
 474+ 3AE2             >
 474+ 3AE2 94 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 474+ 3AE4             >
 474+ 3AE4             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 3AE4 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 3AE7             >
 474+ 3AE7             >
 474+ 3AE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 3AE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 3AE7             >
 474+ 3AE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 3AE7 A7 2F                        dw      LFIND                   // -find
 476+ 3AE9 19 25                        dw      ZEQUAL                  // 0=
 477+ 3AEB 2A 27 83 2A                  dw      ZERO, QERROR            // 0 ?error
 478+ 3AEF AF 25                        dw      DROP                    // drop
 479+ 3AF1 F4 24                        dw      EXIT                    // ;
 480+ 3AF3
 481+ 3AF3              //  ______________________________________________________________________
 482+ 3AF3              //
 483+ 3AF3              // forget       -- cccc
 484+ 3AF3                              Colon_Def FORGET, "FORGET", is_normal
 484+ 3AF3             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 484+ 3AF3             >
 484+ 3AF3             >Dict_Ptr        defl    $
 484+ 3AF3             >
 484+ 3AF3             >//              ______________________________________________________________________
 484+ 3AF3             >//              Heap part
 484+ 3AF3             >
 484+ 3AF3             >
 484+ 3AF3             >                org     (Heap_Ptr & $1FFF) + $E000
 484+ EB96             >
 484+ EB96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ EB96             >Latest_Definition defl  Heap_Ptr
 484+ EB96             >
 484+ EB96             >                // dummy db directives used to calculate length of namec
 484+ EB96 46 4F 52 47 >                db      "FORGET"
 484+ EB9A 45 54       >
 484+ EB9C             >len_NFA         defl    $ - temp_NFA
 484+ EB9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ EB96             >
 484+ EB96 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ EB97 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 484+ EB9B 45 54       >
 484+ EB9D             >                org     $-1                 // alter last byte of Name just above to set
 484+ EB9C D4          >                db      {b $} | END_BIT     // msb as name end
 484+ EB9D             >
 484+ EB9D 90 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 484+ EB9F             >Prev_Ptr        defl    Heap_Ptr
 484+ EB9F             >
 484+ EB9F             >mirror_Ptr      defl    $
 484+ EB9F             >
 484+ EB9F F5 3A       >                dw      Dict_Ptr + 2        // xt
 484+ EBA1             >Heap_Ptr        defl    $ - $E000           // save current HP
 484+ EBA1             >
 484+ EBA1             >Current_HP      defl  $ - $E000             // used to set HP once!
 484+ EBA1             >
 484+ EBA1             >//              ______________________________________________________________________
 484+ EBA1             >//              Dictionary part
 484+ EBA1             >
 484+ EBA1             >                org     Dict_Ptr
 484+ 3AF3             >
 484+ 3AF3 9F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 484+ 3AF5             >
 484+ 3AF5             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 3AF5 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 3AF8             >
 484+ 3AF8             >
 484+ 3AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 3AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 3AF8             >
 484+ 3AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 3AF8 EF 27 34 26                  dw      CURRENT, FETCH          // current @
 486+ 3AFC E9 27 34 26                  dw      CONTEXT, FETCH          // context @
 487+ 3B00 8E 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 487+ 3B04 17 00 83 2A
 488+ 3B08 E4 3A 02 2A                  dw      TICK, TO_BODY           // ' >body
 489+ 3B0C CA 25 A1 27                  dw      DUP, FENCE, FETCH       // dup fence @
 489+ 3B10 34 26
 490+ 3B12 A5 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 490+ 3B16 15 00 83 2A
 491+ 3B1A CA 25 37 2A                  dw      DUP, NFA                // dup nfa
 492+ 3B1E
 493+ 3B1E                          //  dw      DUP
 494+ 3B1E                          //  dw      LIT, $E000, LESS
 495+ 3B1E                          //  dw      MMU7_FETCH, ONE, EQUALS
 496+ 3B1E                          //  dw      OR_OP, NOT_OP
 497+ 3B1E                          //  dw      ZBRANCH
 498+ 3B1E                          //  dw      Forget_then - $
 499+ 3B1E
 500+ 3B1E 40 29 63 29                  dw      MMU7_FETCH, FROM_FAR
 501+ 3B22 BF 27 3E 26                  dw      HP, STORE
 502+ 3B26 CA 25 2C 2A                  dw      DUP, CFA, CELL_MINUS
 502+ 3B2A 79 25
 503+ 3B2C              // Forget_then:
 504+ 3B2C A7 27 3E 26                  dw      DP, STORE               // dp !
 505+ 3B30 42 2A 34 26                  dw      LFA, FETCH              // lfa @
 506+ 3B34 E9 27 34 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 506+ 3B38 3E 26
 507+ 3B3A F4 24                        dw      EXIT                    // ;
 508+ 3B3C
 509+ 3B3C              //  ______________________________________________________________________
 510+ 3B3C              //
 511+ 3B3C              // marker       -- cccc
 512+ 3B3C                              Colon_Def MARKER, "MARKER", is_immediate
 512+ 3B3C             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 512+ 3B3C             >
 512+ 3B3C             >Dict_Ptr        defl    $
 512+ 3B3C             >
 512+ 3B3C             >//              ______________________________________________________________________
 512+ 3B3C             >//              Heap part
 512+ 3B3C             >
 512+ 3B3C             >
 512+ 3B3C             >                org     (Heap_Ptr & $1FFF) + $E000
 512+ EBA1             >
 512+ EBA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ EBA1             >Latest_Definition defl  Heap_Ptr
 512+ EBA1             >
 512+ EBA1             >                // dummy db directives used to calculate length of namec
 512+ EBA1 4D 41 52 4B >                db      "MARKER"
 512+ EBA5 45 52       >
 512+ EBA7             >len_NFA         defl    $ - temp_NFA
 512+ EBA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ EBA1             >
 512+ EBA1 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ EBA2 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 512+ EBA6 45 52       >
 512+ EBA8             >                org     $-1                 // alter last byte of Name just above to set
 512+ EBA7 D2          >                db      {b $} | END_BIT     // msb as name end
 512+ EBA8             >
 512+ EBA8 96 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 512+ EBAA             >Prev_Ptr        defl    Heap_Ptr
 512+ EBAA             >
 512+ EBAA             >mirror_Ptr      defl    $
 512+ EBAA             >
 512+ EBAA 3E 3B       >                dw      Dict_Ptr + 2        // xt
 512+ EBAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 512+ EBAC             >
 512+ EBAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 512+ EBAC             >
 512+ EBAC             >//              ______________________________________________________________________
 512+ EBAC             >//              Dictionary part
 512+ EBAC             >
 512+ EBAC             >                org     Dict_Ptr
 512+ 3B3C             >
 512+ 3B3C AA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 512+ 3B3E             >
 512+ 3B3E             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 3B3E CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 3B41             >
 512+ 3B41             >
 512+ 3B41             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 3B41             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 3B41             >
 512+ 3B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 3B41 95 2B                        dw      CBUILDS
 514+ 3B43 AD 27 34 26                  dw      VOC_LINK, FETCH, COMMA
 514+ 3B47 65 28
 515+ 3B49 EF 27 34 26                  dw      CURRENT, FETCH, COMMA
 515+ 3B4D 65 28
 516+ 3B4F E9 27 34 26                  dw      CONTEXT, FETCH, COMMA
 516+ 3B53 65 28
 517+ 3B55 EF 27 34 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 517+ 3B59 34 26 65 28
 518+ 3B5D F3 29 51 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 518+ 3B61 42 2A 34 26
 518+ 3B65 65 28
 519+ 3B67 A0 2B                        dw      DOES_TO
 520+ 3B69 CA 25 34 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 520+ 3B6D AD 27 3E 26
 520+ 3B71 75 25
 521+ 3B73 CA 25 34 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 521+ 3B77 EF 27 3E 26
 521+ 3B7B 75 25
 522+ 3B7D CA 25 34 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 522+ 3B81 E9 27 3E 26
 522+ 3B85 75 25
 523+ 3B87 CA 25 34 26                  dw      DUP, FETCH
 524+ 3B8B                          //  dw      DUP, QHEAPP
 525+ 3B8B                          //  dw      ZBRANCH
 526+ 3B8B                          //  dw      Marker_then - $
 527+ 3B8B CA 25 BF 27                  dw          DUP, HP, STORE
 527+ 3B8F 3E 26
 528+ 3B91 51 2A 2C 2A                  dw          PFA, CFA, CELL_MINUS
 528+ 3B95 79 25
 529+ 3B97              // Marker_then:
 530+ 3B97 A7 27 3E 26                  dw      DP, STORE, CELL_PLUS
 530+ 3B9B 75 25
 531+ 3B9D 34 26 EF 27                  dw      FETCH, CURRENT, FETCH, STORE
 531+ 3BA1 34 26 3E 26
 532+ 3BA5 F4 24                        dw      EXIT
 533+ 3BA7
 534+ 3BA7              //  ______________________________________________________________________
 535+ 3BA7              //
 536+ 3BA7              // spaces       n --
 537+ 3BA7                              Colon_Def SPACES, "SPACES", is_normal
 537+ 3BA7             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 537+ 3BA7             >
 537+ 3BA7             >Dict_Ptr        defl    $
 537+ 3BA7             >
 537+ 3BA7             >//              ______________________________________________________________________
 537+ 3BA7             >//              Heap part
 537+ 3BA7             >
 537+ 3BA7             >
 537+ 3BA7             >                org     (Heap_Ptr & $1FFF) + $E000
 537+ EBAC             >
 537+ EBAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ EBAC             >Latest_Definition defl  Heap_Ptr
 537+ EBAC             >
 537+ EBAC             >                // dummy db directives used to calculate length of namec
 537+ EBAC 53 50 41 43 >                db      "SPACES"
 537+ EBB0 45 53       >
 537+ EBB2             >len_NFA         defl    $ - temp_NFA
 537+ EBB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ EBAC             >
 537+ EBAC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ EBAD 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 537+ EBB1 45 53       >
 537+ EBB3             >                org     $-1                 // alter last byte of Name just above to set
 537+ EBB2 D3          >                db      {b $} | END_BIT     // msb as name end
 537+ EBB3             >
 537+ EBB3 A1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 537+ EBB5             >Prev_Ptr        defl    Heap_Ptr
 537+ EBB5             >
 537+ EBB5             >mirror_Ptr      defl    $
 537+ EBB5             >
 537+ EBB5 A9 3B       >                dw      Dict_Ptr + 2        // xt
 537+ EBB7             >Heap_Ptr        defl    $ - $E000           // save current HP
 537+ EBB7             >
 537+ EBB7             >Current_HP      defl  $ - $E000             // used to set HP once!
 537+ EBB7             >
 537+ EBB7             >//              ______________________________________________________________________
 537+ EBB7             >//              Dictionary part
 537+ EBB7             >
 537+ EBB7             >                org     Dict_Ptr
 537+ 3BA7             >
 537+ 3BA7 B5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 537+ 3BA9             >
 537+ 3BA9             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 3BA9 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 3BAC             >
 537+ 3BAC             >
 537+ 3BAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 3BAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 3BAC             >
 537+ 3BAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 3BAC 2A 27 DE 28                  dw      ZERO, MAX
 539+ 3BB0 2A 27 A4 20                  dw      ZERO, C_Q_DO
 540+ 3BB4 08 00                        dw      Spaces_Leave - $
 541+ 3BB6              Spaces_Loop:
 542+ 3BB6 18 29                        dw          SPACE
 543+ 3BB8 7A 20                        dw      C_LOOP
 544+ 3BBA FC FF                        dw      Spaces_Loop - $
 545+ 3BBC              Spaces_Leave:
 546+ 3BBC F4 24                        dw      EXIT                    // ;
 547+ 3BBE
 548+ 3BBE              //  ______________________________________________________________________
 549+ 3BBE              //
 550+ 3BBE              // <#           --
 551+ 3BBE                              Colon_Def BEGIN_DASH, "<#", is_normal
 551+ 3BBE             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 551+ 3BBE             >
 551+ 3BBE             >Dict_Ptr        defl    $
 551+ 3BBE             >
 551+ 3BBE             >//              ______________________________________________________________________
 551+ 3BBE             >//              Heap part
 551+ 3BBE             >
 551+ 3BBE             >
 551+ 3BBE             >                org     (Heap_Ptr & $1FFF) + $E000
 551+ EBB7             >
 551+ EBB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ EBB7             >Latest_Definition defl  Heap_Ptr
 551+ EBB7             >
 551+ EBB7             >                // dummy db directives used to calculate length of namec
 551+ EBB7 3C 23       >                db      "<#"
 551+ EBB9             >len_NFA         defl    $ - temp_NFA
 551+ EBB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ EBB7             >
 551+ EBB7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ EBB8 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 551+ EBBA             >                org     $-1                 // alter last byte of Name just above to set
 551+ EBB9 A3          >                db      {b $} | END_BIT     // msb as name end
 551+ EBBA             >
 551+ EBBA AC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 551+ EBBC             >Prev_Ptr        defl    Heap_Ptr
 551+ EBBC             >
 551+ EBBC             >mirror_Ptr      defl    $
 551+ EBBC             >
 551+ EBBC C0 3B       >                dw      Dict_Ptr + 2        // xt
 551+ EBBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 551+ EBBE             >
 551+ EBBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 551+ EBBE             >
 551+ EBBE             >//              ______________________________________________________________________
 551+ EBBE             >//              Dictionary part
 551+ EBBE             >
 551+ EBBE             >                org     Dict_Ptr
 551+ 3BBE             >
 551+ 3BBE BC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 551+ 3BC0             >
 551+ 3BC0             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 3BC0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 3BC3             >
 551+ 3BC3             >
 551+ 3BC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 3BC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 3BC3             >
 551+ 3BC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 3BC3 54 2D 19 28                  dw      PAD, HLD, STORE
 552+ 3BC7 3E 26
 553+ 3BC9 F4 24                        dw      EXIT
 554+ 3BCB
 555+ 3BCB              //  ______________________________________________________________________
 556+ 3BCB              //
 557+ 3BCB              // #>           --
 558+ 3BCB                              Colon_Def DASH_END, "#>", is_normal
 558+ 3BCB             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 558+ 3BCB             >
 558+ 3BCB             >Dict_Ptr        defl    $
 558+ 3BCB             >
 558+ 3BCB             >//              ______________________________________________________________________
 558+ 3BCB             >//              Heap part
 558+ 3BCB             >
 558+ 3BCB             >
 558+ 3BCB             >                org     (Heap_Ptr & $1FFF) + $E000
 558+ EBBE             >
 558+ EBBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ EBBE             >Latest_Definition defl  Heap_Ptr
 558+ EBBE             >
 558+ EBBE             >                // dummy db directives used to calculate length of namec
 558+ EBBE 23 3E       >                db      "#>"
 558+ EBC0             >len_NFA         defl    $ - temp_NFA
 558+ EBC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ EBBE             >
 558+ EBBE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ EBBF 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 558+ EBC1             >                org     $-1                 // alter last byte of Name just above to set
 558+ EBC0 BE          >                db      {b $} | END_BIT     // msb as name end
 558+ EBC1             >
 558+ EBC1 B7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 558+ EBC3             >Prev_Ptr        defl    Heap_Ptr
 558+ EBC3             >
 558+ EBC3             >mirror_Ptr      defl    $
 558+ EBC3             >
 558+ EBC3 CD 3B       >                dw      Dict_Ptr + 2        // xt
 558+ EBC5             >Heap_Ptr        defl    $ - $E000           // save current HP
 558+ EBC5             >
 558+ EBC5             >Current_HP      defl  $ - $E000             // used to set HP once!
 558+ EBC5             >
 558+ EBC5             >//              ______________________________________________________________________
 558+ EBC5             >//              Dictionary part
 558+ EBC5             >
 558+ EBC5             >                org     Dict_Ptr
 558+ 3BCB             >
 558+ 3BCB C3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 558+ 3BCD             >
 558+ 3BCD             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 3BCD CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 3BD0             >
 558+ 3BD0             >
 558+ 3BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 3BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 3BD0             >
 558+ 3BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 3BD0 FF 25                        dw      TWO_DROP
 560+ 3BD2 19 28 34 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 560+ 3BD6 54 2D A6 25
 560+ 3BDA 8E 28
 561+ 3BDC F4 24                        dw      EXIT
 562+ 3BDE
 563+ 3BDE              //  ______________________________________________________________________
 564+ 3BDE              //
 565+ 3BDE              // sign         n d -- d
 566+ 3BDE                              Colon_Def SIGN, "SIGN", is_normal
 566+ 3BDE             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 566+ 3BDE             >
 566+ 3BDE             >Dict_Ptr        defl    $
 566+ 3BDE             >
 566+ 3BDE             >//              ______________________________________________________________________
 566+ 3BDE             >//              Heap part
 566+ 3BDE             >
 566+ 3BDE             >
 566+ 3BDE             >                org     (Heap_Ptr & $1FFF) + $E000
 566+ EBC5             >
 566+ EBC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ EBC5             >Latest_Definition defl  Heap_Ptr
 566+ EBC5             >
 566+ EBC5             >                // dummy db directives used to calculate length of namec
 566+ EBC5 53 49 47 4E >                db      "SIGN"
 566+ EBC9             >len_NFA         defl    $ - temp_NFA
 566+ EBC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ EBC5             >
 566+ EBC5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ EBC6 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 566+ EBCA             >                org     $-1                 // alter last byte of Name just above to set
 566+ EBC9 CE          >                db      {b $} | END_BIT     // msb as name end
 566+ EBCA             >
 566+ EBCA BE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 566+ EBCC             >Prev_Ptr        defl    Heap_Ptr
 566+ EBCC             >
 566+ EBCC             >mirror_Ptr      defl    $
 566+ EBCC             >
 566+ EBCC E0 3B       >                dw      Dict_Ptr + 2        // xt
 566+ EBCE             >Heap_Ptr        defl    $ - $E000           // save current HP
 566+ EBCE             >
 566+ EBCE             >Current_HP      defl  $ - $E000             // used to set HP once!
 566+ EBCE             >
 566+ EBCE             >//              ______________________________________________________________________
 566+ EBCE             >//              Dictionary part
 566+ EBCE             >
 566+ EBCE             >                org     Dict_Ptr
 566+ 3BDE             >
 566+ 3BDE CC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 566+ 3BE0             >
 566+ 3BE0             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 3BE0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 3BE3             >
 566+ 3BE3             >
 566+ 3BE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 3BE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 3BE3             >
 566+ 3BE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 3BE3 2B 25                        dw      ZLESS
 568+ 3BE5 8F 20                        dw      ZBRANCH
 569+ 3BE7 08 00                        dw      Sign_Endif - $
 570+ 3BE9 3D 20 2D 00                  dw          LIT, 45, HOLD
 570+ 3BED 41 2D
 571+ 3BEF              Sign_Endif:
 572+ 3BEF F4 24                        dw      EXIT
 573+ 3BF1
 574+ 3BF1              //  ______________________________________________________________________
 575+ 3BF1              //
 576+ 3BF1              // #           d1 -- d2
 577+ 3BF1                              Colon_Def DASH, "#", is_normal
 577+ 3BF1             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 577+ 3BF1             >
 577+ 3BF1             >Dict_Ptr        defl    $
 577+ 3BF1             >
 577+ 3BF1             >//              ______________________________________________________________________
 577+ 3BF1             >//              Heap part
 577+ 3BF1             >
 577+ 3BF1             >
 577+ 3BF1             >                org     (Heap_Ptr & $1FFF) + $E000
 577+ EBCE             >
 577+ EBCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ EBCE             >Latest_Definition defl  Heap_Ptr
 577+ EBCE             >
 577+ EBCE             >                // dummy db directives used to calculate length of namec
 577+ EBCE 23          >                db      "#"
 577+ EBCF             >len_NFA         defl    $ - temp_NFA
 577+ EBCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ EBCE             >
 577+ EBCE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ EBCF 23          >                db      "#"               // name string in 7-bit ascii, but
 577+ EBD0             >                org     $-1                 // alter last byte of Name just above to set
 577+ EBCF A3          >                db      {b $} | END_BIT     // msb as name end
 577+ EBD0             >
 577+ EBD0 C5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 577+ EBD2             >Prev_Ptr        defl    Heap_Ptr
 577+ EBD2             >
 577+ EBD2             >mirror_Ptr      defl    $
 577+ EBD2             >
 577+ EBD2 F3 3B       >                dw      Dict_Ptr + 2        // xt
 577+ EBD4             >Heap_Ptr        defl    $ - $E000           // save current HP
 577+ EBD4             >
 577+ EBD4             >Current_HP      defl  $ - $E000             // used to set HP once!
 577+ EBD4             >
 577+ EBD4             >//              ______________________________________________________________________
 577+ EBD4             >//              Dictionary part
 577+ EBD4             >
 577+ EBD4             >                org     Dict_Ptr
 577+ 3BF1             >
 577+ 3BF1 D2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 577+ 3BF3             >
 577+ 3BF3             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 3BF3 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 3BF6             >
 577+ 3BF6             >
 577+ 3BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 3BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 3BF6             >
 577+ 3BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 3BF6 FB 27 34 26                  dw      BASE, FETCH
 579+ 3BFA
 580+ 3BFA FE 24                        dw      TO_R                    // >r           ( ud1 )
 581+ 3BFC 2A 27 14 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 581+ 3C00 81 24
 582+ 3C02 09 25 C3 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 582+ 3C06 FE 24
 583+ 3C08 81 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 584+ 3C0A 09 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 585+ 3C0C
 586+ 3C0C D1 25                        dw      ROT
 587+ 3C0E 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 587+ 3C12 A6 25 B3 28
 588+ 3C16 8F 20                        dw      ZBRANCH
 589+ 3C18 08 00                        dw      Dash_Endif - $
 590+ 3C1A 3D 20 07 00                  dw          LIT, 7, PLUS
 590+ 3C1E 46 25
 591+ 3C20              Dash_Endif:
 592+ 3C20
 593+ 3C20 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 593+ 3C24 46 25 41 2D
 594+ 3C28 F4 24                        dw      EXIT
 595+ 3C2A
 596+ 3C2A              //  ______________________________________________________________________
 597+ 3C2A              //
 598+ 3C2A              // #s           d1 -- d2
 599+ 3C2A                              Colon_Def DASHES, "#S", is_normal
 599+ 3C2A             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 599+ 3C2A             >
 599+ 3C2A             >Dict_Ptr        defl    $
 599+ 3C2A             >
 599+ 3C2A             >//              ______________________________________________________________________
 599+ 3C2A             >//              Heap part
 599+ 3C2A             >
 599+ 3C2A             >
 599+ 3C2A             >                org     (Heap_Ptr & $1FFF) + $E000
 599+ EBD4             >
 599+ EBD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ EBD4             >Latest_Definition defl  Heap_Ptr
 599+ EBD4             >
 599+ EBD4             >                // dummy db directives used to calculate length of namec
 599+ EBD4 23 53       >                db      "#S"
 599+ EBD6             >len_NFA         defl    $ - temp_NFA
 599+ EBD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ EBD4             >
 599+ EBD4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ EBD5 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 599+ EBD7             >                org     $-1                 // alter last byte of Name just above to set
 599+ EBD6 D3          >                db      {b $} | END_BIT     // msb as name end
 599+ EBD7             >
 599+ EBD7 CE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 599+ EBD9             >Prev_Ptr        defl    Heap_Ptr
 599+ EBD9             >
 599+ EBD9             >mirror_Ptr      defl    $
 599+ EBD9             >
 599+ EBD9 2C 3C       >                dw      Dict_Ptr + 2        // xt
 599+ EBDB             >Heap_Ptr        defl    $ - $E000           // save current HP
 599+ EBDB             >
 599+ EBDB             >Current_HP      defl  $ - $E000             // used to set HP once!
 599+ EBDB             >
 599+ EBDB             >//              ______________________________________________________________________
 599+ EBDB             >//              Dictionary part
 599+ EBDB             >
 599+ EBDB             >                org     Dict_Ptr
 599+ 3C2A             >
 599+ 3C2A D9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 599+ 3C2C             >
 599+ 3C2C             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 3C2C CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 3C2F             >
 599+ 3C2F             >
 599+ 3C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 3C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 3C2F             >
 599+ 3C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 3C2F              Dashes_Begin:
 601+ 3C2F F3 3B 12 26                  dw      DASH, TWO_DUP
 602+ 3C33 C3 24 19 25                  dw          OR_OP, ZEQUAL
 603+ 3C37 8F 20                        dw      ZBRANCH
 604+ 3C39 F6 FF                        dw      Dashes_Begin - $
 605+ 3C3B F4 24                        dw      EXIT
 606+ 3C3D
 607+ 3C3D              //  ______________________________________________________________________
 608+ 3C3D              //
 609+ 3C3D              // d.r          d n --
 610+ 3C3D                              Colon_Def D_DOT_R, "D.R", is_normal
 610+ 3C3D             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 610+ 3C3D             >
 610+ 3C3D             >Dict_Ptr        defl    $
 610+ 3C3D             >
 610+ 3C3D             >//              ______________________________________________________________________
 610+ 3C3D             >//              Heap part
 610+ 3C3D             >
 610+ 3C3D             >
 610+ 3C3D             >                org     (Heap_Ptr & $1FFF) + $E000
 610+ EBDB             >
 610+ EBDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ EBDB             >Latest_Definition defl  Heap_Ptr
 610+ EBDB             >
 610+ EBDB             >                // dummy db directives used to calculate length of namec
 610+ EBDB 44 2E 52    >                db      "D.R"
 610+ EBDE             >len_NFA         defl    $ - temp_NFA
 610+ EBDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ EBDB             >
 610+ EBDB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ EBDC 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 610+ EBDF             >                org     $-1                 // alter last byte of Name just above to set
 610+ EBDE D2          >                db      {b $} | END_BIT     // msb as name end
 610+ EBDF             >
 610+ EBDF D4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 610+ EBE1             >Prev_Ptr        defl    Heap_Ptr
 610+ EBE1             >
 610+ EBE1             >mirror_Ptr      defl    $
 610+ EBE1             >
 610+ EBE1 3F 3C       >                dw      Dict_Ptr + 2        // xt
 610+ EBE3             >Heap_Ptr        defl    $ - $E000           // save current HP
 610+ EBE3             >
 610+ EBE3             >Current_HP      defl  $ - $E000             // used to set HP once!
 610+ EBE3             >
 610+ EBE3             >//              ______________________________________________________________________
 610+ EBE3             >//              Dictionary part
 610+ EBE3             >
 610+ EBE3             >                org     Dict_Ptr
 610+ 3C3D             >
 610+ 3C3D E1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 610+ 3C3F             >
 610+ 3C3F             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 3C3F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 3C42             >
 610+ 3C42             >
 610+ 3C42             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 3C42             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 3C42             >
 610+ 3C42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 3C42 FE 24                        dw      TO_R
 612+ 3C44 BA 25 6A 34                  dw      TUCK, DABS
 613+ 3C48 C0 3B 2C 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 613+ 3C4C D1 25 E0 3B
 613+ 3C50 CD 3B
 614+ 3C52 09 25                        dw      R_TO
 615+ 3C54 A6 25 8E 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 615+ 3C58 A9 3B 11 2C
 616+ 3C5C F4 24                        dw      EXIT
 617+ 3C5E
 618+ 3C5E              //  ______________________________________________________________________
 619+ 3C5E              //
 620+ 3C5E              // .r           n1 n2 --
 621+ 3C5E                              Colon_Def DOT_R, ".R", is_normal
 621+ 3C5E             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 621+ 3C5E             >
 621+ 3C5E             >Dict_Ptr        defl    $
 621+ 3C5E             >
 621+ 3C5E             >//              ______________________________________________________________________
 621+ 3C5E             >//              Heap part
 621+ 3C5E             >
 621+ 3C5E             >
 621+ 3C5E             >                org     (Heap_Ptr & $1FFF) + $E000
 621+ EBE3             >
 621+ EBE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ EBE3             >Latest_Definition defl  Heap_Ptr
 621+ EBE3             >
 621+ EBE3             >                // dummy db directives used to calculate length of namec
 621+ EBE3 2E 52       >                db      ".R"
 621+ EBE5             >len_NFA         defl    $ - temp_NFA
 621+ EBE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ EBE3             >
 621+ EBE3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ EBE4 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 621+ EBE6             >                org     $-1                 // alter last byte of Name just above to set
 621+ EBE5 D2          >                db      {b $} | END_BIT     // msb as name end
 621+ EBE6             >
 621+ EBE6 DB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 621+ EBE8             >Prev_Ptr        defl    Heap_Ptr
 621+ EBE8             >
 621+ EBE8             >mirror_Ptr      defl    $
 621+ EBE8             >
 621+ EBE8 60 3C       >                dw      Dict_Ptr + 2        // xt
 621+ EBEA             >Heap_Ptr        defl    $ - $E000           // save current HP
 621+ EBEA             >
 621+ EBEA             >Current_HP      defl  $ - $E000             // used to set HP once!
 621+ EBEA             >
 621+ EBEA             >//              ______________________________________________________________________
 621+ EBEA             >//              Dictionary part
 621+ EBEA             >
 621+ EBEA             >                org     Dict_Ptr
 621+ 3C5E             >
 621+ 3C5E E8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 621+ 3C60             >
 621+ 3C60             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 3C60 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 3C63             >
 621+ 3C63             >
 621+ 3C63             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 3C63             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 3C63             >
 621+ 3C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 3C63 FE 24                        dw      TO_R
 623+ 3C65 83 28 09 25                  dw      S_TO_D, R_TO
 624+ 3C69 3F 3C                        dw      D_DOT_R
 625+ 3C6B F4 24                        dw      EXIT
 626+ 3C6D
 627+ 3C6D              //  ______________________________________________________________________
 628+ 3C6D              //
 629+ 3C6D              // d.           d --
 630+ 3C6D                              Colon_Def D_DOT, "D.", is_normal
 630+ 3C6D             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 630+ 3C6D             >
 630+ 3C6D             >Dict_Ptr        defl    $
 630+ 3C6D             >
 630+ 3C6D             >//              ______________________________________________________________________
 630+ 3C6D             >//              Heap part
 630+ 3C6D             >
 630+ 3C6D             >
 630+ 3C6D             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EBEA             >
 630+ EBEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EBEA             >Latest_Definition defl  Heap_Ptr
 630+ EBEA             >
 630+ EBEA             >                // dummy db directives used to calculate length of namec
 630+ EBEA 44 2E       >                db      "D."
 630+ EBEC             >len_NFA         defl    $ - temp_NFA
 630+ EBEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EBEA             >
 630+ EBEA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EBEB 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 630+ EBED             >                org     $-1                 // alter last byte of Name just above to set
 630+ EBEC AE          >                db      {b $} | END_BIT     // msb as name end
 630+ EBED             >
 630+ EBED E3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EBEF             >Prev_Ptr        defl    Heap_Ptr
 630+ EBEF             >
 630+ EBEF             >mirror_Ptr      defl    $
 630+ EBEF             >
 630+ EBEF 6F 3C       >                dw      Dict_Ptr + 2        // xt
 630+ EBF1             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EBF1             >
 630+ EBF1             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EBF1             >
 630+ EBF1             >//              ______________________________________________________________________
 630+ EBF1             >//              Dictionary part
 630+ EBF1             >
 630+ EBF1             >                org     Dict_Ptr
 630+ 3C6D             >
 630+ 3C6D EF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 3C6F             >
 630+ 3C6F             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 3C6F CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3C72             >
 630+ 3C72             >
 630+ 3C72             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3C72             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3C72             >
 630+ 3C72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3C72 2A 27 3F 3C                  dw      ZERO, D_DOT_R, SPACE
 631+ 3C76 18 29
 632+ 3C78 F4 24                        dw      EXIT
 633+ 3C7A
 634+ 3C7A              //  ______________________________________________________________________
 635+ 3C7A              //
 636+ 3C7A              // .            n --
 637+ 3C7A                              Colon_Def DOT, ".", is_normal
 637+ 3C7A             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 637+ 3C7A             >
 637+ 3C7A             >Dict_Ptr        defl    $
 637+ 3C7A             >
 637+ 3C7A             >//              ______________________________________________________________________
 637+ 3C7A             >//              Heap part
 637+ 3C7A             >
 637+ 3C7A             >
 637+ 3C7A             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ EBF1             >
 637+ EBF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ EBF1             >Latest_Definition defl  Heap_Ptr
 637+ EBF1             >
 637+ EBF1             >                // dummy db directives used to calculate length of namec
 637+ EBF1 2E          >                db      "."
 637+ EBF2             >len_NFA         defl    $ - temp_NFA
 637+ EBF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ EBF1             >
 637+ EBF1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ EBF2 2E          >                db      "."               // name string in 7-bit ascii, but
 637+ EBF3             >                org     $-1                 // alter last byte of Name just above to set
 637+ EBF2 AE          >                db      {b $} | END_BIT     // msb as name end
 637+ EBF3             >
 637+ EBF3 EA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ EBF5             >Prev_Ptr        defl    Heap_Ptr
 637+ EBF5             >
 637+ EBF5             >mirror_Ptr      defl    $
 637+ EBF5             >
 637+ EBF5 7C 3C       >                dw      Dict_Ptr + 2        // xt
 637+ EBF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ EBF7             >
 637+ EBF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ EBF7             >
 637+ EBF7             >//              ______________________________________________________________________
 637+ EBF7             >//              Dictionary part
 637+ EBF7             >
 637+ EBF7             >                org     Dict_Ptr
 637+ 3C7A             >
 637+ 3C7A F5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 3C7C             >
 637+ 3C7C             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 3C7C CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 3C7F             >
 637+ 3C7F             >
 637+ 3C7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 3C7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 3C7F             >
 637+ 3C7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 3C7F 83 28 6F 3C                  dw      S_TO_D, D_DOT
 639+ 3C83 F4 24                        dw      EXIT
 640+ 3C85
 641+ 3C85              //  ______________________________________________________________________
 642+ 3C85              //
 643+ 3C85              // ?            n --
 644+ 3C85                              Colon_Def QUESTION, "?", is_normal
 644+ 3C85             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 644+ 3C85             >
 644+ 3C85             >Dict_Ptr        defl    $
 644+ 3C85             >
 644+ 3C85             >//              ______________________________________________________________________
 644+ 3C85             >//              Heap part
 644+ 3C85             >
 644+ 3C85             >
 644+ 3C85             >                org     (Heap_Ptr & $1FFF) + $E000
 644+ EBF7             >
 644+ EBF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ EBF7             >Latest_Definition defl  Heap_Ptr
 644+ EBF7             >
 644+ EBF7             >                // dummy db directives used to calculate length of namec
 644+ EBF7 3F          >                db      "?"
 644+ EBF8             >len_NFA         defl    $ - temp_NFA
 644+ EBF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ EBF7             >
 644+ EBF7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ EBF8 3F          >                db      "?"               // name string in 7-bit ascii, but
 644+ EBF9             >                org     $-1                 // alter last byte of Name just above to set
 644+ EBF8 BF          >                db      {b $} | END_BIT     // msb as name end
 644+ EBF9             >
 644+ EBF9 F1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 644+ EBFB             >Prev_Ptr        defl    Heap_Ptr
 644+ EBFB             >
 644+ EBFB             >mirror_Ptr      defl    $
 644+ EBFB             >
 644+ EBFB 87 3C       >                dw      Dict_Ptr + 2        // xt
 644+ EBFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 644+ EBFD             >
 644+ EBFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 644+ EBFD             >
 644+ EBFD             >//              ______________________________________________________________________
 644+ EBFD             >//              Dictionary part
 644+ EBFD             >
 644+ EBFD             >                org     Dict_Ptr
 644+ 3C85             >
 644+ 3C85 FB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 644+ 3C87             >
 644+ 3C87             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 3C87 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 3C8A             >
 644+ 3C8A             >
 644+ 3C8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 3C8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 3C8A             >
 644+ 3C8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 3C8A 34 26 7C 3C                  dw      FETCH, DOT
 646+ 3C8E F4 24                        dw      EXIT
 647+ 3C90
 648+ 3C90              //  ______________________________________________________________________
 649+ 3C90              //
 650+ 3C90              // u.           u --
 651+ 3C90                              Colon_Def U_DOT, "U.", is_normal
 651+ 3C90             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 651+ 3C90             >
 651+ 3C90             >Dict_Ptr        defl    $
 651+ 3C90             >
 651+ 3C90             >//              ______________________________________________________________________
 651+ 3C90             >//              Heap part
 651+ 3C90             >
 651+ 3C90             >
 651+ 3C90             >                org     (Heap_Ptr & $1FFF) + $E000
 651+ EBFD             >
 651+ EBFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ EBFD             >Latest_Definition defl  Heap_Ptr
 651+ EBFD             >
 651+ EBFD             >                // dummy db directives used to calculate length of namec
 651+ EBFD 55 2E       >                db      "U."
 651+ EBFF             >len_NFA         defl    $ - temp_NFA
 651+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ EBFD             >
 651+ EBFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ EBFE 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 651+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 651+ EBFF AE          >                db      {b $} | END_BIT     // msb as name end
 651+ EC00             >
 651+ EC00 F7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 651+ EC02             >Prev_Ptr        defl    Heap_Ptr
 651+ EC02             >
 651+ EC02             >mirror_Ptr      defl    $
 651+ EC02             >
 651+ EC02 92 3C       >                dw      Dict_Ptr + 2        // xt
 651+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 651+ EC04             >
 651+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 651+ EC04             >
 651+ EC04             >//              ______________________________________________________________________
 651+ EC04             >//              Dictionary part
 651+ EC04             >
 651+ EC04             >                org     Dict_Ptr
 651+ 3C90             >
 651+ 3C90 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 651+ 3C92             >
 651+ 3C92             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 3C92 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 3C95             >
 651+ 3C95             >
 651+ 3C95             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 3C95             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 3C95             >
 651+ 3C95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 3C95 2A 27 6F 3C                  dw      ZERO, D_DOT
 653+ 3C99 F4 24                        dw      EXIT
 654+ 3C9B
 655+ 3C9B              //  ______________________________________________________________________
 656+ 3C9B              //
 657+ 3C9B              // words        --
 658+ 3C9B                              Colon_Def WORDS, "WORDS", is_normal
 658+ 3C9B             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 658+ 3C9B             >
 658+ 3C9B             >Dict_Ptr        defl    $
 658+ 3C9B             >
 658+ 3C9B             >//              ______________________________________________________________________
 658+ 3C9B             >//              Heap part
 658+ 3C9B             >
 658+ 3C9B             >
 658+ 3C9B             >                org     (Heap_Ptr & $1FFF) + $E000
 658+ EC04             >
 658+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ EC04             >Latest_Definition defl  Heap_Ptr
 658+ EC04             >
 658+ EC04             >                // dummy db directives used to calculate length of namec
 658+ EC04 57 4F 52 44 >                db      "WORDS"
 658+ EC08 53          >
 658+ EC09             >len_NFA         defl    $ - temp_NFA
 658+ EC09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ EC04             >
 658+ EC04 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ EC05 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 658+ EC09 53          >
 658+ EC0A             >                org     $-1                 // alter last byte of Name just above to set
 658+ EC09 D3          >                db      {b $} | END_BIT     // msb as name end
 658+ EC0A             >
 658+ EC0A FD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 658+ EC0C             >Prev_Ptr        defl    Heap_Ptr
 658+ EC0C             >
 658+ EC0C             >mirror_Ptr      defl    $
 658+ EC0C             >
 658+ EC0C 9D 3C       >                dw      Dict_Ptr + 2        // xt
 658+ EC0E             >Heap_Ptr        defl    $ - $E000           // save current HP
 658+ EC0E             >
 658+ EC0E             >Current_HP      defl  $ - $E000             // used to set HP once!
 658+ EC0E             >
 658+ EC0E             >//              ______________________________________________________________________
 658+ EC0E             >//              Dictionary part
 658+ EC0E             >
 658+ EC0E             >                org     Dict_Ptr
 658+ 3C9B             >
 658+ 3C9B 0C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 658+ 3C9D             >
 658+ 3C9D             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 3C9D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 3CA0             >
 658+ 3CA0             >
 658+ 3CA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 3CA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 3CA0             >
 658+ 3CA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 3CA0 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 659+ 3CA4 D7 27 3E 26
 660+ 3CA8 E9 27 34 26                  dw      CONTEXT, FETCH, FETCH
 660+ 3CAC 34 26
 661+ 3CAE              Words_Begin:
 662+ 3CAE 89 29                        dw          FAR // Q TO HEAP
 663+ 3CB0 CA 25 49 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 663+ 3CB4 3D 20 1F 00
 663+ 3CB8 B4 24
 664+ 3CBA D7 27 34 26                  dw          OUT, FETCH, PLUS
 664+ 3CBE 46 25
 665+ 3CC0 54 27 B3 28                  dw          CL, LESS, ZEQUAL
 665+ 3CC4 19 25
 666+ 3CC6 8F 20                        dw          ZBRANCH
 667+ 3CC8 0A 00                        dw          Words_Endif - $
 668+ 3CCA 4F 22 2A 27                  dw              CR, ZERO, OUT, STORE
 668+ 3CCE D7 27 3E 26
 669+ 3CD2              Words_Endif:
 670+ 3CD2 CA 25 F5 2F                  dw          DUP, ID_DOT
 671+ 3CD6 31 27 23 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 671+ 3CDA 5F 25 34 26
 672+ 3CDE CA 25 19 25                  dw          DUP, ZEQUAL
 673+ 3CE2 4B 23 C3 24                  dw          QTERMINAL, OR_OP
 674+ 3CE6 8F 20                        dw      ZBRANCH
 675+ 3CE8 C6 FF                        dw      Words_Begin - $
 676+ 3CEA AF 25                        dw      DROP
 677+ 3CEC F4 24                        dw      EXIT
 678+ 3CEE
 679+ 3CEE              //  ______________________________________________________________________
 680+ 3CEE              //
 681+ 3CEE              // list         n --
 682+ 3CEE                              Colon_Def LIST, "LIST", is_normal
 682+ 3CEE             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 682+ 3CEE             >
 682+ 3CEE             >Dict_Ptr        defl    $
 682+ 3CEE             >
 682+ 3CEE             >//              ______________________________________________________________________
 682+ 3CEE             >//              Heap part
 682+ 3CEE             >
 682+ 3CEE             >
 682+ 3CEE             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ EC0E             >
 682+ EC0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ EC0E             >Latest_Definition defl  Heap_Ptr
 682+ EC0E             >
 682+ EC0E             >                // dummy db directives used to calculate length of namec
 682+ EC0E 4C 49 53 54 >                db      "LIST"
 682+ EC12             >len_NFA         defl    $ - temp_NFA
 682+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ EC0E             >
 682+ EC0E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ EC0F 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 682+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 682+ EC12 D4          >                db      {b $} | END_BIT     // msb as name end
 682+ EC13             >
 682+ EC13 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ EC15             >Prev_Ptr        defl    Heap_Ptr
 682+ EC15             >
 682+ EC15             >mirror_Ptr      defl    $
 682+ EC15             >
 682+ EC15 F0 3C       >                dw      Dict_Ptr + 2        // xt
 682+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ EC17             >
 682+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ EC17             >
 682+ EC17             >//              ______________________________________________________________________
 682+ EC17             >//              Dictionary part
 682+ EC17             >
 682+ EC17             >                org     Dict_Ptr
 682+ 3CEE             >
 682+ 3CEE 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 3CF0             >
 682+ 3CF0             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 3CF0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 3CF3             >
 682+ 3CF3             >
 682+ 3CF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 3CF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 3CF3             >
 682+ 3CF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 3CF3 5A 2B 4F 22                  dw      DECIMAL, CR
 684+ 3CF7 CA 25 DD 27                  dw      DUP, SCR, STORE
 684+ 3CFB 3E 26
 685+ 3CFD AE 2D                        dw      C_DOT_QUOTE
 686+ 3CFF 05 53 63 72                  db      5, "Scr# "
 686+ 3D03 23 20
 687+ 3D05 7C 3C                        dw      DOT
 688+ 3D07 69 27 2A 27                  dw      LSCR, ZERO, C_DO
 688+ 3D0B CC 20
 689+ 3D0D              List_Loop:
 690+ 3D0D 4F 22                        dw          CR
 691+ 3D0F D2 20 3F 27                  dw          I, THREE
 692+ 3D13 60 3C 18 29                  dw          DOT_R, SPACE
 693+ 3D17 D2 20 DD 27                  dw          I, SCR, FETCH, DOT_LINE
 693+ 3D1B 34 26 65 35
 694+ 3D1F 4B 23                        dw          QTERMINAL
 695+ 3D21 8F 20                        dw          ZBRANCH
 696+ 3D23 06 00                        dw          List_Endif - $
 697+ 3D25 9A 20                        dw              C_LEAVE
 698+ 3D27 06 00                        dw              List_Leave - $
 699+ 3D29              List_Endif:
 700+ 3D29 7A 20                        dw      C_LOOP
 701+ 3D2B E2 FF                        dw      List_Loop - $
 702+ 3D2D              List_Leave:
 703+ 3D2D 4F 22                        dw      CR
 704+ 3D2F F4 24                        dw      EXIT
 705+ 3D31
 706+ 3D31              //  ______________________________________________________________________
 707+ 3D31              //
 708+ 3D31              // index        n1 n2 --
 709+ 3D31                              Colon_Def INDEX, "INDEX", is_normal
 709+ 3D31             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 709+ 3D31             >
 709+ 3D31             >Dict_Ptr        defl    $
 709+ 3D31             >
 709+ 3D31             >//              ______________________________________________________________________
 709+ 3D31             >//              Heap part
 709+ 3D31             >
 709+ 3D31             >
 709+ 3D31             >                org     (Heap_Ptr & $1FFF) + $E000
 709+ EC17             >
 709+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 709+ EC17             >Latest_Definition defl  Heap_Ptr
 709+ EC17             >
 709+ EC17             >                // dummy db directives used to calculate length of namec
 709+ EC17 49 4E 44 45 >                db      "INDEX"
 709+ EC1B 58          >
 709+ EC1C             >len_NFA         defl    $ - temp_NFA
 709+ EC1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 709+ EC17             >
 709+ EC17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 709+ EC18 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 709+ EC1C 58          >
 709+ EC1D             >                org     $-1                 // alter last byte of Name just above to set
 709+ EC1C D8          >                db      {b $} | END_BIT     // msb as name end
 709+ EC1D             >
 709+ EC1D 0E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 709+ EC1F             >Prev_Ptr        defl    Heap_Ptr
 709+ EC1F             >
 709+ EC1F             >mirror_Ptr      defl    $
 709+ EC1F             >
 709+ EC1F 33 3D       >                dw      Dict_Ptr + 2        // xt
 709+ EC21             >Heap_Ptr        defl    $ - $E000           // save current HP
 709+ EC21             >
 709+ EC21             >Current_HP      defl  $ - $E000             // used to set HP once!
 709+ EC21             >
 709+ EC21             >//              ______________________________________________________________________
 709+ EC21             >//              Dictionary part
 709+ EC21             >
 709+ EC21             >                org     Dict_Ptr
 709+ 3D31             >
 709+ 3D31 1F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 709+ 3D33             >
 709+ 3D33             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 709+ 3D33 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 709+ 3D36             >
 709+ 3D36             >
 709+ 3D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 709+ 3D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 709+ 3D36             >
 709+ 3D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 710+ 3D36 5F 25 C3 25                  dw      ONE_PLUS, SWAP, C_DO
 710+ 3D3A CC 20
 711+ 3D3C              Index_Loop:
 712+ 3D3C 4F 22 D2 20                  dw          CR, I, THREE
 712+ 3D40 3F 27
 713+ 3D42 60 3C 18 29                  dw          DOT_R, SPACE
 714+ 3D46 2A 27 D2 20                  dw          ZERO, I, DOT_LINE
 714+ 3D4A 65 35
 715+ 3D4C 4B 23                        dw          QTERMINAL
 716+ 3D4E 8F 20                        dw          ZBRANCH
 717+ 3D50 06 00                        dw          Index_Endif - $
 718+ 3D52 9A 20                        dw              C_LEAVE
 719+ 3D54 06 00                        dw              Index_Leave - $
 720+ 3D56              Index_Endif:
 721+ 3D56 7A 20                        dw      C_LOOP
 722+ 3D58 E4 FF                        dw      Index_Loop - $
 723+ 3D5A              Index_Leave:
 724+ 3D5A 4F 22                        dw      CR
 725+ 3D5C F4 24                        dw      EXIT
 726+ 3D5E
 727+ 3D5E              //  ______________________________________________________________________
 728+ 3D5E              //
 729+ 3D5E              // cls          --
 730+ 3D5E                              Colon_Def CLS, "CLS", is_normal
 730+ 3D5E             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 730+ 3D5E             >
 730+ 3D5E             >Dict_Ptr        defl    $
 730+ 3D5E             >
 730+ 3D5E             >//              ______________________________________________________________________
 730+ 3D5E             >//              Heap part
 730+ 3D5E             >
 730+ 3D5E             >
 730+ 3D5E             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ EC21             >
 730+ EC21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ EC21             >Latest_Definition defl  Heap_Ptr
 730+ EC21             >
 730+ EC21             >                // dummy db directives used to calculate length of namec
 730+ EC21 43 4C 53    >                db      "CLS"
 730+ EC24             >len_NFA         defl    $ - temp_NFA
 730+ EC24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ EC21             >
 730+ EC21 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ EC22 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 730+ EC25             >                org     $-1                 // alter last byte of Name just above to set
 730+ EC24 D3          >                db      {b $} | END_BIT     // msb as name end
 730+ EC25             >
 730+ EC25 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ EC27             >Prev_Ptr        defl    Heap_Ptr
 730+ EC27             >
 730+ EC27             >mirror_Ptr      defl    $
 730+ EC27             >
 730+ EC27 60 3D       >                dw      Dict_Ptr + 2        // xt
 730+ EC29             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ EC29             >
 730+ EC29             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ EC29             >
 730+ EC29             >//              ______________________________________________________________________
 730+ EC29             >//              Dictionary part
 730+ EC29             >
 730+ EC29             >                org     Dict_Ptr
 730+ 3D5E             >
 730+ 3D5E 27 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 3D60             >
 730+ 3D60             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 3D60 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 3D63             >
 730+ 3D63             >
 730+ 3D63             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 3D63             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 3D63             >
 730+ 3D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 3D63 3D 20 0E 00                  dw      LIT, $0E, EMITC
 731+ 3D67 39 22
 732+ 3D69 F4 24                        dw      EXIT
 733+ 3D6B
 734+ 3D6B              //  ______________________________________________________________________
 735+ 3D6B              //
 736+ 3D6B              // splash       --
 737+ 3D6B              //              Colon_Def SPLASH, "SPLASH", is_normal
 738+ 3D6B              //              dw      CLS
 739+ 3D6B              //              dw      C_DOT_QUOTE
 740+ 3D6B              //              db      87
 741+ 3D6B              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 742+ 3D6B              //              db      "Heap Vocabulary - build 20240616", 13  // 33
 743+ 3D6B              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 744+ 3D6B              //              dw      EXIT
 745+ 3D6B
 746+ 3D6B              //  ______________________________________________________________________
 747+ 3D6B              //
 748+ 3D6B              // splash       --
 749+ 3D6B                              Colon_Def SPLASH, "SPLASH", is_normal
 749+ 3D6B             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 749+ 3D6B             >
 749+ 3D6B             >Dict_Ptr        defl    $
 749+ 3D6B             >
 749+ 3D6B             >//              ______________________________________________________________________
 749+ 3D6B             >//              Heap part
 749+ 3D6B             >
 749+ 3D6B             >
 749+ 3D6B             >                org     (Heap_Ptr & $1FFF) + $E000
 749+ EC29             >
 749+ EC29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ EC29             >Latest_Definition defl  Heap_Ptr
 749+ EC29             >
 749+ EC29             >                // dummy db directives used to calculate length of namec
 749+ EC29 53 50 4C 41 >                db      "SPLASH"
 749+ EC2D 53 48       >
 749+ EC2F             >len_NFA         defl    $ - temp_NFA
 749+ EC2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ EC29             >
 749+ EC29 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ EC2A 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 749+ EC2E 53 48       >
 749+ EC30             >                org     $-1                 // alter last byte of Name just above to set
 749+ EC2F C8          >                db      {b $} | END_BIT     // msb as name end
 749+ EC30             >
 749+ EC30 21 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 749+ EC32             >Prev_Ptr        defl    Heap_Ptr
 749+ EC32             >
 749+ EC32             >mirror_Ptr      defl    $
 749+ EC32             >
 749+ EC32 6D 3D       >                dw      Dict_Ptr + 2        // xt
 749+ EC34             >Heap_Ptr        defl    $ - $E000           // save current HP
 749+ EC34             >
 749+ EC34             >Current_HP      defl  $ - $E000             // used to set HP once!
 749+ EC34             >
 749+ EC34             >//              ______________________________________________________________________
 749+ EC34             >//              Dictionary part
 749+ EC34             >
 749+ EC34             >                org     Dict_Ptr
 749+ 3D6B             >
 749+ 3D6B 32 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 749+ 3D6D             >
 749+ 3D6D             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 3D6D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 3D70             >
 749+ 3D70             >
 749+ 3D70             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 3D70             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 3D70             >
 749+ 3D70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 3D70 60 3D                        dw      CLS
 751+ 3D72 3D 20 02 00                  dw      LIT, Splash_Ptr
 752+ 3D76 89 29                        dw      FAR
 753+ 3D78 BD 2B 11 2C                  dw      COUNT, TYPE
 754+ 3D7C F4 24                        dw      EXIT
 755+ 3D7E
 756+ 3D7E              //  ______________________________________________________________________
 757+ 3D7E              //
 758+ 3D7E              // video        --
 759+ 3D7E                              Colon_Def VIDEO, "VIDEO", is_normal
 759+ 3D7E             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 759+ 3D7E             >
 759+ 3D7E             >Dict_Ptr        defl    $
 759+ 3D7E             >
 759+ 3D7E             >//              ______________________________________________________________________
 759+ 3D7E             >//              Heap part
 759+ 3D7E             >
 759+ 3D7E             >
 759+ 3D7E             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ EC34             >
 759+ EC34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ EC34             >Latest_Definition defl  Heap_Ptr
 759+ EC34             >
 759+ EC34             >                // dummy db directives used to calculate length of namec
 759+ EC34 56 49 44 45 >                db      "VIDEO"
 759+ EC38 4F          >
 759+ EC39             >len_NFA         defl    $ - temp_NFA
 759+ EC39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ EC34             >
 759+ EC34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ EC35 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 759+ EC39 4F          >
 759+ EC3A             >                org     $-1                 // alter last byte of Name just above to set
 759+ EC39 CF          >                db      {b $} | END_BIT     // msb as name end
 759+ EC3A             >
 759+ EC3A 29 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ EC3C             >Prev_Ptr        defl    Heap_Ptr
 759+ EC3C             >
 759+ EC3C             >mirror_Ptr      defl    $
 759+ EC3C             >
 759+ EC3C 80 3D       >                dw      Dict_Ptr + 2        // xt
 759+ EC3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ EC3E             >
 759+ EC3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ EC3E             >
 759+ EC3E             >//              ______________________________________________________________________
 759+ EC3E             >//              Dictionary part
 759+ EC3E             >
 759+ EC3E             >                org     Dict_Ptr
 759+ 3D7E             >
 759+ 3D7E 3C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 3D80             >
 759+ 3D80             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 3D80 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 3D83             >
 759+ 3D83             >
 759+ 3D83             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 3D83             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 3D83             >
 759+ 3D83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 3D83 38 27 CA 25                  dw      TWO, DUP, DEVICE, STORE
 760+ 3D87 9A 35 3E 26
 761+ 3D8B 5F 23                        dw      SELECT
 762+ 3D8D F4 24                        dw      EXIT
 763+ 3D8F
 764+ 3D8F              //  ______________________________________________________________________
 765+ 3D8F              //
 766+ 3D8F              // autoexec     --
 767+ 3D8F              // this word is called the first time the Forth system boot to
 768+ 3D8F              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 769+ 3D8F                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 769+ 3D8F             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 769+ 3D8F             >
 769+ 3D8F             >Dict_Ptr        defl    $
 769+ 3D8F             >
 769+ 3D8F             >//              ______________________________________________________________________
 769+ 3D8F             >//              Heap part
 769+ 3D8F             >
 769+ 3D8F             >
 769+ 3D8F             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC3E             >
 769+ EC3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC3E             >Latest_Definition defl  Heap_Ptr
 769+ EC3E             >
 769+ EC3E             >                // dummy db directives used to calculate length of namec
 769+ EC3E 41 55 54 4F >                db      "AUTOEXEC"
 769+ EC42 45 58 45 43 >
 769+ EC46             >len_NFA         defl    $ - temp_NFA
 769+ EC46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC3E             >
 769+ EC3E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC3F 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 769+ EC43 45 58 45 43 >
 769+ EC47             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC46 C3          >                db      {b $} | END_BIT     // msb as name end
 769+ EC47             >
 769+ EC47 34 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC49             >Prev_Ptr        defl    Heap_Ptr
 769+ EC49             >
 769+ EC49             >mirror_Ptr      defl    $
 769+ EC49             >
 769+ EC49 91 3D       >                dw      Dict_Ptr + 2        // xt
 769+ EC4B             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC4B             >
 769+ EC4B             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC4B             >
 769+ EC4B             >//              ______________________________________________________________________
 769+ EC4B             >//              Dictionary part
 769+ EC4B             >
 769+ EC4B             >                org     Dict_Ptr
 769+ 3D8F             >
 769+ 3D8F 49 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 3D91             >
 769+ 3D91             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 3D91 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 3D94             >
 769+ 3D94             >
 769+ 3D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 3D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 3D94             >
 769+ 3D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 3D94              Autoexec_Self:
 771+ 3D94 3D 20 0B 32                  dw      LIT, QUIT
 772+ 3D98 3D 20 94 3D                  dw      LIT, Autoexec_Self      // self patch
 773+ 3D9C 3D 20 53 39                  dw      LIT, Param
 774+ 3DA0 54 2D 31 27                  dw      PAD, ONE
 775+ 3DA4 F9 23                        dw      F_OPEN
 776+ 3DA6 AF 25                        dw      DROP
 777+ 3DA8 45 38                        dw      F_INCLUDE
 778+ 3DAA 3E 26                        dw      STORE
 779+ 3DAC F4 24                        dw      EXIT
 780+ 3DAE
 781+ 3DAE
 782+ 3DAE              //              dw      LIT, 11
 783+ 3DAE              //              dw      LIT, NOOP
 784+ 3DAE              //              dw      LIT, Autoexec_Ptr
 785+ 3DAE              //              dw      STORE
 786+ 3DAE              //              dw      LOAD
 787+ 3DAE              //
 788+ 3DAE              //              dw      NEEDS_FN, ONE, F_OPEN
 789+ 3DAE              //              dw      LIT, 43, QERROR
 790+ 3DAE              //              dw      DUP, F_INCLUDE
 791+ 3DAE              //              dw      F_CLOSE, DROP
 792+ 3DAE
 793+ 3DAE              //              dw      QUIT
 794+ 3DAE              //              dw      EXIT
 795+ 3DAE
 796+ 3DAE
 797+ 3DAE              //  ______________________________________________________________________
 798+ 3DAE              //
 799+ 3DAE              // bye     --
 800+ 3DAE              //
 801+ 3DAE                              Colon_Def BYE, "BYE", is_normal
 801+ 3DAE             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 801+ 3DAE             >
 801+ 3DAE             >Dict_Ptr        defl    $
 801+ 3DAE             >
 801+ 3DAE             >//              ______________________________________________________________________
 801+ 3DAE             >//              Heap part
 801+ 3DAE             >
 801+ 3DAE             >
 801+ 3DAE             >                org     (Heap_Ptr & $1FFF) + $E000
 801+ EC4B             >
 801+ EC4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 801+ EC4B             >Latest_Definition defl  Heap_Ptr
 801+ EC4B             >
 801+ EC4B             >                // dummy db directives used to calculate length of namec
 801+ EC4B 42 59 45    >                db      "BYE"
 801+ EC4E             >len_NFA         defl    $ - temp_NFA
 801+ EC4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 801+ EC4B             >
 801+ EC4B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 801+ EC4C 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 801+ EC4F             >                org     $-1                 // alter last byte of Name just above to set
 801+ EC4E C5          >                db      {b $} | END_BIT     // msb as name end
 801+ EC4F             >
 801+ EC4F 3E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 801+ EC51             >Prev_Ptr        defl    Heap_Ptr
 801+ EC51             >
 801+ EC51             >mirror_Ptr      defl    $
 801+ EC51             >
 801+ EC51 B0 3D       >                dw      Dict_Ptr + 2        // xt
 801+ EC53             >Heap_Ptr        defl    $ - $E000           // save current HP
 801+ EC53             >
 801+ EC53             >Current_HP      defl  $ - $E000             // used to set HP once!
 801+ EC53             >
 801+ EC53             >//              ______________________________________________________________________
 801+ EC53             >//              Dictionary part
 801+ EC53             >
 801+ EC53             >                org     Dict_Ptr
 801+ 3DAE             >
 801+ 3DAE 51 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 801+ 3DB0             >
 801+ 3DB0             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 801+ 3DB0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 801+ 3DB3             >
 801+ 3DB3             >
 801+ 3DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 801+ 3DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 801+ 3DB3             >
 801+ 3DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 802+ 3DB3 8B 37                        dw      FLUSH
 803+ 3DB5 D9 36                        dw      EMPTY_BUFFERS
 804+ 3DB7 3A 3F 34 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 804+ 3DBB 98 23 AF 25
 805+ 3DBF 2A 27 70 27                  dw      ZERO, PLUS_ORIGIN
 806+ 3DC3 FA 33                        dw      BASIC
 807+ 3DC5
 808+ 3DC5              //  ______________________________________________________________________
 809+ 3DC5              //
 810+ 3DC5              // invv     --
 811+ 3DC5              //
 812+ 3DC5              //              Colon_Def INVV, "INVV", is_normal
 813+ 3DC5              //              dw      LIT, 20, EMITC, ONE, EMITC
 814+ 3DC5              //              dw      EXIT
 815+ 3DC5
 816+ 3DC5              //  ______________________________________________________________________
 817+ 3DC5              //
 818+ 3DC5              // truv     --
 819+ 3DC5              //
 820+ 3DC5              //              Colon_Def TRUV, "TRUV", is_normal
 821+ 3DC5              //              dw      LIT, 20, EMITC, ZERO, EMITC
 822+ 3DC5              //              dw      EXIT
 823+ 3DC5
 824+ 3DC5              //  ______________________________________________________________________
 825+ 3DC5              //
 826+ 3DC5              // mark     --
 827+ 3DC5              //
 828+ 3DC5              //              Colon_Def MARK, "MARK", is_normal
 829+ 3DC5              //              dw      INVV, TYPE, TRUV
 830+ 3DC5              //              dw      EXIT
 831+ 3DC5
 832+ 3DC5              //  ______________________________________________________________________
 833+ 3DC5              //
 834+ 3DC5              // back     --
 835+ 3DC5              //
 836+ 3DC5                              Colon_Def BACK, "BACK", is_normal
 836+ 3DC5             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 836+ 3DC5             >
 836+ 3DC5             >Dict_Ptr        defl    $
 836+ 3DC5             >
 836+ 3DC5             >//              ______________________________________________________________________
 836+ 3DC5             >//              Heap part
 836+ 3DC5             >
 836+ 3DC5             >
 836+ 3DC5             >                org     (Heap_Ptr & $1FFF) + $E000
 836+ EC53             >
 836+ EC53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ EC53             >Latest_Definition defl  Heap_Ptr
 836+ EC53             >
 836+ EC53             >                // dummy db directives used to calculate length of namec
 836+ EC53 42 41 43 4B >                db      "BACK"
 836+ EC57             >len_NFA         defl    $ - temp_NFA
 836+ EC57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ EC53             >
 836+ EC53 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ EC54 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 836+ EC58             >                org     $-1                 // alter last byte of Name just above to set
 836+ EC57 CB          >                db      {b $} | END_BIT     // msb as name end
 836+ EC58             >
 836+ EC58 4B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 836+ EC5A             >Prev_Ptr        defl    Heap_Ptr
 836+ EC5A             >
 836+ EC5A             >mirror_Ptr      defl    $
 836+ EC5A             >
 836+ EC5A C7 3D       >                dw      Dict_Ptr + 2        // xt
 836+ EC5C             >Heap_Ptr        defl    $ - $E000           // save current HP
 836+ EC5C             >
 836+ EC5C             >Current_HP      defl  $ - $E000             // used to set HP once!
 836+ EC5C             >
 836+ EC5C             >//              ______________________________________________________________________
 836+ EC5C             >//              Dictionary part
 836+ EC5C             >
 836+ EC5C             >                org     Dict_Ptr
 836+ 3DC5             >
 836+ 3DC5 5A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 836+ 3DC7             >
 836+ 3DC7             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 3DC7 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 836+ 3DCA             >
 836+ 3DCA             >
 836+ 3DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 3DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 3DCA             >
 836+ 3DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 3DCA 4F 28 8E 28                  dw      HERE, SUBTRACT, COMMA
 837+ 3DCE 65 28
 838+ 3DD0 F4 24                        dw      EXIT
 839+ 3DD2
 840+ 3DD2              //  ______________________________________________________________________
 841+ 3DD2              //
 842+ 3DD2              // if          ( -- a 2 ) \ compile-time
 843+ 3DD2              // IF ... THEN
 844+ 3DD2              // IF ... ELSE ... ENDIF
 845+ 3DD2                              Colon_Def IF, "IF", is_immediate
 845+ 3DD2             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 845+ 3DD2             >
 845+ 3DD2             >Dict_Ptr        defl    $
 845+ 3DD2             >
 845+ 3DD2             >//              ______________________________________________________________________
 845+ 3DD2             >//              Heap part
 845+ 3DD2             >
 845+ 3DD2             >
 845+ 3DD2             >                org     (Heap_Ptr & $1FFF) + $E000
 845+ EC5C             >
 845+ EC5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ EC5C             >Latest_Definition defl  Heap_Ptr
 845+ EC5C             >
 845+ EC5C             >                // dummy db directives used to calculate length of namec
 845+ EC5C 49 46       >                db      "IF"
 845+ EC5E             >len_NFA         defl    $ - temp_NFA
 845+ EC5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ EC5C             >
 845+ EC5C C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ EC5D 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 845+ EC5F             >                org     $-1                 // alter last byte of Name just above to set
 845+ EC5E C6          >                db      {b $} | END_BIT     // msb as name end
 845+ EC5F             >
 845+ EC5F 53 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 845+ EC61             >Prev_Ptr        defl    Heap_Ptr
 845+ EC61             >
 845+ EC61             >mirror_Ptr      defl    $
 845+ EC61             >
 845+ EC61 D4 3D       >                dw      Dict_Ptr + 2        // xt
 845+ EC63             >Heap_Ptr        defl    $ - $E000           // save current HP
 845+ EC63             >
 845+ EC63             >Current_HP      defl  $ - $E000             // used to set HP once!
 845+ EC63             >
 845+ EC63             >//              ______________________________________________________________________
 845+ EC63             >//              Dictionary part
 845+ EC63             >
 845+ EC63             >                org     Dict_Ptr
 845+ 3DD2             >
 845+ 3DD2 61 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 845+ 3DD4             >
 845+ 3DD4             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 3DD4 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 845+ 3DD7             >
 845+ 3DD7             >
 845+ 3DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 3DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 3DD7             >
 845+ 3DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 3DD7 F3 2A 8F 20                  dw      COMPILE, ZBRANCH
 847+ 3DDB 4F 28 2A 27                  dw      HERE, ZERO, COMMA
 847+ 3DDF 65 28
 848+ 3DE1 38 27                        dw      TWO
 849+ 3DE3 F4 24                        dw      EXIT
 850+ 3DE5
 851+ 3DE5              //  ______________________________________________________________________
 852+ 3DE5              //
 853+ 3DE5              // then        ( a 2 -- ) \ compile-time
 854+ 3DE5              //
 855+ 3DE5                              Colon_Def THEN, "THEN", is_immediate
 855+ 3DE5             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 855+ 3DE5             >
 855+ 3DE5             >Dict_Ptr        defl    $
 855+ 3DE5             >
 855+ 3DE5             >//              ______________________________________________________________________
 855+ 3DE5             >//              Heap part
 855+ 3DE5             >
 855+ 3DE5             >
 855+ 3DE5             >                org     (Heap_Ptr & $1FFF) + $E000
 855+ EC63             >
 855+ EC63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ EC63             >Latest_Definition defl  Heap_Ptr
 855+ EC63             >
 855+ EC63             >                // dummy db directives used to calculate length of namec
 855+ EC63 54 48 45 4E >                db      "THEN"
 855+ EC67             >len_NFA         defl    $ - temp_NFA
 855+ EC67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ EC63             >
 855+ EC63 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ EC64 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 855+ EC68             >                org     $-1                 // alter last byte of Name just above to set
 855+ EC67 CE          >                db      {b $} | END_BIT     // msb as name end
 855+ EC68             >
 855+ EC68 5C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 855+ EC6A             >Prev_Ptr        defl    Heap_Ptr
 855+ EC6A             >
 855+ EC6A             >mirror_Ptr      defl    $
 855+ EC6A             >
 855+ EC6A E7 3D       >                dw      Dict_Ptr + 2        // xt
 855+ EC6C             >Heap_Ptr        defl    $ - $E000           // save current HP
 855+ EC6C             >
 855+ EC6C             >Current_HP      defl  $ - $E000             // used to set HP once!
 855+ EC6C             >
 855+ EC6C             >//              ______________________________________________________________________
 855+ EC6C             >//              Dictionary part
 855+ EC6C             >
 855+ EC6C             >                org     Dict_Ptr
 855+ 3DE5             >
 855+ 3DE5 6A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 855+ 3DE7             >
 855+ 3DE7             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 3DE7 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 3DEA             >
 855+ 3DEA             >
 855+ 3DEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 3DEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 3DEA             >
 855+ 3DEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 3DEA 98 2A                        dw      QCOMP
 857+ 3DEC 38 27 BC 2A                  dw      TWO, QPAIRS
 858+ 3DF0 4F 28 A6 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 858+ 3DF4 8E 28 C3 25
 858+ 3DF8 3E 26
 859+ 3DFA F4 24                        dw      EXIT
 860+ 3DFC
 861+ 3DFC              //  ______________________________________________________________________
 862+ 3DFC              //
 863+ 3DFC              // endif       ( a 2 -- ) \ compile-time
 864+ 3DFC              //
 865+ 3DFC                              Colon_Def ENDIF, "ENDIF", is_immediate
 865+ 3DFC             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 865+ 3DFC             >
 865+ 3DFC             >Dict_Ptr        defl    $
 865+ 3DFC             >
 865+ 3DFC             >//              ______________________________________________________________________
 865+ 3DFC             >//              Heap part
 865+ 3DFC             >
 865+ 3DFC             >
 865+ 3DFC             >                org     (Heap_Ptr & $1FFF) + $E000
 865+ EC6C             >
 865+ EC6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 865+ EC6C             >Latest_Definition defl  Heap_Ptr
 865+ EC6C             >
 865+ EC6C             >                // dummy db directives used to calculate length of namec
 865+ EC6C 45 4E 44 49 >                db      "ENDIF"
 865+ EC70 46          >
 865+ EC71             >len_NFA         defl    $ - temp_NFA
 865+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 865+ EC6C             >
 865+ EC6C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 865+ EC6D 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 865+ EC71 46          >
 865+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 865+ EC71 C6          >                db      {b $} | END_BIT     // msb as name end
 865+ EC72             >
 865+ EC72 63 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 865+ EC74             >Prev_Ptr        defl    Heap_Ptr
 865+ EC74             >
 865+ EC74             >mirror_Ptr      defl    $
 865+ EC74             >
 865+ EC74 FE 3D       >                dw      Dict_Ptr + 2        // xt
 865+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 865+ EC76             >
 865+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 865+ EC76             >
 865+ EC76             >//              ______________________________________________________________________
 865+ EC76             >//              Dictionary part
 865+ EC76             >
 865+ EC76             >                org     Dict_Ptr
 865+ 3DFC             >
 865+ 3DFC 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 865+ 3DFE             >
 865+ 3DFE             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 865+ 3DFE CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 865+ 3E01             >
 865+ 3E01             >
 865+ 3E01             >                endif           ; ok        // for other definitions it "points" the correct handler
 865+ 3E01             >                // Use of "; ok" to suppress "warning[fwdref]"
 865+ 3E01             >
 865+ 3E01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 866+ 3E01 E7 3D                        dw      THEN
 867+ 3E03 F4 24                        dw      EXIT
 868+ 3E05
 869+ 3E05              //  ______________________________________________________________________
 870+ 3E05              //
 871+ 3E05              // else        ( a1 2 -- a2 2 ) \ compile-time
 872+ 3E05              //
 873+ 3E05                              Colon_Def ELSE, "ELSE", is_immediate
 873+ 3E05             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 873+ 3E05             >
 873+ 3E05             >Dict_Ptr        defl    $
 873+ 3E05             >
 873+ 3E05             >//              ______________________________________________________________________
 873+ 3E05             >//              Heap part
 873+ 3E05             >
 873+ 3E05             >
 873+ 3E05             >                org     (Heap_Ptr & $1FFF) + $E000
 873+ EC76             >
 873+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ EC76             >Latest_Definition defl  Heap_Ptr
 873+ EC76             >
 873+ EC76             >                // dummy db directives used to calculate length of namec
 873+ EC76 45 4C 53 45 >                db      "ELSE"
 873+ EC7A             >len_NFA         defl    $ - temp_NFA
 873+ EC7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ EC76             >
 873+ EC76 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ EC77 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 873+ EC7B             >                org     $-1                 // alter last byte of Name just above to set
 873+ EC7A C5          >                db      {b $} | END_BIT     // msb as name end
 873+ EC7B             >
 873+ EC7B 6C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 873+ EC7D             >Prev_Ptr        defl    Heap_Ptr
 873+ EC7D             >
 873+ EC7D             >mirror_Ptr      defl    $
 873+ EC7D             >
 873+ EC7D 07 3E       >                dw      Dict_Ptr + 2        // xt
 873+ EC7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 873+ EC7F             >
 873+ EC7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 873+ EC7F             >
 873+ EC7F             >//              ______________________________________________________________________
 873+ EC7F             >//              Dictionary part
 873+ EC7F             >
 873+ EC7F             >                org     Dict_Ptr
 873+ 3E05             >
 873+ 3E05 7D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 873+ 3E07             >
 873+ 3E07             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 3E07 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 3E0A             >
 873+ 3E0A             >
 873+ 3E0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 3E0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 3E0A             >
 873+ 3E0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 3E0A 98 2A                        dw      QCOMP
 875+ 3E0C 38 27 BC 2A                  dw      TWO, QPAIRS
 876+ 3E10 F3 2A 82 20                  dw      COMPILE, BRANCH
 877+ 3E14 4F 28 2A 27                  dw      HERE, ZERO, COMMA
 877+ 3E18 65 28
 878+ 3E1A C3 25 38 27                  dw      SWAP, TWO, THEN
 878+ 3E1E E7 3D
 879+ 3E20 38 27                        dw      TWO
 880+ 3E22 F4 24                        dw      EXIT
 881+ 3E24
 882+ 3E24              //  ______________________________________________________________________
 883+ 3E24              //
 884+ 3E24              // begin        ( -- a 1 ) \ compile-time
 885+ 3E24              // BEGIN ... AGAIN
 886+ 3E24              // BEGIN ... f UNTIL
 887+ 3E24              // BEGIN ... f WHILE ... REPEAT
 888+ 3E24                              Colon_Def BEGIN, "BEGIN", is_immediate
 888+ 3E24             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 888+ 3E24             >
 888+ 3E24             >Dict_Ptr        defl    $
 888+ 3E24             >
 888+ 3E24             >//              ______________________________________________________________________
 888+ 3E24             >//              Heap part
 888+ 3E24             >
 888+ 3E24             >
 888+ 3E24             >                org     (Heap_Ptr & $1FFF) + $E000
 888+ EC7F             >
 888+ EC7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 888+ EC7F             >Latest_Definition defl  Heap_Ptr
 888+ EC7F             >
 888+ EC7F             >                // dummy db directives used to calculate length of namec
 888+ EC7F 42 45 47 49 >                db      "BEGIN"
 888+ EC83 4E          >
 888+ EC84             >len_NFA         defl    $ - temp_NFA
 888+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 888+ EC7F             >
 888+ EC7F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 888+ EC80 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 888+ EC84 4E          >
 888+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 888+ EC84 CE          >                db      {b $} | END_BIT     // msb as name end
 888+ EC85             >
 888+ EC85 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 888+ EC87             >Prev_Ptr        defl    Heap_Ptr
 888+ EC87             >
 888+ EC87             >mirror_Ptr      defl    $
 888+ EC87             >
 888+ EC87 26 3E       >                dw      Dict_Ptr + 2        // xt
 888+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 888+ EC89             >
 888+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 888+ EC89             >
 888+ EC89             >//              ______________________________________________________________________
 888+ EC89             >//              Dictionary part
 888+ EC89             >
 888+ EC89             >                org     Dict_Ptr
 888+ 3E24             >
 888+ 3E24 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 888+ 3E26             >
 888+ 3E26             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 888+ 3E26 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 888+ 3E29             >
 888+ 3E29             >
 888+ 3E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 888+ 3E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 888+ 3E29             >
 888+ 3E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 889+ 3E29 98 2A                        dw      QCOMP
 890+ 3E2B 4F 28                        dw      HERE
 891+ 3E2D 38 27                        dw      TWO
 892+ 3E2F F4 24                        dw      EXIT
 893+ 3E31
 894+ 3E31              //  ______________________________________________________________________
 895+ 3E31              //
 896+ 3E31              // again        ( a 1 -- ) \ compile-time
 897+ 3E31                              Colon_Def AGAIN, "AGAIN", is_immediate
 897+ 3E31             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 897+ 3E31             >
 897+ 3E31             >Dict_Ptr        defl    $
 897+ 3E31             >
 897+ 3E31             >//              ______________________________________________________________________
 897+ 3E31             >//              Heap part
 897+ 3E31             >
 897+ 3E31             >
 897+ 3E31             >                org     (Heap_Ptr & $1FFF) + $E000
 897+ EC89             >
 897+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ EC89             >Latest_Definition defl  Heap_Ptr
 897+ EC89             >
 897+ EC89             >                // dummy db directives used to calculate length of namec
 897+ EC89 41 47 41 49 >                db      "AGAIN"
 897+ EC8D 4E          >
 897+ EC8E             >len_NFA         defl    $ - temp_NFA
 897+ EC8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ EC89             >
 897+ EC89 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ EC8A 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 897+ EC8E 4E          >
 897+ EC8F             >                org     $-1                 // alter last byte of Name just above to set
 897+ EC8E CE          >                db      {b $} | END_BIT     // msb as name end
 897+ EC8F             >
 897+ EC8F 7F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 897+ EC91             >Prev_Ptr        defl    Heap_Ptr
 897+ EC91             >
 897+ EC91             >mirror_Ptr      defl    $
 897+ EC91             >
 897+ EC91 33 3E       >                dw      Dict_Ptr + 2        // xt
 897+ EC93             >Heap_Ptr        defl    $ - $E000           // save current HP
 897+ EC93             >
 897+ EC93             >Current_HP      defl  $ - $E000             // used to set HP once!
 897+ EC93             >
 897+ EC93             >//              ______________________________________________________________________
 897+ EC93             >//              Dictionary part
 897+ EC93             >
 897+ EC93             >                org     Dict_Ptr
 897+ 3E31             >
 897+ 3E31 91 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 897+ 3E33             >
 897+ 3E33             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 3E33 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 3E36             >
 897+ 3E36             >
 897+ 3E36             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 3E36             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 3E36             >
 897+ 3E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 3E36 98 2A                        dw      QCOMP
 899+ 3E38 38 27 BC 2A                  dw      TWO, QPAIRS
 900+ 3E3C F3 2A 82 20                  dw      COMPILE, BRANCH
 901+ 3E40 C7 3D                        dw      BACK
 902+ 3E42 F4 24                        dw      EXIT
 903+ 3E44
 904+ 3E44              //  ______________________________________________________________________
 905+ 3E44              //
 906+ 3E44              // until        ( a 1 -- ) \ compile-time
 907+ 3E44                              Colon_Def UNTIL, "UNTIL", is_immediate
 907+ 3E44             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 907+ 3E44             >
 907+ 3E44             >Dict_Ptr        defl    $
 907+ 3E44             >
 907+ 3E44             >//              ______________________________________________________________________
 907+ 3E44             >//              Heap part
 907+ 3E44             >
 907+ 3E44             >
 907+ 3E44             >                org     (Heap_Ptr & $1FFF) + $E000
 907+ EC93             >
 907+ EC93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 907+ EC93             >Latest_Definition defl  Heap_Ptr
 907+ EC93             >
 907+ EC93             >                // dummy db directives used to calculate length of namec
 907+ EC93 55 4E 54 49 >                db      "UNTIL"
 907+ EC97 4C          >
 907+ EC98             >len_NFA         defl    $ - temp_NFA
 907+ EC98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 907+ EC93             >
 907+ EC93 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 907+ EC94 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 907+ EC98 4C          >
 907+ EC99             >                org     $-1                 // alter last byte of Name just above to set
 907+ EC98 CC          >                db      {b $} | END_BIT     // msb as name end
 907+ EC99             >
 907+ EC99 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 907+ EC9B             >Prev_Ptr        defl    Heap_Ptr
 907+ EC9B             >
 907+ EC9B             >mirror_Ptr      defl    $
 907+ EC9B             >
 907+ EC9B 46 3E       >                dw      Dict_Ptr + 2        // xt
 907+ EC9D             >Heap_Ptr        defl    $ - $E000           // save current HP
 907+ EC9D             >
 907+ EC9D             >Current_HP      defl  $ - $E000             // used to set HP once!
 907+ EC9D             >
 907+ EC9D             >//              ______________________________________________________________________
 907+ EC9D             >//              Dictionary part
 907+ EC9D             >
 907+ EC9D             >                org     Dict_Ptr
 907+ 3E44             >
 907+ 3E44 9B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 907+ 3E46             >
 907+ 3E46             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 907+ 3E46 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 907+ 3E49             >
 907+ 3E49             >
 907+ 3E49             >                endif           ; ok        // for other definitions it "points" the correct handler
 907+ 3E49             >                // Use of "; ok" to suppress "warning[fwdref]"
 907+ 3E49             >
 907+ 3E49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 908+ 3E49 98 2A                        dw      QCOMP
 909+ 3E4B 38 27 BC 2A                  dw      TWO, QPAIRS
 910+ 3E4F F3 2A 8F 20                  dw      COMPILE, ZBRANCH
 911+ 3E53 C7 3D                        dw      BACK
 912+ 3E55 F4 24                        dw      EXIT
 913+ 3E57
 914+ 3E57              //  ______________________________________________________________________
 915+ 3E57              //
 916+ 3E57              // end          ( a 1 -- ) \ compile-time
 917+ 3E57                              Colon_Def END, "END", is_immediate
 917+ 3E57             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 917+ 3E57             >
 917+ 3E57             >Dict_Ptr        defl    $
 917+ 3E57             >
 917+ 3E57             >//              ______________________________________________________________________
 917+ 3E57             >//              Heap part
 917+ 3E57             >
 917+ 3E57             >
 917+ 3E57             >                org     (Heap_Ptr & $1FFF) + $E000
 917+ EC9D             >
 917+ EC9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ EC9D             >Latest_Definition defl  Heap_Ptr
 917+ EC9D             >
 917+ EC9D             >                // dummy db directives used to calculate length of namec
 917+ EC9D 45 4E 44    >                db      "END"
 917+ ECA0             >len_NFA         defl    $ - temp_NFA
 917+ ECA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ EC9D             >
 917+ EC9D C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ EC9E 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 917+ ECA1             >                org     $-1                 // alter last byte of Name just above to set
 917+ ECA0 C4          >                db      {b $} | END_BIT     // msb as name end
 917+ ECA1             >
 917+ ECA1 93 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 917+ ECA3             >Prev_Ptr        defl    Heap_Ptr
 917+ ECA3             >
 917+ ECA3             >mirror_Ptr      defl    $
 917+ ECA3             >
 917+ ECA3 59 3E       >                dw      Dict_Ptr + 2        // xt
 917+ ECA5             >Heap_Ptr        defl    $ - $E000           // save current HP
 917+ ECA5             >
 917+ ECA5             >Current_HP      defl  $ - $E000             // used to set HP once!
 917+ ECA5             >
 917+ ECA5             >//              ______________________________________________________________________
 917+ ECA5             >//              Dictionary part
 917+ ECA5             >
 917+ ECA5             >                org     Dict_Ptr
 917+ 3E57             >
 917+ 3E57 A3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 917+ 3E59             >
 917+ 3E59             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 3E59 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 3E5C             >
 917+ 3E5C             >
 917+ 3E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 3E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 3E5C             >
 917+ 3E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 3E5C 46 3E                        dw      UNTIL
 919+ 3E5E F4 24                        dw      EXIT
 920+ 3E60
 921+ 3E60              //  ______________________________________________________________________
 922+ 3E60              //
 923+ 3E60              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 924+ 3E60                              Colon_Def WHILE, "WHILE", is_immediate
 924+ 3E60             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 924+ 3E60             >
 924+ 3E60             >Dict_Ptr        defl    $
 924+ 3E60             >
 924+ 3E60             >//              ______________________________________________________________________
 924+ 3E60             >//              Heap part
 924+ 3E60             >
 924+ 3E60             >
 924+ 3E60             >                org     (Heap_Ptr & $1FFF) + $E000
 924+ ECA5             >
 924+ ECA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ ECA5             >Latest_Definition defl  Heap_Ptr
 924+ ECA5             >
 924+ ECA5             >                // dummy db directives used to calculate length of namec
 924+ ECA5 57 48 49 4C >                db      "WHILE"
 924+ ECA9 45          >
 924+ ECAA             >len_NFA         defl    $ - temp_NFA
 924+ ECAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ ECA5             >
 924+ ECA5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ ECA6 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 924+ ECAA 45          >
 924+ ECAB             >                org     $-1                 // alter last byte of Name just above to set
 924+ ECAA C5          >                db      {b $} | END_BIT     // msb as name end
 924+ ECAB             >
 924+ ECAB 9D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 924+ ECAD             >Prev_Ptr        defl    Heap_Ptr
 924+ ECAD             >
 924+ ECAD             >mirror_Ptr      defl    $
 924+ ECAD             >
 924+ ECAD 62 3E       >                dw      Dict_Ptr + 2        // xt
 924+ ECAF             >Heap_Ptr        defl    $ - $E000           // save current HP
 924+ ECAF             >
 924+ ECAF             >Current_HP      defl  $ - $E000             // used to set HP once!
 924+ ECAF             >
 924+ ECAF             >//              ______________________________________________________________________
 924+ ECAF             >//              Dictionary part
 924+ ECAF             >
 924+ ECAF             >                org     Dict_Ptr
 924+ 3E60             >
 924+ 3E60 AD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 924+ 3E62             >
 924+ 3E62             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 3E62 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 924+ 3E65             >
 924+ 3E65             >
 924+ 3E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 3E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 3E65             >
 924+ 3E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 3E65 D4 3D                        dw      IF
 926+ 3E67              //              dw      TWO_PLUS // ( that is 4 )
 927+ 3E67 05 26                        dw      TWO_SWAP
 928+ 3E69 F4 24                        dw      EXIT
 929+ 3E6B
 930+ 3E6B              //  ______________________________________________________________________
 931+ 3E6B              //
 932+ 3E6B              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 933+ 3E6B                              Colon_Def REPEAT, "REPEAT", is_immediate
 933+ 3E6B             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 933+ 3E6B             >
 933+ 3E6B             >Dict_Ptr        defl    $
 933+ 3E6B             >
 933+ 3E6B             >//              ______________________________________________________________________
 933+ 3E6B             >//              Heap part
 933+ 3E6B             >
 933+ 3E6B             >
 933+ 3E6B             >                org     (Heap_Ptr & $1FFF) + $E000
 933+ ECAF             >
 933+ ECAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ ECAF             >Latest_Definition defl  Heap_Ptr
 933+ ECAF             >
 933+ ECAF             >                // dummy db directives used to calculate length of namec
 933+ ECAF 52 45 50 45 >                db      "REPEAT"
 933+ ECB3 41 54       >
 933+ ECB5             >len_NFA         defl    $ - temp_NFA
 933+ ECB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ ECAF             >
 933+ ECAF C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ ECB0 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 933+ ECB4 41 54       >
 933+ ECB6             >                org     $-1                 // alter last byte of Name just above to set
 933+ ECB5 D4          >                db      {b $} | END_BIT     // msb as name end
 933+ ECB6             >
 933+ ECB6 A5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 933+ ECB8             >Prev_Ptr        defl    Heap_Ptr
 933+ ECB8             >
 933+ ECB8             >mirror_Ptr      defl    $
 933+ ECB8             >
 933+ ECB8 6D 3E       >                dw      Dict_Ptr + 2        // xt
 933+ ECBA             >Heap_Ptr        defl    $ - $E000           // save current HP
 933+ ECBA             >
 933+ ECBA             >Current_HP      defl  $ - $E000             // used to set HP once!
 933+ ECBA             >
 933+ ECBA             >//              ______________________________________________________________________
 933+ ECBA             >//              Dictionary part
 933+ ECBA             >
 933+ ECBA             >                org     Dict_Ptr
 933+ 3E6B             >
 933+ 3E6B B8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 933+ 3E6D             >
 933+ 3E6D             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 3E6D CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 3E70             >
 933+ 3E70             >
 933+ 3E70             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 3E70             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 3E70             >
 933+ 3E70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 3E70 33 3E                        dw      AGAIN
 935+ 3E72              //              dw      TWO_MINUS
 936+ 3E72 E7 3D                        dw      THEN
 937+ 3E74 F4 24                        dw      EXIT
 938+ 3E76
 939+ 3E76              //  ______________________________________________________________________
 940+ 3E76              //
 941+ 3E76              // ?do-
 942+ 3E76              // special version of "BACK" used by ?DO and LOOP
 943+ 3E76                              Colon_Def C_DO_BACK, "?DO-", is_normal
 943+ 3E76             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 943+ 3E76             >
 943+ 3E76             >Dict_Ptr        defl    $
 943+ 3E76             >
 943+ 3E76             >//              ______________________________________________________________________
 943+ 3E76             >//              Heap part
 943+ 3E76             >
 943+ 3E76             >
 943+ 3E76             >                org     (Heap_Ptr & $1FFF) + $E000
 943+ ECBA             >
 943+ ECBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ ECBA             >Latest_Definition defl  Heap_Ptr
 943+ ECBA             >
 943+ ECBA             >                // dummy db directives used to calculate length of namec
 943+ ECBA 3F 44 4F 2D >                db      "?DO-"
 943+ ECBE             >len_NFA         defl    $ - temp_NFA
 943+ ECBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ ECBA             >
 943+ ECBA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ ECBB 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 943+ ECBF             >                org     $-1                 // alter last byte of Name just above to set
 943+ ECBE AD          >                db      {b $} | END_BIT     // msb as name end
 943+ ECBF             >
 943+ ECBF AF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 943+ ECC1             >Prev_Ptr        defl    Heap_Ptr
 943+ ECC1             >
 943+ ECC1             >mirror_Ptr      defl    $
 943+ ECC1             >
 943+ ECC1 78 3E       >                dw      Dict_Ptr + 2        // xt
 943+ ECC3             >Heap_Ptr        defl    $ - $E000           // save current HP
 943+ ECC3             >
 943+ ECC3             >Current_HP      defl  $ - $E000             // used to set HP once!
 943+ ECC3             >
 943+ ECC3             >//              ______________________________________________________________________
 943+ ECC3             >//              Dictionary part
 943+ ECC3             >
 943+ ECC3             >                org     Dict_Ptr
 943+ 3E76             >
 943+ 3E76 C1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 943+ 3E78             >
 943+ 3E78             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 3E78 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 3E7B             >
 943+ 3E7B             >
 943+ 3E7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 3E7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 3E7B             >
 943+ 3E7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 3E7B C7 3D                        dw      BACK
 945+ 3E7D              CDoBack_Begin:
 946+ 3E7D DB 24 0D 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 946+ 3E81 34 26 8E 28
 947+ 3E85 8F 20                        dw      ZBRANCH
 948+ 3E87 0A 00                        dw      CDoBack_While - $
 949+ 3E89 6D 25 E7 3D                  dw          TWO_PLUS, THEN
 950+ 3E8D 82 20                        dw      BRANCH
 951+ 3E8F EE FF                        dw      CDoBack_Begin - $
 952+ 3E91              CDoBack_While:
 953+ 3E91 CB 2A 0D 28                  dw      QCSP, CSP, STORE
 953+ 3E95 3E 26
 954+ 3E97 F4 24                        dw      EXIT
 955+ 3E99
 956+ 3E99              //  ______________________________________________________________________
 957+ 3E99              //
 958+ 3E99              // do
 959+ 3E99              // DO  ... LOOP
 960+ 3E99              // DO  ... n +LOOP
 961+ 3E99              // ?DO ... LOOP
 962+ 3E99              // ?DO ... n +LOOP
 963+ 3E99                              Colon_Def DO, "DO", is_immediate
 963+ 3E99             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 963+ 3E99             >
 963+ 3E99             >Dict_Ptr        defl    $
 963+ 3E99             >
 963+ 3E99             >//              ______________________________________________________________________
 963+ 3E99             >//              Heap part
 963+ 3E99             >
 963+ 3E99             >
 963+ 3E99             >                org     (Heap_Ptr & $1FFF) + $E000
 963+ ECC3             >
 963+ ECC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ ECC3             >Latest_Definition defl  Heap_Ptr
 963+ ECC3             >
 963+ ECC3             >                // dummy db directives used to calculate length of namec
 963+ ECC3 44 4F       >                db      "DO"
 963+ ECC5             >len_NFA         defl    $ - temp_NFA
 963+ ECC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ ECC3             >
 963+ ECC3 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ ECC4 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 963+ ECC6             >                org     $-1                 // alter last byte of Name just above to set
 963+ ECC5 CF          >                db      {b $} | END_BIT     // msb as name end
 963+ ECC6             >
 963+ ECC6 BA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 963+ ECC8             >Prev_Ptr        defl    Heap_Ptr
 963+ ECC8             >
 963+ ECC8             >mirror_Ptr      defl    $
 963+ ECC8             >
 963+ ECC8 9B 3E       >                dw      Dict_Ptr + 2        // xt
 963+ ECCA             >Heap_Ptr        defl    $ - $E000           // save current HP
 963+ ECCA             >
 963+ ECCA             >Current_HP      defl  $ - $E000             // used to set HP once!
 963+ ECCA             >
 963+ ECCA             >//              ______________________________________________________________________
 963+ ECCA             >//              Dictionary part
 963+ ECCA             >
 963+ ECCA             >                org     Dict_Ptr
 963+ 3E99             >
 963+ 3E99 C8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 963+ 3E9B             >
 963+ 3E9B             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 3E9B CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 3E9E             >
 963+ 3E9E             >
 963+ 3E9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 3E9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 3E9E             >
 963+ 3E9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 3E9E F3 2A CC 20                  dw      COMPILE, C_DO
 965+ 3EA2 0D 28 34 26                  dw      CSP, FETCH, STORE_CSP
 965+ 3EA6 76 2A
 966+ 3EA8 4F 28 3F 27                  dw      HERE, THREE
 967+ 3EAC F4 24                        dw      EXIT
 968+ 3EAE
 969+ 3EAE              //  ______________________________________________________________________
 970+ 3EAE              //
 971+ 3EAE              // loop
 972+ 3EAE                              Colon_Def LOOP, "LOOP", is_immediate
 972+ 3EAE             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 972+ 3EAE             >
 972+ 3EAE             >Dict_Ptr        defl    $
 972+ 3EAE             >
 972+ 3EAE             >//              ______________________________________________________________________
 972+ 3EAE             >//              Heap part
 972+ 3EAE             >
 972+ 3EAE             >
 972+ 3EAE             >                org     (Heap_Ptr & $1FFF) + $E000
 972+ ECCA             >
 972+ ECCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 972+ ECCA             >Latest_Definition defl  Heap_Ptr
 972+ ECCA             >
 972+ ECCA             >                // dummy db directives used to calculate length of namec
 972+ ECCA 4C 4F 4F 50 >                db      "LOOP"
 972+ ECCE             >len_NFA         defl    $ - temp_NFA
 972+ ECCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 972+ ECCA             >
 972+ ECCA C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 972+ ECCB 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 972+ ECCF             >                org     $-1                 // alter last byte of Name just above to set
 972+ ECCE D0          >                db      {b $} | END_BIT     // msb as name end
 972+ ECCF             >
 972+ ECCF C3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 972+ ECD1             >Prev_Ptr        defl    Heap_Ptr
 972+ ECD1             >
 972+ ECD1             >mirror_Ptr      defl    $
 972+ ECD1             >
 972+ ECD1 B0 3E       >                dw      Dict_Ptr + 2        // xt
 972+ ECD3             >Heap_Ptr        defl    $ - $E000           // save current HP
 972+ ECD3             >
 972+ ECD3             >Current_HP      defl  $ - $E000             // used to set HP once!
 972+ ECD3             >
 972+ ECD3             >//              ______________________________________________________________________
 972+ ECD3             >//              Dictionary part
 972+ ECD3             >
 972+ ECD3             >                org     Dict_Ptr
 972+ 3EAE             >
 972+ 3EAE D1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 972+ 3EB0             >
 972+ 3EB0             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 972+ 3EB0 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 972+ 3EB3             >
 972+ 3EB3             >
 972+ 3EB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 972+ 3EB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 972+ 3EB3             >
 972+ 3EB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 973+ 3EB3 3F 27 BC 2A                  dw      THREE, QPAIRS
 974+ 3EB7 F3 2A 7A 20                  dw      COMPILE, C_LOOP
 975+ 3EBB 78 3E                        dw      C_DO_BACK
 976+ 3EBD F4 24                        dw      EXIT
 977+ 3EBF
 978+ 3EBF              //  ______________________________________________________________________
 979+ 3EBF              //
 980+ 3EBF              // +loop
 981+ 3EBF                              Colon_Def PLOOP, "+LOOP", is_immediate
 981+ 3EBF             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 981+ 3EBF             >
 981+ 3EBF             >Dict_Ptr        defl    $
 981+ 3EBF             >
 981+ 3EBF             >//              ______________________________________________________________________
 981+ 3EBF             >//              Heap part
 981+ 3EBF             >
 981+ 3EBF             >
 981+ 3EBF             >                org     (Heap_Ptr & $1FFF) + $E000
 981+ ECD3             >
 981+ ECD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 981+ ECD3             >Latest_Definition defl  Heap_Ptr
 981+ ECD3             >
 981+ ECD3             >                // dummy db directives used to calculate length of namec
 981+ ECD3 2B 4C 4F 4F >                db      "+LOOP"
 981+ ECD7 50          >
 981+ ECD8             >len_NFA         defl    $ - temp_NFA
 981+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 981+ ECD3             >
 981+ ECD3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 981+ ECD4 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 981+ ECD8 50          >
 981+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 981+ ECD8 D0          >                db      {b $} | END_BIT     // msb as name end
 981+ ECD9             >
 981+ ECD9 CA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 981+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 981+ ECDB             >
 981+ ECDB             >mirror_Ptr      defl    $
 981+ ECDB             >
 981+ ECDB C1 3E       >                dw      Dict_Ptr + 2        // xt
 981+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 981+ ECDD             >
 981+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 981+ ECDD             >
 981+ ECDD             >//              ______________________________________________________________________
 981+ ECDD             >//              Dictionary part
 981+ ECDD             >
 981+ ECDD             >                org     Dict_Ptr
 981+ 3EBF             >
 981+ 3EBF DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 981+ 3EC1             >
 981+ 3EC1             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 981+ 3EC1 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 981+ 3EC4             >
 981+ 3EC4             >
 981+ 3EC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 981+ 3EC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 981+ 3EC4             >
 981+ 3EC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 982+ 3EC4 3F 27 BC 2A                  dw      THREE, QPAIRS
 983+ 3EC8 F3 2A 4B 20                  dw      COMPILE, C_PLOOP
 984+ 3ECC 78 3E                        dw      C_DO_BACK
 985+ 3ECE F4 24                        dw      EXIT
 986+ 3ED0
 987+ 3ED0              //  ______________________________________________________________________
 988+ 3ED0              //
 989+ 3ED0              // ?do
 990+ 3ED0                              Colon_Def QDO, "?DO", is_immediate
 990+ 3ED0             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 990+ 3ED0             >
 990+ 3ED0             >Dict_Ptr        defl    $
 990+ 3ED0             >
 990+ 3ED0             >//              ______________________________________________________________________
 990+ 3ED0             >//              Heap part
 990+ 3ED0             >
 990+ 3ED0             >
 990+ 3ED0             >                org     (Heap_Ptr & $1FFF) + $E000
 990+ ECDD             >
 990+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ ECDD             >Latest_Definition defl  Heap_Ptr
 990+ ECDD             >
 990+ ECDD             >                // dummy db directives used to calculate length of namec
 990+ ECDD 3F 44 4F    >                db      "?DO"
 990+ ECE0             >len_NFA         defl    $ - temp_NFA
 990+ ECE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ ECDD             >
 990+ ECDD C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ ECDE 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 990+ ECE1             >                org     $-1                 // alter last byte of Name just above to set
 990+ ECE0 CF          >                db      {b $} | END_BIT     // msb as name end
 990+ ECE1             >
 990+ ECE1 D3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 990+ ECE3             >Prev_Ptr        defl    Heap_Ptr
 990+ ECE3             >
 990+ ECE3             >mirror_Ptr      defl    $
 990+ ECE3             >
 990+ ECE3 D2 3E       >                dw      Dict_Ptr + 2        // xt
 990+ ECE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 990+ ECE5             >
 990+ ECE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 990+ ECE5             >
 990+ ECE5             >//              ______________________________________________________________________
 990+ ECE5             >//              Dictionary part
 990+ ECE5             >
 990+ ECE5             >                org     Dict_Ptr
 990+ 3ED0             >
 990+ 3ED0 E3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 990+ 3ED2             >
 990+ 3ED2             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 3ED2 CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 3ED5             >
 990+ 3ED5             >
 990+ 3ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 3ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 3ED5             >
 990+ 3ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 3ED5 F3 2A A4 20                  dw      COMPILE, C_Q_DO
 992+ 3ED9 0D 28 34 26                  dw      CSP, FETCH, STORE_CSP
 992+ 3EDD 76 2A
 993+ 3EDF 4F 28 2A 27                  dw      HERE, ZERO, COMMA, ZERO
 993+ 3EE3 65 28 2A 27
 994+ 3EE7 4F 28 3F 27                  dw      HERE, THREE
 995+ 3EEB F4 24                        dw      EXIT
 996+ 3EED
 997+ 3EED              //  ______________________________________________________________________
 998+ 3EED              //
 999+ 3EED              // \
1000+ 3EED                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1000+ 3EED             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1000+ 3EED             >
1000+ 3EED             >Dict_Ptr        defl    $
1000+ 3EED             >
1000+ 3EED             >//              ______________________________________________________________________
1000+ 3EED             >//              Heap part
1000+ 3EED             >
1000+ 3EED             >
1000+ 3EED             >                org     (Heap_Ptr & $1FFF) + $E000
1000+ ECE5             >
1000+ ECE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1000+ ECE5             >Latest_Definition defl  Heap_Ptr
1000+ ECE5             >
1000+ ECE5             >                // dummy db directives used to calculate length of namec
1000+ ECE5 5C          >                db      "\\"
1000+ ECE6             >len_NFA         defl    $ - temp_NFA
1000+ ECE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1000+ ECE5             >
1000+ ECE5 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1000+ ECE6 5C          >                db      "\\"               // name string in 7-bit ascii, but
1000+ ECE7             >                org     $-1                 // alter last byte of Name just above to set
1000+ ECE6 DC          >                db      {b $} | END_BIT     // msb as name end
1000+ ECE7             >
1000+ ECE7 DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1000+ ECE9             >Prev_Ptr        defl    Heap_Ptr
1000+ ECE9             >
1000+ ECE9             >mirror_Ptr      defl    $
1000+ ECE9             >
1000+ ECE9 EF 3E       >                dw      Dict_Ptr + 2        // xt
1000+ ECEB             >Heap_Ptr        defl    $ - $E000           // save current HP
1000+ ECEB             >
1000+ ECEB             >Current_HP      defl  $ - $E000             // used to set HP once!
1000+ ECEB             >
1000+ ECEB             >//              ______________________________________________________________________
1000+ ECEB             >//              Dictionary part
1000+ ECEB             >
1000+ ECEB             >                org     Dict_Ptr
1000+ 3EED             >
1000+ 3EED E9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1000+ 3EEF             >
1000+ 3EEF             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1000+ 3EEF CD D5 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1000+ 3EF2             >
1000+ 3EF2             >
1000+ 3EF2             >                endif           ; ok        // for other definitions it "points" the correct handler
1000+ 3EF2             >                // Use of "; ok" to suppress "warning[fwdref]"
1000+ 3EF2             >
1000+ 3EF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1001+ 3EF2 CB 27 34 26                  dw      BLK, FETCH
1002+ 3EF6 66 25                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1003+ 3EF8 8F 20                        dw      ZBRANCH
1004+ 3EFA 34 00                        dw      Backslash_Else_1 - $
1005+ 3EFC
1006+ 3EFC CB 27 34 26                  dw          BLK, FETCH
1007+ 3F00 8F 20                        dw          ZBRANCH
1008+ 3F02 1A 00                        dw          Backslash_Else_2 - $
1009+ 3F04
1010+ 3F04 D1 27 34 26                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1010+ 3F08 54 27 66 25
1010+ 3F0C B4 24 54 27
1011+ 3F10 C3 25 8E 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1011+ 3F14 D1 27 1C 26
1012+ 3F18 82 20                        dw          BRANCH
1013+ 3F1A 10 00                        dw          Backslash_Endif_2 - $
1014+ 3F1C              Backslash_Else_2:
1015+ 3F1C 2A 27 8F 27                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1015+ 3F20 34 26 D1 27
1015+ 3F24 34 26 46 25
1015+ 3F28 52 26
1016+ 3F2A              Backslash_Endif_2:
1017+ 3F2A 82 20                        dw      BRANCH
1018+ 3F2C 0A 00                        dw      Backslash_Endif_1 - $
1019+ 3F2E              Backslash_Else_1:
1020+ 3F2E 5B 27 79 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1020+ 3F32 D1 27 3E 26
1021+ 3F36              Backslash_Endif_1:
1022+ 3F36 F4 24                        dw      EXIT
1023+ 3F38
1024+ 3F38              //  ______________________________________________________________________
1025+ 3F38              //
1026+ 3F38              // blk-fh
1027+ 3F38                              Variable_Def BLK_FH,   "BLK-FH",   1
1027+ 3F38             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1027+ 3F38             >
1027+ 3F38             >Dict_Ptr        defl    $
1027+ 3F38             >
1027+ 3F38             >//              ______________________________________________________________________
1027+ 3F38             >//              Heap part
1027+ 3F38             >
1027+ 3F38             >
1027+ 3F38             >                org     (Heap_Ptr & $1FFF) + $E000
1027+ ECEB             >
1027+ ECEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ ECEB             >Latest_Definition defl  Heap_Ptr
1027+ ECEB             >
1027+ ECEB             >                // dummy db directives used to calculate length of namec
1027+ ECEB 42 4C 4B 2D >                db      "BLK-FH"
1027+ ECEF 46 48       >
1027+ ECF1             >len_NFA         defl    $ - temp_NFA
1027+ ECF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ ECEB             >
1027+ ECEB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ ECEC 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1027+ ECF0 46 48       >
1027+ ECF2             >                org     $-1                 // alter last byte of Name just above to set
1027+ ECF1 C8          >                db      {b $} | END_BIT     // msb as name end
1027+ ECF2             >
1027+ ECF2 E5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1027+ ECF4             >Prev_Ptr        defl    Heap_Ptr
1027+ ECF4             >
1027+ ECF4             >mirror_Ptr      defl    $
1027+ ECF4             >
1027+ ECF4 3A 3F       >                dw      Dict_Ptr + 2        // xt
1027+ ECF6             >Heap_Ptr        defl    $ - $E000           // save current HP
1027+ ECF6             >
1027+ ECF6             >Current_HP      defl  $ - $E000             // used to set HP once!
1027+ ECF6             >
1027+ ECF6             >//              ______________________________________________________________________
1027+ ECF6             >//              Dictionary part
1027+ ECF6             >
1027+ ECF6             >                org     Dict_Ptr
1027+ 3F38             >
1027+ 3F38 F4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1027+ 3F3A             >
1027+ 3F3A             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 3F3A CD 11 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1027+ 3F3D             >
1027+ 3F3D             >
1027+ 3F3D             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 3F3D             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 3F3D             >
1027+ 3F3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 3F3D 01 00       >                dw      1
1028+ 3F3F
1029+ 3F3F                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1029+ 3F3F             >
1029+ 3F3F             >Dict_Ptr        defl    $
1029+ 3F3F             >
1029+ 3F3F             >//              ______________________________________________________________________
1029+ 3F3F             >//              Heap part
1029+ 3F3F             >
1029+ 3F3F             >
1029+ 3F3F             >                org     (Heap_Ptr & $1FFF) + $E000
1029+ ECF6             >
1029+ ECF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ ECF6             >Latest_Definition defl  Heap_Ptr
1029+ ECF6             >
1029+ ECF6             >                // dummy db directives used to calculate length of namec
1029+ ECF6 42 4C 4B 2D >                db      "BLK-FNAME"
1029+ ECFA 46 4E 41 4D >
1029+ ECFE 45          >
1029+ ECFF             >len_NFA         defl    $ - temp_NFA
1029+ ECFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ ECF6             >
1029+ ECF6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ ECF7 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1029+ ECFB 46 4E 41 4D >
1029+ ECFF 45          >
1029+ ED00             >                org     $-1                 // alter last byte of Name just above to set
1029+ ECFF C5          >                db      {b $} | END_BIT     // msb as name end
1029+ ED00             >
1029+ ED00 EB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1029+ ED02             >Prev_Ptr        defl    Heap_Ptr
1029+ ED02             >
1029+ ED02             >mirror_Ptr      defl    $
1029+ ED02             >
1029+ ED02 41 3F       >                dw      Dict_Ptr + 2        // xt
1029+ ED04             >Heap_Ptr        defl    $ - $E000           // save current HP
1029+ ED04             >
1029+ ED04             >Current_HP      defl  $ - $E000             // used to set HP once!
1029+ ED04             >
1029+ ED04             >//              ______________________________________________________________________
1029+ ED04             >//              Dictionary part
1029+ ED04             >
1029+ ED04             >                org     Dict_Ptr
1029+ 3F3F             >
1029+ 3F3F 02 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1029+ 3F41             >
1029+ 3F41             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 3F41 CD AE 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1029+ 3F44             >
1029+ 3F44             >
1029+ 3F44             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 3F44             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 3F44             >
1029+ 3F44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 3F44 1E           Len_Filename:   db      30
1031+ 3F45 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1031+ 3F49 6F 6F 6C 73
1031+ 3F4D 2F 76 66 6F
1031+ 3F51 72 74 68 2F
1031+ 3F55 21 42 6C 6F
1031+ 3F59 63 6B 73 2D
1031+ 3F5D 36 34 2E 62
1031+ 3F61 69 6E 00
1032+ 3F64 00 00 00...                  ds      32
1033+ 3F84
1034+ 3F84              Fence_Word:
1035+ 3F84              //  ______________________________________________________________________
1036+ 3F84              //
1037+ 3F84
1038+ 3F84 00           Here_Dictionary db      0
1039+ 3F85
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 144  3F85
 145  3F85              // now we save the compiled file so we can either run it or debug it
 146  3F85                              SAVENEX OPEN "output/main.nex", ORIGIN
 147  3F85                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  3F85                              SAVENEX CFG  0
 149  3F85                              SAVENEX BANK 2, 0
 150  3F85                              SAVENEX AUTO
 151  3F85                              SAVENEX CLOSE
 152  3F85
 153  3F85              //              PAGE 7 ;set 7 page to current slot
 154  3F85              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 155  3F85              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 156  3F85
 157  3F85                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 158  3F85                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 159  3F85
 160  3F85                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 161  3F85                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 162  3F85
 163  3F85                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 164  3F85                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 165  3F85
 166  3F85                              // To run must copy vforth and vforth.bin to /dot directory
 167  3F85                              // then start with
 168  3F85                              //      .vforth
 169  3F85
 170  3F85                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
