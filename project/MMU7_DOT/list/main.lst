# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.8 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20250719
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2025 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     1   // .dot
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  89  0000 ~            Heap_offset     defl    $2000
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  96  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  97  0000 ~            Heap_Ptr        defl    $0002
  98  0000 ~            Heap_offset     defl     0
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000              ORIGIN          equ     $2000                   // for .dot
 105  0000              Heap_Ptr        defl    $0002
 106  0000              Heap_offset     defl     0
 107  0000
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  2000
 115  2000                              if ( -1 == DEBUGGING )
 116  2000 ~                            ds 128                            // for binary comparison
 117  2000                              endif
 118  2000
 119  2000              //  ______________________________________________________________________
 120  2000              //
 121  2000              //  Naming convention for Label vs Forth correspondance
 122  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  2000              //    - Leading "0" is converted into "Z_"
 124  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  2000              //    - Equal sign "=" is converted in EQUAL
 131  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  2000              //    - Exclamation mark "!" is converted in STORE
 135  2000              //    - At-Sign "@" is converted in FETCH
 136  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  2000
 138  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000
  73+ 2000              //  ______________________________________________________________________
  74+ 2000              //
  75+ 2000              // Bit constants in length-byte
  76+ 2000
  77+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  78+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  79+ 2000              END_BIT         equ     %10000000               // $80
  80+ 2000
  81+ 2000
  82+ 2000              //  ______________________________________________________________________
  83+ 2000              //
  84+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  85+ 2000              //  pointers
  86+ 2000              temp_NFA        defl    0
  87+ 2000              last_NFA        defl    0
  88+ 2000              len_NFA         defl    0
  89+ 2000
  90+ 2000              Dict_Ptr        defl    0
  91+ 2000              // Heap_Ptr        defl    $0002
  92+ 2000              Prev_Ptr        defl    0
  93+ 2000              mirror_Ptr      defl    0
  94+ 2000
  95+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
  96+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
  97+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  98+ 2000
  99+ 2000
 100+ 2000              Behave          macro   xp
 101+ 2000 ~            temp_PTR        defl    $                   // save this org
 102+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 103+ 2000 ~                            dw      xp
 104+ 2000 ~                            org     temp_PTR
 105+ 2000                              endm
 106+ 2000
 107+ 2000              //  ______________________________________________________________________
 108+ 2000              //
 109+ 2000              //  Create a new "low-level" definition
 110+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 111+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 112+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 113+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 114+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 115+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 116+ 2000              //  This macro acts much like the standard Forth definition CREATE
 117+ 2000
 118+ 2000              New_Def         macro   label, namec, runcode, bits
 119+ 2000 ~
 120+ 2000 ~            Dict_Ptr        defl    $
 121+ 2000 ~
 122+ 2000 ~            //              ______________________________________________________________________
 123+ 2000 ~            //              Heap part
 124+ 2000 ~
 125+ 2000 ~
 126+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 127+ 2000 ~
 128+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ 2000 ~            Latest_Definition defl  Heap_Ptr
 130+ 2000 ~
 131+ 2000 ~                            // dummy db directives used to calculate length of namec
 132+ 2000 ~                            db      namec
 133+ 2000 ~            len_NFA         defl    $ - temp_NFA
 134+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 2000 ~
 136+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 138+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 139+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 140+ 2000 ~
 141+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 142+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 143+ 2000 ~
 144+ 2000 ~            mirror_Ptr      defl    $
 145+ 2000 ~
 146+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 147+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 148+ 2000 ~
 149+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 150+ 2000 ~
 151+ 2000 ~            //              ______________________________________________________________________
 152+ 2000 ~            //              Dictionary part
 153+ 2000 ~
 154+ 2000 ~                            org     Dict_Ptr
 155+ 2000 ~
 156+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 157+ 2000 ~
 158+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 160+ 2000 ~
 161+ 2000 ~
 162+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 163+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 164+ 2000 ~
 165+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 2000                              endm
 167+ 2000
 168+ 2000              //  ______________________________________________________________________
 169+ 2000              //
 170+ 2000              // Create a "constant"
 171+ 2000              // The constant value is compiled in first PFA cell
 172+ 2000              Constant_Def    macro   label, namec, constant_value
 173+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 174+ 2000 ~                            dw      constant_value
 175+ 2000                              endm
 176+ 2000
 177+ 2000              //  ______________________________________________________________________
 178+ 2000              //
 179+ 2000              // Create a "variable"
 180+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 181+ 2000              // this allow creation of "variables" which content is  of any length
 182+ 2000              Variable_Def    macro   label, namec, initial_value
 183+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 184+ 2000 ~                            dw      initial_value
 185+ 2000                              endm
 186+ 2000
 187+ 2000              //  ______________________________________________________________________
 188+ 2000              //
 189+ 2000              // Create a "user"
 190+ 2000              // It uses a single byte as offset to calculate the address of the variable
 191+ 2000              User_Def        macro   label, namec, offset_value
 192+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 193+ 2000 ~                            db      offset_value
 194+ 2000                              endm
 195+ 2000
 196+ 2000              //  ______________________________________________________________________
 197+ 2000              //
 198+ 2000              // Create a "colon-definition"
 199+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 200+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 201+ 2000              Colon_Def       macro   label, namec, bits
 202+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 203+ 2000                              endm
 204+ 2000
 205+ 2000              //  ______________________________________________________________________
 206+ 2000              //
 207+ 2000              // Create a "heap-string"
 208+ 2000              Start_Heap      macro
 209+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 210+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 211+ 2000 ~
 212+ 2000                              endm
 213+ 2000
 214+ 2000              End_Heap        macro
 215+ 2000 ~            Heap_Ptr        defl    $ - $E000
 216+ 2000 ~                            org     temp_ORG
 217+ 2000 ~
 218+ 2000                              endm
 219+ 2000
 220+ 2000
 221+ 2000              //  ______________________________________________________________________
 222+ 2000              //
 223+ 2000
 224+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 225+ 2000              BUFFERS         equ     6                   // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 226+ 2000              FIRST_system:   equ     LIMIT_system - 516*BUFFERS // Address of first BUFFER
 227+ 2000              USER_system:    equ     FIRST_system - 80   // User variables zone.
 228+ 2000              R0_system:      equ     USER_system         // Address of top of Return Stack. This is S0 + $00A0
 229+ 2000              TIB_system      equ     R0_system - 160     // TIB grows upwards, Return-Stack downward.
 230+ 2000              S0_system:      equ     TIB_system          // Address of top of Calc Stack
 231+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/system.asm
 139  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 48 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 48 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 01 01        SP_Basic:       dw      $0101               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C 0E 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 F8 D2        S0_origin:      dw      S0_system
  32+ 2014 98 D3        R0_origin:      dw      R0_system
  33+ 2016 F8 D2        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 30 32        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E8 D3                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 1C 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 98 D3        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6B                           db      107
  66+ E003 20 76 2D 46                  db      " v-Forth 1.8 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 38
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 44 6F 74                  db      " Dot-command - build 2025-07-19 ", $0D  // 33
  67+ E028 2D 63 6F 6D
  67+ E02C 6D 61 6E 64
  67+ E030 20 2D 20 62
  67+ E034 75 69 6C 64
  67+ E038 20 32 30 32
  67+ E03C 35 2D 30 37
  67+ E040 2D 31 39 20
  67+ E044 0D
  68+ E045 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E049 20 4C 69 63
  68+ E04D 65 6E 73 65
  68+ E051 20 7F
  69+ E053 20 31 39 39                  db      " 1990-2025 Matteo Vitturi ", $0D            // 27
  69+ E057 30 2D 32 30
  69+ E05B 32 35 20 4D
  69+ E05F 61 74 74 65
  69+ E063 6F 20 56 69
  69+ E067 74 74 75 72
  69+ E06B 69 20 0D
  70+ E06E                              End_Heap
  70+ E06E             >Heap_Ptr        defl    $ - $E000
  70+ E06E             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E06E             >
 124+ E06E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E06E             >Latest_Definition defl  Heap_Ptr
 124+ E06E             >
 124+ E06E             >                // dummy db directives used to calculate length of namec
 124+ E06E 4C 49 54    >                db      "LIT"
 124+ E071             >len_NFA         defl    $ - temp_NFA
 124+ E071             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E06E             >
 124+ E06E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E06F 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E072             >                org     $-1                 // alter last byte of Name just above to set
 124+ E071 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E072             >
 124+ E072 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E074             >Prev_Ptr        defl    Heap_Ptr
 124+ E074             >
 124+ E074             >mirror_Ptr      defl    $
 124+ E074             >
 124+ E074 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E076             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E076             >
 124+ E076             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E076             >
 124+ E076             >//              ______________________________________________________________________
 124+ E076             >//              Dictionary part
 124+ E076             >
 124+ E076             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 74 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E076             >
 140+ E076             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E076             >Latest_Definition defl  Heap_Ptr
 140+ E076             >
 140+ E076             >                // dummy db directives used to calculate length of namec
 140+ E076 45 58 45 43 >                db      "EXECUTE"
 140+ E07A 55 54 45    >
 140+ E07D             >len_NFA         defl    $ - temp_NFA
 140+ E07D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E076             >
 140+ E076 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E077 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07B 55 54 45    >
 140+ E07E             >                org     $-1                 // alter last byte of Name just above to set
 140+ E07D C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E07E             >
 140+ E07E 6E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E080             >Prev_Ptr        defl    Heap_Ptr
 140+ E080             >
 140+ E080             >mirror_Ptr      defl    $
 140+ E080             >
 140+ E080 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E082             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E082             >
 140+ E082             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E082             >
 140+ E082             >//              ______________________________________________________________________
 140+ E082             >//              Dictionary part
 140+ E082             >
 140+ E082             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 80 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E082             >
 160+ E082             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E082             >Latest_Definition defl  Heap_Ptr
 160+ E082             >
 160+ E082             >                // dummy db directives used to calculate length of namec
 160+ E082 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E086 4F 50 29    >
 160+ E089             >len_NFA         defl    $ - temp_NFA
 160+ E089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E082             >
 160+ E082 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E083 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E087 4F 50 29    >
 160+ E08A             >                org     $-1                 // alter last byte of Name just above to set
 160+ E089 A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08A             >
 160+ E08A 76 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08C             >Prev_Ptr        defl    Heap_Ptr
 160+ E08C             >
 160+ E08C             >mirror_Ptr      defl    $
 160+ E08C             >
 160+ E08C 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E08E             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E08E             >
 160+ E08E             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E08E             >
 160+ E08E             >//              ______________________________________________________________________
 160+ E08E             >//              Dictionary part
 160+ E08E             >
 160+ E08E             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8C 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B D5                           push    de
 164+ 204C D9                           exx
 165+ 204D E1                           pop     hl                  // HL is RP
 166+ 204E D1                           pop     de                  // DE get increment
 167+ 204F 42                           ld      b, d                // bc is increment also
 168+ 2050 4B                           ld      c, e
 169+ 2051
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 0C                        jr      c, Loop_Endif
 196+ 206B D9                               exx                     // restore IP and RP
 197+ 206C              Branch_Ptr:
 198+ 206C 0A                               ld      a, (bc)
 199+ 206D 6F                               ld      l, a
 200+ 206E 03                               inc     bc
 201+ 206F 0A                               ld      a, (bc)
 202+ 2070 67                               ld      h, a
 203+ 2071 0B                               dec     bc
 204+ 2072 09                               add     hl, bc
 205+ 2073 4D                               ld      c, l
 206+ 2074 44                               ld      b, h
 207+ 2075                                  next
 207+ 2075 DD E9       >                jp      (ix)
 208+ 2077              Loop_Endif:
 209+ 2077 13                           inc     de                  // keep    RP+4 (exit from loop)
 210+ 2078 D5                           push    de
 211+ 2079 D9                           exx
 212+ 207A D1                           pop     de
 213+ 207B              End_Loop_Ptr:
 214+ 207B 03                           inc     bc                  // skip branch-style offset
 215+ 207C 03                           inc     bc
 216+ 207D                              next
 216+ 207D DD E9       >                jp      (ix)
 217+ 207F
 218+ 207F              //  ______________________________________________________________________
 219+ 207F              //
 220+ 207F              // (loop)         --
 221+ 207F              // same as (LOOP) but index is incremented by 1
 222+ 207F              // compiled by LOOP.
 223+ 207F                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 223+ 207F             >
 223+ 207F             >Dict_Ptr        defl    $
 223+ 207F             >
 223+ 207F             >//              ______________________________________________________________________
 223+ 207F             >//              Heap part
 223+ 207F             >
 223+ 207F             >
 223+ 207F             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E08E             >
 223+ E08E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E08E             >Latest_Definition defl  Heap_Ptr
 223+ E08E             >
 223+ E08E             >                // dummy db directives used to calculate length of namec
 223+ E08E 28 4C 4F 4F >                db      "(LOOP)"
 223+ E092 50 29       >
 223+ E094             >len_NFA         defl    $ - temp_NFA
 223+ E094             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E08E             >
 223+ E08E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E08F 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 223+ E093 50 29       >
 223+ E095             >                org     $-1                 // alter last byte of Name just above to set
 223+ E094 A9          >                db      {b $} | END_BIT     // msb as name end
 223+ E095             >
 223+ E095 82 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E097             >Prev_Ptr        defl    Heap_Ptr
 223+ E097             >
 223+ E097             >mirror_Ptr      defl    $
 223+ E097             >
 223+ E097 81 20       >                dw      Dict_Ptr + 2        // xt
 223+ E099             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E099             >
 223+ E099             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E099             >
 223+ E099             >//              ______________________________________________________________________
 223+ E099             >//              Dictionary part
 223+ E099             >
 223+ E099             >                org     Dict_Ptr
 223+ 207F             >
 223+ 207F 97 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 2081             >
 223+ 2081             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 2081 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 2081 ~           >
 223+ 2081 ~           >
 223+ 2081             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 2081             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 2081             >
 223+ 2081             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 2081 ED 8A 00 01                  push    1
 225+ 2085 18 C4                        jr      Loop_Ptr
 226+ 2087
 227+ 2087              //  ______________________________________________________________________
 228+ 2087              //
 229+ 2087              // branch       --
 230+ 2087              // unconditional branch in colon definition using the following cell as an offset from current IP value
 231+ 2087              // compiled by ELSE, AGAIN and some other immediate words
 232+ 2087
 233+ 2087                              New_Def BRANCH, "BRANCH", is_code, is_normal
 233+ 2087             >
 233+ 2087             >Dict_Ptr        defl    $
 233+ 2087             >
 233+ 2087             >//              ______________________________________________________________________
 233+ 2087             >//              Heap part
 233+ 2087             >
 233+ 2087             >
 233+ 2087             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E099             >
 233+ E099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E099             >Latest_Definition defl  Heap_Ptr
 233+ E099             >
 233+ E099             >                // dummy db directives used to calculate length of namec
 233+ E099 42 52 41 4E >                db      "BRANCH"
 233+ E09D 43 48       >
 233+ E09F             >len_NFA         defl    $ - temp_NFA
 233+ E09F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E099             >
 233+ E099 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E09A 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 233+ E09E 43 48       >
 233+ E0A0             >                org     $-1                 // alter last byte of Name just above to set
 233+ E09F C8          >                db      {b $} | END_BIT     // msb as name end
 233+ E0A0             >
 233+ E0A0 8E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E0A2             >Prev_Ptr        defl    Heap_Ptr
 233+ E0A2             >
 233+ E0A2             >mirror_Ptr      defl    $
 233+ E0A2             >
 233+ E0A2 89 20       >                dw      Dict_Ptr + 2        // xt
 233+ E0A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E0A4             >
 233+ E0A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E0A4             >
 233+ E0A4             >//              ______________________________________________________________________
 233+ E0A4             >//              Dictionary part
 233+ E0A4             >
 233+ E0A4             >                org     Dict_Ptr
 233+ 2087             >
 233+ 2087 A2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 2089             >
 233+ 2089             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 2089 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 2089 ~           >
 233+ 2089 ~           >
 233+ 2089             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 2089             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 2089             >
 233+ 2089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 2089 18 E1                        jr Branch_Ptr
 235+ 208B
 236+ 208B
 237+ 208B              //  ______________________________________________________________________
 238+ 208B              //
 239+ 208B              // 0branch      f --
 240+ 208B              // conditional branch if the top-of-stack is ZERO or FALSE.
 241+ 208B              // compiled by IF, UNTIL and some other immediate words
 242+ 208B
 243+ 208B                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 243+ 208B             >
 243+ 208B             >Dict_Ptr        defl    $
 243+ 208B             >
 243+ 208B             >//              ______________________________________________________________________
 243+ 208B             >//              Heap part
 243+ 208B             >
 243+ 208B             >
 243+ 208B             >                org     (Heap_Ptr & $1FFF) + $E000
 243+ E0A4             >
 243+ E0A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ E0A4             >Latest_Definition defl  Heap_Ptr
 243+ E0A4             >
 243+ E0A4             >                // dummy db directives used to calculate length of namec
 243+ E0A4 30 42 52 41 >                db      "0BRANCH"
 243+ E0A8 4E 43 48    >
 243+ E0AB             >len_NFA         defl    $ - temp_NFA
 243+ E0AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ E0A4             >
 243+ E0A4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ E0A5 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 243+ E0A9 4E 43 48    >
 243+ E0AC             >                org     $-1                 // alter last byte of Name just above to set
 243+ E0AB C8          >                db      {b $} | END_BIT     // msb as name end
 243+ E0AC             >
 243+ E0AC 99 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243+ E0AE             >Prev_Ptr        defl    Heap_Ptr
 243+ E0AE             >
 243+ E0AE             >mirror_Ptr      defl    $
 243+ E0AE             >
 243+ E0AE 8D 20       >                dw      Dict_Ptr + 2        // xt
 243+ E0B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 243+ E0B0             >
 243+ E0B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 243+ E0B0             >
 243+ E0B0             >//              ______________________________________________________________________
 243+ E0B0             >//              Dictionary part
 243+ E0B0             >
 243+ E0B0             >                org     Dict_Ptr
 243+ 208B             >
 243+ 208B AE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 243+ 208D             >
 243+ 208D             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 208D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243+ 208D ~           >
 243+ 208D ~           >
 243+ 208D             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 208D             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 208D             >
 243+ 208D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 208D              ZBranch_Ptr:
 245+ 208D E1                           pop     hl
 246+ 208E 7D                           ld      a, l
 247+ 208F B4                           or      h
 248+ 2090 28 DA                        jr      z, Branch_Ptr
 249+ 2092 18 E7                        jr      End_Loop_Ptr
 250+ 2094              //              inc     bc                  // skip branch-style offseet
 251+ 2094              //              inc     bc
 252+ 2094              //              next
 253+ 2094
 254+ 2094              //  ______________________________________________________________________
 255+ 2094              //
 256+ 2094              // (leave)        --
 257+ 2094              // compiled by LEAVE
 258+ 2094              // this forces to exit from loop and jump past
 259+ 2094                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 259+ 2094             >
 259+ 2094             >Dict_Ptr        defl    $
 259+ 2094             >
 259+ 2094             >//              ______________________________________________________________________
 259+ 2094             >//              Heap part
 259+ 2094             >
 259+ 2094             >
 259+ 2094             >                org     (Heap_Ptr & $1FFF) + $E000
 259+ E0B0             >
 259+ E0B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 259+ E0B0             >Latest_Definition defl  Heap_Ptr
 259+ E0B0             >
 259+ E0B0             >                // dummy db directives used to calculate length of namec
 259+ E0B0 28 4C 45 41 >                db      "(LEAVE)"
 259+ E0B4 56 45 29    >
 259+ E0B7             >len_NFA         defl    $ - temp_NFA
 259+ E0B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 259+ E0B0             >
 259+ E0B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 259+ E0B1 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 259+ E0B5 56 45 29    >
 259+ E0B8             >                org     $-1                 // alter last byte of Name just above to set
 259+ E0B7 A9          >                db      {b $} | END_BIT     // msb as name end
 259+ E0B8             >
 259+ E0B8 A4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 259+ E0BA             >Prev_Ptr        defl    Heap_Ptr
 259+ E0BA             >
 259+ E0BA             >mirror_Ptr      defl    $
 259+ E0BA             >
 259+ E0BA 96 20       >                dw      Dict_Ptr + 2        // xt
 259+ E0BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 259+ E0BC             >
 259+ E0BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 259+ E0BC             >
 259+ E0BC             >//              ______________________________________________________________________
 259+ E0BC             >//              Dictionary part
 259+ E0BC             >
 259+ E0BC             >                org     Dict_Ptr
 259+ 2094             >
 259+ 2094 BA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 259+ 2096             >
 259+ 2096             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 259+ 2096 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 259+ 2096 ~           >
 259+ 2096 ~           >
 259+ 2096             >                endif           ; ok        // for other definitions it "points" the correct handler
 259+ 2096             >                // Use of "; ok" to suppress "warning[fwdref]"
 259+ 2096             >
 259+ 2096             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 260+ 2096                              // ex      de, hl
 261+ 2096                              // *** ldhlrp
 262+ 2096 3E 04                        ld      a, 4
 263+ 2098 ED 32                        add     de, a
 264+ 209A                              // *** ldrphl
 265+ 209A                              // ex      de, hl
 266+ 209A 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 267+ 209C                              next
 267+ 209C DD E9       >                jp      (ix)
 268+ 209E
 269+ 209E              //  ______________________________________________________________________
 270+ 209E              //
 271+ 209E              // (?do)        lim ind --
 272+ 209E              // compiled by ?DO to make a loop checking for lim == ind first
 273+ 209E              // at run-time (?DO) must be followed by a BRANCH offset
 274+ 209E              // used to skip the loop if lim == ind
 275+ 209E                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 275+ 209E             >
 275+ 209E             >Dict_Ptr        defl    $
 275+ 209E             >
 275+ 209E             >//              ______________________________________________________________________
 275+ 209E             >//              Heap part
 275+ 209E             >
 275+ 209E             >
 275+ 209E             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E0BC             >
 275+ E0BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E0BC             >Latest_Definition defl  Heap_Ptr
 275+ E0BC             >
 275+ E0BC             >                // dummy db directives used to calculate length of namec
 275+ E0BC 28 3F 44 4F >                db      "(?DO)"
 275+ E0C0 29          >
 275+ E0C1             >len_NFA         defl    $ - temp_NFA
 275+ E0C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E0BC             >
 275+ E0BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E0BD 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 275+ E0C1 29          >
 275+ E0C2             >                org     $-1                 // alter last byte of Name just above to set
 275+ E0C1 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ E0C2             >
 275+ E0C2 B0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 275+ E0C4             >Prev_Ptr        defl    Heap_Ptr
 275+ E0C4             >
 275+ E0C4             >mirror_Ptr      defl    $
 275+ E0C4             >
 275+ E0C4 A0 20       >                dw      Dict_Ptr + 2        // xt
 275+ E0C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E0C6             >
 275+ E0C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E0C6             >
 275+ E0C6             >//              ______________________________________________________________________
 275+ E0C6             >//              Dictionary part
 275+ E0C6             >
 275+ E0C6             >                org     Dict_Ptr
 275+ 209E             >
 275+ 209E C4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 275+ 20A0             >
 275+ 20A0             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 20A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 20A0 ~           >
 275+ 20A0 ~           >
 275+ 20A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 20A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 20A0             >
 275+ 20A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 20A0 D9                           exx
 277+ 20A1 D1                            pop     de                  // de has the index
 278+ 20A2 E1                            pop     hl                  // hl has the limit
 279+ 20A3 44                            ld      b, h
 280+ 20A4 4D                            ld      c, l
 281+ 20A5 E5                            push    hl                  // put them back to stack for later
 282+ 20A6 D5                            push    de
 283+ 20A7 A7                            and     a                   // reset carry flag
 284+ 20A8 ED 52                         sbc     hl, de              // compute limit - index
 285+ 20AA D9                           exx
 286+ 20AB 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 287+ 20AD E1                               pop     hl
 288+ 20AE E1                               pop     hl
 289+ 20AF 18 BB                            jr      Branch_Ptr          // perform branch consuming following cell
 290+ 20B1              Do_Ptr:
 291+ 20B1                              // *** ldhlrp                 // prepare RP
 292+ 20B1                              // *** ex      de, hl
 293+ 20B1                              // dec     de
 294+ 20B1                              // dec     de
 295+ 20B1                              // dec     de
 296+ 20B1                              // dec     de
 297+ 20B1 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 298+ 20B5 D5                           push    de                  // pass it to h'l'
 299+ 20B6                              // *** ex      de, hl
 300+ 20B6                              // *** ldrphl
 301+ 20B6 D9                           exx
 302+ 20B7 E1                            pop     hl
 303+ 20B8
 304+ 20B8                               // store index as top RP
 305+ 20B8 D1                            pop     de
 306+ 20B9 73                            ld      (hl), e
 307+ 20BA 23                            inc     hl
 308+ 20BB 72                            ld      (hl), d
 309+ 20BC 23                            inc     hl
 310+ 20BD                               // stores lim as second from top RP
 311+ 20BD D1                            pop     de
 312+ 20BE 73                            ld      (hl), e
 313+ 20BF 23                            inc     hl
 314+ 20C0 72                            ld      (hl), d
 315+ 20C1 D9                           exx
 316+ 20C2 18 B7                        jr      End_Loop_Ptr
 317+ 20C4                              // skip branch-style offseet
 318+ 20C4                          //  inc     bc
 319+ 20C4                          //  inc     bc
 320+ 20C4                          //  next
 321+ 20C4
 322+ 20C4              //  ______________________________________________________________________
 323+ 20C4              //
 324+ 20C4              // (do)        lim ind --
 325+ 20C4              // compiled by DO to make a loop checking for lim == ind first
 326+ 20C4              // this is a simpler version of (?DO)
 327+ 20C4                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20C4             >
 327+ 20C4             >Dict_Ptr        defl    $
 327+ 20C4             >
 327+ 20C4             >//              ______________________________________________________________________
 327+ 20C4             >//              Heap part
 327+ 20C4             >
 327+ 20C4             >
 327+ 20C4             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C6             >
 327+ E0C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C6             >Latest_Definition defl  Heap_Ptr
 327+ E0C6             >
 327+ E0C6             >                // dummy db directives used to calculate length of namec
 327+ E0C6 28 44 4F 29 >                db      "(DO)"
 327+ E0CA             >len_NFA         defl    $ - temp_NFA
 327+ E0CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C6             >
 327+ E0C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0C7 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CB             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CA A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CB             >
 327+ E0CB BC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0CD             >Prev_Ptr        defl    Heap_Ptr
 327+ E0CD             >
 327+ E0CD             >mirror_Ptr      defl    $
 327+ E0CD             >
 327+ E0CD C6 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0CF             >
 327+ E0CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0CF             >
 327+ E0CF             >//              ______________________________________________________________________
 327+ E0CF             >//              Dictionary part
 327+ E0CF             >
 327+ E0CF             >                org     Dict_Ptr
 327+ 20C4             >
 327+ 20C4 CD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20C6             >
 327+ 20C6             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20C6 ~           >
 327+ 20C6 ~           >
 327+ 20C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20C6             >
 327+ 20C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20C6 0B                           dec     bc                  // prepare IP beforehand
 329+ 20C7 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 20C8 18 E7                        jr      Do_Ptr
 331+ 20CA
 332+ 20CA              //  ______________________________________________________________________
 333+ 20CA              //
 334+ 20CA              // i            -- n
 335+ 20CA              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20CA              // the current value of the index-loop
 337+ 20CA                              New_Def I, "I", is_code, is_normal
 337+ 20CA             >
 337+ 20CA             >Dict_Ptr        defl    $
 337+ 20CA             >
 337+ 20CA             >//              ______________________________________________________________________
 337+ 20CA             >//              Heap part
 337+ 20CA             >
 337+ 20CA             >
 337+ 20CA             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0CF             >
 337+ E0CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0CF             >Latest_Definition defl  Heap_Ptr
 337+ E0CF             >
 337+ E0CF             >                // dummy db directives used to calculate length of namec
 337+ E0CF 49          >                db      "I"
 337+ E0D0             >len_NFA         defl    $ - temp_NFA
 337+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0CF             >
 337+ E0CF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D0 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D0 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D1             >
 337+ E0D1 C6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D3             >
 337+ E0D3             >mirror_Ptr      defl    $
 337+ E0D3             >
 337+ E0D3 CC 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D5             >
 337+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D5             >
 337+ E0D5             >//              ______________________________________________________________________
 337+ E0D5             >//              Dictionary part
 337+ E0D5             >
 337+ E0D5             >                org     Dict_Ptr
 337+ 20CA             >
 337+ 20CA D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20CC             >
 337+ 20CC             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20CC ~           >
 337+ 20CC ~           >
 337+ 20CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20CC             >
 337+ 20CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20CC              I_Ptr:
 339+ 20CC 62                           ld      h, d
 340+ 20CD 6B                           ld      l, e
 341+ 20CE                              // *** ldhlrp
 342+ 20CE              I_Ptr_prime:
 343+ 20CE 7E                           ld      a, (hl)
 344+ 20CF 23                           inc     hl
 345+ 20D0 66                           ld      h, (hl)
 346+ 20D1 6F                           ld      l, a
 347+ 20D2 E5                           push    hl
 348+ 20D3                              next
 348+ 20D3 DD E9       >                jp      (ix)
 349+ 20D5
 350+ 20D5
 351+ 20D5              //  ______________________________________________________________________
 352+ 20D5              //
 353+ 20D5              // i'            -- n
 354+ 20D5              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20D5              // the limit of the index-loop
 356+ 20D5
 357+ 20D5                              New_Def II, "I'", is_code, is_normal
 357+ 20D5             >
 357+ 20D5             >Dict_Ptr        defl    $
 357+ 20D5             >
 357+ 20D5             >//              ______________________________________________________________________
 357+ 20D5             >//              Heap part
 357+ 20D5             >
 357+ 20D5             >
 357+ 20D5             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D5             >
 357+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D5             >Latest_Definition defl  Heap_Ptr
 357+ E0D5             >
 357+ E0D5             >                // dummy db directives used to calculate length of namec
 357+ E0D5 49 27       >                db      "I'"
 357+ E0D7             >len_NFA         defl    $ - temp_NFA
 357+ E0D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D5             >
 357+ E0D5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D6 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0D8             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0D7 A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0D8             >
 357+ E0D8 CF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DA             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DA             >
 357+ E0DA             >mirror_Ptr      defl    $
 357+ E0DA             >
 357+ E0DA D7 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DC             >
 357+ E0DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DC             >
 357+ E0DC             >//              ______________________________________________________________________
 357+ E0DC             >//              Dictionary part
 357+ E0DC             >
 357+ E0DC             >                org     Dict_Ptr
 357+ 20D5             >
 357+ 20D5 DA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20D7             >
 357+ 20D7             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20D7 ~           >
 357+ 20D7 ~           >
 357+ 20D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20D7             >
 357+ 20D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20D7 62                           ld      h, d
 359+ 20D8 6B                           ld      l, e
 360+ 20D9                              // *** ldhlrp
 361+ 20D9 23                           inc     hl
 362+ 20DA 23                           inc     hl
 363+ 20DB 18 F1                        jr      I_Ptr_prime
 364+ 20DD
 365+ 20DD
 366+ 20DD              //  ______________________________________________________________________
 367+ 20DD              //
 368+ 20DD              // digit        c n -- u tf  |  ff
 369+ 20DD              // convert a character c using base n
 370+ 20DD              // returns a unsigned number and a true flag
 371+ 20DD              // or just a false flag if the conversion fails
 372+ 20DD                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20DD             >
 372+ 20DD             >Dict_Ptr        defl    $
 372+ 20DD             >
 372+ 20DD             >//              ______________________________________________________________________
 372+ 20DD             >//              Heap part
 372+ 20DD             >
 372+ 20DD             >
 372+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DC             >
 372+ E0DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DC             >Latest_Definition defl  Heap_Ptr
 372+ E0DC             >
 372+ E0DC             >                // dummy db directives used to calculate length of namec
 372+ E0DC 44 49 47 49 >                db      "DIGIT"
 372+ E0E0 54          >
 372+ E0E1             >len_NFA         defl    $ - temp_NFA
 372+ E0E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DC             >
 372+ E0DC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0DD 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E1 54          >
 372+ E0E2             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E1 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E2             >
 372+ E0E2 D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E4             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E4             >
 372+ E0E4             >mirror_Ptr      defl    $
 372+ E0E4             >
 372+ E0E4 DF 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E6             >
 372+ E0E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E6             >
 372+ E0E6             >//              ______________________________________________________________________
 372+ E0E6             >//              Dictionary part
 372+ E0E6             >
 372+ E0E6             >                org     Dict_Ptr
 372+ 20DD             >
 372+ 20DD E4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20DF             >
 372+ 20DF             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20DF ~           >
 372+ 20DF ~           >
 372+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20DF             >
 372+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20DF D9                           exx
 374+ 20E0 E1                           pop     hl                  // l has the base
 375+ 20E1 D1                           pop     de                  // e has the digit
 376+ 20E2 7B                           ld      a, e
 377+ 20E3 FE 60                        cp      $60                 // check if lowercase
 378+ 20E5 38 02                        jr      c, Digit_Uppercase
 379+ 20E7 D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20E9              Digit_Uppercase:
 381+ 20E9 D6 30                        sub     $30
 382+ 20EB 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20ED FE 0A                            cp      $0A
 384+ 20EF 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F1 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20F3 FE 0A                                cp      $0A
 387+ 20F5 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20F7
 389+ 20F7              Digit_Decimal:
 390+ 20F7                              // compare digit
 391+ 20F7 BD                           cp      l                   // compare with base
 392+ 20F8 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 20FA 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 20FB                              //  ld      hl, -1
 395+ 20FB ED 62                            sbc     hl, hl
 396+ 20FD D5                               push    de
 397+ 20FE E5                               push    hl
 398+ 20FF D9                               exx
 399+ 2100                                  next
 399+ 2100 DD E9       >                jp      (ix)
 400+ 2102              Digit_Fail:
 401+ 2102 21 00 00                     ld      hl, 0
 402+ 2105 E5                           push    hl
 403+ 2106 D9                           exx
 404+ 2107                              next
 404+ 2107 DD E9       >                jp      (ix)
 405+ 2109
 406+ 2109              //  ______________________________________________________________________
 407+ 2109              //
 408+ 2109              //  parametric uppercase routine
 409+ 2109              //  depending on the following op-code the routine can be by-passed
 410+ 2109              //  changing the behaviour of some callers.
 411+ 2109              //  If it is "ret" then the system is Case-Sensitive
 412+ 2109              //  If it is "Nop" then the system is Case-Insensitive
 413+ 2109              //  Only A register is touched.
 414+ 2109 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 210A              Case_Upper:
 416+ 210A FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 210C D8                           ret     c                   // no change if A < "a"
 418+ 210D FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 210F D0                           ret     nc                  // no change if A > "z"
 420+ 2110 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 2112 C9                           ret
 422+ 2113
 423+ 2113              //  ______________________________________________________________________
 424+ 2113              //
 425+ 2113              //  caseon      --
 426+ 2113              // set system case-sensitivity on
 427+ 2113              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 2113                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 2113             >
 428+ 2113             >Dict_Ptr        defl    $
 428+ 2113             >
 428+ 2113             >//              ______________________________________________________________________
 428+ 2113             >//              Heap part
 428+ 2113             >
 428+ 2113             >
 428+ 2113             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0E6             >
 428+ E0E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0E6             >Latest_Definition defl  Heap_Ptr
 428+ E0E6             >
 428+ E0E6             >                // dummy db directives used to calculate length of namec
 428+ E0E6 43 41 53 45 >                db      "CASEON"
 428+ E0EA 4F 4E       >
 428+ E0EC             >len_NFA         defl    $ - temp_NFA
 428+ E0EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0E6             >
 428+ E0E6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0E7 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EB 4F 4E       >
 428+ E0ED             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0EC CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0ED             >
 428+ E0ED DC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0EF             >Prev_Ptr        defl    Heap_Ptr
 428+ E0EF             >
 428+ E0EF             >mirror_Ptr      defl    $
 428+ E0EF             >
 428+ E0EF 15 21       >                dw      Dict_Ptr + 2        // xt
 428+ E0F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F1             >
 428+ E0F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F1             >
 428+ E0F1             >//              ______________________________________________________________________
 428+ E0F1             >//              Dictionary part
 428+ E0F1             >
 428+ E0F1             >                org     Dict_Ptr
 428+ 2113             >
 428+ 2113 EF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 2115             >
 428+ 2115             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 2115 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 2115 ~           >
 428+ 2115 ~           >
 428+ 2115             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 2115             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 2115             >
 428+ 2115             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 2115 3E C9                        ld      a, $C9              // "ret"
 430+ 2117 32 09 21                     ld      (Case_Sensitive), a
 431+ 211A                              next
 431+ 211A DD E9       >                jp      (ix)
 432+ 211C
 433+ 211C              //  ______________________________________________________________________
 434+ 211C              //
 435+ 211C              //  caseoff     --
 436+ 211C              // set system case-sensitivity on
 437+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 211C                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 211C             >
 438+ 211C             >Dict_Ptr        defl    $
 438+ 211C             >
 438+ 211C             >//              ______________________________________________________________________
 438+ 211C             >//              Heap part
 438+ 211C             >
 438+ 211C             >
 438+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F1             >
 438+ E0F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F1             >Latest_Definition defl  Heap_Ptr
 438+ E0F1             >
 438+ E0F1             >                // dummy db directives used to calculate length of namec
 438+ E0F1 43 41 53 45 >                db      "CASEOFF"
 438+ E0F5 4F 46 46    >
 438+ E0F8             >len_NFA         defl    $ - temp_NFA
 438+ E0F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F1             >
 438+ E0F1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F2 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0F6 4F 46 46    >
 438+ E0F9             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0F8 C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0F9             >
 438+ E0F9 E6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FB             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FB             >
 438+ E0FB             >mirror_Ptr      defl    $
 438+ E0FB             >
 438+ E0FB 1E 21       >                dw      Dict_Ptr + 2        // xt
 438+ E0FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E0FD             >
 438+ E0FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E0FD             >
 438+ E0FD             >//              ______________________________________________________________________
 438+ E0FD             >//              Dictionary part
 438+ E0FD             >
 438+ E0FD             >                org     Dict_Ptr
 438+ 211C             >
 438+ 211C FB 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 211E             >
 438+ 211E             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 211E ~           >
 438+ 211E ~           >
 438+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 211E             >
 438+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 211E 3E 00                        ld      a, $00              // "nop"
 440+ 2120 32 09 21                     ld      (Case_Sensitive), a
 441+ 2123                              next
 441+ 2123 DD E9       >                jp      (ix)
 442+ 2125
 443+ 2125              //  ______________________________________________________________________
 444+ 2125              //
 445+ 2125              //  upper       c1 -- c1 | c2
 446+ 2125              // character on top of stack is forced to Uppercase.
 447+ 2125                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 2125             >
 447+ 2125             >Dict_Ptr        defl    $
 447+ 2125             >
 447+ 2125             >//              ______________________________________________________________________
 447+ 2125             >//              Heap part
 447+ 2125             >
 447+ 2125             >
 447+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E0FD             >
 447+ E0FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E0FD             >Latest_Definition defl  Heap_Ptr
 447+ E0FD             >
 447+ E0FD             >                // dummy db directives used to calculate length of namec
 447+ E0FD 55 50 50 45 >                db      "UPPER"
 447+ E101 52          >
 447+ E102             >len_NFA         defl    $ - temp_NFA
 447+ E102             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E0FD             >
 447+ E0FD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E0FE 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E102 52          >
 447+ E103             >                org     $-1                 // alter last byte of Name just above to set
 447+ E102 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E103             >
 447+ E103 F1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E105             >Prev_Ptr        defl    Heap_Ptr
 447+ E105             >
 447+ E105             >mirror_Ptr      defl    $
 447+ E105             >
 447+ E105 27 21       >                dw      Dict_Ptr + 2        // xt
 447+ E107             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E107             >
 447+ E107             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E107             >
 447+ E107             >//              ______________________________________________________________________
 447+ E107             >//              Dictionary part
 447+ E107             >
 447+ E107             >                org     Dict_Ptr
 447+ 2125             >
 447+ 2125 05 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 2127             >
 447+ 2127             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 2127 ~           >
 447+ 2127 ~           >
 447+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 2127             >
 447+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 2127 E1                           pop     hl
 449+ 2128 7D                           ld      a, l
 450+ 2129 CD 0A 21                     call    Case_Upper
 451+ 212C 6F                           ld      l, a
 452+ 212D
 453+ 212D                              psh1
 453+ 212D E5          >                push    hl
 453+ 212E DD E9       >                jp      (ix)
 454+ 2130
 455+ 2130              //  ______________________________________________________________________
 456+ 2130
 457+ 2130              // This routine must be called with alternate registers active
 458+ 2130              // input: None
 459+ 2130              // Output: A = 8k-page number currently fitted at MMU7
 460+ 2130              MMU7_read:
 461+ 2130 3E 57                        ld      a, 87
 462+ 2132              NEXTREG_read:
 463+ 2132 01 3B 24                     ld      bc, $243B
 464+ 2135 ED 79                        out     (c), a
 465+ 2137 04                           inc     b
 466+ 2138 ED 78                        in      a, (c)
 467+ 213A C9                           ret
 468+ 213B
 469+ 213B              //  ______________________________________________________________________
 470+ 213B
 471+ 213B              // given an HP-pointer in input, turn it into page + offset
 472+ 213B              // Input: HL = hp-pointer
 473+ 213B              // Output: A = page,  HL = offset
 474+ 213B              TO_FAR_rout:
 475+ 213B 7C                           ld      a, h
 476+ 213C 08                           ex      af, af
 477+ 213D 7C                           ld      a, h
 478+ 213E F6 E0                        or      $E0
 479+ 2140 67                           ld      h, a
 480+ 2141 08                           ex      af, af
 481+ 2142 07                           rlca
 482+ 2143 07                           rlca
 483+ 2144 07                           rlca
 484+ 2145 E6 07                        and     $07
 485+ 2147 C6 20                        add     $20
 486+ 2149 C9                           ret
 487+ 214A
 488+ 214A
 489+ 214A              //  ______________________________________________________________________
 490+ 214A              //
 491+ 214A              // (find)       addr voc -- 0 | cfa b 1
 492+ 214A              // vocabulary search,
 493+ 214A              // - voc is starting word's NFA
 494+ 214A              // - addr is the string to be searched for
 495+ 214A              // On success, it returns the CFA of found word, the first NFA byte
 496+ 214A              // (which contains length and some flags) and a true flag.
 497+ 214A              // On fail, a false flag  (no more: leaves addr unchanged)
 498+ 214A                              New_Def C_FIND, "(FIND)", is_code, is_normal
 498+ 214A             >
 498+ 214A             >Dict_Ptr        defl    $
 498+ 214A             >
 498+ 214A             >//              ______________________________________________________________________
 498+ 214A             >//              Heap part
 498+ 214A             >
 498+ 214A             >
 498+ 214A             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E107             >
 498+ E107             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E107             >Latest_Definition defl  Heap_Ptr
 498+ E107             >
 498+ E107             >                // dummy db directives used to calculate length of namec
 498+ E107 28 46 49 4E >                db      "(FIND)"
 498+ E10B 44 29       >
 498+ E10D             >len_NFA         defl    $ - temp_NFA
 498+ E10D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E107             >
 498+ E107 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E108 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 498+ E10C 44 29       >
 498+ E10E             >                org     $-1                 // alter last byte of Name just above to set
 498+ E10D A9          >                db      {b $} | END_BIT     // msb as name end
 498+ E10E             >
 498+ E10E FD 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E110             >Prev_Ptr        defl    Heap_Ptr
 498+ E110             >
 498+ E110             >mirror_Ptr      defl    $
 498+ E110             >
 498+ E110 4C 21       >                dw      Dict_Ptr + 2        // xt
 498+ E112             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E112             >
 498+ E112             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E112             >
 498+ E112             >//              ______________________________________________________________________
 498+ E112             >//              Dictionary part
 498+ E112             >
 498+ E112             >                org     Dict_Ptr
 498+ 214A             >
 498+ 214A 10 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 214C             >
 498+ 214C             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 214C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 498+ 214C ~           >
 498+ 214C ~           >
 498+ 214C             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 214C             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 214C             >
 498+ 214C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 214C D9                           exx
 500+ 214D CD 30 21                     call    MMU7_read
 501+ 2150 D9                           exx
 502+ 2151 6F                           ld      l, a
 503+ 2152 D9                           exx
 504+ 2153
 505+ 2153 D1                           pop     de                      // de has dictionary pointer
 506+ 2154              Find_VocabularyLoop:
 507+ 2154 7A                               ld      a, d
 508+ 2155 D6 60                            sub     $60
 509+ 2157 30 08                            jr      nc, Find_far_endif
 510+ 2159 EB                                   ex      de, hl
 511+ 215A CD 3B 21                             call    TO_FAR_rout
 512+ 215D EB                                   ex      de, hl
 513+ 215E ED 92 57                             nextreg 87, a
 514+ 2161              Find_far_endif:
 515+ 2161 E1                               pop     hl                  // string pointer to search for
 516+ 2162 E5                               push    hl                  // keep it on stack too for the end.
 517+ 2163 1A                               ld      a, (de)             // save NFA length byte
 518+ 2164 08                               ex      af,af'              // for later use (!)
 519+ 2165 1A                               ld      a, (de)             // reload NFA length byte
 520+ 2166 AE                               xor     (hl)                // check if same length
 521+ 2167 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 522+ 2169                                  // word and text haven't the same length, skip to next vocabulary entry
 523+ 2169 20 33                            jr      nz, Find_DifferentLenght
 524+ 216B
 525+ 216B              Find_ThisWord:      // begin loop
 526+ 216B 23                                   inc     hl
 527+ 216C 13                                   inc     de
 528+ 216D 1A                                   ld      a, (de)
 529+ 216E                                      // case insensitive option - begin
 530+ 216E                                      // push    bc
 531+ 216E E6 80                                and     $80                 // split A in msb and the rest
 532+ 2170 47                                   ld      b, a
 533+ 2171 1A                                   ld      a, (de)
 534+ 2172 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 535+ 2174 CD 09 21                             call    Case_Sensitive      // uppercase routine
 536+ 2177 4F                                   ld      c, a
 537+ 2178 7E                                   ld      a, (hl)
 538+ 2179 CD 09 21                             call    Case_Sensitive      // uppercase routine
 539+ 217C A9                                   xor     c
 540+ 217D A8                                   xor     b
 541+ 217E                                      // pop     bc
 542+ 217E                                      // case insensitive option - end
 543+ 217E 87                                   add     a                   // ignore msb during compare
 544+ 217F 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 545+ 2181
 546+ 2181                                  // loop back until last byte msb is found set
 547+ 2181                                  // that bit marks the ending char of this word
 548+ 2181 30 E8                            jr      nc, Find_ThisWord
 549+ 2183
 550+ 2183                                  // match found !
 551+ 2183 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 552+ 2186 19                               add     hl, de
 553+ 2187
 554+ 2187 5E                                       ld      e, (hl)
 555+ 2188 23                                       inc     hl
 556+ 2189 56                                       ld      d, (hl)
 557+ 218A EB                                       ex      de, hl
 558+ 218B              //Non_MMU7:
 559+ 218B E3                               ex      (sp), hl            // CFA on stack and drop addr
 560+ 218C 08                               ex      af, af'             // retrieve NFA byte (!)
 561+ 218D 5F                               ld      e, a
 562+ 218E 16 00                            ld      d, 0
 563+ 2190 21 FF FF                         ld      hl, -1
 564+ 2193 D5                               push    de
 565+ 2194 E5                               push    hl
 566+ 2195 D9                               exx
 567+ 2196 7D                               ld      a, l
 568+ 2197 ED 92 57                         nextreg 87, a
 569+ 219A                                  next
 569+ 219A DD E9       >                jp      (ix)
 570+ 219C
 571+ 219C              Find_DidntMatch: // didn't match (*)
 572+ 219C 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 573+ 219E
 574+ 219E              Find_DifferentLenght:
 575+ 219E                                  // consume chars until the end of the word
 576+ 219E                                  // that is last byte msb is found set
 577+ 219E 13                                   inc     de
 578+ 219F 1A                                   ld      a, (de)
 579+ 21A0 87                                   add     a, a
 580+ 21A1 30 FB                            jr      nc, Find_DifferentLenght
 581+ 21A3
 582+ 21A3              Find_WordEnd:   // word-end  found (**)
 583+ 21A3                                  // take LFA and use it
 584+ 21A3 13                               inc     de
 585+ 21A4 EB                               ex      de, hl
 586+ 21A5 5E                               ld      e, (hl)
 587+ 21A6 23                               inc     hl
 588+ 21A7 56                               ld      d, (hl)
 589+ 21A8 7A                               ld      a, d
 590+ 21A9 B3                               or      e
 591+ 21AA
 592+ 21AA                              // loop until end of vocabulary
 593+ 21AA 20 A8                        jr      nz, Find_VocabularyLoop
 594+ 21AC
 595+ 21AC E1                           pop     hl              // without this, leaves addr unchanged
 596+ 21AD 21 00 00                     ld      hl, 0
 597+ 21B0 E5                           push    hl
 598+ 21B1 D9                           exx
 599+ 21B2 7D                           ld      a, l
 600+ 21B3 ED 92 57                     nextreg 87, a
 601+ 21B6                              next
 601+ 21B6 DD E9       >                jp      (ix)
 602+ 21B8
 603+ 21B8              //  ______________________________________________________________________
 604+ 21B8              //
 605+ 21B8              // enclose      a c -- a  n1 n2 n3
 606+ 21B8              // starting from a, using delimiter c, determines the offsets:
 607+ 21B8              //   n1   the first character non-delimiter
 608+ 21B8              //   n2   the first delimiter after the text
 609+ 21B8              //   n3   the first character non enclosed.
 610+ 21B8              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 611+ 21B8              // an uncoditional delimiter.
 612+ 21B8              // Examples:
 613+ 21B8              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 614+ 21B8              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 615+ 21B8              // iii:	c  c  'nul'          -- 2  3  2
 616+ 21B8                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 616+ 21B8             >
 616+ 21B8             >Dict_Ptr        defl    $
 616+ 21B8             >
 616+ 21B8             >//              ______________________________________________________________________
 616+ 21B8             >//              Heap part
 616+ 21B8             >
 616+ 21B8             >
 616+ 21B8             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E112             >
 616+ E112             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E112             >Latest_Definition defl  Heap_Ptr
 616+ E112             >
 616+ E112             >                // dummy db directives used to calculate length of namec
 616+ E112 45 4E 43 4C >                db      "ENCLOSE"
 616+ E116 4F 53 45    >
 616+ E119             >len_NFA         defl    $ - temp_NFA
 616+ E119             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E112             >
 616+ E112 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E113 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 616+ E117 4F 53 45    >
 616+ E11A             >                org     $-1                 // alter last byte of Name just above to set
 616+ E119 C5          >                db      {b $} | END_BIT     // msb as name end
 616+ E11A             >
 616+ E11A 07 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E11C             >Prev_Ptr        defl    Heap_Ptr
 616+ E11C             >
 616+ E11C             >mirror_Ptr      defl    $
 616+ E11C             >
 616+ E11C BA 21       >                dw      Dict_Ptr + 2        // xt
 616+ E11E             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E11E             >
 616+ E11E             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E11E             >
 616+ E11E             >//              ______________________________________________________________________
 616+ E11E             >//              Dictionary part
 616+ E11E             >
 616+ E11E             >                org     Dict_Ptr
 616+ 21B8             >
 616+ 21B8 1C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 21BA             >
 616+ 21BA             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 21BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 616+ 21BA ~           >
 616+ 21BA ~           >
 616+ 21BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 21BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 21BA             >
 616+ 21BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 21BA D9                           exx
 618+ 21BB D1                           pop     de                  //  e has the character
 619+ 21BC E1                           pop     hl                  // hl has the string address
 620+ 21BD E5                           push    hl
 621+ 21BE 7B                           ld      a, e
 622+ 21BF 11 FF FF                     ld      de, -1              // let's start from -1
 623+ 21C2 2B                           dec     hl
 624+ 21C3              Enclose_NonDelimiter:
 625+ 21C3                              // find first non delimiter
 626+ 21C3 23                               inc     hl
 627+ 21C4 13                               inc     de
 628+ 21C5 BE                               cp      (hl)
 629+ 21C6 28 FB                        jr      z, Enclose_NonDelimiter
 630+ 21C8 D5                           push    de
 631+ 21C9
 632+ 21C9                              // push    bc                  // save Instruction Pointer
 633+ 21C9
 634+ 21C9 4F                           ld      c, a                // save char
 635+ 21CA 7E                           ld      a, (hl)
 636+ 21CB A7                           and     a                   // stop if 0x00
 637+ 21CC 20 05                        jr      nz, Enclose_NextChar
 638+ 21CE                              /// case iii. no more character in string
 639+ 21CE                                  // pop     bc                  // restore Instruction Pointer
 640+ 21CE 13                               inc     de
 641+ 21CF D5                               push    de
 642+ 21D0 1B                               dec     de
 643+ 21D1 18 0F                            jr      Enclose_common_ending
 644+ 21D3                              //  push    de
 645+ 21D3                              //  exx
 646+ 21D3                              //  next
 647+ 21D3              Enclose_NextChar:
 648+ 21D3 79                               ld      a, c
 649+ 21D4 23                               inc     hl
 650+ 21D5 13                               inc     de
 651+ 21D6 BE                               cp      (hl)
 652+ 21D7 20 04                            jr      nz, Enclose_NonSeparator
 653+ 21D9                                      // case i. first non enclosed
 654+ 21D9                                      // pop     bc                  // restore Instruction Pointer
 655+ 21D9 D5                                   push    de
 656+ 21DA 13                                   inc     de
 657+ 21DB 18 05                                jr      Enclose_common_ending
 658+ 21DD                              //      push    de
 659+ 21DD                              //      exx
 660+ 21DD                              //      next
 661+ 21DD              Enclose_NonSeparator:
 662+ 21DD 7E                               ld      a, (hl)
 663+ 21DE A7                               and     a
 664+ 21DF 20 F2                        jr      nz, Enclose_NextChar
 665+ 21E1
 666+ 21E1                              // case ii. separator & terminator
 667+ 21E1                              // pop     bc                  // restore Instruction Pointer
 668+ 21E1 D5                           push    de
 669+ 21E2              Enclose_common_ending:
 670+ 21E2 D5                           push    de
 671+ 21E3 D9                           exx
 672+ 21E4                              next
 672+ 21E4 DD E9       >                jp      (ix)
 673+ 21E6
 674+ 21E6              //  ______________________________________________________________________
 675+ 21E6              //
 676+ 21E6              // (map)        a2 a1 n c1 -- c2
 677+ 21E6              // translate character c1 using mapping string a2 and a2
 678+ 21E6              // if c1 is not present within string a1 then
 679+ 21E6              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 680+ 21E6                              New_Def C_MAP, "(MAP)", is_code, is_normal
 680+ 21E6             >
 680+ 21E6             >Dict_Ptr        defl    $
 680+ 21E6             >
 680+ 21E6             >//              ______________________________________________________________________
 680+ 21E6             >//              Heap part
 680+ 21E6             >
 680+ 21E6             >
 680+ 21E6             >                org     (Heap_Ptr & $1FFF) + $E000
 680+ E11E             >
 680+ E11E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ E11E             >Latest_Definition defl  Heap_Ptr
 680+ E11E             >
 680+ E11E             >                // dummy db directives used to calculate length of namec
 680+ E11E 28 4D 41 50 >                db      "(MAP)"
 680+ E122 29          >
 680+ E123             >len_NFA         defl    $ - temp_NFA
 680+ E123             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ E11E             >
 680+ E11E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ E11F 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 680+ E123 29          >
 680+ E124             >                org     $-1                 // alter last byte of Name just above to set
 680+ E123 A9          >                db      {b $} | END_BIT     // msb as name end
 680+ E124             >
 680+ E124 12 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 680+ E126             >Prev_Ptr        defl    Heap_Ptr
 680+ E126             >
 680+ E126             >mirror_Ptr      defl    $
 680+ E126             >
 680+ E126 E8 21       >                dw      Dict_Ptr + 2        // xt
 680+ E128             >Heap_Ptr        defl    $ - $E000           // save current HP
 680+ E128             >
 680+ E128             >Current_HP      defl  $ - $E000             // used to set HP once!
 680+ E128             >
 680+ E128             >//              ______________________________________________________________________
 680+ E128             >//              Dictionary part
 680+ E128             >
 680+ E128             >                org     Dict_Ptr
 680+ 21E6             >
 680+ 21E6 26 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 680+ 21E8             >
 680+ 21E8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 21E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 680+ 21E8 ~           >
 680+ 21E8 ~           >
 680+ 21E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 21E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 21E8             >
 680+ 21E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 21E8 D9                           exx
 682+ 21E9 E1                           pop     hl
 683+ 21EA 7D                           ld      a, l
 684+ 21EB C1                           pop     bc
 685+ 21EC E1                           pop     hl
 686+ 21ED 50                           ld      d, b
 687+ 21EE 59                           ld      e, c
 688+ 21EF ED B1                        cpir
 689+ 21F1 E1                           pop     hl
 690+ 21F2 20 05                        jr      nz, C_Map_Then
 690+ 21F4
 691+ 21F4 19                               add     hl, de
 692+ 21F5 2B                               dec     hl
 693+ 21F6 ED 42                            sbc     hl, bc
 694+ 21F8 7E                               ld      a, (hl)
 695+ 21F9              C_Map_Then:
 696+ 21F9 6F                           ld      l, a
 697+ 21FA 26 00                        ld      h, 0
 698+ 21FC E5                           push    hl
 699+ 21FD D9                           exx
 700+ 21FE                              next
 700+ 21FE DD E9       >                jp      (ix)
 701+ 2200
 702+ 2200              //  ______________________________________________________________________
 703+ 2200              //
 704+ 2200              // (compare)    a1 a2 n -- b
 705+ 2200              // this word performs a lexicographic compare of n bytes of text at address a1
 706+ 2200              // with n bytes of text at address a2. It returns numeric a value:
 707+ 2200              //  0 : if strings are equal
 708+ 2200              // +1 : if string at a1 greater than string at a2
 709+ 2200              // -1 : if string at a1 less than string at a2
 710+ 2200              // strings can be 256 bytes in length at most.
 711+ 2200                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 711+ 2200             >
 711+ 2200             >Dict_Ptr        defl    $
 711+ 2200             >
 711+ 2200             >//              ______________________________________________________________________
 711+ 2200             >//              Heap part
 711+ 2200             >
 711+ 2200             >
 711+ 2200             >                org     (Heap_Ptr & $1FFF) + $E000
 711+ E128             >
 711+ E128             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ E128             >Latest_Definition defl  Heap_Ptr
 711+ E128             >
 711+ E128             >                // dummy db directives used to calculate length of namec
 711+ E128 28 43 4F 4D >                db      "(COMPARE)"
 711+ E12C 50 41 52 45 >
 711+ E130 29          >
 711+ E131             >len_NFA         defl    $ - temp_NFA
 711+ E131             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ E128             >
 711+ E128 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ E129 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 711+ E12D 50 41 52 45 >
 711+ E131 29          >
 711+ E132             >                org     $-1                 // alter last byte of Name just above to set
 711+ E131 A9          >                db      {b $} | END_BIT     // msb as name end
 711+ E132             >
 711+ E132 1E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 711+ E134             >Prev_Ptr        defl    Heap_Ptr
 711+ E134             >
 711+ E134             >mirror_Ptr      defl    $
 711+ E134             >
 711+ E134 02 22       >                dw      Dict_Ptr + 2        // xt
 711+ E136             >Heap_Ptr        defl    $ - $E000           // save current HP
 711+ E136             >
 711+ E136             >Current_HP      defl  $ - $E000             // used to set HP once!
 711+ E136             >
 711+ E136             >//              ______________________________________________________________________
 711+ E136             >//              Dictionary part
 711+ E136             >
 711+ E136             >                org     Dict_Ptr
 711+ 2200             >
 711+ 2200 34 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 711+ 2202             >
 711+ 2202             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 2202 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 711+ 2202 ~           >
 711+ 2202 ~           >
 711+ 2202             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 2202             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 2202             >
 711+ 2202             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 2202 D9                           exx
 713+ 2203 E1                           pop     hl                  // Number of bytes
 714+ 2204 7D                           ld      a, l
 715+ 2205 E1                           pop     hl                  // hl points string a2
 716+ 2206 D1                           pop     de                  // hl points string a1
 717+ 2207              //              push    bc                  // Instruction pointer on stack
 718+ 2207 47                           ld      b, a
 719+ 2208              C_Compare_Loop:
 720+ 2208 7E                               ld      a, (hl)
 721+ 2209 CD 09 21                         call    Case_Sensitive
 722+ 220C 4F                               ld      c, a
 723+ 220D 1A                               ld      a, (de)
 724+ 220E CD 09 21                         call    Case_Sensitive
 725+ 2211 B9                               cp      c
 726+ 2212 13                               inc     de
 727+ 2213 23                               inc     hl
 728+ 2214 28 0A                            jr      z, C_Compare_Equal
 729+ 2216 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 730+ 2218 21 01 00                                 ld      hl, 1               // a1 gt a2
 731+ 221B 18 08                                jr      C_Compare_common_ending
 732+ 221D                                  //  jr      C_Compare_Then      // Else
 733+ 221D              C_Compare_NotLessThan:
 734+ 221D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 735+ 2220              // C_Compare_Then:                                 // Endif
 736+ 2220              //                      pop     bc              // restore Instruction Pointer
 737+ 2220              //                      jr      C_Compare_common_ending
 738+ 2220                                  //  push    hl
 739+ 2220                                  //  exx
 740+ 2220                                  //  next
 741+ 2220
 742+ 2220              C_Compare_Equal:
 743+ 2220 10 E6                        djnz    C_Compare_Loop
 744+ 2222 21 00 00                     ld      hl, 0               // a1 eq a2
 745+ 2225              //              pop     bc                  // restore Instruction Pointer
 746+ 2225              C_Compare_common_ending:
 747+ 2225 E5                           push    hl
 748+ 2226 D9                           exx
 749+ 2227
 750+ 2227                              next
 750+ 2227 DD E9       >                jp      (ix)
 751+ 2229
 752+ 2229              //  ______________________________________________________________________
 753+ 2229              //
 754+ 2229              // emitc        c --
 755+ 2229              // low level emit, calls ROM routine at #10 to send a character to
 756+ 2229              // the the current channel (see SELECT to change stream-channel)
 757+ 2229                              New_Def CEMITC, "(EMITC)", is_code, is_normal
 757+ 2229             >
 757+ 2229             >Dict_Ptr        defl    $
 757+ 2229             >
 757+ 2229             >//              ______________________________________________________________________
 757+ 2229             >//              Heap part
 757+ 2229             >
 757+ 2229             >
 757+ 2229             >                org     (Heap_Ptr & $1FFF) + $E000
 757+ E136             >
 757+ E136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 757+ E136             >Latest_Definition defl  Heap_Ptr
 757+ E136             >
 757+ E136             >                // dummy db directives used to calculate length of namec
 757+ E136 28 45 4D 49 >                db      "(EMITC)"
 757+ E13A 54 43 29    >
 757+ E13D             >len_NFA         defl    $ - temp_NFA
 757+ E13D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 757+ E136             >
 757+ E136 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 757+ E137 28 45 4D 49 >                db      "(EMITC)"               // name string in 7-bit ascii, but
 757+ E13B 54 43 29    >
 757+ E13E             >                org     $-1                 // alter last byte of Name just above to set
 757+ E13D A9          >                db      {b $} | END_BIT     // msb as name end
 757+ E13E             >
 757+ E13E 28 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 757+ E140             >Prev_Ptr        defl    Heap_Ptr
 757+ E140             >
 757+ E140             >mirror_Ptr      defl    $
 757+ E140             >
 757+ E140 2B 22       >                dw      Dict_Ptr + 2        // xt
 757+ E142             >Heap_Ptr        defl    $ - $E000           // save current HP
 757+ E142             >
 757+ E142             >Current_HP      defl  $ - $E000             // used to set HP once!
 757+ E142             >
 757+ E142             >//              ______________________________________________________________________
 757+ E142             >//              Dictionary part
 757+ E142             >
 757+ E142             >                org     Dict_Ptr
 757+ 2229             >
 757+ 2229 40 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 757+ 222B             >
 757+ 222B             >CEMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 757+ 222B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 757+ 222B ~           >
 757+ 222B ~           >
 757+ 222B             >                endif           ; ok        // for other definitions it "points" the correct handler
 757+ 222B             >                // Use of "; ok" to suppress "warning[fwdref]"
 757+ 222B             >
 757+ 222B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 758+ 222B E1                           pop     hl
 759+ 222C 7D                           ld      a, l
 760+ 222D              Emitc_Ptr:
 761+ 222D C5                           push    bc
 762+ 222E D5                           push    de
 763+ 222F DD E5                        push    ix
 764+ 2231              CLS_No_Layer_0:
 765+ 2231 F3                           di
 766+ 2232 D7                           rst     $10
 767+ 2233 FB                           ei
 768+ 2234              CLS_Layer_0:
 769+ 2234 DD E1                        pop     ix
 770+ 2236 D1                           pop     de
 771+ 2237 C1                           pop     bc
 772+ 2238 3E FF                        ld      a, 255            // max possible
 773+ 223A 32 8C 5C                     ld      (SCR_CT), a
 774+ 223D                              next
 774+ 223D DD E9       >                jp      (ix)
 775+ 223F
 776+ 223F              //  ______________________________________________________________________
 777+ 223F              //
 778+ 223F              // (cls)          --
 779+ 223F
 780+ 223F              //              Colon_Def CLS, "CLS", is_normal
 781+ 223F              //              dw      LIT, $0E, EMITC
 782+ 223F              //              dw      EXIT
 783+ 223F
 784+ 223F                              New_Def CCLS, "(CLS)", is_code, is_normal
 784+ 223F             >
 784+ 223F             >Dict_Ptr        defl    $
 784+ 223F             >
 784+ 223F             >//              ______________________________________________________________________
 784+ 223F             >//              Heap part
 784+ 223F             >
 784+ 223F             >
 784+ 223F             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E142             >
 784+ E142             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E142             >Latest_Definition defl  Heap_Ptr
 784+ E142             >
 784+ E142             >                // dummy db directives used to calculate length of namec
 784+ E142 28 43 4C 53 >                db      "(CLS)"
 784+ E146 29          >
 784+ E147             >len_NFA         defl    $ - temp_NFA
 784+ E147             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E142             >
 784+ E142 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E143 28 43 4C 53 >                db      "(CLS)"               // name string in 7-bit ascii, but
 784+ E147 29          >
 784+ E148             >                org     $-1                 // alter last byte of Name just above to set
 784+ E147 A9          >                db      {b $} | END_BIT     // msb as name end
 784+ E148             >
 784+ E148 36 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E14A             >Prev_Ptr        defl    Heap_Ptr
 784+ E14A             >
 784+ E14A             >mirror_Ptr      defl    $
 784+ E14A             >
 784+ E14A 41 22       >                dw      Dict_Ptr + 2        // xt
 784+ E14C             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E14C             >
 784+ E14C             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E14C             >
 784+ E14C             >//              ______________________________________________________________________
 784+ E14C             >//              Dictionary part
 784+ E14C             >
 784+ E14C             >                org     Dict_Ptr
 784+ 223F             >
 784+ 223F 4A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 2241             >
 784+ 2241             >CCLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 2241 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 784+ 2241 ~           >
 784+ 2241 ~           >
 784+ 2241             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 2241             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 2241             >
 784+ 2241             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 2241 C5                           push    bc
 786+ 2242 D5                           push    de
 787+ 2243 DD E5                        push    ix
 788+ 2245 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 789+ 2248 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 790+ 224A AF                           xor     a           // query current status
 791+ 224B CF                           rst     8
 792+ 224C 94                           db      $94         // carry flag set on success
 793+ 224D A7                           and     a
 794+ 224E 3E 0E                        ld      a, $0E
 795+ 2250 20 DF                        jr      nz, CLS_No_Layer_0
 796+ 2252 CD AF 0D                       call    $0DAF
 797+ 2255 18 DD                        jr      CLS_Layer_0
 798+ 2257
 799+ 2257              //              jr      Emit_Rst
 800+ 2257              //              rst     $10
 801+ 2257              //CLS_Layer_0:
 802+ 2257              //              pop     ix
 803+ 2257              //              pop     de
 804+ 2257              //              pop     bc
 805+ 2257              //              next
 806+ 2257
 807+ 2257
 808+ 2257              //  ______________________________________________________________________
 809+ 2257              //
 810+ 2257              // cr           --
 811+ 2257              // send a CR via EMITC
 812+ 2257              //              New_Def CR, "CR", is_code, is_normal
 813+ 2257              //
 814+ 2257              //              ld      a, CR_CHAR
 815+ 2257              //              jr      Emitc_Ptr
 816+ 2257
 817+ 2257              Emitc_Vec:
 818+ 2257 94 22                        dw      C_Emit_Printable  // comma
 819+ 2259 9B 22                        dw      C_Emit_Bel        // bel
 820+ 225B 94 22                        dw      C_Emit_Printable  // bs
 821+ 225D B5 22                        dw      C_Emit_Tab        // tab
 822+ 225F 94 22                        dw      C_Emit_Printable  // cr
 823+ 2261 B9 22                        dw      C_Emit_NL         // lf (unix newline)
 824+ 2263 94 22                        dw      C_Emit_Printable  // blank
 825+ 2265 94 22                        dw      C_Emit_Printable  // blank
 826+ 2267
 827+ 2267              Emit_Selector_Start:
 828+ 2267 06                           db      $06                 // comma
 829+ 2268 07                           db      $07                 // bel
 830+ 2269 08                           db      $08                 // bs
 831+ 226A 09                           db      $09                 // tab
 832+ 226B 0D                           db      $0D                 // cr
 833+ 226C 0A                           db      $0A                 // lf (unix newline)
 834+ 226D 20                           db      $20
 835+ 226E              Emit_Selector_End:
 836+ 226E 20                           db      $20
 837+ 226F
 838+ 226F              //  ______________________________________________________________________
 839+ 226F              //
 840+ 226F              // (?emit)      c1 -- c2 | c1
 841+ 226F              // decode a character to be sent via EMIT
 842+ 226F              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 843+ 226F              // the routine should resolve anything and convert the character anyway.
 844+ 226F                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 844+ 226F             >
 844+ 226F             >Dict_Ptr        defl    $
 844+ 226F             >
 844+ 226F             >//              ______________________________________________________________________
 844+ 226F             >//              Heap part
 844+ 226F             >
 844+ 226F             >
 844+ 226F             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ E14C             >
 844+ E14C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ E14C             >Latest_Definition defl  Heap_Ptr
 844+ E14C             >
 844+ E14C             >                // dummy db directives used to calculate length of namec
 844+ E14C 28 3F 45 4D >                db      "(?EMIT)"
 844+ E150 49 54 29    >
 844+ E153             >len_NFA         defl    $ - temp_NFA
 844+ E153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ E14C             >
 844+ E14C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ E14D 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 844+ E151 49 54 29    >
 844+ E154             >                org     $-1                 // alter last byte of Name just above to set
 844+ E153 A9          >                db      {b $} | END_BIT     // msb as name end
 844+ E154             >
 844+ E154 42 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ E156             >Prev_Ptr        defl    Heap_Ptr
 844+ E156             >
 844+ E156             >mirror_Ptr      defl    $
 844+ E156             >
 844+ E156 71 22       >                dw      Dict_Ptr + 2        // xt
 844+ E158             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ E158             >
 844+ E158             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ E158             >
 844+ E158             >//              ______________________________________________________________________
 844+ E158             >//              Dictionary part
 844+ E158             >
 844+ E158             >                org     Dict_Ptr
 844+ 226F             >
 844+ 226F 56 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 2271             >
 844+ 2271             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 2271 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 844+ 2271 ~           >
 844+ 2271 ~           >
 844+ 2271             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 2271             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 2271             >
 844+ 2271             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 2271 D9                           exx
 846+ 2272 D1                           pop     de
 847+ 2273 7B                           ld      a, e                //  de has c1
 848+ 2274
 849+ 2274 FE 90                        cp      $90  // allow standard udg
 850+ 2276 38 02                        jr      c,  C_Emit_n_udg
 851+ 2278
 852+ 2278 E6 7F                          and     $7F                 // 7-bit ascii only
 853+ 227A              C_Emit_n_udg:
 854+ 227A
 855+ 227A                              // push    bc                  // save Instruction Pointer
 856+ 227A 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 857+ 227D 21 6E 22                     ld      hl, Emit_Selector_End
 858+ 2280 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 859+ 2282 20 0A                        jr      nz, C_Emit_Not_Found
 860+ 2284                                  // Found then decode it
 861+ 2284 21 57 22                         ld      hl, Emitc_Vec
 862+ 2287 09                               add     hl, bc
 863+ 2288 09                               add     hl, bc
 864+ 2289 5E                               ld      e, (hl)
 865+ 228A 23                               inc     hl
 866+ 228B 56                               ld      d, (hl)
 867+ 228C EB                               ex      de, hl
 868+ 228D                                  // pop     bc                  // restore Instruction Pointer
 869+ 228D E9                               jp      (hl)                // one of the following labels
 870+ 228E              C_Emit_Not_Found:
 871+ 228E                              // pop     bc                  // restore Instruction Pointer
 872+ 228E FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 873+ 2290 30 02                        jr      nc, C_Emit_Printable
 874+ 2292 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 875+ 2294              C_Emit_Printable:
 876+ 2294 6F                           ld      l, a
 877+ 2295 26 00                        ld      h, 0
 878+ 2297 E5                           push    hl
 879+ 2298 D9                           exx
 880+ 2299                              next
 880+ 2299 DD E9       >                jp      (ix)
 881+ 229B
 882+ 229B              C_Emit_Bel:
 883+ 229B D9                            exx
 884+ 229C C5                           push    bc                  // save Instruction Pointer
 885+ 229D D5                           push    de
 886+ 229E 11 00 01                     ld      de, $0100
 887+ 22A1 21 00 02                     ld      hl, $0200
 888+ 22A4 DD E5                        push    ix                  // save Next Pointer
 889+ 22A6                              // call    $03B6               // bleep Standard-ROM routine
 890+ 22A6 F3                           di
 891+ 22A7 DF                           rst     $18
 892+ 22A8 B6 03                        defw    $03B6
 893+ 22AA FB                           ei
 894+ 22AB DD E1                        pop     ix                  // restore Next Pointer
 895+ 22AD D1                           pop     de
 896+ 22AE C1                           pop     bc                  // restore Instruction Pointer
 897+ 22AF 21 00 00                     ld      hl, NUL_CHAR
 898+ 22B2 E5                           push    hl
 899+ 22B3                              next
 899+ 22B3 DD E9       >                jp      (ix)
 900+ 22B5
 901+ 22B5 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 902+ 22B7 18 DB                        jr      C_Emit_Printable
 903+ 22B9                          //  push    hl
 904+ 22B9                          //  exx
 905+ 22B9                          //  next
 906+ 22B9
 907+ 22B9 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 908+ 22BB 18 D7                        jr      C_Emit_Printable
 909+ 22BD                          //  push    hl
 910+ 22BD                          //  exx
 911+ 22BD                          //  next
 912+ 22BD
 913+ 22BD              //  ______________________________________________________________________
 914+ 22BD
 915+ 22BD              Key_Table:
 916+ 22BD E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 917+ 22BE C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 918+ 22BF CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 919+ 22C0 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 920+ 22C1 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 921+ 22C2 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 922+ 22C3 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 923+ 22C4 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 924+ 22C5 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 925+ 22C6 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 926+ 22C7 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 927+ 22C8              Key_MapTo:
 928+ 22C8 18                           db      $18                 // 10: ^X
 929+ 22C9 03                           db      $03                 //  9: ^C
 930+ 22CA 1A                           db      $1A                 //  8: ^Z
 931+ 22CB 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 932+ 22CC 5D                           db      $5D                 //  6: SYMBOL+U : ]
 933+ 22CD 5B                           db      $5B                 //  5: SYMBOL+Y : [
 934+ 22CE 7D                           db      $7D                 //  4: SYMBOL+G : }
 935+ 22CF 7B                           db      $7B                 //  3: SYMBOL+F : {
 936+ 22D0 5C                           db      $5C                 //  2: SYMBOl+D : //
 937+ 22D1 7C                           db      $7C                 //  1: SYMBOL+S : |
 938+ 22D2 7E                           db      $7E                 //  0: SYMBOL+A : ~
 939+ 22D3
 940+ 22D3              //  ______________________________________________________________________
 941+ 22D3
 942+ 22D3                              New_Def ONE_FRAME, "1FRAME", is_code, is_normal
 942+ 22D3             >
 942+ 22D3             >Dict_Ptr        defl    $
 942+ 22D3             >
 942+ 22D3             >//              ______________________________________________________________________
 942+ 22D3             >//              Heap part
 942+ 22D3             >
 942+ 22D3             >
 942+ 22D3             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ E158             >
 942+ E158             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ E158             >Latest_Definition defl  Heap_Ptr
 942+ E158             >
 942+ E158             >                // dummy db directives used to calculate length of namec
 942+ E158 31 46 52 41 >                db      "1FRAME"
 942+ E15C 4D 45       >
 942+ E15E             >len_NFA         defl    $ - temp_NFA
 942+ E15E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ E158             >
 942+ E158 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ E159 31 46 52 41 >                db      "1FRAME"               // name string in 7-bit ascii, but
 942+ E15D 4D 45       >
 942+ E15F             >                org     $-1                 // alter last byte of Name just above to set
 942+ E15E C5          >                db      {b $} | END_BIT     // msb as name end
 942+ E15F             >
 942+ E15F 4C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ E161             >Prev_Ptr        defl    Heap_Ptr
 942+ E161             >
 942+ E161             >mirror_Ptr      defl    $
 942+ E161             >
 942+ E161 D5 22       >                dw      Dict_Ptr + 2        // xt
 942+ E163             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ E163             >
 942+ E163             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ E163             >
 942+ E163             >//              ______________________________________________________________________
 942+ E163             >//              Dictionary part
 942+ E163             >
 942+ E163             >                org     Dict_Ptr
 942+ 22D3             >
 942+ 22D3 61 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 22D5             >
 942+ 22D5             >ONE_FRAME:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 22D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 942+ 22D5 ~           >
 942+ 22D5 ~           >
 942+ 22D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 22D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 22D5             >
 942+ 22D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 22D5 FB                           ei
 944+ 22D6 76                           halt
 945+ 22D7                              next
 945+ 22D7 DD E9       >                jp      (ix)
 946+ 22D9
 947+ 22D9              //  ______________________________________________________________________
 948+ 22D9              //
 949+ 22D9              // curs         --
 950+ 22D9              // wait for a keypress
 951+ 22D9              // This definition need Standard ROM Interrupt to be served
 952+ 22D9              //
 953+ 22D9              //                New_Def CUR, "CURS", is_code, is_normal
 954+ 22D9              //
 955+ 22D9              //                push    bc                  // save Instruction Pointer
 956+ 22D9              //                push    de                  // save Return Stack Pointer
 957+ 22D9              //                push    ix
 958+ 22D9              //                ld      (SP_Saved), sp      // be sure to not to be paged out.
 959+ 22D9              //            //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 960+ 22D9              //                ld      sp, TSTACK           // Carefully balanced from startup
 961+ 22D9              //                res     5, (iy + 1)         // FLAGS (5C3A+1)
 962+ 22D9              //
 963+ 22D9              //Cur_Wait:
 964+ 22D9              //                    halt
 965+ 22D9              //                    ld      a, 2                // selec channel #2 (Upper Video)
 966+ 22D9              //                //  call    $1601               // SELECT Standard-ROM Routine
 967+ 22D9              //                    rst     $18
 968+ 22D9              //                    dw      $1601
 969+ 22D9              //
 970+ 22D9              //                    // software-flash: flips face every 320 ms
 971+ 22D9              //                    ld      a, $20              // Timing based
 972+ 22D9              //                    and     (iy + $3E)          // FRAMES (5C3A+3E)
 973+ 22D9              //
 974+ 22D9              //                    ld      a, (Block_Face)     // see origin.asm
 975+ 22D9              //                    jr      nz, Cur_Cursor
 976+ 22D9              //                        ld      a, (Half_Face)      // see origin.asm
 977+ 22D9              //                        bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 978+ 22D9              //                        jr      z, Cur_Cursor
 979+ 22D9              //                            ld      a, (Underscore_Face) // see origin
 980+ 22D9              //Cur_Cursor:
 981+ 22D9              //                    rst     $10
 982+ 22D9              //                    ld      a, BACKSPACE_CHAR    // backspace
 983+ 22D9              //                    rst     $10
 984+ 22D9              //                    bit     5, (iy + 1)         // FLAGS (5C3A+1)
 985+ 22D9              //                jr      z, Cur_Wait
 986+ 22D9              //
 987+ 22D9              //                halt    // this is to sync flashing cursor.
 988+ 22D9              //
 989+ 22D9              //                ld      a, BLANK_CHAR       // space to blank cursor
 990+ 22D9              //                rst     $10
 991+ 22D9              //                ld      a, BACKSPACE_CHAR   // backspace
 992+ 22D9              //                rst     $10
 993+ 22D9              //
 994+ 22D9              //                ld      sp, (SP_Saved)
 995+ 22D9              //
 996+ 22D9              //                pop     ix
 997+ 22D9              //                pop     de                  // Restore Return Stack Pointer
 998+ 22D9              //                pop     bc                  // Restore Instruction Pointer
 999+ 22D9              //                next
1000+ 22D9
1001+ 22D9
1002+ 22D9              //  ______________________________________________________________________
1003+ 22D9              //
1004+ 22D9              // key          -- c
1005+ 22D9              // This definition need Standard ROM Interrupt to be served
1006+ 22D9
1007+ 22D9                              New_Def KEY, "KEY", is_code, is_normal
1007+ 22D9             >
1007+ 22D9             >Dict_Ptr        defl    $
1007+ 22D9             >
1007+ 22D9             >//              ______________________________________________________________________
1007+ 22D9             >//              Heap part
1007+ 22D9             >
1007+ 22D9             >
1007+ 22D9             >                org     (Heap_Ptr & $1FFF) + $E000
1007+ E163             >
1007+ E163             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ E163             >Latest_Definition defl  Heap_Ptr
1007+ E163             >
1007+ E163             >                // dummy db directives used to calculate length of namec
1007+ E163 4B 45 59    >                db      "KEY"
1007+ E166             >len_NFA         defl    $ - temp_NFA
1007+ E166             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ E163             >
1007+ E163 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ E164 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
1007+ E167             >                org     $-1                 // alter last byte of Name just above to set
1007+ E166 D9          >                db      {b $} | END_BIT     // msb as name end
1007+ E167             >
1007+ E167 58 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1007+ E169             >Prev_Ptr        defl    Heap_Ptr
1007+ E169             >
1007+ E169             >mirror_Ptr      defl    $
1007+ E169             >
1007+ E169 DB 22       >                dw      Dict_Ptr + 2        // xt
1007+ E16B             >Heap_Ptr        defl    $ - $E000           // save current HP
1007+ E16B             >
1007+ E16B             >Current_HP      defl  $ - $E000             // used to set HP once!
1007+ E16B             >
1007+ E16B             >//              ______________________________________________________________________
1007+ E16B             >//              Dictionary part
1007+ E16B             >
1007+ E16B             >                org     Dict_Ptr
1007+ 22D9             >
1007+ 22D9 69 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1007+ 22DB             >
1007+ 22DB             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 22DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1007+ 22DB ~           >
1007+ 22DB ~           >
1007+ 22DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 22DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 22DB             >
1007+ 22DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 22DB
1009+ 22DB C5                           push    bc                  // Save Instruction Pointer
1010+ 22DC
1011+ 22DC              Key_Wait:
1012+ 22DC FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
1013+ 22E0 28 FA                        jr      z, Key_Wait
1014+ 22E2
1015+ 22E2 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
1016+ 22E5
1017+ 22E5                              // decode character from above table
1018+ 22E5 21 BD 22                     ld      hl, Key_Table
1019+ 22E8 01 0B 00                     ld      bc, $000B
1020+ 22EB ED B1                        cpir
1021+ 22ED 20 05                        jr      nz, Key_DontMap
1022+ 22EF 21 C8 22                         ld      hl, Key_MapTo
1023+ 22F2 09                               add     hl, bc
1024+ 22F3 7E                               ld      a, (hl)
1025+ 22F4 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
1026+ 22F6 20 09                        jr      nz, Key_NoCapsLock
1027+ 22F8 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
1028+ 22FB 7E                               ld      a, (hl)
1029+ 22FC EE 08                            xor     $08
1030+ 22FE 77                               ld      (hl), a
1031+ 22FF 3E 00                            ld      a, NUL_CHAR
1032+ 2301 6F           Key_NoCapsLock: ld      l, a
1033+ 2302 26 00                        ld      h, 0                // Prepare TOS
1034+ 2304
1035+ 2304 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
1036+ 2308
1037+ 2308 C1                           pop     bc                  // Restore Instruction Pointer
1038+ 2309
1039+ 2309                              psh1
1039+ 2309 E5          >                push    hl
1039+ 230A DD E9       >                jp      (ix)
1040+ 230C
1041+ 230C
1042+ 230C              //  ______________________________________________________________________
1043+ 230C              //
1044+ 230C              // click        --
1045+ 230C              // This definition need Standard ROM Interrupt to be served
1046+ 230C              //
1047+ 230C              //              New_Def CLICK, "CLICK", is_code, is_normal
1048+ 230C              //
1049+ 230C              //                push    bc
1050+ 230C              //              ld      a, ($5C48)          // BORDCR system variable
1051+ 230C              //              rra
1052+ 230C              //              rra
1053+ 230C              //              rra
1054+ 230C              //              or      $18                 // quick'n'dirty click
1055+ 230C              //              out     ($fe), a
1056+ 230C              //              ld      b, 0
1057+ 230C              //              djnz    $                   // wait loop
1058+ 230C              //              xor     $18
1059+ 230C              //              out     ($fe), a
1060+ 230C              //                pop     bc
1061+ 230C
1062+ 230C              //              next
1063+ 230C
1064+ 230C              //  ______________________________________________________________________
1065+ 230C              //
1066+ 230C              // key?         -- f
1067+ 230C              // key available
1068+ 230C              //
1069+ 230C              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1070+ 230C              //
1071+ 230C              //              ld      hl, 0000
1072+ 230C              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1073+ 230C              //              jr      z, Key_Q
1074+ 230C              //                  dec     hl
1075+ 230C              // Key_Q:
1076+ 230C              //                psh1
1077+ 230C              //              next
1078+ 230C
1079+ 230C              //  ______________________________________________________________________
1080+ 230C              //
1081+ 230C              // ?terminal    -- FALSE | TRUE
1082+ 230C              // test for BREAK keypress
1083+ 230C                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1083+ 230C             >
1083+ 230C             >Dict_Ptr        defl    $
1083+ 230C             >
1083+ 230C             >//              ______________________________________________________________________
1083+ 230C             >//              Heap part
1083+ 230C             >
1083+ 230C             >
1083+ 230C             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E16B             >
1083+ E16B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E16B             >Latest_Definition defl  Heap_Ptr
1083+ E16B             >
1083+ E16B             >                // dummy db directives used to calculate length of namec
1083+ E16B 3F 54 45 52 >                db      "?TERMINAL"
1083+ E16F 4D 49 4E 41 >
1083+ E173 4C          >
1083+ E174             >len_NFA         defl    $ - temp_NFA
1083+ E174             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E16B             >
1083+ E16B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E16C 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1083+ E170 4D 49 4E 41 >
1083+ E174 4C          >
1083+ E175             >                org     $-1                 // alter last byte of Name just above to set
1083+ E174 CC          >                db      {b $} | END_BIT     // msb as name end
1083+ E175             >
1083+ E175 63 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E177             >Prev_Ptr        defl    Heap_Ptr
1083+ E177             >
1083+ E177             >mirror_Ptr      defl    $
1083+ E177             >
1083+ E177 0E 23       >                dw      Dict_Ptr + 2        // xt
1083+ E179             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E179             >
1083+ E179             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E179             >
1083+ E179             >//              ______________________________________________________________________
1083+ E179             >//              Dictionary part
1083+ E179             >
1083+ E179             >                org     Dict_Ptr
1083+ 230C             >
1083+ 230C 77 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 230E             >
1083+ 230E             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 230E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1083+ 230E ~           >
1083+ 230E ~           >
1083+ 230E             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 230E             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 230E             >
1083+ 230E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 230E D9                           exx
1085+ 230F 01 FE 7F                     ld      bc, $7ffe
1086+ 2312 ED 50                        in      d, (c)
1087+ 2314 41                           ld      b, c
1088+ 2315 ED 78                        in      a, (c)
1089+ 2317 B2                           or       d
1090+ 2318 1F                           rra
1091+ 2319 3F                           ccf
1092+ 231A ED 62                        sbc     hl, hl
1093+ 231C E5                           push    hl
1094+ 231D D9                           exx
1095+ 231E                              next
1095+ 231E DD E9       >                jp      (ix)
1096+ 2320
1097+ 2320
1098+ 2320              //  ______________________________________________________________________
1099+ 2320              //
1100+ 2320              // inkey        -- c | 0
1101+ 2320              // call ROM inkey$ routine, returns c or "zero".
1102+ 2320              //
1103+ 2320              //              New_Def INKEY, "INKEY", is_code, is_normal
1104+ 2320              //              push    bc
1105+ 2320              //              push    de
1106+ 2320              //              ld      (SP_Saved), sp
1107+ 2320              //              ld      sp, Cold_origin - 5
1108+ 2320              //              ld      sp, TSTACK           // Carefully balanced from startup
1109+ 2320              //              push    ix
1110+ 2320              //              di
1111+ 2320              //              call    $15E6                   // instead of 15E9
1112+ 2320              //              ei
1113+ 2320              //              pop     ix
1114+ 2320              //              ld      sp, (SP_Saved)
1115+ 2320              //              ld      l, a
1116+ 2320              //              ld      h, 0
1117+ 2320              //              pop     de
1118+ 2320              //              pop     bc
1119+ 2320              //              psh1
1120+ 2320
1121+ 2320              //  ______________________________________________________________________
1122+ 2320              //
1123+ 2320              // select      n --
1124+ 2320              // selects the given channel number
1125+ 2320
1126+ 2320                              New_Def SELECT, "SELECT", is_code, is_normal
1126+ 2320             >
1126+ 2320             >Dict_Ptr        defl    $
1126+ 2320             >
1126+ 2320             >//              ______________________________________________________________________
1126+ 2320             >//              Heap part
1126+ 2320             >
1126+ 2320             >
1126+ 2320             >                org     (Heap_Ptr & $1FFF) + $E000
1126+ E179             >
1126+ E179             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1126+ E179             >Latest_Definition defl  Heap_Ptr
1126+ E179             >
1126+ E179             >                // dummy db directives used to calculate length of namec
1126+ E179 53 45 4C 45 >                db      "SELECT"
1126+ E17D 43 54       >
1126+ E17F             >len_NFA         defl    $ - temp_NFA
1126+ E17F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1126+ E179             >
1126+ E179 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1126+ E17A 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1126+ E17E 43 54       >
1126+ E180             >                org     $-1                 // alter last byte of Name just above to set
1126+ E17F D4          >                db      {b $} | END_BIT     // msb as name end
1126+ E180             >
1126+ E180 6B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1126+ E182             >Prev_Ptr        defl    Heap_Ptr
1126+ E182             >
1126+ E182             >mirror_Ptr      defl    $
1126+ E182             >
1126+ E182 22 23       >                dw      Dict_Ptr + 2        // xt
1126+ E184             >Heap_Ptr        defl    $ - $E000           // save current HP
1126+ E184             >
1126+ E184             >Current_HP      defl  $ - $E000             // used to set HP once!
1126+ E184             >
1126+ E184             >//              ______________________________________________________________________
1126+ E184             >//              Dictionary part
1126+ E184             >
1126+ E184             >                org     Dict_Ptr
1126+ 2320             >
1126+ 2320 82 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1126+ 2322             >
1126+ 2322             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1126+ 2322 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1126+ 2322 ~           >
1126+ 2322 ~           >
1126+ 2322             >                endif           ; ok        // for other definitions it "points" the correct handler
1126+ 2322             >                // Use of "; ok" to suppress "warning[fwdref]"
1126+ 2322             >
1126+ 2322             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1127+ 2322 E1                           pop     hl
1128+ 2323 C5                           push    bc
1129+ 2324 D5                           push    de
1130+ 2325 7D                           ld      a, l
1131+ 2326 ED 73 2C 20                  ld      (SP_Saved), sp
1132+ 232A                          //  ld      sp, Cold_origin - 5
1133+ 232A 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1134+ 232D DD E5                        push    ix
1135+ 232F                          //  call    $1601
1136+ 232F F3                           di
1137+ 2330 DF                           rst     $18
1138+ 2331 01 16                        dw      $1601
1139+ 2333 FB                           ei
1140+ 2334 DD E1                        pop     ix
1141+ 2336 ED 7B 2C 20                  ld      sp, (SP_Saved)
1142+ 233A D1                           pop     de
1143+ 233B C1                           pop     bc
1144+ 233C                              next
1144+ 233C DD E9       >                jp      (ix)
1145+ 233E
1146+ 233E              //  ______________________________________________________________________
1147+ 233E              //
1148+ 233E              // ZX Spectrum Next - Low Level disk primitives.
1149+ 233E              // this include is "here" for backward compatibility
1150+ 233E
1151+ 233E                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt0.asm
   1++233E              //  ______________________________________________________________________
   2++233E              //
   3++233E              //  next-opt.asm
   4++233E              //
   5++233E              //  ZX Spectrum Next - peculiar definitions
   6++233E              //  ______________________________________________________________________
   7++233E
   8++233E              //  ______________________________________________________________________
   9++233E              //
  10++233E              // f_seek       d u -- f
  11++233E              // Seek to position d in file-handle u.
  12++233E              // Return a false-flag 0 on success, True flag on error
  13++233E                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++233E             >
  13++233E             >Dict_Ptr        defl    $
  13++233E             >
  13++233E             >//              ______________________________________________________________________
  13++233E             >//              Heap part
  13++233E             >
  13++233E             >
  13++233E             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E184             >
  13++E184             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E184             >Latest_Definition defl  Heap_Ptr
  13++E184             >
  13++E184             >                // dummy db directives used to calculate length of namec
  13++E184 46 5F 53 45 >                db      "F_SEEK"
  13++E188 45 4B       >
  13++E18A             >len_NFA         defl    $ - temp_NFA
  13++E18A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E184             >
  13++E184 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E185 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E189 45 4B       >
  13++E18B             >                org     $-1                 // alter last byte of Name just above to set
  13++E18A CB          >                db      {b $} | END_BIT     // msb as name end
  13++E18B             >
  13++E18B 79 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18D             >Prev_Ptr        defl    Heap_Ptr
  13++E18D             >
  13++E18D             >mirror_Ptr      defl    $
  13++E18D             >
  13++E18D 40 23       >                dw      Dict_Ptr + 2        // xt
  13++E18F             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18F             >
  13++E18F             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18F             >
  13++E18F             >//              ______________________________________________________________________
  13++E18F             >//              Dictionary part
  13++E18F             >
  13++E18F             >                org     Dict_Ptr
  13++233E             >
  13++233E 8D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++2340             >
  13++2340             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++2340 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++2340 ~           >
  13++2340 ~           >
  13++2340             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++2340             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++2340             >
  13++2340             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++2340 D9                            exx
  15++2341 E1                            pop     hl                  // file-handle
  16++2342 7D                            ld      a, l
  17++2343 C1                            pop     bc                  // bc has high-word of d
  18++2344 D1                            pop     de
  19++2345 D9                           exx
  20++2346 DD E5                        push    ix
  21++2348 D5                           push    de
  22++2349 C5                           push    bc                  // save Instruction Pointer
  23++234A D9                            exx
  24++234B 21 00 00                      ld      hl, 0 // ix, 0
  25++234E F3                            di
  26++234F CF                            rst     $08
  27++2350 9F                            db      $9F
  28++2351              F_Seek_Exit:
  29++2351 FB                           ei
  30++2352 C1                           pop     bc                  // restore Instruction Pointer
  31++2353 D1                           pop     de
  32++2354 DD E1                        pop     ix
  33++2356 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++2358                              psh1
  34++2358 E5          >                push    hl
  34++2359 DD E9       >                jp      (ix)
  35++235B
  36++235B              //  ______________________________________________________________________
  37++235B              //
  38++235B              // f_close      u -- f
  39++235B              // Close file-handle u.
  40++235B              // Return 0 on success, True flag on error
  41++235B
  42++235B                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++235B             >
  42++235B             >Dict_Ptr        defl    $
  42++235B             >
  42++235B             >//              ______________________________________________________________________
  42++235B             >//              Heap part
  42++235B             >
  42++235B             >
  42++235B             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18F             >
  42++E18F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18F             >Latest_Definition defl  Heap_Ptr
  42++E18F             >
  42++E18F             >                // dummy db directives used to calculate length of namec
  42++E18F 46 5F 43 4C >                db      "F_CLOSE"
  42++E193 4F 53 45    >
  42++E196             >len_NFA         defl    $ - temp_NFA
  42++E196             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18F             >
  42++E18F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E190 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E194 4F 53 45    >
  42++E197             >                org     $-1                 // alter last byte of Name just above to set
  42++E196 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E197             >
  42++E197 84 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E199             >Prev_Ptr        defl    Heap_Ptr
  42++E199             >
  42++E199             >mirror_Ptr      defl    $
  42++E199             >
  42++E199 5D 23       >                dw      Dict_Ptr + 2        // xt
  42++E19B             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E19B             >
  42++E19B             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E19B             >
  42++E19B             >//              ______________________________________________________________________
  42++E19B             >//              Dictionary part
  42++E19B             >
  42++E19B             >                org     Dict_Ptr
  42++235B             >
  42++235B 99 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++235D             >
  42++235D             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++235D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++235D ~           >
  42++235D ~           >
  42++235D             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++235D             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++235D             >
  42++235D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++235D
  44++235D E1                           pop     hl
  45++235E 7D                           ld      a, l                // file-handle
  46++235F DD E5                        push    ix
  47++2361 D5                           push    de
  48++2362 C5                           push    bc                  // Save Instruction pointer
  49++2363 F3                           di
  50++2364 CF                           rst     $08
  51++2365 9B                           db      $9B
  52++2366 18 E9                        jr      F_Seek_Exit
  53++2368              //              ei
  54++2368              //              pop     de
  55++2368              //              pop     bc
  56++2368              //              pop     ix
  57++2368              //              sbc     hl, hl
  58++2368              //              psh1
  59++2368
  60++2368              //  ______________________________________________________________________
  61++2368              //
  62++2368              // f_sync      u -- f
  63++2368              // Close file-handle u.
  64++2368              // Return 0 on success, True flag on error
  65++2368
  66++2368                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++2368             >
  66++2368             >Dict_Ptr        defl    $
  66++2368             >
  66++2368             >//              ______________________________________________________________________
  66++2368             >//              Heap part
  66++2368             >
  66++2368             >
  66++2368             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E19B             >
  66++E19B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E19B             >Latest_Definition defl  Heap_Ptr
  66++E19B             >
  66++E19B             >                // dummy db directives used to calculate length of namec
  66++E19B 46 5F 53 59 >                db      "F_SYNC"
  66++E19F 4E 43       >
  66++E1A1             >len_NFA         defl    $ - temp_NFA
  66++E1A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E19B             >
  66++E19B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E19C 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E1A0 4E 43       >
  66++E1A2             >                org     $-1                 // alter last byte of Name just above to set
  66++E1A1 C3          >                db      {b $} | END_BIT     // msb as name end
  66++E1A2             >
  66++E1A2 8F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A4             >Prev_Ptr        defl    Heap_Ptr
  66++E1A4             >
  66++E1A4             >mirror_Ptr      defl    $
  66++E1A4             >
  66++E1A4 6A 23       >                dw      Dict_Ptr + 2        // xt
  66++E1A6             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A6             >
  66++E1A6             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A6             >
  66++E1A6             >//              ______________________________________________________________________
  66++E1A6             >//              Dictionary part
  66++E1A6             >
  66++E1A6             >                org     Dict_Ptr
  66++2368             >
  66++2368 A4 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++236A             >
  66++236A             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++236A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++236A ~           >
  66++236A ~           >
  66++236A             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++236A             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++236A             >
  66++236A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++236A E1                           pop     hl
  68++236B 7D                           ld      a, l                // file-handle
  69++236C DD E5                        push    ix
  70++236E D5                           push    de
  71++236F C5                           push    bc
  72++2370 F3                           di
  73++2371 CF                           rst     $08
  74++2372 9C                           db      $9C
  75++2373 18 DC                        jr      F_Seek_Exit
  76++2375              //              ei
  77++2375              //              pop     de
  78++2375              //              pop     bc
  79++2375              //              pop     ix
  80++2375              //              sbc     hl, hl
  81++2375              //              psh1
  82++2375
  83++2375              //  ______________________________________________________________________
  84++2375              //
  85++2375              // f_fgetpos    u -- d f
  86++2375              // Seek to position d in file-handle u.
  87++2375              // Return a false-flag 0 on success, True flag on error
  88++2375                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++2375             >
  88++2375             >Dict_Ptr        defl    $
  88++2375             >
  88++2375             >//              ______________________________________________________________________
  88++2375             >//              Heap part
  88++2375             >
  88++2375             >
  88++2375             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A6             >
  88++E1A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A6             >Latest_Definition defl  Heap_Ptr
  88++E1A6             >
  88++E1A6             >                // dummy db directives used to calculate length of namec
  88++E1A6 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1AA 45 54 50 4F >
  88++E1AE 53          >
  88++E1AF             >len_NFA         defl    $ - temp_NFA
  88++E1AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A6             >
  88++E1A6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A7 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1AB 45 54 50 4F >
  88++E1AF 53          >
  88++E1B0             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AF D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1B0             >
  88++E1B0 9B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1B2             >Prev_Ptr        defl    Heap_Ptr
  88++E1B2             >
  88++E1B2             >mirror_Ptr      defl    $
  88++E1B2             >
  88++E1B2 77 23       >                dw      Dict_Ptr + 2        // xt
  88++E1B4             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B4             >
  88++E1B4             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B4             >
  88++E1B4             >//              ______________________________________________________________________
  88++E1B4             >//              Dictionary part
  88++E1B4             >
  88++E1B4             >                org     Dict_Ptr
  88++2375             >
  88++2375 B2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++2377             >
  88++2377             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++2377 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++2377 ~           >
  88++2377 ~           >
  88++2377             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++2377             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++2377             >
  88++2377             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++2377 E1                            pop     hl
  90++2378 7D                            ld      a, l                // file-handle
  91++2379 DD E5                         push    ix
  92++237B D5                            push    de
  93++237C C5                            push    bc
  94++237D F3                            di
  95++237E CF                            rst     $08
  96++237F A0                            db      $A0
  97++2380 FB                            ei
  98++2381 D9                           exx
  99++2382 C1                           pop     bc                  // IP
 100++2383 D1                           pop     de                  // Return Stack Pointer
 101++2384 DD E1                        pop     ix
 102++2386 D9                            exx
 103++2387 D5                            push    de
 104++2388 C5                            push    bc
 105++2389 ED 62                         sbc     hl, hl
 106++238B E5                            push    hl
 107++238C D9                           exx
 108++238D                              next
 108++238D DD E9       >                jp      (ix)
 109++238F
 110++238F              //  ______________________________________________________________________
 111++238F              //
 112++238F              // f_read       a b u -- n f
 113++238F              // Read b bytes from file-handle u to address a
 114++238F              // Return the actual number n of bytes read
 115++238F              // Return 0 on success, True flag on error
 116++238F                              New_Def F_READ, "F_READ", is_code, is_normal
 116++238F             >
 116++238F             >Dict_Ptr        defl    $
 116++238F             >
 116++238F             >//              ______________________________________________________________________
 116++238F             >//              Heap part
 116++238F             >
 116++238F             >
 116++238F             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B4             >
 116++E1B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B4             >Latest_Definition defl  Heap_Ptr
 116++E1B4             >
 116++E1B4             >                // dummy db directives used to calculate length of namec
 116++E1B4 46 5F 52 45 >                db      "F_READ"
 116++E1B8 41 44       >
 116++E1BA             >len_NFA         defl    $ - temp_NFA
 116++E1BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B4             >
 116++E1B4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B5 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B9 41 44       >
 116++E1BB             >                org     $-1                 // alter last byte of Name just above to set
 116++E1BA C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1BB             >
 116++E1BB A6 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BD             >Prev_Ptr        defl    Heap_Ptr
 116++E1BD             >
 116++E1BD             >mirror_Ptr      defl    $
 116++E1BD             >
 116++E1BD 91 23       >                dw      Dict_Ptr + 2        // xt
 116++E1BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BF             >
 116++E1BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BF             >
 116++E1BF             >//              ______________________________________________________________________
 116++E1BF             >//              Dictionary part
 116++E1BF             >
 116++E1BF             >                org     Dict_Ptr
 116++238F             >
 116++238F BD 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++2391             >
 116++2391             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++2391 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++2391 ~           >
 116++2391 ~           >
 116++2391             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++2391             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++2391             >
 116++2391             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++2391 D9                            exx
 118++2392 E1                            pop     hl
 119++2393 7D                            ld      a, l                // file-handle
 120++2394 C1                            pop     bc                  // bc has bytes to read
 121++2395 DD E3                         ex      (sp), ix            // ix has address
 122++2397 DD E5                         push    ix
 123++2399 E1                            pop     hl
 124++239A D9                           exx
 125++239B D5                           push    de                  // Save Return Stack pointer
 126++239C C5                           push    bc                  // Save Instruction pointer
 127++239D D9                            exx
 128++239E F3                            di
 129++239F CF                            rst     $08
 130++23A0 9D                            db      $9D
 131++23A1              F_Read_Exit:
 132++23A1 FB                           ei
 133++23A2 D9                           exx
 134++23A3 C1                           pop     bc                  // Restore Instruction pointer
 135++23A4 D1                           pop     de                  // Restore Return Stack pointer
 136++23A5 DD E1                        pop     ix                  // Restore ix
 137++23A7 D9                            exx
 138++23A8 D5                            push    de                  // bytes involved in i/o operation
 139++23A9 ED 62                         sbc     hl, hl
 140++23AB E5                            push    hl
 141++23AC D9                           exx
 142++23AD                              next
 142++23AD DD E9       >                jp      (ix)
 143++23AF
 144++23AF              //  ______________________________________________________________________
 145++23AF              //
 146++23AF              // f_write      a b u -- n f
 147++23AF              // Write bytes currently stored at address a to file-handle u.
 148++23AF              // Return the actual n bytes written and 0 on success, True flag on error.
 149++23AF                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 149++23AF             >
 149++23AF             >Dict_Ptr        defl    $
 149++23AF             >
 149++23AF             >//              ______________________________________________________________________
 149++23AF             >//              Heap part
 149++23AF             >
 149++23AF             >
 149++23AF             >                org     (Heap_Ptr & $1FFF) + $E000
 149++E1BF             >
 149++E1BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149++E1BF             >Latest_Definition defl  Heap_Ptr
 149++E1BF             >
 149++E1BF             >                // dummy db directives used to calculate length of namec
 149++E1BF 46 5F 57 52 >                db      "F_WRITE"
 149++E1C3 49 54 45    >
 149++E1C6             >len_NFA         defl    $ - temp_NFA
 149++E1C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149++E1BF             >
 149++E1BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149++E1C0 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 149++E1C4 49 54 45    >
 149++E1C7             >                org     $-1                 // alter last byte of Name just above to set
 149++E1C6 C5          >                db      {b $} | END_BIT     // msb as name end
 149++E1C7             >
 149++E1C7 B4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 149++E1C9             >Prev_Ptr        defl    Heap_Ptr
 149++E1C9             >
 149++E1C9             >mirror_Ptr      defl    $
 149++E1C9             >
 149++E1C9 B1 23       >                dw      Dict_Ptr + 2        // xt
 149++E1CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 149++E1CB             >
 149++E1CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 149++E1CB             >
 149++E1CB             >//              ______________________________________________________________________
 149++E1CB             >//              Dictionary part
 149++E1CB             >
 149++E1CB             >                org     Dict_Ptr
 149++23AF             >
 149++23AF C9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 149++23B1             >
 149++23B1             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 149++23B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 149++23B1 ~           >
 149++23B1 ~           >
 149++23B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 149++23B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 149++23B1             >
 149++23B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150++23B1 D9                            exx
 151++23B2 E1                            pop     hl
 152++23B3 7D                            ld      a, l                // file-handle
 153++23B4 C1                            pop     bc                  // bc has bytes to read
 154++23B5 DD E3                         ex      (sp), ix            // ix has address
 155++23B7 DD E5                         push    ix
 156++23B9 E1                            pop     hl
 157++23BA D9                           exx
 158++23BB D5                           push    de                  // Save Return Stack pointer
 159++23BC C5                           push    bc                  // Save Instruction pointer
 160++23BD D9                            exx
 161++23BE F3                            di
 162++23BF CF                            rst     $08
 163++23C0 9E                            db      $9E
 164++23C1 18 DE                         jr F_Read_Exit
 165++23C3              //                ei
 166++23C3              //                exx
 167++23C3              //                pop     de                  // Restore Return Stack pointer
 168++23C3              //                pop     bc                  // Restore Instruction pointer
 169++23C3              //                pop     ix                  // Restore ix
 170++23C3              //                 exx
 171++23C3              //                 push    de                  // bytes involved in i/o operation
 172++23C3              //                 sbc     hl, hl
 173++23C3              //                 push    hl
 174++23C3              //                exx
 175++23C3              //                next
 176++23C3
 177++23C3              //  ______________________________________________________________________
 178++23C3              //
 179++23C3              // f_open       a1 a2 b -- u f
 180++23C3              // open a file
 181++23C3              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 182++23C3              // a2 is address to an 8-byte header data used in some cases.
 183++23C3              // b is access mode-byte, that is a combination of:
 184++23C3              // any/all of:
 185++23C3              //   esx_mode_read          $01 request read access
 186++23C3              //   esx_mode_write         $02 request write access
 187++23C3              //   esx_mode_use_header    $40 read/write +3DOS header
 188++23C3              // plus one of:
 189++23C3              //   esx_mode_open_exist    $00 only open existing file
 190++23C3              //   esx_mode_open_creat    $08 open existing or create file
 191++23C3              //   esx_mode_creat_noexist $04 create new file, error if exists
 192++23C3              //   esx_mode_creat_trunc   $0c create new file, delete existing
 193++23C3              // Return file-handle u and 0 on success, True flag on error
 194++23C3                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 194++23C3             >
 194++23C3             >Dict_Ptr        defl    $
 194++23C3             >
 194++23C3             >//              ______________________________________________________________________
 194++23C3             >//              Heap part
 194++23C3             >
 194++23C3             >
 194++23C3             >                org     (Heap_Ptr & $1FFF) + $E000
 194++E1CB             >
 194++E1CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194++E1CB             >Latest_Definition defl  Heap_Ptr
 194++E1CB             >
 194++E1CB             >                // dummy db directives used to calculate length of namec
 194++E1CB 46 5F 4F 50 >                db      "F_OPEN"
 194++E1CF 45 4E       >
 194++E1D1             >len_NFA         defl    $ - temp_NFA
 194++E1D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194++E1CB             >
 194++E1CB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194++E1CC 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 194++E1D0 45 4E       >
 194++E1D2             >                org     $-1                 // alter last byte of Name just above to set
 194++E1D1 CE          >                db      {b $} | END_BIT     // msb as name end
 194++E1D2             >
 194++E1D2 BF 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194++E1D4             >Prev_Ptr        defl    Heap_Ptr
 194++E1D4             >
 194++E1D4             >mirror_Ptr      defl    $
 194++E1D4             >
 194++E1D4 C5 23       >                dw      Dict_Ptr + 2        // xt
 194++E1D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 194++E1D6             >
 194++E1D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 194++E1D6             >
 194++E1D6             >//              ______________________________________________________________________
 194++E1D6             >//              Dictionary part
 194++E1D6             >
 194++E1D6             >                org     Dict_Ptr
 194++23C3             >
 194++23C3 D4 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 194++23C5             >
 194++23C5             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 194++23C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 194++23C5 ~           >
 194++23C5 ~           >
 194++23C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 194++23C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 194++23C5             >
 194++23C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195++23C5 D9                            exx
 196++23C6 C1                            pop     bc                  // file-mode
 197++23C7 41                            ld      b, c                // file-mode
 198++23C8 D1                            pop     de                  // 8-bytes buffer if any
 199++23C9 DD E3                         ex      (sp), ix            // filespec nul-terminated
 200++23CB DD E5                         push    ix
 201++23CD E1                            pop     hl
 202++23CE D9                           exx
 203++23CF D5                           push    de                  // Save Return Stack pointer
 204++23D0 C5                           push    bc                  // Save Instruction pointer
 205++23D1 D9                            exx
 206++23D2 3E 2A                         ld      a, "*"
 207++23D4 F3                            di
 208++23D5 CF                            rst     $08
 209++23D6 9A                            db      $9A
 210++23D7              F_Open_Exit:
 211++23D7              //               ei                         // removed because is repeated in f_read_exit
 212++23D7 5F                            ld      e, a                // return the handle-number
 213++23D8 16 00                         ld      d, 0
 214++23DA 18 C5                        jr F_Read_Exit
 215++23DC
 216++23DC              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 217++23DC              //   \ FILENAME 1+ PAD 1 F_OPEN
 218++23DC              //   \ DROP
 219++23DC              //   \ F_CLOSE
 220++23DC
 221++23DC
 222++23DC              //  ______________________________________________________________________
 223++23DC              //
 224++23DC              // f_opendir    a1 -- u f
 225++23DC              // open a file
 226++23DC                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 226++23DC             >
 226++23DC             >Dict_Ptr        defl    $
 226++23DC             >
 226++23DC             >//              ______________________________________________________________________
 226++23DC             >//              Heap part
 226++23DC             >
 226++23DC             >
 226++23DC             >                org     (Heap_Ptr & $1FFF) + $E000
 226++E1D6             >
 226++E1D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226++E1D6             >Latest_Definition defl  Heap_Ptr
 226++E1D6             >
 226++E1D6             >                // dummy db directives used to calculate length of namec
 226++E1D6 46 5F 4F 50 >                db      "F_OPENDIR"
 226++E1DA 45 4E 44 49 >
 226++E1DE 52          >
 226++E1DF             >len_NFA         defl    $ - temp_NFA
 226++E1DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226++E1D6             >
 226++E1D6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226++E1D7 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 226++E1DB 45 4E 44 49 >
 226++E1DF 52          >
 226++E1E0             >                org     $-1                 // alter last byte of Name just above to set
 226++E1DF D2          >                db      {b $} | END_BIT     // msb as name end
 226++E1E0             >
 226++E1E0 CB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 226++E1E2             >Prev_Ptr        defl    Heap_Ptr
 226++E1E2             >
 226++E1E2             >mirror_Ptr      defl    $
 226++E1E2             >
 226++E1E2 DE 23       >                dw      Dict_Ptr + 2        // xt
 226++E1E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 226++E1E4             >
 226++E1E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 226++E1E4             >
 226++E1E4             >//              ______________________________________________________________________
 226++E1E4             >//              Dictionary part
 226++E1E4             >
 226++E1E4             >                org     Dict_Ptr
 226++23DC             >
 226++23DC E2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 226++23DE             >
 226++23DE             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226++23DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226++23DE ~           >
 226++23DE ~           >
 226++23DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 226++23DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 226++23DE             >
 226++23DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227++23DE DD E3                        ex      (sp), ix            // filespec nul-terminated
 228++23E0 DD E5                        push    ix
 229++23E2 E1                           pop     hl
 230++23E3 D5                           push    de                  // Save Return Stack pointer
 231++23E4 C5                           push    bc                  // Save Instruction pointer
 232++23E5 06 10                        ld      b, $10              // file-mode
 233++23E7 3E 43                        ld      a, "C"
 234++23E9 CF                           rst     $08
 235++23EA A3                           db      $A3
 236++23EB 18 EA                        jr      F_Open_Exit
 237++23ED
 238++23ED
 239++23ED              //  ______________________________________________________________________
 240++23ED              //
 241++23ED              // f_readdir    a1 a2 b -- u f
 242++23ED              // open a file
 243++23ED                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 243++23ED             >
 243++23ED             >Dict_Ptr        defl    $
 243++23ED             >
 243++23ED             >//              ______________________________________________________________________
 243++23ED             >//              Heap part
 243++23ED             >
 243++23ED             >
 243++23ED             >                org     (Heap_Ptr & $1FFF) + $E000
 243++E1E4             >
 243++E1E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243++E1E4             >Latest_Definition defl  Heap_Ptr
 243++E1E4             >
 243++E1E4             >                // dummy db directives used to calculate length of namec
 243++E1E4 46 5F 52 45 >                db      "F_READDIR"
 243++E1E8 41 44 44 49 >
 243++E1EC 52          >
 243++E1ED             >len_NFA         defl    $ - temp_NFA
 243++E1ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243++E1E4             >
 243++E1E4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243++E1E5 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 243++E1E9 41 44 44 49 >
 243++E1ED 52          >
 243++E1EE             >                org     $-1                 // alter last byte of Name just above to set
 243++E1ED D2          >                db      {b $} | END_BIT     // msb as name end
 243++E1EE             >
 243++E1EE D6 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243++E1F0             >Prev_Ptr        defl    Heap_Ptr
 243++E1F0             >
 243++E1F0             >mirror_Ptr      defl    $
 243++E1F0             >
 243++E1F0 EF 23       >                dw      Dict_Ptr + 2        // xt
 243++E1F2             >Heap_Ptr        defl    $ - $E000           // save current HP
 243++E1F2             >
 243++E1F2             >Current_HP      defl  $ - $E000             // used to set HP once!
 243++E1F2             >
 243++E1F2             >//              ______________________________________________________________________
 243++E1F2             >//              Dictionary part
 243++E1F2             >
 243++E1F2             >                org     Dict_Ptr
 243++23ED             >
 243++23ED F0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 243++23EF             >
 243++23EF             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243++23EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243++23EF ~           >
 243++23EF ~           >
 243++23EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 243++23EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 243++23EF             >
 243++23EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244++23EF D9                            exx
 245++23F0 E1                            pop     hl
 246++23F1 7D                            ld      a, l
 247++23F2 D1                            pop     de
 248++23F3 DD E3                         ex      (sp), ix            // filespec nul-terminated
 249++23F5 DD E5                         push    ix
 250++23F7 E1                            pop     hl
 251++23F8 D9                           exx
 252++23F9 D5                           push    de                  // Save Return Stack pointer
 253++23FA C5                           push    bc                  // Save Instruction pointer
 254++23FB D9                            exx
 255++23FC CF                            rst     $08
 256++23FD A4                            db      $A4
 257++23FE 18 D7                         jr      F_Open_Exit
 258++2400
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt0.asm
1152+ 2400
1153+ 2400
1154+ 2400              //  ______________________________________________________________________
1155+ 2400              //
1156+ 2400              // cmove    a1 a2 u --
1157+ 2400              // If u > 0, moves memory content starting at address a1 for n bytes long
1158+ 2400              // storing then starting at address addr2.
1159+ 2400              // The content of a1 is moved first. See CMOVE> also.
1160+ 2400                              New_Def CMOVE, "CMOVE", is_code, is_normal
1160+ 2400             >
1160+ 2400             >Dict_Ptr        defl    $
1160+ 2400             >
1160+ 2400             >//              ______________________________________________________________________
1160+ 2400             >//              Heap part
1160+ 2400             >
1160+ 2400             >
1160+ 2400             >                org     (Heap_Ptr & $1FFF) + $E000
1160+ E1F2             >
1160+ E1F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1160+ E1F2             >Latest_Definition defl  Heap_Ptr
1160+ E1F2             >
1160+ E1F2             >                // dummy db directives used to calculate length of namec
1160+ E1F2 43 4D 4F 56 >                db      "CMOVE"
1160+ E1F6 45          >
1160+ E1F7             >len_NFA         defl    $ - temp_NFA
1160+ E1F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1160+ E1F2             >
1160+ E1F2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1160+ E1F3 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1160+ E1F7 45          >
1160+ E1F8             >                org     $-1                 // alter last byte of Name just above to set
1160+ E1F7 C5          >                db      {b $} | END_BIT     // msb as name end
1160+ E1F8             >
1160+ E1F8 E4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1160+ E1FA             >Prev_Ptr        defl    Heap_Ptr
1160+ E1FA             >
1160+ E1FA             >mirror_Ptr      defl    $
1160+ E1FA             >
1160+ E1FA 02 24       >                dw      Dict_Ptr + 2        // xt
1160+ E1FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1160+ E1FC             >
1160+ E1FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1160+ E1FC             >
1160+ E1FC             >//              ______________________________________________________________________
1160+ E1FC             >//              Dictionary part
1160+ E1FC             >
1160+ E1FC             >                org     Dict_Ptr
1160+ 2400             >
1160+ 2400 FA 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1160+ 2402             >
1160+ 2402             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1160+ 2402 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1160+ 2402 ~           >
1160+ 2402 ~           >
1160+ 2402             >                endif           ; ok        // for other definitions it "points" the correct handler
1160+ 2402             >                // Use of "; ok" to suppress "warning[fwdref]"
1160+ 2402             >
1160+ 2402             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1161+ 2402 D9                           exx
1162+ 2403
1163+ 2403 C1                           pop     bc                  // bc has counter
1164+ 2404 D1                           pop     de                  // de now has dest
1165+ 2405 E1                           pop     hl                 // hl has source, save Instruction Pointer
1166+ 2406 78                           ld      a, b
1167+ 2407 B1                           or      c
1168+ 2408 28 02                        jr      z, Cmove_NoMove
1169+ 240A ED B0                            ldir
1170+ 240C              Cmove_NoMove:
1171+ 240C D9                           exx
1172+ 240D
1173+ 240D                              next
1173+ 240D DD E9       >                jp      (ix)
1174+ 240F
1175+ 240F              //  ______________________________________________________________________
1176+ 240F              //
1177+ 240F              // cmove>    a1 a2 u --
1178+ 240F              // If u > 0, moves memory content starting at address a1 for n bytes long
1179+ 240F              // storing then starting at address addr2.
1180+ 240F              // The content of a1 is moved last. See cmove.
1181+ 240F                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1181+ 240F             >
1181+ 240F             >Dict_Ptr        defl    $
1181+ 240F             >
1181+ 240F             >//              ______________________________________________________________________
1181+ 240F             >//              Heap part
1181+ 240F             >
1181+ 240F             >
1181+ 240F             >                org     (Heap_Ptr & $1FFF) + $E000
1181+ E1FC             >
1181+ E1FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ E1FC             >Latest_Definition defl  Heap_Ptr
1181+ E1FC             >
1181+ E1FC             >                // dummy db directives used to calculate length of namec
1181+ E1FC 43 4D 4F 56 >                db      "CMOVE>"
1181+ E200 45 3E       >
1181+ E202             >len_NFA         defl    $ - temp_NFA
1181+ E202             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ E1FC             >
1181+ E1FC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ E1FD 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1181+ E201 45 3E       >
1181+ E203             >                org     $-1                 // alter last byte of Name just above to set
1181+ E202 BE          >                db      {b $} | END_BIT     // msb as name end
1181+ E203             >
1181+ E203 F2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1181+ E205             >Prev_Ptr        defl    Heap_Ptr
1181+ E205             >
1181+ E205             >mirror_Ptr      defl    $
1181+ E205             >
1181+ E205 11 24       >                dw      Dict_Ptr + 2        // xt
1181+ E207             >Heap_Ptr        defl    $ - $E000           // save current HP
1181+ E207             >
1181+ E207             >Current_HP      defl  $ - $E000             // used to set HP once!
1181+ E207             >
1181+ E207             >//              ______________________________________________________________________
1181+ E207             >//              Dictionary part
1181+ E207             >
1181+ E207             >                org     Dict_Ptr
1181+ 240F             >
1181+ 240F 05 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1181+ 2411             >
1181+ 2411             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 2411 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1181+ 2411 ~           >
1181+ 2411 ~           >
1181+ 2411             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 2411             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 2411             >
1181+ 2411             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 2411 D9                           exx
1183+ 2412
1184+ 2412 C1                           pop     bc                  // bc has counter
1185+ 2413 D1                           pop     de                  // de has dest
1186+ 2414 E1                           pop     hl                  // hl has source, save Instruction Pointer
1187+ 2415 78                           ld      a, b
1188+ 2416 B1                           or      c
1189+ 2417 28 F3                        jr      z, Cmove_NoMove  // CmoveV_NoMove
1190+ 2419 EB                               ex      de, hl              // compute address to
1191+ 241A 09                               add     hl, bc              // operate backward
1192+ 241B 2B                               dec     hl
1193+ 241C EB                               ex      de, hl
1194+ 241D 09                               add     hl, bc
1195+ 241E 2B                               dec     hl
1196+ 241F ED B8                            lddr                        // backward
1197+ 2421 18 E9                            jr      Cmove_NoMove
1198+ 2423              // CmoveV_NoMove:
1199+ 2423                          //  exx
1200+ 2423
1201+ 2423                          //  next
1202+ 2423
1203+ 2423              //  ______________________________________________________________________
1204+ 2423              //
1205+ 2423              // um*      u1 u2 -- ud
1206+ 2423              // Unsigned multiplication
1207+ 2423              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1208+ 2423              // On the stack a double number is treated as two single numbers
1209+ 2423              // where DE is on the top of the stack and HL is the second from top,
1210+ 2423              // Instead, in 2VARIABLE a double number is stored as EDLH.
1211+ 2423              // this definition could use "MUL" Z80N new op-code.
1212+ 2423                              New_Def UM_MUL, "UM*", is_code, is_normal
1212+ 2423             >
1212+ 2423             >Dict_Ptr        defl    $
1212+ 2423             >
1212+ 2423             >//              ______________________________________________________________________
1212+ 2423             >//              Heap part
1212+ 2423             >
1212+ 2423             >
1212+ 2423             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E207             >
1212+ E207             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E207             >Latest_Definition defl  Heap_Ptr
1212+ E207             >
1212+ E207             >                // dummy db directives used to calculate length of namec
1212+ E207 55 4D 2A    >                db      "UM*"
1212+ E20A             >len_NFA         defl    $ - temp_NFA
1212+ E20A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E207             >
1212+ E207 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E208 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1212+ E20B             >                org     $-1                 // alter last byte of Name just above to set
1212+ E20A AA          >                db      {b $} | END_BIT     // msb as name end
1212+ E20B             >
1212+ E20B FC 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E20D             >Prev_Ptr        defl    Heap_Ptr
1212+ E20D             >
1212+ E20D             >mirror_Ptr      defl    $
1212+ E20D             >
1212+ E20D 25 24       >                dw      Dict_Ptr + 2        // xt
1212+ E20F             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E20F             >
1212+ E20F             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E20F             >
1212+ E20F             >//              ______________________________________________________________________
1212+ E20F             >//              Dictionary part
1212+ E20F             >
1212+ E20F             >                org     Dict_Ptr
1212+ 2423             >
1212+ 2423 0D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 2425             >
1212+ 2425             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 2425 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1212+ 2425 ~           >
1212+ 2425 ~           >
1212+ 2425             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 2425             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 2425             >
1212+ 2425             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 2425 D9                           exx
1214+ 2426 D1                           pop     de                    // de has u2 operand
1215+ 2427 E1                           pop     hl                    // hl has u1 operand
1216+ 2428 45                           ld      b, l
1217+ 2429 4B                           ld      c, e
1218+ 242A 5D                           ld      e, l
1219+ 242B 6A                           ld      l, d
1220+ 242C E5                           push    hl
1221+ 242D 69                           ld      l, c
1222+ 242E ED 30                        mul
1223+ 2430 EB                           ex      de, hl
1224+ 2431 ED 30                        mul
1225+ 2433 AF                           xor     a
1226+ 2434 19                           add     hl, de
1227+ 2435 8F                           adc     a
1228+ 2436 59                           ld      e, c
1229+ 2437 50                           ld      d, b
1230+ 2438 ED 30                        mul
1231+ 243A 47                           ld      b, a
1232+ 243B 4C                           ld      c, h
1233+ 243C 7A                           ld      a, d
1234+ 243D 85                           add     l
1235+ 243E 67                           ld      h, a
1236+ 243F 6B                           ld      l, e
1237+ 2440 D1                           pop     de
1238+ 2441 ED 30                        mul
1239+ 2443 EB                           ex      de, hl
1240+ 2444 ED 4A                        adc     hl, bc
1241+ 2446              Mul_Bailout:
1242+ 2446 D5                           push    de
1243+ 2447 E5                           push    hl
1244+ 2448 D9                           exx
1245+ 2449                              next
1245+ 2449 DD E9       >                jp      (ix)
1246+ 244B
1247+ 244B              //  ______________________________________________________________________
1248+ 244B              //
1249+ 244B              // um/mod      ud u1 -- q r
1250+ 244B              // divides ud into u1 giving quotient q and remainder r
1251+ 244B              // algorithm takes 16 bit at a time starting from msb
1252+ 244B              // DE grows from lsb upward with quotient result
1253+ 244B              // HL keeps the remainder at each stage of division
1254+ 244B              // each loop 'lowers' the next binary digit to form the current dividend
1255+ 244B                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1255+ 244B             >
1255+ 244B             >Dict_Ptr        defl    $
1255+ 244B             >
1255+ 244B             >//              ______________________________________________________________________
1255+ 244B             >//              Heap part
1255+ 244B             >
1255+ 244B             >
1255+ 244B             >                org     (Heap_Ptr & $1FFF) + $E000
1255+ E20F             >
1255+ E20F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1255+ E20F             >Latest_Definition defl  Heap_Ptr
1255+ E20F             >
1255+ E20F             >                // dummy db directives used to calculate length of namec
1255+ E20F 55 4D 2F 4D >                db      "UM/MOD"
1255+ E213 4F 44       >
1255+ E215             >len_NFA         defl    $ - temp_NFA
1255+ E215             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1255+ E20F             >
1255+ E20F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1255+ E210 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1255+ E214 4F 44       >
1255+ E216             >                org     $-1                 // alter last byte of Name just above to set
1255+ E215 C4          >                db      {b $} | END_BIT     // msb as name end
1255+ E216             >
1255+ E216 07 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1255+ E218             >Prev_Ptr        defl    Heap_Ptr
1255+ E218             >
1255+ E218             >mirror_Ptr      defl    $
1255+ E218             >
1255+ E218 4D 24       >                dw      Dict_Ptr + 2        // xt
1255+ E21A             >Heap_Ptr        defl    $ - $E000           // save current HP
1255+ E21A             >
1255+ E21A             >Current_HP      defl  $ - $E000             // used to set HP once!
1255+ E21A             >
1255+ E21A             >//              ______________________________________________________________________
1255+ E21A             >//              Dictionary part
1255+ E21A             >
1255+ E21A             >                org     Dict_Ptr
1255+ 244B             >
1255+ 244B 18 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1255+ 244D             >
1255+ 244D             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1255+ 244D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1255+ 244D ~           >
1255+ 244D ~           >
1255+ 244D             >                endif           ; ok        // for other definitions it "points" the correct handler
1255+ 244D             >                // Use of "; ok" to suppress "warning[fwdref]"
1255+ 244D             >
1255+ 244D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1256+ 244D D9                           exx
1257+ 244E C1                           pop     bc                      // divisor
1258+ 244F
1259+ 244F E1                           pop     hl                      // < high part
1260+ 2450 D1                           pop     de                      // < low part and
1261+ 2451
1262+ 2451 7D                           ld      a, l                    // check without changing arguments
1263+ 2452 91                           sub     c                       // if divisor is greater than high part
1264+ 2453 7C                           ld      a, h                    // so quotient will be in range
1265+ 2454 98                           sbc     a, b
1266+ 2455 30 1D                        jr      nc, Um_DivMod_OutOfRange
1267+ 2457 3E 10                            ld      a, 16
1268+ 2459              Um_DivMod_Loop:
1269+ 2459 CB 23                                sla     e
1270+ 245B CB 12                                rl      d
1271+ 245D ED 6A                                adc     hl, hl
1272+ 245F 30 05                                jr      nc, Um_DivMod_Carry
1273+ 2461 A7                                       and     a
1274+ 2462 ED 42                                    sbc     hl, bc
1275+ 2464 18 07                                jr      Um_DivMod_Endif    // else
1276+ 2466              Um_DivMod_Carry:
1277+ 2466 A7                                       and     a
1278+ 2467 ED 42                                    sbc     hl, bc
1279+ 2469 30 02                                    jr      nc, Um_DivMod_Endif
1280+ 246B 09                                           add     hl, bc
1281+ 246C 1B                                           dec     de
1282+ 246D              Um_DivMod_Endif:                                   // endif
1283+ 246D 13                                   inc     de
1284+ 246E 3D                                   dec     a
1285+ 246F 20 E8                            jr      nz, Um_DivMod_Loop
1286+ 2471 EB                               ex      de, hl
1287+ 2472 18 D2                            jr      Mul_Bailout
1288+ 2474              // Um_DivMod_Bailout:
1289+ 2474                              //  push    de                  // de := remanider
1290+ 2474                              //  push    hl                  // hl := quotient
1291+ 2474                              //  exx
1292+ 2474                              //  next
1293+ 2474
1294+ 2474              Um_DivMod_OutOfRange:
1295+ 2474 21 FF FF                     ld      hl, -1
1296+ 2477 54                           ld      d, h
1297+ 2478 5D                           ld      e, l
1298+ 2479 18 CB                        jr      Mul_Bailout
1299+ 247B
1300+ 247B              //  ______________________________________________________________________
1301+ 247B              //
1302+ 247B              // and          n1 n2 -- n3
1303+ 247B              // bit logical AND. Returns n3 as n1 & n2
1304+ 247B                              New_Def AND_OP, "AND", is_code, is_normal
1304+ 247B             >
1304+ 247B             >Dict_Ptr        defl    $
1304+ 247B             >
1304+ 247B             >//              ______________________________________________________________________
1304+ 247B             >//              Heap part
1304+ 247B             >
1304+ 247B             >
1304+ 247B             >                org     (Heap_Ptr & $1FFF) + $E000
1304+ E21A             >
1304+ E21A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ E21A             >Latest_Definition defl  Heap_Ptr
1304+ E21A             >
1304+ E21A             >                // dummy db directives used to calculate length of namec
1304+ E21A 41 4E 44    >                db      "AND"
1304+ E21D             >len_NFA         defl    $ - temp_NFA
1304+ E21D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ E21A             >
1304+ E21A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ E21B 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1304+ E21E             >                org     $-1                 // alter last byte of Name just above to set
1304+ E21D C4          >                db      {b $} | END_BIT     // msb as name end
1304+ E21E             >
1304+ E21E 0F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1304+ E220             >Prev_Ptr        defl    Heap_Ptr
1304+ E220             >
1304+ E220             >mirror_Ptr      defl    $
1304+ E220             >
1304+ E220 7D 24       >                dw      Dict_Ptr + 2        // xt
1304+ E222             >Heap_Ptr        defl    $ - $E000           // save current HP
1304+ E222             >
1304+ E222             >Current_HP      defl  $ - $E000             // used to set HP once!
1304+ E222             >
1304+ E222             >//              ______________________________________________________________________
1304+ E222             >//              Dictionary part
1304+ E222             >
1304+ E222             >                org     Dict_Ptr
1304+ 247B             >
1304+ 247B 20 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1304+ 247D             >
1304+ 247D             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 247D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 247D ~           >
1304+ 247D ~           >
1304+ 247D             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 247D             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 247D             >
1304+ 247D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 247D D9                           exx
1306+ 247E D1                           pop     de
1307+ 247F E1                           pop     hl
1308+ 2480 7B                           ld      a, e
1309+ 2481 A5                           and     l
1310+ 2482 6F                           ld      l, a
1311+ 2483 7A                           ld      a, d
1312+ 2484 A4                           and     h
1313+ 2485              Boolean_exit:
1314+ 2485 67                           ld      h, a
1315+ 2486 E5                           push    hl
1316+ 2487 D9                           exx
1317+ 2488                              next
1317+ 2488 DD E9       >                jp      (ix)
1318+ 248A
1319+ 248A              //  ______________________________________________________________________
1320+ 248A              //
1321+ 248A              // or           n1 n2 -- n3
1322+ 248A              // bit logical OR. Returns n3 as n1 | n2
1323+ 248A                              New_Def OR_OP, "OR", is_code, is_normal
1323+ 248A             >
1323+ 248A             >Dict_Ptr        defl    $
1323+ 248A             >
1323+ 248A             >//              ______________________________________________________________________
1323+ 248A             >//              Heap part
1323+ 248A             >
1323+ 248A             >
1323+ 248A             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E222             >
1323+ E222             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E222             >Latest_Definition defl  Heap_Ptr
1323+ E222             >
1323+ E222             >                // dummy db directives used to calculate length of namec
1323+ E222 4F 52       >                db      "OR"
1323+ E224             >len_NFA         defl    $ - temp_NFA
1323+ E224             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E222             >
1323+ E222 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E223 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1323+ E225             >                org     $-1                 // alter last byte of Name just above to set
1323+ E224 D2          >                db      {b $} | END_BIT     // msb as name end
1323+ E225             >
1323+ E225 1A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E227             >Prev_Ptr        defl    Heap_Ptr
1323+ E227             >
1323+ E227             >mirror_Ptr      defl    $
1323+ E227             >
1323+ E227 8C 24       >                dw      Dict_Ptr + 2        // xt
1323+ E229             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E229             >
1323+ E229             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E229             >
1323+ E229             >//              ______________________________________________________________________
1323+ E229             >//              Dictionary part
1323+ E229             >
1323+ E229             >                org     Dict_Ptr
1323+ 248A             >
1323+ 248A 27 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 248C             >
1323+ 248C             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 248C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1323+ 248C ~           >
1323+ 248C ~           >
1323+ 248C             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 248C             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 248C             >
1323+ 248C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 248C D9                           exx
1325+ 248D D1                           pop     de
1326+ 248E E1                           pop     hl
1327+ 248F 7B                           ld      a, e
1328+ 2490 B5                           or      l
1329+ 2491 6F                           ld      l, a
1330+ 2492 7A                           ld      a, d
1331+ 2493 B4                           or      h
1332+ 2494 18 EF                        jr      Boolean_exit
1333+ 2496                        //    ld      h, a
1334+ 2496                        //    push    hl
1335+ 2496                        //    exx
1336+ 2496                        //    next
1337+ 2496
1338+ 2496              //  ______________________________________________________________________
1339+ 2496              //
1340+ 2496              // xor          n1 n2 -- n3
1341+ 2496              // bit logical OR. Returns n3 as n1 ^ n2
1342+ 2496                              New_Def XOR_OP, "XOR", is_code, is_normal
1342+ 2496             >
1342+ 2496             >Dict_Ptr        defl    $
1342+ 2496             >
1342+ 2496             >//              ______________________________________________________________________
1342+ 2496             >//              Heap part
1342+ 2496             >
1342+ 2496             >
1342+ 2496             >                org     (Heap_Ptr & $1FFF) + $E000
1342+ E229             >
1342+ E229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ E229             >Latest_Definition defl  Heap_Ptr
1342+ E229             >
1342+ E229             >                // dummy db directives used to calculate length of namec
1342+ E229 58 4F 52    >                db      "XOR"
1342+ E22C             >len_NFA         defl    $ - temp_NFA
1342+ E22C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ E229             >
1342+ E229 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ E22A 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1342+ E22D             >                org     $-1                 // alter last byte of Name just above to set
1342+ E22C D2          >                db      {b $} | END_BIT     // msb as name end
1342+ E22D             >
1342+ E22D 22 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1342+ E22F             >Prev_Ptr        defl    Heap_Ptr
1342+ E22F             >
1342+ E22F             >mirror_Ptr      defl    $
1342+ E22F             >
1342+ E22F 98 24       >                dw      Dict_Ptr + 2        // xt
1342+ E231             >Heap_Ptr        defl    $ - $E000           // save current HP
1342+ E231             >
1342+ E231             >Current_HP      defl  $ - $E000             // used to set HP once!
1342+ E231             >
1342+ E231             >//              ______________________________________________________________________
1342+ E231             >//              Dictionary part
1342+ E231             >
1342+ E231             >                org     Dict_Ptr
1342+ 2496             >
1342+ 2496 2F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1342+ 2498             >
1342+ 2498             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 2498 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1342+ 2498 ~           >
1342+ 2498 ~           >
1342+ 2498             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 2498             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 2498             >
1342+ 2498             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 2498 D9                           exx
1344+ 2499 D1                           pop     de
1345+ 249A E1                           pop     hl
1346+ 249B 7B                           ld      a, e
1347+ 249C AD                           xor     l
1348+ 249D 6F                           ld      l, a
1349+ 249E 7A                           ld      a, d
1350+ 249F AC                           xor     h
1351+ 24A0 18 E3                        jr      Boolean_exit
1352+ 24A2                        //    ld      h, a
1353+ 24A2                        //    push    hl
1354+ 24A2                        //    exx
1355+ 24A2                        //    next
1356+ 24A2
1357+ 24A2              //  ______________________________________________________________________
1358+ 24A2              //
1359+ 24A2              // sp@      -- a
1360+ 24A2              // returns on top of stack the value of SP before execution
1361+ 24A2                              New_Def SPFETCH, "SP@", is_code, is_normal
1361+ 24A2             >
1361+ 24A2             >Dict_Ptr        defl    $
1361+ 24A2             >
1361+ 24A2             >//              ______________________________________________________________________
1361+ 24A2             >//              Heap part
1361+ 24A2             >
1361+ 24A2             >
1361+ 24A2             >                org     (Heap_Ptr & $1FFF) + $E000
1361+ E231             >
1361+ E231             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1361+ E231             >Latest_Definition defl  Heap_Ptr
1361+ E231             >
1361+ E231             >                // dummy db directives used to calculate length of namec
1361+ E231 53 50 40    >                db      "SP@"
1361+ E234             >len_NFA         defl    $ - temp_NFA
1361+ E234             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1361+ E231             >
1361+ E231 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1361+ E232 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1361+ E235             >                org     $-1                 // alter last byte of Name just above to set
1361+ E234 C0          >                db      {b $} | END_BIT     // msb as name end
1361+ E235             >
1361+ E235 29 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1361+ E237             >Prev_Ptr        defl    Heap_Ptr
1361+ E237             >
1361+ E237             >mirror_Ptr      defl    $
1361+ E237             >
1361+ E237 A4 24       >                dw      Dict_Ptr + 2        // xt
1361+ E239             >Heap_Ptr        defl    $ - $E000           // save current HP
1361+ E239             >
1361+ E239             >Current_HP      defl  $ - $E000             // used to set HP once!
1361+ E239             >
1361+ E239             >//              ______________________________________________________________________
1361+ E239             >//              Dictionary part
1361+ E239             >
1361+ E239             >                org     Dict_Ptr
1361+ 24A2             >
1361+ 24A2 37 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1361+ 24A4             >
1361+ 24A4             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1361+ 24A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1361+ 24A4 ~           >
1361+ 24A4 ~           >
1361+ 24A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1361+ 24A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1361+ 24A4             >
1361+ 24A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1362+ 24A4
1363+ 24A4 21 00 00                     ld      hl, 0
1364+ 24A7 39                           add     hl, sp
1365+ 24A8
1366+ 24A8                              psh1
1366+ 24A8 E5          >                push    hl
1366+ 24A9 DD E9       >                jp      (ix)
1367+ 24AB
1368+ 24AB              //  ______________________________________________________________________
1369+ 24AB              //
1370+ 24AB              // sp!      a --
1371+ 24AB              // restore SP to the initial value passed
1372+ 24AB              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1373+ 24AB                              New_Def SPSTORE, "SP!", is_code, is_normal
1373+ 24AB             >
1373+ 24AB             >Dict_Ptr        defl    $
1373+ 24AB             >
1373+ 24AB             >//              ______________________________________________________________________
1373+ 24AB             >//              Heap part
1373+ 24AB             >
1373+ 24AB             >
1373+ 24AB             >                org     (Heap_Ptr & $1FFF) + $E000
1373+ E239             >
1373+ E239             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1373+ E239             >Latest_Definition defl  Heap_Ptr
1373+ E239             >
1373+ E239             >                // dummy db directives used to calculate length of namec
1373+ E239 53 50 21    >                db      "SP!"
1373+ E23C             >len_NFA         defl    $ - temp_NFA
1373+ E23C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1373+ E239             >
1373+ E239 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1373+ E23A 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1373+ E23D             >                org     $-1                 // alter last byte of Name just above to set
1373+ E23C A1          >                db      {b $} | END_BIT     // msb as name end
1373+ E23D             >
1373+ E23D 31 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1373+ E23F             >Prev_Ptr        defl    Heap_Ptr
1373+ E23F             >
1373+ E23F             >mirror_Ptr      defl    $
1373+ E23F             >
1373+ E23F AD 24       >                dw      Dict_Ptr + 2        // xt
1373+ E241             >Heap_Ptr        defl    $ - $E000           // save current HP
1373+ E241             >
1373+ E241             >Current_HP      defl  $ - $E000             // used to set HP once!
1373+ E241             >
1373+ E241             >//              ______________________________________________________________________
1373+ E241             >//              Dictionary part
1373+ E241             >
1373+ E241             >                org     Dict_Ptr
1373+ 24AB             >
1373+ 24AB 3F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1373+ 24AD             >
1373+ 24AD             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1373+ 24AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1373+ 24AD ~           >
1373+ 24AD ~           >
1373+ 24AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1373+ 24AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1373+ 24AD             >
1373+ 24AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1374+ 24AD E1                           pop     hl
1375+ 24AE F9                           ld      sp, hl
1376+ 24AF
1377+ 24AF                              next
1377+ 24AF DD E9       >                jp      (ix)
1378+ 24B1
1379+ 24B1              //  ______________________________________________________________________
1380+ 24B1              //
1381+ 24B1              // rp@      -- a
1382+ 24B1              // returns on top of stack the value of Return-Pointer
1383+ 24B1                              New_Def RPFETCH, "RP@", is_code, is_normal
1383+ 24B1             >
1383+ 24B1             >Dict_Ptr        defl    $
1383+ 24B1             >
1383+ 24B1             >//              ______________________________________________________________________
1383+ 24B1             >//              Heap part
1383+ 24B1             >
1383+ 24B1             >
1383+ 24B1             >                org     (Heap_Ptr & $1FFF) + $E000
1383+ E241             >
1383+ E241             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1383+ E241             >Latest_Definition defl  Heap_Ptr
1383+ E241             >
1383+ E241             >                // dummy db directives used to calculate length of namec
1383+ E241 52 50 40    >                db      "RP@"
1383+ E244             >len_NFA         defl    $ - temp_NFA
1383+ E244             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1383+ E241             >
1383+ E241 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1383+ E242 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1383+ E245             >                org     $-1                 // alter last byte of Name just above to set
1383+ E244 C0          >                db      {b $} | END_BIT     // msb as name end
1383+ E245             >
1383+ E245 39 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1383+ E247             >Prev_Ptr        defl    Heap_Ptr
1383+ E247             >
1383+ E247             >mirror_Ptr      defl    $
1383+ E247             >
1383+ E247 B3 24       >                dw      Dict_Ptr + 2        // xt
1383+ E249             >Heap_Ptr        defl    $ - $E000           // save current HP
1383+ E249             >
1383+ E249             >Current_HP      defl  $ - $E000             // used to set HP once!
1383+ E249             >
1383+ E249             >//              ______________________________________________________________________
1383+ E249             >//              Dictionary part
1383+ E249             >
1383+ E249             >                org     Dict_Ptr
1383+ 24B1             >
1383+ 24B1 47 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1383+ 24B3             >
1383+ 24B3             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1383+ 24B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1383+ 24B3 ~           >
1383+ 24B3 ~           >
1383+ 24B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1383+ 24B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1383+ 24B3             >
1383+ 24B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1384+ 24B3
1385+ 24B3                              // *** ldhlrp
1386+ 24B3                              // *** ex      de, hl
1387+ 24B3 D5                           push de
1388+ 24B4
1389+ 24B4                              next
1389+ 24B4 DD E9       >                jp      (ix)
1390+ 24B6
1391+ 24B6              //  ______________________________________________________________________
1392+ 24B6              //
1393+ 24B6              // rp!      a --
1394+ 24B6              // restore RP to the initial value passed
1395+ 24B6              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1396+ 24B6                              New_Def RPSTORE, "RP!", is_code, is_normal
1396+ 24B6             >
1396+ 24B6             >Dict_Ptr        defl    $
1396+ 24B6             >
1396+ 24B6             >//              ______________________________________________________________________
1396+ 24B6             >//              Heap part
1396+ 24B6             >
1396+ 24B6             >
1396+ 24B6             >                org     (Heap_Ptr & $1FFF) + $E000
1396+ E249             >
1396+ E249             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1396+ E249             >Latest_Definition defl  Heap_Ptr
1396+ E249             >
1396+ E249             >                // dummy db directives used to calculate length of namec
1396+ E249 52 50 21    >                db      "RP!"
1396+ E24C             >len_NFA         defl    $ - temp_NFA
1396+ E24C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1396+ E249             >
1396+ E249 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1396+ E24A 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1396+ E24D             >                org     $-1                 // alter last byte of Name just above to set
1396+ E24C A1          >                db      {b $} | END_BIT     // msb as name end
1396+ E24D             >
1396+ E24D 41 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1396+ E24F             >Prev_Ptr        defl    Heap_Ptr
1396+ E24F             >
1396+ E24F             >mirror_Ptr      defl    $
1396+ E24F             >
1396+ E24F B8 24       >                dw      Dict_Ptr + 2        // xt
1396+ E251             >Heap_Ptr        defl    $ - $E000           // save current HP
1396+ E251             >
1396+ E251             >Current_HP      defl  $ - $E000             // used to set HP once!
1396+ E251             >
1396+ E251             >//              ______________________________________________________________________
1396+ E251             >//              Dictionary part
1396+ E251             >
1396+ E251             >                org     Dict_Ptr
1396+ 24B6             >
1396+ 24B6 4F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1396+ 24B8             >
1396+ 24B8             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1396+ 24B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1396+ 24B8 ~           >
1396+ 24B8 ~           >
1396+ 24B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1396+ 24B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1396+ 24B8             >
1396+ 24B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1397+ 24B8 D1                           pop     de
1398+ 24B9                              // *** ex      de, hl
1399+ 24B9                              // *** ldrphl
1400+ 24B9
1401+ 24B9                              next
1401+ 24B9 DD E9       >                jp      (ix)
1402+ 24BB
1403+ 24BB              //  ______________________________________________________________________
1404+ 24BB              //
1405+ 24BB              // exit       --
1406+ 24BB              // exits back to the caller word
1407+ 24BB                              New_Def EXIT, "EXIT", is_code, is_normal
1407+ 24BB             >
1407+ 24BB             >Dict_Ptr        defl    $
1407+ 24BB             >
1407+ 24BB             >//              ______________________________________________________________________
1407+ 24BB             >//              Heap part
1407+ 24BB             >
1407+ 24BB             >
1407+ 24BB             >                org     (Heap_Ptr & $1FFF) + $E000
1407+ E251             >
1407+ E251             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1407+ E251             >Latest_Definition defl  Heap_Ptr
1407+ E251             >
1407+ E251             >                // dummy db directives used to calculate length of namec
1407+ E251 45 58 49 54 >                db      "EXIT"
1407+ E255             >len_NFA         defl    $ - temp_NFA
1407+ E255             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1407+ E251             >
1407+ E251 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1407+ E252 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1407+ E256             >                org     $-1                 // alter last byte of Name just above to set
1407+ E255 D4          >                db      {b $} | END_BIT     // msb as name end
1407+ E256             >
1407+ E256 49 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1407+ E258             >Prev_Ptr        defl    Heap_Ptr
1407+ E258             >
1407+ E258             >mirror_Ptr      defl    $
1407+ E258             >
1407+ E258 BD 24       >                dw      Dict_Ptr + 2        // xt
1407+ E25A             >Heap_Ptr        defl    $ - $E000           // save current HP
1407+ E25A             >
1407+ E25A             >Current_HP      defl  $ - $E000             // used to set HP once!
1407+ E25A             >
1407+ E25A             >//              ______________________________________________________________________
1407+ E25A             >//              Dictionary part
1407+ E25A             >
1407+ E25A             >                org     Dict_Ptr
1407+ 24BB             >
1407+ 24BB 58 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1407+ 24BD             >
1407+ 24BD             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1407+ 24BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1407+ 24BD ~           >
1407+ 24BD ~           >
1407+ 24BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1407+ 24BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1407+ 24BD             >
1407+ 24BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1408+ 24BD EB                           ex      de, hl
1409+ 24BE                              // *** ldhlrp                      // Get Return Stack Pointer
1410+ 24BE 4E                           ld      c, (hl)             // pop Instruction Pointer
1411+ 24BF 23                           inc     hl                  // from Return Stack
1412+ 24C0 46                           ld      b, (hl)
1413+ 24C1 23                           inc     hl
1414+ 24C2                              // *** ldrphl                      // Set Return Stack Pointer
1415+ 24C2 EB                           ex      de, hl
1416+ 24C3                              next
1416+ 24C3 DD E9       >                jp      (ix)
1417+ 24C5
1418+ 24C5              //  ______________________________________________________________________
1419+ 24C5              //
1420+ 24C5              // lastl      --
1421+ 24C5              // exits back to the caller word
1422+ 24C5              //              New_Def EXIT, "LASTL", is_code, is_normal
1423+ 24C5              //              push    de
1424+ 24C5              //              ex      de, hl //**
1425+ 24C5              //              // *** ldhlrp                      // Get Return Stack Pointer
1426+ 24C5              //              ld      e, (hl)             // pop Instruction Pointer
1427+ 24C5              //              inc     hl                  // from Return Stack
1428+ 24C5              //              ld      d, (hl)
1429+ 24C5              //              inc     hl
1430+ 24C5              //              ld      (hl), e
1431+ 24C5              //              inc     hl
1432+ 24C5              //              ld      (hl), d
1433+ 24C5              //              add     hl, -3
1434+ 24C5              //              pop     de
1435+ 24C5              //              next
1436+ 24C5
1437+ 24C5              //  ______________________________________________________________________
1438+ 24C5              //
1439+ 24C5              // >r      n --
1440+ 24C5              // pop from calculator-stack and push into return-stack
1441+ 24C5                              New_Def TO_R, ">R", is_code, is_normal
1441+ 24C5             >
1441+ 24C5             >Dict_Ptr        defl    $
1441+ 24C5             >
1441+ 24C5             >//              ______________________________________________________________________
1441+ 24C5             >//              Heap part
1441+ 24C5             >
1441+ 24C5             >
1441+ 24C5             >                org     (Heap_Ptr & $1FFF) + $E000
1441+ E25A             >
1441+ E25A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ E25A             >Latest_Definition defl  Heap_Ptr
1441+ E25A             >
1441+ E25A             >                // dummy db directives used to calculate length of namec
1441+ E25A 3E 52       >                db      ">R"
1441+ E25C             >len_NFA         defl    $ - temp_NFA
1441+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ E25A             >
1441+ E25A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ E25B 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1441+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1441+ E25C D2          >                db      {b $} | END_BIT     // msb as name end
1441+ E25D             >
1441+ E25D 51 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1441+ E25F             >Prev_Ptr        defl    Heap_Ptr
1441+ E25F             >
1441+ E25F             >mirror_Ptr      defl    $
1441+ E25F             >
1441+ E25F C7 24       >                dw      Dict_Ptr + 2        // xt
1441+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1441+ E261             >
1441+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1441+ E261             >
1441+ E261             >//              ______________________________________________________________________
1441+ E261             >//              Dictionary part
1441+ E261             >
1441+ E261             >                org     Dict_Ptr
1441+ 24C5             >
1441+ 24C5 5F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1441+ 24C7             >
1441+ 24C7             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 24C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1441+ 24C7 ~           >
1441+ 24C7 ~           >
1441+ 24C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 24C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 24C7             >
1441+ 24C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 24C7 E1                           pop     hl
1443+ 24C8 EB                           ex      de, hl //**
1444+ 24C9                              // *** ldhlrp
1445+ 24C9 2B                           dec     hl
1446+ 24CA 72                           ld      (hl), d             // store current TOS
1447+ 24CB 2B                           dec     hl                  // to Return Stack
1448+ 24CC 73                           ld      (hl), e
1449+ 24CD                              // *** ldrphl
1450+ 24CD EB                           ex      de, hl //**
1451+ 24CE                              next
1451+ 24CE DD E9       >                jp      (ix)
1452+ 24D0
1453+ 24D0              //  ______________________________________________________________________
1454+ 24D0              //
1455+ 24D0              // r>      -- n
1456+ 24D0              // pop from return-stack and push into calculator-stack
1457+ 24D0                              New_Def R_TO, "R>", is_code, is_normal
1457+ 24D0             >
1457+ 24D0             >Dict_Ptr        defl    $
1457+ 24D0             >
1457+ 24D0             >//              ______________________________________________________________________
1457+ 24D0             >//              Heap part
1457+ 24D0             >
1457+ 24D0             >
1457+ 24D0             >                org     (Heap_Ptr & $1FFF) + $E000
1457+ E261             >
1457+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ E261             >Latest_Definition defl  Heap_Ptr
1457+ E261             >
1457+ E261             >                // dummy db directives used to calculate length of namec
1457+ E261 52 3E       >                db      "R>"
1457+ E263             >len_NFA         defl    $ - temp_NFA
1457+ E263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ E261             >
1457+ E261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ E262 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1457+ E264             >                org     $-1                 // alter last byte of Name just above to set
1457+ E263 BE          >                db      {b $} | END_BIT     // msb as name end
1457+ E264             >
1457+ E264 5A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1457+ E266             >Prev_Ptr        defl    Heap_Ptr
1457+ E266             >
1457+ E266             >mirror_Ptr      defl    $
1457+ E266             >
1457+ E266 D2 24       >                dw      Dict_Ptr + 2        // xt
1457+ E268             >Heap_Ptr        defl    $ - $E000           // save current HP
1457+ E268             >
1457+ E268             >Current_HP      defl  $ - $E000             // used to set HP once!
1457+ E268             >
1457+ E268             >//              ______________________________________________________________________
1457+ E268             >//              Dictionary part
1457+ E268             >
1457+ E268             >                org     Dict_Ptr
1457+ 24D0             >
1457+ 24D0 66 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1457+ 24D2             >
1457+ 24D2             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 24D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1457+ 24D2 ~           >
1457+ 24D2 ~           >
1457+ 24D2             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 24D2             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 24D2             >
1457+ 24D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 24D2
1459+ 24D2 EB                           ex      de, hl //**
1460+ 24D3                              // *** ldhlrp
1461+ 24D3 5E                           ld      e, (hl)             // retrieve from Return Stack
1462+ 24D4 23                           inc     hl
1463+ 24D5 56                           ld      d, (hl)
1464+ 24D6 23                           inc     hl
1465+ 24D7                              // *** ldrphl
1466+ 24D7 EB                           ex      de, hl //**
1467+ 24D8 E5                           push    hl
1468+ 24D9                              next
1468+ 24D9 DD E9       >                jp      (ix)
1469+ 24DB
1470+ 24DB              //  ______________________________________________________________________
1471+ 24DB              //
1472+ 24DB              // r@           -- n
1473+ 24DB              // return on top of stack the value of top of return-stack
1474+ 24DB              // Since this is the same as I, we alter R's CFA to jump there
1475+ 24DB                              New_Def R_OP, "R@", is_code, is_normal
1475+ 24DB             >
1475+ 24DB             >Dict_Ptr        defl    $
1475+ 24DB             >
1475+ 24DB             >//              ______________________________________________________________________
1475+ 24DB             >//              Heap part
1475+ 24DB             >
1475+ 24DB             >
1475+ 24DB             >                org     (Heap_Ptr & $1FFF) + $E000
1475+ E268             >
1475+ E268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ E268             >Latest_Definition defl  Heap_Ptr
1475+ E268             >
1475+ E268             >                // dummy db directives used to calculate length of namec
1475+ E268 52 40       >                db      "R@"
1475+ E26A             >len_NFA         defl    $ - temp_NFA
1475+ E26A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ E268             >
1475+ E268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ E269 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1475+ E26B             >                org     $-1                 // alter last byte of Name just above to set
1475+ E26A C0          >                db      {b $} | END_BIT     // msb as name end
1475+ E26B             >
1475+ E26B 61 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1475+ E26D             >Prev_Ptr        defl    Heap_Ptr
1475+ E26D             >
1475+ E26D             >mirror_Ptr      defl    $
1475+ E26D             >
1475+ E26D DD 24       >                dw      Dict_Ptr + 2        // xt
1475+ E26F             >Heap_Ptr        defl    $ - $E000           // save current HP
1475+ E26F             >
1475+ E26F             >Current_HP      defl  $ - $E000             // used to set HP once!
1475+ E26F             >
1475+ E26F             >//              ______________________________________________________________________
1475+ E26F             >//              Dictionary part
1475+ E26F             >
1475+ E26F             >                org     Dict_Ptr
1475+ 24DB             >
1475+ 24DB 6D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1475+ 24DD             >
1475+ 24DD             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 24DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1475+ 24DD ~           >
1475+ 24DD ~           >
1475+ 24DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 24DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 24DD             >
1475+ 24DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 24DD                          //  Behave  I_Ptr
1477+ 24DD C3 CC 20                     jp      I_Ptr
1478+ 24E0
1479+ 24E0              //  ______________________________________________________________________
1480+ 24E0              //
1481+ 24E0              // r            -- n
1482+ 24E0              // return on top of stack the value of top of return-stack
1483+ 24E0              // Since this is the same as I, we alter R's CFA to jump there
1484+ 24E0              //              New_Def R_OLD, "R", is_code, is_normal
1485+ 24E0              //              jp      I_Ptr
1486+ 24E0
1487+ 24E0              //  ______________________________________________________________________
1488+ 24E0              //
1489+ 24E0              // 0=           n -- f
1490+ 24E0              // true (non zero) if n is zero, false (0) elsewere
1491+ 24E0                              New_Def ZEQUAL, "0=", is_code, is_normal
1491+ 24E0             >
1491+ 24E0             >Dict_Ptr        defl    $
1491+ 24E0             >
1491+ 24E0             >//              ______________________________________________________________________
1491+ 24E0             >//              Heap part
1491+ 24E0             >
1491+ 24E0             >
1491+ 24E0             >                org     (Heap_Ptr & $1FFF) + $E000
1491+ E26F             >
1491+ E26F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1491+ E26F             >Latest_Definition defl  Heap_Ptr
1491+ E26F             >
1491+ E26F             >                // dummy db directives used to calculate length of namec
1491+ E26F 30 3D       >                db      "0="
1491+ E271             >len_NFA         defl    $ - temp_NFA
1491+ E271             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1491+ E26F             >
1491+ E26F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1491+ E270 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1491+ E272             >                org     $-1                 // alter last byte of Name just above to set
1491+ E271 BD          >                db      {b $} | END_BIT     // msb as name end
1491+ E272             >
1491+ E272 68 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1491+ E274             >Prev_Ptr        defl    Heap_Ptr
1491+ E274             >
1491+ E274             >mirror_Ptr      defl    $
1491+ E274             >
1491+ E274 E2 24       >                dw      Dict_Ptr + 2        // xt
1491+ E276             >Heap_Ptr        defl    $ - $E000           // save current HP
1491+ E276             >
1491+ E276             >Current_HP      defl  $ - $E000             // used to set HP once!
1491+ E276             >
1491+ E276             >//              ______________________________________________________________________
1491+ E276             >//              Dictionary part
1491+ E276             >
1491+ E276             >                org     Dict_Ptr
1491+ 24E0             >
1491+ 24E0 74 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1491+ 24E2             >
1491+ 24E2             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1491+ 24E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1491+ 24E2 ~           >
1491+ 24E2 ~           >
1491+ 24E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1491+ 24E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1491+ 24E2             >
1491+ 24E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1492+ 24E2              Zero_Equal:
1493+ 24E2 E1                           pop     hl
1494+ 24E3 7D                           ld      a, l
1495+ 24E4 B4                           or      h
1496+ 24E5 20 01                        jr      nz, ZEqual_Skip
1497+ 24E7 3F                               ccf
1498+ 24E8              ZEqual_Skip:
1499+ 24E8 ED 62                        sbc     hl, hl
1500+ 24EA                              psh1
1500+ 24EA E5          >                push    hl
1500+ 24EB DD E9       >                jp      (ix)
1501+ 24ED
1502+ 24ED              //  ______________________________________________________________________
1503+ 24ED              //
1504+ 24ED              // not         a1 -- a2
1505+ 24ED              // increment by 2 top of stack
1506+ 24ED                              New_Def NOT_OP, "NOT", is_code, is_normal
1506+ 24ED             >
1506+ 24ED             >Dict_Ptr        defl    $
1506+ 24ED             >
1506+ 24ED             >//              ______________________________________________________________________
1506+ 24ED             >//              Heap part
1506+ 24ED             >
1506+ 24ED             >
1506+ 24ED             >                org     (Heap_Ptr & $1FFF) + $E000
1506+ E276             >
1506+ E276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ E276             >Latest_Definition defl  Heap_Ptr
1506+ E276             >
1506+ E276             >                // dummy db directives used to calculate length of namec
1506+ E276 4E 4F 54    >                db      "NOT"
1506+ E279             >len_NFA         defl    $ - temp_NFA
1506+ E279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ E276             >
1506+ E276 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ E277 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1506+ E27A             >                org     $-1                 // alter last byte of Name just above to set
1506+ E279 D4          >                db      {b $} | END_BIT     // msb as name end
1506+ E27A             >
1506+ E27A 6F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1506+ E27C             >Prev_Ptr        defl    Heap_Ptr
1506+ E27C             >
1506+ E27C             >mirror_Ptr      defl    $
1506+ E27C             >
1506+ E27C EF 24       >                dw      Dict_Ptr + 2        // xt
1506+ E27E             >Heap_Ptr        defl    $ - $E000           // save current HP
1506+ E27E             >
1506+ E27E             >Current_HP      defl  $ - $E000             // used to set HP once!
1506+ E27E             >
1506+ E27E             >//              ______________________________________________________________________
1506+ E27E             >//              Dictionary part
1506+ E27E             >
1506+ E27E             >                org     Dict_Ptr
1506+ 24ED             >
1506+ 24ED 7C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1506+ 24EF             >
1506+ 24EF             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 24EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 24EF ~           >
1506+ 24EF ~           >
1506+ 24EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 24EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 24EF             >
1506+ 24EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 24EF                          //  Behave  Zero_Equal
1508+ 24EF 18 F1                        jr      Zero_Equal
1509+ 24F1
1510+ 24F1              //  ______________________________________________________________________
1511+ 24F1              //
1512+ 24F1              // 0<           n -- f
1513+ 24F1              // true (non zero) if n is less than zero, false (0) elsewere
1514+ 24F1                              New_Def ZLESS, "0<", is_code, is_normal
1514+ 24F1             >
1514+ 24F1             >Dict_Ptr        defl    $
1514+ 24F1             >
1514+ 24F1             >//              ______________________________________________________________________
1514+ 24F1             >//              Heap part
1514+ 24F1             >
1514+ 24F1             >
1514+ 24F1             >                org     (Heap_Ptr & $1FFF) + $E000
1514+ E27E             >
1514+ E27E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ E27E             >Latest_Definition defl  Heap_Ptr
1514+ E27E             >
1514+ E27E             >                // dummy db directives used to calculate length of namec
1514+ E27E 30 3C       >                db      "0<"
1514+ E280             >len_NFA         defl    $ - temp_NFA
1514+ E280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ E27E             >
1514+ E27E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ E27F 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1514+ E281             >                org     $-1                 // alter last byte of Name just above to set
1514+ E280 BC          >                db      {b $} | END_BIT     // msb as name end
1514+ E281             >
1514+ E281 76 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1514+ E283             >Prev_Ptr        defl    Heap_Ptr
1514+ E283             >
1514+ E283             >mirror_Ptr      defl    $
1514+ E283             >
1514+ E283 F3 24       >                dw      Dict_Ptr + 2        // xt
1514+ E285             >Heap_Ptr        defl    $ - $E000           // save current HP
1514+ E285             >
1514+ E285             >Current_HP      defl  $ - $E000             // used to set HP once!
1514+ E285             >
1514+ E285             >//              ______________________________________________________________________
1514+ E285             >//              Dictionary part
1514+ E285             >
1514+ E285             >                org     Dict_Ptr
1514+ 24F1             >
1514+ 24F1 83 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1514+ 24F3             >
1514+ 24F3             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 24F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1514+ 24F3 ~           >
1514+ 24F3 ~           >
1514+ 24F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 24F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 24F3             >
1514+ 24F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 24F3 E1                           pop     hl
1516+ 24F4 29                           add     hl, hl
1517+ 24F5 ED 62                        sbc     hl, hl
1518+ 24F7                              psh1
1518+ 24F7 E5          >                push    hl
1518+ 24F8 DD E9       >                jp      (ix)
1519+ 24FA
1520+ 24FA              //  ______________________________________________________________________
1521+ 24FA              //
1522+ 24FA              // 0>           n -- f
1523+ 24FA              // true (non zero) if n is less than zero, false (0) elsewere
1524+ 24FA                              New_Def ZGREATER, "0>", is_code, is_normal
1524+ 24FA             >
1524+ 24FA             >Dict_Ptr        defl    $
1524+ 24FA             >
1524+ 24FA             >//              ______________________________________________________________________
1524+ 24FA             >//              Heap part
1524+ 24FA             >
1524+ 24FA             >
1524+ 24FA             >                org     (Heap_Ptr & $1FFF) + $E000
1524+ E285             >
1524+ E285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ E285             >Latest_Definition defl  Heap_Ptr
1524+ E285             >
1524+ E285             >                // dummy db directives used to calculate length of namec
1524+ E285 30 3E       >                db      "0>"
1524+ E287             >len_NFA         defl    $ - temp_NFA
1524+ E287             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ E285             >
1524+ E285 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ E286 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1524+ E288             >                org     $-1                 // alter last byte of Name just above to set
1524+ E287 BE          >                db      {b $} | END_BIT     // msb as name end
1524+ E288             >
1524+ E288 7E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1524+ E28A             >Prev_Ptr        defl    Heap_Ptr
1524+ E28A             >
1524+ E28A             >mirror_Ptr      defl    $
1524+ E28A             >
1524+ E28A FC 24       >                dw      Dict_Ptr + 2        // xt
1524+ E28C             >Heap_Ptr        defl    $ - $E000           // save current HP
1524+ E28C             >
1524+ E28C             >Current_HP      defl  $ - $E000             // used to set HP once!
1524+ E28C             >
1524+ E28C             >//              ______________________________________________________________________
1524+ E28C             >//              Dictionary part
1524+ E28C             >
1524+ E28C             >                org     Dict_Ptr
1524+ 24FA             >
1524+ 24FA 8A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1524+ 24FC             >
1524+ 24FC             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 24FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1524+ 24FC ~           >
1524+ 24FC ~           >
1524+ 24FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 24FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 24FC             >
1524+ 24FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 24FC E1                           pop     hl
1526+ 24FD 7D                           ld      a, l
1527+ 24FE B4                           or      h
1528+ 24FF 28 04                        jr      z, ZGreater_Skip
1529+ 2501 29                           add     hl, hl
1530+ 2502 3F                           ccf
1531+ 2503 ED 62                        sbc     hl, hl
1532+ 2505              ZGreater_Skip:
1533+ 2505                              psh1
1533+ 2505 E5          >                push    hl
1533+ 2506 DD E9       >                jp      (ix)
1534+ 2508
1535+ 2508              //  ______________________________________________________________________
1536+ 2508              //
1537+ 2508              // +            n1 n2 -- n3
1538+ 2508              // returns the unsigned sum of two top values
1539+ 2508                              New_Def PLUS, "+", is_code, is_normal
1539+ 2508             >
1539+ 2508             >Dict_Ptr        defl    $
1539+ 2508             >
1539+ 2508             >//              ______________________________________________________________________
1539+ 2508             >//              Heap part
1539+ 2508             >
1539+ 2508             >
1539+ 2508             >                org     (Heap_Ptr & $1FFF) + $E000
1539+ E28C             >
1539+ E28C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ E28C             >Latest_Definition defl  Heap_Ptr
1539+ E28C             >
1539+ E28C             >                // dummy db directives used to calculate length of namec
1539+ E28C 2B          >                db      "+"
1539+ E28D             >len_NFA         defl    $ - temp_NFA
1539+ E28D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ E28C             >
1539+ E28C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ E28D 2B          >                db      "+"               // name string in 7-bit ascii, but
1539+ E28E             >                org     $-1                 // alter last byte of Name just above to set
1539+ E28D AB          >                db      {b $} | END_BIT     // msb as name end
1539+ E28E             >
1539+ E28E 85 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1539+ E290             >Prev_Ptr        defl    Heap_Ptr
1539+ E290             >
1539+ E290             >mirror_Ptr      defl    $
1539+ E290             >
1539+ E290 0A 25       >                dw      Dict_Ptr + 2        // xt
1539+ E292             >Heap_Ptr        defl    $ - $E000           // save current HP
1539+ E292             >
1539+ E292             >Current_HP      defl  $ - $E000             // used to set HP once!
1539+ E292             >
1539+ E292             >//              ______________________________________________________________________
1539+ E292             >//              Dictionary part
1539+ E292             >
1539+ E292             >                org     Dict_Ptr
1539+ 2508             >
1539+ 2508 90 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1539+ 250A             >
1539+ 250A             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 250A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1539+ 250A ~           >
1539+ 250A ~           >
1539+ 250A             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 250A             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 250A             >
1539+ 250A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 250A D9                           exx
1541+ 250B E1                           pop     hl
1542+ 250C D1                           pop     de
1543+ 250D 19                           add     hl, de
1544+ 250E E5                           push    hl
1545+ 250F D9                           exx
1546+ 2510                              next
1546+ 2510 DD E9       >                jp      (ix)
1547+ 2512
1548+ 2512
1549+ 2512              //  ______________________________________________________________________
1550+ 2512              //
1551+ 2512              // d+           d1 d2 -- d3
1552+ 2512              // returns the unsigned sum of two top double-numbers
1553+ 2512              //      d2  d1
1554+ 2512              //      h l h l
1555+ 2512              // SP   LHEDLHED
1556+ 2512              // SP  +01234567
1557+ 2512                              New_Def DPLUS, "D+", is_code, is_normal
1557+ 2512             >
1557+ 2512             >Dict_Ptr        defl    $
1557+ 2512             >
1557+ 2512             >//              ______________________________________________________________________
1557+ 2512             >//              Heap part
1557+ 2512             >
1557+ 2512             >
1557+ 2512             >                org     (Heap_Ptr & $1FFF) + $E000
1557+ E292             >
1557+ E292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1557+ E292             >Latest_Definition defl  Heap_Ptr
1557+ E292             >
1557+ E292             >                // dummy db directives used to calculate length of namec
1557+ E292 44 2B       >                db      "D+"
1557+ E294             >len_NFA         defl    $ - temp_NFA
1557+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1557+ E292             >
1557+ E292 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1557+ E293 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1557+ E295             >                org     $-1                 // alter last byte of Name just above to set
1557+ E294 AB          >                db      {b $} | END_BIT     // msb as name end
1557+ E295             >
1557+ E295 8C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1557+ E297             >Prev_Ptr        defl    Heap_Ptr
1557+ E297             >
1557+ E297             >mirror_Ptr      defl    $
1557+ E297             >
1557+ E297 14 25       >                dw      Dict_Ptr + 2        // xt
1557+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1557+ E299             >
1557+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1557+ E299             >
1557+ E299             >//              ______________________________________________________________________
1557+ E299             >//              Dictionary part
1557+ E299             >
1557+ E299             >                org     Dict_Ptr
1557+ 2512             >
1557+ 2512 97 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1557+ 2514             >
1557+ 2514             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1557+ 2514 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1557+ 2514 ~           >
1557+ 2514 ~           >
1557+ 2514             >                endif           ; ok        // for other definitions it "points" the correct handler
1557+ 2514             >                // Use of "; ok" to suppress "warning[fwdref]"
1557+ 2514             >
1557+ 2514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1558+ 2514
1559+ 2514 D9                           exx
1560+ 2515 C1                           pop     bc                  // bc := d2.H
1561+ 2516 D1                           pop     de                  // hl := d2.L
1562+ 2517 E1                           pop     hl                  // d1.H
1563+ 2518 E3                           ex      (sp), hl            // d1.L
1564+ 2519 19                           add     hl, de              // hl := d2.L + d1.L
1565+ 251A E3                           ex      (sp), hl            // d1.H
1566+ 251B ED 4A                        adc     hl, bc              // d1.H + d2.H
1567+ 251D E5                           push    hl
1568+ 251E D9                           exx
1569+ 251F                              next
1569+ 251F DD E9       >                jp      (ix)
1570+ 2521
1571+ 2521              //  ______________________________________________________________________
1572+ 2521              //
1573+ 2521              // 1+           n1 -- n2
1574+ 2521              // increment by 1 top of stack
1575+ 2521                              New_Def ONE_PLUS, "1+", is_code, is_normal
1575+ 2521             >
1575+ 2521             >Dict_Ptr        defl    $
1575+ 2521             >
1575+ 2521             >//              ______________________________________________________________________
1575+ 2521             >//              Heap part
1575+ 2521             >
1575+ 2521             >
1575+ 2521             >                org     (Heap_Ptr & $1FFF) + $E000
1575+ E299             >
1575+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1575+ E299             >Latest_Definition defl  Heap_Ptr
1575+ E299             >
1575+ E299             >                // dummy db directives used to calculate length of namec
1575+ E299 31 2B       >                db      "1+"
1575+ E29B             >len_NFA         defl    $ - temp_NFA
1575+ E29B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1575+ E299             >
1575+ E299 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1575+ E29A 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1575+ E29C             >                org     $-1                 // alter last byte of Name just above to set
1575+ E29B AB          >                db      {b $} | END_BIT     // msb as name end
1575+ E29C             >
1575+ E29C 92 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1575+ E29E             >Prev_Ptr        defl    Heap_Ptr
1575+ E29E             >
1575+ E29E             >mirror_Ptr      defl    $
1575+ E29E             >
1575+ E29E 23 25       >                dw      Dict_Ptr + 2        // xt
1575+ E2A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1575+ E2A0             >
1575+ E2A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1575+ E2A0             >
1575+ E2A0             >//              ______________________________________________________________________
1575+ E2A0             >//              Dictionary part
1575+ E2A0             >
1575+ E2A0             >                org     Dict_Ptr
1575+ 2521             >
1575+ 2521 9E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1575+ 2523             >
1575+ 2523             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1575+ 2523 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1575+ 2523 ~           >
1575+ 2523 ~           >
1575+ 2523             >                endif           ; ok        // for other definitions it "points" the correct handler
1575+ 2523             >                // Use of "; ok" to suppress "warning[fwdref]"
1575+ 2523             >
1575+ 2523             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1576+ 2523 E1                           pop     hl
1577+ 2524 23                           inc     hl
1578+ 2525
1579+ 2525                              psh1
1579+ 2525 E5          >                push    hl
1579+ 2526 DD E9       >                jp      (ix)
1580+ 2528
1581+ 2528              //  ______________________________________________________________________
1582+ 2528              //
1583+ 2528              // 1-           n1 -- n2
1584+ 2528              // decrement by 1 top of stack
1585+ 2528                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1585+ 2528             >
1585+ 2528             >Dict_Ptr        defl    $
1585+ 2528             >
1585+ 2528             >//              ______________________________________________________________________
1585+ 2528             >//              Heap part
1585+ 2528             >
1585+ 2528             >
1585+ 2528             >                org     (Heap_Ptr & $1FFF) + $E000
1585+ E2A0             >
1585+ E2A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1585+ E2A0             >Latest_Definition defl  Heap_Ptr
1585+ E2A0             >
1585+ E2A0             >                // dummy db directives used to calculate length of namec
1585+ E2A0 31 2D       >                db      "1-"
1585+ E2A2             >len_NFA         defl    $ - temp_NFA
1585+ E2A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1585+ E2A0             >
1585+ E2A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1585+ E2A1 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1585+ E2A3             >                org     $-1                 // alter last byte of Name just above to set
1585+ E2A2 AD          >                db      {b $} | END_BIT     // msb as name end
1585+ E2A3             >
1585+ E2A3 99 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1585+ E2A5             >Prev_Ptr        defl    Heap_Ptr
1585+ E2A5             >
1585+ E2A5             >mirror_Ptr      defl    $
1585+ E2A5             >
1585+ E2A5 2A 25       >                dw      Dict_Ptr + 2        // xt
1585+ E2A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1585+ E2A7             >
1585+ E2A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1585+ E2A7             >
1585+ E2A7             >//              ______________________________________________________________________
1585+ E2A7             >//              Dictionary part
1585+ E2A7             >
1585+ E2A7             >                org     Dict_Ptr
1585+ 2528             >
1585+ 2528 A5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1585+ 252A             >
1585+ 252A             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1585+ 252A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1585+ 252A ~           >
1585+ 252A ~           >
1585+ 252A             >                endif           ; ok        // for other definitions it "points" the correct handler
1585+ 252A             >                // Use of "; ok" to suppress "warning[fwdref]"
1585+ 252A             >
1585+ 252A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1586+ 252A E1                           pop     hl
1587+ 252B 2B                           dec     hl
1588+ 252C
1589+ 252C                              psh1
1589+ 252C E5          >                push    hl
1589+ 252D DD E9       >                jp      (ix)
1590+ 252F
1591+ 252F              //  ______________________________________________________________________
1592+ 252F              //
1593+ 252F              // 2+           n1 -- n2
1594+ 252F              // increment by 2 top of stack
1595+ 252F                              New_Def TWO_PLUS, "2+", is_code, is_normal
1595+ 252F             >
1595+ 252F             >Dict_Ptr        defl    $
1595+ 252F             >
1595+ 252F             >//              ______________________________________________________________________
1595+ 252F             >//              Heap part
1595+ 252F             >
1595+ 252F             >
1595+ 252F             >                org     (Heap_Ptr & $1FFF) + $E000
1595+ E2A7             >
1595+ E2A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1595+ E2A7             >Latest_Definition defl  Heap_Ptr
1595+ E2A7             >
1595+ E2A7             >                // dummy db directives used to calculate length of namec
1595+ E2A7 32 2B       >                db      "2+"
1595+ E2A9             >len_NFA         defl    $ - temp_NFA
1595+ E2A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1595+ E2A7             >
1595+ E2A7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1595+ E2A8 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1595+ E2AA             >                org     $-1                 // alter last byte of Name just above to set
1595+ E2A9 AB          >                db      {b $} | END_BIT     // msb as name end
1595+ E2AA             >
1595+ E2AA A0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1595+ E2AC             >Prev_Ptr        defl    Heap_Ptr
1595+ E2AC             >
1595+ E2AC             >mirror_Ptr      defl    $
1595+ E2AC             >
1595+ E2AC 31 25       >                dw      Dict_Ptr + 2        // xt
1595+ E2AE             >Heap_Ptr        defl    $ - $E000           // save current HP
1595+ E2AE             >
1595+ E2AE             >Current_HP      defl  $ - $E000             // used to set HP once!
1595+ E2AE             >
1595+ E2AE             >//              ______________________________________________________________________
1595+ E2AE             >//              Dictionary part
1595+ E2AE             >
1595+ E2AE             >                org     Dict_Ptr
1595+ 252F             >
1595+ 252F AC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1595+ 2531             >
1595+ 2531             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1595+ 2531 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1595+ 2531 ~           >
1595+ 2531 ~           >
1595+ 2531             >                endif           ; ok        // for other definitions it "points" the correct handler
1595+ 2531             >                // Use of "; ok" to suppress "warning[fwdref]"
1595+ 2531             >
1595+ 2531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1596+ 2531              Two_Plus:
1597+ 2531 E1                           pop     hl
1598+ 2532 23                           inc     hl
1599+ 2533 23                           inc     hl
1600+ 2534
1601+ 2534                              psh1
1601+ 2534 E5          >                push    hl
1601+ 2535 DD E9       >                jp      (ix)
1602+ 2537
1603+ 2537              //  ______________________________________________________________________
1604+ 2537              //
1605+ 2537              // cell+        a1 -- a2
1606+ 2537              // increment by 2 top of stack
1607+ 2537                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1607+ 2537             >
1607+ 2537             >Dict_Ptr        defl    $
1607+ 2537             >
1607+ 2537             >//              ______________________________________________________________________
1607+ 2537             >//              Heap part
1607+ 2537             >
1607+ 2537             >
1607+ 2537             >                org     (Heap_Ptr & $1FFF) + $E000
1607+ E2AE             >
1607+ E2AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1607+ E2AE             >Latest_Definition defl  Heap_Ptr
1607+ E2AE             >
1607+ E2AE             >                // dummy db directives used to calculate length of namec
1607+ E2AE 43 45 4C 4C >                db      "CELL+"
1607+ E2B2 2B          >
1607+ E2B3             >len_NFA         defl    $ - temp_NFA
1607+ E2B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1607+ E2AE             >
1607+ E2AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1607+ E2AF 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1607+ E2B3 2B          >
1607+ E2B4             >                org     $-1                 // alter last byte of Name just above to set
1607+ E2B3 AB          >                db      {b $} | END_BIT     // msb as name end
1607+ E2B4             >
1607+ E2B4 A7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1607+ E2B6             >Prev_Ptr        defl    Heap_Ptr
1607+ E2B6             >
1607+ E2B6             >mirror_Ptr      defl    $
1607+ E2B6             >
1607+ E2B6 39 25       >                dw      Dict_Ptr + 2        // xt
1607+ E2B8             >Heap_Ptr        defl    $ - $E000           // save current HP
1607+ E2B8             >
1607+ E2B8             >Current_HP      defl  $ - $E000             // used to set HP once!
1607+ E2B8             >
1607+ E2B8             >//              ______________________________________________________________________
1607+ E2B8             >//              Dictionary part
1607+ E2B8             >
1607+ E2B8             >                org     Dict_Ptr
1607+ 2537             >
1607+ 2537 B6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1607+ 2539             >
1607+ 2539             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1607+ 2539 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1607+ 2539 ~           >
1607+ 2539 ~           >
1607+ 2539             >                endif           ; ok        // for other definitions it "points" the correct handler
1607+ 2539             >                // Use of "; ok" to suppress "warning[fwdref]"
1607+ 2539             >
1607+ 2539             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1608+ 2539 18 F6                        jr      Two_Plus
1609+ 253B
1610+ 253B              //  ______________________________________________________________________
1611+ 253B              //
1612+ 253B              // align        a1 -- a2
1613+ 253B              // align memory : not used
1614+ 253B              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1615+ 253B              //            next
1616+ 253B
1617+ 253B              //  ______________________________________________________________________
1618+ 253B              //
1619+ 253B              // cell-        a1 -- a2
1620+ 253B              // decrement by 2 top of stack
1621+ 253B                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1621+ 253B             >
1621+ 253B             >Dict_Ptr        defl    $
1621+ 253B             >
1621+ 253B             >//              ______________________________________________________________________
1621+ 253B             >//              Heap part
1621+ 253B             >
1621+ 253B             >
1621+ 253B             >                org     (Heap_Ptr & $1FFF) + $E000
1621+ E2B8             >
1621+ E2B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1621+ E2B8             >Latest_Definition defl  Heap_Ptr
1621+ E2B8             >
1621+ E2B8             >                // dummy db directives used to calculate length of namec
1621+ E2B8 43 45 4C 4C >                db      "CELL-"
1621+ E2BC 2D          >
1621+ E2BD             >len_NFA         defl    $ - temp_NFA
1621+ E2BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1621+ E2B8             >
1621+ E2B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1621+ E2B9 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1621+ E2BD 2D          >
1621+ E2BE             >                org     $-1                 // alter last byte of Name just above to set
1621+ E2BD AD          >                db      {b $} | END_BIT     // msb as name end
1621+ E2BE             >
1621+ E2BE AE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1621+ E2C0             >Prev_Ptr        defl    Heap_Ptr
1621+ E2C0             >
1621+ E2C0             >mirror_Ptr      defl    $
1621+ E2C0             >
1621+ E2C0 3D 25       >                dw      Dict_Ptr + 2        // xt
1621+ E2C2             >Heap_Ptr        defl    $ - $E000           // save current HP
1621+ E2C2             >
1621+ E2C2             >Current_HP      defl  $ - $E000             // used to set HP once!
1621+ E2C2             >
1621+ E2C2             >//              ______________________________________________________________________
1621+ E2C2             >//              Dictionary part
1621+ E2C2             >
1621+ E2C2             >                org     Dict_Ptr
1621+ 253B             >
1621+ 253B C0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1621+ 253D             >
1621+ 253D             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1621+ 253D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1621+ 253D ~           >
1621+ 253D ~           >
1621+ 253D             >                endif           ; ok        // for other definitions it "points" the correct handler
1621+ 253D             >                // Use of "; ok" to suppress "warning[fwdref]"
1621+ 253D             >
1621+ 253D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1622+ 253D              CellMinus:
1623+ 253D E1                           pop     hl
1624+ 253E 2B                           dec     hl
1625+ 253F 2B                           dec     hl
1626+ 2540
1627+ 2540                              psh1
1627+ 2540 E5          >                push    hl
1627+ 2541 DD E9       >                jp      (ix)
1628+ 2543
1629+ 2543              //  ______________________________________________________________________
1630+ 2543              //
1631+ 2543              // 2-           a1 -- a2
1632+ 2543              // decrement by 2 top of stack
1633+ 2543                              New_Def TWO_MINUS, "2-", is_code, is_normal
1633+ 2543             >
1633+ 2543             >Dict_Ptr        defl    $
1633+ 2543             >
1633+ 2543             >//              ______________________________________________________________________
1633+ 2543             >//              Heap part
1633+ 2543             >
1633+ 2543             >
1633+ 2543             >                org     (Heap_Ptr & $1FFF) + $E000
1633+ E2C2             >
1633+ E2C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1633+ E2C2             >Latest_Definition defl  Heap_Ptr
1633+ E2C2             >
1633+ E2C2             >                // dummy db directives used to calculate length of namec
1633+ E2C2 32 2D       >                db      "2-"
1633+ E2C4             >len_NFA         defl    $ - temp_NFA
1633+ E2C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1633+ E2C2             >
1633+ E2C2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1633+ E2C3 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1633+ E2C5             >                org     $-1                 // alter last byte of Name just above to set
1633+ E2C4 AD          >                db      {b $} | END_BIT     // msb as name end
1633+ E2C5             >
1633+ E2C5 B8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1633+ E2C7             >Prev_Ptr        defl    Heap_Ptr
1633+ E2C7             >
1633+ E2C7             >mirror_Ptr      defl    $
1633+ E2C7             >
1633+ E2C7 45 25       >                dw      Dict_Ptr + 2        // xt
1633+ E2C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1633+ E2C9             >
1633+ E2C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1633+ E2C9             >
1633+ E2C9             >//              ______________________________________________________________________
1633+ E2C9             >//              Dictionary part
1633+ E2C9             >
1633+ E2C9             >                org     Dict_Ptr
1633+ 2543             >
1633+ 2543 C7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1633+ 2545             >
1633+ 2545             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1633+ 2545 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1633+ 2545 ~           >
1633+ 2545 ~           >
1633+ 2545             >                endif           ; ok        // for other definitions it "points" the correct handler
1633+ 2545             >                // Use of "; ok" to suppress "warning[fwdref]"
1633+ 2545             >
1633+ 2545             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1634+ 2545 C3 3D 25                     jp      CellMinus
1635+ 2548
1636+ 2548              //  ______________________________________________________________________
1637+ 2548              //
1638+ 2548              // negate       n1 -- n2
1639+ 2548              // change the sign of number
1640+ 2548                              New_Def MINUS, "NEGATE", is_code, is_normal
1640+ 2548             >
1640+ 2548             >Dict_Ptr        defl    $
1640+ 2548             >
1640+ 2548             >//              ______________________________________________________________________
1640+ 2548             >//              Heap part
1640+ 2548             >
1640+ 2548             >
1640+ 2548             >                org     (Heap_Ptr & $1FFF) + $E000
1640+ E2C9             >
1640+ E2C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1640+ E2C9             >Latest_Definition defl  Heap_Ptr
1640+ E2C9             >
1640+ E2C9             >                // dummy db directives used to calculate length of namec
1640+ E2C9 4E 45 47 41 >                db      "NEGATE"
1640+ E2CD 54 45       >
1640+ E2CF             >len_NFA         defl    $ - temp_NFA
1640+ E2CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1640+ E2C9             >
1640+ E2C9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1640+ E2CA 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1640+ E2CE 54 45       >
1640+ E2D0             >                org     $-1                 // alter last byte of Name just above to set
1640+ E2CF C5          >                db      {b $} | END_BIT     // msb as name end
1640+ E2D0             >
1640+ E2D0 C2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1640+ E2D2             >Prev_Ptr        defl    Heap_Ptr
1640+ E2D2             >
1640+ E2D2             >mirror_Ptr      defl    $
1640+ E2D2             >
1640+ E2D2 4A 25       >                dw      Dict_Ptr + 2        // xt
1640+ E2D4             >Heap_Ptr        defl    $ - $E000           // save current HP
1640+ E2D4             >
1640+ E2D4             >Current_HP      defl  $ - $E000             // used to set HP once!
1640+ E2D4             >
1640+ E2D4             >//              ______________________________________________________________________
1640+ E2D4             >//              Dictionary part
1640+ E2D4             >
1640+ E2D4             >                org     Dict_Ptr
1640+ 2548             >
1640+ 2548 D2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1640+ 254A             >
1640+ 254A             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1640+ 254A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1640+ 254A ~           >
1640+ 254A ~           >
1640+ 254A             >                endif           ; ok        // for other definitions it "points" the correct handler
1640+ 254A             >                // Use of "; ok" to suppress "warning[fwdref]"
1640+ 254A             >
1640+ 254A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1641+ 254A D9                           exx
1642+ 254B D1                           pop     de
1643+ 254C AF                           xor     a
1644+ 254D              Negate_Ptr:
1645+ 254D 67                           ld      h, a
1646+ 254E 6F                           ld      l, a
1647+ 254F ED 52                        sbc     hl, de
1648+ 2551 E5                           push    hl
1649+ 2552 D9                           exx
1650+ 2553                              next
1650+ 2553 DD E9       >                jp      (ix)
1651+ 2555
1652+ 2555              //  ______________________________________________________________________
1653+ 2555              //
1654+ 2555              // dnegate      d1 -- d2
1655+ 2555              // change the sign of a double number
1656+ 2555                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1656+ 2555             >
1656+ 2555             >Dict_Ptr        defl    $
1656+ 2555             >
1656+ 2555             >//              ______________________________________________________________________
1656+ 2555             >//              Heap part
1656+ 2555             >
1656+ 2555             >
1656+ 2555             >                org     (Heap_Ptr & $1FFF) + $E000
1656+ E2D4             >
1656+ E2D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1656+ E2D4             >Latest_Definition defl  Heap_Ptr
1656+ E2D4             >
1656+ E2D4             >                // dummy db directives used to calculate length of namec
1656+ E2D4 44 4E 45 47 >                db      "DNEGATE"
1656+ E2D8 41 54 45    >
1656+ E2DB             >len_NFA         defl    $ - temp_NFA
1656+ E2DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1656+ E2D4             >
1656+ E2D4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1656+ E2D5 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1656+ E2D9 41 54 45    >
1656+ E2DC             >                org     $-1                 // alter last byte of Name just above to set
1656+ E2DB C5          >                db      {b $} | END_BIT     // msb as name end
1656+ E2DC             >
1656+ E2DC C9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1656+ E2DE             >Prev_Ptr        defl    Heap_Ptr
1656+ E2DE             >
1656+ E2DE             >mirror_Ptr      defl    $
1656+ E2DE             >
1656+ E2DE 57 25       >                dw      Dict_Ptr + 2        // xt
1656+ E2E0             >Heap_Ptr        defl    $ - $E000           // save current HP
1656+ E2E0             >
1656+ E2E0             >Current_HP      defl  $ - $E000             // used to set HP once!
1656+ E2E0             >
1656+ E2E0             >//              ______________________________________________________________________
1656+ E2E0             >//              Dictionary part
1656+ E2E0             >
1656+ E2E0             >                org     Dict_Ptr
1656+ 2555             >
1656+ 2555 DE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1656+ 2557             >
1656+ 2557             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1656+ 2557 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1656+ 2557 ~           >
1656+ 2557 ~           >
1656+ 2557             >                endif           ; ok        // for other definitions it "points" the correct handler
1656+ 2557             >                // Use of "; ok" to suppress "warning[fwdref]"
1656+ 2557             >
1656+ 2557             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1657+ 2557 D9                           exx
1658+ 2558 D1                           pop     de                  // d1.H
1659+ 2559 C1                           pop     bc                  // d1.L
1660+ 255A AF                           xor     a
1661+ 255B 67                           ld      h, a
1662+ 255C 6F                           ld      l, a
1663+ 255D ED 42                        sbc     hl, bc              // subtact from zero
1664+ 255F E5                           push    hl                  // > d2-L
1665+ 2560
1666+ 2560 18 EB                        jr      Negate_Ptr
1667+ 2562              //              ld      h, a
1668+ 2562              //              ld      l, a
1669+ 2562              //              sbc     hl, de              // subtract from zero with carry
1670+ 2562                                                          // > d2-H
1671+ 2562              //              push    hl
1672+ 2562              //              exx
1673+ 2562              //              next
1674+ 2562
1675+ 2562              //  ______________________________________________________________________
1676+ 2562              //
1677+ 2562              // over         n1 n2 -- n1 n2 n1
1678+ 2562              // copy the second value of stack and put it on top.
1679+ 2562                              New_Def OVER, "OVER", is_code, is_normal
1679+ 2562             >
1679+ 2562             >Dict_Ptr        defl    $
1679+ 2562             >
1679+ 2562             >//              ______________________________________________________________________
1679+ 2562             >//              Heap part
1679+ 2562             >
1679+ 2562             >
1679+ 2562             >                org     (Heap_Ptr & $1FFF) + $E000
1679+ E2E0             >
1679+ E2E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ E2E0             >Latest_Definition defl  Heap_Ptr
1679+ E2E0             >
1679+ E2E0             >                // dummy db directives used to calculate length of namec
1679+ E2E0 4F 56 45 52 >                db      "OVER"
1679+ E2E4             >len_NFA         defl    $ - temp_NFA
1679+ E2E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ E2E0             >
1679+ E2E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ E2E1 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1679+ E2E5             >                org     $-1                 // alter last byte of Name just above to set
1679+ E2E4 D2          >                db      {b $} | END_BIT     // msb as name end
1679+ E2E5             >
1679+ E2E5 D4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1679+ E2E7             >Prev_Ptr        defl    Heap_Ptr
1679+ E2E7             >
1679+ E2E7             >mirror_Ptr      defl    $
1679+ E2E7             >
1679+ E2E7 64 25       >                dw      Dict_Ptr + 2        // xt
1679+ E2E9             >Heap_Ptr        defl    $ - $E000           // save current HP
1679+ E2E9             >
1679+ E2E9             >Current_HP      defl  $ - $E000             // used to set HP once!
1679+ E2E9             >
1679+ E2E9             >//              ______________________________________________________________________
1679+ E2E9             >//              Dictionary part
1679+ E2E9             >
1679+ E2E9             >                org     Dict_Ptr
1679+ 2562             >
1679+ 2562 E7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1679+ 2564             >
1679+ 2564             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 2564 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1679+ 2564 ~           >
1679+ 2564 ~           >
1679+ 2564             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 2564             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 2564             >
1679+ 2564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 2564                              // exx     // we can use af instead OPTIMIZATION possible
1681+ 2564 F1                           pop     af                  //   n2
1682+ 2565 E1                           pop     hl                  // < n1
1683+ 2566 E5                           push    hl                  // > n1
1684+ 2567 F5                           push    af                  // > n2
1685+ 2568 E5                           push    hl                  // > n1
1686+ 2569                              // exx
1687+ 2569                              next
1687+ 2569 DD E9       >                jp      (ix)
1688+ 256B
1689+ 256B              //  ______________________________________________________________________
1690+ 256B              //
1691+ 256B              // drop         n1 --
1692+ 256B              // drops the top of stack
1693+ 256B                              New_Def DROP, "DROP", is_code, is_normal
1693+ 256B             >
1693+ 256B             >Dict_Ptr        defl    $
1693+ 256B             >
1693+ 256B             >//              ______________________________________________________________________
1693+ 256B             >//              Heap part
1693+ 256B             >
1693+ 256B             >
1693+ 256B             >                org     (Heap_Ptr & $1FFF) + $E000
1693+ E2E9             >
1693+ E2E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1693+ E2E9             >Latest_Definition defl  Heap_Ptr
1693+ E2E9             >
1693+ E2E9             >                // dummy db directives used to calculate length of namec
1693+ E2E9 44 52 4F 50 >                db      "DROP"
1693+ E2ED             >len_NFA         defl    $ - temp_NFA
1693+ E2ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1693+ E2E9             >
1693+ E2E9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1693+ E2EA 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1693+ E2EE             >                org     $-1                 // alter last byte of Name just above to set
1693+ E2ED D0          >                db      {b $} | END_BIT     // msb as name end
1693+ E2EE             >
1693+ E2EE E0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1693+ E2F0             >Prev_Ptr        defl    Heap_Ptr
1693+ E2F0             >
1693+ E2F0             >mirror_Ptr      defl    $
1693+ E2F0             >
1693+ E2F0 6D 25       >                dw      Dict_Ptr + 2        // xt
1693+ E2F2             >Heap_Ptr        defl    $ - $E000           // save current HP
1693+ E2F2             >
1693+ E2F2             >Current_HP      defl  $ - $E000             // used to set HP once!
1693+ E2F2             >
1693+ E2F2             >//              ______________________________________________________________________
1693+ E2F2             >//              Dictionary part
1693+ E2F2             >
1693+ E2F2             >                org     Dict_Ptr
1693+ 256B             >
1693+ 256B F0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1693+ 256D             >
1693+ 256D             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1693+ 256D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1693+ 256D ~           >
1693+ 256D ~           >
1693+ 256D             >                endif           ; ok        // for other definitions it "points" the correct handler
1693+ 256D             >                // Use of "; ok" to suppress "warning[fwdref]"
1693+ 256D             >
1693+ 256D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1694+ 256D E1                           pop     hl                  // < n1 and discard previous TOS
1695+ 256E                              next
1695+ 256E DD E9       >                jp      (ix)
1696+ 2570
1697+ 2570              //  ______________________________________________________________________
1698+ 2570              //
1699+ 2570              // nip          n1 n2 -- n2
1700+ 2570              // drops the second elemento on the stack
1701+ 2570                              New_Def NIP, "NIP", is_code, is_normal
1701+ 2570             >
1701+ 2570             >Dict_Ptr        defl    $
1701+ 2570             >
1701+ 2570             >//              ______________________________________________________________________
1701+ 2570             >//              Heap part
1701+ 2570             >
1701+ 2570             >
1701+ 2570             >                org     (Heap_Ptr & $1FFF) + $E000
1701+ E2F2             >
1701+ E2F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1701+ E2F2             >Latest_Definition defl  Heap_Ptr
1701+ E2F2             >
1701+ E2F2             >                // dummy db directives used to calculate length of namec
1701+ E2F2 4E 49 50    >                db      "NIP"
1701+ E2F5             >len_NFA         defl    $ - temp_NFA
1701+ E2F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1701+ E2F2             >
1701+ E2F2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1701+ E2F3 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1701+ E2F6             >                org     $-1                 // alter last byte of Name just above to set
1701+ E2F5 D0          >                db      {b $} | END_BIT     // msb as name end
1701+ E2F6             >
1701+ E2F6 E9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1701+ E2F8             >Prev_Ptr        defl    Heap_Ptr
1701+ E2F8             >
1701+ E2F8             >mirror_Ptr      defl    $
1701+ E2F8             >
1701+ E2F8 72 25       >                dw      Dict_Ptr + 2        // xt
1701+ E2FA             >Heap_Ptr        defl    $ - $E000           // save current HP
1701+ E2FA             >
1701+ E2FA             >Current_HP      defl  $ - $E000             // used to set HP once!
1701+ E2FA             >
1701+ E2FA             >//              ______________________________________________________________________
1701+ E2FA             >//              Dictionary part
1701+ E2FA             >
1701+ E2FA             >                org     Dict_Ptr
1701+ 2570             >
1701+ 2570 F8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1701+ 2572             >
1701+ 2572             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1701+ 2572 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1701+ 2572 ~           >
1701+ 2572 ~           >
1701+ 2572             >                endif           ; ok        // for other definitions it "points" the correct handler
1701+ 2572             >                // Use of "; ok" to suppress "warning[fwdref]"
1701+ 2572             >
1701+ 2572             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1702+ 2572
1703+ 2572 E1                           pop     hl                  // < n1 discarded
1704+ 2573 E3                           ex      (sp), hl
1705+ 2574                              next
1705+ 2574 DD E9       >                jp      (ix)
1706+ 2576
1707+ 2576              //  ______________________________________________________________________
1708+ 2576              //
1709+ 2576              // tuck         n1 n2 -- n2 n1 n2
1710+ 2576              // copy the top element after the second.
1711+ 2576                              New_Def TUCK, "TUCK", is_code, is_normal
1711+ 2576             >
1711+ 2576             >Dict_Ptr        defl    $
1711+ 2576             >
1711+ 2576             >//              ______________________________________________________________________
1711+ 2576             >//              Heap part
1711+ 2576             >
1711+ 2576             >
1711+ 2576             >                org     (Heap_Ptr & $1FFF) + $E000
1711+ E2FA             >
1711+ E2FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1711+ E2FA             >Latest_Definition defl  Heap_Ptr
1711+ E2FA             >
1711+ E2FA             >                // dummy db directives used to calculate length of namec
1711+ E2FA 54 55 43 4B >                db      "TUCK"
1711+ E2FE             >len_NFA         defl    $ - temp_NFA
1711+ E2FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1711+ E2FA             >
1711+ E2FA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1711+ E2FB 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1711+ E2FF             >                org     $-1                 // alter last byte of Name just above to set
1711+ E2FE CB          >                db      {b $} | END_BIT     // msb as name end
1711+ E2FF             >
1711+ E2FF F2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1711+ E301             >Prev_Ptr        defl    Heap_Ptr
1711+ E301             >
1711+ E301             >mirror_Ptr      defl    $
1711+ E301             >
1711+ E301 78 25       >                dw      Dict_Ptr + 2        // xt
1711+ E303             >Heap_Ptr        defl    $ - $E000           // save current HP
1711+ E303             >
1711+ E303             >Current_HP      defl  $ - $E000             // used to set HP once!
1711+ E303             >
1711+ E303             >//              ______________________________________________________________________
1711+ E303             >//              Dictionary part
1711+ E303             >
1711+ E303             >                org     Dict_Ptr
1711+ 2576             >
1711+ 2576 01 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1711+ 2578             >
1711+ 2578             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1711+ 2578 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1711+ 2578 ~           >
1711+ 2578 ~           >
1711+ 2578             >                endif           ; ok        // for other definitions it "points" the correct handler
1711+ 2578             >                // Use of "; ok" to suppress "warning[fwdref]"
1711+ 2578             >
1711+ 2578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1712+ 2578 E1                           pop     hl
1713+ 2579 F1                           pop     af                  // < n1
1714+ 257A E5                           push    hl                  // > n2  and TOS
1715+ 257B F5                           push    af                  // > n1
1716+ 257C E5                           push    hl
1717+ 257D                              next
1717+ 257D DD E9       >                jp      (ix)
1718+ 257F
1719+ 257F              //  ______________________________________________________________________
1720+ 257F              //
1721+ 257F              // swap         n1 n2 -- n2 n1
1722+ 257F              // swaps the two values on top of stack
1723+ 257F                              New_Def SWAP, "SWAP", is_code, is_normal
1723+ 257F             >
1723+ 257F             >Dict_Ptr        defl    $
1723+ 257F             >
1723+ 257F             >//              ______________________________________________________________________
1723+ 257F             >//              Heap part
1723+ 257F             >
1723+ 257F             >
1723+ 257F             >                org     (Heap_Ptr & $1FFF) + $E000
1723+ E303             >
1723+ E303             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1723+ E303             >Latest_Definition defl  Heap_Ptr
1723+ E303             >
1723+ E303             >                // dummy db directives used to calculate length of namec
1723+ E303 53 57 41 50 >                db      "SWAP"
1723+ E307             >len_NFA         defl    $ - temp_NFA
1723+ E307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1723+ E303             >
1723+ E303 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1723+ E304 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1723+ E308             >                org     $-1                 // alter last byte of Name just above to set
1723+ E307 D0          >                db      {b $} | END_BIT     // msb as name end
1723+ E308             >
1723+ E308 FA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1723+ E30A             >Prev_Ptr        defl    Heap_Ptr
1723+ E30A             >
1723+ E30A             >mirror_Ptr      defl    $
1723+ E30A             >
1723+ E30A 81 25       >                dw      Dict_Ptr + 2        // xt
1723+ E30C             >Heap_Ptr        defl    $ - $E000           // save current HP
1723+ E30C             >
1723+ E30C             >Current_HP      defl  $ - $E000             // used to set HP once!
1723+ E30C             >
1723+ E30C             >//              ______________________________________________________________________
1723+ E30C             >//              Dictionary part
1723+ E30C             >
1723+ E30C             >                org     Dict_Ptr
1723+ 257F             >
1723+ 257F 0A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1723+ 2581             >
1723+ 2581             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1723+ 2581 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1723+ 2581 ~           >
1723+ 2581 ~           >
1723+ 2581             >                endif           ; ok        // for other definitions it "points" the correct handler
1723+ 2581             >                // Use of "; ok" to suppress "warning[fwdref]"
1723+ 2581             >
1723+ 2581             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1724+ 2581 E1                           pop     hl                  // < n1
1725+ 2582 E3                           ex      (sp),hl             // > n2
1726+ 2583 E5                           push    hl                  // copy n1 to TOS
1727+ 2584                              next
1727+ 2584 DD E9       >                jp      (ix)
1728+ 2586
1729+ 2586              //  ______________________________________________________________________
1730+ 2586              //
1731+ 2586              // dup         n -- n n
1732+ 2586              // duplicates the top value of stack
1733+ 2586                              New_Def DUP, "DUP", is_code, is_normal
1733+ 2586             >
1733+ 2586             >Dict_Ptr        defl    $
1733+ 2586             >
1733+ 2586             >//              ______________________________________________________________________
1733+ 2586             >//              Heap part
1733+ 2586             >
1733+ 2586             >
1733+ 2586             >                org     (Heap_Ptr & $1FFF) + $E000
1733+ E30C             >
1733+ E30C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1733+ E30C             >Latest_Definition defl  Heap_Ptr
1733+ E30C             >
1733+ E30C             >                // dummy db directives used to calculate length of namec
1733+ E30C 44 55 50    >                db      "DUP"
1733+ E30F             >len_NFA         defl    $ - temp_NFA
1733+ E30F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1733+ E30C             >
1733+ E30C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1733+ E30D 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1733+ E310             >                org     $-1                 // alter last byte of Name just above to set
1733+ E30F D0          >                db      {b $} | END_BIT     // msb as name end
1733+ E310             >
1733+ E310 03 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1733+ E312             >Prev_Ptr        defl    Heap_Ptr
1733+ E312             >
1733+ E312             >mirror_Ptr      defl    $
1733+ E312             >
1733+ E312 88 25       >                dw      Dict_Ptr + 2        // xt
1733+ E314             >Heap_Ptr        defl    $ - $E000           // save current HP
1733+ E314             >
1733+ E314             >Current_HP      defl  $ - $E000             // used to set HP once!
1733+ E314             >
1733+ E314             >//              ______________________________________________________________________
1733+ E314             >//              Dictionary part
1733+ E314             >
1733+ E314             >                org     Dict_Ptr
1733+ 2586             >
1733+ 2586 12 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1733+ 2588             >
1733+ 2588             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1733+ 2588 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1733+ 2588 ~           >
1733+ 2588 ~           >
1733+ 2588             >                endif           ; ok        // for other definitions it "points" the correct handler
1733+ 2588             >                // Use of "; ok" to suppress "warning[fwdref]"
1733+ 2588             >
1733+ 2588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1734+ 2588 E1                           pop     hl
1735+ 2589 E5                           push    hl                  // > n duplicate TOS
1736+ 258A E5                           push    hl
1737+ 258B                              next
1737+ 258B DD E9       >                jp      (ix)
1738+ 258D
1739+ 258D              //  ______________________________________________________________________
1740+ 258D              //
1741+ 258D              // rot         n1 n2 n3 -- n2 n3 n1
1742+ 258D              // Rotates the 3 top values of stack by picking the 3rd in access-order
1743+ 258D              // and putting it on top. The other two are shifted down one place.
1744+ 258D                              New_Def ROT, "ROT", is_code, is_normal
1744+ 258D             >
1744+ 258D             >Dict_Ptr        defl    $
1744+ 258D             >
1744+ 258D             >//              ______________________________________________________________________
1744+ 258D             >//              Heap part
1744+ 258D             >
1744+ 258D             >
1744+ 258D             >                org     (Heap_Ptr & $1FFF) + $E000
1744+ E314             >
1744+ E314             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1744+ E314             >Latest_Definition defl  Heap_Ptr
1744+ E314             >
1744+ E314             >                // dummy db directives used to calculate length of namec
1744+ E314 52 4F 54    >                db      "ROT"
1744+ E317             >len_NFA         defl    $ - temp_NFA
1744+ E317             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1744+ E314             >
1744+ E314 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1744+ E315 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1744+ E318             >                org     $-1                 // alter last byte of Name just above to set
1744+ E317 D4          >                db      {b $} | END_BIT     // msb as name end
1744+ E318             >
1744+ E318 0C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1744+ E31A             >Prev_Ptr        defl    Heap_Ptr
1744+ E31A             >
1744+ E31A             >mirror_Ptr      defl    $
1744+ E31A             >
1744+ E31A 8F 25       >                dw      Dict_Ptr + 2        // xt
1744+ E31C             >Heap_Ptr        defl    $ - $E000           // save current HP
1744+ E31C             >
1744+ E31C             >Current_HP      defl  $ - $E000             // used to set HP once!
1744+ E31C             >
1744+ E31C             >//              ______________________________________________________________________
1744+ E31C             >//              Dictionary part
1744+ E31C             >
1744+ E31C             >                org     Dict_Ptr
1744+ 258D             >
1744+ 258D 1A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1744+ 258F             >
1744+ 258F             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1744+ 258F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1744+ 258F ~           >
1744+ 258F ~           >
1744+ 258F             >                endif           ; ok        // for other definitions it "points" the correct handler
1744+ 258F             >                // Use of "; ok" to suppress "warning[fwdref]"
1744+ 258F             >
1744+ 258F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1745+ 258F                          //  exx
1746+ 258F F1                           pop     af                  // < n3
1747+ 2590 E1                           pop     hl                  // < n2
1748+ 2591 E3                           ex      (sp),hl             // > n2 < n1
1749+ 2592 F5                           push    af                  // > n3
1750+ 2593 E5                           push    hl                  // copy n1 to TOS
1751+ 2594                          //  exx
1752+ 2594                              next
1752+ 2594 DD E9       >                jp      (ix)
1753+ 2596
1754+ 2596              //  ______________________________________________________________________
1755+ 2596              //
1756+ 2596              // -rot         n1 n2 n3 -- n3 n1 n2
1757+ 2596              // Rotates the 3 top values of stack by picking the 1st in access-order
1758+ 2596              // and putting back to 3rd place. The other two are shifted down one place.
1759+ 2596                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1759+ 2596             >
1759+ 2596             >Dict_Ptr        defl    $
1759+ 2596             >
1759+ 2596             >//              ______________________________________________________________________
1759+ 2596             >//              Heap part
1759+ 2596             >
1759+ 2596             >
1759+ 2596             >                org     (Heap_Ptr & $1FFF) + $E000
1759+ E31C             >
1759+ E31C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1759+ E31C             >Latest_Definition defl  Heap_Ptr
1759+ E31C             >
1759+ E31C             >                // dummy db directives used to calculate length of namec
1759+ E31C 2D 52 4F 54 >                db      "-ROT"
1759+ E320             >len_NFA         defl    $ - temp_NFA
1759+ E320             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1759+ E31C             >
1759+ E31C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1759+ E31D 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1759+ E321             >                org     $-1                 // alter last byte of Name just above to set
1759+ E320 D4          >                db      {b $} | END_BIT     // msb as name end
1759+ E321             >
1759+ E321 14 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1759+ E323             >Prev_Ptr        defl    Heap_Ptr
1759+ E323             >
1759+ E323             >mirror_Ptr      defl    $
1759+ E323             >
1759+ E323 98 25       >                dw      Dict_Ptr + 2        // xt
1759+ E325             >Heap_Ptr        defl    $ - $E000           // save current HP
1759+ E325             >
1759+ E325             >Current_HP      defl  $ - $E000             // used to set HP once!
1759+ E325             >
1759+ E325             >//              ______________________________________________________________________
1759+ E325             >//              Dictionary part
1759+ E325             >
1759+ E325             >                org     Dict_Ptr
1759+ 2596             >
1759+ 2596 23 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1759+ 2598             >
1759+ 2598             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1759+ 2598 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1759+ 2598 ~           >
1759+ 2598 ~           >
1759+ 2598             >                endif           ; ok        // for other definitions it "points" the correct handler
1759+ 2598             >                // Use of "; ok" to suppress "warning[fwdref]"
1759+ 2598             >
1759+ 2598             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1760+ 2598                          //  exx
1761+ 2598 E1                           pop     hl                  // < n3
1762+ 2599 F1                           pop     af                  // < n2
1763+ 259A E3                           ex      (sp),hl             // > n3 < n1
1764+ 259B E5                           push    hl                  // > n1
1765+ 259C F5                           push    af                  // copy n3 to TOS
1766+ 259D                          //  exx
1767+ 259D                              next
1767+ 259D DD E9       >                jp      (ix)
1768+ 259F
1769+ 259F              //  ______________________________________________________________________
1770+ 259F              //
1771+ 259F              // pick        n1 -- nx
1772+ 259F              // picks the nth element from TOS
1773+ 259F                              New_Def PICK, "PICK", is_code, is_normal
1773+ 259F             >
1773+ 259F             >Dict_Ptr        defl    $
1773+ 259F             >
1773+ 259F             >//              ______________________________________________________________________
1773+ 259F             >//              Heap part
1773+ 259F             >
1773+ 259F             >
1773+ 259F             >                org     (Heap_Ptr & $1FFF) + $E000
1773+ E325             >
1773+ E325             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1773+ E325             >Latest_Definition defl  Heap_Ptr
1773+ E325             >
1773+ E325             >                // dummy db directives used to calculate length of namec
1773+ E325 50 49 43 4B >                db      "PICK"
1773+ E329             >len_NFA         defl    $ - temp_NFA
1773+ E329             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1773+ E325             >
1773+ E325 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1773+ E326 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1773+ E32A             >                org     $-1                 // alter last byte of Name just above to set
1773+ E329 CB          >                db      {b $} | END_BIT     // msb as name end
1773+ E32A             >
1773+ E32A 1C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1773+ E32C             >Prev_Ptr        defl    Heap_Ptr
1773+ E32C             >
1773+ E32C             >mirror_Ptr      defl    $
1773+ E32C             >
1773+ E32C A1 25       >                dw      Dict_Ptr + 2        // xt
1773+ E32E             >Heap_Ptr        defl    $ - $E000           // save current HP
1773+ E32E             >
1773+ E32E             >Current_HP      defl  $ - $E000             // used to set HP once!
1773+ E32E             >
1773+ E32E             >//              ______________________________________________________________________
1773+ E32E             >//              Dictionary part
1773+ E32E             >
1773+ E32E             >                org     Dict_Ptr
1773+ 259F             >
1773+ 259F 2C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1773+ 25A1             >
1773+ 25A1             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1773+ 25A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1773+ 25A1 ~           >
1773+ 25A1 ~           >
1773+ 25A1             >                endif           ; ok        // for other definitions it "points" the correct handler
1773+ 25A1             >                // Use of "; ok" to suppress "warning[fwdref]"
1773+ 25A1             >
1773+ 25A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1774+ 25A1 E1                           pop     hl                  // take TOS as index
1775+ 25A2 29                           add     hl, hl              // as cells
1776+ 25A3 39                           add     hl, sp              // from Stack Pointer
1777+ 25A4 7E                           ld      a, (hl)             // replace TOS
1778+ 25A5 23                           inc     hl
1779+ 25A6 66                           ld      h, (hl)
1780+ 25A7 6F                           ld      l, a
1781+ 25A8 E5                           push    hl
1782+ 25A9                              next
1782+ 25A9 DD E9       >                jp      (ix)
1783+ 25AB
1784+ 25AB
1785+ 25AB              //  ______________________________________________________________________
1786+ 25AB              //
1787+ 25AB              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1788+ 25AB              // picks the nth element from TOS
1789+ 25AB              //              New_Def ROLL, "ROLL", is_code, is_normal
1790+ 25AB              //              exx                     // we need all registers free
1791+ 25AB              //              pop     hl              // number of cells to roll
1792+ 25AB              //              ld      a, h
1793+ 25AB              //              or       l
1794+ 25AB              //              jr      z, Roll_Zero
1795+ 25AB              //                  add     hl, hl              // number of bytes to move
1796+ 25AB              //                  ld      b, h
1797+ 25AB              //                  ld      c, l
1798+ 25AB              //                  add     hl, sp          // address of n1
1799+ 25AB              //                  ld      a, (hl)         // take n1 into a and a,
1800+ 25AB              //                  inc     hl
1801+ 25AB              //                  ex      af, af'
1802+ 25AB              //                  ld      a, (hl)         // take n1 into a and a,
1803+ 25AB              //                  ld      d, h
1804+ 25AB              //                  ld      e, l
1805+ 25AB              //                  dec     hl
1806+ 25AB              //                  dec     hl
1807+ 25AB              //                  lddr
1808+ 25AB              //                  ex      de, hl
1809+ 25AB              //                  ld      (hl), a
1810+ 25AB              //                  dec     hl
1811+ 25AB              //                  ex      af, af'
1812+ 25AB              //                  ld      (hl), a
1813+ 25AB              //Roll_Zero:
1814+ 25AB              //              exx
1815+ 25AB              //              next
1816+ 25AB
1817+ 25AB
1818+ 25AB              //  ______________________________________________________________________
1819+ 25AB              //
1820+ 25AB              // 2over        d1 d2 -- d1 d2 d1
1821+ 25AB              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1822+ 25AB              // copy the second double of stack and put on top.
1823+ 25AB                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1823+ 25AB             >
1823+ 25AB             >Dict_Ptr        defl    $
1823+ 25AB             >
1823+ 25AB             >//              ______________________________________________________________________
1823+ 25AB             >//              Heap part
1823+ 25AB             >
1823+ 25AB             >
1823+ 25AB             >                org     (Heap_Ptr & $1FFF) + $E000
1823+ E32E             >
1823+ E32E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1823+ E32E             >Latest_Definition defl  Heap_Ptr
1823+ E32E             >
1823+ E32E             >                // dummy db directives used to calculate length of namec
1823+ E32E 32 4F 56 45 >                db      "2OVER"
1823+ E332 52          >
1823+ E333             >len_NFA         defl    $ - temp_NFA
1823+ E333             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1823+ E32E             >
1823+ E32E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1823+ E32F 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1823+ E333 52          >
1823+ E334             >                org     $-1                 // alter last byte of Name just above to set
1823+ E333 D2          >                db      {b $} | END_BIT     // msb as name end
1823+ E334             >
1823+ E334 25 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1823+ E336             >Prev_Ptr        defl    Heap_Ptr
1823+ E336             >
1823+ E336             >mirror_Ptr      defl    $
1823+ E336             >
1823+ E336 AD 25       >                dw      Dict_Ptr + 2        // xt
1823+ E338             >Heap_Ptr        defl    $ - $E000           // save current HP
1823+ E338             >
1823+ E338             >Current_HP      defl  $ - $E000             // used to set HP once!
1823+ E338             >
1823+ E338             >//              ______________________________________________________________________
1823+ E338             >//              Dictionary part
1823+ E338             >
1823+ E338             >                org     Dict_Ptr
1823+ 25AB             >
1823+ 25AB 36 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1823+ 25AD             >
1823+ 25AD             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1823+ 25AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1823+ 25AD ~           >
1823+ 25AD ~           >
1823+ 25AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1823+ 25AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1823+ 25AD             >
1823+ 25AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1824+ 25AD D9                           exx
1825+ 25AE E1                           pop     hl      // n4
1826+ 25AF D1                           pop     de      // n3 : d2
1827+ 25B0 C1                           pop     bc      // n2
1828+ 25B1 F1                           pop     af      // n1 : d1
1829+ 25B2 F5                           push    af      // n1
1830+ 25B3 C5                           push    bc      // n2 : d1
1831+ 25B4 D5                           push    de      // n3
1832+ 25B5 E5                           push    hl      // n4 : d2
1833+ 25B6 F5                           push    af      // n1
1834+ 25B7 C5                           push    bc      // n2 : d1
1835+ 25B8 D9                           exx
1836+ 25B9                              next
1836+ 25B9 DD E9       >                jp      (ix)
1837+ 25BB
1838+ 25BB              //  ______________________________________________________________________
1839+ 25BB              //
1840+ 25BB              // 2drop        d --
1841+ 25BB              //              n1 n2 --
1842+ 25BB              // drops the top double from stack
1843+ 25BB                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1843+ 25BB             >
1843+ 25BB             >Dict_Ptr        defl    $
1843+ 25BB             >
1843+ 25BB             >//              ______________________________________________________________________
1843+ 25BB             >//              Heap part
1843+ 25BB             >
1843+ 25BB             >
1843+ 25BB             >                org     (Heap_Ptr & $1FFF) + $E000
1843+ E338             >
1843+ E338             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1843+ E338             >Latest_Definition defl  Heap_Ptr
1843+ E338             >
1843+ E338             >                // dummy db directives used to calculate length of namec
1843+ E338 32 44 52 4F >                db      "2DROP"
1843+ E33C 50          >
1843+ E33D             >len_NFA         defl    $ - temp_NFA
1843+ E33D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1843+ E338             >
1843+ E338 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1843+ E339 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1843+ E33D 50          >
1843+ E33E             >                org     $-1                 // alter last byte of Name just above to set
1843+ E33D D0          >                db      {b $} | END_BIT     // msb as name end
1843+ E33E             >
1843+ E33E 2E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1843+ E340             >Prev_Ptr        defl    Heap_Ptr
1843+ E340             >
1843+ E340             >mirror_Ptr      defl    $
1843+ E340             >
1843+ E340 BD 25       >                dw      Dict_Ptr + 2        // xt
1843+ E342             >Heap_Ptr        defl    $ - $E000           // save current HP
1843+ E342             >
1843+ E342             >Current_HP      defl  $ - $E000             // used to set HP once!
1843+ E342             >
1843+ E342             >//              ______________________________________________________________________
1843+ E342             >//              Dictionary part
1843+ E342             >
1843+ E342             >                org     Dict_Ptr
1843+ 25BB             >
1843+ 25BB 40 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1843+ 25BD             >
1843+ 25BD             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1843+ 25BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1843+ 25BD ~           >
1843+ 25BD ~           >
1843+ 25BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1843+ 25BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1843+ 25BD             >
1843+ 25BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1844+ 25BD E1                           pop     hl
1845+ 25BE E1                           pop     hl
1846+ 25BF                              next
1846+ 25BF DD E9       >                jp      (ix)
1847+ 25C1
1848+ 25C1              //  ______________________________________________________________________
1849+ 25C1              //
1850+ 25C1              // 2nip         d1 d2 -- d2
1851+ 25C1              //              n1 n2 n3 n4 -- n3 n4
1852+ 25C1              // drops the second double on the stack
1853+ 25C1              //              New_Def TWO_NIP, 4, "2nip"
1854+ 25C1              //              ...
1855+ 25C1
1856+ 25C1              //  ______________________________________________________________________
1857+ 25C1              //
1858+ 25C1              // 2tuck         d1 d2 -- d2 d1 d2
1859+ 25C1              // copy the top element after the second.
1860+ 25C1              //              New_Def TWO_TUCK, 5, "2tuck"
1861+ 25C1              //              ...
1862+ 25C1
1863+ 25C1              //  ______________________________________________________________________
1864+ 25C1              //
1865+ 25C1              // 2swap         d1 d2 -- d2 d1
1866+ 25C1              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1867+ 25C1              // swaps the two doubles on top of stack
1868+ 25C1                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1868+ 25C1             >
1868+ 25C1             >Dict_Ptr        defl    $
1868+ 25C1             >
1868+ 25C1             >//              ______________________________________________________________________
1868+ 25C1             >//              Heap part
1868+ 25C1             >
1868+ 25C1             >
1868+ 25C1             >                org     (Heap_Ptr & $1FFF) + $E000
1868+ E342             >
1868+ E342             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1868+ E342             >Latest_Definition defl  Heap_Ptr
1868+ E342             >
1868+ E342             >                // dummy db directives used to calculate length of namec
1868+ E342 32 53 57 41 >                db      "2SWAP"
1868+ E346 50          >
1868+ E347             >len_NFA         defl    $ - temp_NFA
1868+ E347             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1868+ E342             >
1868+ E342 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1868+ E343 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1868+ E347 50          >
1868+ E348             >                org     $-1                 // alter last byte of Name just above to set
1868+ E347 D0          >                db      {b $} | END_BIT     // msb as name end
1868+ E348             >
1868+ E348 38 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1868+ E34A             >Prev_Ptr        defl    Heap_Ptr
1868+ E34A             >
1868+ E34A             >mirror_Ptr      defl    $
1868+ E34A             >
1868+ E34A C3 25       >                dw      Dict_Ptr + 2        // xt
1868+ E34C             >Heap_Ptr        defl    $ - $E000           // save current HP
1868+ E34C             >
1868+ E34C             >Current_HP      defl  $ - $E000             // used to set HP once!
1868+ E34C             >
1868+ E34C             >//              ______________________________________________________________________
1868+ E34C             >//              Dictionary part
1868+ E34C             >
1868+ E34C             >                org     Dict_Ptr
1868+ 25C1             >
1868+ 25C1 4A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1868+ 25C3             >
1868+ 25C3             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1868+ 25C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1868+ 25C3 ~           >
1868+ 25C3 ~           >
1868+ 25C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1868+ 25C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1868+ 25C3             >
1868+ 25C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1869+ 25C3 D9                           exx
1870+ 25C4 F1                           pop     af                  // < d2-H
1871+ 25C5 E1                           pop     hl                  // < d2-L
1872+ 25C6 D1                           pop     de                  // < d1-H
1873+ 25C7 E3                           ex      (sp), hl            // < d1-L > d2-L
1874+ 25C8 F5                           push    af                  //        > d2-H
1875+ 25C9 E5                           push    hl                  //        > d1-L
1876+ 25CA D5                           push    de                  //        > d1-H
1877+ 25CB D9                           exx
1878+ 25CC                              next
1878+ 25CC DD E9       >                jp      (ix)
1879+ 25CE
1880+ 25CE              //  ______________________________________________________________________
1881+ 25CE              //
1882+ 25CE              // 2dup         d -- d d
1883+ 25CE              //              n1 n2 -- n1 n2 n1 n2
1884+ 25CE              // duplicates the top double of stack
1885+ 25CE                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1885+ 25CE             >
1885+ 25CE             >Dict_Ptr        defl    $
1885+ 25CE             >
1885+ 25CE             >//              ______________________________________________________________________
1885+ 25CE             >//              Heap part
1885+ 25CE             >
1885+ 25CE             >
1885+ 25CE             >                org     (Heap_Ptr & $1FFF) + $E000
1885+ E34C             >
1885+ E34C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1885+ E34C             >Latest_Definition defl  Heap_Ptr
1885+ E34C             >
1885+ E34C             >                // dummy db directives used to calculate length of namec
1885+ E34C 32 44 55 50 >                db      "2DUP"
1885+ E350             >len_NFA         defl    $ - temp_NFA
1885+ E350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1885+ E34C             >
1885+ E34C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1885+ E34D 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1885+ E351             >                org     $-1                 // alter last byte of Name just above to set
1885+ E350 D0          >                db      {b $} | END_BIT     // msb as name end
1885+ E351             >
1885+ E351 42 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1885+ E353             >Prev_Ptr        defl    Heap_Ptr
1885+ E353             >
1885+ E353             >mirror_Ptr      defl    $
1885+ E353             >
1885+ E353 D0 25       >                dw      Dict_Ptr + 2        // xt
1885+ E355             >Heap_Ptr        defl    $ - $E000           // save current HP
1885+ E355             >
1885+ E355             >Current_HP      defl  $ - $E000             // used to set HP once!
1885+ E355             >
1885+ E355             >//              ______________________________________________________________________
1885+ E355             >//              Dictionary part
1885+ E355             >
1885+ E355             >                org     Dict_Ptr
1885+ 25CE             >
1885+ 25CE 53 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1885+ 25D0             >
1885+ 25D0             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1885+ 25D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1885+ 25D0 ~           >
1885+ 25D0 ~           >
1885+ 25D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1885+ 25D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1885+ 25D0             >
1885+ 25D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1886+ 25D0 E1                           pop     hl                  // < d-H
1887+ 25D1 F1                           pop     af                  // < d-L
1888+ 25D2 F5                           push    af                  // < d-L
1889+ 25D3 E5                           push    hl                  //       > d-H
1890+ 25D4 F5                           push    af                  //       > d-L
1891+ 25D5 E5                           push    hl                  //       > d-H
1892+ 25D6                              next
1892+ 25D6 DD E9       >                jp      (ix)
1893+ 25D8
1894+ 25D8              //  ______________________________________________________________________
1895+ 25D8              //
1896+ 25D8              // 2rot         d1 d2 d3 -- d2 d3 d1
1897+ 25D8              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1898+ 25D8              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1899+ 25D8              // and putting it on top. The other two are shifted down one place.
1900+ 25D8              //              New_Def TWO?ROT, 4, "2rot"
1901+ 25D8              //              ...
1902+ 25D8              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1903+ 25D8              //
1904+ 25D8              //      d3  |d2  |d1  |
1905+ 25D8              //      h l |h l |h l |
1906+ 25D8              // SP   LHED|LHED|LHED|
1907+ 25D8              // SP  +0123|4567|89ab|
1908+ 25D8              //              ld      hl, $000B
1909+ 25D8              //              add     hl, sp
1910+ 25D8              //              ld      d, (hl)
1911+ 25D8              //              dec     hl
1912+ 25D8              //              ld      e, (hl)
1913+ 25D8              //              dec     hl
1914+ 25D8              //              push    de
1915+ 25D8              //              ld      d, (hl)
1916+ 25D8              //              dec     hl
1917+ 25D8              //              ld      e, (hl)
1918+ 25D8              //              dec     hl
1919+ 25D8              //              push    de
1920+ 25D8
1921+ 25D8              //      d1  |d3  |d2  |d1  |
1922+ 25D8              //      h l |h l |h l |h l |
1923+ 25D8              // SP   LHED|LHED|LHED|LHED|
1924+ 25D8              // SP       +0123|4567|89ab|
1925+ 25D8
1926+ 25D8              //              ld      d, h
1927+ 25D8              //              ld      e, l
1928+ 25D8              //              inc     de
1929+ 25D8              //              inc     de
1930+ 25D8              //              inc     de
1931+ 25D8              //              inc     de
1932+ 25D8              //              push    bc
1933+ 25D8              //              ld      bc, $000C
1934+ 25D8              //              lddr
1935+ 25D8              //              pop     bc
1936+ 25D8              //              pop     de
1937+ 25D8              //              pop     de
1938+ 25D8              //
1939+ 25D8              //              next
1940+ 25D8
1941+ 25D8
1942+ 25D8              //  ______________________________________________________________________
1943+ 25D8              //
1944+ 25D8              // +!           n a --
1945+ 25D8              // Sums to the content of address a the number n.
1946+ 25D8              // It is the same of  a @ n + a !
1947+ 25D8                              New_Def PLUSSTORE, "+!", is_code, is_normal
1947+ 25D8             >
1947+ 25D8             >Dict_Ptr        defl    $
1947+ 25D8             >
1947+ 25D8             >//              ______________________________________________________________________
1947+ 25D8             >//              Heap part
1947+ 25D8             >
1947+ 25D8             >
1947+ 25D8             >                org     (Heap_Ptr & $1FFF) + $E000
1947+ E355             >
1947+ E355             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1947+ E355             >Latest_Definition defl  Heap_Ptr
1947+ E355             >
1947+ E355             >                // dummy db directives used to calculate length of namec
1947+ E355 2B 21       >                db      "+!"
1947+ E357             >len_NFA         defl    $ - temp_NFA
1947+ E357             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1947+ E355             >
1947+ E355 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1947+ E356 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1947+ E358             >                org     $-1                 // alter last byte of Name just above to set
1947+ E357 A1          >                db      {b $} | END_BIT     // msb as name end
1947+ E358             >
1947+ E358 4C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1947+ E35A             >Prev_Ptr        defl    Heap_Ptr
1947+ E35A             >
1947+ E35A             >mirror_Ptr      defl    $
1947+ E35A             >
1947+ E35A DA 25       >                dw      Dict_Ptr + 2        // xt
1947+ E35C             >Heap_Ptr        defl    $ - $E000           // save current HP
1947+ E35C             >
1947+ E35C             >Current_HP      defl  $ - $E000             // used to set HP once!
1947+ E35C             >
1947+ E35C             >//              ______________________________________________________________________
1947+ E35C             >//              Dictionary part
1947+ E35C             >
1947+ E35C             >                org     Dict_Ptr
1947+ 25D8             >
1947+ 25D8 5A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1947+ 25DA             >
1947+ 25DA             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1947+ 25DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1947+ 25DA ~           >
1947+ 25DA ~           >
1947+ 25DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1947+ 25DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1947+ 25DA             >
1947+ 25DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1948+ 25DA D9                           exx
1949+ 25DB E1                           pop     hl                  // hl is the address
1950+ 25DC D1                           pop     de                  // de is the number
1951+ 25DD 7E                           ld      a, (hl)
1952+ 25DE 83                           add     e
1953+ 25DF 77                           ld      (hl), a
1954+ 25E0 23                           inc     hl
1955+ 25E1 7E                           ld      a, (hl)
1956+ 25E2 8A                           adc     d
1957+ 25E3 77                           ld      (hl), a
1958+ 25E4 D9                           exx
1959+ 25E5                              next
1959+ 25E5 DD E9       >                jp      (ix)
1960+ 25E7
1961+ 25E7              //  ______________________________________________________________________
1962+ 25E7              //
1963+ 25E7              // toggle       a n --
1964+ 25E7              // Complements (xor) the byte at addrress  a  with the model n.
1965+ 25E7                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1965+ 25E7             >
1965+ 25E7             >Dict_Ptr        defl    $
1965+ 25E7             >
1965+ 25E7             >//              ______________________________________________________________________
1965+ 25E7             >//              Heap part
1965+ 25E7             >
1965+ 25E7             >
1965+ 25E7             >                org     (Heap_Ptr & $1FFF) + $E000
1965+ E35C             >
1965+ E35C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1965+ E35C             >Latest_Definition defl  Heap_Ptr
1965+ E35C             >
1965+ E35C             >                // dummy db directives used to calculate length of namec
1965+ E35C 54 4F 47 47 >                db      "TOGGLE"
1965+ E360 4C 45       >
1965+ E362             >len_NFA         defl    $ - temp_NFA
1965+ E362             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1965+ E35C             >
1965+ E35C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1965+ E35D 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1965+ E361 4C 45       >
1965+ E363             >                org     $-1                 // alter last byte of Name just above to set
1965+ E362 C5          >                db      {b $} | END_BIT     // msb as name end
1965+ E363             >
1965+ E363 55 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1965+ E365             >Prev_Ptr        defl    Heap_Ptr
1965+ E365             >
1965+ E365             >mirror_Ptr      defl    $
1965+ E365             >
1965+ E365 E9 25       >                dw      Dict_Ptr + 2        // xt
1965+ E367             >Heap_Ptr        defl    $ - $E000           // save current HP
1965+ E367             >
1965+ E367             >Current_HP      defl  $ - $E000             // used to set HP once!
1965+ E367             >
1965+ E367             >//              ______________________________________________________________________
1965+ E367             >//              Dictionary part
1965+ E367             >
1965+ E367             >                org     Dict_Ptr
1965+ 25E7             >
1965+ 25E7 65 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1965+ 25E9             >
1965+ 25E9             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1965+ 25E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1965+ 25E9 ~           >
1965+ 25E9 ~           >
1965+ 25E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1965+ 25E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1965+ 25E9             >
1965+ 25E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1966+ 25E9 E1                           pop     hl
1967+ 25EA 7D                           ld      a, l
1968+ 25EB E1                           pop     hl
1969+ 25EC AE                           xor     (hl)
1970+ 25ED 77                           ld      (hl), a
1971+ 25EE
1972+ 25EE                              next
1972+ 25EE DD E9       >                jp      (ix)
1973+ 25F0
1974+ 25F0              //  ______________________________________________________________________
1975+ 25F0              //
1976+ 25F0              // @            a -- n
1977+ 25F0              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1978+ 25F0                              New_Def FETCH, "@", is_code, is_normal
1978+ 25F0             >
1978+ 25F0             >Dict_Ptr        defl    $
1978+ 25F0             >
1978+ 25F0             >//              ______________________________________________________________________
1978+ 25F0             >//              Heap part
1978+ 25F0             >
1978+ 25F0             >
1978+ 25F0             >                org     (Heap_Ptr & $1FFF) + $E000
1978+ E367             >
1978+ E367             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1978+ E367             >Latest_Definition defl  Heap_Ptr
1978+ E367             >
1978+ E367             >                // dummy db directives used to calculate length of namec
1978+ E367 40          >                db      "@"
1978+ E368             >len_NFA         defl    $ - temp_NFA
1978+ E368             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1978+ E367             >
1978+ E367 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1978+ E368 40          >                db      "@"               // name string in 7-bit ascii, but
1978+ E369             >                org     $-1                 // alter last byte of Name just above to set
1978+ E368 C0          >                db      {b $} | END_BIT     // msb as name end
1978+ E369             >
1978+ E369 5C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1978+ E36B             >Prev_Ptr        defl    Heap_Ptr
1978+ E36B             >
1978+ E36B             >mirror_Ptr      defl    $
1978+ E36B             >
1978+ E36B F2 25       >                dw      Dict_Ptr + 2        // xt
1978+ E36D             >Heap_Ptr        defl    $ - $E000           // save current HP
1978+ E36D             >
1978+ E36D             >Current_HP      defl  $ - $E000             // used to set HP once!
1978+ E36D             >
1978+ E36D             >//              ______________________________________________________________________
1978+ E36D             >//              Dictionary part
1978+ E36D             >
1978+ E36D             >                org     Dict_Ptr
1978+ 25F0             >
1978+ 25F0 6B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1978+ 25F2             >
1978+ 25F2             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1978+ 25F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1978+ 25F2 ~           >
1978+ 25F2 ~           >
1978+ 25F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1978+ 25F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1978+ 25F2             >
1978+ 25F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1979+ 25F2 E1                           pop     hl
1980+ 25F3 7E                           ld      a, (hl)             // low-byte
1981+ 25F4 23                           inc     hl
1982+ 25F5 66                           ld      h, (hl)             // high-byte
1983+ 25F6 6F                           ld      l, a
1984+ 25F7 E5                           push    hl
1985+ 25F8                              next
1985+ 25F8 DD E9       >                jp      (ix)
1986+ 25FA
1987+ 25FA              //  ______________________________________________________________________
1988+ 25FA              //
1989+ 25FA              // !            n a --
1990+ 25FA              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1991+ 25FA                              New_Def STORE, "!", is_code, is_normal
1991+ 25FA             >
1991+ 25FA             >Dict_Ptr        defl    $
1991+ 25FA             >
1991+ 25FA             >//              ______________________________________________________________________
1991+ 25FA             >//              Heap part
1991+ 25FA             >
1991+ 25FA             >
1991+ 25FA             >                org     (Heap_Ptr & $1FFF) + $E000
1991+ E36D             >
1991+ E36D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1991+ E36D             >Latest_Definition defl  Heap_Ptr
1991+ E36D             >
1991+ E36D             >                // dummy db directives used to calculate length of namec
1991+ E36D 21          >                db      "!"
1991+ E36E             >len_NFA         defl    $ - temp_NFA
1991+ E36E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1991+ E36D             >
1991+ E36D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1991+ E36E 21          >                db      "!"               // name string in 7-bit ascii, but
1991+ E36F             >                org     $-1                 // alter last byte of Name just above to set
1991+ E36E A1          >                db      {b $} | END_BIT     // msb as name end
1991+ E36F             >
1991+ E36F 67 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1991+ E371             >Prev_Ptr        defl    Heap_Ptr
1991+ E371             >
1991+ E371             >mirror_Ptr      defl    $
1991+ E371             >
1991+ E371 FC 25       >                dw      Dict_Ptr + 2        // xt
1991+ E373             >Heap_Ptr        defl    $ - $E000           // save current HP
1991+ E373             >
1991+ E373             >Current_HP      defl  $ - $E000             // used to set HP once!
1991+ E373             >
1991+ E373             >//              ______________________________________________________________________
1991+ E373             >//              Dictionary part
1991+ E373             >
1991+ E373             >                org     Dict_Ptr
1991+ 25FA             >
1991+ 25FA 71 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1991+ 25FC             >
1991+ 25FC             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1991+ 25FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1991+ 25FC ~           >
1991+ 25FC ~           >
1991+ 25FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1991+ 25FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1991+ 25FC             >
1991+ 25FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1992+ 25FC D9                           exx
1993+ 25FD E1                           pop     hl                  // address
1994+ 25FE D1                           pop     de                  // < n
1995+ 25FF              Store_end:
1996+ 25FF 73                           ld      (hl), e             // low-byte
1997+ 2600 23                           inc     hl
1998+ 2601 72                           ld      (hl), d             // high-byte
1999+ 2602 D9                           exx
2000+ 2603                              next
2000+ 2603 DD E9       >                jp      (ix)
2001+ 2605
2002+ 2605              //  ______________________________________________________________________
2003+ 2605              //
2004+ 2605              // c@           a -- c
2005+ 2605              // fetch a character n from address a
2006+ 2605                              New_Def CFETCH, "C@", is_code, is_normal
2006+ 2605             >
2006+ 2605             >Dict_Ptr        defl    $
2006+ 2605             >
2006+ 2605             >//              ______________________________________________________________________
2006+ 2605             >//              Heap part
2006+ 2605             >
2006+ 2605             >
2006+ 2605             >                org     (Heap_Ptr & $1FFF) + $E000
2006+ E373             >
2006+ E373             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2006+ E373             >Latest_Definition defl  Heap_Ptr
2006+ E373             >
2006+ E373             >                // dummy db directives used to calculate length of namec
2006+ E373 43 40       >                db      "C@"
2006+ E375             >len_NFA         defl    $ - temp_NFA
2006+ E375             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2006+ E373             >
2006+ E373 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2006+ E374 43 40       >                db      "C@"               // name string in 7-bit ascii, but
2006+ E376             >                org     $-1                 // alter last byte of Name just above to set
2006+ E375 C0          >                db      {b $} | END_BIT     // msb as name end
2006+ E376             >
2006+ E376 6D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2006+ E378             >Prev_Ptr        defl    Heap_Ptr
2006+ E378             >
2006+ E378             >mirror_Ptr      defl    $
2006+ E378             >
2006+ E378 07 26       >                dw      Dict_Ptr + 2        // xt
2006+ E37A             >Heap_Ptr        defl    $ - $E000           // save current HP
2006+ E37A             >
2006+ E37A             >Current_HP      defl  $ - $E000             // used to set HP once!
2006+ E37A             >
2006+ E37A             >//              ______________________________________________________________________
2006+ E37A             >//              Dictionary part
2006+ E37A             >
2006+ E37A             >                org     Dict_Ptr
2006+ 2605             >
2006+ 2605 78 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2006+ 2607             >
2006+ 2607             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2006+ 2607 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2006+ 2607 ~           >
2006+ 2607 ~           >
2006+ 2607             >                endif           ; ok        // for other definitions it "points" the correct handler
2006+ 2607             >                // Use of "; ok" to suppress "warning[fwdref]"
2006+ 2607             >
2006+ 2607             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2007+ 2607 E1                           pop     hl
2008+ 2608 6E                           ld      l, (hl)             // low-byte
2009+ 2609 26 00                        ld      h, 0
2010+ 260B
2011+ 260B                              psh1
2011+ 260B E5          >                push    hl
2011+ 260C DD E9       >                jp      (ix)
2012+ 260E
2013+ 260E              //  ______________________________________________________________________
2014+ 260E              //
2015+ 260E              // c!           c a --
2016+ 260E              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
2017+ 260E                              New_Def CSTORE, "C!", is_code, is_normal
2017+ 260E             >
2017+ 260E             >Dict_Ptr        defl    $
2017+ 260E             >
2017+ 260E             >//              ______________________________________________________________________
2017+ 260E             >//              Heap part
2017+ 260E             >
2017+ 260E             >
2017+ 260E             >                org     (Heap_Ptr & $1FFF) + $E000
2017+ E37A             >
2017+ E37A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2017+ E37A             >Latest_Definition defl  Heap_Ptr
2017+ E37A             >
2017+ E37A             >                // dummy db directives used to calculate length of namec
2017+ E37A 43 21       >                db      "C!"
2017+ E37C             >len_NFA         defl    $ - temp_NFA
2017+ E37C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2017+ E37A             >
2017+ E37A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2017+ E37B 43 21       >                db      "C!"               // name string in 7-bit ascii, but
2017+ E37D             >                org     $-1                 // alter last byte of Name just above to set
2017+ E37C A1          >                db      {b $} | END_BIT     // msb as name end
2017+ E37D             >
2017+ E37D 73 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2017+ E37F             >Prev_Ptr        defl    Heap_Ptr
2017+ E37F             >
2017+ E37F             >mirror_Ptr      defl    $
2017+ E37F             >
2017+ E37F 10 26       >                dw      Dict_Ptr + 2        // xt
2017+ E381             >Heap_Ptr        defl    $ - $E000           // save current HP
2017+ E381             >
2017+ E381             >Current_HP      defl  $ - $E000             // used to set HP once!
2017+ E381             >
2017+ E381             >//              ______________________________________________________________________
2017+ E381             >//              Dictionary part
2017+ E381             >
2017+ E381             >                org     Dict_Ptr
2017+ 260E             >
2017+ 260E 7F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2017+ 2610             >
2017+ 2610             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2017+ 2610 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2017+ 2610 ~           >
2017+ 2610 ~           >
2017+ 2610             >                endif           ; ok        // for other definitions it "points" the correct handler
2017+ 2610             >                // Use of "; ok" to suppress "warning[fwdref]"
2017+ 2610             >
2017+ 2610             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2018+ 2610 D9                           exx
2019+ 2611 E1                           pop     hl                  // < address
2020+ 2612 D1                           pop     de
2021+ 2613 73                           ld      (hl), e             // low-byte
2022+ 2614 D9                           exx
2023+ 2615                              next
2023+ 2615 DD E9       >                jp      (ix)
2024+ 2617
2025+ 2617              //  ______________________________________________________________________
2026+ 2617              //
2027+ 2617              // 2@           a -- d
2028+ 2617              // fetch a 32 bits number d from address a and leaves it on top of the
2029+ 2617              // stack as two single numbers, high part as top of the stack.
2030+ 2617              // A double number is normally kept in CPU registers as HLDE.
2031+ 2617              // On stack a double number is treated as two single numbers
2032+ 2617              // where BC is on the top of the stack and HL is the second from top,
2033+ 2617              // so the sign of the number can be checked on top of stack
2034+ 2617              // and in the stack memory it appears as LHED.
2035+ 2617                              New_Def TWO_FETCH, "2@", is_code, is_normal
2035+ 2617             >
2035+ 2617             >Dict_Ptr        defl    $
2035+ 2617             >
2035+ 2617             >//              ______________________________________________________________________
2035+ 2617             >//              Heap part
2035+ 2617             >
2035+ 2617             >
2035+ 2617             >                org     (Heap_Ptr & $1FFF) + $E000
2035+ E381             >
2035+ E381             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2035+ E381             >Latest_Definition defl  Heap_Ptr
2035+ E381             >
2035+ E381             >                // dummy db directives used to calculate length of namec
2035+ E381 32 40       >                db      "2@"
2035+ E383             >len_NFA         defl    $ - temp_NFA
2035+ E383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2035+ E381             >
2035+ E381 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2035+ E382 32 40       >                db      "2@"               // name string in 7-bit ascii, but
2035+ E384             >                org     $-1                 // alter last byte of Name just above to set
2035+ E383 C0          >                db      {b $} | END_BIT     // msb as name end
2035+ E384             >
2035+ E384 7A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2035+ E386             >Prev_Ptr        defl    Heap_Ptr
2035+ E386             >
2035+ E386             >mirror_Ptr      defl    $
2035+ E386             >
2035+ E386 19 26       >                dw      Dict_Ptr + 2        // xt
2035+ E388             >Heap_Ptr        defl    $ - $E000           // save current HP
2035+ E388             >
2035+ E388             >Current_HP      defl  $ - $E000             // used to set HP once!
2035+ E388             >
2035+ E388             >//              ______________________________________________________________________
2035+ E388             >//              Dictionary part
2035+ E388             >
2035+ E388             >                org     Dict_Ptr
2035+ 2617             >
2035+ 2617 86 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2035+ 2619             >
2035+ 2619             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2035+ 2619 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2035+ 2619 ~           >
2035+ 2619 ~           >
2035+ 2619             >                endif           ; ok        // for other definitions it "points" the correct handler
2035+ 2619             >                // Use of "; ok" to suppress "warning[fwdref]"
2035+ 2619             >
2035+ 2619             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2036+ 2619 D9                           exx
2037+ 261A E1                           pop     hl                  // address
2038+ 261B 5E                           ld      e, (hl)             // low-byte
2039+ 261C 23                           inc     hl
2040+ 261D 56                           ld      d, (hl)             // high-byte
2041+ 261E 23                           inc     hl
2042+ 261F 4E                           ld      c, (hl)             // low-byte
2043+ 2620 23                           inc     hl
2044+ 2621 46                           ld      b, (hl)             // high-byte
2045+ 2622 C5                           push    bc
2046+ 2623 D5                           push    de
2047+ 2624 D9                           exx
2048+ 2625                              next
2048+ 2625 DD E9       >                jp      (ix)
2049+ 2627
2050+ 2627              //  ______________________________________________________________________
2051+ 2627              //
2052+ 2627              // 2!           d a --
2053+ 2627              // stores a 32 bits number d from address a and leaves it on top of the
2054+ 2627              // stack as two single numbers, high part as top of the stack.
2055+ 2627              // A double number is normally kept in CPU registers as HLDE.
2056+ 2627              // On stack a double number is treated as two single numbers
2057+ 2627              // where BC is on the top of the stack and HL is the second from top,
2058+ 2627              // so the sign of the number can be checked on top of stack
2059+ 2627              // and in the stack memory it appears as LHED.
2060+ 2627                              New_Def TWO_STORE, "2!", is_code, is_normal
2060+ 2627             >
2060+ 2627             >Dict_Ptr        defl    $
2060+ 2627             >
2060+ 2627             >//              ______________________________________________________________________
2060+ 2627             >//              Heap part
2060+ 2627             >
2060+ 2627             >
2060+ 2627             >                org     (Heap_Ptr & $1FFF) + $E000
2060+ E388             >
2060+ E388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2060+ E388             >Latest_Definition defl  Heap_Ptr
2060+ E388             >
2060+ E388             >                // dummy db directives used to calculate length of namec
2060+ E388 32 21       >                db      "2!"
2060+ E38A             >len_NFA         defl    $ - temp_NFA
2060+ E38A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2060+ E388             >
2060+ E388 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2060+ E389 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2060+ E38B             >                org     $-1                 // alter last byte of Name just above to set
2060+ E38A A1          >                db      {b $} | END_BIT     // msb as name end
2060+ E38B             >
2060+ E38B 81 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2060+ E38D             >Prev_Ptr        defl    Heap_Ptr
2060+ E38D             >
2060+ E38D             >mirror_Ptr      defl    $
2060+ E38D             >
2060+ E38D 29 26       >                dw      Dict_Ptr + 2        // xt
2060+ E38F             >Heap_Ptr        defl    $ - $E000           // save current HP
2060+ E38F             >
2060+ E38F             >Current_HP      defl  $ - $E000             // used to set HP once!
2060+ E38F             >
2060+ E38F             >//              ______________________________________________________________________
2060+ E38F             >//              Dictionary part
2060+ E38F             >
2060+ E38F             >                org     Dict_Ptr
2060+ 2627             >
2060+ 2627 8D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2060+ 2629             >
2060+ 2629             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2060+ 2629 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2060+ 2629 ~           >
2060+ 2629 ~           >
2060+ 2629             >                endif           ; ok        // for other definitions it "points" the correct handler
2060+ 2629             >                // Use of "; ok" to suppress "warning[fwdref]"
2060+ 2629             >
2060+ 2629             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2061+ 2629 D9                           exx
2062+ 262A E1                           pop     hl                  // address
2063+ 262B C1                           pop     bc                  // < high-part
2064+ 262C D1                           pop     de                  // < low-part
2065+ 262D 71                           ld      (hl), c
2066+ 262E 23                           inc     hl
2067+ 262F 70                           ld      (hl), b
2068+ 2630 23                           inc     hl
2069+ 2631 18 CC                        jr      Store_end
2070+ 2633                          //  ld      (hl), e
2071+ 2633                          //  inc     hl
2072+ 2633                          //  ld      (hl), d
2073+ 2633                          //  exx
2074+ 2633                          //  next
2075+ 2633
2076+ 2633              //  ______________________________________________________________________
2077+ 2633              //
2078+ 2633              // p@           a -- c
2079+ 2633              // Read one byte from port a and leave the result on top of stack
2080+ 2633                              New_Def PFETCH, "P@", is_code, is_normal
2080+ 2633             >
2080+ 2633             >Dict_Ptr        defl    $
2080+ 2633             >
2080+ 2633             >//              ______________________________________________________________________
2080+ 2633             >//              Heap part
2080+ 2633             >
2080+ 2633             >
2080+ 2633             >                org     (Heap_Ptr & $1FFF) + $E000
2080+ E38F             >
2080+ E38F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2080+ E38F             >Latest_Definition defl  Heap_Ptr
2080+ E38F             >
2080+ E38F             >                // dummy db directives used to calculate length of namec
2080+ E38F 50 40       >                db      "P@"
2080+ E391             >len_NFA         defl    $ - temp_NFA
2080+ E391             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2080+ E38F             >
2080+ E38F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2080+ E390 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2080+ E392             >                org     $-1                 // alter last byte of Name just above to set
2080+ E391 C0          >                db      {b $} | END_BIT     // msb as name end
2080+ E392             >
2080+ E392 88 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2080+ E394             >Prev_Ptr        defl    Heap_Ptr
2080+ E394             >
2080+ E394             >mirror_Ptr      defl    $
2080+ E394             >
2080+ E394 35 26       >                dw      Dict_Ptr + 2        // xt
2080+ E396             >Heap_Ptr        defl    $ - $E000           // save current HP
2080+ E396             >
2080+ E396             >Current_HP      defl  $ - $E000             // used to set HP once!
2080+ E396             >
2080+ E396             >//              ______________________________________________________________________
2080+ E396             >//              Dictionary part
2080+ E396             >
2080+ E396             >                org     Dict_Ptr
2080+ 2633             >
2080+ 2633 94 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2080+ 2635             >
2080+ 2635             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2080+ 2635 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2080+ 2635 ~           >
2080+ 2635 ~           >
2080+ 2635             >                endif           ; ok        // for other definitions it "points" the correct handler
2080+ 2635             >                // Use of "; ok" to suppress "warning[fwdref]"
2080+ 2635             >
2080+ 2635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2081+ 2635 D9                           exx
2082+ 2636 C1                           pop     bc
2083+ 2637 26 00                        ld      h, 0
2084+ 2639 ED 68                        in      l, (c)
2085+ 263B E5                           push    hl
2086+ 263C D9                           exx
2087+ 263D                              next
2087+ 263D DD E9       >                jp      (ix)
2088+ 263F
2089+ 263F              //  ______________________________________________________________________
2090+ 263F              //
2091+ 263F              // p!           c a --
2092+ 263F              // Send one byte (top of stack) to port a
2093+ 263F                              New_Def PSTORE, "P!", is_code, is_normal
2093+ 263F             >
2093+ 263F             >Dict_Ptr        defl    $
2093+ 263F             >
2093+ 263F             >//              ______________________________________________________________________
2093+ 263F             >//              Heap part
2093+ 263F             >
2093+ 263F             >
2093+ 263F             >                org     (Heap_Ptr & $1FFF) + $E000
2093+ E396             >
2093+ E396             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2093+ E396             >Latest_Definition defl  Heap_Ptr
2093+ E396             >
2093+ E396             >                // dummy db directives used to calculate length of namec
2093+ E396 50 21       >                db      "P!"
2093+ E398             >len_NFA         defl    $ - temp_NFA
2093+ E398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2093+ E396             >
2093+ E396 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2093+ E397 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2093+ E399             >                org     $-1                 // alter last byte of Name just above to set
2093+ E398 A1          >                db      {b $} | END_BIT     // msb as name end
2093+ E399             >
2093+ E399 8F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2093+ E39B             >Prev_Ptr        defl    Heap_Ptr
2093+ E39B             >
2093+ E39B             >mirror_Ptr      defl    $
2093+ E39B             >
2093+ E39B 41 26       >                dw      Dict_Ptr + 2        // xt
2093+ E39D             >Heap_Ptr        defl    $ - $E000           // save current HP
2093+ E39D             >
2093+ E39D             >Current_HP      defl  $ - $E000             // used to set HP once!
2093+ E39D             >
2093+ E39D             >//              ______________________________________________________________________
2093+ E39D             >//              Dictionary part
2093+ E39D             >
2093+ E39D             >                org     Dict_Ptr
2093+ 263F             >
2093+ 263F 9B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2093+ 2641             >
2093+ 2641             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2093+ 2641 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2093+ 2641 ~           >
2093+ 2641 ~           >
2093+ 2641             >                endif           ; ok        // for other definitions it "points" the correct handler
2093+ 2641             >                // Use of "; ok" to suppress "warning[fwdref]"
2093+ 2641             >
2093+ 2641             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2094+ 2641 D9                           exx
2095+ 2642 C1                           pop     bc
2096+ 2643 E1                           pop     hl                  // < c
2097+ 2644 ED 69                        out     (c), l              // low-byte
2098+ 2646 D9                           exx
2099+ 2647                              next
2099+ 2647 DD E9       >                jp      (ix)
2100+ 2649
2101+ 2649
2102+ 2649              //  ______________________________________________________________________
2103+ 2649              //
2104+ 2649              // 2*           n1 -- n2
2105+ 2649              // doubles the number at top of stack
2106+ 2649                              New_Def TWO_MUL, "2*", is_code, is_normal
2106+ 2649             >
2106+ 2649             >Dict_Ptr        defl    $
2106+ 2649             >
2106+ 2649             >//              ______________________________________________________________________
2106+ 2649             >//              Heap part
2106+ 2649             >
2106+ 2649             >
2106+ 2649             >                org     (Heap_Ptr & $1FFF) + $E000
2106+ E39D             >
2106+ E39D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2106+ E39D             >Latest_Definition defl  Heap_Ptr
2106+ E39D             >
2106+ E39D             >                // dummy db directives used to calculate length of namec
2106+ E39D 32 2A       >                db      "2*"
2106+ E39F             >len_NFA         defl    $ - temp_NFA
2106+ E39F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2106+ E39D             >
2106+ E39D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2106+ E39E 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2106+ E3A0             >                org     $-1                 // alter last byte of Name just above to set
2106+ E39F AA          >                db      {b $} | END_BIT     // msb as name end
2106+ E3A0             >
2106+ E3A0 96 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2106+ E3A2             >Prev_Ptr        defl    Heap_Ptr
2106+ E3A2             >
2106+ E3A2             >mirror_Ptr      defl    $
2106+ E3A2             >
2106+ E3A2 4B 26       >                dw      Dict_Ptr + 2        // xt
2106+ E3A4             >Heap_Ptr        defl    $ - $E000           // save current HP
2106+ E3A4             >
2106+ E3A4             >Current_HP      defl  $ - $E000             // used to set HP once!
2106+ E3A4             >
2106+ E3A4             >//              ______________________________________________________________________
2106+ E3A4             >//              Dictionary part
2106+ E3A4             >
2106+ E3A4             >                org     Dict_Ptr
2106+ 2649             >
2106+ 2649 A2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2106+ 264B             >
2106+ 264B             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2106+ 264B ~           >                call    runcode ; ok        // for primitive definitions  actual code
2106+ 264B ~           >
2106+ 264B ~           >
2106+ 264B             >                endif           ; ok        // for other definitions it "points" the correct handler
2106+ 264B             >                // Use of "; ok" to suppress "warning[fwdref]"
2106+ 264B             >
2106+ 264B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2107+ 264B              Two_Mul_Ptr:
2108+ 264B E1                           pop     hl
2109+ 264C 29                           add     hl, hl
2110+ 264D
2111+ 264D                              psh1
2111+ 264D E5          >                push    hl
2111+ 264E DD E9       >                jp      (ix)
2112+ 2650
2113+ 2650              //  ______________________________________________________________________
2114+ 2650              //
2115+ 2650              // 2/           n1 -- n2
2116+ 2650              // halves the top of stack, sign is unchanged
2117+ 2650                              New_Def TWO_DIV, "2/", is_code, is_normal
2117+ 2650             >
2117+ 2650             >Dict_Ptr        defl    $
2117+ 2650             >
2117+ 2650             >//              ______________________________________________________________________
2117+ 2650             >//              Heap part
2117+ 2650             >
2117+ 2650             >
2117+ 2650             >                org     (Heap_Ptr & $1FFF) + $E000
2117+ E3A4             >
2117+ E3A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2117+ E3A4             >Latest_Definition defl  Heap_Ptr
2117+ E3A4             >
2117+ E3A4             >                // dummy db directives used to calculate length of namec
2117+ E3A4 32 2F       >                db      "2/"
2117+ E3A6             >len_NFA         defl    $ - temp_NFA
2117+ E3A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2117+ E3A4             >
2117+ E3A4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2117+ E3A5 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2117+ E3A7             >                org     $-1                 // alter last byte of Name just above to set
2117+ E3A6 AF          >                db      {b $} | END_BIT     // msb as name end
2117+ E3A7             >
2117+ E3A7 9D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2117+ E3A9             >Prev_Ptr        defl    Heap_Ptr
2117+ E3A9             >
2117+ E3A9             >mirror_Ptr      defl    $
2117+ E3A9             >
2117+ E3A9 52 26       >                dw      Dict_Ptr + 2        // xt
2117+ E3AB             >Heap_Ptr        defl    $ - $E000           // save current HP
2117+ E3AB             >
2117+ E3AB             >Current_HP      defl  $ - $E000             // used to set HP once!
2117+ E3AB             >
2117+ E3AB             >//              ______________________________________________________________________
2117+ E3AB             >//              Dictionary part
2117+ E3AB             >
2117+ E3AB             >                org     Dict_Ptr
2117+ 2650             >
2117+ 2650 A9 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2117+ 2652             >
2117+ 2652             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2117+ 2652 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2117+ 2652 ~           >
2117+ 2652 ~           >
2117+ 2652             >                endif           ; ok        // for other definitions it "points" the correct handler
2117+ 2652             >                // Use of "; ok" to suppress "warning[fwdref]"
2117+ 2652             >
2117+ 2652             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2118+ 2652 E1                           pop     hl
2119+ 2653 CB 2C                        sra     h
2120+ 2655 CB 1D                        rr      l
2121+ 2657
2122+ 2657                              psh1
2122+ 2657 E5          >                push    hl
2122+ 2658 DD E9       >                jp      (ix)
2123+ 265A
2124+ 265A              //  ______________________________________________________________________
2125+ 265A              //
2126+ 265A              // lshift       n1 u -- n2
2127+ 265A              // bit left shift of u bits
2128+ 265A                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2128+ 265A             >
2128+ 265A             >Dict_Ptr        defl    $
2128+ 265A             >
2128+ 265A             >//              ______________________________________________________________________
2128+ 265A             >//              Heap part
2128+ 265A             >
2128+ 265A             >
2128+ 265A             >                org     (Heap_Ptr & $1FFF) + $E000
2128+ E3AB             >
2128+ E3AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2128+ E3AB             >Latest_Definition defl  Heap_Ptr
2128+ E3AB             >
2128+ E3AB             >                // dummy db directives used to calculate length of namec
2128+ E3AB 4C 53 48 49 >                db      "LSHIFT"
2128+ E3AF 46 54       >
2128+ E3B1             >len_NFA         defl    $ - temp_NFA
2128+ E3B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2128+ E3AB             >
2128+ E3AB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2128+ E3AC 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2128+ E3B0 46 54       >
2128+ E3B2             >                org     $-1                 // alter last byte of Name just above to set
2128+ E3B1 D4          >                db      {b $} | END_BIT     // msb as name end
2128+ E3B2             >
2128+ E3B2 A4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2128+ E3B4             >Prev_Ptr        defl    Heap_Ptr
2128+ E3B4             >
2128+ E3B4             >mirror_Ptr      defl    $
2128+ E3B4             >
2128+ E3B4 5C 26       >                dw      Dict_Ptr + 2        // xt
2128+ E3B6             >Heap_Ptr        defl    $ - $E000           // save current HP
2128+ E3B6             >
2128+ E3B6             >Current_HP      defl  $ - $E000             // used to set HP once!
2128+ E3B6             >
2128+ E3B6             >//              ______________________________________________________________________
2128+ E3B6             >//              Dictionary part
2128+ E3B6             >
2128+ E3B6             >                org     Dict_Ptr
2128+ 265A             >
2128+ 265A B4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2128+ 265C             >
2128+ 265C             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2128+ 265C ~           >                call    runcode ; ok        // for primitive definitions  actual code
2128+ 265C ~           >
2128+ 265C ~           >
2128+ 265C             >                endif           ; ok        // for other definitions it "points" the correct handler
2128+ 265C             >                // Use of "; ok" to suppress "warning[fwdref]"
2128+ 265C             >
2128+ 265C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2129+ 265C D9                           exx
2130+ 265D C1                           pop     bc
2131+ 265E 41                           ld      b, c
2132+ 265F D1                           pop     de
2133+ 2660 ED 28                        bsla    de, b
2134+ 2662 D5                           push    de
2135+ 2663 D9                           exx
2136+ 2664                              next
2136+ 2664 DD E9       >                jp      (ix)
2137+ 2666
2138+ 2666              //  ______________________________________________________________________
2139+ 2666              //
2140+ 2666              // rshift       n1 u -- n2
2141+ 2666              // bit right shift of u bits
2142+ 2666                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2142+ 2666             >
2142+ 2666             >Dict_Ptr        defl    $
2142+ 2666             >
2142+ 2666             >//              ______________________________________________________________________
2142+ 2666             >//              Heap part
2142+ 2666             >
2142+ 2666             >
2142+ 2666             >                org     (Heap_Ptr & $1FFF) + $E000
2142+ E3B6             >
2142+ E3B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2142+ E3B6             >Latest_Definition defl  Heap_Ptr
2142+ E3B6             >
2142+ E3B6             >                // dummy db directives used to calculate length of namec
2142+ E3B6 52 53 48 49 >                db      "RSHIFT"
2142+ E3BA 46 54       >
2142+ E3BC             >len_NFA         defl    $ - temp_NFA
2142+ E3BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2142+ E3B6             >
2142+ E3B6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2142+ E3B7 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2142+ E3BB 46 54       >
2142+ E3BD             >                org     $-1                 // alter last byte of Name just above to set
2142+ E3BC D4          >                db      {b $} | END_BIT     // msb as name end
2142+ E3BD             >
2142+ E3BD AB 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2142+ E3BF             >Prev_Ptr        defl    Heap_Ptr
2142+ E3BF             >
2142+ E3BF             >mirror_Ptr      defl    $
2142+ E3BF             >
2142+ E3BF 68 26       >                dw      Dict_Ptr + 2        // xt
2142+ E3C1             >Heap_Ptr        defl    $ - $E000           // save current HP
2142+ E3C1             >
2142+ E3C1             >Current_HP      defl  $ - $E000             // used to set HP once!
2142+ E3C1             >
2142+ E3C1             >//              ______________________________________________________________________
2142+ E3C1             >//              Dictionary part
2142+ E3C1             >
2142+ E3C1             >                org     Dict_Ptr
2142+ 2666             >
2142+ 2666 BF 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2142+ 2668             >
2142+ 2668             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2142+ 2668 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2142+ 2668 ~           >
2142+ 2668 ~           >
2142+ 2668             >                endif           ; ok        // for other definitions it "points" the correct handler
2142+ 2668             >                // Use of "; ok" to suppress "warning[fwdref]"
2142+ 2668             >
2142+ 2668             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2143+ 2668 D9                           exx
2144+ 2669 C1                           pop     bc
2145+ 266A 41                           ld      b, c
2146+ 266B D1                           pop     de
2147+ 266C ED 2A                        bsrl    de, b
2148+ 266E D5                           push    de
2149+ 266F D9                           exx
2150+ 2670                              next
2150+ 2670 DD E9       >                jp      (ix)
2151+ 2672
2152+ 2672              //  ______________________________________________________________________
2153+ 2672              //
2154+ 2672              // cells        n1 -- n2
2155+ 2672              // decrement by 2 top of stack
2156+ 2672                              New_Def CELLS, "CELLS", is_code, is_normal
2156+ 2672             >
2156+ 2672             >Dict_Ptr        defl    $
2156+ 2672             >
2156+ 2672             >//              ______________________________________________________________________
2156+ 2672             >//              Heap part
2156+ 2672             >
2156+ 2672             >
2156+ 2672             >                org     (Heap_Ptr & $1FFF) + $E000
2156+ E3C1             >
2156+ E3C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2156+ E3C1             >Latest_Definition defl  Heap_Ptr
2156+ E3C1             >
2156+ E3C1             >                // dummy db directives used to calculate length of namec
2156+ E3C1 43 45 4C 4C >                db      "CELLS"
2156+ E3C5 53          >
2156+ E3C6             >len_NFA         defl    $ - temp_NFA
2156+ E3C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2156+ E3C1             >
2156+ E3C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2156+ E3C2 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2156+ E3C6 53          >
2156+ E3C7             >                org     $-1                 // alter last byte of Name just above to set
2156+ E3C6 D3          >                db      {b $} | END_BIT     // msb as name end
2156+ E3C7             >
2156+ E3C7 B6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2156+ E3C9             >Prev_Ptr        defl    Heap_Ptr
2156+ E3C9             >
2156+ E3C9             >mirror_Ptr      defl    $
2156+ E3C9             >
2156+ E3C9 74 26       >                dw      Dict_Ptr + 2        // xt
2156+ E3CB             >Heap_Ptr        defl    $ - $E000           // save current HP
2156+ E3CB             >
2156+ E3CB             >Current_HP      defl  $ - $E000             // used to set HP once!
2156+ E3CB             >
2156+ E3CB             >//              ______________________________________________________________________
2156+ E3CB             >//              Dictionary part
2156+ E3CB             >
2156+ E3CB             >                org     Dict_Ptr
2156+ 2672             >
2156+ 2672 C9 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2156+ 2674             >
2156+ 2674             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2156+ 2674 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2156+ 2674 ~           >
2156+ 2674 ~           >
2156+ 2674             >                endif           ; ok        // for other definitions it "points" the correct handler
2156+ 2674             >                // Use of "; ok" to suppress "warning[fwdref]"
2156+ 2674             >
2156+ 2674             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2157+ 2674 18 D5                        jr      Two_Mul_Ptr
2158+ 2676
2159+ 2676
2160+ 2676              //  ______________________________________________________________________
2161+ 2676
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L0.asm
 140  2676                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L1.asm
   1+ 2676              //  ______________________________________________________________________
   2+ 2676              //
   3+ 2676              //  L1.asm
   4+ 2676              //
   5+ 2676              //  Level-1 definitions and derivate
   6+ 2676              //  ______________________________________________________________________
   7+ 2676
   8+ 2676              //  ______________________________________________________________________
   9+ 2676              //
  10+ 2676              // :            -- cccc     ( compile time )
  11+ 2676              //              i*x -- j*x  ( run time )
  12+ 2676              // Colon Definition
  13+ 2676                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 2676             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 2676             >
  13+ 2676             >Dict_Ptr        defl    $
  13+ 2676             >
  13+ 2676             >//              ______________________________________________________________________
  13+ 2676             >//              Heap part
  13+ 2676             >
  13+ 2676             >
  13+ 2676             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3CB             >
  13+ E3CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3CB             >Latest_Definition defl  Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >                // dummy db directives used to calculate length of namec
  13+ E3CB 3A          >                db      ":"
  13+ E3CC             >len_NFA         defl    $ - temp_NFA
  13+ E3CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3CB             >
  13+ E3CB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CC 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CD             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CC BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CD             >
  13+ E3CD C1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CF             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CF             >
  13+ E3CF             >mirror_Ptr      defl    $
  13+ E3CF             >
  13+ E3CF 78 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3D1             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D1             >
  13+ E3D1             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D1             >
  13+ E3D1             >//              ______________________________________________________________________
  13+ E3D1             >//              Dictionary part
  13+ E3D1             >
  13+ E3D1             >                org     Dict_Ptr
  13+ 2676             >
  13+ 2676 CF 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 2678             >
  13+ 2678             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 2678 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 267B             >
  13+ 267B             >
  13+ 267B             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 267B             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 267B             >
  13+ 267B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 267B
  15+ 267B 7B 2A                        dw      QEXEC                   // ?exec
  16+ 267D 46 2A                        dw      STORE_CSP               // !csp
  17+ 267F A9 27 F2 25                  dw      CURRENT, FETCH          // current @
  18+ 2683 A3 27 FC 25                  dw      CONTEXT, STORE          // context !
  19+ 2687 DF 30                        dw      CREATE                  // create  ( forward )
  20+ 2689 FD 2A                        dw      SMUDGE                  // dmudge
  21+ 268B EE 2A                        dw      SQUARED_CLOSE           // ]
  22+ 268D 39 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 268F                                                              // ... immediate
  24+ 268F              Enter_Ptr:
  25+ 268F                              // via call coded in CFA
  26+ 268F EB                           ex      de, hl //**
  27+ 2690                              // *** ldhlrp
  28+ 2690 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 2691 70                           ld      (hl), b
  30+ 2692 2B                           dec     hl
  31+ 2693 71                           ld      (hl), c
  32+ 2694                              // *** ldrphl
  33+ 2694 EB                           ex      de, hl //**
  34+ 2695
  35+ 2695
  36+ 2695 C1                           pop     bc                  // points to PFA of "this" word
  37+ 2696                              next
  37+ 2696 DD E9       >                jp      (ix)
  38+ 2698
  39+ 2698              //  ______________________________________________________________________
  40+ 2698              //
  41+ 2698              // ;            --
  42+ 2698              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 2698                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 2698             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 2698             >
  43+ 2698             >Dict_Ptr        defl    $
  43+ 2698             >
  43+ 2698             >//              ______________________________________________________________________
  43+ 2698             >//              Heap part
  43+ 2698             >
  43+ 2698             >
  43+ 2698             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D1             >
  43+ E3D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D1             >Latest_Definition defl  Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >                // dummy db directives used to calculate length of namec
  43+ E3D1 3B          >                db      ";"
  43+ E3D2             >len_NFA         defl    $ - temp_NFA
  43+ E3D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D1             >
  43+ E3D1 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D2 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D3             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D2 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D3             >
  43+ E3D3 CB 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D5             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D5             >
  43+ E3D5             >mirror_Ptr      defl    $
  43+ E3D5             >
  43+ E3D5 9A 26       >                dw      Dict_Ptr + 2        // xt
  43+ E3D7             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D7             >
  43+ E3D7             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D7             >
  43+ E3D7             >//              ______________________________________________________________________
  43+ E3D7             >//              Dictionary part
  43+ E3D7             >
  43+ E3D7             >                org     Dict_Ptr
  43+ 2698             >
  43+ 2698 D5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 269A             >
  43+ 269A             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 269A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 269D             >
  43+ 269D             >
  43+ 269D             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 269D             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 269D             >
  43+ 269D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 269D
  45+ 269D 9B 2A                        dw      QCSP                    // ?csp
  46+ 269F C3 2A BD 24                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 26A3 FD 2A                        dw      SMUDGE                  // smudge
  48+ 26A5 E1 2A                        dw      SQUARED_OPEN            // [
  49+ 26A7 BD 24                        dw      EXIT                    // ; immediate
  50+ 26A9
  51+ 26A9              //  ______________________________________________________________________
  52+ 26A9              //
  53+ 26A9              // noop         --
  54+ 26A9
  55+ 26A9                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 26A9             >
  55+ 26A9             >Dict_Ptr        defl    $
  55+ 26A9             >
  55+ 26A9             >//              ______________________________________________________________________
  55+ 26A9             >//              Heap part
  55+ 26A9             >
  55+ 26A9             >
  55+ 26A9             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D7             >
  55+ E3D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D7             >Latest_Definition defl  Heap_Ptr
  55+ E3D7             >
  55+ E3D7             >                // dummy db directives used to calculate length of namec
  55+ E3D7 4E 4F 4F 50 >                db      "NOOP"
  55+ E3DB             >len_NFA         defl    $ - temp_NFA
  55+ E3DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D7             >
  55+ E3D7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D8 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DC             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3DB D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DC             >
  55+ E3DC D1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DE             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DE             >
  55+ E3DE             >mirror_Ptr      defl    $
  55+ E3DE             >
  55+ E3DE AB 26       >                dw      Dict_Ptr + 2        // xt
  55+ E3E0             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3E0             >
  55+ E3E0             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3E0             >
  55+ E3E0             >//              ______________________________________________________________________
  55+ E3E0             >//              Dictionary part
  55+ E3E0             >
  55+ E3E0             >                org     Dict_Ptr
  55+ 26A9             >
  55+ 26A9 DE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 26AB             >
  55+ 26AB             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 26AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 26AB ~           >
  55+ 26AB ~           >
  55+ 26AB             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 26AB             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 26AB             >
  55+ 26AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 26AB                              next
  56+ 26AB DD E9       >                jp      (ix)
  57+ 26AD
  58+ 26AD              //  ______________________________________________________________________
  59+ 26AD              //
  60+ 26AD              // constant     n -- cccc     ( compile time )
  61+ 26AD              //              -- n          ( run time )
  62+ 26AD              // Constant definition.
  63+ 26AD                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 26AD             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 26AD             >
  63+ 26AD             >Dict_Ptr        defl    $
  63+ 26AD             >
  63+ 26AD             >//              ______________________________________________________________________
  63+ 26AD             >//              Heap part
  63+ 26AD             >
  63+ 26AD             >
  63+ 26AD             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3E0             >
  63+ E3E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3E0             >Latest_Definition defl  Heap_Ptr
  63+ E3E0             >
  63+ E3E0             >                // dummy db directives used to calculate length of namec
  63+ E3E0 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E4 54 41 4E 54 >
  63+ E3E8             >len_NFA         defl    $ - temp_NFA
  63+ E3E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3E0             >
  63+ E3E0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E1 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E5 54 41 4E 54 >
  63+ E3E9             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E8 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E9             >
  63+ E3E9 D7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3EB             >Prev_Ptr        defl    Heap_Ptr
  63+ E3EB             >
  63+ E3EB             >mirror_Ptr      defl    $
  63+ E3EB             >
  63+ E3EB AF 26       >                dw      Dict_Ptr + 2        // xt
  63+ E3ED             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3ED             >
  63+ E3ED             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3ED             >
  63+ E3ED             >//              ______________________________________________________________________
  63+ E3ED             >//              Dictionary part
  63+ E3ED             >
  63+ E3ED             >                org     Dict_Ptr
  63+ 26AD             >
  63+ 26AD EB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 26AF             >
  63+ 26AF             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 26AF CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 26B2             >
  63+ 26B2             >
  63+ 26B2             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 26B2             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 26B2             >
  63+ 26B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 26B2 DF 30                        dw      CREATE                  // create
  65+ 26B4 1F 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 26B6 39 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 26B8              Constant_Ptr:
  68+ 26B8
  69+ 26B8
  70+ 26B8 E1                           pop     hl
  71+ 26B9
  72+ 26B9 7E                           ld      a, (hl)
  73+ 26BA 23                           inc     hl
  74+ 26BB 66                           ld      h, (hl)
  75+ 26BC 6F                           ld      l, a
  76+ 26BD E5                           push    hl
  77+ 26BE                              next
  77+ 26BE DD E9       >                jp      (ix)
  78+ 26C0
  79+ 26C0              //  ______________________________________________________________________
  80+ 26C0              //
  81+ 26C0              // variable     n -- cccc     ( compile time )
  82+ 26C0              //              -- a          ( run time )
  83+ 26C0              // Variable definition, n is the initial value.
  84+ 26C0                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 26C0             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 26C0             >
  84+ 26C0             >Dict_Ptr        defl    $
  84+ 26C0             >
  84+ 26C0             >//              ______________________________________________________________________
  84+ 26C0             >//              Heap part
  84+ 26C0             >
  84+ 26C0             >
  84+ 26C0             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3ED             >
  84+ E3ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3ED             >Latest_Definition defl  Heap_Ptr
  84+ E3ED             >
  84+ E3ED             >                // dummy db directives used to calculate length of namec
  84+ E3ED 56 41 52 49 >                db      "VARIABLE"
  84+ E3F1 41 42 4C 45 >
  84+ E3F5             >len_NFA         defl    $ - temp_NFA
  84+ E3F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3ED             >
  84+ E3ED 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EE 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F2 41 42 4C 45 >
  84+ E3F6             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F5 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F6             >
  84+ E3F6 E0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F8             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F8             >
  84+ E3F8             >mirror_Ptr      defl    $
  84+ E3F8             >
  84+ E3F8 C2 26       >                dw      Dict_Ptr + 2        // xt
  84+ E3FA             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3FA             >
  84+ E3FA             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3FA             >
  84+ E3FA             >//              ______________________________________________________________________
  84+ E3FA             >//              Dictionary part
  84+ E3FA             >
  84+ E3FA             >                org     Dict_Ptr
  84+ 26C0             >
  84+ 26C0 F8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 26C2             >
  84+ 26C2             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 26C2 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 26C5             >
  84+ 26C5             >
  84+ 26C5             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 26C5             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 26C5             >
  84+ 26C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 26C5
  86+ 26C5 E4 26                        dw      ZERO
  87+ 26C7 AF 26                        dw      CONSTANT                // constant
  88+ 26C9 39 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 26CB              Variable_Ptr:
  90+ 26CB
  91+ 26CB
  92+ 26CB
  93+ 26CB
  94+ 26CB                              next
  94+ 26CB DD E9       >                jp      (ix)
  95+ 26CD
  96+ 26CD              //  ______________________________________________________________________
  97+ 26CD              //
  98+ 26CD              // user         b -- cccc     ( compile time )
  99+ 26CD              //              -- a          ( run time )
 100+ 26CD              // User variable definition
 101+ 26CD                              Colon_Def USER, "USER", is_normal
 101+ 26CD             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 26CD             >
 101+ 26CD             >Dict_Ptr        defl    $
 101+ 26CD             >
 101+ 26CD             >//              ______________________________________________________________________
 101+ 26CD             >//              Heap part
 101+ 26CD             >
 101+ 26CD             >
 101+ 26CD             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3FA             >
 101+ E3FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3FA             >Latest_Definition defl  Heap_Ptr
 101+ E3FA             >
 101+ E3FA             >                // dummy db directives used to calculate length of namec
 101+ E3FA 55 53 45 52 >                db      "USER"
 101+ E3FE             >len_NFA         defl    $ - temp_NFA
 101+ E3FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3FA             >
 101+ E3FA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3FB 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FF             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FE D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FF             >
 101+ E3FF ED 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E401             >Prev_Ptr        defl    Heap_Ptr
 101+ E401             >
 101+ E401             >mirror_Ptr      defl    $
 101+ E401             >
 101+ E401 CF 26       >                dw      Dict_Ptr + 2        // xt
 101+ E403             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E403             >
 101+ E403             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E403             >
 101+ E403             >//              ______________________________________________________________________
 101+ E403             >//              Dictionary part
 101+ E403             >
 101+ E403             >                org     Dict_Ptr
 101+ 26CD             >
 101+ 26CD 01 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 26CF             >
 101+ 26CF             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 26CF CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 26D2             >
 101+ 26D2             >
 101+ 26D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 26D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 26D2             >
 101+ 26D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 26D2
 103+ 26D2 DF 30                        dw      CREATE                  // create
 104+ 26D4 2E 28                        dw      CCOMMA                  // c,
 105+ 26D6 39 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 26D8
 107+ 26D8
 108+ 26D8              User_Ptr:
 109+ 26D8                              // via call coded in CFA
 110+ 26D8 E1                           pop     hl
 111+ 26D9
 112+ 26D9 7E                           ld      a, (hl)
 113+ 26DA 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 26DD ED 31                        add     hl, a
 115+ 26DF E5                           push    hl
 116+ 26E0                              next
 116+ 26E0 DD E9       >                jp      (ix)
 117+ 26E2
 118+ 26E2              //  ______________________________________________________________________
 119+ 26E2              //
 120+ 26E2                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 26E2             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 26E2             >
 120+ 26E2             >Dict_Ptr        defl    $
 120+ 26E2             >
 120+ 26E2             >//              ______________________________________________________________________
 120+ 26E2             >//              Heap part
 120+ 26E2             >
 120+ 26E2             >
 120+ 26E2             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E403             >
 120+ E403             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E403             >Latest_Definition defl  Heap_Ptr
 120+ E403             >
 120+ E403             >                // dummy db directives used to calculate length of namec
 120+ E403 30          >                db      "0"
 120+ E404             >len_NFA         defl    $ - temp_NFA
 120+ E404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E403             >
 120+ E403 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E404 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E405             >                org     $-1                 // alter last byte of Name just above to set
 120+ E404 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E405             >
 120+ E405 FA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E407             >Prev_Ptr        defl    Heap_Ptr
 120+ E407             >
 120+ E407             >mirror_Ptr      defl    $
 120+ E407             >
 120+ E407 E4 26       >                dw      Dict_Ptr + 2        // xt
 120+ E409             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E409             >
 120+ E409             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E409             >
 120+ E409             >//              ______________________________________________________________________
 120+ E409             >//              Dictionary part
 120+ E409             >
 120+ E409             >                org     Dict_Ptr
 120+ 26E2             >
 120+ 26E2 07 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 26E4             >
 120+ 26E4             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 26E4 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 26E7             >
 120+ 26E7             >
 120+ 26E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 26E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 26E7             >
 120+ 26E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 26E7 00 00       >                dw      0
 121+ 26E9                              Constant_Def ONE        ,   "1"     ,   1
 121+ 26E9             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 26E9             >
 121+ 26E9             >Dict_Ptr        defl    $
 121+ 26E9             >
 121+ 26E9             >//              ______________________________________________________________________
 121+ 26E9             >//              Heap part
 121+ 26E9             >
 121+ 26E9             >
 121+ 26E9             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E409             >
 121+ E409             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E409             >Latest_Definition defl  Heap_Ptr
 121+ E409             >
 121+ E409             >                // dummy db directives used to calculate length of namec
 121+ E409 31          >                db      "1"
 121+ E40A             >len_NFA         defl    $ - temp_NFA
 121+ E40A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E409             >
 121+ E409 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E40A 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E40B             >                org     $-1                 // alter last byte of Name just above to set
 121+ E40A B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E40B             >
 121+ E40B 03 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40D             >Prev_Ptr        defl    Heap_Ptr
 121+ E40D             >
 121+ E40D             >mirror_Ptr      defl    $
 121+ E40D             >
 121+ E40D EB 26       >                dw      Dict_Ptr + 2        // xt
 121+ E40F             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40F             >
 121+ E40F             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40F             >
 121+ E40F             >//              ______________________________________________________________________
 121+ E40F             >//              Dictionary part
 121+ E40F             >
 121+ E40F             >                org     Dict_Ptr
 121+ 26E9             >
 121+ 26E9 0D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 26EB             >
 121+ 26EB             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 26EB CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 26EE             >
 121+ 26EE             >
 121+ 26EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 26EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 26EE             >
 121+ 26EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 26EE 01 00       >                dw      1
 122+ 26F0                              Constant_Def TWO        ,   "2"     ,   2
 122+ 26F0             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 26F0             >
 122+ 26F0             >Dict_Ptr        defl    $
 122+ 26F0             >
 122+ 26F0             >//              ______________________________________________________________________
 122+ 26F0             >//              Heap part
 122+ 26F0             >
 122+ 26F0             >
 122+ 26F0             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40F             >
 122+ E40F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40F             >Latest_Definition defl  Heap_Ptr
 122+ E40F             >
 122+ E40F             >                // dummy db directives used to calculate length of namec
 122+ E40F 32          >                db      "2"
 122+ E410             >len_NFA         defl    $ - temp_NFA
 122+ E410             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40F             >
 122+ E40F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E410 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E411             >                org     $-1                 // alter last byte of Name just above to set
 122+ E410 B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E411             >
 122+ E411 09 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E413             >Prev_Ptr        defl    Heap_Ptr
 122+ E413             >
 122+ E413             >mirror_Ptr      defl    $
 122+ E413             >
 122+ E413 F2 26       >                dw      Dict_Ptr + 2        // xt
 122+ E415             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E415             >
 122+ E415             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E415             >
 122+ E415             >//              ______________________________________________________________________
 122+ E415             >//              Dictionary part
 122+ E415             >
 122+ E415             >                org     Dict_Ptr
 122+ 26F0             >
 122+ 26F0 13 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 26F2             >
 122+ 26F2             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 26F2 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 26F5             >
 122+ 26F5             >
 122+ 26F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 26F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 26F5             >
 122+ 26F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 26F5 02 00       >                dw      2
 123+ 26F7                              Constant_Def THREE      ,   "3"     ,   3
 123+ 26F7             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 26F7             >
 123+ 26F7             >Dict_Ptr        defl    $
 123+ 26F7             >
 123+ 26F7             >//              ______________________________________________________________________
 123+ 26F7             >//              Heap part
 123+ 26F7             >
 123+ 26F7             >
 123+ 26F7             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E415             >
 123+ E415             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E415             >Latest_Definition defl  Heap_Ptr
 123+ E415             >
 123+ E415             >                // dummy db directives used to calculate length of namec
 123+ E415 33          >                db      "3"
 123+ E416             >len_NFA         defl    $ - temp_NFA
 123+ E416             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E415             >
 123+ E415 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E416 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E417             >                org     $-1                 // alter last byte of Name just above to set
 123+ E416 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E417             >
 123+ E417 0F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E419             >Prev_Ptr        defl    Heap_Ptr
 123+ E419             >
 123+ E419             >mirror_Ptr      defl    $
 123+ E419             >
 123+ E419 F9 26       >                dw      Dict_Ptr + 2        // xt
 123+ E41B             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E41B             >
 123+ E41B             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E41B             >
 123+ E41B             >//              ______________________________________________________________________
 123+ E41B             >//              Dictionary part
 123+ E41B             >
 123+ E41B             >                org     Dict_Ptr
 123+ 26F7             >
 123+ 26F7 19 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 26F9             >
 123+ 26F9             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 26F9 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 26FC             >
 123+ 26FC             >
 123+ 26FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 26FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 26FC             >
 123+ 26FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 26FC 03 00       >                dw      3
 124+ 26FE                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 26FE             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 26FE             >
 124+ 26FE             >Dict_Ptr        defl    $
 124+ 26FE             >
 124+ 26FE             >//              ______________________________________________________________________
 124+ 26FE             >//              Heap part
 124+ 26FE             >
 124+ 26FE             >
 124+ 26FE             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E41B             >
 124+ E41B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E41B             >Latest_Definition defl  Heap_Ptr
 124+ E41B             >
 124+ E41B             >                // dummy db directives used to calculate length of namec
 124+ E41B 2D 31       >                db      "-1"
 124+ E41D             >len_NFA         defl    $ - temp_NFA
 124+ E41D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E41B             >
 124+ E41B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41C 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41E             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41D B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41E             >
 124+ E41E 15 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E420             >Prev_Ptr        defl    Heap_Ptr
 124+ E420             >
 124+ E420             >mirror_Ptr      defl    $
 124+ E420             >
 124+ E420 00 27       >                dw      Dict_Ptr + 2        // xt
 124+ E422             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E422             >
 124+ E422             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E422             >
 124+ E422             >//              ______________________________________________________________________
 124+ E422             >//              Dictionary part
 124+ E422             >
 124+ E422             >                org     Dict_Ptr
 124+ 26FE             >
 124+ 26FE 20 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2700             >
 124+ 2700             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2700 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 2703             >
 124+ 2703             >
 124+ 2703             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 2703             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 2703             >
 124+ 2703             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 2703 FF FF       >                dw      -1
 125+ 2705                              Constant_Def BL         ,   "BL"    , $20
 125+ 2705             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 2705             >
 125+ 2705             >Dict_Ptr        defl    $
 125+ 2705             >
 125+ 2705             >//              ______________________________________________________________________
 125+ 2705             >//              Heap part
 125+ 2705             >
 125+ 2705             >
 125+ 2705             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E422             >
 125+ E422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E422             >Latest_Definition defl  Heap_Ptr
 125+ E422             >
 125+ E422             >                // dummy db directives used to calculate length of namec
 125+ E422 42 4C       >                db      "BL"
 125+ E424             >len_NFA         defl    $ - temp_NFA
 125+ E424             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E422             >
 125+ E422 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E423 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E425             >                org     $-1                 // alter last byte of Name just above to set
 125+ E424 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E425             >
 125+ E425 1B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E427             >Prev_Ptr        defl    Heap_Ptr
 125+ E427             >
 125+ E427             >mirror_Ptr      defl    $
 125+ E427             >
 125+ E427 07 27       >                dw      Dict_Ptr + 2        // xt
 125+ E429             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E429             >
 125+ E429             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E429             >
 125+ E429             >//              ______________________________________________________________________
 125+ E429             >//              Dictionary part
 125+ E429             >
 125+ E429             >                org     Dict_Ptr
 125+ 2705             >
 125+ 2705 27 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 2707             >
 125+ 2707             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 2707 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 270A             >
 125+ 270A             >
 125+ 270A             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 270A             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 270A             >
 125+ 270A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 270A 20 00       >                dw      $20
 126+ 270C                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 270C             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 270C             >
 126+ 270C             >Dict_Ptr        defl    $
 126+ 270C             >
 126+ 270C             >//              ______________________________________________________________________
 126+ 270C             >//              Heap part
 126+ 270C             >
 126+ 270C             >
 126+ 270C             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E429             >
 126+ E429             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E429             >Latest_Definition defl  Heap_Ptr
 126+ E429             >
 126+ E429             >                // dummy db directives used to calculate length of namec
 126+ E429 43 2F 4C    >                db      "C/L"
 126+ E42C             >len_NFA         defl    $ - temp_NFA
 126+ E42C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E429             >
 126+ E429 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E42A 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42D             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42C CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42D             >
 126+ E42D 22 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42F             >Prev_Ptr        defl    Heap_Ptr
 126+ E42F             >
 126+ E42F             >mirror_Ptr      defl    $
 126+ E42F             >
 126+ E42F 0E 27       >                dw      Dict_Ptr + 2        // xt
 126+ E431             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E431             >
 126+ E431             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E431             >
 126+ E431             >//              ______________________________________________________________________
 126+ E431             >//              Dictionary part
 126+ E431             >
 126+ E431             >                org     Dict_Ptr
 126+ 270C             >
 126+ 270C 2F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 270E             >
 126+ 270E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 270E CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2711             >
 126+ 2711             >
 126+ 2711             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2711             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2711             >
 126+ 2711             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2711 40 00       >                dw      64
 127+ 2713                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 2713             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 2713             >
 127+ 2713             >Dict_Ptr        defl    $
 127+ 2713             >
 127+ 2713             >//              ______________________________________________________________________
 127+ 2713             >//              Heap part
 127+ 2713             >
 127+ 2713             >
 127+ 2713             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E431             >
 127+ E431             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E431             >Latest_Definition defl  Heap_Ptr
 127+ E431             >
 127+ E431             >                // dummy db directives used to calculate length of namec
 127+ E431 42 2F 42 55 >                db      "B/BUF"
 127+ E435 46          >
 127+ E436             >len_NFA         defl    $ - temp_NFA
 127+ E436             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E431             >
 127+ E431 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E432 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E436 46          >
 127+ E437             >                org     $-1                 // alter last byte of Name just above to set
 127+ E436 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E437             >
 127+ E437 29 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E439             >Prev_Ptr        defl    Heap_Ptr
 127+ E439             >
 127+ E439             >mirror_Ptr      defl    $
 127+ E439             >
 127+ E439 15 27       >                dw      Dict_Ptr + 2        // xt
 127+ E43B             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E43B             >
 127+ E43B             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E43B             >
 127+ E43B             >//              ______________________________________________________________________
 127+ E43B             >//              Dictionary part
 127+ E43B             >
 127+ E43B             >                org     Dict_Ptr
 127+ 2713             >
 127+ 2713 39 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 2715             >
 127+ 2715             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 2715 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 2718             >
 127+ 2718             >
 127+ 2718             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 2718             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 2718             >
 127+ 2718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 2718 00 02       >                dw      512
 128+ 271A                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 271A             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 271A             >
 128+ 271A             >Dict_Ptr        defl    $
 128+ 271A             >
 128+ 271A             >//              ______________________________________________________________________
 128+ 271A             >//              Heap part
 128+ 271A             >
 128+ 271A             >
 128+ 271A             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E43B             >
 128+ E43B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E43B             >Latest_Definition defl  Heap_Ptr
 128+ E43B             >
 128+ E43B             >                // dummy db directives used to calculate length of namec
 128+ E43B 42 2F 53 43 >                db      "B/SCR"
 128+ E43F 52          >
 128+ E440             >len_NFA         defl    $ - temp_NFA
 128+ E440             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E43B             >
 128+ E43B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43C 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E440 52          >
 128+ E441             >                org     $-1                 // alter last byte of Name just above to set
 128+ E440 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E441             >
 128+ E441 31 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E443             >Prev_Ptr        defl    Heap_Ptr
 128+ E443             >
 128+ E443             >mirror_Ptr      defl    $
 128+ E443             >
 128+ E443 1C 27       >                dw      Dict_Ptr + 2        // xt
 128+ E445             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E445             >
 128+ E445             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E445             >
 128+ E445             >//              ______________________________________________________________________
 128+ E445             >//              Dictionary part
 128+ E445             >
 128+ E445             >                org     Dict_Ptr
 128+ 271A             >
 128+ 271A 43 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 271C             >
 128+ 271C             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 271C CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 271F             >
 128+ 271F             >
 128+ 271F             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 271F             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 271F             >
 128+ 271F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 271F 02 00       >                dw      2
 129+ 2721                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2721             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2721             >
 129+ 2721             >Dict_Ptr        defl    $
 129+ 2721             >
 129+ 2721             >//              ______________________________________________________________________
 129+ 2721             >//              Heap part
 129+ 2721             >
 129+ 2721             >
 129+ 2721             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E445             >
 129+ E445             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E445             >Latest_Definition defl  Heap_Ptr
 129+ E445             >
 129+ E445             >                // dummy db directives used to calculate length of namec
 129+ E445 4C 2F 53 43 >                db      "L/SCR"
 129+ E449 52          >
 129+ E44A             >len_NFA         defl    $ - temp_NFA
 129+ E44A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E445             >
 129+ E445 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E446 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E44A 52          >
 129+ E44B             >                org     $-1                 // alter last byte of Name just above to set
 129+ E44A D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E44B             >
 129+ E44B 3B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44D             >Prev_Ptr        defl    Heap_Ptr
 129+ E44D             >
 129+ E44D             >mirror_Ptr      defl    $
 129+ E44D             >
 129+ E44D 23 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44F             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44F             >
 129+ E44F             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44F             >
 129+ E44F             >//              ______________________________________________________________________
 129+ E44F             >//              Dictionary part
 129+ E44F             >
 129+ E44F             >                org     Dict_Ptr
 129+ 2721             >
 129+ 2721 4D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 2723             >
 129+ 2723             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 2723 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 2726             >
 129+ 2726             >
 129+ 2726             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 2726             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 2726             >
 129+ 2726             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 2726 10 00       >                dw      16
 130+ 2728
 131+ 2728              //  ______________________________________________________________________
 132+ 2728              //
 133+ 2728              // +origin         --
 134+ 2728              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 2728              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 2728              //              dw      PLUS                    // +
 137+ 2728              //              dw      EXIT                    // ;
 138+ 2728                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 2728             >
 138+ 2728             >Dict_Ptr        defl    $
 138+ 2728             >
 138+ 2728             >//              ______________________________________________________________________
 138+ 2728             >//              Heap part
 138+ 2728             >
 138+ 2728             >
 138+ 2728             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44F             >
 138+ E44F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44F             >Latest_Definition defl  Heap_Ptr
 138+ E44F             >
 138+ E44F             >                // dummy db directives used to calculate length of namec
 138+ E44F 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E453 47 49 4E    >
 138+ E456             >len_NFA         defl    $ - temp_NFA
 138+ E456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44F             >
 138+ E44F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E450 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E454 47 49 4E    >
 138+ E457             >                org     $-1                 // alter last byte of Name just above to set
 138+ E456 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E457             >
 138+ E457 45 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E459             >Prev_Ptr        defl    Heap_Ptr
 138+ E459             >
 138+ E459             >mirror_Ptr      defl    $
 138+ E459             >
 138+ E459 2A 27       >                dw      Dict_Ptr + 2        // xt
 138+ E45B             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E45B             >
 138+ E45B             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E45B             >
 138+ E45B             >//              ______________________________________________________________________
 138+ E45B             >//              Dictionary part
 138+ E45B             >
 138+ E45B             >                org     Dict_Ptr
 138+ 2728             >
 138+ 2728 59 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 272A             >
 138+ 272A             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 272A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 272A ~           >
 138+ 272A ~           >
 138+ 272A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 272A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 272A             >
 138+ 272A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 272A D9                           exx
 140+ 272B E1                           pop     hl
 141+ 272C 11 00 20                     ld      de, Cold_origin
 142+ 272F 19                           add     hl, de
 143+ 2730 E5                           push    hl
 144+ 2731 D9                           exx
 145+ 2732                              next
 145+ 2732 DD E9       >                jp      (ix)
 146+ 2734
 147+ 2734
 148+ 2734              //  ______________________________________________________________________
 149+ 2734              //
 150+ 2734                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 2734             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 2734             >
 150+ 2734             >Dict_Ptr        defl    $
 150+ 2734             >
 150+ 2734             >//              ______________________________________________________________________
 150+ 2734             >//              Heap part
 150+ 2734             >
 150+ 2734             >
 150+ 2734             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E45B             >
 150+ E45B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E45B             >Latest_Definition defl  Heap_Ptr
 150+ E45B             >
 150+ E45B             >                // dummy db directives used to calculate length of namec
 150+ E45B 28 4E 45 58 >                db      "(NEXT)"
 150+ E45F 54 29       >
 150+ E461             >len_NFA         defl    $ - temp_NFA
 150+ E461             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E45B             >
 150+ E45B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45C 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E460 54 29       >
 150+ E462             >                org     $-1                 // alter last byte of Name just above to set
 150+ E461 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E462             >
 150+ E462 4F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E464             >Prev_Ptr        defl    Heap_Ptr
 150+ E464             >
 150+ E464             >mirror_Ptr      defl    $
 150+ E464             >
 150+ E464 36 27       >                dw      Dict_Ptr + 2        // xt
 150+ E466             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E466             >
 150+ E466             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E466             >
 150+ E466             >//              ______________________________________________________________________
 150+ E466             >//              Dictionary part
 150+ E466             >
 150+ E466             >                org     Dict_Ptr
 150+ 2734             >
 150+ 2734 64 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 2736             >
 150+ 2736             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 2736 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 2739             >
 150+ 2739             >
 150+ 2739             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 2739             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 2739             >
 150+ 2739             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 2739 34 20       >                dw      Next_Ptr
 151+ 273B
 152+ 273B              //  ______________________________________________________________________
 153+ 273B              //
 154+ 273B
 155+ 273B                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 273B             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 273B             >
 155+ 273B             >Dict_Ptr        defl    $
 155+ 273B             >
 155+ 273B             >//              ______________________________________________________________________
 155+ 273B             >//              Heap part
 155+ 273B             >
 155+ 273B             >
 155+ 273B             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E466             >
 155+ E466             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E466             >Latest_Definition defl  Heap_Ptr
 155+ E466             >
 155+ E466             >                // dummy db directives used to calculate length of namec
 155+ E466 53 30       >                db      "S0"
 155+ E468             >len_NFA         defl    $ - temp_NFA
 155+ E468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E466             >
 155+ E466 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E467 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E469             >                org     $-1                 // alter last byte of Name just above to set
 155+ E468 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E469             >
 155+ E469 5B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E46B             >Prev_Ptr        defl    Heap_Ptr
 155+ E46B             >
 155+ E46B             >mirror_Ptr      defl    $
 155+ E46B             >
 155+ E46B 3D 27       >                dw      Dict_Ptr + 2        // xt
 155+ E46D             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46D             >
 155+ E46D             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46D             >
 155+ E46D             >//              ______________________________________________________________________
 155+ E46D             >//              Dictionary part
 155+ E46D             >
 155+ E46D             >                org     Dict_Ptr
 155+ 273B             >
 155+ 273B 6B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 273D             >
 155+ 273D             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 273D CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 2740             >
 155+ 2740             >
 155+ 2740             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 2740             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 2740             >
 155+ 2740             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 2740 06          >                db      06
 156+ 2741                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 2741             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 2741             >
 156+ 2741             >Dict_Ptr        defl    $
 156+ 2741             >
 156+ 2741             >//              ______________________________________________________________________
 156+ 2741             >//              Heap part
 156+ 2741             >
 156+ 2741             >
 156+ 2741             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46D             >
 156+ E46D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46D             >Latest_Definition defl  Heap_Ptr
 156+ E46D             >
 156+ E46D             >                // dummy db directives used to calculate length of namec
 156+ E46D 52 30       >                db      "R0"
 156+ E46F             >len_NFA         defl    $ - temp_NFA
 156+ E46F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46D             >
 156+ E46D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46E 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E470             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46F B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E470             >
 156+ E470 66 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E472             >Prev_Ptr        defl    Heap_Ptr
 156+ E472             >
 156+ E472             >mirror_Ptr      defl    $
 156+ E472             >
 156+ E472 43 27       >                dw      Dict_Ptr + 2        // xt
 156+ E474             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E474             >
 156+ E474             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E474             >
 156+ E474             >//              ______________________________________________________________________
 156+ E474             >//              Dictionary part
 156+ E474             >
 156+ E474             >                org     Dict_Ptr
 156+ 2741             >
 156+ 2741 72 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 2743             >
 156+ 2743             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 2743 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 2746             >
 156+ 2746             >
 156+ 2746             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 2746             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 2746             >
 156+ 2746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 2746 08          >                db      08
 157+ 2747                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 2747             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 2747             >
 157+ 2747             >Dict_Ptr        defl    $
 157+ 2747             >
 157+ 2747             >//              ______________________________________________________________________
 157+ 2747             >//              Heap part
 157+ 2747             >
 157+ 2747             >
 157+ 2747             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E474             >
 157+ E474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E474             >Latest_Definition defl  Heap_Ptr
 157+ E474             >
 157+ E474             >                // dummy db directives used to calculate length of namec
 157+ E474 54 49 42    >                db      "TIB"
 157+ E477             >len_NFA         defl    $ - temp_NFA
 157+ E477             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E474             >
 157+ E474 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E475 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E478             >                org     $-1                 // alter last byte of Name just above to set
 157+ E477 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E478             >
 157+ E478 6D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E47A             >Prev_Ptr        defl    Heap_Ptr
 157+ E47A             >
 157+ E47A             >mirror_Ptr      defl    $
 157+ E47A             >
 157+ E47A 49 27       >                dw      Dict_Ptr + 2        // xt
 157+ E47C             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47C             >
 157+ E47C             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47C             >
 157+ E47C             >//              ______________________________________________________________________
 157+ E47C             >//              Dictionary part
 157+ E47C             >
 157+ E47C             >                org     Dict_Ptr
 157+ 2747             >
 157+ 2747 7A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 2749             >
 157+ 2749             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 2749 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 274C             >
 157+ 274C             >
 157+ 274C             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 274C             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 274C             >
 157+ 274C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 274C 0A          >                db      10
 158+ 274D                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 274D             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 274D             >
 158+ 274D             >Dict_Ptr        defl    $
 158+ 274D             >
 158+ 274D             >//              ______________________________________________________________________
 158+ 274D             >//              Heap part
 158+ 274D             >
 158+ 274D             >
 158+ 274D             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47C             >
 158+ E47C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47C             >Latest_Definition defl  Heap_Ptr
 158+ E47C             >
 158+ E47C             >                // dummy db directives used to calculate length of namec
 158+ E47C 57 49 44 54 >                db      "WIDTH"
 158+ E480 48          >
 158+ E481             >len_NFA         defl    $ - temp_NFA
 158+ E481             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47C             >
 158+ E47C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47D 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E481 48          >
 158+ E482             >                org     $-1                 // alter last byte of Name just above to set
 158+ E481 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E482             >
 158+ E482 74 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E484             >Prev_Ptr        defl    Heap_Ptr
 158+ E484             >
 158+ E484             >mirror_Ptr      defl    $
 158+ E484             >
 158+ E484 4F 27       >                dw      Dict_Ptr + 2        // xt
 158+ E486             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E486             >
 158+ E486             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E486             >
 158+ E486             >//              ______________________________________________________________________
 158+ E486             >//              Dictionary part
 158+ E486             >
 158+ E486             >                org     Dict_Ptr
 158+ 274D             >
 158+ 274D 84 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 274F             >
 158+ 274F             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 274F CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 2752             >
 158+ 2752             >
 158+ 2752             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 2752             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 2752             >
 158+ 2752             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 2752 0C          >                db      12
 159+ 2753                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 2753             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 2753             >
 159+ 2753             >Dict_Ptr        defl    $
 159+ 2753             >
 159+ 2753             >//              ______________________________________________________________________
 159+ 2753             >//              Heap part
 159+ 2753             >
 159+ 2753             >
 159+ 2753             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E486             >
 159+ E486             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E486             >Latest_Definition defl  Heap_Ptr
 159+ E486             >
 159+ E486             >                // dummy db directives used to calculate length of namec
 159+ E486 57 41 52 4E >                db      "WARNING"
 159+ E48A 49 4E 47    >
 159+ E48D             >len_NFA         defl    $ - temp_NFA
 159+ E48D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E486             >
 159+ E486 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E487 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E48B 49 4E 47    >
 159+ E48E             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48D C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48E             >
 159+ E48E 7C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E490             >Prev_Ptr        defl    Heap_Ptr
 159+ E490             >
 159+ E490             >mirror_Ptr      defl    $
 159+ E490             >
 159+ E490 55 27       >                dw      Dict_Ptr + 2        // xt
 159+ E492             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E492             >
 159+ E492             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E492             >
 159+ E492             >//              ______________________________________________________________________
 159+ E492             >//              Dictionary part
 159+ E492             >
 159+ E492             >                org     Dict_Ptr
 159+ 2753             >
 159+ 2753 90 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 2755             >
 159+ 2755             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 2755 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 2758             >
 159+ 2758             >
 159+ 2758             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 2758             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 2758             >
 159+ 2758             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 2758 0E          >                db      14
 160+ 2759                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 2759             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 2759             >
 160+ 2759             >Dict_Ptr        defl    $
 160+ 2759             >
 160+ 2759             >//              ______________________________________________________________________
 160+ 2759             >//              Heap part
 160+ 2759             >
 160+ 2759             >
 160+ 2759             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E492             >
 160+ E492             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E492             >Latest_Definition defl  Heap_Ptr
 160+ E492             >
 160+ E492             >                // dummy db directives used to calculate length of namec
 160+ E492 46 45 4E 43 >                db      "FENCE"
 160+ E496 45          >
 160+ E497             >len_NFA         defl    $ - temp_NFA
 160+ E497             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E492             >
 160+ E492 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E493 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E497 45          >
 160+ E498             >                org     $-1                 // alter last byte of Name just above to set
 160+ E497 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E498             >
 160+ E498 86 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E49A             >Prev_Ptr        defl    Heap_Ptr
 160+ E49A             >
 160+ E49A             >mirror_Ptr      defl    $
 160+ E49A             >
 160+ E49A 5B 27       >                dw      Dict_Ptr + 2        // xt
 160+ E49C             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49C             >
 160+ E49C             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49C             >
 160+ E49C             >//              ______________________________________________________________________
 160+ E49C             >//              Dictionary part
 160+ E49C             >
 160+ E49C             >                org     Dict_Ptr
 160+ 2759             >
 160+ 2759 9A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 275B             >
 160+ 275B             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 275B CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 275E             >
 160+ 275E             >
 160+ 275E             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 275E             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 275E             >
 160+ 275E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 275E 10          >                db      16
 161+ 275F                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 275F             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 275F             >
 161+ 275F             >Dict_Ptr        defl    $
 161+ 275F             >
 161+ 275F             >//              ______________________________________________________________________
 161+ 275F             >//              Heap part
 161+ 275F             >
 161+ 275F             >
 161+ 275F             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49C             >
 161+ E49C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49C             >Latest_Definition defl  Heap_Ptr
 161+ E49C             >
 161+ E49C             >                // dummy db directives used to calculate length of namec
 161+ E49C 44 50       >                db      "DP"
 161+ E49E             >len_NFA         defl    $ - temp_NFA
 161+ E49E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49C             >
 161+ E49C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49D 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49F             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49E D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49F             >
 161+ E49F 92 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A1             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A1             >
 161+ E4A1             >mirror_Ptr      defl    $
 161+ E4A1             >
 161+ E4A1 61 27       >                dw      Dict_Ptr + 2        // xt
 161+ E4A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A3             >
 161+ E4A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A3             >
 161+ E4A3             >//              ______________________________________________________________________
 161+ E4A3             >//              Dictionary part
 161+ E4A3             >
 161+ E4A3             >                org     Dict_Ptr
 161+ 275F             >
 161+ 275F A1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 2761             >
 161+ 2761             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 2761 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 2764             >
 161+ 2764             >
 161+ 2764             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 2764             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 2764             >
 161+ 2764             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 2764 12          >                db      18
 162+ 2765                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 2765             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 2765             >
 162+ 2765             >Dict_Ptr        defl    $
 162+ 2765             >
 162+ 2765             >//              ______________________________________________________________________
 162+ 2765             >//              Heap part
 162+ 2765             >
 162+ 2765             >
 162+ 2765             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A3             >
 162+ E4A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A3             >Latest_Definition defl  Heap_Ptr
 162+ E4A3             >
 162+ E4A3             >                // dummy db directives used to calculate length of namec
 162+ E4A3 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A7 4C 49 4E 4B >
 162+ E4AB             >len_NFA         defl    $ - temp_NFA
 162+ E4AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A3             >
 162+ E4A3 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A4 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A8 4C 49 4E 4B >
 162+ E4AC             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4AB CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AC             >
 162+ E4AC 9C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AE             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AE             >
 162+ E4AE             >mirror_Ptr      defl    $
 162+ E4AE             >
 162+ E4AE 67 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4B0             >
 162+ E4B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4B0             >
 162+ E4B0             >//              ______________________________________________________________________
 162+ E4B0             >//              Dictionary part
 162+ E4B0             >
 162+ E4B0             >                org     Dict_Ptr
 162+ 2765             >
 162+ 2765 AE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2767             >
 162+ 2767             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 2767 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 276A             >
 162+ 276A             >
 162+ 276A             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 276A             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 276A             >
 162+ 276A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 276A 14          >                db      20
 163+ 276B                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 276B             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 276B             >
 163+ 276B             >Dict_Ptr        defl    $
 163+ 276B             >
 163+ 276B             >//              ______________________________________________________________________
 163+ 276B             >//              Heap part
 163+ 276B             >
 163+ 276B             >
 163+ 276B             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4B0             >
 163+ E4B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4B0             >Latest_Definition defl  Heap_Ptr
 163+ E4B0             >
 163+ E4B0             >                // dummy db directives used to calculate length of namec
 163+ E4B0 46 49 52 53 >                db      "FIRST"
 163+ E4B4 54          >
 163+ E4B5             >len_NFA         defl    $ - temp_NFA
 163+ E4B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4B0             >
 163+ E4B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B1 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B5 54          >
 163+ E4B6             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B5 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B6             >
 163+ E4B6 A3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B8             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B8             >
 163+ E4B8             >mirror_Ptr      defl    $
 163+ E4B8             >
 163+ E4B8 6D 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4BA             >
 163+ E4BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4BA             >
 163+ E4BA             >//              ______________________________________________________________________
 163+ E4BA             >//              Dictionary part
 163+ E4BA             >
 163+ E4BA             >                org     Dict_Ptr
 163+ 276B             >
 163+ 276B B8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 276D             >
 163+ 276D             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 276D CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 2770             >
 163+ 2770             >
 163+ 2770             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 2770             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 2770             >
 163+ 2770             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 2770 16          >                db      22
 164+ 2771                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 2771             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 2771             >
 164+ 2771             >Dict_Ptr        defl    $
 164+ 2771             >
 164+ 2771             >//              ______________________________________________________________________
 164+ 2771             >//              Heap part
 164+ 2771             >
 164+ 2771             >
 164+ 2771             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4BA             >
 164+ E4BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4BA             >Latest_Definition defl  Heap_Ptr
 164+ E4BA             >
 164+ E4BA             >                // dummy db directives used to calculate length of namec
 164+ E4BA 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BE 54          >
 164+ E4BF             >len_NFA         defl    $ - temp_NFA
 164+ E4BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4BA             >
 164+ E4BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4BB 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BF 54          >
 164+ E4C0             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BF D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4C0             >
 164+ E4C0 B0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C2             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C2             >
 164+ E4C2             >mirror_Ptr      defl    $
 164+ E4C2             >
 164+ E4C2 73 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C4             >
 164+ E4C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C4             >
 164+ E4C4             >//              ______________________________________________________________________
 164+ E4C4             >//              Dictionary part
 164+ E4C4             >
 164+ E4C4             >                org     Dict_Ptr
 164+ 2771             >
 164+ 2771 C2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 2773             >
 164+ 2773             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2773 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 2776             >
 164+ 2776             >
 164+ 2776             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 2776             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 2776             >
 164+ 2776             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 2776 18          >                db      24
 165+ 2777                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 2777             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 2777             >
 165+ 2777             >Dict_Ptr        defl    $
 165+ 2777             >
 165+ 2777             >//              ______________________________________________________________________
 165+ 2777             >//              Heap part
 165+ 2777             >
 165+ 2777             >
 165+ 2777             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C4             >
 165+ E4C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C4             >Latest_Definition defl  Heap_Ptr
 165+ E4C4             >
 165+ E4C4             >                // dummy db directives used to calculate length of namec
 165+ E4C4 48 50       >                db      "HP"
 165+ E4C6             >len_NFA         defl    $ - temp_NFA
 165+ E4C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C4             >
 165+ E4C4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C5 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C7             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C6 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C7             >
 165+ E4C7 BA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C9             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C9             >
 165+ E4C9             >mirror_Ptr      defl    $
 165+ E4C9             >
 165+ E4C9 79 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4CB             >
 165+ E4CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4CB             >
 165+ E4CB             >//              ______________________________________________________________________
 165+ E4CB             >//              Dictionary part
 165+ E4CB             >
 165+ E4CB             >                org     Dict_Ptr
 165+ 2777             >
 165+ 2777 C9 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 2779             >
 165+ 2779             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 2779 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 277C             >
 165+ 277C             >
 165+ 277C             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 277C             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 277C             >
 165+ 277C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 277C 1A          >                db      26
 166+ 277D                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 277D             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 277D             >
 166+ 277D             >Dict_Ptr        defl    $
 166+ 277D             >
 166+ 277D             >//              ______________________________________________________________________
 166+ 277D             >//              Heap part
 166+ 277D             >
 166+ 277D             >
 166+ 277D             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4CB             >
 166+ E4CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4CB             >Latest_Definition defl  Heap_Ptr
 166+ E4CB             >
 166+ E4CB             >                // dummy db directives used to calculate length of namec
 166+ E4CB 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CF 45          >
 166+ E4D0             >len_NFA         defl    $ - temp_NFA
 166+ E4D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4CB             >
 166+ E4CB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CC 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4D0 45          >
 166+ E4D1             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4D0 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D1             >
 166+ E4D1 C4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D3             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D3             >
 166+ E4D3             >mirror_Ptr      defl    $
 166+ E4D3             >
 166+ E4D3 7F 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D5             >
 166+ E4D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D5             >
 166+ E4D5             >//              ______________________________________________________________________
 166+ E4D5             >//              Dictionary part
 166+ E4D5             >
 166+ E4D5             >                org     Dict_Ptr
 166+ 277D             >
 166+ 277D D3 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 277F             >
 166+ 277F             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 277F CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 2782             >
 166+ 2782             >
 166+ 2782             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 2782             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 2782             >
 166+ 2782             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 2782 1C          >                db      28
 167+ 2783                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 2783             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 2783             >
 167+ 2783             >Dict_Ptr        defl    $
 167+ 2783             >
 167+ 2783             >//              ______________________________________________________________________
 167+ 2783             >//              Heap part
 167+ 2783             >
 167+ 2783             >
 167+ 2783             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D5             >
 167+ E4D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D5             >Latest_Definition defl  Heap_Ptr
 167+ E4D5             >
 167+ E4D5             >                // dummy db directives used to calculate length of namec
 167+ E4D5 42 4C 4B    >                db      "BLK"
 167+ E4D8             >len_NFA         defl    $ - temp_NFA
 167+ E4D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D5             >
 167+ E4D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D6 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D9             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D8 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D9             >
 167+ E4D9 CB 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4DB             >Prev_Ptr        defl    Heap_Ptr
 167+ E4DB             >
 167+ E4DB             >mirror_Ptr      defl    $
 167+ E4DB             >
 167+ E4DB 85 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DD             >
 167+ E4DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DD             >
 167+ E4DD             >//              ______________________________________________________________________
 167+ E4DD             >//              Dictionary part
 167+ E4DD             >
 167+ E4DD             >                org     Dict_Ptr
 167+ 2783             >
 167+ 2783 DB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 2785             >
 167+ 2785             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 2785 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 2788             >
 167+ 2788             >
 167+ 2788             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 2788             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 2788             >
 167+ 2788             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 2788 1E          >                db      30
 168+ 2789                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 2789             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 2789             >
 168+ 2789             >Dict_Ptr        defl    $
 168+ 2789             >
 168+ 2789             >//              ______________________________________________________________________
 168+ 2789             >//              Heap part
 168+ 2789             >
 168+ 2789             >
 168+ 2789             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DD             >
 168+ E4DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DD             >Latest_Definition defl  Heap_Ptr
 168+ E4DD             >
 168+ E4DD             >                // dummy db directives used to calculate length of namec
 168+ E4DD 3E 49 4E    >                db      ">IN"
 168+ E4E0             >len_NFA         defl    $ - temp_NFA
 168+ E4E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DD             >
 168+ E4DD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DE 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E1             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4E0 CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E1             >
 168+ E4E1 D5 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E3             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E3             >
 168+ E4E3             >mirror_Ptr      defl    $
 168+ E4E3             >
 168+ E4E3 8B 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E5             >
 168+ E4E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E5             >
 168+ E4E5             >//              ______________________________________________________________________
 168+ E4E5             >//              Dictionary part
 168+ E4E5             >
 168+ E4E5             >                org     Dict_Ptr
 168+ 2789             >
 168+ 2789 E3 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 278B             >
 168+ 278B             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 278B CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 278E             >
 168+ 278E             >
 168+ 278E             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 278E             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 278E             >
 168+ 278E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 278E 20          >                db      32
 169+ 278F                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 278F             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 278F             >
 169+ 278F             >Dict_Ptr        defl    $
 169+ 278F             >
 169+ 278F             >//              ______________________________________________________________________
 169+ 278F             >//              Heap part
 169+ 278F             >
 169+ 278F             >
 169+ 278F             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E5             >
 169+ E4E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E5             >Latest_Definition defl  Heap_Ptr
 169+ E4E5             >
 169+ E4E5             >                // dummy db directives used to calculate length of namec
 169+ E4E5 4F 55 54    >                db      "OUT"
 169+ E4E8             >len_NFA         defl    $ - temp_NFA
 169+ E4E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E5             >
 169+ E4E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E6 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E9             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E8 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E9             >
 169+ E4E9 DD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4EB             >Prev_Ptr        defl    Heap_Ptr
 169+ E4EB             >
 169+ E4EB             >mirror_Ptr      defl    $
 169+ E4EB             >
 169+ E4EB 91 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4ED             >
 169+ E4ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4ED             >
 169+ E4ED             >//              ______________________________________________________________________
 169+ E4ED             >//              Dictionary part
 169+ E4ED             >
 169+ E4ED             >                org     Dict_Ptr
 169+ 278F             >
 169+ 278F EB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 2791             >
 169+ 2791             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 2791 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 2794             >
 169+ 2794             >
 169+ 2794             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 2794             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2794             >
 169+ 2794             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 2794 22          >                db      34
 170+ 2795                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 2795             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 2795             >
 170+ 2795             >Dict_Ptr        defl    $
 170+ 2795             >
 170+ 2795             >//              ______________________________________________________________________
 170+ 2795             >//              Heap part
 170+ 2795             >
 170+ 2795             >
 170+ 2795             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4ED             >
 170+ E4ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4ED             >Latest_Definition defl  Heap_Ptr
 170+ E4ED             >
 170+ E4ED             >                // dummy db directives used to calculate length of namec
 170+ E4ED 53 43 52    >                db      "SCR"
 170+ E4F0             >len_NFA         defl    $ - temp_NFA
 170+ E4F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4ED             >
 170+ E4ED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EE 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F1             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4F0 D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F1             >
 170+ E4F1 E5 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F3             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F3             >
 170+ E4F3             >mirror_Ptr      defl    $
 170+ E4F3             >
 170+ E4F3 97 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F5             >
 170+ E4F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F5             >
 170+ E4F5             >//              ______________________________________________________________________
 170+ E4F5             >//              Dictionary part
 170+ E4F5             >
 170+ E4F5             >                org     Dict_Ptr
 170+ 2795             >
 170+ 2795 F3 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 2797             >
 170+ 2797             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 2797 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 279A             >
 170+ 279A             >
 170+ 279A             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 279A             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 279A             >
 170+ 279A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 279A 24          >                db      36
 171+ 279B                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 279B             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 279B             >
 171+ 279B             >Dict_Ptr        defl    $
 171+ 279B             >
 171+ 279B             >//              ______________________________________________________________________
 171+ 279B             >//              Heap part
 171+ 279B             >
 171+ 279B             >
 171+ 279B             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F5             >
 171+ E4F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F5             >Latest_Definition defl  Heap_Ptr
 171+ E4F5             >
 171+ E4F5             >                // dummy db directives used to calculate length of namec
 171+ E4F5 4F 46 46 53 >                db      "OFFSET"
 171+ E4F9 45 54       >
 171+ E4FB             >len_NFA         defl    $ - temp_NFA
 171+ E4FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F5             >
 171+ E4F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F6 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4FA 45 54       >
 171+ E4FC             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4FB D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FC             >
 171+ E4FC ED 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FE             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FE             >
 171+ E4FE             >mirror_Ptr      defl    $
 171+ E4FE             >
 171+ E4FE 9D 27       >                dw      Dict_Ptr + 2        // xt
 171+ E500             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E500             >
 171+ E500             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E500             >
 171+ E500             >//              ______________________________________________________________________
 171+ E500             >//              Dictionary part
 171+ E500             >
 171+ E500             >                org     Dict_Ptr
 171+ 279B             >
 171+ 279B FE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 279D             >
 171+ 279D             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 279D CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 27A0             >
 171+ 27A0             >
 171+ 27A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 27A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 27A0             >
 171+ 27A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 27A0 26          >                db      38
 172+ 27A1                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 27A1             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 27A1             >
 172+ 27A1             >Dict_Ptr        defl    $
 172+ 27A1             >
 172+ 27A1             >//              ______________________________________________________________________
 172+ 27A1             >//              Heap part
 172+ 27A1             >
 172+ 27A1             >
 172+ 27A1             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E500             >
 172+ E500             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E500             >Latest_Definition defl  Heap_Ptr
 172+ E500             >
 172+ E500             >                // dummy db directives used to calculate length of namec
 172+ E500 43 4F 4E 54 >                db      "CONTEXT"
 172+ E504 45 58 54    >
 172+ E507             >len_NFA         defl    $ - temp_NFA
 172+ E507             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E500             >
 172+ E500 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E501 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E505 45 58 54    >
 172+ E508             >                org     $-1                 // alter last byte of Name just above to set
 172+ E507 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E508             >
 172+ E508 F5 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E50A             >Prev_Ptr        defl    Heap_Ptr
 172+ E50A             >
 172+ E50A             >mirror_Ptr      defl    $
 172+ E50A             >
 172+ E50A A3 27       >                dw      Dict_Ptr + 2        // xt
 172+ E50C             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50C             >
 172+ E50C             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50C             >
 172+ E50C             >//              ______________________________________________________________________
 172+ E50C             >//              Dictionary part
 172+ E50C             >
 172+ E50C             >                org     Dict_Ptr
 172+ 27A1             >
 172+ 27A1 0A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 27A3             >
 172+ 27A3             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 27A3 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 27A6             >
 172+ 27A6             >
 172+ 27A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 27A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 27A6             >
 172+ 27A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 27A6 28          >                db      40
 173+ 27A7                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 27A7             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 27A7             >
 173+ 27A7             >Dict_Ptr        defl    $
 173+ 27A7             >
 173+ 27A7             >//              ______________________________________________________________________
 173+ 27A7             >//              Heap part
 173+ 27A7             >
 173+ 27A7             >
 173+ 27A7             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50C             >
 173+ E50C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50C             >Latest_Definition defl  Heap_Ptr
 173+ E50C             >
 173+ E50C             >                // dummy db directives used to calculate length of namec
 173+ E50C 43 55 52 52 >                db      "CURRENT"
 173+ E510 45 4E 54    >
 173+ E513             >len_NFA         defl    $ - temp_NFA
 173+ E513             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50C             >
 173+ E50C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50D 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E511 45 4E 54    >
 173+ E514             >                org     $-1                 // alter last byte of Name just above to set
 173+ E513 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E514             >
 173+ E514 00 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E516             >Prev_Ptr        defl    Heap_Ptr
 173+ E516             >
 173+ E516             >mirror_Ptr      defl    $
 173+ E516             >
 173+ E516 A9 27       >                dw      Dict_Ptr + 2        // xt
 173+ E518             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E518             >
 173+ E518             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E518             >
 173+ E518             >//              ______________________________________________________________________
 173+ E518             >//              Dictionary part
 173+ E518             >
 173+ E518             >                org     Dict_Ptr
 173+ 27A7             >
 173+ 27A7 16 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 27A9             >
 173+ 27A9             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 27A9 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 27AC             >
 173+ 27AC             >
 173+ 27AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 27AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 27AC             >
 173+ 27AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 27AC 2A          >                db      42
 174+ 27AD                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 27AD             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 27AD             >
 174+ 27AD             >Dict_Ptr        defl    $
 174+ 27AD             >
 174+ 27AD             >//              ______________________________________________________________________
 174+ 27AD             >//              Heap part
 174+ 27AD             >
 174+ 27AD             >
 174+ 27AD             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E518             >
 174+ E518             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E518             >Latest_Definition defl  Heap_Ptr
 174+ E518             >
 174+ E518             >                // dummy db directives used to calculate length of namec
 174+ E518 53 54 41 54 >                db      "STATE"
 174+ E51C 45          >
 174+ E51D             >len_NFA         defl    $ - temp_NFA
 174+ E51D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E518             >
 174+ E518 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E519 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51D 45          >
 174+ E51E             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51D C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51E             >
 174+ E51E 0C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E520             >Prev_Ptr        defl    Heap_Ptr
 174+ E520             >
 174+ E520             >mirror_Ptr      defl    $
 174+ E520             >
 174+ E520 AF 27       >                dw      Dict_Ptr + 2        // xt
 174+ E522             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E522             >
 174+ E522             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E522             >
 174+ E522             >//              ______________________________________________________________________
 174+ E522             >//              Dictionary part
 174+ E522             >
 174+ E522             >                org     Dict_Ptr
 174+ 27AD             >
 174+ 27AD 20 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 27AF             >
 174+ 27AF             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 27AF CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 27B2             >
 174+ 27B2             >
 174+ 27B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 27B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 27B2             >
 174+ 27B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 27B2 2C          >                db      44
 175+ 27B3                              User_Def BASE       , "BASE"      , 46 //
 175+ 27B3             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 27B3             >
 175+ 27B3             >Dict_Ptr        defl    $
 175+ 27B3             >
 175+ 27B3             >//              ______________________________________________________________________
 175+ 27B3             >//              Heap part
 175+ 27B3             >
 175+ 27B3             >
 175+ 27B3             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E522             >
 175+ E522             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E522             >Latest_Definition defl  Heap_Ptr
 175+ E522             >
 175+ E522             >                // dummy db directives used to calculate length of namec
 175+ E522 42 41 53 45 >                db      "BASE"
 175+ E526             >len_NFA         defl    $ - temp_NFA
 175+ E526             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E522             >
 175+ E522 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E523 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E527             >                org     $-1                 // alter last byte of Name just above to set
 175+ E526 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E527             >
 175+ E527 18 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E529             >Prev_Ptr        defl    Heap_Ptr
 175+ E529             >
 175+ E529             >mirror_Ptr      defl    $
 175+ E529             >
 175+ E529 B5 27       >                dw      Dict_Ptr + 2        // xt
 175+ E52B             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E52B             >
 175+ E52B             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E52B             >
 175+ E52B             >//              ______________________________________________________________________
 175+ E52B             >//              Dictionary part
 175+ E52B             >
 175+ E52B             >                org     Dict_Ptr
 175+ 27B3             >
 175+ 27B3 29 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 27B5             >
 175+ 27B5             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 27B5 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 27B8             >
 175+ 27B8             >
 175+ 27B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 27B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 27B8             >
 175+ 27B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 27B8 2E          >                db      46
 176+ 27B9                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 27B9             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 27B9             >
 176+ 27B9             >Dict_Ptr        defl    $
 176+ 27B9             >
 176+ 27B9             >//              ______________________________________________________________________
 176+ 27B9             >//              Heap part
 176+ 27B9             >
 176+ 27B9             >
 176+ 27B9             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E52B             >
 176+ E52B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E52B             >Latest_Definition defl  Heap_Ptr
 176+ E52B             >
 176+ E52B             >                // dummy db directives used to calculate length of namec
 176+ E52B 44 50 4C    >                db      "DPL"
 176+ E52E             >len_NFA         defl    $ - temp_NFA
 176+ E52E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E52B             >
 176+ E52B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52C 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52F             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52E CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52F             >
 176+ E52F 22 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E531             >Prev_Ptr        defl    Heap_Ptr
 176+ E531             >
 176+ E531             >mirror_Ptr      defl    $
 176+ E531             >
 176+ E531 BB 27       >                dw      Dict_Ptr + 2        // xt
 176+ E533             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E533             >
 176+ E533             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E533             >
 176+ E533             >//              ______________________________________________________________________
 176+ E533             >//              Dictionary part
 176+ E533             >
 176+ E533             >                org     Dict_Ptr
 176+ 27B9             >
 176+ 27B9 31 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 27BB             >
 176+ 27BB             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 27BB CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 27BE             >
 176+ 27BE             >
 176+ 27BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 27BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 27BE             >
 176+ 27BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 27BE 30          >                db      48
 177+ 27BF                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 27BF             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 27BF             >
 177+ 27BF             >Dict_Ptr        defl    $
 177+ 27BF             >
 177+ 27BF             >//              ______________________________________________________________________
 177+ 27BF             >//              Heap part
 177+ 27BF             >
 177+ 27BF             >
 177+ 27BF             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E533             >
 177+ E533             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E533             >Latest_Definition defl  Heap_Ptr
 177+ E533             >
 177+ E533             >                // dummy db directives used to calculate length of namec
 177+ E533 46 4C 44    >                db      "FLD"
 177+ E536             >len_NFA         defl    $ - temp_NFA
 177+ E536             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E533             >
 177+ E533 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E534 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E537             >                org     $-1                 // alter last byte of Name just above to set
 177+ E536 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E537             >
 177+ E537 2B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E539             >Prev_Ptr        defl    Heap_Ptr
 177+ E539             >
 177+ E539             >mirror_Ptr      defl    $
 177+ E539             >
 177+ E539 C1 27       >                dw      Dict_Ptr + 2        // xt
 177+ E53B             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E53B             >
 177+ E53B             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E53B             >
 177+ E53B             >//              ______________________________________________________________________
 177+ E53B             >//              Dictionary part
 177+ E53B             >
 177+ E53B             >                org     Dict_Ptr
 177+ 27BF             >
 177+ 27BF 39 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 27C1             >
 177+ 27C1             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 27C1 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 27C4             >
 177+ 27C4             >
 177+ 27C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 27C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 27C4             >
 177+ 27C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 27C4 32          >                db      50
 178+ 27C5                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 27C5             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 27C5             >
 178+ 27C5             >Dict_Ptr        defl    $
 178+ 27C5             >
 178+ 27C5             >//              ______________________________________________________________________
 178+ 27C5             >//              Heap part
 178+ 27C5             >
 178+ 27C5             >
 178+ 27C5             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E53B             >
 178+ E53B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E53B             >Latest_Definition defl  Heap_Ptr
 178+ E53B             >
 178+ E53B             >                // dummy db directives used to calculate length of namec
 178+ E53B 43 53 50    >                db      "CSP"
 178+ E53E             >len_NFA         defl    $ - temp_NFA
 178+ E53E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E53B             >
 178+ E53B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53C 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53F             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53E D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53F             >
 178+ E53F 33 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E541             >Prev_Ptr        defl    Heap_Ptr
 178+ E541             >
 178+ E541             >mirror_Ptr      defl    $
 178+ E541             >
 178+ E541 C7 27       >                dw      Dict_Ptr + 2        // xt
 178+ E543             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E543             >
 178+ E543             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E543             >
 178+ E543             >//              ______________________________________________________________________
 178+ E543             >//              Dictionary part
 178+ E543             >
 178+ E543             >                org     Dict_Ptr
 178+ 27C5             >
 178+ 27C5 41 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 27C7             >
 178+ 27C7             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 27C7 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 27CA             >
 178+ 27CA             >
 178+ 27CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 27CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 27CA             >
 178+ 27CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 27CA 34          >                db      52
 179+ 27CB                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 27CB             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 27CB             >
 179+ 27CB             >Dict_Ptr        defl    $
 179+ 27CB             >
 179+ 27CB             >//              ______________________________________________________________________
 179+ 27CB             >//              Heap part
 179+ 27CB             >
 179+ 27CB             >
 179+ 27CB             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E543             >
 179+ E543             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E543             >Latest_Definition defl  Heap_Ptr
 179+ E543             >
 179+ E543             >                // dummy db directives used to calculate length of namec
 179+ E543 52 23       >                db      "R#"
 179+ E545             >len_NFA         defl    $ - temp_NFA
 179+ E545             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E543             >
 179+ E543 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E544 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E546             >                org     $-1                 // alter last byte of Name just above to set
 179+ E545 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E546             >
 179+ E546 3B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E548             >Prev_Ptr        defl    Heap_Ptr
 179+ E548             >
 179+ E548             >mirror_Ptr      defl    $
 179+ E548             >
 179+ E548 CD 27       >                dw      Dict_Ptr + 2        // xt
 179+ E54A             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E54A             >
 179+ E54A             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E54A             >
 179+ E54A             >//              ______________________________________________________________________
 179+ E54A             >//              Dictionary part
 179+ E54A             >
 179+ E54A             >                org     Dict_Ptr
 179+ 27CB             >
 179+ 27CB 48 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 27CD             >
 179+ 27CD             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 27CD CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 27D0             >
 179+ 27D0             >
 179+ 27D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 27D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 27D0             >
 179+ 27D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 27D0 36          >                db      54
 180+ 27D1                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 27D1             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 27D1             >
 180+ 27D1             >Dict_Ptr        defl    $
 180+ 27D1             >
 180+ 27D1             >//              ______________________________________________________________________
 180+ 27D1             >//              Heap part
 180+ 27D1             >
 180+ 27D1             >
 180+ 27D1             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E54A             >
 180+ E54A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E54A             >Latest_Definition defl  Heap_Ptr
 180+ E54A             >
 180+ E54A             >                // dummy db directives used to calculate length of namec
 180+ E54A 48 4C 44    >                db      "HLD"
 180+ E54D             >len_NFA         defl    $ - temp_NFA
 180+ E54D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E54A             >
 180+ E54A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E54B 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54E             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54D C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54E             >
 180+ E54E 43 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E550             >Prev_Ptr        defl    Heap_Ptr
 180+ E550             >
 180+ E550             >mirror_Ptr      defl    $
 180+ E550             >
 180+ E550 D3 27       >                dw      Dict_Ptr + 2        // xt
 180+ E552             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E552             >
 180+ E552             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E552             >
 180+ E552             >//              ______________________________________________________________________
 180+ E552             >//              Dictionary part
 180+ E552             >
 180+ E552             >                org     Dict_Ptr
 180+ 27D1             >
 180+ 27D1 50 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 27D3             >
 180+ 27D3             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 27D3 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 27D6             >
 180+ 27D6             >
 180+ 27D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 27D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 27D6             >
 180+ 27D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 27D6 38          >                db      56
 181+ 27D7                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 27D7             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 27D7             >
 181+ 27D7             >Dict_Ptr        defl    $
 181+ 27D7             >
 181+ 27D7             >//              ______________________________________________________________________
 181+ 27D7             >//              Heap part
 181+ 27D7             >
 181+ 27D7             >
 181+ 27D7             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E552             >
 181+ E552             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E552             >Latest_Definition defl  Heap_Ptr
 181+ E552             >
 181+ E552             >                // dummy db directives used to calculate length of namec
 181+ E552 55 53 45 44 >                db      "USED"
 181+ E556             >len_NFA         defl    $ - temp_NFA
 181+ E556             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E552             >
 181+ E552 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E553 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E557             >                org     $-1                 // alter last byte of Name just above to set
 181+ E556 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E557             >
 181+ E557 4A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E559             >Prev_Ptr        defl    Heap_Ptr
 181+ E559             >
 181+ E559             >mirror_Ptr      defl    $
 181+ E559             >
 181+ E559 D9 27       >                dw      Dict_Ptr + 2        // xt
 181+ E55B             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E55B             >
 181+ E55B             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E55B             >
 181+ E55B             >//              ______________________________________________________________________
 181+ E55B             >//              Dictionary part
 181+ E55B             >
 181+ E55B             >                org     Dict_Ptr
 181+ 27D7             >
 181+ 27D7 59 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 27D9             >
 181+ 27D9             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 27D9 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 27DC             >
 181+ 27DC             >
 181+ 27DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 27DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 27DC             >
 181+ 27DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 27DC 3A          >                db      58
 182+ 27DD                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 27DD             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 27DD             >
 182+ 27DD             >Dict_Ptr        defl    $
 182+ 27DD             >
 182+ 27DD             >//              ______________________________________________________________________
 182+ 27DD             >//              Heap part
 182+ 27DD             >
 182+ 27DD             >
 182+ 27DD             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E55B             >
 182+ E55B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E55B             >Latest_Definition defl  Heap_Ptr
 182+ E55B             >
 182+ E55B             >                // dummy db directives used to calculate length of namec
 182+ E55B 50 52 45 56 >                db      "PREV"
 182+ E55F             >len_NFA         defl    $ - temp_NFA
 182+ E55F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E55B             >
 182+ E55B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55C 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E560             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55F D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E560             >
 182+ E560 52 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E562             >Prev_Ptr        defl    Heap_Ptr
 182+ E562             >
 182+ E562             >mirror_Ptr      defl    $
 182+ E562             >
 182+ E562 DF 27       >                dw      Dict_Ptr + 2        // xt
 182+ E564             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E564             >
 182+ E564             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E564             >
 182+ E564             >//              ______________________________________________________________________
 182+ E564             >//              Dictionary part
 182+ E564             >
 182+ E564             >                org     Dict_Ptr
 182+ 27DD             >
 182+ 27DD 62 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 27DF             >
 182+ 27DF             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 27DF CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 27E2             >
 182+ 27E2             >
 182+ 27E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 27E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 27E2             >
 182+ 27E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 27E2 3C          >                db      60
 183+ 27E3                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 27E3             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 27E3             >
 183+ 27E3             >Dict_Ptr        defl    $
 183+ 27E3             >
 183+ 27E3             >//              ______________________________________________________________________
 183+ 27E3             >//              Heap part
 183+ 27E3             >
 183+ 27E3             >
 183+ 27E3             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E564             >
 183+ E564             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E564             >Latest_Definition defl  Heap_Ptr
 183+ E564             >
 183+ E564             >                // dummy db directives used to calculate length of namec
 183+ E564 4C 50       >                db      "LP"
 183+ E566             >len_NFA         defl    $ - temp_NFA
 183+ E566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E564             >
 183+ E564 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E565 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E567             >                org     $-1                 // alter last byte of Name just above to set
 183+ E566 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E567             >
 183+ E567 5B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E569             >Prev_Ptr        defl    Heap_Ptr
 183+ E569             >
 183+ E569             >mirror_Ptr      defl    $
 183+ E569             >
 183+ E569 E5 27       >                dw      Dict_Ptr + 2        // xt
 183+ E56B             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E56B             >
 183+ E56B             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E56B             >
 183+ E56B             >//              ______________________________________________________________________
 183+ E56B             >//              Dictionary part
 183+ E56B             >
 183+ E56B             >                org     Dict_Ptr
 183+ 27E3             >
 183+ 27E3 69 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 27E5             >
 183+ 27E5             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 27E5 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 27E8             >
 183+ 27E8             >
 183+ 27E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 27E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 27E8             >
 183+ 27E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 27E8 3E          >                db      62
 184+ 27E9                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 27E9             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 27E9             >
 184+ 27E9             >Dict_Ptr        defl    $
 184+ 27E9             >
 184+ 27E9             >//              ______________________________________________________________________
 184+ 27E9             >//              Heap part
 184+ 27E9             >
 184+ 27E9             >
 184+ 27E9             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E56B             >
 184+ E56B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E56B             >Latest_Definition defl  Heap_Ptr
 184+ E56B             >
 184+ E56B             >                // dummy db directives used to calculate length of namec
 184+ E56B 50 4C 41 43 >                db      "PLACE"
 184+ E56F 45          >
 184+ E570             >len_NFA         defl    $ - temp_NFA
 184+ E570             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E56B             >
 184+ E56B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56C 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E570 45          >
 184+ E571             >                org     $-1                 // alter last byte of Name just above to set
 184+ E570 C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E571             >
 184+ E571 64 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E573             >Prev_Ptr        defl    Heap_Ptr
 184+ E573             >
 184+ E573             >mirror_Ptr      defl    $
 184+ E573             >
 184+ E573 EB 27       >                dw      Dict_Ptr + 2        // xt
 184+ E575             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E575             >
 184+ E575             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E575             >
 184+ E575             >//              ______________________________________________________________________
 184+ E575             >//              Dictionary part
 184+ E575             >
 184+ E575             >                org     Dict_Ptr
 184+ 27E9             >
 184+ 27E9 73 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 27EB             >
 184+ 27EB             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 27EB CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 27EE             >
 184+ 27EE             >
 184+ 27EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 27EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 27EE             >
 184+ 27EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 27EE 40          >                db      64
 185+ 27EF                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 27EF             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 27EF             >
 185+ 27EF             >Dict_Ptr        defl    $
 185+ 27EF             >
 185+ 27EF             >//              ______________________________________________________________________
 185+ 27EF             >//              Heap part
 185+ 27EF             >
 185+ 27EF             >
 185+ 27EF             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E575             >
 185+ E575             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E575             >Latest_Definition defl  Heap_Ptr
 185+ E575             >
 185+ E575             >                // dummy db directives used to calculate length of namec
 185+ E575 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E579 43 45 2D 49 >
 185+ E57D 44          >
 185+ E57E             >len_NFA         defl    $ - temp_NFA
 185+ E57E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E575             >
 185+ E575 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E576 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E57A 43 45 2D 49 >
 185+ E57E 44          >
 185+ E57F             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57E C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57F             >
 185+ E57F 6B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E581             >Prev_Ptr        defl    Heap_Ptr
 185+ E581             >
 185+ E581             >mirror_Ptr      defl    $
 185+ E581             >
 185+ E581 F1 27       >                dw      Dict_Ptr + 2        // xt
 185+ E583             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E583             >
 185+ E583             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E583             >
 185+ E583             >//              ______________________________________________________________________
 185+ E583             >//              Dictionary part
 185+ E583             >
 185+ E583             >                org     Dict_Ptr
 185+ 27EF             >
 185+ 27EF 81 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 27F1             >
 185+ 27F1             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 27F1 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 27F4             >
 185+ 27F4             >
 185+ 27F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 27F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 27F4             >
 185+ 27F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 27F4 42          >                db      66
 186+ 27F5                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 27F5             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 27F5             >
 186+ 27F5             >Dict_Ptr        defl    $
 186+ 27F5             >
 186+ 27F5             >//              ______________________________________________________________________
 186+ 27F5             >//              Heap part
 186+ 27F5             >
 186+ 27F5             >
 186+ 27F5             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E583             >
 186+ E583             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E583             >Latest_Definition defl  Heap_Ptr
 186+ E583             >
 186+ E583             >                // dummy db directives used to calculate length of namec
 186+ E583 53 50 41 4E >                db      "SPAN"
 186+ E587             >len_NFA         defl    $ - temp_NFA
 186+ E587             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E583             >
 186+ E583 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E584 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E588             >                org     $-1                 // alter last byte of Name just above to set
 186+ E587 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E588             >
 186+ E588 75 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E58A             >Prev_Ptr        defl    Heap_Ptr
 186+ E58A             >
 186+ E58A             >mirror_Ptr      defl    $
 186+ E58A             >
 186+ E58A F7 27       >                dw      Dict_Ptr + 2        // xt
 186+ E58C             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58C             >
 186+ E58C             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58C             >
 186+ E58C             >//              ______________________________________________________________________
 186+ E58C             >//              Dictionary part
 186+ E58C             >
 186+ E58C             >                org     Dict_Ptr
 186+ 27F5             >
 186+ 27F5 8A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 27F7             >
 186+ 27F7             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 27F7 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 27FA             >
 186+ 27FA             >
 186+ 27FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 27FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 27FA             >
 186+ 27FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 27FA 44          >                db      68
 187+ 27FB                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 27FB             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 27FB             >
 187+ 27FB             >Dict_Ptr        defl    $
 187+ 27FB             >
 187+ 27FB             >//              ______________________________________________________________________
 187+ 27FB             >//              Heap part
 187+ 27FB             >
 187+ 27FB             >
 187+ 27FB             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58C             >
 187+ E58C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58C             >Latest_Definition defl  Heap_Ptr
 187+ E58C             >
 187+ E58C             >                // dummy db directives used to calculate length of namec
 187+ E58C 48 41 4E 44 >                db      "HANDLER"
 187+ E590 4C 45 52    >
 187+ E593             >len_NFA         defl    $ - temp_NFA
 187+ E593             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58C             >
 187+ E58C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58D 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E591 4C 45 52    >
 187+ E594             >                org     $-1                 // alter last byte of Name just above to set
 187+ E593 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E594             >
 187+ E594 83 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E596             >Prev_Ptr        defl    Heap_Ptr
 187+ E596             >
 187+ E596             >mirror_Ptr      defl    $
 187+ E596             >
 187+ E596 FD 27       >                dw      Dict_Ptr + 2        // xt
 187+ E598             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E598             >
 187+ E598             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E598             >
 187+ E598             >//              ______________________________________________________________________
 187+ E598             >//              Dictionary part
 187+ E598             >
 187+ E598             >                org     Dict_Ptr
 187+ 27FB             >
 187+ 27FB 96 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 27FD             >
 187+ 27FD             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 27FD CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2800             >
 187+ 2800             >
 187+ 2800             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2800             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2800             >
 187+ 2800             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2800 46          >                db      70
 188+ 2801                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2801             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2801             >
 188+ 2801             >Dict_Ptr        defl    $
 188+ 2801             >
 188+ 2801             >//              ______________________________________________________________________
 188+ 2801             >//              Heap part
 188+ 2801             >
 188+ 2801             >
 188+ 2801             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E598             >
 188+ E598             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E598             >Latest_Definition defl  Heap_Ptr
 188+ E598             >
 188+ E598             >                // dummy db directives used to calculate length of namec
 188+ E598 45 58 50    >                db      "EXP"
 188+ E59B             >len_NFA         defl    $ - temp_NFA
 188+ E59B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E598             >
 188+ E598 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E599 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59C             >                org     $-1                 // alter last byte of Name just above to set
 188+ E59B D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59C             >
 188+ E59C 8C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59E             >Prev_Ptr        defl    Heap_Ptr
 188+ E59E             >
 188+ E59E             >mirror_Ptr      defl    $
 188+ E59E             >
 188+ E59E 03 28       >                dw      Dict_Ptr + 2        // xt
 188+ E5A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E5A0             >
 188+ E5A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E5A0             >
 188+ E5A0             >//              ______________________________________________________________________
 188+ E5A0             >//              Dictionary part
 188+ E5A0             >
 188+ E5A0             >                org     Dict_Ptr
 188+ 2801             >
 188+ 2801 9E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 2803             >
 188+ 2803             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 2803 CD D8 26    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 2806             >
 188+ 2806             >
 188+ 2806             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 2806             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 2806             >
 188+ 2806             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 2806 48          >                db      72
 189+ 2807
 190+ 2807              //  ______________________________________________________________________
 191+ 2807              //
 192+ 2807              // here         -- a
 193+ 2807                              Colon_Def HERE, "HERE", is_normal
 193+ 2807             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 2807             >
 193+ 2807             >Dict_Ptr        defl    $
 193+ 2807             >
 193+ 2807             >//              ______________________________________________________________________
 193+ 2807             >//              Heap part
 193+ 2807             >
 193+ 2807             >
 193+ 2807             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E5A0             >
 193+ E5A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E5A0             >Latest_Definition defl  Heap_Ptr
 193+ E5A0             >
 193+ E5A0             >                // dummy db directives used to calculate length of namec
 193+ E5A0 48 45 52 45 >                db      "HERE"
 193+ E5A4             >len_NFA         defl    $ - temp_NFA
 193+ E5A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E5A0             >
 193+ E5A0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A1 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A5             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A4 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A5             >
 193+ E5A5 98 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A7             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A7             >
 193+ E5A7             >mirror_Ptr      defl    $
 193+ E5A7             >
 193+ E5A7 09 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A9             >
 193+ E5A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A9             >
 193+ E5A9             >//              ______________________________________________________________________
 193+ E5A9             >//              Dictionary part
 193+ E5A9             >
 193+ E5A9             >                org     Dict_Ptr
 193+ 2807             >
 193+ 2807 A7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 2809             >
 193+ 2809             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 2809 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 280C             >
 193+ 280C             >
 193+ 280C             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 280C             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 280C             >
 193+ 280C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 280C 61 27 F2 25                  dw      DP, FETCH               // dp @
 195+ 2810 BD 24                        dw      EXIT                    // ;
 196+ 2812
 197+ 2812              //  ______________________________________________________________________
 198+ 2812              //
 199+ 2812              // allot        n --
 200+ 2812                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2812             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2812             >
 200+ 2812             >Dict_Ptr        defl    $
 200+ 2812             >
 200+ 2812             >//              ______________________________________________________________________
 200+ 2812             >//              Heap part
 200+ 2812             >
 200+ 2812             >
 200+ 2812             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A9             >
 200+ E5A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A9             >Latest_Definition defl  Heap_Ptr
 200+ E5A9             >
 200+ E5A9             >                // dummy db directives used to calculate length of namec
 200+ E5A9 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AD 54          >
 200+ E5AE             >len_NFA         defl    $ - temp_NFA
 200+ E5AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A9             >
 200+ E5A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5AA 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AE 54          >
 200+ E5AF             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AE D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AF             >
 200+ E5AF A0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B1             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B1             >
 200+ E5B1             >mirror_Ptr      defl    $
 200+ E5B1             >
 200+ E5B1 14 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B3             >
 200+ E5B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B3             >
 200+ E5B3             >//              ______________________________________________________________________
 200+ E5B3             >//              Dictionary part
 200+ E5B3             >
 200+ E5B3             >                org     Dict_Ptr
 200+ 2812             >
 200+ 2812 B1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 2814             >
 200+ 2814             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 2814 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 2817             >
 200+ 2817             >
 200+ 2817             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 2817             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 2817             >
 200+ 2817             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 2817 61 27 DA 25                  dw      DP,  PLUSSTORE          // dp +!
 202+ 281B BD 24                        dw      EXIT                    // ;
 203+ 281D
 204+ 281D              //  ______________________________________________________________________
 205+ 281D              //
 206+ 281D              // comma        n --
 207+ 281D                              Colon_Def COMMA, ",", is_normal
 207+ 281D             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 281D             >
 207+ 281D             >Dict_Ptr        defl    $
 207+ 281D             >
 207+ 281D             >//              ______________________________________________________________________
 207+ 281D             >//              Heap part
 207+ 281D             >
 207+ 281D             >
 207+ 281D             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B3             >
 207+ E5B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B3             >Latest_Definition defl  Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >                // dummy db directives used to calculate length of namec
 207+ E5B3 2C          >                db      ","
 207+ E5B4             >len_NFA         defl    $ - temp_NFA
 207+ E5B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B3             >
 207+ E5B3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B4 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B5             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B4 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B5             >
 207+ E5B5 A9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B7             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B7             >
 207+ E5B7             >mirror_Ptr      defl    $
 207+ E5B7             >
 207+ E5B7 1F 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B9             >
 207+ E5B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B9             >
 207+ E5B9             >//              ______________________________________________________________________
 207+ E5B9             >//              Dictionary part
 207+ E5B9             >
 207+ E5B9             >                org     Dict_Ptr
 207+ 281D             >
 207+ 281D B7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 281F             >
 207+ 281F             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 281F CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2822             >
 207+ 2822             >
 207+ 2822             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2822             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2822             >
 207+ 2822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2822 09 28 FC 25                  dw      HERE, STORE             // here !
 209+ 2826 F2 26 14 28                  dw      TWO, ALLOT              // 2 allot
 210+ 282A BD 24                        dw      EXIT                    // ;
 211+ 282C
 212+ 282C              //  ______________________________________________________________________
 213+ 282C              //
 214+ 282C              // ccomma       c --
 215+ 282C                              Colon_Def CCOMMA, "C,", is_normal
 215+ 282C             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 282C             >
 215+ 282C             >Dict_Ptr        defl    $
 215+ 282C             >
 215+ 282C             >//              ______________________________________________________________________
 215+ 282C             >//              Heap part
 215+ 282C             >
 215+ 282C             >
 215+ 282C             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B9             >
 215+ E5B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B9             >Latest_Definition defl  Heap_Ptr
 215+ E5B9             >
 215+ E5B9             >                // dummy db directives used to calculate length of namec
 215+ E5B9 43 2C       >                db      "C,"
 215+ E5BB             >len_NFA         defl    $ - temp_NFA
 215+ E5BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B9             >
 215+ E5B9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5BA 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BC             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5BB AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BC             >
 215+ E5BC B3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BE             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BE             >
 215+ E5BE             >mirror_Ptr      defl    $
 215+ E5BE             >
 215+ E5BE 2E 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5C0             >
 215+ E5C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5C0             >
 215+ E5C0             >//              ______________________________________________________________________
 215+ E5C0             >//              Dictionary part
 215+ E5C0             >
 215+ E5C0             >                org     Dict_Ptr
 215+ 282C             >
 215+ 282C BE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 282E             >
 215+ 282E             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 282E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2831             >
 215+ 2831             >
 215+ 2831             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2831             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2831             >
 215+ 2831             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2831 09 28 10 26                  dw      HERE, CSTORE            // here c!
 217+ 2835 EB 26 14 28                  dw      ONE, ALLOT              // 1 allot
 218+ 2839 BD 24                        dw      EXIT                    // ;
 219+ 283B
 220+ 283B              //  ______________________________________________________________________
 221+ 283B              //
 222+ 283B              // hpcomma      n --
 223+ 283B              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 283B              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 283B              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 283B              //              dw      EXIT                    // ;
 227+ 283B
 228+ 283B              //  ______________________________________________________________________
 229+ 283B              //
 230+ 283B              // s>d          n -- d
 231+ 283B              // converts a single precision integer in a double precision
 232+ 283B                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 283B             >
 232+ 283B             >Dict_Ptr        defl    $
 232+ 283B             >
 232+ 283B             >//              ______________________________________________________________________
 232+ 283B             >//              Heap part
 232+ 283B             >
 232+ 283B             >
 232+ 283B             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5C0             >
 232+ E5C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5C0             >Latest_Definition defl  Heap_Ptr
 232+ E5C0             >
 232+ E5C0             >                // dummy db directives used to calculate length of namec
 232+ E5C0 53 3E 44    >                db      "S>D"
 232+ E5C3             >len_NFA         defl    $ - temp_NFA
 232+ E5C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5C0             >
 232+ E5C0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C1 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C4             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C3 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C4             >
 232+ E5C4 B9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C6             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C6             >
 232+ E5C6             >mirror_Ptr      defl    $
 232+ E5C6             >
 232+ E5C6 3D 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C8             >
 232+ E5C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C8             >
 232+ E5C8             >//              ______________________________________________________________________
 232+ E5C8             >//              Dictionary part
 232+ E5C8             >
 232+ E5C8             >                org     Dict_Ptr
 232+ 283B             >
 232+ 283B C6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 283D             >
 232+ 283D             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 283D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 283D ~           >
 232+ 283D ~           >
 232+ 283D             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 283D             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 283D             >
 232+ 283D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 283D E1                           pop     hl
 234+ 283E 7C                           ld      a, h
 235+ 283F E5                           push    hl
 236+ 2840 17                           rla
 237+ 2841 ED 62                        sbc     hl, hl
 238+ 2843 E5                           push    hl
 239+ 2844                              next
 239+ 2844 DD E9       >                jp      (ix)
 240+ 2846
 241+ 2846              //  ______________________________________________________________________
 242+ 2846              //
 243+ 2846              // -            n1 n2 -- n3
 244+ 2846              // subtraction
 245+ 2846                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 2846             >
 245+ 2846             >Dict_Ptr        defl    $
 245+ 2846             >
 245+ 2846             >//              ______________________________________________________________________
 245+ 2846             >//              Heap part
 245+ 2846             >
 245+ 2846             >
 245+ 2846             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C8             >
 245+ E5C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C8             >Latest_Definition defl  Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >                // dummy db directives used to calculate length of namec
 245+ E5C8 2D          >                db      "-"
 245+ E5C9             >len_NFA         defl    $ - temp_NFA
 245+ E5C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C8             >
 245+ E5C8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C9 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5CA             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C9 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5CA             >
 245+ E5CA C0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CC             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CC             >
 245+ E5CC             >mirror_Ptr      defl    $
 245+ E5CC             >
 245+ E5CC 48 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CE             >
 245+ E5CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CE             >
 245+ E5CE             >//              ______________________________________________________________________
 245+ E5CE             >//              Dictionary part
 245+ E5CE             >
 245+ E5CE             >                org     Dict_Ptr
 245+ 2846             >
 245+ 2846 CC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 2848             >
 245+ 2848             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 2848 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 2848 ~           >
 245+ 2848 ~           >
 245+ 2848             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 2848             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 2848             >
 245+ 2848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 2848 D9                           exx
 247+ 2849 D1                           pop     de
 248+ 284A E1                           pop     hl
 249+ 284B A7                           and     a
 250+ 284C ED 52                        sbc     hl, de
 251+ 284E E5                           push    hl
 252+ 284F D9                           exx
 253+ 2850                              next
 253+ 2850 DD E9       >                jp      (ix)
 254+ 2852
 255+ 2852
 256+ 2852              //  ______________________________________________________________________
 257+ 2852              //
 258+ 2852              // =            n1 n2 -- n3
 259+ 2852              // equals
 260+ 2852                              Colon_Def EQUALS, "=", is_normal
 260+ 2852             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 2852             >
 260+ 2852             >Dict_Ptr        defl    $
 260+ 2852             >
 260+ 2852             >//              ______________________________________________________________________
 260+ 2852             >//              Heap part
 260+ 2852             >
 260+ 2852             >
 260+ 2852             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CE             >
 260+ E5CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CE             >Latest_Definition defl  Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >                // dummy db directives used to calculate length of namec
 260+ E5CE 3D          >                db      "="
 260+ E5CF             >len_NFA         defl    $ - temp_NFA
 260+ E5CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CE             >
 260+ E5CE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CF 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5D0             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CF BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5D0             >
 260+ E5D0 C8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D2             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D2             >
 260+ E5D2             >mirror_Ptr      defl    $
 260+ E5D2             >
 260+ E5D2 54 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D4             >
 260+ E5D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D4             >
 260+ E5D4             >//              ______________________________________________________________________
 260+ E5D4             >//              Dictionary part
 260+ E5D4             >
 260+ E5D4             >                org     Dict_Ptr
 260+ 2852             >
 260+ 2852 D2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 2854             >
 260+ 2854             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 2854 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 2857             >
 260+ 2857             >
 260+ 2857             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 2857             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 2857             >
 260+ 2857             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 2857 48 28 E2 24                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 285B BD 24                        dw      EXIT                    // ;
 263+ 285D
 264+ 285D              //  ______________________________________________________________________
 265+ 285D              //
 266+ 285D              // u<           u1 u2 -- u3
 267+ 285D              // unsigned less-than
 268+ 285D                              New_Def ULESS, "U<", is_code, is_normal
 268+ 285D             >
 268+ 285D             >Dict_Ptr        defl    $
 268+ 285D             >
 268+ 285D             >//              ______________________________________________________________________
 268+ 285D             >//              Heap part
 268+ 285D             >
 268+ 285D             >
 268+ 285D             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D4             >
 268+ E5D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D4             >Latest_Definition defl  Heap_Ptr
 268+ E5D4             >
 268+ E5D4             >                // dummy db directives used to calculate length of namec
 268+ E5D4 55 3C       >                db      "U<"
 268+ E5D6             >len_NFA         defl    $ - temp_NFA
 268+ E5D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D4             >
 268+ E5D4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D5 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D7             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D6 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D7             >
 268+ E5D7 CE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D9             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D9             >
 268+ E5D9             >mirror_Ptr      defl    $
 268+ E5D9             >
 268+ E5D9 5F 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DB             >
 268+ E5DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DB             >
 268+ E5DB             >//              ______________________________________________________________________
 268+ E5DB             >//              Dictionary part
 268+ E5DB             >
 268+ E5DB             >                org     Dict_Ptr
 268+ 285D             >
 268+ 285D D9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 285F             >
 268+ 285F             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 285F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 285F ~           >
 268+ 285F ~           >
 268+ 285F             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 285F             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 285F             >
 268+ 285F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 285F D9                           exx
 270+ 2860 D1                           pop     de
 271+ 2861 E1                           pop     hl
 272+ 2862              Unsigned_Less_Exit:
 273+ 2862 A7                           and     a
 274+ 2863 ED 52                        sbc     hl, de
 275+ 2865 ED 62                        sbc     hl, hl
 276+ 2867 E5                           push    hl
 277+ 2868 D9                           exx
 278+ 2869                              next
 278+ 2869 DD E9       >                jp      (ix)
 279+ 286B
 280+ 286B              //  ______________________________________________________________________
 281+ 286B              //
 282+ 286B              // <           n1 n2 -- n3
 283+ 286B              // less-than
 284+ 286B                              New_Def LESS, "<", is_code, is_normal
 284+ 286B             >
 284+ 286B             >Dict_Ptr        defl    $
 284+ 286B             >
 284+ 286B             >//              ______________________________________________________________________
 284+ 286B             >//              Heap part
 284+ 286B             >
 284+ 286B             >
 284+ 286B             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5DB             >
 284+ E5DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5DB             >Latest_Definition defl  Heap_Ptr
 284+ E5DB             >
 284+ E5DB             >                // dummy db directives used to calculate length of namec
 284+ E5DB 3C          >                db      "<"
 284+ E5DC             >len_NFA         defl    $ - temp_NFA
 284+ E5DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5DB             >
 284+ E5DB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5DC 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5DD             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5DC BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5DD             >
 284+ E5DD D4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DF             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DF             >
 284+ E5DF             >mirror_Ptr      defl    $
 284+ E5DF             >
 284+ E5DF 6D 28       >                dw      Dict_Ptr + 2        // xt
 284+ E5E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5E1             >
 284+ E5E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5E1             >
 284+ E5E1             >//              ______________________________________________________________________
 284+ E5E1             >//              Dictionary part
 284+ E5E1             >
 284+ E5E1             >                org     Dict_Ptr
 284+ 286B             >
 284+ 286B DF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 286D             >
 284+ 286D             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 286D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 286D ~           >
 284+ 286D ~           >
 284+ 286D             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 286D             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 286D             >
 284+ 286D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 286D D9                           exx
 286+ 286E E1                           pop     hl
 287+ 286F D1                           pop     de
 288+ 2870 01 00 80                     ld      bc, $8000
 289+ 2873 09                           add     hl, bc
 290+ 2874 EB                           ex      de, hl
 291+ 2875 09                           add     hl, bc
 292+ 2876 18 EA                        jr      Unsigned_Less_Exit
 293+ 2878              //              and     a
 294+ 2878              //              sbc     hl, de
 295+ 2878              //              sbc     hl, hl
 296+ 2878              //              push    hl
 297+ 2878              //              exx
 298+ 2878              //              next
 299+ 2878
 300+ 2878              //  ______________________________________________________________________
 301+ 2878              //
 302+ 2878              // >            n1 n2 -- n3
 303+ 2878              // greater than
 304+ 2878                              Colon_Def GREATER, ">", is_normal
 304+ 2878             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 2878             >
 304+ 2878             >Dict_Ptr        defl    $
 304+ 2878             >
 304+ 2878             >//              ______________________________________________________________________
 304+ 2878             >//              Heap part
 304+ 2878             >
 304+ 2878             >
 304+ 2878             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E1             >
 304+ E5E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E1             >Latest_Definition defl  Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >                // dummy db directives used to calculate length of namec
 304+ E5E1 3E          >                db      ">"
 304+ E5E2             >len_NFA         defl    $ - temp_NFA
 304+ E5E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E1             >
 304+ E5E1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E2 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E3             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E2 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E3             >
 304+ E5E3 DB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E5             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E5             >
 304+ E5E5             >mirror_Ptr      defl    $
 304+ E5E5             >
 304+ E5E5 7A 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E7             >
 304+ E5E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E7             >
 304+ E5E7             >//              ______________________________________________________________________
 304+ E5E7             >//              Dictionary part
 304+ E5E7             >
 304+ E5E7             >                org     Dict_Ptr
 304+ 2878             >
 304+ 2878 E5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 287A             >
 304+ 287A             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 287A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 287D             >
 304+ 287D             >
 304+ 287D             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 287D             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 287D             >
 304+ 287D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 287D 81 25 6D 28                  dw      SWAP, LESS              // swap <
 306+ 2881 BD 24                        dw      EXIT                    // ;
 307+ 2883              //  ______________________________________________________________________
 308+ 2883              //
 309+ 2883              // min          n1 n2 -- n3
 310+ 2883              // minimum between n1 and n2
 311+ 2883                              Colon_Def MIN, "MIN" , is_normal
 311+ 2883             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 2883             >
 311+ 2883             >Dict_Ptr        defl    $
 311+ 2883             >
 311+ 2883             >//              ______________________________________________________________________
 311+ 2883             >//              Heap part
 311+ 2883             >
 311+ 2883             >
 311+ 2883             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E7             >
 311+ E5E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E7             >Latest_Definition defl  Heap_Ptr
 311+ E5E7             >
 311+ E5E7             >                // dummy db directives used to calculate length of namec
 311+ E5E7 4D 49 4E    >                db      "MIN"
 311+ E5EA             >len_NFA         defl    $ - temp_NFA
 311+ E5EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E7             >
 311+ E5E7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E8 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EB             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5EA CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EB             >
 311+ E5EB E1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5ED             >Prev_Ptr        defl    Heap_Ptr
 311+ E5ED             >
 311+ E5ED             >mirror_Ptr      defl    $
 311+ E5ED             >
 311+ E5ED 85 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EF             >
 311+ E5EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EF             >
 311+ E5EF             >//              ______________________________________________________________________
 311+ E5EF             >//              Dictionary part
 311+ E5EF             >
 311+ E5EF             >                org     Dict_Ptr
 311+ 2883             >
 311+ 2883 ED 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 2885             >
 311+ 2885             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 2885 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 2888             >
 311+ 2888             >
 311+ 2888             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 2888             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 2888             >
 311+ 2888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 2888 D0 25                        dw      TWO_DUP                 // 2dup
 313+ 288A 7A 28                        dw      GREATER                 // >
 314+ 288C 8D 20                        dw      ZBRANCH
 315+ 288E 04 00                        dw      Min_Skip - $   // if
 316+ 2890 81 25                        dw          SWAP                //      swap
 317+ 2892              Min_Skip:                                       // endif
 318+ 2892 6D 25                        dw      DROP                    // drop
 319+ 2894 BD 24                        dw      EXIT                    // ;
 320+ 2896
 321+ 2896              //  ______________________________________________________________________
 322+ 2896              //
 323+ 2896              // max          n1 n2 -- n3
 324+ 2896              // maximum between n1 and n2
 325+ 2896                              Colon_Def MAX, "MAX", is_normal
 325+ 2896             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 2896             >
 325+ 2896             >Dict_Ptr        defl    $
 325+ 2896             >
 325+ 2896             >//              ______________________________________________________________________
 325+ 2896             >//              Heap part
 325+ 2896             >
 325+ 2896             >
 325+ 2896             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EF             >
 325+ E5EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EF             >Latest_Definition defl  Heap_Ptr
 325+ E5EF             >
 325+ E5EF             >                // dummy db directives used to calculate length of namec
 325+ E5EF 4D 41 58    >                db      "MAX"
 325+ E5F2             >len_NFA         defl    $ - temp_NFA
 325+ E5F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EF             >
 325+ E5EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5F0 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F3             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F2 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F3             >
 325+ E5F3 E7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F5             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F5             >
 325+ E5F5             >mirror_Ptr      defl    $
 325+ E5F5             >
 325+ E5F5 98 28       >                dw      Dict_Ptr + 2        // xt
 325+ E5F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F7             >
 325+ E5F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F7             >
 325+ E5F7             >//              ______________________________________________________________________
 325+ E5F7             >//              Dictionary part
 325+ E5F7             >
 325+ E5F7             >                org     Dict_Ptr
 325+ 2896             >
 325+ 2896 F5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 2898             >
 325+ 2898             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 2898 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 289B             >
 325+ 289B             >
 325+ 289B             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 289B             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 289B             >
 325+ 289B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 289B D0 25                        dw      TWO_DUP                 // 2dup
 327+ 289D 6D 28                        dw      LESS                    // <
 328+ 289F 8D 20                        dw      ZBRANCH
 329+ 28A1 04 00                        dw      Max_Skip - $   // if
 330+ 28A3 81 25                        dw          SWAP                //      swap
 331+ 28A5              Max_Skip:                                       // endif
 332+ 28A5 6D 25                        dw      DROP                    // drop
 333+ 28A7 BD 24                        dw      EXIT                    // ;
 334+ 28A9
 335+ 28A9              //  ______________________________________________________________________
 336+ 28A9              //
 337+ 28A9              // ?dup         n -- 0 | n n
 338+ 28A9              // duplicate if not zero
 339+ 28A9                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 28A9             >
 339+ 28A9             >Dict_Ptr        defl    $
 339+ 28A9             >
 339+ 28A9             >//              ______________________________________________________________________
 339+ 28A9             >//              Heap part
 339+ 28A9             >
 339+ 28A9             >
 339+ 28A9             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F7             >
 339+ E5F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F7             >Latest_Definition defl  Heap_Ptr
 339+ E5F7             >
 339+ E5F7             >                // dummy db directives used to calculate length of namec
 339+ E5F7 3F 44 55 50 >                db      "?DUP"
 339+ E5FB             >len_NFA         defl    $ - temp_NFA
 339+ E5FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F7             >
 339+ E5F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F8 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FC             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FB D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FC             >
 339+ E5FC EF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FE             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FE             >
 339+ E5FE             >mirror_Ptr      defl    $
 339+ E5FE             >
 339+ E5FE AB 28       >                dw      Dict_Ptr + 2        // xt
 339+ E600             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E600             >
 339+ E600             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E600             >
 339+ E600             >//              ______________________________________________________________________
 339+ E600             >//              Dictionary part
 339+ E600             >
 339+ E600             >                org     Dict_Ptr
 339+ 28A9             >
 339+ 28A9 FE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 28AB             >
 339+ 28AB             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 28AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 28AB ~           >
 339+ 28AB ~           >
 339+ 28AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 28AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 28AB             >
 339+ 28AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 28AB              QDup_Ptr:
 341+ 28AB E1                           pop     hl
 342+ 28AC 7C                           ld      a, h
 343+ 28AD B5                           or      l
 344+ 28AE 28 01                        jr      z, QDup_Skip
 345+ 28B0 E5                               push    hl
 346+ 28B1              QDup_Skip:
 347+ 28B1                              psh1
 347+ 28B1 E5          >                push    hl
 347+ 28B2 DD E9       >                jp      (ix)
 348+ 28B4
 349+ 28B4              //  ______________________________________________________________________
 350+ 28B4              //
 351+ 28B4              // -dup         n -- 0 | n n
 352+ 28B4              // duplicate if not zero
 353+ 28B4                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 28B4             >
 353+ 28B4             >Dict_Ptr        defl    $
 353+ 28B4             >
 353+ 28B4             >//              ______________________________________________________________________
 353+ 28B4             >//              Heap part
 353+ 28B4             >
 353+ 28B4             >
 353+ 28B4             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E600             >
 353+ E600             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E600             >Latest_Definition defl  Heap_Ptr
 353+ E600             >
 353+ E600             >                // dummy db directives used to calculate length of namec
 353+ E600 2D 44 55 50 >                db      "-DUP"
 353+ E604             >len_NFA         defl    $ - temp_NFA
 353+ E604             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E600             >
 353+ E600 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E601 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E605             >                org     $-1                 // alter last byte of Name just above to set
 353+ E604 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E605             >
 353+ E605 F7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E607             >Prev_Ptr        defl    Heap_Ptr
 353+ E607             >
 353+ E607             >mirror_Ptr      defl    $
 353+ E607             >
 353+ E607 B6 28       >                dw      Dict_Ptr + 2        // xt
 353+ E609             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E609             >
 353+ E609             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E609             >
 353+ E609             >//              ______________________________________________________________________
 353+ E609             >//              Dictionary part
 353+ E609             >
 353+ E609             >                org     Dict_Ptr
 353+ 28B4             >
 353+ 28B4 07 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 28B6             >
 353+ 28B6             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 28B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 28B6 ~           >
 353+ 28B6 ~           >
 353+ 28B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 28B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 28B6             >
 353+ 28B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 28B6 C3 AB 28                     jp      QDup_Ptr
 355+ 28B9
 356+ 28B9              //  ______________________________________________________________________
 357+ 28B9              //
 358+ 28B9              // emitc          --
 359+ 28B9                              Colon_Def EMITC, "EMITC", is_normal
 359+ 28B9             >                New_Def  EMITC, "EMITC", Enter_Ptr, is_normal ; ok
 359+ 28B9             >
 359+ 28B9             >Dict_Ptr        defl    $
 359+ 28B9             >
 359+ 28B9             >//              ______________________________________________________________________
 359+ 28B9             >//              Heap part
 359+ 28B9             >
 359+ 28B9             >
 359+ 28B9             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E609             >
 359+ E609             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E609             >Latest_Definition defl  Heap_Ptr
 359+ E609             >
 359+ E609             >                // dummy db directives used to calculate length of namec
 359+ E609 45 4D 49 54 >                db      "EMITC"
 359+ E60D 43          >
 359+ E60E             >len_NFA         defl    $ - temp_NFA
 359+ E60E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E609             >
 359+ E609 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E60A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 359+ E60E 43          >
 359+ E60F             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60E C3          >                db      {b $} | END_BIT     // msb as name end
 359+ E60F             >
 359+ E60F 00 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E611             >Prev_Ptr        defl    Heap_Ptr
 359+ E611             >
 359+ E611             >mirror_Ptr      defl    $
 359+ E611             >
 359+ E611 BB 28       >                dw      Dict_Ptr + 2        // xt
 359+ E613             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E613             >
 359+ E613             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E613             >
 359+ E613             >//              ______________________________________________________________________
 359+ E613             >//              Dictionary part
 359+ E613             >
 359+ E613             >                org     Dict_Ptr
 359+ 28B9             >
 359+ 28B9 11 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 28BB             >
 359+ 28BB             >EMITC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 28BB CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 28BE             >
 359+ 28BE             >
 359+ 28BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 28BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 28BE             >
 359+ 28BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 28BE 2B 22                        dw      CEMITC
 361+ 28C0 BD 24                        dw      EXIT
 362+ 28C2
 363+ 28C2
 364+ 28C2              //  ______________________________________________________________________
 365+ 28C2              //
 366+ 28C2              // emit         c --
 367+ 28C2                              Colon_Def EMIT, "EMIT", is_normal
 367+ 28C2             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 367+ 28C2             >
 367+ 28C2             >Dict_Ptr        defl    $
 367+ 28C2             >
 367+ 28C2             >//              ______________________________________________________________________
 367+ 28C2             >//              Heap part
 367+ 28C2             >
 367+ 28C2             >
 367+ 28C2             >                org     (Heap_Ptr & $1FFF) + $E000
 367+ E613             >
 367+ E613             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ E613             >Latest_Definition defl  Heap_Ptr
 367+ E613             >
 367+ E613             >                // dummy db directives used to calculate length of namec
 367+ E613 45 4D 49 54 >                db      "EMIT"
 367+ E617             >len_NFA         defl    $ - temp_NFA
 367+ E617             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ E613             >
 367+ E613 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ E614 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 367+ E618             >                org     $-1                 // alter last byte of Name just above to set
 367+ E617 D4          >                db      {b $} | END_BIT     // msb as name end
 367+ E618             >
 367+ E618 09 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 367+ E61A             >Prev_Ptr        defl    Heap_Ptr
 367+ E61A             >
 367+ E61A             >mirror_Ptr      defl    $
 367+ E61A             >
 367+ E61A C4 28       >                dw      Dict_Ptr + 2        // xt
 367+ E61C             >Heap_Ptr        defl    $ - $E000           // save current HP
 367+ E61C             >
 367+ E61C             >Current_HP      defl  $ - $E000             // used to set HP once!
 367+ E61C             >
 367+ E61C             >//              ______________________________________________________________________
 367+ E61C             >//              Dictionary part
 367+ E61C             >
 367+ E61C             >                org     Dict_Ptr
 367+ 28C2             >
 367+ 28C2 1A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 367+ 28C4             >
 367+ 28C4             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 28C4 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 367+ 28C7             >
 367+ 28C7             >
 367+ 28C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 28C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 28C7             >
 367+ 28C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 28C7 71 22                        dw      C_EMIT                      // (?emit)
 369+ 28C9 AB 28                        dw      QDUP                        // ?dup
 370+ 28CB                                                                  // if
 371+ 28CB 8D 20                        dw      ZBRANCH
 372+ 28CD 0A 00                        dw      Emit_Skip - $
 373+ 28CF BB 28                        dw          EMITC                   //      emitc
 374+ 28D1 EB 26                        dw          ONE                     //      1
 375+ 28D3 91 27 DA 25                  dw          OUT, PLUSSTORE        //      out +!
 376+ 28D7              Emit_Skip:                                          // endif
 377+ 28D7 BD 24                        dw      EXIT                        // ;
 378+ 28D9
 379+ 28D9              //  ______________________________________________________________________
 380+ 28D9              //
 381+ 28D9              // space        --
 382+ 28D9                              Colon_Def SPACE, "SPACE", is_normal
 382+ 28D9             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 382+ 28D9             >
 382+ 28D9             >Dict_Ptr        defl    $
 382+ 28D9             >
 382+ 28D9             >//              ______________________________________________________________________
 382+ 28D9             >//              Heap part
 382+ 28D9             >
 382+ 28D9             >
 382+ 28D9             >                org     (Heap_Ptr & $1FFF) + $E000
 382+ E61C             >
 382+ E61C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ E61C             >Latest_Definition defl  Heap_Ptr
 382+ E61C             >
 382+ E61C             >                // dummy db directives used to calculate length of namec
 382+ E61C 53 50 41 43 >                db      "SPACE"
 382+ E620 45          >
 382+ E621             >len_NFA         defl    $ - temp_NFA
 382+ E621             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ E61C             >
 382+ E61C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ E61D 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 382+ E621 45          >
 382+ E622             >                org     $-1                 // alter last byte of Name just above to set
 382+ E621 C5          >                db      {b $} | END_BIT     // msb as name end
 382+ E622             >
 382+ E622 13 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 382+ E624             >Prev_Ptr        defl    Heap_Ptr
 382+ E624             >
 382+ E624             >mirror_Ptr      defl    $
 382+ E624             >
 382+ E624 DB 28       >                dw      Dict_Ptr + 2        // xt
 382+ E626             >Heap_Ptr        defl    $ - $E000           // save current HP
 382+ E626             >
 382+ E626             >Current_HP      defl  $ - $E000             // used to set HP once!
 382+ E626             >
 382+ E626             >//              ______________________________________________________________________
 382+ E626             >//              Dictionary part
 382+ E626             >
 382+ E626             >                org     Dict_Ptr
 382+ 28D9             >
 382+ 28D9 24 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 382+ 28DB             >
 382+ 28DB             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 28DB CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 382+ 28DE             >
 382+ 28DE             >
 382+ 28DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 28DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 28DE             >
 382+ 28DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 28DE 07 27 C4 28                  dw      BL, EMIT                // bl emit
 384+ 28E2 BD 24                        dw      EXIT                    // ;
 385+ 28E4
 386+ 28E4              //  ______________________________________________________________________
 387+ 28E4              //
 388+ 28E4              // cr           --
 389+ 28E4                              Colon_Def CR, "CR", is_normal
 389+ 28E4             >                New_Def  CR, "CR", Enter_Ptr, is_normal ; ok
 389+ 28E4             >
 389+ 28E4             >Dict_Ptr        defl    $
 389+ 28E4             >
 389+ 28E4             >//              ______________________________________________________________________
 389+ 28E4             >//              Heap part
 389+ 28E4             >
 389+ 28E4             >
 389+ 28E4             >                org     (Heap_Ptr & $1FFF) + $E000
 389+ E626             >
 389+ E626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ E626             >Latest_Definition defl  Heap_Ptr
 389+ E626             >
 389+ E626             >                // dummy db directives used to calculate length of namec
 389+ E626 43 52       >                db      "CR"
 389+ E628             >len_NFA         defl    $ - temp_NFA
 389+ E628             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ E626             >
 389+ E626 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ E627 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 389+ E629             >                org     $-1                 // alter last byte of Name just above to set
 389+ E628 D2          >                db      {b $} | END_BIT     // msb as name end
 389+ E629             >
 389+ E629 1C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 389+ E62B             >Prev_Ptr        defl    Heap_Ptr
 389+ E62B             >
 389+ E62B             >mirror_Ptr      defl    $
 389+ E62B             >
 389+ E62B E6 28       >                dw      Dict_Ptr + 2        // xt
 389+ E62D             >Heap_Ptr        defl    $ - $E000           // save current HP
 389+ E62D             >
 389+ E62D             >Current_HP      defl  $ - $E000             // used to set HP once!
 389+ E62D             >
 389+ E62D             >//              ______________________________________________________________________
 389+ E62D             >//              Dictionary part
 389+ E62D             >
 389+ E62D             >                org     Dict_Ptr
 389+ 28E4             >
 389+ 28E4 2B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 389+ 28E6             >
 389+ 28E6             >CR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 28E6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 28E9             >
 389+ 28E9             >
 389+ 28E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 28E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 28E9             >
 389+ 28E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 28E9 3D 20 0D 00                  dw      LIT,13,EMIT             // 13 emit
 390+ 28ED C4 28
 391+ 28EF BD 24                        dw      EXIT                    // ;
 392+ 28F1
 393+ 28F1              //  ______________________________________________________________________
 394+ 28F1              //
 395+ 28F1              // traverse     a n -- a
 396+ 28F1              // A dictionary entry is structured as follows
 397+ 28F1              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 398+ 28F1              //      +1   word name, last character is toggled with $80
 399+ 28F1              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 400+ 28F1              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 401+ 28F1              // PFA: +6+n "is_code", definitions have no PFA. // +5
 402+ 28F1              //
 403+ 28F1                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 403+ 28F1             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 403+ 28F1             >
 403+ 28F1             >Dict_Ptr        defl    $
 403+ 28F1             >
 403+ 28F1             >//              ______________________________________________________________________
 403+ 28F1             >//              Heap part
 403+ 28F1             >
 403+ 28F1             >
 403+ 28F1             >                org     (Heap_Ptr & $1FFF) + $E000
 403+ E62D             >
 403+ E62D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ E62D             >Latest_Definition defl  Heap_Ptr
 403+ E62D             >
 403+ E62D             >                // dummy db directives used to calculate length of namec
 403+ E62D 54 52 41 56 >                db      "TRAVERSE"
 403+ E631 45 52 53 45 >
 403+ E635             >len_NFA         defl    $ - temp_NFA
 403+ E635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ E62D             >
 403+ E62D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ E62E 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 403+ E632 45 52 53 45 >
 403+ E636             >                org     $-1                 // alter last byte of Name just above to set
 403+ E635 C5          >                db      {b $} | END_BIT     // msb as name end
 403+ E636             >
 403+ E636 26 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 403+ E638             >Prev_Ptr        defl    Heap_Ptr
 403+ E638             >
 403+ E638             >mirror_Ptr      defl    $
 403+ E638             >
 403+ E638 F3 28       >                dw      Dict_Ptr + 2        // xt
 403+ E63A             >Heap_Ptr        defl    $ - $E000           // save current HP
 403+ E63A             >
 403+ E63A             >Current_HP      defl  $ - $E000             // used to set HP once!
 403+ E63A             >
 403+ E63A             >//              ______________________________________________________________________
 403+ E63A             >//              Dictionary part
 403+ E63A             >
 403+ E63A             >                org     Dict_Ptr
 403+ 28F1             >
 403+ 28F1 38 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 403+ 28F3             >
 403+ 28F3             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 28F3 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 28F6             >
 403+ 28F6             >
 403+ 28F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 28F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 28F6             >
 403+ 28F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 28F6 81 25                        dw      SWAP                    // swap
 405+ 28F8              Traverse_Begin:                                 // begin
 406+ 28F8 64 25 0A 25                  dw          OVER, PLUS          //      over +
 407+ 28FC 3D 20 7F 00                  dw          LIT, 127            //      127
 408+ 2900 64 25 07 26                  dw          OVER, CFETCH        //      over @
 409+ 2904 6D 28                        dw          LESS                //      <
 410+ 2906                                                              // until
 411+ 2906 8D 20                        dw      ZBRANCH
 412+ 2908 F0 FF                        dw      Traverse_Begin - $
 413+ 290A 72 25                        dw      NIP                     //  nip
 414+ 290C BD 24                        dw      EXIT                    //  ;
 415+ 290E
 416+ 290E              //  ______________________________________________________________________
 417+ 290E              //
 418+ 290E              // mmu7@        -- n
 419+ 290E              // query current page in MMU7 8K-RAM : 0 and 223
 420+ 290E
 421+ 290E                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 421+ 290E             >
 421+ 290E             >Dict_Ptr        defl    $
 421+ 290E             >
 421+ 290E             >//              ______________________________________________________________________
 421+ 290E             >//              Heap part
 421+ 290E             >
 421+ 290E             >
 421+ 290E             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E63A             >
 421+ E63A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E63A             >Latest_Definition defl  Heap_Ptr
 421+ E63A             >
 421+ E63A             >                // dummy db directives used to calculate length of namec
 421+ E63A 4D 4D 55 37 >                db      "MMU7@"
 421+ E63E 40          >
 421+ E63F             >len_NFA         defl    $ - temp_NFA
 421+ E63F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E63A             >
 421+ E63A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E63B 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 421+ E63F 40          >
 421+ E640             >                org     $-1                 // alter last byte of Name just above to set
 421+ E63F C0          >                db      {b $} | END_BIT     // msb as name end
 421+ E640             >
 421+ E640 2D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E642             >Prev_Ptr        defl    Heap_Ptr
 421+ E642             >
 421+ E642             >mirror_Ptr      defl    $
 421+ E642             >
 421+ E642 10 29       >                dw      Dict_Ptr + 2        // xt
 421+ E644             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E644             >
 421+ E644             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E644             >
 421+ E644             >//              ______________________________________________________________________
 421+ E644             >//              Dictionary part
 421+ E644             >
 421+ E644             >                org     Dict_Ptr
 421+ 290E             >
 421+ 290E 42 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2910             >
 421+ 2910             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2910 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2910 ~           >
 421+ 2910 ~           >
 421+ 2910             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2910             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2910             >
 421+ 2910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2910 D9                           exx
 423+ 2911 CD 30 21                     call    MMU7_read
 424+ 2914 D9                           exx
 425+ 2915 6F                           ld      l, a
 426+ 2916 26 00                        ld      h, 0
 427+ 2918 E5                           push    hl
 428+ 2919                              next
 428+ 2919 DD E9       >                jp      (ix)
 429+ 291B
 430+ 291B              //  ______________________________________________________________________
 431+ 291B              //
 432+ 291B              // mmu7!        n --
 433+ 291B              // set MMU7 8K-RAM page to n given between 0 and 223
 434+ 291B              // optimized version that uses NEXTREG n,A Z80n op-code.
 435+ 291B
 436+ 291B                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 436+ 291B             >
 436+ 291B             >Dict_Ptr        defl    $
 436+ 291B             >
 436+ 291B             >//              ______________________________________________________________________
 436+ 291B             >//              Heap part
 436+ 291B             >
 436+ 291B             >
 436+ 291B             >                org     (Heap_Ptr & $1FFF) + $E000
 436+ E644             >
 436+ E644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ E644             >Latest_Definition defl  Heap_Ptr
 436+ E644             >
 436+ E644             >                // dummy db directives used to calculate length of namec
 436+ E644 4D 4D 55 37 >                db      "MMU7!"
 436+ E648 21          >
 436+ E649             >len_NFA         defl    $ - temp_NFA
 436+ E649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ E644             >
 436+ E644 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ E645 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 436+ E649 21          >
 436+ E64A             >                org     $-1                 // alter last byte of Name just above to set
 436+ E649 A1          >                db      {b $} | END_BIT     // msb as name end
 436+ E64A             >
 436+ E64A 3A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 436+ E64C             >Prev_Ptr        defl    Heap_Ptr
 436+ E64C             >
 436+ E64C             >mirror_Ptr      defl    $
 436+ E64C             >
 436+ E64C 1D 29       >                dw      Dict_Ptr + 2        // xt
 436+ E64E             >Heap_Ptr        defl    $ - $E000           // save current HP
 436+ E64E             >
 436+ E64E             >Current_HP      defl  $ - $E000             // used to set HP once!
 436+ E64E             >
 436+ E64E             >//              ______________________________________________________________________
 436+ E64E             >//              Dictionary part
 436+ E64E             >
 436+ E64E             >                org     Dict_Ptr
 436+ 291B             >
 436+ 291B 4C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 436+ 291D             >
 436+ 291D             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 291D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 436+ 291D ~           >
 436+ 291D ~           >
 436+ 291D             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 291D             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 291D             >
 436+ 291D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 291D E1                           pop     hl
 438+ 291E 7D                           ld      a, l
 439+ 291F ED 92 57                     nextreg 87, a
 440+ 2922
 441+ 2922                              next
 441+ 2922 DD E9       >                jp      (ix)
 442+ 2924
 443+ 2924              //  ______________________________________________________________________
 444+ 2924              //
 445+ 2924              // >far         ha -- a n
 446+ 2924              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 447+ 2924              // take lower bits of H and L as an offset from E000h
 448+ 2924              // then return address  a  between E000h-FFFFh
 449+ 2924              // and page number n  between 64-71 (40h-47h)
 450+ 2924              // For example, in hex:
 451+ 2924              //   0000 >FAR  gives  40.E000
 452+ 2924              //   1FFF >FAR  gives  40.FFFF
 453+ 2924              //   2000 >FAR  gives  41.E000
 454+ 2924              //   3FFF >FAR  gives  41.FFFF
 455+ 2924              //   EFFF >FAR  gives  47.EFFF
 456+ 2924              //   FFFF >FAR  gives  47.FFFF
 457+ 2924                              New_Def TO_FAR, ">FAR", is_code, is_normal
 457+ 2924             >
 457+ 2924             >Dict_Ptr        defl    $
 457+ 2924             >
 457+ 2924             >//              ______________________________________________________________________
 457+ 2924             >//              Heap part
 457+ 2924             >
 457+ 2924             >
 457+ 2924             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E64E             >
 457+ E64E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E64E             >Latest_Definition defl  Heap_Ptr
 457+ E64E             >
 457+ E64E             >                // dummy db directives used to calculate length of namec
 457+ E64E 3E 46 41 52 >                db      ">FAR"
 457+ E652             >len_NFA         defl    $ - temp_NFA
 457+ E652             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E64E             >
 457+ E64E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E64F 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 457+ E653             >                org     $-1                 // alter last byte of Name just above to set
 457+ E652 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E653             >
 457+ E653 44 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E655             >Prev_Ptr        defl    Heap_Ptr
 457+ E655             >
 457+ E655             >mirror_Ptr      defl    $
 457+ E655             >
 457+ E655 26 29       >                dw      Dict_Ptr + 2        // xt
 457+ E657             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E657             >
 457+ E657             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E657             >
 457+ E657             >//              ______________________________________________________________________
 457+ E657             >//              Dictionary part
 457+ E657             >
 457+ E657             >                org     Dict_Ptr
 457+ 2924             >
 457+ 2924 55 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 2926             >
 457+ 2926             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 2926 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 2926 ~           >
 457+ 2926 ~           >
 457+ 2926             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 2926             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 2926             >
 457+ 2926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 2926 E1                           pop     hl
 459+ 2927 CD 3B 21                     call    TO_FAR_rout
 460+ 292A E5                           push    hl
 461+ 292B 6F                           ld      l, a
 462+ 292C 26 00                        ld      h, 0
 463+ 292E E5                           push    hl
 464+ 292F                              next
 464+ 292F DD E9       >                jp      (ix)
 465+ 2931
 466+ 2931              //  ______________________________________________________________________
 467+ 2931              //
 468+ 2931              // <far         a n  -- ha
 469+ 2931              // given an address E000-FFFF and a page number n (32-39 or 20h-27h)
 470+ 2931              // reverse of >FAR: encodes a FAR address compressing
 471+ 2931              // to bits 765 of H, lower bits of HL address offset from E000h
 472+ 2931                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 472+ 2931             >
 472+ 2931             >Dict_Ptr        defl    $
 472+ 2931             >
 472+ 2931             >//              ______________________________________________________________________
 472+ 2931             >//              Heap part
 472+ 2931             >
 472+ 2931             >
 472+ 2931             >                org     (Heap_Ptr & $1FFF) + $E000
 472+ E657             >
 472+ E657             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 472+ E657             >Latest_Definition defl  Heap_Ptr
 472+ E657             >
 472+ E657             >                // dummy db directives used to calculate length of namec
 472+ E657 3C 46 41 52 >                db      "<FAR"
 472+ E65B             >len_NFA         defl    $ - temp_NFA
 472+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 472+ E657             >
 472+ E657 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 472+ E658 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 472+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 472+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 472+ E65C             >
 472+ E65C 4E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 472+ E65E             >Prev_Ptr        defl    Heap_Ptr
 472+ E65E             >
 472+ E65E             >mirror_Ptr      defl    $
 472+ E65E             >
 472+ E65E 33 29       >                dw      Dict_Ptr + 2        // xt
 472+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 472+ E660             >
 472+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 472+ E660             >
 472+ E660             >//              ______________________________________________________________________
 472+ E660             >//              Dictionary part
 472+ E660             >
 472+ E660             >                org     Dict_Ptr
 472+ 2931             >
 472+ 2931 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 472+ 2933             >
 472+ 2933             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 472+ 2933 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 472+ 2933 ~           >
 472+ 2933 ~           >
 472+ 2933             >                endif           ; ok        // for other definitions it "points" the correct handler
 472+ 2933             >                // Use of "; ok" to suppress "warning[fwdref]"
 472+ 2933             >
 472+ 2933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 473+ 2933 E1                           pop     hl                  // page number in l
 474+ 2934 7D                           ld      a, l
 475+ 2935 E6 07                        and     07
 476+ 2937 0F                           rrca
 477+ 2938 0F                           rrca
 478+ 2939 0F                           rrca
 479+ 293A 08                           ex      af, af
 480+ 293B E1                           pop     hl                  // address in hl
 481+ 293C 7C                           ld      a, h
 482+ 293D E6 1F                        and     $1F
 483+ 293F 67                           ld      h, a
 484+ 2940 08                           ex      af, af
 485+ 2941 B4                           or      h
 486+ 2942 67                           ld      h, a
 487+ 2943                              psh1
 487+ 2943 E5          >                push    hl
 487+ 2944 DD E9       >                jp      (ix)
 488+ 2946
 489+ 2946              //  ______________________________________________________________________
 490+ 2946              //
 491+ 2946              // ?IN_MMU7        a -- f
 492+ 2946              // check if address lies on MMU7
 493+ 2946              // tf is passed address is on MMU7
 494+ 2946                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 494+ 2946             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 494+ 2946             >
 494+ 2946             >Dict_Ptr        defl    $
 494+ 2946             >
 494+ 2946             >//              ______________________________________________________________________
 494+ 2946             >//              Heap part
 494+ 2946             >
 494+ 2946             >
 494+ 2946             >                org     (Heap_Ptr & $1FFF) + $E000
 494+ E660             >
 494+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 494+ E660             >Latest_Definition defl  Heap_Ptr
 494+ E660             >
 494+ E660             >                // dummy db directives used to calculate length of namec
 494+ E660 3F 49 4E 5F >                db      "?IN_MMU7"
 494+ E664 4D 4D 55 37 >
 494+ E668             >len_NFA         defl    $ - temp_NFA
 494+ E668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 494+ E660             >
 494+ E660 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 494+ E661 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 494+ E665 4D 4D 55 37 >
 494+ E669             >                org     $-1                 // alter last byte of Name just above to set
 494+ E668 B7          >                db      {b $} | END_BIT     // msb as name end
 494+ E669             >
 494+ E669 57 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 494+ E66B             >Prev_Ptr        defl    Heap_Ptr
 494+ E66B             >
 494+ E66B             >mirror_Ptr      defl    $
 494+ E66B             >
 494+ E66B 48 29       >                dw      Dict_Ptr + 2        // xt
 494+ E66D             >Heap_Ptr        defl    $ - $E000           // save current HP
 494+ E66D             >
 494+ E66D             >Current_HP      defl  $ - $E000             // used to set HP once!
 494+ E66D             >
 494+ E66D             >//              ______________________________________________________________________
 494+ E66D             >//              Dictionary part
 494+ E66D             >
 494+ E66D             >                org     Dict_Ptr
 494+ 2946             >
 494+ 2946 6B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 494+ 2948             >
 494+ 2948             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 494+ 2948 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 494+ 294B             >
 494+ 294B             >
 494+ 294B             >                endif           ; ok        // for other definitions it "points" the correct handler
 494+ 294B             >                // Use of "; ok" to suppress "warning[fwdref]"
 494+ 294B             >
 494+ 294B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 495+ 294B 88 25                        dw      DUP
 496+ 294D 3D 20 00 E0                  dw      LIT, $E000
 497+ 2951 5F 28                        dw      ULESS
 498+ 2953 EF 24                        dw      NOT_OP
 499+ 2955 BD 24                        dw      EXIT
 500+ 2957
 501+ 2957              //  ______________________________________________________________________
 502+ 2957              //
 503+ 2957              // far          hp -- ha
 504+ 2957              // Convert an "heap-pointer address" (ha) into a real address (a)
 505+ 2957              // between E000h and FFFFh and fit the correct 8K page on MMU7
 506+ 2957              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 507+ 2957                              Colon_Def FAR, "FAR", is_normal
 507+ 2957             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 507+ 2957             >
 507+ 2957             >Dict_Ptr        defl    $
 507+ 2957             >
 507+ 2957             >//              ______________________________________________________________________
 507+ 2957             >//              Heap part
 507+ 2957             >
 507+ 2957             >
 507+ 2957             >                org     (Heap_Ptr & $1FFF) + $E000
 507+ E66D             >
 507+ E66D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ E66D             >Latest_Definition defl  Heap_Ptr
 507+ E66D             >
 507+ E66D             >                // dummy db directives used to calculate length of namec
 507+ E66D 46 41 52    >                db      "FAR"
 507+ E670             >len_NFA         defl    $ - temp_NFA
 507+ E670             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ E66D             >
 507+ E66D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ E66E 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 507+ E671             >                org     $-1                 // alter last byte of Name just above to set
 507+ E670 D2          >                db      {b $} | END_BIT     // msb as name end
 507+ E671             >
 507+ E671 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 507+ E673             >Prev_Ptr        defl    Heap_Ptr
 507+ E673             >
 507+ E673             >mirror_Ptr      defl    $
 507+ E673             >
 507+ E673 59 29       >                dw      Dict_Ptr + 2        // xt
 507+ E675             >Heap_Ptr        defl    $ - $E000           // save current HP
 507+ E675             >
 507+ E675             >Current_HP      defl  $ - $E000             // used to set HP once!
 507+ E675             >
 507+ E675             >//              ______________________________________________________________________
 507+ E675             >//              Dictionary part
 507+ E675             >
 507+ E675             >                org     Dict_Ptr
 507+ 2957             >
 507+ 2957 73 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 507+ 2959             >
 507+ 2959             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 2959 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 295C             >
 507+ 295C             >
 507+ 295C             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 295C             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 295C             >
 507+ 295C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 295C 26 29                        dw      TO_FAR
 509+ 295E 1D 29                        dw      MMU7_STORE
 510+ 2960 BD 24                        dw      EXIT
 511+ 2962
 512+ 2962              //  ______________________________________________________________________
 513+ 2962              //
 514+ 2962              // ?HEAP_PTR       n -- n f
 515+ 2962              // check if it's a non-zero heap-pointer or less than $6300
 516+ 2962              // tf if passed argument is an hp
 517+ 2962              // ff if passed argument isn't hp
 518+ 2962                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 518+ 2962             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 518+ 2962             >
 518+ 2962             >Dict_Ptr        defl    $
 518+ 2962             >
 518+ 2962             >//              ______________________________________________________________________
 518+ 2962             >//              Heap part
 518+ 2962             >
 518+ 2962             >
 518+ 2962             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E675             >
 518+ E675             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E675             >Latest_Definition defl  Heap_Ptr
 518+ E675             >
 518+ E675             >                // dummy db directives used to calculate length of namec
 518+ E675 3F 48 45 41 >                db      "?HEAP_PTR"
 518+ E679 50 5F 50 54 >
 518+ E67D 52          >
 518+ E67E             >len_NFA         defl    $ - temp_NFA
 518+ E67E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E675             >
 518+ E675 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E676 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 518+ E67A 50 5F 50 54 >
 518+ E67E 52          >
 518+ E67F             >                org     $-1                 // alter last byte of Name just above to set
 518+ E67E D2          >                db      {b $} | END_BIT     // msb as name end
 518+ E67F             >
 518+ E67F 6D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E681             >Prev_Ptr        defl    Heap_Ptr
 518+ E681             >
 518+ E681             >mirror_Ptr      defl    $
 518+ E681             >
 518+ E681 64 29       >                dw      Dict_Ptr + 2        // xt
 518+ E683             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E683             >
 518+ E683             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E683             >
 518+ E683             >//              ______________________________________________________________________
 518+ E683             >//              Dictionary part
 518+ E683             >
 518+ E683             >                org     Dict_Ptr
 518+ 2962             >
 518+ 2962 81 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 2964             >
 518+ 2964             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 2964 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 2967             >
 518+ 2967             >
 518+ 2967             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 2967             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 2967             >
 518+ 2967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 2967 88 25                        dw      DUP
 520+ 2969 8D 20                        dw      ZBRANCH
 521+ 296B 08 00                        dw      QHeap_Skip - $
 522+ 296D 3D 20 00 63                  dw          LIT, $6300
 523+ 2971 5F 28                        dw          ULESS
 524+ 2973              QHeap_Skip:                                          // endif
 525+ 2973 BD 24                        dw      EXIT                        // ;
 526+ 2975
 527+ 2975              //  ______________________________________________________________________
 528+ 2975              //
 529+ 2975              // ?>heap       n1 -- n2
 530+ 2975              // heap correction: given an LFA check if it's a real address or a heap-pointer
 531+ 2975              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 532+ 2975              // and converted to heap address updating MMU7 via FAR
 533+ 2975                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 533+ 2975             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 533+ 2975             >
 533+ 2975             >Dict_Ptr        defl    $
 533+ 2975             >
 533+ 2975             >//              ______________________________________________________________________
 533+ 2975             >//              Heap part
 533+ 2975             >
 533+ 2975             >
 533+ 2975             >                org     (Heap_Ptr & $1FFF) + $E000
 533+ E683             >
 533+ E683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ E683             >Latest_Definition defl  Heap_Ptr
 533+ E683             >
 533+ E683             >                // dummy db directives used to calculate length of namec
 533+ E683 3F 3E 48 45 >                db      "?>HEAP"
 533+ E687 41 50       >
 533+ E689             >len_NFA         defl    $ - temp_NFA
 533+ E689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ E683             >
 533+ E683 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ E684 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 533+ E688 41 50       >
 533+ E68A             >                org     $-1                 // alter last byte of Name just above to set
 533+ E689 D0          >                db      {b $} | END_BIT     // msb as name end
 533+ E68A             >
 533+ E68A 75 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 533+ E68C             >Prev_Ptr        defl    Heap_Ptr
 533+ E68C             >
 533+ E68C             >mirror_Ptr      defl    $
 533+ E68C             >
 533+ E68C 77 29       >                dw      Dict_Ptr + 2        // xt
 533+ E68E             >Heap_Ptr        defl    $ - $E000           // save current HP
 533+ E68E             >
 533+ E68E             >Current_HP      defl  $ - $E000             // used to set HP once!
 533+ E68E             >
 533+ E68E             >//              ______________________________________________________________________
 533+ E68E             >//              Dictionary part
 533+ E68E             >
 533+ E68E             >                org     Dict_Ptr
 533+ 2975             >
 533+ 2975 8C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 533+ 2977             >
 533+ 2977             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 2977 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 297A             >
 533+ 297A             >
 533+ 297A             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 297A             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 297A             >
 533+ 297A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 297A 88 25                        dw      DUP
 535+ 297C 64 29                        dw      QHEAPP
 536+ 297E 8D 20                        dw      ZBRANCH
 537+ 2980 04 00                        dw      Q2Heap_Skip - $
 538+ 2982 59 29                        dw          FAR
 539+ 2984              Q2Heap_Skip:                                          // endif
 540+ 2984 BD 24                        dw      EXIT                        // ;
 541+ 2986
 542+ 2986              //  ______________________________________________________________________
 543+ 2986              //
 544+ 2986              // hp_fetch     -- a
 545+ 2986                              Colon_Def HP_FETCH, "HP@", is_normal
 545+ 2986             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 545+ 2986             >
 545+ 2986             >Dict_Ptr        defl    $
 545+ 2986             >
 545+ 2986             >//              ______________________________________________________________________
 545+ 2986             >//              Heap part
 545+ 2986             >
 545+ 2986             >
 545+ 2986             >                org     (Heap_Ptr & $1FFF) + $E000
 545+ E68E             >
 545+ E68E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ E68E             >Latest_Definition defl  Heap_Ptr
 545+ E68E             >
 545+ E68E             >                // dummy db directives used to calculate length of namec
 545+ E68E 48 50 40    >                db      "HP@"
 545+ E691             >len_NFA         defl    $ - temp_NFA
 545+ E691             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ E68E             >
 545+ E68E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ E68F 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 545+ E692             >                org     $-1                 // alter last byte of Name just above to set
 545+ E691 C0          >                db      {b $} | END_BIT     // msb as name end
 545+ E692             >
 545+ E692 83 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 545+ E694             >Prev_Ptr        defl    Heap_Ptr
 545+ E694             >
 545+ E694             >mirror_Ptr      defl    $
 545+ E694             >
 545+ E694 88 29       >                dw      Dict_Ptr + 2        // xt
 545+ E696             >Heap_Ptr        defl    $ - $E000           // save current HP
 545+ E696             >
 545+ E696             >Current_HP      defl  $ - $E000             // used to set HP once!
 545+ E696             >
 545+ E696             >//              ______________________________________________________________________
 545+ E696             >//              Dictionary part
 545+ E696             >
 545+ E696             >                org     Dict_Ptr
 545+ 2986             >
 545+ 2986 94 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 545+ 2988             >
 545+ 2988             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 2988 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 298B             >
 545+ 298B             >
 545+ 298B             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 298B             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 298B             >
 545+ 298B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 298B 79 27 F2 25                  dw      HP, FETCH               // hp @
 547+ 298F BD 24                        dw      EXIT                    // ;
 548+ 2991
 549+ 2991              //  ______________________________________________________________________
 550+ 2991              //
 551+ 2991              // page-watermark   -- n
 552+ 2991              // how much a 8K page can be filled..
 553+ 2991                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 553+ 2991             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 553+ 2991             >
 553+ 2991             >Dict_Ptr        defl    $
 553+ 2991             >
 553+ 2991             >//              ______________________________________________________________________
 553+ 2991             >//              Heap part
 553+ 2991             >
 553+ 2991             >
 553+ 2991             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E696             >
 553+ E696             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E696             >Latest_Definition defl  Heap_Ptr
 553+ E696             >
 553+ E696             >                // dummy db directives used to calculate length of namec
 553+ E696 50 41 47 45 >                db      "PAGE-WATERMARK"
 553+ E69A 2D 57 41 54 >
 553+ E69E 45 52 4D 41 >
 553+ E6A2 52 4B       >
 553+ E6A4             >len_NFA         defl    $ - temp_NFA
 553+ E6A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E696             >
 553+ E696 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E697 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 553+ E69B 2D 57 41 54 >
 553+ E69F 45 52 4D 41 >
 553+ E6A3 52 4B       >
 553+ E6A5             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6A4 CB          >                db      {b $} | END_BIT     // msb as name end
 553+ E6A5             >
 553+ E6A5 8E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6A7             >Prev_Ptr        defl    Heap_Ptr
 553+ E6A7             >
 553+ E6A7             >mirror_Ptr      defl    $
 553+ E6A7             >
 553+ E6A7 93 29       >                dw      Dict_Ptr + 2        // xt
 553+ E6A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6A9             >
 553+ E6A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6A9             >
 553+ E6A9             >//              ______________________________________________________________________
 553+ E6A9             >//              Dictionary part
 553+ E6A9             >
 553+ E6A9             >                org     Dict_Ptr
 553+ 2991             >
 553+ 2991 A7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 2993             >
 553+ 2993             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 2993 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 553+ 2996             >
 553+ 2996             >
 553+ 2996             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 2996             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 2996             >
 553+ 2996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 2996 80 1F       >                dw      $1F80
 554+ 2998
 555+ 2998              //  ______________________________________________________________________
 556+ 2998              //
 557+ 2998              // skip-hp-page ha -- a
 558+ 2998                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 558+ 2998             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 558+ 2998             >
 558+ 2998             >Dict_Ptr        defl    $
 558+ 2998             >
 558+ 2998             >//              ______________________________________________________________________
 558+ 2998             >//              Heap part
 558+ 2998             >
 558+ 2998             >
 558+ 2998             >                org     (Heap_Ptr & $1FFF) + $E000
 558+ E6A9             >
 558+ E6A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ E6A9             >Latest_Definition defl  Heap_Ptr
 558+ E6A9             >
 558+ E6A9             >                // dummy db directives used to calculate length of namec
 558+ E6A9 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 558+ E6AD 2D 48 50 2D >
 558+ E6B1 50 41 47 45 >
 558+ E6B5             >len_NFA         defl    $ - temp_NFA
 558+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ E6A9             >
 558+ E6A9 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ E6AA 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 558+ E6AE 2D 48 50 2D >
 558+ E6B2 50 41 47 45 >
 558+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 558+ E6B5 C5          >                db      {b $} | END_BIT     // msb as name end
 558+ E6B6             >
 558+ E6B6 96 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 558+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 558+ E6B8             >
 558+ E6B8             >mirror_Ptr      defl    $
 558+ E6B8             >
 558+ E6B8 9A 29       >                dw      Dict_Ptr + 2        // xt
 558+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 558+ E6BA             >
 558+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 558+ E6BA             >
 558+ E6BA             >//              ______________________________________________________________________
 558+ E6BA             >//              Dictionary part
 558+ E6BA             >
 558+ E6BA             >                org     Dict_Ptr
 558+ 2998             >
 558+ 2998 B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 558+ 299A             >
 558+ 299A             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 299A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 299D             >
 558+ 299D             >
 558+ 299D             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 299D             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 299D             >
 558+ 299D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 299D 88 29                        dw      HP_FETCH                // hp@
 560+ 299F 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 560+ 29A3 7D 24
 561+ 29A5 0A 25                        dw      PLUS
 562+ 29A7 93 29                        dw      PAGE_WATERMARK
 563+ 29A9 7A 28                        dw      GREATER
 564+ 29AB 8D 20                        dw      ZBRANCH
 565+ 29AD 12 00                        dw      Skip_Skip - $   // if
 566+ 29AF 88 29                        dw      HP_FETCH
 567+ 29B1 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 567+ 29B5 8C 24
 568+ 29B7 23 25 31 25                  dw      ONE_PLUS, TWO_PLUS
 569+ 29BB 79 27 FC 25                  dw      HP, STORE
 570+ 29BF              Skip_Skip:
 571+ 29BF BD 24                        dw      EXIT                    // ;
 572+ 29C1              //  ______________________________________________________________________
 573+ 29C1              //
 574+ 29C1              // latest       -- nfa
 575+ 29C1                              Colon_Def LATEST, "LATEST", is_normal
 575+ 29C1             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 575+ 29C1             >
 575+ 29C1             >Dict_Ptr        defl    $
 575+ 29C1             >
 575+ 29C1             >//              ______________________________________________________________________
 575+ 29C1             >//              Heap part
 575+ 29C1             >
 575+ 29C1             >
 575+ 29C1             >                org     (Heap_Ptr & $1FFF) + $E000
 575+ E6BA             >
 575+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ E6BA             >Latest_Definition defl  Heap_Ptr
 575+ E6BA             >
 575+ E6BA             >                // dummy db directives used to calculate length of namec
 575+ E6BA 4C 41 54 45 >                db      "LATEST"
 575+ E6BE 53 54       >
 575+ E6C0             >len_NFA         defl    $ - temp_NFA
 575+ E6C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ E6BA             >
 575+ E6BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ E6BB 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 575+ E6BF 53 54       >
 575+ E6C1             >                org     $-1                 // alter last byte of Name just above to set
 575+ E6C0 D4          >                db      {b $} | END_BIT     // msb as name end
 575+ E6C1             >
 575+ E6C1 A9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 575+ E6C3             >Prev_Ptr        defl    Heap_Ptr
 575+ E6C3             >
 575+ E6C3             >mirror_Ptr      defl    $
 575+ E6C3             >
 575+ E6C3 C3 29       >                dw      Dict_Ptr + 2        // xt
 575+ E6C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 575+ E6C5             >
 575+ E6C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 575+ E6C5             >
 575+ E6C5             >//              ______________________________________________________________________
 575+ E6C5             >//              Dictionary part
 575+ E6C5             >
 575+ E6C5             >                org     Dict_Ptr
 575+ 29C1             >
 575+ 29C1 C3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 575+ 29C3             >
 575+ 29C3             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 29C3 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 29C6             >
 575+ 29C6             >
 575+ 29C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 29C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 29C6             >
 575+ 29C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 29C6 A9 27                        dw      CURRENT                 // current
 577+ 29C8 F2 25 F2 25                  dw      FETCH, FETCH            // @ @
 578+ 29CC 59 29                        dw      FAR // Q TO HEAP
 579+ 29CE BD 24                        dw      EXIT                    // ;
 580+ 29D0
 581+ 29D0              //  ______________________________________________________________________
 582+ 29D0              //
 583+ 29D0              // >body        cfa -- pfa
 584+ 29D0                              Colon_Def TO_BODY, ">BODY", is_normal
 584+ 29D0             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 584+ 29D0             >
 584+ 29D0             >Dict_Ptr        defl    $
 584+ 29D0             >
 584+ 29D0             >//              ______________________________________________________________________
 584+ 29D0             >//              Heap part
 584+ 29D0             >
 584+ 29D0             >
 584+ 29D0             >                org     (Heap_Ptr & $1FFF) + $E000
 584+ E6C5             >
 584+ E6C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ E6C5             >Latest_Definition defl  Heap_Ptr
 584+ E6C5             >
 584+ E6C5             >                // dummy db directives used to calculate length of namec
 584+ E6C5 3E 42 4F 44 >                db      ">BODY"
 584+ E6C9 59          >
 584+ E6CA             >len_NFA         defl    $ - temp_NFA
 584+ E6CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ E6C5             >
 584+ E6C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ E6C6 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 584+ E6CA 59          >
 584+ E6CB             >                org     $-1                 // alter last byte of Name just above to set
 584+ E6CA D9          >                db      {b $} | END_BIT     // msb as name end
 584+ E6CB             >
 584+ E6CB BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 584+ E6CD             >Prev_Ptr        defl    Heap_Ptr
 584+ E6CD             >
 584+ E6CD             >mirror_Ptr      defl    $
 584+ E6CD             >
 584+ E6CD D2 29       >                dw      Dict_Ptr + 2        // xt
 584+ E6CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 584+ E6CF             >
 584+ E6CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 584+ E6CF             >
 584+ E6CF             >//              ______________________________________________________________________
 584+ E6CF             >//              Dictionary part
 584+ E6CF             >
 584+ E6CF             >                org     Dict_Ptr
 584+ 29D0             >
 584+ 29D0 CD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 584+ 29D2             >
 584+ 29D2             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 29D2 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 29D5             >
 584+ 29D5             >
 584+ 29D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 29D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 29D5             >
 584+ 29D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 29D5 F9 26 0A 25                  dw      THREE, PLUS             // cell+ --> 3 +
 586+ 29D9 BD 24                        dw      EXIT                    // ;
 587+ 29DB
 588+ 29DB              //  ______________________________________________________________________
 589+ 29DB              //
 590+ 29DB              // <name        cfa -- nfa
 591+ 29DB                              Colon_Def TO_NAME, "<NAME", is_normal
 591+ 29DB             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 591+ 29DB             >
 591+ 29DB             >Dict_Ptr        defl    $
 591+ 29DB             >
 591+ 29DB             >//              ______________________________________________________________________
 591+ 29DB             >//              Heap part
 591+ 29DB             >
 591+ 29DB             >
 591+ 29DB             >                org     (Heap_Ptr & $1FFF) + $E000
 591+ E6CF             >
 591+ E6CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 591+ E6CF             >Latest_Definition defl  Heap_Ptr
 591+ E6CF             >
 591+ E6CF             >                // dummy db directives used to calculate length of namec
 591+ E6CF 3C 4E 41 4D >                db      "<NAME"
 591+ E6D3 45          >
 591+ E6D4             >len_NFA         defl    $ - temp_NFA
 591+ E6D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 591+ E6CF             >
 591+ E6CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 591+ E6D0 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 591+ E6D4 45          >
 591+ E6D5             >                org     $-1                 // alter last byte of Name just above to set
 591+ E6D4 C5          >                db      {b $} | END_BIT     // msb as name end
 591+ E6D5             >
 591+ E6D5 C5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 591+ E6D7             >Prev_Ptr        defl    Heap_Ptr
 591+ E6D7             >
 591+ E6D7             >mirror_Ptr      defl    $
 591+ E6D7             >
 591+ E6D7 DD 29       >                dw      Dict_Ptr + 2        // xt
 591+ E6D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 591+ E6D9             >
 591+ E6D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 591+ E6D9             >
 591+ E6D9             >//              ______________________________________________________________________
 591+ E6D9             >//              Dictionary part
 591+ E6D9             >
 591+ E6D9             >                org     Dict_Ptr
 591+ 29DB             >
 591+ 29DB D7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 591+ 29DD             >
 591+ 29DD             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 591+ 29DD CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 591+ 29E0             >
 591+ 29E0             >
 591+ 29E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 591+ 29E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 591+ 29E0             >
 591+ 29E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 592+ 29E0 3D 25                        dw      CELL_MINUS              // cell-
 593+ 29E2 88 25 F2 25                  dw      DUP, FETCH
 594+ 29E6 64 29                        dw      QHEAPP
 595+ 29E8 8D 20                        dw      ZBRANCH
 596+ 29EA 08 00                        dw      ToName_Skip - $
 597+ 29EC F2 25 59 29                  dw          FETCH, FAR
 598+ 29F0 3D 25                        dw          CELL_MINUS
 599+ 29F2              ToName_Skip:                                    // endif
 600+ 29F2
 601+ 29F2 2A 25                        dw      ONE_SUBTRACT            // 1-
 602+ 29F4 00 27                        dw      NEG_ONE                 // -1
 603+ 29F6 F3 28                        dw      TRAVERSE                // traverse
 604+ 29F8 BD 24                        dw      EXIT                    // ;
 605+ 29FA
 606+ 29FA              //  ______________________________________________________________________
 607+ 29FA              //
 608+ 29FA              // cfa          pfa -- cfa
 609+ 29FA                              Colon_Def CFA, "CFA", is_normal
 609+ 29FA             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 609+ 29FA             >
 609+ 29FA             >Dict_Ptr        defl    $
 609+ 29FA             >
 609+ 29FA             >//              ______________________________________________________________________
 609+ 29FA             >//              Heap part
 609+ 29FA             >
 609+ 29FA             >
 609+ 29FA             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D9             >
 609+ E6D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D9             >Latest_Definition defl  Heap_Ptr
 609+ E6D9             >
 609+ E6D9             >                // dummy db directives used to calculate length of namec
 609+ E6D9 43 46 41    >                db      "CFA"
 609+ E6DC             >len_NFA         defl    $ - temp_NFA
 609+ E6DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D9             >
 609+ E6D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6DA 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 609+ E6DD             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6DC C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6DD             >
 609+ E6DD CF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DF             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DF             >
 609+ E6DF             >mirror_Ptr      defl    $
 609+ E6DF             >
 609+ E6DF FC 29       >                dw      Dict_Ptr + 2        // xt
 609+ E6E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6E1             >
 609+ E6E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6E1             >
 609+ E6E1             >//              ______________________________________________________________________
 609+ E6E1             >//              Dictionary part
 609+ E6E1             >
 609+ E6E1             >                org     Dict_Ptr
 609+ 29FA             >
 609+ 29FA DF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 29FC             >
 609+ 29FC             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 29FC CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 29FF             >
 609+ 29FF             >
 609+ 29FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 29FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 29FF             >
 609+ 29FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 29FF F9 26 48 28                  dw      THREE, SUBTRACT         // 3 -
 611+ 2A03 BD 24                        dw      EXIT                    // ;
 612+ 2A05
 613+ 2A05              //  ______________________________________________________________________
 614+ 2A05              //
 615+ 2A05              // nfa          pfa -- nfa
 616+ 2A05                              Colon_Def NFA, "NFA", is_normal
 616+ 2A05             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 616+ 2A05             >
 616+ 2A05             >Dict_Ptr        defl    $
 616+ 2A05             >
 616+ 2A05             >//              ______________________________________________________________________
 616+ 2A05             >//              Heap part
 616+ 2A05             >
 616+ 2A05             >
 616+ 2A05             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E6E1             >
 616+ E6E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E6E1             >Latest_Definition defl  Heap_Ptr
 616+ E6E1             >
 616+ E6E1             >                // dummy db directives used to calculate length of namec
 616+ E6E1 4E 46 41    >                db      "NFA"
 616+ E6E4             >len_NFA         defl    $ - temp_NFA
 616+ E6E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E6E1             >
 616+ E6E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E6E2 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 616+ E6E5             >                org     $-1                 // alter last byte of Name just above to set
 616+ E6E4 C1          >                db      {b $} | END_BIT     // msb as name end
 616+ E6E5             >
 616+ E6E5 D9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E6E7             >Prev_Ptr        defl    Heap_Ptr
 616+ E6E7             >
 616+ E6E7             >mirror_Ptr      defl    $
 616+ E6E7             >
 616+ E6E7 07 2A       >                dw      Dict_Ptr + 2        // xt
 616+ E6E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E6E9             >
 616+ E6E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E6E9             >
 616+ E6E9             >//              ______________________________________________________________________
 616+ E6E9             >//              Dictionary part
 616+ E6E9             >
 616+ E6E9             >                org     Dict_Ptr
 616+ 2A05             >
 616+ 2A05 E7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 2A07             >
 616+ 2A07             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 2A07 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 2A0A             >
 616+ 2A0A             >
 616+ 2A0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 2A0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 2A0A             >
 616+ 2A0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 2A0A FC 29                        dw      CFA                     // cfa
 618+ 2A0C DD 29                        dw      TO_NAME                 // traverse
 619+ 2A0E BD 24                        dw      EXIT                    // ;
 620+ 2A10
 621+ 2A10              //  ______________________________________________________________________
 622+ 2A10              //
 623+ 2A10              // lfa          pfa -- lfa
 624+ 2A10                              Colon_Def LFA, "LFA", is_normal
 624+ 2A10             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 624+ 2A10             >
 624+ 2A10             >Dict_Ptr        defl    $
 624+ 2A10             >
 624+ 2A10             >//              ______________________________________________________________________
 624+ 2A10             >//              Heap part
 624+ 2A10             >
 624+ 2A10             >
 624+ 2A10             >                org     (Heap_Ptr & $1FFF) + $E000
 624+ E6E9             >
 624+ E6E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 624+ E6E9             >Latest_Definition defl  Heap_Ptr
 624+ E6E9             >
 624+ E6E9             >                // dummy db directives used to calculate length of namec
 624+ E6E9 4C 46 41    >                db      "LFA"
 624+ E6EC             >len_NFA         defl    $ - temp_NFA
 624+ E6EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 624+ E6E9             >
 624+ E6E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 624+ E6EA 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 624+ E6ED             >                org     $-1                 // alter last byte of Name just above to set
 624+ E6EC C1          >                db      {b $} | END_BIT     // msb as name end
 624+ E6ED             >
 624+ E6ED E1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 624+ E6EF             >Prev_Ptr        defl    Heap_Ptr
 624+ E6EF             >
 624+ E6EF             >mirror_Ptr      defl    $
 624+ E6EF             >
 624+ E6EF 12 2A       >                dw      Dict_Ptr + 2        // xt
 624+ E6F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 624+ E6F1             >
 624+ E6F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 624+ E6F1             >
 624+ E6F1             >//              ______________________________________________________________________
 624+ E6F1             >//              Dictionary part
 624+ E6F1             >
 624+ E6F1             >                org     Dict_Ptr
 624+ 2A10             >
 624+ 2A10 EF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 624+ 2A12             >
 624+ 2A12             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 624+ 2A12 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 624+ 2A15             >
 624+ 2A15             >
 624+ 2A15             >                endif           ; ok        // for other definitions it "points" the correct handler
 624+ 2A15             >                // Use of "; ok" to suppress "warning[fwdref]"
 624+ 2A15             >
 624+ 2A15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 625+ 2A15 07 2A                        dw      NFA                     // nfa
 626+ 2A17 EB 26                        dw      ONE                     // 1
 627+ 2A19 F3 28                        dw      TRAVERSE                // traverse
 628+ 2A1B 23 25                        dw      ONE_PLUS                // 1+
 629+ 2A1D BD 24                        dw      EXIT                    // ;
 630+ 2A1F
 631+ 2A1F              //  ______________________________________________________________________
 632+ 2A1F              //
 633+ 2A1F              // pfa          nfa -- pfa
 634+ 2A1F                              Colon_Def PFA, "PFA", is_normal
 634+ 2A1F             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 634+ 2A1F             >
 634+ 2A1F             >Dict_Ptr        defl    $
 634+ 2A1F             >
 634+ 2A1F             >//              ______________________________________________________________________
 634+ 2A1F             >//              Heap part
 634+ 2A1F             >
 634+ 2A1F             >
 634+ 2A1F             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6F1             >
 634+ E6F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6F1             >Latest_Definition defl  Heap_Ptr
 634+ E6F1             >
 634+ E6F1             >                // dummy db directives used to calculate length of namec
 634+ E6F1 50 46 41    >                db      "PFA"
 634+ E6F4             >len_NFA         defl    $ - temp_NFA
 634+ E6F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6F1             >
 634+ E6F1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6F2 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 634+ E6F5             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6F4 C1          >                db      {b $} | END_BIT     // msb as name end
 634+ E6F5             >
 634+ E6F5 E9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6F7             >Prev_Ptr        defl    Heap_Ptr
 634+ E6F7             >
 634+ E6F7             >mirror_Ptr      defl    $
 634+ E6F7             >
 634+ E6F7 21 2A       >                dw      Dict_Ptr + 2        // xt
 634+ E6F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6F9             >
 634+ E6F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6F9             >
 634+ E6F9             >//              ______________________________________________________________________
 634+ E6F9             >//              Dictionary part
 634+ E6F9             >
 634+ E6F9             >                org     Dict_Ptr
 634+ 2A1F             >
 634+ 2A1F F7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 2A21             >
 634+ 2A21             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 2A21 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 2A24             >
 634+ 2A24             >
 634+ 2A24             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 2A24             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 2A24             >
 634+ 2A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 2A24 77 29                        dw      QTOHEAP
 636+ 2A26 EB 26                        dw      ONE                     // 1
 637+ 2A28 F3 28                        dw      TRAVERSE                // traverse
 638+ 2A2A 23 25                        dw      ONE_PLUS                // 1+
 639+ 2A2C 39 25                        dw      CELL_PLUS               // cell+
 640+ 2A2E 48 29                        dw      QMMU7
 641+ 2A30 8D 20                        dw      ZBRANCH
 642+ 2A32 0E 00                        dw      PFA_Skip - $
 643+ 2A34 10 29                        dw          MMU7_FETCH
 644+ 2A36 EB 26 48 28                  dw          ONE, SUBTRACT
 645+ 2A3A 8D 20                        dw          ZBRANCH
 646+ 2A3C 04 00                        dw          PFA_Skip - $
 647+ 2A3E F2 25                        dw              FETCH
 648+ 2A40              PFA_Skip:                                    // endif
 649+ 2A40 D2 29                        dw      TO_BODY                 // >body
 650+ 2A42 BD 24                        dw      EXIT                    // ;
 651+ 2A44
 652+ 2A44              //  ______________________________________________________________________
 653+ 2A44              //
 654+ 2A44              // !csp         --
 655+ 2A44              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 656+ 2A44                              Colon_Def STORE_CSP, "!CSP", is_normal
 656+ 2A44             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 656+ 2A44             >
 656+ 2A44             >Dict_Ptr        defl    $
 656+ 2A44             >
 656+ 2A44             >//              ______________________________________________________________________
 656+ 2A44             >//              Heap part
 656+ 2A44             >
 656+ 2A44             >
 656+ 2A44             >                org     (Heap_Ptr & $1FFF) + $E000
 656+ E6F9             >
 656+ E6F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 656+ E6F9             >Latest_Definition defl  Heap_Ptr
 656+ E6F9             >
 656+ E6F9             >                // dummy db directives used to calculate length of namec
 656+ E6F9 21 43 53 50 >                db      "!CSP"
 656+ E6FD             >len_NFA         defl    $ - temp_NFA
 656+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 656+ E6F9             >
 656+ E6F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 656+ E6FA 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 656+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 656+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 656+ E6FE             >
 656+ E6FE F1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 656+ E700             >Prev_Ptr        defl    Heap_Ptr
 656+ E700             >
 656+ E700             >mirror_Ptr      defl    $
 656+ E700             >
 656+ E700 46 2A       >                dw      Dict_Ptr + 2        // xt
 656+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 656+ E702             >
 656+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 656+ E702             >
 656+ E702             >//              ______________________________________________________________________
 656+ E702             >//              Dictionary part
 656+ E702             >
 656+ E702             >                org     Dict_Ptr
 656+ 2A44             >
 656+ 2A44 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 656+ 2A46             >
 656+ 2A46             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 656+ 2A46 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 656+ 2A49             >
 656+ 2A49             >
 656+ 2A49             >                endif           ; ok        // for other definitions it "points" the correct handler
 656+ 2A49             >                // Use of "; ok" to suppress "warning[fwdref]"
 656+ 2A49             >
 656+ 2A49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 657+ 2A49 A4 24                        dw      SPFETCH                 // sp@
 658+ 2A4B C7 27 FC 25                  dw      CSP, STORE              // csp !
 659+ 2A4F BD 24                        dw      EXIT                    // ;
 660+ 2A51
 661+ 2A51              //  ______________________________________________________________________
 662+ 2A51              //
 663+ 2A51              // ?error       f n --
 664+ 2A51              // raise error n if flag f it true
 665+ 2A51                              Colon_Def QERROR, "?ERROR", is_normal
 665+ 2A51             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 665+ 2A51             >
 665+ 2A51             >Dict_Ptr        defl    $
 665+ 2A51             >
 665+ 2A51             >//              ______________________________________________________________________
 665+ 2A51             >//              Heap part
 665+ 2A51             >
 665+ 2A51             >
 665+ 2A51             >                org     (Heap_Ptr & $1FFF) + $E000
 665+ E702             >
 665+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 665+ E702             >Latest_Definition defl  Heap_Ptr
 665+ E702             >
 665+ E702             >                // dummy db directives used to calculate length of namec
 665+ E702 3F 45 52 52 >                db      "?ERROR"
 665+ E706 4F 52       >
 665+ E708             >len_NFA         defl    $ - temp_NFA
 665+ E708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 665+ E702             >
 665+ E702 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 665+ E703 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 665+ E707 4F 52       >
 665+ E709             >                org     $-1                 // alter last byte of Name just above to set
 665+ E708 D2          >                db      {b $} | END_BIT     // msb as name end
 665+ E709             >
 665+ E709 F9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 665+ E70B             >Prev_Ptr        defl    Heap_Ptr
 665+ E70B             >
 665+ E70B             >mirror_Ptr      defl    $
 665+ E70B             >
 665+ E70B 53 2A       >                dw      Dict_Ptr + 2        // xt
 665+ E70D             >Heap_Ptr        defl    $ - $E000           // save current HP
 665+ E70D             >
 665+ E70D             >Current_HP      defl  $ - $E000             // used to set HP once!
 665+ E70D             >
 665+ E70D             >//              ______________________________________________________________________
 665+ E70D             >//              Dictionary part
 665+ E70D             >
 665+ E70D             >                org     Dict_Ptr
 665+ 2A51             >
 665+ 2A51 0B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 665+ 2A53             >
 665+ 2A53             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 665+ 2A53 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 665+ 2A56             >
 665+ 2A56             >
 665+ 2A56             >                endif           ; ok        // for other definitions it "points" the correct handler
 665+ 2A56             >                // Use of "; ok" to suppress "warning[fwdref]"
 665+ 2A56             >
 665+ 2A56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 666+ 2A56 81 25                        dw      SWAP                    // swap
 667+ 2A58                                                              // if
 668+ 2A58 8D 20                        dw      ZBRANCH
 669+ 2A5A 08 00                        dw      QError_Else - $
 670+ 2A5C 03 30                        dw          ERROR               //      error  ( is a forward-ref )
 671+ 2A5E                                                              // else
 672+ 2A5E 89 20                        dw      BRANCH
 673+ 2A60 04 00                        dw      QError_Endif - $
 674+ 2A62              QError_Else:
 675+ 2A62 6D 25                        dw          DROP                //      drop
 676+ 2A64              QError_Endif:                                   // endif
 677+ 2A64 BD 24                        dw      EXIT                    // ;
 678+ 2A66
 679+ 2A66              //  ______________________________________________________________________
 680+ 2A66              //
 681+ 2A66              // ?comp       --
 682+ 2A66              // raise msg #17 if not compiling
 683+ 2A66                              Colon_Def QCOMP, "?COMP", is_normal
 683+ 2A66             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 683+ 2A66             >
 683+ 2A66             >Dict_Ptr        defl    $
 683+ 2A66             >
 683+ 2A66             >//              ______________________________________________________________________
 683+ 2A66             >//              Heap part
 683+ 2A66             >
 683+ 2A66             >
 683+ 2A66             >                org     (Heap_Ptr & $1FFF) + $E000
 683+ E70D             >
 683+ E70D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 683+ E70D             >Latest_Definition defl  Heap_Ptr
 683+ E70D             >
 683+ E70D             >                // dummy db directives used to calculate length of namec
 683+ E70D 3F 43 4F 4D >                db      "?COMP"
 683+ E711 50          >
 683+ E712             >len_NFA         defl    $ - temp_NFA
 683+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 683+ E70D             >
 683+ E70D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 683+ E70E 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 683+ E712 50          >
 683+ E713             >                org     $-1                 // alter last byte of Name just above to set
 683+ E712 D0          >                db      {b $} | END_BIT     // msb as name end
 683+ E713             >
 683+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 683+ E715             >Prev_Ptr        defl    Heap_Ptr
 683+ E715             >
 683+ E715             >mirror_Ptr      defl    $
 683+ E715             >
 683+ E715 68 2A       >                dw      Dict_Ptr + 2        // xt
 683+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 683+ E717             >
 683+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 683+ E717             >
 683+ E717             >//              ______________________________________________________________________
 683+ E717             >//              Dictionary part
 683+ E717             >
 683+ E717             >                org     Dict_Ptr
 683+ 2A66             >
 683+ 2A66 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 683+ 2A68             >
 683+ 2A68             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 683+ 2A68 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 683+ 2A6B             >
 683+ 2A6B             >
 683+ 2A6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 683+ 2A6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 683+ 2A6B             >
 683+ 2A6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 684+ 2A6B AF 27 F2 25                  dw      STATE, FETCH            // state @
 685+ 2A6F E2 24                        dw      ZEQUAL                  // 0=
 686+ 2A71 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 687+ 2A75 53 2A                        dw      QERROR                  // ?error
 688+ 2A77 BD 24                        dw      EXIT                    // ;
 689+ 2A79
 690+ 2A79              //  ______________________________________________________________________
 691+ 2A79              //
 692+ 2A79              // ?exec       --
 693+ 2A79              // raise msg #18 if compiling
 694+ 2A79                              Colon_Def QEXEC, "?EXEC", is_normal
 694+ 2A79             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 694+ 2A79             >
 694+ 2A79             >Dict_Ptr        defl    $
 694+ 2A79             >
 694+ 2A79             >//              ______________________________________________________________________
 694+ 2A79             >//              Heap part
 694+ 2A79             >
 694+ 2A79             >
 694+ 2A79             >                org     (Heap_Ptr & $1FFF) + $E000
 694+ E717             >
 694+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ E717             >Latest_Definition defl  Heap_Ptr
 694+ E717             >
 694+ E717             >                // dummy db directives used to calculate length of namec
 694+ E717 3F 45 58 45 >                db      "?EXEC"
 694+ E71B 43          >
 694+ E71C             >len_NFA         defl    $ - temp_NFA
 694+ E71C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ E717             >
 694+ E717 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ E718 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 694+ E71C 43          >
 694+ E71D             >                org     $-1                 // alter last byte of Name just above to set
 694+ E71C C3          >                db      {b $} | END_BIT     // msb as name end
 694+ E71D             >
 694+ E71D 0D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 694+ E71F             >Prev_Ptr        defl    Heap_Ptr
 694+ E71F             >
 694+ E71F             >mirror_Ptr      defl    $
 694+ E71F             >
 694+ E71F 7B 2A       >                dw      Dict_Ptr + 2        // xt
 694+ E721             >Heap_Ptr        defl    $ - $E000           // save current HP
 694+ E721             >
 694+ E721             >Current_HP      defl  $ - $E000             // used to set HP once!
 694+ E721             >
 694+ E721             >//              ______________________________________________________________________
 694+ E721             >//              Dictionary part
 694+ E721             >
 694+ E721             >                org     Dict_Ptr
 694+ 2A79             >
 694+ 2A79 1F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 694+ 2A7B             >
 694+ 2A7B             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 2A7B CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 2A7E             >
 694+ 2A7E             >
 694+ 2A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 2A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 2A7E             >
 694+ 2A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 2A7E AF 27 F2 25                  dw      STATE, FETCH            // state @
 696+ 2A82 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 697+ 2A86 53 2A                        dw      QERROR                  // ?error
 698+ 2A88 BD 24                        dw      EXIT                    // ;
 699+ 2A8A
 700+ 2A8A              //  ______________________________________________________________________
 701+ 2A8A              //
 702+ 2A8A              // ?pairs       n1 n2 --
 703+ 2A8A              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 704+ 2A8A                              Colon_Def QPAIRS, "?PAIRS", is_normal
 704+ 2A8A             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 704+ 2A8A             >
 704+ 2A8A             >Dict_Ptr        defl    $
 704+ 2A8A             >
 704+ 2A8A             >//              ______________________________________________________________________
 704+ 2A8A             >//              Heap part
 704+ 2A8A             >
 704+ 2A8A             >
 704+ 2A8A             >                org     (Heap_Ptr & $1FFF) + $E000
 704+ E721             >
 704+ E721             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ E721             >Latest_Definition defl  Heap_Ptr
 704+ E721             >
 704+ E721             >                // dummy db directives used to calculate length of namec
 704+ E721 3F 50 41 49 >                db      "?PAIRS"
 704+ E725 52 53       >
 704+ E727             >len_NFA         defl    $ - temp_NFA
 704+ E727             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ E721             >
 704+ E721 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ E722 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 704+ E726 52 53       >
 704+ E728             >                org     $-1                 // alter last byte of Name just above to set
 704+ E727 D3          >                db      {b $} | END_BIT     // msb as name end
 704+ E728             >
 704+ E728 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 704+ E72A             >Prev_Ptr        defl    Heap_Ptr
 704+ E72A             >
 704+ E72A             >mirror_Ptr      defl    $
 704+ E72A             >
 704+ E72A 8C 2A       >                dw      Dict_Ptr + 2        // xt
 704+ E72C             >Heap_Ptr        defl    $ - $E000           // save current HP
 704+ E72C             >
 704+ E72C             >Current_HP      defl  $ - $E000             // used to set HP once!
 704+ E72C             >
 704+ E72C             >//              ______________________________________________________________________
 704+ E72C             >//              Dictionary part
 704+ E72C             >
 704+ E72C             >                org     Dict_Ptr
 704+ 2A8A             >
 704+ 2A8A 2A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 704+ 2A8C             >
 704+ 2A8C             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 2A8C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 2A8F             >
 704+ 2A8F             >
 704+ 2A8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 2A8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 2A8F             >
 704+ 2A8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 2A8F 48 28                        dw      SUBTRACT                // -
 706+ 2A91 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 707+ 2A95 53 2A                        dw      QERROR                  // ?error
 708+ 2A97 BD 24                        dw      EXIT                    // ;
 709+ 2A99
 710+ 2A99              //  ______________________________________________________________________
 711+ 2A99              //
 712+ 2A99              // ?csp       --
 713+ 2A99              // raise msg #20 if surrent SP in not what previously saved in CSP.
 714+ 2A99              // Compiler relies on that for  syntax checking of structures
 715+ 2A99                              Colon_Def QCSP, "?CSP", is_normal
 715+ 2A99             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 715+ 2A99             >
 715+ 2A99             >Dict_Ptr        defl    $
 715+ 2A99             >
 715+ 2A99             >//              ______________________________________________________________________
 715+ 2A99             >//              Heap part
 715+ 2A99             >
 715+ 2A99             >
 715+ 2A99             >                org     (Heap_Ptr & $1FFF) + $E000
 715+ E72C             >
 715+ E72C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ E72C             >Latest_Definition defl  Heap_Ptr
 715+ E72C             >
 715+ E72C             >                // dummy db directives used to calculate length of namec
 715+ E72C 3F 43 53 50 >                db      "?CSP"
 715+ E730             >len_NFA         defl    $ - temp_NFA
 715+ E730             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ E72C             >
 715+ E72C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ E72D 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 715+ E731             >                org     $-1                 // alter last byte of Name just above to set
 715+ E730 D0          >                db      {b $} | END_BIT     // msb as name end
 715+ E731             >
 715+ E731 21 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 715+ E733             >Prev_Ptr        defl    Heap_Ptr
 715+ E733             >
 715+ E733             >mirror_Ptr      defl    $
 715+ E733             >
 715+ E733 9B 2A       >                dw      Dict_Ptr + 2        // xt
 715+ E735             >Heap_Ptr        defl    $ - $E000           // save current HP
 715+ E735             >
 715+ E735             >Current_HP      defl  $ - $E000             // used to set HP once!
 715+ E735             >
 715+ E735             >//              ______________________________________________________________________
 715+ E735             >//              Dictionary part
 715+ E735             >
 715+ E735             >                org     Dict_Ptr
 715+ 2A99             >
 715+ 2A99 33 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 715+ 2A9B             >
 715+ 2A9B             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 2A9B CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 715+ 2A9E             >
 715+ 2A9E             >
 715+ 2A9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 2A9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 2A9E             >
 715+ 2A9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 2A9E A4 24                        dw      SPFETCH                 // sp@
 717+ 2AA0 C7 27 F2 25                  dw      CSP, FETCH              // csp @
 718+ 2AA4 48 28                        dw      SUBTRACT                // -
 719+ 2AA6 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 720+ 2AAA 53 2A                        dw      QERROR                  // ?error
 721+ 2AAC BD 24                        dw      EXIT                    // ;
 722+ 2AAE
 723+ 2AAE              //  ______________________________________________________________________
 724+ 2AAE              //
 725+ 2AAE              // ?loading      --
 726+ 2AAE              // raise msg #22 if not loading
 727+ 2AAE                              Colon_Def QLOADING, "?LOADING", is_normal
 727+ 2AAE             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 727+ 2AAE             >
 727+ 2AAE             >Dict_Ptr        defl    $
 727+ 2AAE             >
 727+ 2AAE             >//              ______________________________________________________________________
 727+ 2AAE             >//              Heap part
 727+ 2AAE             >
 727+ 2AAE             >
 727+ 2AAE             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ E735             >
 727+ E735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ E735             >Latest_Definition defl  Heap_Ptr
 727+ E735             >
 727+ E735             >                // dummy db directives used to calculate length of namec
 727+ E735 3F 4C 4F 41 >                db      "?LOADING"
 727+ E739 44 49 4E 47 >
 727+ E73D             >len_NFA         defl    $ - temp_NFA
 727+ E73D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ E735             >
 727+ E735 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ E736 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 727+ E73A 44 49 4E 47 >
 727+ E73E             >                org     $-1                 // alter last byte of Name just above to set
 727+ E73D C7          >                db      {b $} | END_BIT     // msb as name end
 727+ E73E             >
 727+ E73E 2C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ E740             >Prev_Ptr        defl    Heap_Ptr
 727+ E740             >
 727+ E740             >mirror_Ptr      defl    $
 727+ E740             >
 727+ E740 B0 2A       >                dw      Dict_Ptr + 2        // xt
 727+ E742             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ E742             >
 727+ E742             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ E742             >
 727+ E742             >//              ______________________________________________________________________
 727+ E742             >//              Dictionary part
 727+ E742             >
 727+ E742             >                org     Dict_Ptr
 727+ 2AAE             >
 727+ 2AAE 40 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 2AB0             >
 727+ 2AB0             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 2AB0 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 2AB3             >
 727+ 2AB3             >
 727+ 2AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 2AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 2AB3             >
 727+ 2AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 2AB3 85 27 F2 25                  dw      BLK, FETCH              // blk @
 729+ 2AB7 E2 24                        dw      ZEQUAL                  // 0=
 730+ 2AB9 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 731+ 2ABD 53 2A                        dw      QERROR                  // ?error
 732+ 2ABF BD 24                        dw      EXIT                    // ;
 733+ 2AC1
 734+ 2AC1              //  ______________________________________________________________________
 735+ 2AC1              //
 736+ 2AC1              // compile      --
 737+ 2AC1              // compiles the following word
 738+ 2AC1                              Colon_Def COMPILE, "COMPILE", is_normal
 738+ 2AC1             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 738+ 2AC1             >
 738+ 2AC1             >Dict_Ptr        defl    $
 738+ 2AC1             >
 738+ 2AC1             >//              ______________________________________________________________________
 738+ 2AC1             >//              Heap part
 738+ 2AC1             >
 738+ 2AC1             >
 738+ 2AC1             >                org     (Heap_Ptr & $1FFF) + $E000
 738+ E742             >
 738+ E742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ E742             >Latest_Definition defl  Heap_Ptr
 738+ E742             >
 738+ E742             >                // dummy db directives used to calculate length of namec
 738+ E742 43 4F 4D 50 >                db      "COMPILE"
 738+ E746 49 4C 45    >
 738+ E749             >len_NFA         defl    $ - temp_NFA
 738+ E749             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ E742             >
 738+ E742 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ E743 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 738+ E747 49 4C 45    >
 738+ E74A             >                org     $-1                 // alter last byte of Name just above to set
 738+ E749 C5          >                db      {b $} | END_BIT     // msb as name end
 738+ E74A             >
 738+ E74A 35 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 738+ E74C             >Prev_Ptr        defl    Heap_Ptr
 738+ E74C             >
 738+ E74C             >mirror_Ptr      defl    $
 738+ E74C             >
 738+ E74C C3 2A       >                dw      Dict_Ptr + 2        // xt
 738+ E74E             >Heap_Ptr        defl    $ - $E000           // save current HP
 738+ E74E             >
 738+ E74E             >Current_HP      defl  $ - $E000             // used to set HP once!
 738+ E74E             >
 738+ E74E             >//              ______________________________________________________________________
 738+ E74E             >//              Dictionary part
 738+ E74E             >
 738+ E74E             >                org     Dict_Ptr
 738+ 2AC1             >
 738+ 2AC1 4C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 738+ 2AC3             >
 738+ 2AC3             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 2AC3 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 738+ 2AC6             >
 738+ 2AC6             >
 738+ 2AC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 2AC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 2AC6             >
 738+ 2AC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 2AC6 68 2A                        dw      QCOMP                   // ?comp
 740+ 2AC8 D2 24                        dw      R_TO                    // r>
 741+ 2ACA 88 25 39 25                  dw      DUP, CELL_PLUS          // dup, cell+
 742+ 2ACE C7 24                        dw      TO_R                    // >r
 743+ 2AD0 F2 25 1F 28                  dw      FETCH, COMMA            // @ ,
 744+ 2AD4 BD 24                        dw      EXIT                    // ;
 745+ 2AD6
 746+ 2AD6              //  ______________________________________________________________________
 747+ 2AD6              //
 748+ 2AD6              // compile,     --
 749+ 2AD6              // compiles the following word
 750+ 2AD6                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 750+ 2AD6             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 750+ 2AD6             >
 750+ 2AD6             >Dict_Ptr        defl    $
 750+ 2AD6             >
 750+ 2AD6             >//              ______________________________________________________________________
 750+ 2AD6             >//              Heap part
 750+ 2AD6             >
 750+ 2AD6             >
 750+ 2AD6             >                org     (Heap_Ptr & $1FFF) + $E000
 750+ E74E             >
 750+ E74E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 750+ E74E             >Latest_Definition defl  Heap_Ptr
 750+ E74E             >
 750+ E74E             >                // dummy db directives used to calculate length of namec
 750+ E74E 43 4F 4D 50 >                db      "COMPILE,"
 750+ E752 49 4C 45 2C >
 750+ E756             >len_NFA         defl    $ - temp_NFA
 750+ E756             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 750+ E74E             >
 750+ E74E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 750+ E74F 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 750+ E753 49 4C 45 2C >
 750+ E757             >                org     $-1                 // alter last byte of Name just above to set
 750+ E756 AC          >                db      {b $} | END_BIT     // msb as name end
 750+ E757             >
 750+ E757 42 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 750+ E759             >Prev_Ptr        defl    Heap_Ptr
 750+ E759             >
 750+ E759             >mirror_Ptr      defl    $
 750+ E759             >
 750+ E759 D8 2A       >                dw      Dict_Ptr + 2        // xt
 750+ E75B             >Heap_Ptr        defl    $ - $E000           // save current HP
 750+ E75B             >
 750+ E75B             >Current_HP      defl  $ - $E000             // used to set HP once!
 750+ E75B             >
 750+ E75B             >//              ______________________________________________________________________
 750+ E75B             >//              Dictionary part
 750+ E75B             >
 750+ E75B             >                org     Dict_Ptr
 750+ 2AD6             >
 750+ 2AD6 59 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 750+ 2AD8             >
 750+ 2AD8             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 750+ 2AD8 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 750+ 2ADB             >
 750+ 2ADB             >
 750+ 2ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
 750+ 2ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
 750+ 2ADB             >
 750+ 2ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 751+ 2ADB              //              dw      QCOMP                   // ?comp
 752+ 2ADB 1F 28                        dw      COMMA                   // ,
 753+ 2ADD BD 24                        dw      EXIT                    // ;
 754+ 2ADF
 755+ 2ADF              //  ______________________________________________________________________
 756+ 2ADF              //
 757+ 2ADF              // [            --
 758+ 2ADF              // stop compilation
 759+ 2ADF                              Colon_Def SQUARED_OPEN, "[", is_immediate
 759+ 2ADF             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 759+ 2ADF             >
 759+ 2ADF             >Dict_Ptr        defl    $
 759+ 2ADF             >
 759+ 2ADF             >//              ______________________________________________________________________
 759+ 2ADF             >//              Heap part
 759+ 2ADF             >
 759+ 2ADF             >
 759+ 2ADF             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ E75B             >
 759+ E75B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ E75B             >Latest_Definition defl  Heap_Ptr
 759+ E75B             >
 759+ E75B             >                // dummy db directives used to calculate length of namec
 759+ E75B 5B          >                db      "["
 759+ E75C             >len_NFA         defl    $ - temp_NFA
 759+ E75C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ E75B             >
 759+ E75B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ E75C 5B          >                db      "["               // name string in 7-bit ascii, but
 759+ E75D             >                org     $-1                 // alter last byte of Name just above to set
 759+ E75C DB          >                db      {b $} | END_BIT     // msb as name end
 759+ E75D             >
 759+ E75D 4E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ E75F             >Prev_Ptr        defl    Heap_Ptr
 759+ E75F             >
 759+ E75F             >mirror_Ptr      defl    $
 759+ E75F             >
 759+ E75F E1 2A       >                dw      Dict_Ptr + 2        // xt
 759+ E761             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ E761             >
 759+ E761             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ E761             >
 759+ E761             >//              ______________________________________________________________________
 759+ E761             >//              Dictionary part
 759+ E761             >
 759+ E761             >                org     Dict_Ptr
 759+ 2ADF             >
 759+ 2ADF 5F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 2AE1             >
 759+ 2AE1             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 2AE1 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 2AE4             >
 759+ 2AE4             >
 759+ 2AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 2AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 2AE4             >
 759+ 2AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 2AE4 E4 26                        dw      ZERO                    // 0
 761+ 2AE6 AF 27 FC 25                  dw      STATE, STORE            // state !
 762+ 2AEA BD 24                        dw      EXIT                    // ; immediate
 763+ 2AEC
 764+ 2AEC              //  ______________________________________________________________________
 765+ 2AEC              //
 766+ 2AEC              // ]            --
 767+ 2AEC              // start compilation
 768+ 2AEC                              Colon_Def SQUARED_CLOSE, "]", is_normal
 768+ 2AEC             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 768+ 2AEC             >
 768+ 2AEC             >Dict_Ptr        defl    $
 768+ 2AEC             >
 768+ 2AEC             >//              ______________________________________________________________________
 768+ 2AEC             >//              Heap part
 768+ 2AEC             >
 768+ 2AEC             >
 768+ 2AEC             >                org     (Heap_Ptr & $1FFF) + $E000
 768+ E761             >
 768+ E761             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ E761             >Latest_Definition defl  Heap_Ptr
 768+ E761             >
 768+ E761             >                // dummy db directives used to calculate length of namec
 768+ E761 5D          >                db      "]"
 768+ E762             >len_NFA         defl    $ - temp_NFA
 768+ E762             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ E761             >
 768+ E761 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ E762 5D          >                db      "]"               // name string in 7-bit ascii, but
 768+ E763             >                org     $-1                 // alter last byte of Name just above to set
 768+ E762 DD          >                db      {b $} | END_BIT     // msb as name end
 768+ E763             >
 768+ E763 5B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 768+ E765             >Prev_Ptr        defl    Heap_Ptr
 768+ E765             >
 768+ E765             >mirror_Ptr      defl    $
 768+ E765             >
 768+ E765 EE 2A       >                dw      Dict_Ptr + 2        // xt
 768+ E767             >Heap_Ptr        defl    $ - $E000           // save current HP
 768+ E767             >
 768+ E767             >Current_HP      defl  $ - $E000             // used to set HP once!
 768+ E767             >
 768+ E767             >//              ______________________________________________________________________
 768+ E767             >//              Dictionary part
 768+ E767             >
 768+ E767             >                org     Dict_Ptr
 768+ 2AEC             >
 768+ 2AEC 65 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 768+ 2AEE             >
 768+ 2AEE             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 2AEE CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 2AF1             >
 768+ 2AF1             >
 768+ 2AF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 2AF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 2AF1             >
 768+ 2AF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 2AF1 3D 20 C0 00                  dw      LIT, $C0                // 192
 770+ 2AF5 AF 27 FC 25                  dw      STATE, STORE            // state !
 771+ 2AF9 BD 24                        dw      EXIT                    // ;
 772+ 2AFB
 773+ 2AFB              //  ______________________________________________________________________
 774+ 2AFB              //
 775+ 2AFB              // smudge       --
 776+ 2AFB              // toggle smudge bit of latest definition
 777+ 2AFB                              Colon_Def SMUDGE, "SMUDGE", is_normal
 777+ 2AFB             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 777+ 2AFB             >
 777+ 2AFB             >Dict_Ptr        defl    $
 777+ 2AFB             >
 777+ 2AFB             >//              ______________________________________________________________________
 777+ 2AFB             >//              Heap part
 777+ 2AFB             >
 777+ 2AFB             >
 777+ 2AFB             >                org     (Heap_Ptr & $1FFF) + $E000
 777+ E767             >
 777+ E767             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ E767             >Latest_Definition defl  Heap_Ptr
 777+ E767             >
 777+ E767             >                // dummy db directives used to calculate length of namec
 777+ E767 53 4D 55 44 >                db      "SMUDGE"
 777+ E76B 47 45       >
 777+ E76D             >len_NFA         defl    $ - temp_NFA
 777+ E76D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ E767             >
 777+ E767 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ E768 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 777+ E76C 47 45       >
 777+ E76E             >                org     $-1                 // alter last byte of Name just above to set
 777+ E76D C5          >                db      {b $} | END_BIT     // msb as name end
 777+ E76E             >
 777+ E76E 61 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 777+ E770             >Prev_Ptr        defl    Heap_Ptr
 777+ E770             >
 777+ E770             >mirror_Ptr      defl    $
 777+ E770             >
 777+ E770 FD 2A       >                dw      Dict_Ptr + 2        // xt
 777+ E772             >Heap_Ptr        defl    $ - $E000           // save current HP
 777+ E772             >
 777+ E772             >Current_HP      defl  $ - $E000             // used to set HP once!
 777+ E772             >
 777+ E772             >//              ______________________________________________________________________
 777+ E772             >//              Dictionary part
 777+ E772             >
 777+ E772             >                org     Dict_Ptr
 777+ 2AFB             >
 777+ 2AFB 70 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 777+ 2AFD             >
 777+ 2AFD             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 2AFD CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 777+ 2B00             >
 777+ 2B00             >
 777+ 2B00             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 2B00             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 2B00             >
 777+ 2B00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 2B00 C3 29                        dw      LATEST                  // latest
 779+ 2B02 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 780+ 2B06 E9 25                        dw      TOGGLE                  // toggle
 781+ 2B08 BD 24                        dw      EXIT                    // ;
 782+ 2B0A
 783+ 2B0A              //  ______________________________________________________________________
 784+ 2B0A              //
 785+ 2B0A              // immediate    --
 786+ 2B0A              // make immediate the latest definition
 787+ 2B0A                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 787+ 2B0A             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 787+ 2B0A             >
 787+ 2B0A             >Dict_Ptr        defl    $
 787+ 2B0A             >
 787+ 2B0A             >//              ______________________________________________________________________
 787+ 2B0A             >//              Heap part
 787+ 2B0A             >
 787+ 2B0A             >
 787+ 2B0A             >                org     (Heap_Ptr & $1FFF) + $E000
 787+ E772             >
 787+ E772             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ E772             >Latest_Definition defl  Heap_Ptr
 787+ E772             >
 787+ E772             >                // dummy db directives used to calculate length of namec
 787+ E772 49 4D 4D 45 >                db      "IMMEDIATE"
 787+ E776 44 49 41 54 >
 787+ E77A 45          >
 787+ E77B             >len_NFA         defl    $ - temp_NFA
 787+ E77B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ E772             >
 787+ E772 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ E773 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 787+ E777 44 49 41 54 >
 787+ E77B 45          >
 787+ E77C             >                org     $-1                 // alter last byte of Name just above to set
 787+ E77B C5          >                db      {b $} | END_BIT     // msb as name end
 787+ E77C             >
 787+ E77C 67 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 787+ E77E             >Prev_Ptr        defl    Heap_Ptr
 787+ E77E             >
 787+ E77E             >mirror_Ptr      defl    $
 787+ E77E             >
 787+ E77E 0C 2B       >                dw      Dict_Ptr + 2        // xt
 787+ E780             >Heap_Ptr        defl    $ - $E000           // save current HP
 787+ E780             >
 787+ E780             >Current_HP      defl  $ - $E000             // used to set HP once!
 787+ E780             >
 787+ E780             >//              ______________________________________________________________________
 787+ E780             >//              Dictionary part
 787+ E780             >
 787+ E780             >                org     Dict_Ptr
 787+ 2B0A             >
 787+ 2B0A 7E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 787+ 2B0C             >
 787+ 2B0C             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 2B0C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 2B0F             >
 787+ 2B0F             >
 787+ 2B0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 2B0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 2B0F             >
 787+ 2B0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 2B0F C3 29                        dw      LATEST                  // latest
 789+ 2B11 3D 20 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 790+ 2B15 E9 25                        dw      TOGGLE                  // toggle
 791+ 2B17 BD 24                        dw      EXIT                    // ;
 792+ 2B19
 793+ 2B19              //  ______________________________________________________________________
 794+ 2B19              //
 795+ 2B19              // hex          --
 796+ 2B19              // change numeration base
 797+ 2B19                              Colon_Def HEX, "HEX", is_normal
 797+ 2B19             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 797+ 2B19             >
 797+ 2B19             >Dict_Ptr        defl    $
 797+ 2B19             >
 797+ 2B19             >//              ______________________________________________________________________
 797+ 2B19             >//              Heap part
 797+ 2B19             >
 797+ 2B19             >
 797+ 2B19             >                org     (Heap_Ptr & $1FFF) + $E000
 797+ E780             >
 797+ E780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 797+ E780             >Latest_Definition defl  Heap_Ptr
 797+ E780             >
 797+ E780             >                // dummy db directives used to calculate length of namec
 797+ E780 48 45 58    >                db      "HEX"
 797+ E783             >len_NFA         defl    $ - temp_NFA
 797+ E783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 797+ E780             >
 797+ E780 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 797+ E781 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 797+ E784             >                org     $-1                 // alter last byte of Name just above to set
 797+ E783 D8          >                db      {b $} | END_BIT     // msb as name end
 797+ E784             >
 797+ E784 72 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 797+ E786             >Prev_Ptr        defl    Heap_Ptr
 797+ E786             >
 797+ E786             >mirror_Ptr      defl    $
 797+ E786             >
 797+ E786 1B 2B       >                dw      Dict_Ptr + 2        // xt
 797+ E788             >Heap_Ptr        defl    $ - $E000           // save current HP
 797+ E788             >
 797+ E788             >Current_HP      defl  $ - $E000             // used to set HP once!
 797+ E788             >
 797+ E788             >//              ______________________________________________________________________
 797+ E788             >//              Dictionary part
 797+ E788             >
 797+ E788             >                org     Dict_Ptr
 797+ 2B19             >
 797+ 2B19 86 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 797+ 2B1B             >
 797+ 2B1B             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 797+ 2B1B CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 797+ 2B1E             >
 797+ 2B1E             >
 797+ 2B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 797+ 2B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 797+ 2B1E             >
 797+ 2B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 798+ 2B1E 3D 20 10 00                  dw      LIT, 16                 // 16
 799+ 2B22 B5 27 FC 25                  dw      BASE, STORE             // base !
 800+ 2B26 BD 24                        dw      EXIT                    // ;
 801+ 2B28
 802+ 2B28              //  ______________________________________________________________________
 803+ 2B28              //
 804+ 2B28              // decimal      --
 805+ 2B28              // change numeration base
 806+ 2B28                              Colon_Def DECIMAL, "DECIMAL", is_normal
 806+ 2B28             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 806+ 2B28             >
 806+ 2B28             >Dict_Ptr        defl    $
 806+ 2B28             >
 806+ 2B28             >//              ______________________________________________________________________
 806+ 2B28             >//              Heap part
 806+ 2B28             >
 806+ 2B28             >
 806+ 2B28             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ E788             >
 806+ E788             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ E788             >Latest_Definition defl  Heap_Ptr
 806+ E788             >
 806+ E788             >                // dummy db directives used to calculate length of namec
 806+ E788 44 45 43 49 >                db      "DECIMAL"
 806+ E78C 4D 41 4C    >
 806+ E78F             >len_NFA         defl    $ - temp_NFA
 806+ E78F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ E788             >
 806+ E788 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ E789 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 806+ E78D 4D 41 4C    >
 806+ E790             >                org     $-1                 // alter last byte of Name just above to set
 806+ E78F CC          >                db      {b $} | END_BIT     // msb as name end
 806+ E790             >
 806+ E790 80 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ E792             >Prev_Ptr        defl    Heap_Ptr
 806+ E792             >
 806+ E792             >mirror_Ptr      defl    $
 806+ E792             >
 806+ E792 2A 2B       >                dw      Dict_Ptr + 2        // xt
 806+ E794             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ E794             >
 806+ E794             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ E794             >
 806+ E794             >//              ______________________________________________________________________
 806+ E794             >//              Dictionary part
 806+ E794             >
 806+ E794             >                org     Dict_Ptr
 806+ 2B28             >
 806+ 2B28 92 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 2B2A             >
 806+ 2B2A             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 2B2A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 806+ 2B2D             >
 806+ 2B2D             >
 806+ 2B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 2B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 2B2D             >
 806+ 2B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 2B2D 3D 20 0A 00                  dw      LIT, 10                 // 10
 808+ 2B31 B5 27 FC 25                  dw      BASE, STORE             // base !
 809+ 2B35 BD 24                        dw      EXIT                    // ;
 810+ 2B37
 811+ 2B37              //  ______________________________________________________________________
 812+ 2B37              //
 813+ 2B37              // (;code)       --
 814+ 2B37              // patch to CFA to call/jump to the "following code"
 815+ 2B37                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 815+ 2B37             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 815+ 2B37             >
 815+ 2B37             >Dict_Ptr        defl    $
 815+ 2B37             >
 815+ 2B37             >//              ______________________________________________________________________
 815+ 2B37             >//              Heap part
 815+ 2B37             >
 815+ 2B37             >
 815+ 2B37             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E794             >
 815+ E794             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E794             >Latest_Definition defl  Heap_Ptr
 815+ E794             >
 815+ E794             >                // dummy db directives used to calculate length of namec
 815+ E794 28 3B 43 4F >                db      "(;CODE)"
 815+ E798 44 45 29    >
 815+ E79B             >len_NFA         defl    $ - temp_NFA
 815+ E79B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E794             >
 815+ E794 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E795 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 815+ E799 44 45 29    >
 815+ E79C             >                org     $-1                 // alter last byte of Name just above to set
 815+ E79B A9          >                db      {b $} | END_BIT     // msb as name end
 815+ E79C             >
 815+ E79C 88 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E79E             >Prev_Ptr        defl    Heap_Ptr
 815+ E79E             >
 815+ E79E             >mirror_Ptr      defl    $
 815+ E79E             >
 815+ E79E 39 2B       >                dw      Dict_Ptr + 2        // xt
 815+ E7A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E7A0             >
 815+ E7A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E7A0             >
 815+ E7A0             >//              ______________________________________________________________________
 815+ E7A0             >//              Dictionary part
 815+ E7A0             >
 815+ E7A0             >                org     Dict_Ptr
 815+ 2B37             >
 815+ 2B37 9E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 2B39             >
 815+ 2B39             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 2B39 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 2B3C             >
 815+ 2B3C             >
 815+ 2B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 2B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 2B3C             >
 815+ 2B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 2B3C D2 24                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 817+ 2B3E C3 29                        dw      LATEST                  // latest   ( Word being defined in this moment )
 818+ 2B40 21 2A FC 29                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 819+ 2B44
 820+ 2B44 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 821+ 2B48 64 25 10 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 822+ 2B4C 23 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 823+ 2B4E
 824+ 2B4E FC 25                        dw      STORE                   // !
 825+ 2B50 BD 24                        dw      EXIT                    // ;
 826+ 2B52
 827+ 2B52              //  ______________________________________________________________________
 828+ 2B52              //
 829+ 2B52              // ;code        --
 830+ 2B52                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 830+ 2B52             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 830+ 2B52             >
 830+ 2B52             >Dict_Ptr        defl    $
 830+ 2B52             >
 830+ 2B52             >//              ______________________________________________________________________
 830+ 2B52             >//              Heap part
 830+ 2B52             >
 830+ 2B52             >
 830+ 2B52             >                org     (Heap_Ptr & $1FFF) + $E000
 830+ E7A0             >
 830+ E7A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ E7A0             >Latest_Definition defl  Heap_Ptr
 830+ E7A0             >
 830+ E7A0             >                // dummy db directives used to calculate length of namec
 830+ E7A0 3B 43 4F 44 >                db      ";CODE"
 830+ E7A4 45          >
 830+ E7A5             >len_NFA         defl    $ - temp_NFA
 830+ E7A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ E7A0             >
 830+ E7A0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ E7A1 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 830+ E7A5 45          >
 830+ E7A6             >                org     $-1                 // alter last byte of Name just above to set
 830+ E7A5 C5          >                db      {b $} | END_BIT     // msb as name end
 830+ E7A6             >
 830+ E7A6 94 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 830+ E7A8             >Prev_Ptr        defl    Heap_Ptr
 830+ E7A8             >
 830+ E7A8             >mirror_Ptr      defl    $
 830+ E7A8             >
 830+ E7A8 54 2B       >                dw      Dict_Ptr + 2        // xt
 830+ E7AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 830+ E7AA             >
 830+ E7AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 830+ E7AA             >
 830+ E7AA             >//              ______________________________________________________________________
 830+ E7AA             >//              Dictionary part
 830+ E7AA             >
 830+ E7AA             >                org     Dict_Ptr
 830+ 2B52             >
 830+ 2B52 A8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 830+ 2B54             >
 830+ 2B54             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 2B54 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 830+ 2B57             >
 830+ 2B57             >
 830+ 2B57             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 2B57             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 2B57             >
 830+ 2B57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 2B57 9B 2A                        dw      QCSP                    // ?csp
 832+ 2B59 C3 2A                        dw      COMPILE                 // compile
 833+ 2B5B 39 2B                        dw      C_SEMICOLON_CODE        // (;code)
 834+ 2B5D E1 2A                        dw      SQUARED_OPEN            // [
 835+ 2B5F AB 26                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 836+ 2B61 BD 24                        dw      EXIT                    // ; immediate
 837+ 2B63
 838+ 2B63              //  ______________________________________________________________________
 839+ 2B63              //
 840+ 2B63              // recurse      --
 841+ 2B63              //              Colon_Def RECURSE, "RECURSE", is_immediate
 842+ 2B63              //              dw      QCOMP                   // ?comp
 843+ 2B63              //              dw      LATEST                  // latest
 844+ 2B63              //              dw      PFA, CFA                // pfa cfa
 845+ 2B63              //              dw      COMMA                   // ,
 846+ 2B63              //              dw      EXIT                    // ; immediate
 847+ 2B63
 848+ 2B63              //  ______________________________________________________________________
 849+ 2B63              //
 850+ 2B63              // <builds      --
 851+ 2B63                              Colon_Def CBUILDS, "<BUILDS", is_normal
 851+ 2B63             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 851+ 2B63             >
 851+ 2B63             >Dict_Ptr        defl    $
 851+ 2B63             >
 851+ 2B63             >//              ______________________________________________________________________
 851+ 2B63             >//              Heap part
 851+ 2B63             >
 851+ 2B63             >
 851+ 2B63             >                org     (Heap_Ptr & $1FFF) + $E000
 851+ E7AA             >
 851+ E7AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ E7AA             >Latest_Definition defl  Heap_Ptr
 851+ E7AA             >
 851+ E7AA             >                // dummy db directives used to calculate length of namec
 851+ E7AA 3C 42 55 49 >                db      "<BUILDS"
 851+ E7AE 4C 44 53    >
 851+ E7B1             >len_NFA         defl    $ - temp_NFA
 851+ E7B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ E7AA             >
 851+ E7AA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ E7AB 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 851+ E7AF 4C 44 53    >
 851+ E7B2             >                org     $-1                 // alter last byte of Name just above to set
 851+ E7B1 D3          >                db      {b $} | END_BIT     // msb as name end
 851+ E7B2             >
 851+ E7B2 A0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 851+ E7B4             >Prev_Ptr        defl    Heap_Ptr
 851+ E7B4             >
 851+ E7B4             >mirror_Ptr      defl    $
 851+ E7B4             >
 851+ E7B4 65 2B       >                dw      Dict_Ptr + 2        // xt
 851+ E7B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 851+ E7B6             >
 851+ E7B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 851+ E7B6             >
 851+ E7B6             >//              ______________________________________________________________________
 851+ E7B6             >//              Dictionary part
 851+ E7B6             >
 851+ E7B6             >                org     Dict_Ptr
 851+ 2B63             >
 851+ 2B63 B4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 851+ 2B65             >
 851+ 2B65             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 2B65 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ 2B68             >
 851+ 2B68             >
 851+ 2B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 2B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 2B68             >
 851+ 2B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 2B68 DF 30                        dw      CREATE                  // CREATE
 853+ 2B6A BD 24                        dw      EXIT                    // ;
 854+ 2B6C
 855+ 2B6C              //  ______________________________________________________________________
 856+ 2B6C              //
 857+ 2B6C              // _does>_     --
 858+ 2B6C                              Colon_Def C_DOES, "_DOES>_", is_normal
 858+ 2B6C             >                New_Def  C_DOES, "_DOES>_", Enter_Ptr, is_normal ; ok
 858+ 2B6C             >
 858+ 2B6C             >Dict_Ptr        defl    $
 858+ 2B6C             >
 858+ 2B6C             >//              ______________________________________________________________________
 858+ 2B6C             >//              Heap part
 858+ 2B6C             >
 858+ 2B6C             >
 858+ 2B6C             >                org     (Heap_Ptr & $1FFF) + $E000
 858+ E7B6             >
 858+ E7B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ E7B6             >Latest_Definition defl  Heap_Ptr
 858+ E7B6             >
 858+ E7B6             >                // dummy db directives used to calculate length of namec
 858+ E7B6 5F 44 4F 45 >                db      "_DOES>_"
 858+ E7BA 53 3E 5F    >
 858+ E7BD             >len_NFA         defl    $ - temp_NFA
 858+ E7BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ E7B6             >
 858+ E7B6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ E7B7 5F 44 4F 45 >                db      "_DOES>_"               // name string in 7-bit ascii, but
 858+ E7BB 53 3E 5F    >
 858+ E7BE             >                org     $-1                 // alter last byte of Name just above to set
 858+ E7BD DF          >                db      {b $} | END_BIT     // msb as name end
 858+ E7BE             >
 858+ E7BE AA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 858+ E7C0             >Prev_Ptr        defl    Heap_Ptr
 858+ E7C0             >
 858+ E7C0             >mirror_Ptr      defl    $
 858+ E7C0             >
 858+ E7C0 6E 2B       >                dw      Dict_Ptr + 2        // xt
 858+ E7C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 858+ E7C2             >
 858+ E7C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 858+ E7C2             >
 858+ E7C2             >//              ______________________________________________________________________
 858+ E7C2             >//              Dictionary part
 858+ E7C2             >
 858+ E7C2             >                org     Dict_Ptr
 858+ 2B6C             >
 858+ 2B6C C0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 858+ 2B6E             >
 858+ 2B6E             >C_DOES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 2B6E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 858+ 2B71             >
 858+ 2B71             >
 858+ 2B71             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 2B71             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 2B71             >
 858+ 2B71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 2B71 D2 24                        dw      R_TO                    // r>
 860+ 2B73 C3 29                        dw      LATEST                  // latest
 861+ 2B75 21 2A                        dw      PFA                     // pfa
 862+ 2B77 FC 29 23 25                  dw      CFA, ONE_PLUS           // cfa 1+
 863+ 2B7B FC 25                        dw      STORE                   // !
 864+ 2B7D BD 24                        dw      EXIT                    // ;
 865+ 2B7F
 866+ 2B7F              //  ______________________________________________________________________
 867+ 2B7F              //
 868+ 2B7F              // does>     --
 869+ 2B7F                              Colon_Def DOES_TO, "DOES>", is_immediate
 869+ 2B7F             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_immediate ; ok
 869+ 2B7F             >
 869+ 2B7F             >Dict_Ptr        defl    $
 869+ 2B7F             >
 869+ 2B7F             >//              ______________________________________________________________________
 869+ 2B7F             >//              Heap part
 869+ 2B7F             >
 869+ 2B7F             >
 869+ 2B7F             >                org     (Heap_Ptr & $1FFF) + $E000
 869+ E7C2             >
 869+ E7C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ E7C2             >Latest_Definition defl  Heap_Ptr
 869+ E7C2             >
 869+ E7C2             >                // dummy db directives used to calculate length of namec
 869+ E7C2 44 4F 45 53 >                db      "DOES>"
 869+ E7C6 3E          >
 869+ E7C7             >len_NFA         defl    $ - temp_NFA
 869+ E7C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ E7C2             >
 869+ E7C2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ E7C3 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 869+ E7C7 3E          >
 869+ E7C8             >                org     $-1                 // alter last byte of Name just above to set
 869+ E7C7 BE          >                db      {b $} | END_BIT     // msb as name end
 869+ E7C8             >
 869+ E7C8 B6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 869+ E7CA             >Prev_Ptr        defl    Heap_Ptr
 869+ E7CA             >
 869+ E7CA             >mirror_Ptr      defl    $
 869+ E7CA             >
 869+ E7CA 81 2B       >                dw      Dict_Ptr + 2        // xt
 869+ E7CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 869+ E7CC             >
 869+ E7CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 869+ E7CC             >
 869+ E7CC             >//              ______________________________________________________________________
 869+ E7CC             >//              Dictionary part
 869+ E7CC             >
 869+ E7CC             >                org     Dict_Ptr
 869+ 2B7F             >
 869+ 2B7F CA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 869+ 2B81             >
 869+ 2B81             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 2B81 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 2B84             >
 869+ 2B84             >
 869+ 2B84             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 2B84             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 2B84             >
 869+ 2B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 2B84 C3 2A 6E 2B                  dw      COMPILE,  C_DOES
 871+ 2B88 3D 20 CD 00                  dw      LIT, $CD, CCOMMA
 871+ 2B8C 2E 28
 872+ 2B8E 3D 20 8F 26                  dw      LIT, Enter_Ptr, COMMA
 872+ 2B92 1F 28
 873+ 2B94 BD 24                        dw      EXIT
 874+ 2B96
 875+ 2B96              //  ______________________________________________________________________
 876+ 2B96              //
 877+ 2B96              // count        a -- a2 n
 878+ 2B96              // expects a counted string at address a, returns string address and counter
 879+ 2B96                              New_Def COUNT, "COUNT", is_code, is_normal
 879+ 2B96             >
 879+ 2B96             >Dict_Ptr        defl    $
 879+ 2B96             >
 879+ 2B96             >//              ______________________________________________________________________
 879+ 2B96             >//              Heap part
 879+ 2B96             >
 879+ 2B96             >
 879+ 2B96             >                org     (Heap_Ptr & $1FFF) + $E000
 879+ E7CC             >
 879+ E7CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ E7CC             >Latest_Definition defl  Heap_Ptr
 879+ E7CC             >
 879+ E7CC             >                // dummy db directives used to calculate length of namec
 879+ E7CC 43 4F 55 4E >                db      "COUNT"
 879+ E7D0 54          >
 879+ E7D1             >len_NFA         defl    $ - temp_NFA
 879+ E7D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ E7CC             >
 879+ E7CC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ E7CD 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 879+ E7D1 54          >
 879+ E7D2             >                org     $-1                 // alter last byte of Name just above to set
 879+ E7D1 D4          >                db      {b $} | END_BIT     // msb as name end
 879+ E7D2             >
 879+ E7D2 C2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 879+ E7D4             >Prev_Ptr        defl    Heap_Ptr
 879+ E7D4             >
 879+ E7D4             >mirror_Ptr      defl    $
 879+ E7D4             >
 879+ E7D4 98 2B       >                dw      Dict_Ptr + 2        // xt
 879+ E7D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 879+ E7D6             >
 879+ E7D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 879+ E7D6             >
 879+ E7D6             >//              ______________________________________________________________________
 879+ E7D6             >//              Dictionary part
 879+ E7D6             >
 879+ E7D6             >                org     Dict_Ptr
 879+ 2B96             >
 879+ 2B96 D4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 879+ 2B98             >
 879+ 2B98             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 2B98 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 879+ 2B98 ~           >
 879+ 2B98 ~           >
 879+ 2B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 2B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 2B98             >
 879+ 2B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 2B98 D9                           exx
 881+ 2B99 E1                           pop     hl
 882+ 2B9A 5E                           ld      e, (hl)
 883+ 2B9B 16 00                        ld      d, 0
 884+ 2B9D 23                           inc     hl
 885+ 2B9E              Count_Here:
 886+ 2B9E E5                           push    hl
 887+ 2B9F D5                           push    de
 888+ 2BA0 D9                           exx
 889+ 2BA1                              next
 889+ 2BA1 DD E9       >                jp      (ix)
 890+ 2BA3              //                pop     hl
 891+ 2BA3              //                ld      a, (hl)
 892+ 2BA3              //                inc     hl
 893+ 2BA3              //                push    hl
 894+ 2BA3              //                ld      h, 0
 895+ 2BA3              //                ld      l, a
 896+ 2BA3              //                push    hl
 897+ 2BA3              //                next
 898+ 2BA3
 899+ 2BA3              //  ______________________________________________________________________
 900+ 2BA3              //
 901+ 2BA3              // bounds       a n -- a+n n
 902+ 2BA3              // given an address and a length ( a n ) calculate the bound addresses
 903+ 2BA3              // suitable for DO-LOOP
 904+ 2BA3                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 904+ 2BA3             >
 904+ 2BA3             >Dict_Ptr        defl    $
 904+ 2BA3             >
 904+ 2BA3             >//              ______________________________________________________________________
 904+ 2BA3             >//              Heap part
 904+ 2BA3             >
 904+ 2BA3             >
 904+ 2BA3             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ E7D6             >
 904+ E7D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ E7D6             >Latest_Definition defl  Heap_Ptr
 904+ E7D6             >
 904+ E7D6             >                // dummy db directives used to calculate length of namec
 904+ E7D6 42 4F 55 4E >                db      "BOUNDS"
 904+ E7DA 44 53       >
 904+ E7DC             >len_NFA         defl    $ - temp_NFA
 904+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ E7D6             >
 904+ E7D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ E7D7 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 904+ E7DB 44 53       >
 904+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 904+ E7DC D3          >                db      {b $} | END_BIT     // msb as name end
 904+ E7DD             >
 904+ E7DD CC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 904+ E7DF             >
 904+ E7DF             >mirror_Ptr      defl    $
 904+ E7DF             >
 904+ E7DF A5 2B       >                dw      Dict_Ptr + 2        // xt
 904+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ E7E1             >
 904+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ E7E1             >
 904+ E7E1             >//              ______________________________________________________________________
 904+ E7E1             >//              Dictionary part
 904+ E7E1             >
 904+ E7E1             >                org     Dict_Ptr
 904+ 2BA3             >
 904+ 2BA3 DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 2BA5             >
 904+ 2BA5             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 2BA5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 904+ 2BA5 ~           >
 904+ 2BA5 ~           >
 904+ 2BA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 2BA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 2BA5             >
 904+ 2BA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 2BA5 D9                           exx
 906+ 2BA6 E1                           pop     hl
 907+ 2BA7 D1                           pop     de
 908+ 2BA8 19                           add     hl, de
 909+ 2BA9 18 F3                        jr      Count_Here
 910+ 2BAB                              // push    hl
 911+ 2BAB                              // push    de
 912+ 2BAB                              // exx
 913+ 2BAB                              // next
 914+ 2BAB
 915+ 2BAB              //  ______________________________________________________________________
 916+ 2BAB              //
 917+ 2BAB              // leave        --
 918+ 2BAB              // Compile (leave) to leave current LOOP and jump just after it
 919+ 2BAB                              Colon_Def LEAVE, "LEAVE", is_immediate
 919+ 2BAB             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 919+ 2BAB             >
 919+ 2BAB             >Dict_Ptr        defl    $
 919+ 2BAB             >
 919+ 2BAB             >//              ______________________________________________________________________
 919+ 2BAB             >//              Heap part
 919+ 2BAB             >
 919+ 2BAB             >
 919+ 2BAB             >                org     (Heap_Ptr & $1FFF) + $E000
 919+ E7E1             >
 919+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ E7E1             >Latest_Definition defl  Heap_Ptr
 919+ E7E1             >
 919+ E7E1             >                // dummy db directives used to calculate length of namec
 919+ E7E1 4C 45 41 56 >                db      "LEAVE"
 919+ E7E5 45          >
 919+ E7E6             >len_NFA         defl    $ - temp_NFA
 919+ E7E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ E7E1             >
 919+ E7E1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ E7E2 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 919+ E7E6 45          >
 919+ E7E7             >                org     $-1                 // alter last byte of Name just above to set
 919+ E7E6 C5          >                db      {b $} | END_BIT     // msb as name end
 919+ E7E7             >
 919+ E7E7 D6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 919+ E7E9             >Prev_Ptr        defl    Heap_Ptr
 919+ E7E9             >
 919+ E7E9             >mirror_Ptr      defl    $
 919+ E7E9             >
 919+ E7E9 AD 2B       >                dw      Dict_Ptr + 2        // xt
 919+ E7EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 919+ E7EB             >
 919+ E7EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 919+ E7EB             >
 919+ E7EB             >//              ______________________________________________________________________
 919+ E7EB             >//              Dictionary part
 919+ E7EB             >
 919+ E7EB             >                org     Dict_Ptr
 919+ 2BAB             >
 919+ 2BAB E9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 919+ 2BAD             >
 919+ 2BAD             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 2BAD CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 2BB0             >
 919+ 2BB0             >
 919+ 2BB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 2BB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 2BB0             >
 919+ 2BB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 2BB0 C3 2A 96 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 921+ 2BB4 09 28 C7 24                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 921+ 2BB8 E4 26 1F 28
 922+ 2BBC E4 26 E4 26                  dw      ZERO, ZERO
 923+ 2BC0 A4 24 88 25                  dw      SPFETCH, DUP
 924+ 2BC4 39 25 39 25                  dw      CELL_PLUS, CELL_PLUS
 925+ 2BC8 78 25                        dw      TUCK
 926+ 2BCA C7 27 F2 25                  dw      CSP, FETCH
 927+ 2BCE 81 25 48 28                  dw      SWAP, SUBTRACT
 928+ 2BD2 02 24                        dw      CMOVE
 929+ 2BD4 C7 27 F2 25                  dw      CSP, FETCH, CELL_MINUS
 929+ 2BD8 3D 25
 930+ 2BDA D2 24 64 25                  dw      R_TO, OVER, STORE
 930+ 2BDE FC 25
 931+ 2BE0 3D 25 E4 26                  dw      CELL_MINUS, ZERO
 932+ 2BE4 81 25 FC 25                  dw      SWAP, STORE
 933+ 2BE8 BD 24                        dw      EXIT                    // ;
 934+ 2BEA
 935+ 2BEA              //  ______________________________________________________________________
 936+ 2BEA              //
 937+ 2BEA              // curs         a n --
 938+ 2BEA              // Sends to current output channel n characters starting at address a.
 939+ 2BEA                              Colon_Def CURS, "CURS", is_normal
 939+ 2BEA             >                New_Def  CURS, "CURS", Enter_Ptr, is_normal ; ok
 939+ 2BEA             >
 939+ 2BEA             >Dict_Ptr        defl    $
 939+ 2BEA             >
 939+ 2BEA             >//              ______________________________________________________________________
 939+ 2BEA             >//              Heap part
 939+ 2BEA             >
 939+ 2BEA             >
 939+ 2BEA             >                org     (Heap_Ptr & $1FFF) + $E000
 939+ E7EB             >
 939+ E7EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ E7EB             >Latest_Definition defl  Heap_Ptr
 939+ E7EB             >
 939+ E7EB             >                // dummy db directives used to calculate length of namec
 939+ E7EB 43 55 52 53 >                db      "CURS"
 939+ E7EF             >len_NFA         defl    $ - temp_NFA
 939+ E7EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ E7EB             >
 939+ E7EB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ E7EC 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 939+ E7F0             >                org     $-1                 // alter last byte of Name just above to set
 939+ E7EF D3          >                db      {b $} | END_BIT     // msb as name end
 939+ E7F0             >
 939+ E7F0 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 939+ E7F2             >Prev_Ptr        defl    Heap_Ptr
 939+ E7F2             >
 939+ E7F2             >mirror_Ptr      defl    $
 939+ E7F2             >
 939+ E7F2 EC 2B       >                dw      Dict_Ptr + 2        // xt
 939+ E7F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 939+ E7F4             >
 939+ E7F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 939+ E7F4             >
 939+ E7F4             >//              ______________________________________________________________________
 939+ E7F4             >//              Dictionary part
 939+ E7F4             >
 939+ E7F4             >                org     Dict_Ptr
 939+ 2BEA             >
 939+ 2BEA F2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 939+ 2BEC             >
 939+ 2BEC             >CURS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 2BEC CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 2BEF             >
 939+ 2BEF             >
 939+ 2BEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 2BEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 2BEF             >
 939+ 2BEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 2BEF
 941+ 2BEF F2 26 22 23                  dw      TWO, SELECT                 //    2 select
 942+ 2BF3 3D 20 3B 5C                  dw      LIT, $5C3B, CFETCH          //    $5c3b c@     \ : res 5, (iy + 1)
 942+ 2BF7 07 26
 943+ 2BF9 3D 20 DF 00                  dw      LIT, $DF, AND_OP            //    $DF and      \ FLAGS
 943+ 2BFD 7D 24
 944+ 2BFF 3D 20 3B 5C                  dw      LIT, $5C3B, CSTORE          //    $5c3b c!
 944+ 2C03 10 26
 945+ 2C05              Curs_Loop:                                          //  begin
 946+ 2C05 D5 22                        dw      ONE_FRAME
 947+ 2C07 3D 20 28 00                  dw      LIT, $28, PLUS_ORIGIN       //    $28 +origin
 947+ 2C0B 2A 27
 948+ 2C0D 3D 20 78 5C                  dw      LIT, $5C78, CFETCH          //    $5c78 c@     \ FRAMES
 948+ 2C11 07 26
 949+ 2C13 3D 20 20 00                  dw      LIT, $20, AND_OP            //    $20 and
 949+ 2C17 7D 24
 950+ 2C19 8D 20                        dw      ZBRANCH                     //    if
 951+ 2C1B 16 00                        dw      Curs_endif - $
 952+ 2C1D 23 25                        dw          ONE_PLUS                //      1+
 953+ 2C1F 3D 20 6A 5C                  dw          LIT, $5C6A, CFETCH      //      $5c6a c@   \ FLAGS2
 953+ 2C23 07 26
 954+ 2C25 3D 20 08 00                  dw          LIT, $08, AND_OP        //      8 and
 954+ 2C29 7D 24
 955+ 2C2B 8D 20                        dw          ZBRANCH                 //      if
 956+ 2C2D 04 00                        dw          Curs_endif - $
 957+ 2C2F 23 25                        dw              ONE_PLUS            //        1+
 958+ 2C31              Curs_endif:
 959+ 2C31 07 26 C4 28                  dw      CFETCH, EMIT                //    c@ emit
 960+ 2C35 3D 20 08 00                  dw      LIT, 8, EMIT                //    8 emit
 960+ 2C39 C4 28
 961+ 2C3B 3D 20 3B 5C                  dw      LIT, $5C3B, CFETCH          //    $5c3b c@
 961+ 2C3F 07 26
 962+ 2C41 3D 20 20 00                  dw      LIT, $20, AND_OP            //    $20 and \ bit 5, (iy + 1)
 962+ 2C45 7D 24
 963+ 2C47                                                                  //  until
 964+ 2C47 8D 20                        dw      ZBRANCH                     //
 965+ 2C49 BC FF                        dw      Curs_Loop - $               //
 966+ 2C4B D5 22                        dw      ONE_FRAME
 967+ 2C4D
 968+ 2C4D DB 28                        dw      SPACE                       //  space
 969+ 2C4F 3D 20 08 00                  dw      LIT, 8, EMIT                //  8 emit
 969+ 2C53 C4 28
 970+ 2C55 BD 24                        dw      EXIT                        // ;
 971+ 2C57
 972+ 2C57              //  ______________________________________________________________________
 973+ 2C57              //
 974+ 2C57              // type         a n --
 975+ 2C57              // Sends to current output channel n characters starting at address a.
 976+ 2C57                              Colon_Def TYPE, "TYPE", is_normal
 976+ 2C57             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 976+ 2C57             >
 976+ 2C57             >Dict_Ptr        defl    $
 976+ 2C57             >
 976+ 2C57             >//              ______________________________________________________________________
 976+ 2C57             >//              Heap part
 976+ 2C57             >
 976+ 2C57             >
 976+ 2C57             >                org     (Heap_Ptr & $1FFF) + $E000
 976+ E7F4             >
 976+ E7F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ E7F4             >Latest_Definition defl  Heap_Ptr
 976+ E7F4             >
 976+ E7F4             >                // dummy db directives used to calculate length of namec
 976+ E7F4 54 59 50 45 >                db      "TYPE"
 976+ E7F8             >len_NFA         defl    $ - temp_NFA
 976+ E7F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ E7F4             >
 976+ E7F4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ E7F5 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 976+ E7F9             >                org     $-1                 // alter last byte of Name just above to set
 976+ E7F8 C5          >                db      {b $} | END_BIT     // msb as name end
 976+ E7F9             >
 976+ E7F9 EB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 976+ E7FB             >Prev_Ptr        defl    Heap_Ptr
 976+ E7FB             >
 976+ E7FB             >mirror_Ptr      defl    $
 976+ E7FB             >
 976+ E7FB 59 2C       >                dw      Dict_Ptr + 2        // xt
 976+ E7FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 976+ E7FD             >
 976+ E7FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 976+ E7FD             >
 976+ E7FD             >//              ______________________________________________________________________
 976+ E7FD             >//              Dictionary part
 976+ E7FD             >
 976+ E7FD             >                org     Dict_Ptr
 976+ 2C57             >
 976+ 2C57 FB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 976+ 2C59             >
 976+ 2C59             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 2C59 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 2C5C             >
 976+ 2C5C             >
 976+ 2C5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 2C5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 2C5C             >
 976+ 2C5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 2C5C A5 2B                        dw      BOUNDS                  // bounds
 978+ 2C5E A0 20                        dw      C_Q_DO                  // ?do
 979+ 2C60 0C 00                        dw      Type_Skip - $
 980+ 2C62              Type_Loop:
 981+ 2C62 CC 20 07 26                  dw          I, CFETCH           //      i c@
 982+ 2C66 C4 28                        dw          EMIT                //      emit
 983+ 2C68 81 20                        dw      C_LOOP                  // loop
 984+ 2C6A F8 FF                        dw      Type_Loop - $
 985+ 2C6C              Type_Skip:
 986+ 2C6C BD 24                        dw      EXIT                    // ;
 987+ 2C6E
 988+ 2C6E              //  ______________________________________________________________________
 989+ 2C6E              //
 990+ 2C6E              // -trailing    a n1 -- a n2
 991+ 2C6E              // Assumes that an n1 bytes-long string is stored at address a
 992+ 2C6E              // and the string contains a space delimited word,
 993+ 2C6E              // Finds n2 as the position of the first character after the word.
 994+ 2C6E                              Colon_Def LTRAILING, "-TRAILING", is_normal
 994+ 2C6E             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 994+ 2C6E             >
 994+ 2C6E             >Dict_Ptr        defl    $
 994+ 2C6E             >
 994+ 2C6E             >//              ______________________________________________________________________
 994+ 2C6E             >//              Heap part
 994+ 2C6E             >
 994+ 2C6E             >
 994+ 2C6E             >                org     (Heap_Ptr & $1FFF) + $E000
 994+ E7FD             >
 994+ E7FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ E7FD             >Latest_Definition defl  Heap_Ptr
 994+ E7FD             >
 994+ E7FD             >                // dummy db directives used to calculate length of namec
 994+ E7FD 2D 54 52 41 >                db      "-TRAILING"
 994+ E801 49 4C 49 4E >
 994+ E805 47          >
 994+ E806             >len_NFA         defl    $ - temp_NFA
 994+ E806             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ E7FD             >
 994+ E7FD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ E7FE 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 994+ E802 49 4C 49 4E >
 994+ E806 47          >
 994+ E807             >                org     $-1                 // alter last byte of Name just above to set
 994+ E806 C7          >                db      {b $} | END_BIT     // msb as name end
 994+ E807             >
 994+ E807 F4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 994+ E809             >Prev_Ptr        defl    Heap_Ptr
 994+ E809             >
 994+ E809             >mirror_Ptr      defl    $
 994+ E809             >
 994+ E809 70 2C       >                dw      Dict_Ptr + 2        // xt
 994+ E80B             >Heap_Ptr        defl    $ - $E000           // save current HP
 994+ E80B             >
 994+ E80B             >Current_HP      defl  $ - $E000             // used to set HP once!
 994+ E80B             >
 994+ E80B             >//              ______________________________________________________________________
 994+ E80B             >//              Dictionary part
 994+ E80B             >
 994+ E80B             >                org     Dict_Ptr
 994+ 2C6E             >
 994+ 2C6E 09 08       >                dw      mirror_Ptr - $E000 + Heap_offset
 994+ 2C70             >
 994+ 2C70             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 2C70 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 2C73             >
 994+ 2C73             >
 994+ 2C73             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 2C73             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 2C73             >
 994+ 2C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 2C73 88 25 E4 26                  dw      DUP, ZERO               // dup 0
 996+ 2C77                                                              // do
 997+ 2C77 A0 20                        dw      C_Q_DO
 998+ 2C79 20 00                        dw      LTrailing_Leave - $
 999+ 2C7B              LTrailing_Loop:
1000+ 2C7B D0 25 0A 25                  dw          TWO_DUP, PLUS       //      2dup +
1001+ 2C7F 2A 25                        dw          ONE_SUBTRACT        //      1-
1002+ 2C81 07 26                        dw          CFETCH              //      c@
1003+ 2C83 07 27 48 28                  dw          BL, SUBTRACT        //      bl -
1004+ 2C87                                                              //      if
1005+ 2C87 8D 20                        dw          ZBRANCH
1006+ 2C89 0A 00                        dw          LTrailing_Else - $
1007+ 2C8B 96 20                        dw              C_LEAVE         //          leave
1008+ 2C8D 0C 00                        dw              LTrailing_Leave - $
1009+ 2C8F 89 20                        dw          BRANCH              //      else
1010+ 2C91 04 00                        dw          LTrailing_Endif - $
1011+ 2C93              LTrailing_Else:
1012+ 2C93 2A 25                        dw              ONE_SUBTRACT    //          1-
1013+ 2C95              LTrailing_Endif:                                //      endif
1014+ 2C95                                                              // loop
1015+ 2C95 81 20                        dw      C_LOOP
1016+ 2C97 E4 FF                        dw      LTrailing_Loop - $
1017+ 2C99              LTrailing_Leave:
1018+ 2C99 BD 24                        dw      EXIT                    // ;
1019+ 2C9B
1020+ 2C9B              //  ______________________________________________________________________
1021+ 2C9B              //
1022+ 2C9B              // accept       a n1 -- n2
1023+ 2C9B              // Accepts at most n1 characters from terminal and stores them at address a
1024+ 2C9B              // CR stops input. A 'nul' is added as trailer.
1025+ 2C9B              // n2 is the string length. n2 is kept in span user variable also.
1026+ 2C9B                              Colon_Def ACCEPT, "ACCEPT", is_normal
1026+ 2C9B             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
1026+ 2C9B             >
1026+ 2C9B             >Dict_Ptr        defl    $
1026+ 2C9B             >
1026+ 2C9B             >//              ______________________________________________________________________
1026+ 2C9B             >//              Heap part
1026+ 2C9B             >
1026+ 2C9B             >
1026+ 2C9B             >                org     (Heap_Ptr & $1FFF) + $E000
1026+ E80B             >
1026+ E80B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ E80B             >Latest_Definition defl  Heap_Ptr
1026+ E80B             >
1026+ E80B             >                // dummy db directives used to calculate length of namec
1026+ E80B 41 43 43 45 >                db      "ACCEPT"
1026+ E80F 50 54       >
1026+ E811             >len_NFA         defl    $ - temp_NFA
1026+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ E80B             >
1026+ E80B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ E80C 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
1026+ E810 50 54       >
1026+ E812             >                org     $-1                 // alter last byte of Name just above to set
1026+ E811 D4          >                db      {b $} | END_BIT     // msb as name end
1026+ E812             >
1026+ E812 FD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1026+ E814             >Prev_Ptr        defl    Heap_Ptr
1026+ E814             >
1026+ E814             >mirror_Ptr      defl    $
1026+ E814             >
1026+ E814 9D 2C       >                dw      Dict_Ptr + 2        // xt
1026+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1026+ E816             >
1026+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1026+ E816             >
1026+ E816             >//              ______________________________________________________________________
1026+ E816             >//              Dictionary part
1026+ E816             >
1026+ E816             >                org     Dict_Ptr
1026+ 2C9B             >
1026+ 2C9B 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1026+ 2C9D             >
1026+ 2C9D             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 2C9D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 2CA0             >
1026+ 2CA0             >
1026+ 2CA0             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 2CA0             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 2CA0             >
1026+ 2CA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 2CA0 64 25 0A 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
1027+ 2CA4 64 25
1028+ 2CA6 E4 26 98 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
1029+ 2CAA                                                              // do
1030+ 2CAA A0 20                        dw      C_Q_DO
1031+ 2CAC 8C 00                        dw      Accept_Leave - $
1032+ 2CAE              Accept_Loop:
1033+ 2CAE EC 2B                        dw          CURS                //      cur             ( a  0 )
1034+ 2CB0 6D 25 DB 22                  dw          DROP, KEY           //      drop key        ( a  c )
1035+ 2CB4 88 25                        dw          DUP                 //      dup             ( a  c  c )
1036+ 2CB6 3D 20 0E 00                  dw          LIT, $0E            //      0E
1037+ 2CBA 2A 27                        dw          PLUS_ORIGIN         //      +origin
1038+ 2CBC F2 25                        dw          FETCH               //      @               ( a  c  c  del )
1039+ 2CBE 54 28                        dw          EQUALS              //      =               ( a  c  c==del )
1040+ 2CC0                                                              //      if
1041+ 2CC0 8D 20                        dw          ZBRANCH
1042+ 2CC2 2C 00                        dw          Accept_Else_0 - $
1043+ 2CC4 6D 25                        dw              DROP            //          drop        ( a  )
1044+ 2CC6 88 25 CC 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1044+ 2CCA 54 28
1045+ 2CCC EB 26 7D 24                  dw              ONE, AND_OP     //          1 and
1046+ 2CD0 88 25                        dw              DUP             //          dup         ( a  a==i  a==i )
1047+ 2CD2 D2 24                        dw              R_TO            //          r> 2 - + r>
1048+ 2CD4 45 25 0A 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1049+ 2CD8 C7 24                        dw              TO_R            //
1050+ 2CDA                                                              //          if
1051+ 2CDA 8D 20                        dw              ZBRANCH
1052+ 2CDC 0A 00                        dw              Accept_Else_1 - $
1053+ 2CDE 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1054+ 2CE2                                                              //          else
1055+ 2CE2 89 20                        dw              BRANCH
1056+ 2CE4 06 00                        dw              Accept_Endif_1 - $
1057+ 2CE6              Accept_Else_1:
1058+ 2CE6 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1059+ 2CEA              Accept_Endif_1:                                 //          endif
1060+ 2CEA 89 20                        dw          BRANCH
1061+ 2CEC 2E 00                        dw          Accept_Endif_0 - $
1062+ 2CEE              Accept_Else_0:                                  //      else
1063+ 2CEE 88 25                        dw              DUP             //          dup         ( a  c  c )
1064+ 2CF0 3D 20 0D 00                  dw              LIT, 13         //          13
1065+ 2CF4 54 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1066+ 2CF6                                                              //          if
1067+ 2CF6 8D 20                        dw              ZBRANCH
1068+ 2CF8 0C 00                        dw              Accept_Else_2 - $
1069+ 2CFA 6D 25 07 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1070+ 2CFE E4 26                        dw                  ZERO        //              0       ( a  c  0 )
1071+ 2D00                                                              //          else
1072+ 2D00 89 20                        dw              BRANCH
1073+ 2D02 04 00                        dw              Accept_Endif_2 - $
1074+ 2D04              Accept_Else_2:
1075+ 2D04 88 25                        dw                  DUP         //              dup     ( a  c  c )
1076+ 2D06                                                              //          endif
1077+ 2D06              Accept_Endif_2:
1078+ 2D06 CC 20 10 26                  dw              I, CSTORE       //          i           ( a  c )
1079+ 2D0A 88 25 07 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1079+ 2D0E 6D 28
1080+ 2D10                                                              //          if
1081+ 2D10 8D 20                        dw              ZBRANCH
1082+ 2D12 08 00                        dw              Accept_Endif_3 - $
1083+ 2D14 D2 24                        dw                  R_TO        //              r>
1084+ 2D16 2A 25                        dw                  ONE_SUBTRACT//              1-
1085+ 2D18 C7 24                        dw                  TO_R        //              >r
1086+ 2D1A                                                              //          endif
1087+ 2D1A              Accept_Endif_3:
1088+ 2D1A              Accept_Endif_0:                                 //      endif
1089+ 2D1A C4 28                        dw          EMIT                //      emit            ( a )
1090+ 2D1C
1091+ 2D1C E4 26 CC 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1091+ 2D20 23 25
1092+ 2D22 FC 25                        dw          STORE               //          ( zero pad )
1093+ 2D24 CC 20                        dw          I                   //      i
1094+ 2D26 CC 20 07 26                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1094+ 2D2A E2 24
1095+ 2D2C 8D 20                        dw          ZBRANCH             //
1096+ 2D2E 06 00                        dw              Accept_Endif_4 - $
1097+ 2D30 96 20                        dw                  C_LEAVE     //              leave
1098+ 2D32 06 00                        dw                  Accept_Leave - $
1099+ 2D34              Accept_Endif_4:                                 //      endif
1100+ 2D34                                                              // loop
1101+ 2D34 81 20                        dw      C_LOOP
1102+ 2D36 78 FF                        dw      Accept_Loop - $
1103+ 2D38              Accept_Leave:
1104+ 2D38 81 25 48 28                  dw      SWAP, SUBTRACT          // swap -
1105+ 2D3C 23 25                        dw      ONE_PLUS                // 1+
1106+ 2D3E 88 25 F7 27                  dw      DUP, SPAN, STORE        // dup span !
1106+ 2D42 FC 25
1107+ 2D44 BD 24                        dw      EXIT                    // ;
1108+ 2D46
1109+ 2D46              //  ______________________________________________________________________
1110+ 2D46              //
1111+ 2D46              // expect      a n --
1112+ 2D46              // Accepts at most n1 characters from terminal and stores them at address a
1113+ 2D46              // CR stops input. A 'nul' is added as trailer.
1114+ 2D46              // n2 is the string length. n2 is kept in span user variable also.
1115+ 2D46              //              Colon_Def EXPECT, "EXPECT", is_normal
1116+ 2D46              //              dw      ACCEPT, DROP            // accept drop
1117+ 2D46              //              dw      EXIT                    // ;
1118+ 2D46
1119+ 2D46              //  ______________________________________________________________________
1120+ 2D46              //
1121+ 2D46              // query        --
1122+ 2D46              // Accept at most 80 character from console. CR stops.
1123+ 2D46              // Text is stored in TIB. Variable IN is zeroed.
1124+ 2D46                              Colon_Def QUERY, "QUERY", is_normal
1124+ 2D46             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1124+ 2D46             >
1124+ 2D46             >Dict_Ptr        defl    $
1124+ 2D46             >
1124+ 2D46             >//              ______________________________________________________________________
1124+ 2D46             >//              Heap part
1124+ 2D46             >
1124+ 2D46             >
1124+ 2D46             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E816             >
1124+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E816             >Latest_Definition defl  Heap_Ptr
1124+ E816             >
1124+ E816             >                // dummy db directives used to calculate length of namec
1124+ E816 51 55 45 52 >                db      "QUERY"
1124+ E81A 59          >
1124+ E81B             >len_NFA         defl    $ - temp_NFA
1124+ E81B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E816             >
1124+ E816 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E817 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1124+ E81B 59          >
1124+ E81C             >                org     $-1                 // alter last byte of Name just above to set
1124+ E81B D9          >                db      {b $} | END_BIT     // msb as name end
1124+ E81C             >
1124+ E81C 0B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81E             >Prev_Ptr        defl    Heap_Ptr
1124+ E81E             >
1124+ E81E             >mirror_Ptr      defl    $
1124+ E81E             >
1124+ E81E 48 2D       >                dw      Dict_Ptr + 2        // xt
1124+ E820             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E820             >
1124+ E820             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E820             >
1124+ E820             >//              ______________________________________________________________________
1124+ E820             >//              Dictionary part
1124+ E820             >
1124+ E820             >                org     Dict_Ptr
1124+ 2D46             >
1124+ 2D46 1E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 2D48             >
1124+ 2D48             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 2D48 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 2D4B             >
1124+ 2D4B             >
1124+ 2D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 2D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 2D4B             >
1124+ 2D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 2D4B 49 27 F2 25                  dw      TIB, FETCH              // tib @
1126+ 2D4F 3D 20 50 00                  dw      LIT, 80                 // 80
1127+ 2D53 9D 2C 6D 25                  dw      ACCEPT, DROP            // accept drop
1128+ 2D57 E4 26 8B 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1128+ 2D5B FC 25
1129+ 2D5D BD 24                        dw      EXIT                    // ;
1130+ 2D5F
1131+ 2D5F              //  ______________________________________________________________________
1132+ 2D5F              //
1133+ 2D5F              // fill        a n c --
1134+ 2D5F              // If n > 0, fills n locations starting from address a with the value c.
1135+ 2D5F                              New_Def FILL, "FILL", is_code, is_normal
1135+ 2D5F             >
1135+ 2D5F             >Dict_Ptr        defl    $
1135+ 2D5F             >
1135+ 2D5F             >//              ______________________________________________________________________
1135+ 2D5F             >//              Heap part
1135+ 2D5F             >
1135+ 2D5F             >
1135+ 2D5F             >                org     (Heap_Ptr & $1FFF) + $E000
1135+ E820             >
1135+ E820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1135+ E820             >Latest_Definition defl  Heap_Ptr
1135+ E820             >
1135+ E820             >                // dummy db directives used to calculate length of namec
1135+ E820 46 49 4C 4C >                db      "FILL"
1135+ E824             >len_NFA         defl    $ - temp_NFA
1135+ E824             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1135+ E820             >
1135+ E820 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1135+ E821 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1135+ E825             >                org     $-1                 // alter last byte of Name just above to set
1135+ E824 CC          >                db      {b $} | END_BIT     // msb as name end
1135+ E825             >
1135+ E825 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1135+ E827             >Prev_Ptr        defl    Heap_Ptr
1135+ E827             >
1135+ E827             >mirror_Ptr      defl    $
1135+ E827             >
1135+ E827 61 2D       >                dw      Dict_Ptr + 2        // xt
1135+ E829             >Heap_Ptr        defl    $ - $E000           // save current HP
1135+ E829             >
1135+ E829             >Current_HP      defl  $ - $E000             // used to set HP once!
1135+ E829             >
1135+ E829             >//              ______________________________________________________________________
1135+ E829             >//              Dictionary part
1135+ E829             >
1135+ E829             >                org     Dict_Ptr
1135+ 2D5F             >
1135+ 2D5F 27 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1135+ 2D61             >
1135+ 2D61             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1135+ 2D61 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1135+ 2D61 ~           >
1135+ 2D61 ~           >
1135+ 2D61             >                endif           ; ok        // for other definitions it "points" the correct handler
1135+ 2D61             >                // Use of "; ok" to suppress "warning[fwdref]"
1135+ 2D61             >
1135+ 2D61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1136+ 2D61 D9                           exx
1137+ 2D62 D1                           pop     de                  // de has character
1138+ 2D63 C1                           pop     bc                  // bc has counter
1139+ 2D64 E1                           pop     hl                  // hl has address, save Instruction Pointer
1140+ 2D65              Fill_Loop:
1141+ 2D65 78                               ld      a, b
1142+ 2D66 B1                               or      c
1143+ 2D67 28 05                        jr      z, Fill_While_End
1144+ 2D69 73                               ld      (hl), e
1145+ 2D6A 0B                               dec     bc
1146+ 2D6B 23                               inc     hl
1147+ 2D6C 18 F7                        jr      Fill_Loop
1148+ 2D6E              Fill_While_End:
1149+ 2D6E D9                           exx
1150+ 2D6F                              next
1150+ 2D6F DD E9       >                jp      (ix)
1151+ 2D71
1152+ 2D71              //  ______________________________________________________________________
1153+ 2D71              //
1154+ 2D71              // erase        a n --
1155+ 2D71              // If n > 0, fills n locations starting from address a with 'nul' characters.
1156+ 2D71                              Colon_Def ERASE, "ERASE", is_normal
1156+ 2D71             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1156+ 2D71             >
1156+ 2D71             >Dict_Ptr        defl    $
1156+ 2D71             >
1156+ 2D71             >//              ______________________________________________________________________
1156+ 2D71             >//              Heap part
1156+ 2D71             >
1156+ 2D71             >
1156+ 2D71             >                org     (Heap_Ptr & $1FFF) + $E000
1156+ E829             >
1156+ E829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1156+ E829             >Latest_Definition defl  Heap_Ptr
1156+ E829             >
1156+ E829             >                // dummy db directives used to calculate length of namec
1156+ E829 45 52 41 53 >                db      "ERASE"
1156+ E82D 45          >
1156+ E82E             >len_NFA         defl    $ - temp_NFA
1156+ E82E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1156+ E829             >
1156+ E829 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1156+ E82A 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1156+ E82E 45          >
1156+ E82F             >                org     $-1                 // alter last byte of Name just above to set
1156+ E82E C5          >                db      {b $} | END_BIT     // msb as name end
1156+ E82F             >
1156+ E82F 20 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1156+ E831             >Prev_Ptr        defl    Heap_Ptr
1156+ E831             >
1156+ E831             >mirror_Ptr      defl    $
1156+ E831             >
1156+ E831 73 2D       >                dw      Dict_Ptr + 2        // xt
1156+ E833             >Heap_Ptr        defl    $ - $E000           // save current HP
1156+ E833             >
1156+ E833             >Current_HP      defl  $ - $E000             // used to set HP once!
1156+ E833             >
1156+ E833             >//              ______________________________________________________________________
1156+ E833             >//              Dictionary part
1156+ E833             >
1156+ E833             >                org     Dict_Ptr
1156+ 2D71             >
1156+ 2D71 31 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1156+ 2D73             >
1156+ 2D73             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1156+ 2D73 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1156+ 2D76             >
1156+ 2D76             >
1156+ 2D76             >                endif           ; ok        // for other definitions it "points" the correct handler
1156+ 2D76             >                // Use of "; ok" to suppress "warning[fwdref]"
1156+ 2D76             >
1156+ 2D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1157+ 2D76 E4 26 61 2D                  dw      ZERO, FILL              // 0 fill
1158+ 2D7A BD 24                        dw      EXIT                    // ;
1159+ 2D7C
1160+ 2D7C              //  ______________________________________________________________________
1161+ 2D7C              //
1162+ 2D7C              // blank        a n --
1163+ 2D7C              // If n > 0, fills n locations starting from address a with 'nul' characters.
1164+ 2D7C                              Colon_Def BLANK, "BLANK", is_normal
1164+ 2D7C             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1164+ 2D7C             >
1164+ 2D7C             >Dict_Ptr        defl    $
1164+ 2D7C             >
1164+ 2D7C             >//              ______________________________________________________________________
1164+ 2D7C             >//              Heap part
1164+ 2D7C             >
1164+ 2D7C             >
1164+ 2D7C             >                org     (Heap_Ptr & $1FFF) + $E000
1164+ E833             >
1164+ E833             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1164+ E833             >Latest_Definition defl  Heap_Ptr
1164+ E833             >
1164+ E833             >                // dummy db directives used to calculate length of namec
1164+ E833 42 4C 41 4E >                db      "BLANK"
1164+ E837 4B          >
1164+ E838             >len_NFA         defl    $ - temp_NFA
1164+ E838             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1164+ E833             >
1164+ E833 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1164+ E834 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1164+ E838 4B          >
1164+ E839             >                org     $-1                 // alter last byte of Name just above to set
1164+ E838 CB          >                db      {b $} | END_BIT     // msb as name end
1164+ E839             >
1164+ E839 29 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1164+ E83B             >Prev_Ptr        defl    Heap_Ptr
1164+ E83B             >
1164+ E83B             >mirror_Ptr      defl    $
1164+ E83B             >
1164+ E83B 7E 2D       >                dw      Dict_Ptr + 2        // xt
1164+ E83D             >Heap_Ptr        defl    $ - $E000           // save current HP
1164+ E83D             >
1164+ E83D             >Current_HP      defl  $ - $E000             // used to set HP once!
1164+ E83D             >
1164+ E83D             >//              ______________________________________________________________________
1164+ E83D             >//              Dictionary part
1164+ E83D             >
1164+ E83D             >                org     Dict_Ptr
1164+ 2D7C             >
1164+ 2D7C 3B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1164+ 2D7E             >
1164+ 2D7E             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1164+ 2D7E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1164+ 2D81             >
1164+ 2D81             >
1164+ 2D81             >                endif           ; ok        // for other definitions it "points" the correct handler
1164+ 2D81             >                // Use of "; ok" to suppress "warning[fwdref]"
1164+ 2D81             >
1164+ 2D81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1165+ 2D81 07 27 61 2D                  dw      BL, FILL                // bl fill
1166+ 2D85 BD 24                        dw      EXIT                    // ;
1167+ 2D87
1168+ 2D87              //  ______________________________________________________________________
1169+ 2D87              //
1170+ 2D87              // hold         c --
1171+ 2D87              // Used between <# and #> to insert a character c in numeric formatting.
1172+ 2D87                              Colon_Def HOLD, "HOLD", is_normal
1172+ 2D87             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1172+ 2D87             >
1172+ 2D87             >Dict_Ptr        defl    $
1172+ 2D87             >
1172+ 2D87             >//              ______________________________________________________________________
1172+ 2D87             >//              Heap part
1172+ 2D87             >
1172+ 2D87             >
1172+ 2D87             >                org     (Heap_Ptr & $1FFF) + $E000
1172+ E83D             >
1172+ E83D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1172+ E83D             >Latest_Definition defl  Heap_Ptr
1172+ E83D             >
1172+ E83D             >                // dummy db directives used to calculate length of namec
1172+ E83D 48 4F 4C 44 >                db      "HOLD"
1172+ E841             >len_NFA         defl    $ - temp_NFA
1172+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1172+ E83D             >
1172+ E83D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1172+ E83E 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1172+ E842             >                org     $-1                 // alter last byte of Name just above to set
1172+ E841 C4          >                db      {b $} | END_BIT     // msb as name end
1172+ E842             >
1172+ E842 33 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1172+ E844             >Prev_Ptr        defl    Heap_Ptr
1172+ E844             >
1172+ E844             >mirror_Ptr      defl    $
1172+ E844             >
1172+ E844 89 2D       >                dw      Dict_Ptr + 2        // xt
1172+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1172+ E846             >
1172+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1172+ E846             >
1172+ E846             >//              ______________________________________________________________________
1172+ E846             >//              Dictionary part
1172+ E846             >
1172+ E846             >                org     Dict_Ptr
1172+ 2D87             >
1172+ 2D87 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1172+ 2D89             >
1172+ 2D89             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1172+ 2D89 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1172+ 2D8C             >
1172+ 2D8C             >
1172+ 2D8C             >                endif           ; ok        // for other definitions it "points" the correct handler
1172+ 2D8C             >                // Use of "; ok" to suppress "warning[fwdref]"
1172+ 2D8C             >
1172+ 2D8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1173+ 2D8C 00 27                        dw      NEG_ONE                 // -1
1174+ 2D8E D3 27 DA 25                  dw      HLD, PLUSSTORE          // hld +!
1175+ 2D92 D3 27 F2 25                  dw      HLD, FETCH, CSTORE      // hld @ c!
1175+ 2D96 10 26
1176+ 2D98 BD 24                        dw      EXIT                    // ;
1177+ 2D9A
1178+ 2D9A              //  ______________________________________________________________________
1179+ 2D9A              //
1180+ 2D9A              // pad         -- a
1181+ 2D9A              // leaves the buffer text address. This is at a fixed distance over HERE.
1182+ 2D9A                              Colon_Def PAD, "PAD", is_normal
1182+ 2D9A             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1182+ 2D9A             >
1182+ 2D9A             >Dict_Ptr        defl    $
1182+ 2D9A             >
1182+ 2D9A             >//              ______________________________________________________________________
1182+ 2D9A             >//              Heap part
1182+ 2D9A             >
1182+ 2D9A             >
1182+ 2D9A             >                org     (Heap_Ptr & $1FFF) + $E000
1182+ E846             >
1182+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ E846             >Latest_Definition defl  Heap_Ptr
1182+ E846             >
1182+ E846             >                // dummy db directives used to calculate length of namec
1182+ E846 50 41 44    >                db      "PAD"
1182+ E849             >len_NFA         defl    $ - temp_NFA
1182+ E849             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ E846             >
1182+ E846 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ E847 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1182+ E84A             >                org     $-1                 // alter last byte of Name just above to set
1182+ E849 C4          >                db      {b $} | END_BIT     // msb as name end
1182+ E84A             >
1182+ E84A 3D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1182+ E84C             >Prev_Ptr        defl    Heap_Ptr
1182+ E84C             >
1182+ E84C             >mirror_Ptr      defl    $
1182+ E84C             >
1182+ E84C 9C 2D       >                dw      Dict_Ptr + 2        // xt
1182+ E84E             >Heap_Ptr        defl    $ - $E000           // save current HP
1182+ E84E             >
1182+ E84E             >Current_HP      defl  $ - $E000             // used to set HP once!
1182+ E84E             >
1182+ E84E             >//              ______________________________________________________________________
1182+ E84E             >//              Dictionary part
1182+ E84E             >
1182+ E84E             >                org     Dict_Ptr
1182+ 2D9A             >
1182+ 2D9A 4C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1182+ 2D9C             >
1182+ 2D9C             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 2D9C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1182+ 2D9F             >
1182+ 2D9F             >
1182+ 2D9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 2D9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 2D9F             >
1182+ 2D9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 2D9F 09 28                        dw      HERE                    // here
1184+ 2DA1 3D 20 44 00                  dw      LIT, 68                 // 68
1185+ 2DA5 0A 25                        dw      PLUS                    // +
1186+ 2DA7 BD 24                        dw      EXIT                    // ;
1187+ 2DA9
1188+ 2DA9              //  ______________________________________________________________________
1189+ 2DA9              //
1190+ 2DA9              // word         c -- a
1191+ 2DA9              // reads characters from input streams until it encouners a c delimiter.
1192+ 2DA9              // Stores that packet so it starts from HERE
1193+ 2DA9              // WORD leaves a counter as first byte and ends the packet with two spaces.
1194+ 2DA9              // Other occurrences of c are ignored.
1195+ 2DA9              // If BLK is zero, text is taken from terminal buffer TIB.
1196+ 2DA9              // Otherwise text is taken from the disk-block given by BLK.
1197+ 2DA9              // "in" variable is incremented of the number of character read.
1198+ 2DA9              // The number of characters read is given by ENCLOSE.
1199+ 2DA9                              Colon_Def WORD, "WORD", is_normal
1199+ 2DA9             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1199+ 2DA9             >
1199+ 2DA9             >Dict_Ptr        defl    $
1199+ 2DA9             >
1199+ 2DA9             >//              ______________________________________________________________________
1199+ 2DA9             >//              Heap part
1199+ 2DA9             >
1199+ 2DA9             >
1199+ 2DA9             >                org     (Heap_Ptr & $1FFF) + $E000
1199+ E84E             >
1199+ E84E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ E84E             >Latest_Definition defl  Heap_Ptr
1199+ E84E             >
1199+ E84E             >                // dummy db directives used to calculate length of namec
1199+ E84E 57 4F 52 44 >                db      "WORD"
1199+ E852             >len_NFA         defl    $ - temp_NFA
1199+ E852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ E84E             >
1199+ E84E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ E84F 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1199+ E853             >                org     $-1                 // alter last byte of Name just above to set
1199+ E852 C4          >                db      {b $} | END_BIT     // msb as name end
1199+ E853             >
1199+ E853 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1199+ E855             >Prev_Ptr        defl    Heap_Ptr
1199+ E855             >
1199+ E855             >mirror_Ptr      defl    $
1199+ E855             >
1199+ E855 AB 2D       >                dw      Dict_Ptr + 2        // xt
1199+ E857             >Heap_Ptr        defl    $ - $E000           // save current HP
1199+ E857             >
1199+ E857             >Current_HP      defl  $ - $E000             // used to set HP once!
1199+ E857             >
1199+ E857             >//              ______________________________________________________________________
1199+ E857             >//              Dictionary part
1199+ E857             >
1199+ E857             >                org     Dict_Ptr
1199+ 2DA9             >
1199+ 2DA9 55 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1199+ 2DAB             >
1199+ 2DAB             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 2DAB CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1199+ 2DAE             >
1199+ 2DAE             >
1199+ 2DAE             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 2DAE             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 2DAE             >
1199+ 2DAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 2DAE 85 27 F2 25                  dw      BLK, FETCH              // blk @
1201+ 2DB2                                                              // if
1202+ 2DB2 8D 20                        dw      ZBRANCH
1203+ 2DB4 0C 00                        dw      Word_Else - $
1204+ 2DB6 85 27 F2 25                  dw          BLK, FETCH          //      blk @
1205+ 2DBA 75 37                        dw          BLOCK               //      block ( forward )
1206+ 2DBC                                                              // else
1207+ 2DBC 89 20                        dw      BRANCH
1208+ 2DBE 06 00                        dw      Word_Endif - $
1209+ 2DC0              Word_Else:
1210+ 2DC0 49 27 F2 25                  dw         TIB, FETCH           //      tib @
1211+ 2DC4              Word_Endif:                                     // endif
1212+ 2DC4 8B 27 F2 25                  dw      TO_IN, FETCH, PLUS      // >in @ +
1212+ 2DC8 0A 25
1213+ 2DCA 81 25 BA 21                  dw      SWAP, ENCLOSE           // swap enclose
1214+ 2DCE 09 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1214+ 2DD2 22 00 7E 2D
1215+ 2DD6 8B 27 DA 25                  dw      TO_IN, PLUSSTORE        // >in @ +
1216+ 2DDA 64 25 48 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1216+ 2DDE C7 24
1217+ 2DE0 DD 24 09 28                  dw      R_OP, HERE, CSTORE      // r here c!
1217+ 2DE4 10 26
1218+ 2DE6 0A 25                        dw      PLUS                    // +
1219+ 2DE8 09 28 23 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1219+ 2DEC D2 24
1220+ 2DEE 02 24                        dw      CMOVE                   // cmove
1221+ 2DF0 09 28                        dw      HERE                    // here
1222+ 2DF2 BD 24                        dw      EXIT                    // ;
1223+ 2DF4
1224+ 2DF4              //  ______________________________________________________________________
1225+ 2DF4              //
1226+ 2DF4              // (.")         --
1227+ 2DF4              // Direct procedure compiled by ." and  .(  It executes TYPE.
1228+ 2DF4                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1228+ 2DF4             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1228+ 2DF4             >
1228+ 2DF4             >Dict_Ptr        defl    $
1228+ 2DF4             >
1228+ 2DF4             >//              ______________________________________________________________________
1228+ 2DF4             >//              Heap part
1228+ 2DF4             >
1228+ 2DF4             >
1228+ 2DF4             >                org     (Heap_Ptr & $1FFF) + $E000
1228+ E857             >
1228+ E857             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1228+ E857             >Latest_Definition defl  Heap_Ptr
1228+ E857             >
1228+ E857             >                // dummy db directives used to calculate length of namec
1228+ E857 28 2E 22 29 >                db      '(.")'
1228+ E85B             >len_NFA         defl    $ - temp_NFA
1228+ E85B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1228+ E857             >
1228+ E857 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1228+ E858 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1228+ E85C             >                org     $-1                 // alter last byte of Name just above to set
1228+ E85B A9          >                db      {b $} | END_BIT     // msb as name end
1228+ E85C             >
1228+ E85C 4E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1228+ E85E             >Prev_Ptr        defl    Heap_Ptr
1228+ E85E             >
1228+ E85E             >mirror_Ptr      defl    $
1228+ E85E             >
1228+ E85E F6 2D       >                dw      Dict_Ptr + 2        // xt
1228+ E860             >Heap_Ptr        defl    $ - $E000           // save current HP
1228+ E860             >
1228+ E860             >Current_HP      defl  $ - $E000             // used to set HP once!
1228+ E860             >
1228+ E860             >//              ______________________________________________________________________
1228+ E860             >//              Dictionary part
1228+ E860             >
1228+ E860             >                org     Dict_Ptr
1228+ 2DF4             >
1228+ 2DF4 5E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1228+ 2DF6             >
1228+ 2DF6             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1228+ 2DF6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1228+ 2DF9             >
1228+ 2DF9             >
1228+ 2DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
1228+ 2DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
1228+ 2DF9             >
1228+ 2DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1229+ 2DF9 DD 24 98 2B                  dw      R_OP, COUNT             // r count
1230+ 2DFD 88 25 23 25                  dw      DUP, ONE_PLUS           // dup 1+
1231+ 2E01 D2 24 0A 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1231+ 2E05 C7 24
1232+ 2E07 59 2C                        dw      TYPE                    // type
1233+ 2E09 BD 24                        dw      EXIT                    // ;
1234+ 2E0B
1235+ 2E0B              //  ______________________________________________________________________
1236+ 2E0B              //
1237+ 2E0B              // char         -- c
1238+ 2E0B              // get first character from next input word
1239+ 2E0B                              Colon_Def CHAR,  "CHAR", is_normal
1239+ 2E0B             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1239+ 2E0B             >
1239+ 2E0B             >Dict_Ptr        defl    $
1239+ 2E0B             >
1239+ 2E0B             >//              ______________________________________________________________________
1239+ 2E0B             >//              Heap part
1239+ 2E0B             >
1239+ 2E0B             >
1239+ 2E0B             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E860             >
1239+ E860             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E860             >Latest_Definition defl  Heap_Ptr
1239+ E860             >
1239+ E860             >                // dummy db directives used to calculate length of namec
1239+ E860 43 48 41 52 >                db      "CHAR"
1239+ E864             >len_NFA         defl    $ - temp_NFA
1239+ E864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E860             >
1239+ E860 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E861 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1239+ E865             >                org     $-1                 // alter last byte of Name just above to set
1239+ E864 D2          >                db      {b $} | END_BIT     // msb as name end
1239+ E865             >
1239+ E865 57 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E867             >Prev_Ptr        defl    Heap_Ptr
1239+ E867             >
1239+ E867             >mirror_Ptr      defl    $
1239+ E867             >
1239+ E867 0D 2E       >                dw      Dict_Ptr + 2        // xt
1239+ E869             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E869             >
1239+ E869             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E869             >
1239+ E869             >//              ______________________________________________________________________
1239+ E869             >//              Dictionary part
1239+ E869             >
1239+ E869             >                org     Dict_Ptr
1239+ 2E0B             >
1239+ 2E0B 67 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 2E0D             >
1239+ 2E0D             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 2E0D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 2E10             >
1239+ 2E10             >
1239+ 2E10             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 2E10             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 2E10             >
1239+ 2E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 2E10 07 27 AB 2D                  dw      BL, WORD                // bl word
1241+ 2E14 23 25 07 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1242+ 2E18 BD 24                        dw      EXIT                    // ;
1243+ 2E1A
1244+ 2E1A              //  ______________________________________________________________________
1245+ 2E1A              //
1246+ 2E1A              // ,"           --
1247+ 2E1A              // compiles a string terminated by " as a counted string from next input stream
1248+ 2E1A                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1248+ 2E1A             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1248+ 2E1A             >
1248+ 2E1A             >Dict_Ptr        defl    $
1248+ 2E1A             >
1248+ 2E1A             >//              ______________________________________________________________________
1248+ 2E1A             >//              Heap part
1248+ 2E1A             >
1248+ 2E1A             >
1248+ 2E1A             >                org     (Heap_Ptr & $1FFF) + $E000
1248+ E869             >
1248+ E869             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ E869             >Latest_Definition defl  Heap_Ptr
1248+ E869             >
1248+ E869             >                // dummy db directives used to calculate length of namec
1248+ E869 2C 22       >                db      ',"'
1248+ E86B             >len_NFA         defl    $ - temp_NFA
1248+ E86B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ E869             >
1248+ E869 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ E86A 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1248+ E86C             >                org     $-1                 // alter last byte of Name just above to set
1248+ E86B A2          >                db      {b $} | END_BIT     // msb as name end
1248+ E86C             >
1248+ E86C 60 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1248+ E86E             >Prev_Ptr        defl    Heap_Ptr
1248+ E86E             >
1248+ E86E             >mirror_Ptr      defl    $
1248+ E86E             >
1248+ E86E 1C 2E       >                dw      Dict_Ptr + 2        // xt
1248+ E870             >Heap_Ptr        defl    $ - $E000           // save current HP
1248+ E870             >
1248+ E870             >Current_HP      defl  $ - $E000             // used to set HP once!
1248+ E870             >
1248+ E870             >//              ______________________________________________________________________
1248+ E870             >//              Dictionary part
1248+ E870             >
1248+ E870             >                org     Dict_Ptr
1248+ 2E1A             >
1248+ 2E1A 6E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1248+ 2E1C             >
1248+ 2E1C             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 2E1C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1248+ 2E1F             >
1248+ 2E1F             >
1248+ 2E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 2E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 2E1F             >
1248+ 2E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 2E1F 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1250+ 2E23 AB 2D                        dw      WORD                    // word
1251+ 2E25 07 26 23 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1252+ 2E29 14 28                        dw      ALLOT                   // allot
1253+ 2E2B E4 26 2E 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1254+ 2E2F BD 24                        dw      EXIT
1255+ 2E31
1256+ 2E31              //  ______________________________________________________________________
1257+ 2E31              //
1258+ 2E31              // .c           c --
1259+ 2E31              // intermediate general purpose string builder, used by ." and .(
1260+ 2E31                              Colon_Def DOT_C,  ".C", is_immediate
1260+ 2E31             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1260+ 2E31             >
1260+ 2E31             >Dict_Ptr        defl    $
1260+ 2E31             >
1260+ 2E31             >//              ______________________________________________________________________
1260+ 2E31             >//              Heap part
1260+ 2E31             >
1260+ 2E31             >
1260+ 2E31             >                org     (Heap_Ptr & $1FFF) + $E000
1260+ E870             >
1260+ E870             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ E870             >Latest_Definition defl  Heap_Ptr
1260+ E870             >
1260+ E870             >                // dummy db directives used to calculate length of namec
1260+ E870 2E 43       >                db      ".C"
1260+ E872             >len_NFA         defl    $ - temp_NFA
1260+ E872             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ E870             >
1260+ E870 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ E871 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1260+ E873             >                org     $-1                 // alter last byte of Name just above to set
1260+ E872 C3          >                db      {b $} | END_BIT     // msb as name end
1260+ E873             >
1260+ E873 69 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1260+ E875             >Prev_Ptr        defl    Heap_Ptr
1260+ E875             >
1260+ E875             >mirror_Ptr      defl    $
1260+ E875             >
1260+ E875 33 2E       >                dw      Dict_Ptr + 2        // xt
1260+ E877             >Heap_Ptr        defl    $ - $E000           // save current HP
1260+ E877             >
1260+ E877             >Current_HP      defl  $ - $E000             // used to set HP once!
1260+ E877             >
1260+ E877             >//              ______________________________________________________________________
1260+ E877             >//              Dictionary part
1260+ E877             >
1260+ E877             >                org     Dict_Ptr
1260+ 2E31             >
1260+ 2E31 75 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1260+ 2E33             >
1260+ 2E33             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 2E33 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 2E36             >
1260+ 2E36             >
1260+ 2E36             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 2E36             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 2E36             >
1260+ 2E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 2E36 AF 27 F2 25                  dw      STATE, FETCH            // state @
1262+ 2E3A                                                              // if
1263+ 2E3A 8D 20                        dw      ZBRANCH
1264+ 2E3C 12 00                        dw      Dot_C_Else - $
1265+ 2E3E C3 2A F6 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1266+ 2E42 AB 2D 07 26                  dw          WORD, CFETCH        //      word c@
1267+ 2E46 23 25 14 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1268+ 2E4A                                                              // else
1269+ 2E4A 89 20                        dw      BRANCH
1270+ 2E4C 08 00                        dw      Dot_C_Endif - $
1271+ 2E4E              Dot_C_Else:
1272+ 2E4E AB 2D 98 2B                  dw          WORD, COUNT, TYPE   //      word count type
1272+ 2E52 59 2C
1273+ 2E54              Dot_C_Endif:                                    // endif
1274+ 2E54 BD 24                        dw      EXIT                    ;
1275+ 2E56
1276+ 2E56              //  ______________________________________________________________________
1277+ 2E56              //
1278+ 2E56              // ."           c --
1279+ 2E56                              Colon_Def DOT_QUOTE,  '."', is_immediate
1279+ 2E56             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1279+ 2E56             >
1279+ 2E56             >Dict_Ptr        defl    $
1279+ 2E56             >
1279+ 2E56             >//              ______________________________________________________________________
1279+ 2E56             >//              Heap part
1279+ 2E56             >
1279+ 2E56             >
1279+ 2E56             >                org     (Heap_Ptr & $1FFF) + $E000
1279+ E877             >
1279+ E877             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1279+ E877             >Latest_Definition defl  Heap_Ptr
1279+ E877             >
1279+ E877             >                // dummy db directives used to calculate length of namec
1279+ E877 2E 22       >                db      '."'
1279+ E879             >len_NFA         defl    $ - temp_NFA
1279+ E879             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1279+ E877             >
1279+ E877 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1279+ E878 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1279+ E87A             >                org     $-1                 // alter last byte of Name just above to set
1279+ E879 A2          >                db      {b $} | END_BIT     // msb as name end
1279+ E87A             >
1279+ E87A 70 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1279+ E87C             >Prev_Ptr        defl    Heap_Ptr
1279+ E87C             >
1279+ E87C             >mirror_Ptr      defl    $
1279+ E87C             >
1279+ E87C 58 2E       >                dw      Dict_Ptr + 2        // xt
1279+ E87E             >Heap_Ptr        defl    $ - $E000           // save current HP
1279+ E87E             >
1279+ E87E             >Current_HP      defl  $ - $E000             // used to set HP once!
1279+ E87E             >
1279+ E87E             >//              ______________________________________________________________________
1279+ E87E             >//              Dictionary part
1279+ E87E             >
1279+ E87E             >                org     Dict_Ptr
1279+ 2E56             >
1279+ 2E56 7C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1279+ 2E58             >
1279+ 2E58             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1279+ 2E58 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1279+ 2E5B             >
1279+ 2E5B             >
1279+ 2E5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1279+ 2E5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1279+ 2E5B             >
1279+ 2E5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1280+ 2E5B 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1281+ 2E5F 33 2E                        dw      DOT_C                   // [compile] .c
1282+ 2E61 BD 24                        dw      EXIT                    // ; immediate
1283+ 2E63
1284+ 2E63              //  ______________________________________________________________________
1285+ 2E63              //
1286+ 2E63              // .(           c --
1287+ 2E63                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1287+ 2E63             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1287+ 2E63             >
1287+ 2E63             >Dict_Ptr        defl    $
1287+ 2E63             >
1287+ 2E63             >//              ______________________________________________________________________
1287+ 2E63             >//              Heap part
1287+ 2E63             >
1287+ 2E63             >
1287+ 2E63             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E87E             >
1287+ E87E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E87E             >Latest_Definition defl  Heap_Ptr
1287+ E87E             >
1287+ E87E             >                // dummy db directives used to calculate length of namec
1287+ E87E 2E 28       >                db      ".("
1287+ E880             >len_NFA         defl    $ - temp_NFA
1287+ E880             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E87E             >
1287+ E87E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E87F 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1287+ E881             >                org     $-1                 // alter last byte of Name just above to set
1287+ E880 A8          >                db      {b $} | END_BIT     // msb as name end
1287+ E881             >
1287+ E881 77 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E883             >Prev_Ptr        defl    Heap_Ptr
1287+ E883             >
1287+ E883             >mirror_Ptr      defl    $
1287+ E883             >
1287+ E883 65 2E       >                dw      Dict_Ptr + 2        // xt
1287+ E885             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E885             >
1287+ E885             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E885             >
1287+ E885             >//              ______________________________________________________________________
1287+ E885             >//              Dictionary part
1287+ E885             >
1287+ E885             >                org     Dict_Ptr
1287+ 2E63             >
1287+ 2E63 83 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 2E65             >
1287+ 2E65             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 2E65 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 2E68             >
1287+ 2E68             >
1287+ 2E68             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 2E68             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 2E68             >
1287+ 2E68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 2E68 3D 20 29 00                  dw      LIT, ")"                // [char] )
1289+ 2E6C 33 2E                        dw      DOT_C                   // [compile] .c
1290+ 2E6E BD 24                        dw      EXIT                    // ; immediate
1291+ 2E70
1292+ 2E70              //  ______________________________________________________________________
1293+ 2E70              //
1294+ 2E70              // (sgn)        a -- a f
1295+ 2E70              // determines if char in addr a is a sign (+ or -), and in that case increments
1296+ 2E70              // a flag. Returns f as the sign, true for negative, false for positive.
1297+ 2E70              // called by NUMBER and (EXP)
1298+ 2E70                              Colon_Def CSGN,  "(SGN)", is_normal
1298+ 2E70             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1298+ 2E70             >
1298+ 2E70             >Dict_Ptr        defl    $
1298+ 2E70             >
1298+ 2E70             >//              ______________________________________________________________________
1298+ 2E70             >//              Heap part
1298+ 2E70             >
1298+ 2E70             >
1298+ 2E70             >                org     (Heap_Ptr & $1FFF) + $E000
1298+ E885             >
1298+ E885             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ E885             >Latest_Definition defl  Heap_Ptr
1298+ E885             >
1298+ E885             >                // dummy db directives used to calculate length of namec
1298+ E885 28 53 47 4E >                db      "(SGN)"
1298+ E889 29          >
1298+ E88A             >len_NFA         defl    $ - temp_NFA
1298+ E88A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ E885             >
1298+ E885 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ E886 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1298+ E88A 29          >
1298+ E88B             >                org     $-1                 // alter last byte of Name just above to set
1298+ E88A A9          >                db      {b $} | END_BIT     // msb as name end
1298+ E88B             >
1298+ E88B 7E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1298+ E88D             >Prev_Ptr        defl    Heap_Ptr
1298+ E88D             >
1298+ E88D             >mirror_Ptr      defl    $
1298+ E88D             >
1298+ E88D 72 2E       >                dw      Dict_Ptr + 2        // xt
1298+ E88F             >Heap_Ptr        defl    $ - $E000           // save current HP
1298+ E88F             >
1298+ E88F             >Current_HP      defl  $ - $E000             // used to set HP once!
1298+ E88F             >
1298+ E88F             >//              ______________________________________________________________________
1298+ E88F             >//              Dictionary part
1298+ E88F             >
1298+ E88F             >                org     Dict_Ptr
1298+ 2E70             >
1298+ 2E70 8D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1298+ 2E72             >
1298+ 2E72             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 2E72 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1298+ 2E75             >
1298+ 2E75             >
1298+ 2E75             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 2E75             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 2E75             >
1298+ 2E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 2E75 88 25 23 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1299+ 2E79 07 26
1300+ 2E7B 88 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1300+ 2E7F 2D 00 54 28
1301+ 2E83                                                              // if
1302+ 2E83 8D 20                        dw      ZBRANCH
1303+ 2E85 12 00                        dw      CSgn_Else_0 - $
1304+ 2E87 6D 25                        dw          DROP                //      drop
1305+ 2E89 23 25                        dw          ONE_PLUS            //      1+
1306+ 2E8B EB 26 BB 27                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1306+ 2E8F DA 25
1307+ 2E91 EB 26                        dw          ONE                 //      1
1308+ 2E93                                                              // else
1309+ 2E93 89 20                        dw      BRANCH
1310+ 2E95 16 00                        dw      CSgn_Endif_0 - $
1311+ 2E97              CSgn_Else_0:
1312+ 2E97 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1312+ 2E9B 54 28
1313+ 2E9D                                                              //      if
1314+ 2E9D 8D 20                        dw          ZBRANCH
1315+ 2E9F 0A 00                        dw          CSgn_Endif_1 - $
1316+ 2EA1 23 25                        dw              ONE_PLUS        //          1+
1317+ 2EA3 EB 26 BB 27                  dw              ONE, DPL        //          1 dpl
1318+ 2EA7 DA 25                        dw              PLUSSTORE       //          +!
1319+ 2EA9              CSgn_Endif_1                                    //      endif
1320+ 2EA9 E4 26                        dw          ZERO                //      0
1321+ 2EAB              CSgn_Endif_0:                                   // endif
1322+ 2EAB BD 24                        dw      EXIT
1323+ 2EAD
1324+ 2EAD              //  ______________________________________________________________________
1325+ 2EAD              //
1326+ 2EAD              // (number)     d a -- d1 a1
1327+ 2EAD              // using the current BASE parse characters stored in address a
1328+ 2EAD              // accumulating a double precision integer d
1329+ 2EAD              // the process stops at the first not-convertible character
1330+ 2EAD              // A double-number is kept in CPU registers as HLDE.
1331+ 2EAD              // On the stack a double number is treated as two single numbers
1332+ 2EAD              // where HL is on the top of the stack and DE is the second from top,
1333+ 2EAD              // so in the stack memory it appears as LHED.
1334+ 2EAD              // Instead, in 2VARIABLE a double number is stored as EDLH.
1335+ 2EAD                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1335+ 2EAD             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1335+ 2EAD             >
1335+ 2EAD             >Dict_Ptr        defl    $
1335+ 2EAD             >
1335+ 2EAD             >//              ______________________________________________________________________
1335+ 2EAD             >//              Heap part
1335+ 2EAD             >
1335+ 2EAD             >
1335+ 2EAD             >                org     (Heap_Ptr & $1FFF) + $E000
1335+ E88F             >
1335+ E88F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1335+ E88F             >Latest_Definition defl  Heap_Ptr
1335+ E88F             >
1335+ E88F             >                // dummy db directives used to calculate length of namec
1335+ E88F 28 4E 55 4D >                db      "(NUMBER)"
1335+ E893 42 45 52 29 >
1335+ E897             >len_NFA         defl    $ - temp_NFA
1335+ E897             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1335+ E88F             >
1335+ E88F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1335+ E890 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1335+ E894 42 45 52 29 >
1335+ E898             >                org     $-1                 // alter last byte of Name just above to set
1335+ E897 A9          >                db      {b $} | END_BIT     // msb as name end
1335+ E898             >
1335+ E898 85 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1335+ E89A             >Prev_Ptr        defl    Heap_Ptr
1335+ E89A             >
1335+ E89A             >mirror_Ptr      defl    $
1335+ E89A             >
1335+ E89A AF 2E       >                dw      Dict_Ptr + 2        // xt
1335+ E89C             >Heap_Ptr        defl    $ - $E000           // save current HP
1335+ E89C             >
1335+ E89C             >Current_HP      defl  $ - $E000             // used to set HP once!
1335+ E89C             >
1335+ E89C             >//              ______________________________________________________________________
1335+ E89C             >//              Dictionary part
1335+ E89C             >
1335+ E89C             >                org     Dict_Ptr
1335+ 2EAD             >
1335+ 2EAD 9A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1335+ 2EAF             >
1335+ 2EAF             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1335+ 2EAF CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1335+ 2EB2             >
1335+ 2EB2             >
1335+ 2EB2             >                endif           ; ok        // for other definitions it "points" the correct handler
1335+ 2EB2             >                // Use of "; ok" to suppress "warning[fwdref]"
1335+ 2EB2             >
1335+ 2EB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1336+ 2EB2                                                              // begin
1337+ 2EB2              CNumber_Begin:
1338+ 2EB2 23 25                        dw          ONE_PLUS            //      1+
1339+ 2EB4 88 25 C7 24                  dw          DUP, TO_R           //      dup >r
1340+ 2EB8 07 26                        dw          CFETCH              //      @
1341+ 2EBA B5 27 F2 25                  dw          BASE, FETCH         //      base @
1342+ 2EBE DF 20                        dw          DIGIT               //      digit
1343+ 2EC0                                                              // while
1344+ 2EC0 8D 20                        dw      ZBRANCH
1345+ 2EC2 2C 00                        dw      CNumber_While_end - $
1346+ 2EC4 81 25                        dw          SWAP                //      swap
1347+ 2EC6 B5 27 F2 25                  dw          BASE, FETCH         //      base @
1348+ 2ECA 25 24                        dw          UM_MUL              //      um*
1349+ 2ECC 6D 25 8F 25                  dw          DROP, ROT           //      drop rot
1350+ 2ED0 B5 27 F2 25                  dw          BASE, FETCH         //      base @
1351+ 2ED4 25 24                        dw          UM_MUL              //      um*
1352+ 2ED6 14 25                        dw          DPLUS               //      d+
1353+ 2ED8 BB 27 F2 25                  dw          DPL, FETCH          //      dpl @
1354+ 2EDC 23 25                        dw          ONE_PLUS            //      1+
1355+ 2EDE                                                              //      if
1356+ 2EDE 8D 20                        dw          ZBRANCH
1357+ 2EE0 08 00                        dw          CNumber_Endif - $
1358+ 2EE2 EB 26 BB 27                  dw              ONE, DPL        //          1 dpl
1359+ 2EE6 DA 25                        dw              PLUSSTORE       //          +!
1360+ 2EE8              CNumber_Endif:                                  //      endif
1361+ 2EE8 D2 24                        dw             R_TO             //      r>  ( balance rp )
1362+ 2EEA 89 20                        dw      BRANCH
1363+ 2EEC C6 FF                        dw      CNumber_Begin - $
1364+ 2EEE              CNumber_While_end:                              // repeat
1365+ 2EEE D2 24                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1366+ 2EF0 BD 24                        dw      EXIT                    // ;
1367+ 2EF2
1368+ 2EF2              //  ______________________________________________________________________
1369+ 2EF2              //
1370+ 2EF2              // (prefix)
1371+ 2EF2                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1371+ 2EF2             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1371+ 2EF2             >
1371+ 2EF2             >Dict_Ptr        defl    $
1371+ 2EF2             >
1371+ 2EF2             >//              ______________________________________________________________________
1371+ 2EF2             >//              Heap part
1371+ 2EF2             >
1371+ 2EF2             >
1371+ 2EF2             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E89C             >
1371+ E89C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E89C             >Latest_Definition defl  Heap_Ptr
1371+ E89C             >
1371+ E89C             >                // dummy db directives used to calculate length of namec
1371+ E89C 28 50 52 45 >                db      "(PREFIX)"
1371+ E8A0 46 49 58 29 >
1371+ E8A4             >len_NFA         defl    $ - temp_NFA
1371+ E8A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E89C             >
1371+ E89C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E89D 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1371+ E8A1 46 49 58 29 >
1371+ E8A5             >                org     $-1                 // alter last byte of Name just above to set
1371+ E8A4 A9          >                db      {b $} | END_BIT     // msb as name end
1371+ E8A5             >
1371+ E8A5 8F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E8A7             >Prev_Ptr        defl    Heap_Ptr
1371+ E8A7             >
1371+ E8A7             >mirror_Ptr      defl    $
1371+ E8A7             >
1371+ E8A7 F4 2E       >                dw      Dict_Ptr + 2        // xt
1371+ E8A9             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E8A9             >
1371+ E8A9             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E8A9             >
1371+ E8A9             >//              ______________________________________________________________________
1371+ E8A9             >//              Dictionary part
1371+ E8A9             >
1371+ E8A9             >                org     Dict_Ptr
1371+ 2EF2             >
1371+ 2EF2 A7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 2EF4             >
1371+ 2EF4             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 2EF4 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 2EF7             >
1371+ 2EF7             >
1371+ 2EF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 2EF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 2EF7             >
1371+ 2EF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 2EF7 88 25 23 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1372+ 2EFB 07 26
1373+ 2EFD 88 25 C7 24                  dw      DUP, TO_R               // dup >r
1374+ 2F01 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1374+ 2F05 54 28
1375+ 2F07                                                              // if
1376+ 2F07 8D 20                        dw      ZBRANCH
1377+ 2F09 06 00                        dw      CPrefix_Endif_0 - $
1378+ 2F0B 23 25                        dw          ONE_PLUS            //      1+
1379+ 2F0D 1B 2B                        dw          HEX
1380+ 2F0F              CPrefix_Endif_0:                                // endif
1381+ 2F0F DD 24                        dw      R_OP                    // r@
1382+ 2F11 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1382+ 2F15 54 28
1383+ 2F17                                                              // if
1384+ 2F17 8D 20                        dw      ZBRANCH
1385+ 2F19 0A 00                        dw      CPrefix_Endif_1 - $
1386+ 2F1B 23 25                        dw          ONE_PLUS            //      1+
1387+ 2F1D F2 26                        dw          TWO
1388+ 2F1F B5 27 FC 25                  dw          BASE, STORE         //      2 base !
1389+ 2F23              CPrefix_Endif_1:                                // endif
1390+ 2F23 D2 24                        dw      R_TO                    // r>
1391+ 2F25 3D 20 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1391+ 2F29 54 28
1392+ 2F2B                                                              // if
1393+ 2F2B 8D 20                        dw      ZBRANCH
1394+ 2F2D 06 00                        dw      CPrefix_Endif_2 - $
1395+ 2F2F 23 25                        dw          ONE_PLUS            //      1+
1396+ 2F31 2A 2B                        dw          DECIMAL
1397+ 2F33              CPrefix_Endif_2:                                // endif
1398+ 2F33 BD 24                        dw      EXIT
1399+ 2F35
1400+ 2F35              //  ______________________________________________________________________
1401+ 2F35
1402+ 2F35              PDOM_PTR:
1403+ 2F35              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1404+ 2F35 2C 2F 2D 3A                  db ',/-:'
1405+ 2F39              PCDM_PTR:
1406+ 2F39              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1407+ 2F39 2E 2E 2E 2E                  db '....'
1408+ 2F3D
1409+ 2F3D              //  ______________________________________________________________________
1410+ 2F3D              //
1411+ 2F3D              // number       a -- d
1412+ 2F3D                              Colon_Def NUMBER,  "NUMBER", is_normal
1412+ 2F3D             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1412+ 2F3D             >
1412+ 2F3D             >Dict_Ptr        defl    $
1412+ 2F3D             >
1412+ 2F3D             >//              ______________________________________________________________________
1412+ 2F3D             >//              Heap part
1412+ 2F3D             >
1412+ 2F3D             >
1412+ 2F3D             >                org     (Heap_Ptr & $1FFF) + $E000
1412+ E8A9             >
1412+ E8A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1412+ E8A9             >Latest_Definition defl  Heap_Ptr
1412+ E8A9             >
1412+ E8A9             >                // dummy db directives used to calculate length of namec
1412+ E8A9 4E 55 4D 42 >                db      "NUMBER"
1412+ E8AD 45 52       >
1412+ E8AF             >len_NFA         defl    $ - temp_NFA
1412+ E8AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1412+ E8A9             >
1412+ E8A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1412+ E8AA 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1412+ E8AE 45 52       >
1412+ E8B0             >                org     $-1                 // alter last byte of Name just above to set
1412+ E8AF D2          >                db      {b $} | END_BIT     // msb as name end
1412+ E8B0             >
1412+ E8B0 9C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1412+ E8B2             >Prev_Ptr        defl    Heap_Ptr
1412+ E8B2             >
1412+ E8B2             >mirror_Ptr      defl    $
1412+ E8B2             >
1412+ E8B2 3F 2F       >                dw      Dict_Ptr + 2        // xt
1412+ E8B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1412+ E8B4             >
1412+ E8B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1412+ E8B4             >
1412+ E8B4             >//              ______________________________________________________________________
1412+ E8B4             >//              Dictionary part
1412+ E8B4             >
1412+ E8B4             >                org     Dict_Ptr
1412+ 2F3D             >
1412+ 2F3D B2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1412+ 2F3F             >
1412+ 2F3F             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1412+ 2F3F CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1412+ 2F42             >
1412+ 2F42             >
1412+ 2F42             >                endif           ; ok        // for other definitions it "points" the correct handler
1412+ 2F42             >                // Use of "; ok" to suppress "warning[fwdref]"
1412+ 2F42             >
1412+ 2F42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1413+ 2F42 E4 26 E4 26                  dw      ZERO, ZERO              // 0 0
1414+ 2F46 8F 25                        dw      ROT                     // rot
1415+ 2F48
1416+ 2F48 B5 27 F2 25                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1416+ 2F4C C7 24
1417+ 2F4E F4 2E                        dw      CPREFIX                 // (prefix)   // ***
1418+ 2F50
1419+ 2F50 72 2E C7 24                  dw      CSGN, TO_R              // (sgn) >r
1420+ 2F54
1421+ 2F54 00 27 BB 27                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1421+ 2F58 FC 25
1422+ 2F5A AF 2E                        dw      CNUMBER                 // (number)
1423+ 2F5C              Number_Begin:                                   // begin
1424+ 2F5C 88 25 07 26                  dw        DUP, CFETCH             // dup c@
1425+ 2F60 C7 24                        dw        TO_R                    // >r
1426+ 2F62                          //  dw        PCDM, PDOM              //  pcdm pdom
1427+ 2F62 3D 20 39 2F                  dw        LIT, PCDM_PTR           //
1428+ 2F66 3D 20 35 2F                  dw        LIT, PDOM_PTR           //
1429+ 2F6A 3D 20 04 00                  dw        LIT, 4                  //  4
1430+ 2F6E D2 24                        dw        R_TO                    // r>
1431+ 2F70 E8 21                        dw        C_MAP                   // (map)
1432+ 2F72 E4 26 81 25                  dw        ZERO, SWAP              // 0 swap
1433+ 2F76 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1433+ 2F7A 54 28
1434+ 2F7C
1435+ 2F7C 8D 20                        dw        ZBRANCH                 // if
1436+ 2F7E 0A 00                        dw        Number_Endif_1 - $
1437+ 2F80 E4 26 BB 27                  dw          ZERO, DPL, STORE        //      0 dpl !
1437+ 2F84 FC 25
1438+ 2F86 23 25                        dw          ONE_PLUS                //      1+
1439+ 2F88              Number_Endif_1:                                   // endif
1440+ 2F88
1441+ 2F88 8D 20                        dw      ZBRANCH                // while
1442+ 2F8A 08 00                        dw      Number_While_end - $
1443+ 2F8C AF 2E                        dw        CNUMBER                 // (number)
1444+ 2F8E 89 20                        dw      BRANCH
1445+ 2F90 CC FF                        dw      Number_Begin - $
1446+ 2F92              Number_While_end:                               // repeat
1447+ 2F92
1448+ 2F92 07 26 07 27                  dw      CFETCH, BL              // c@ bl
1449+ 2F96 48 28 E4 26                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1449+ 2F9A 53 2A
1450+ 2F9C D2 24                        dw      R_TO                    // r>
1451+ 2F9E                                                              // if
1452+ 2F9E 8D 20                        dw      ZBRANCH
1453+ 2FA0 04 00                        dw      Number_Endif_2 - $
1454+ 2FA2 57 25                        dw          DMINUS              //      dminus
1455+ 2FA4              Number_Endif_2:                                 // endif
1456+ 2FA4 D2 24 B5 27                  dw      R_TO, BASE, STORE       // r> base !  // ***
1456+ 2FA8 FC 25
1457+ 2FAA BD 24                        dw      EXIT                    // ;
1458+ 2FAC
1459+ 2FAC              //  ______________________________________________________________________
1460+ 2FAC              //
1461+ 2FAC              // twofind      a -- d
1462+ 2FAC                              Colon_Def TWOFIND,  "2FIND", is_normal
1462+ 2FAC             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1462+ 2FAC             >
1462+ 2FAC             >Dict_Ptr        defl    $
1462+ 2FAC             >
1462+ 2FAC             >//              ______________________________________________________________________
1462+ 2FAC             >//              Heap part
1462+ 2FAC             >
1462+ 2FAC             >
1462+ 2FAC             >                org     (Heap_Ptr & $1FFF) + $E000
1462+ E8B4             >
1462+ E8B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1462+ E8B4             >Latest_Definition defl  Heap_Ptr
1462+ E8B4             >
1462+ E8B4             >                // dummy db directives used to calculate length of namec
1462+ E8B4 32 46 49 4E >                db      "2FIND"
1462+ E8B8 44          >
1462+ E8B9             >len_NFA         defl    $ - temp_NFA
1462+ E8B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1462+ E8B4             >
1462+ E8B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1462+ E8B5 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1462+ E8B9 44          >
1462+ E8BA             >                org     $-1                 // alter last byte of Name just above to set
1462+ E8B9 C4          >                db      {b $} | END_BIT     // msb as name end
1462+ E8BA             >
1462+ E8BA A9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1462+ E8BC             >Prev_Ptr        defl    Heap_Ptr
1462+ E8BC             >
1462+ E8BC             >mirror_Ptr      defl    $
1462+ E8BC             >
1462+ E8BC AE 2F       >                dw      Dict_Ptr + 2        // xt
1462+ E8BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1462+ E8BE             >
1462+ E8BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1462+ E8BE             >
1462+ E8BE             >//              ______________________________________________________________________
1462+ E8BE             >//              Dictionary part
1462+ E8BE             >
1462+ E8BE             >                org     Dict_Ptr
1462+ 2FAC             >
1462+ 2FAC BC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1462+ 2FAE             >
1462+ 2FAE             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1462+ 2FAE CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1462+ 2FB1             >
1462+ 2FB1             >
1462+ 2FB1             >                endif           ; ok        // for other definitions it "points" the correct handler
1462+ 2FB1             >                // Use of "; ok" to suppress "warning[fwdref]"
1462+ 2FB1             >
1462+ 2FB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1463+ 2FB1 C7 24 DD 24                  dw      TO_R, R_OP              // >r r@
1464+ 2FB5 A3 27 F2 25                  dw      CONTEXT, FETCH, FETCH   // context @ @
1464+ 2FB9 F2 25
1465+ 2FBB 4C 21                        dw      C_FIND                  // (find)
1466+ 2FBD AB 28                        dw      QDUP                    // ?dup
1467+ 2FBF E2 24                        dw      ZEQUAL                  // 0=
1468+ 2FC1                                                              // if
1469+ 2FC1 8D 20                        dw      ZBRANCH
1470+ 2FC3 22 00                        dw      LFind_Endif - $
1471+ 2FC5 DD 24                        dw          R_OP                //      r@
1472+ 2FC7                              // dw          LATEST               //      latest
1473+ 2FC7 A9 27 F2 25                  dw          CURRENT, FETCH, FETCH   // context @ @
1473+ 2FCB F2 25
1474+ 2FCD 4C 21                        dw          C_FIND              //      (find)
1475+ 2FCF
1476+ 2FCF AB 28                            dw      QDUP                    // ?dup
1477+ 2FD1 E2 24                            dw      ZEQUAL                  // 0=
1478+ 2FD3                                                                  // if
1479+ 2FD3 8D 20                            dw      ZBRANCH
1480+ 2FD5 10 00                            dw      LFind_Endif2 - $
1481+ 2FD7 DD 24                            dw          R_OP                //      r@
1482+ 2FD9 3D 20 29 32                      dw          LIT, FORTH, TO_BODY
1482+ 2FDD D2 29
1483+ 2FDF 39 25                            dw          CELL_PLUS //, CELL_PLUS
1484+ 2FE1 F2 25                            dw          FETCH
1485+ 2FE3 4C 21                            dw          C_FIND              //      (find)
1486+ 2FE5              LFind_Endif2:                                    // endif
1487+ 2FE5
1488+ 2FE5
1489+ 2FE5              LFind_Endif:                                    // endif
1490+ 2FE5 D2 24 6D 25                  dw      R_TO, DROP              // r> drop
1491+ 2FE9 BD 24                        dw      EXIT                    // ;
1492+ 2FEB
1493+ 2FEB              //  ______________________________________________________________________
1494+ 2FEB              //
1495+ 2FEB              // -find        a -- d
1496+ 2FEB                              Colon_Def LFIND,  "-FIND", is_normal
1496+ 2FEB             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1496+ 2FEB             >
1496+ 2FEB             >Dict_Ptr        defl    $
1496+ 2FEB             >
1496+ 2FEB             >//              ______________________________________________________________________
1496+ 2FEB             >//              Heap part
1496+ 2FEB             >
1496+ 2FEB             >
1496+ 2FEB             >                org     (Heap_Ptr & $1FFF) + $E000
1496+ E8BE             >
1496+ E8BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ E8BE             >Latest_Definition defl  Heap_Ptr
1496+ E8BE             >
1496+ E8BE             >                // dummy db directives used to calculate length of namec
1496+ E8BE 2D 46 49 4E >                db      "-FIND"
1496+ E8C2 44          >
1496+ E8C3             >len_NFA         defl    $ - temp_NFA
1496+ E8C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ E8BE             >
1496+ E8BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ E8BF 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1496+ E8C3 44          >
1496+ E8C4             >                org     $-1                 // alter last byte of Name just above to set
1496+ E8C3 C4          >                db      {b $} | END_BIT     // msb as name end
1496+ E8C4             >
1496+ E8C4 B4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1496+ E8C6             >Prev_Ptr        defl    Heap_Ptr
1496+ E8C6             >
1496+ E8C6             >mirror_Ptr      defl    $
1496+ E8C6             >
1496+ E8C6 ED 2F       >                dw      Dict_Ptr + 2        // xt
1496+ E8C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1496+ E8C8             >
1496+ E8C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1496+ E8C8             >
1496+ E8C8             >//              ______________________________________________________________________
1496+ E8C8             >//              Dictionary part
1496+ E8C8             >
1496+ E8C8             >                org     Dict_Ptr
1496+ 2FEB             >
1496+ 2FEB C6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1496+ 2FED             >
1496+ 2FED             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 2FED CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1496+ 2FF0             >
1496+ 2FF0             >
1496+ 2FF0             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 2FF0             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 2FF0             >
1496+ 2FF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 2FF0 07 27 AB 2D                  dw      BL, WORD                // bl word
1498+ 2FF4 AE 2F                        dw      TWOFIND                 // 2find
1499+ 2FF6 BD 24                        dw      EXIT                    // ;
1500+ 2FF8
1501+ 2FF8              //  ______________________________________________________________________
1502+ 2FF8              //
1503+ 2FF8              // (abort)      --
1504+ 2FF8                              Colon_Def CABORT,  "(ABORT)", is_normal
1504+ 2FF8             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1504+ 2FF8             >
1504+ 2FF8             >Dict_Ptr        defl    $
1504+ 2FF8             >
1504+ 2FF8             >//              ______________________________________________________________________
1504+ 2FF8             >//              Heap part
1504+ 2FF8             >
1504+ 2FF8             >
1504+ 2FF8             >                org     (Heap_Ptr & $1FFF) + $E000
1504+ E8C8             >
1504+ E8C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1504+ E8C8             >Latest_Definition defl  Heap_Ptr
1504+ E8C8             >
1504+ E8C8             >                // dummy db directives used to calculate length of namec
1504+ E8C8 28 41 42 4F >                db      "(ABORT)"
1504+ E8CC 52 54 29    >
1504+ E8CF             >len_NFA         defl    $ - temp_NFA
1504+ E8CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1504+ E8C8             >
1504+ E8C8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1504+ E8C9 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1504+ E8CD 52 54 29    >
1504+ E8D0             >                org     $-1                 // alter last byte of Name just above to set
1504+ E8CF A9          >                db      {b $} | END_BIT     // msb as name end
1504+ E8D0             >
1504+ E8D0 BE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1504+ E8D2             >Prev_Ptr        defl    Heap_Ptr
1504+ E8D2             >
1504+ E8D2             >mirror_Ptr      defl    $
1504+ E8D2             >
1504+ E8D2 FA 2F       >                dw      Dict_Ptr + 2        // xt
1504+ E8D4             >Heap_Ptr        defl    $ - $E000           // save current HP
1504+ E8D4             >
1504+ E8D4             >Current_HP      defl  $ - $E000             // used to set HP once!
1504+ E8D4             >
1504+ E8D4             >//              ______________________________________________________________________
1504+ E8D4             >//              Dictionary part
1504+ E8D4             >
1504+ E8D4             >                org     Dict_Ptr
1504+ 2FF8             >
1504+ 2FF8 D2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1504+ 2FFA             >
1504+ 2FFA             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1504+ 2FFA CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1504+ 2FFD             >
1504+ 2FFD             >
1504+ 2FFD             >                endif           ; ok        // for other definitions it "points" the correct handler
1504+ 2FFD             >                // Use of "; ok" to suppress "warning[fwdref]"
1504+ 2FFD             >
1504+ 2FFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1505+ 2FFD 8E 32                        dw      ABORT                   // abort
1506+ 2FFF BD 24                        dw      EXIT                    // ;
1507+ 3001
1508+ 3001              //  ______________________________________________________________________
1509+ 3001              //
1510+ 3001              // error        n --
1511+ 3001              // raise an error
1512+ 3001              // if WARNING is 0, prints "MSG#n".
1513+ 3001              // if WARNING is 1, prints line n of screen 4.
1514+ 3001              // if WARNING is -1 does (ABORT) that normally does ABORT
1515+ 3001              // value can be negative or beyond block 4.
1516+ 3001                              Colon_Def ERROR,  "ERROR", is_normal
1516+ 3001             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1516+ 3001             >
1516+ 3001             >Dict_Ptr        defl    $
1516+ 3001             >
1516+ 3001             >//              ______________________________________________________________________
1516+ 3001             >//              Heap part
1516+ 3001             >
1516+ 3001             >
1516+ 3001             >                org     (Heap_Ptr & $1FFF) + $E000
1516+ E8D4             >
1516+ E8D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1516+ E8D4             >Latest_Definition defl  Heap_Ptr
1516+ E8D4             >
1516+ E8D4             >                // dummy db directives used to calculate length of namec
1516+ E8D4 45 52 52 4F >                db      "ERROR"
1516+ E8D8 52          >
1516+ E8D9             >len_NFA         defl    $ - temp_NFA
1516+ E8D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1516+ E8D4             >
1516+ E8D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1516+ E8D5 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1516+ E8D9 52          >
1516+ E8DA             >                org     $-1                 // alter last byte of Name just above to set
1516+ E8D9 D2          >                db      {b $} | END_BIT     // msb as name end
1516+ E8DA             >
1516+ E8DA C8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1516+ E8DC             >Prev_Ptr        defl    Heap_Ptr
1516+ E8DC             >
1516+ E8DC             >mirror_Ptr      defl    $
1516+ E8DC             >
1516+ E8DC 03 30       >                dw      Dict_Ptr + 2        // xt
1516+ E8DE             >Heap_Ptr        defl    $ - $E000           // save current HP
1516+ E8DE             >
1516+ E8DE             >Current_HP      defl  $ - $E000             // used to set HP once!
1516+ E8DE             >
1516+ E8DE             >//              ______________________________________________________________________
1516+ E8DE             >//              Dictionary part
1516+ E8DE             >
1516+ E8DE             >                org     Dict_Ptr
1516+ 3001             >
1516+ 3001 DC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1516+ 3003             >
1516+ 3003             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1516+ 3003 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1516+ 3006             >
1516+ 3006             >
1516+ 3006             >                endif           ; ok        // for other definitions it "points" the correct handler
1516+ 3006             >                // Use of "; ok" to suppress "warning[fwdref]"
1516+ 3006             >
1516+ 3006             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1517+ 3006 55 27 F2 25                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1517+ 300A F3 24
1518+ 300C                                                              // if
1519+ 300C 8D 20                        dw      ZBRANCH
1520+ 300E 04 00                        dw      Error_Endif_1 - $
1521+ 3010 FA 2F                        dw          CABORT              //      (abort)
1522+ 3012              Error_Endif_1:                                  // endif
1523+ 3012 09 28 98 2B                  dw      HERE, COUNT, TYPE       // here count type
1523+ 3016 59 2C
1524+ 3018 F6 2D                        dw      C_DOT_QUOTE             // .( ? )
1525+ 301A 02 3F 20                     db      2, "? "
1526+ 301D B6 35                        dw      MESSAGE                 // message  ( forward )
1527+ 301F 3D 27 F2 25                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1527+ 3023 AD 24
1528+ 3025 85 27 F2 25                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1528+ 3029 AB 28
1529+ 302B                                                              // if
1530+ 302B 8D 20                        dw      ZBRANCH
1531+ 302D 08 00                        dw      Error_Endif_2 - $
1532+ 302F 8B 27 F2 25                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1532+ 3033 81 25
1533+ 3035              Error_Endif_2:                                  // endif
1534+ 3035 52 32                        dw      QUIT                    // quit ( forward )
1535+ 3037 BD 24                        dw      EXIT                    // ;
1536+ 3039              //  ______________________________________________________________________
1537+ 3039              //
1538+ 3039              // id.          nfa --
1539+ 3039                              Colon_Def ID_DOT,  "ID.", is_normal
1539+ 3039             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1539+ 3039             >
1539+ 3039             >Dict_Ptr        defl    $
1539+ 3039             >
1539+ 3039             >//              ______________________________________________________________________
1539+ 3039             >//              Heap part
1539+ 3039             >
1539+ 3039             >
1539+ 3039             >                org     (Heap_Ptr & $1FFF) + $E000
1539+ E8DE             >
1539+ E8DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ E8DE             >Latest_Definition defl  Heap_Ptr
1539+ E8DE             >
1539+ E8DE             >                // dummy db directives used to calculate length of namec
1539+ E8DE 49 44 2E    >                db      "ID."
1539+ E8E1             >len_NFA         defl    $ - temp_NFA
1539+ E8E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ E8DE             >
1539+ E8DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ E8DF 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1539+ E8E2             >                org     $-1                 // alter last byte of Name just above to set
1539+ E8E1 AE          >                db      {b $} | END_BIT     // msb as name end
1539+ E8E2             >
1539+ E8E2 D4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1539+ E8E4             >Prev_Ptr        defl    Heap_Ptr
1539+ E8E4             >
1539+ E8E4             >mirror_Ptr      defl    $
1539+ E8E4             >
1539+ E8E4 3B 30       >                dw      Dict_Ptr + 2        // xt
1539+ E8E6             >Heap_Ptr        defl    $ - $E000           // save current HP
1539+ E8E6             >
1539+ E8E6             >Current_HP      defl  $ - $E000             // used to set HP once!
1539+ E8E6             >
1539+ E8E6             >//              ______________________________________________________________________
1539+ E8E6             >//              Dictionary part
1539+ E8E6             >
1539+ E8E6             >                org     Dict_Ptr
1539+ 3039             >
1539+ 3039 E4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1539+ 303B             >
1539+ 303B             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 303B CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1539+ 303E             >
1539+ 303E             >
1539+ 303E             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 303E             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 303E             >
1539+ 303E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 303E 77 29                        dw      QTOHEAP
1541+ 3040 88 25 EB 26                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1541+ 3044 F3 28
1542+ 3046 23 25                        dw      ONE_PLUS                // 1+
1543+ 3048 64 25 48 28                  dw      OVER, SUBTRACT          // over -
1544+ 304C 88 25 C7 24                  dw      DUP, TO_R               // >r
1545+ 3050 9C 2D 81 25                  dw      PAD, SWAP               // pad swap
1546+ 3054 02 24                        dw      CMOVE                   // cmove
1547+ 3056 9C 2D 23 25                  dw      PAD, ONE_PLUS           // pad 1+
1548+ 305A D2 24 2A 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1549+ 305E 59 2C DB 28                  dw      TYPE, SPACE             // type
1550+ 3062 BD 24                        dw      EXIT                    // ;
1551+ 3064
1552+ 3064              //  ______________________________________________________________________
1553+ 3064              //
1554+ 3064              // code         -- cccc
1555+ 3064                              Colon_Def CODE,  "CODE", is_normal
1555+ 3064             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1555+ 3064             >
1555+ 3064             >Dict_Ptr        defl    $
1555+ 3064             >
1555+ 3064             >//              ______________________________________________________________________
1555+ 3064             >//              Heap part
1555+ 3064             >
1555+ 3064             >
1555+ 3064             >                org     (Heap_Ptr & $1FFF) + $E000
1555+ E8E6             >
1555+ E8E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1555+ E8E6             >Latest_Definition defl  Heap_Ptr
1555+ E8E6             >
1555+ E8E6             >                // dummy db directives used to calculate length of namec
1555+ E8E6 43 4F 44 45 >                db      "CODE"
1555+ E8EA             >len_NFA         defl    $ - temp_NFA
1555+ E8EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1555+ E8E6             >
1555+ E8E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1555+ E8E7 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1555+ E8EB             >                org     $-1                 // alter last byte of Name just above to set
1555+ E8EA C5          >                db      {b $} | END_BIT     // msb as name end
1555+ E8EB             >
1555+ E8EB DE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1555+ E8ED             >Prev_Ptr        defl    Heap_Ptr
1555+ E8ED             >
1555+ E8ED             >mirror_Ptr      defl    $
1555+ E8ED             >
1555+ E8ED 66 30       >                dw      Dict_Ptr + 2        // xt
1555+ E8EF             >Heap_Ptr        defl    $ - $E000           // save current HP
1555+ E8EF             >
1555+ E8EF             >Current_HP      defl  $ - $E000             // used to set HP once!
1555+ E8EF             >
1555+ E8EF             >//              ______________________________________________________________________
1555+ E8EF             >//              Dictionary part
1555+ E8EF             >
1555+ E8EF             >                org     Dict_Ptr
1555+ 3064             >
1555+ 3064 ED 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1555+ 3066             >
1555+ 3066             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1555+ 3066 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1555+ 3069             >
1555+ 3069             >
1555+ 3069             >                endif           ; ok        // for other definitions it "points" the correct handler
1555+ 3069             >                // Use of "; ok" to suppress "warning[fwdref]"
1555+ 3069             >
1555+ 3069             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1556+ 3069 ED 2F                        dw      LFIND                   // -find
1557+ 306B                                                              // if
1558+ 306B 8D 20                        dw      ZBRANCH
1559+ 306D 10 00                        dw      Code_Endif - $
1560+ 306F 6D 25                        dw          DROP                //      drop
1561+ 3071 DD 29 3B 30                  dw          TO_NAME, ID_DOT     //      >name id.
1562+ 3075 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1562+ 3079 B6 35
1563+ 307B DB 28                        dw          SPACE               //      space
1564+ 307D              Code_Endif:                                     // endif
1565+ 307D 09 28                        dw      HERE                    // here
1566+ 307F                                                              // ( ---- here begins NFA ---- )
1567+ 307F 88 25 07 26                  dw      DUP, CFETCH             // dup c@
1568+ 3083 4F 27 F2 25                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1568+ 3087 85 28
1569+ 3089 23 25                        dw      ONE_PLUS                // 1+
1570+ 308B 88 25 14 28                  dw      DUP, ALLOT              // dup allot
1571+ 308F 39 25 39 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1572+ 3093 C7 24                        dw      TO_R                    // >r
1573+ 3095 88 25                        dw      DUP                     // dup
1574+ 3097 3D 20                        dw      LIT
1575+ 3099 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1576+ 309B E9 25                        dw      TOGGLE                  // toggle
1577+ 309D 09 28 2A 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1578+ 30A1 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1578+ 30A5 E9 25
1579+ 30A7                                                              // ( ---- here is LFA ---- )
1580+ 30A7 A9 27 F2 25                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1580+ 30AB F2 25
1581+ 30AD 1F 28                        dw      COMMA
1582+ 30AF 88 25 39 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1582+ 30B3 1F 28
1583+ 30B5 88 29                        dw      HP_FETCH                // hp@
1584+ 30B7 A9 27 F2 25                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1584+ 30BB FC 25
1585+ 30BD 88 29 59 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1586+ 30C1 DD 24 02 24                  dw      R_OP, CMOVE
1587+ 30C5 DD 24 4A 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1587+ 30C9 14 28
1588+ 30CB D2 24 79 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1588+ 30CF DA 25
1589+ 30D1 88 29 3D 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1590+ 30D5 1F 28                        dw      COMMA
1591+ 30D7 E4 26 9A 29                  dw      ZERO, SKIP_HP_PAGE
1592+ 30DB                                                              // ( ---- here is LFA ---- )
1593+ 30DB BD 24                        dw      EXIT                    // ;
1594+ 30DD
1595+ 30DD              //  ______________________________________________________________________
1596+ 30DD              //
1597+ 30DD              // create       -- cccc     ( compile time )
1598+ 30DD              //              -- a        ( run time )
1599+ 30DD                              Colon_Def CREATE,  "CREATE", is_normal
1599+ 30DD             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1599+ 30DD             >
1599+ 30DD             >Dict_Ptr        defl    $
1599+ 30DD             >
1599+ 30DD             >//              ______________________________________________________________________
1599+ 30DD             >//              Heap part
1599+ 30DD             >
1599+ 30DD             >
1599+ 30DD             >                org     (Heap_Ptr & $1FFF) + $E000
1599+ E8EF             >
1599+ E8EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1599+ E8EF             >Latest_Definition defl  Heap_Ptr
1599+ E8EF             >
1599+ E8EF             >                // dummy db directives used to calculate length of namec
1599+ E8EF 43 52 45 41 >                db      "CREATE"
1599+ E8F3 54 45       >
1599+ E8F5             >len_NFA         defl    $ - temp_NFA
1599+ E8F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1599+ E8EF             >
1599+ E8EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1599+ E8F0 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1599+ E8F4 54 45       >
1599+ E8F6             >                org     $-1                 // alter last byte of Name just above to set
1599+ E8F5 C5          >                db      {b $} | END_BIT     // msb as name end
1599+ E8F6             >
1599+ E8F6 E6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1599+ E8F8             >Prev_Ptr        defl    Heap_Ptr
1599+ E8F8             >
1599+ E8F8             >mirror_Ptr      defl    $
1599+ E8F8             >
1599+ E8F8 DF 30       >                dw      Dict_Ptr + 2        // xt
1599+ E8FA             >Heap_Ptr        defl    $ - $E000           // save current HP
1599+ E8FA             >
1599+ E8FA             >Current_HP      defl  $ - $E000             // used to set HP once!
1599+ E8FA             >
1599+ E8FA             >//              ______________________________________________________________________
1599+ E8FA             >//              Dictionary part
1599+ E8FA             >
1599+ E8FA             >                org     Dict_Ptr
1599+ 30DD             >
1599+ 30DD F8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1599+ 30DF             >
1599+ 30DF             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1599+ 30DF CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1599+ 30E2             >
1599+ 30E2             >
1599+ 30E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1599+ 30E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1599+ 30E2             >
1599+ 30E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1600+ 30E2 66 30 FD 2A                  dw      CODE, SMUDGE            // code smudge
1601+ 30E6 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1601+ 30EA 2E 28
1602+ 30EC 3D 20 CB 26                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1602+ 30F0 1F 28
1603+ 30F2 39 2B                        dw      C_SEMICOLON_CODE
1604+ 30F4                              // this routine is called from the call coded in CFA
1605+ 30F4              Create_Ptr:
1606+ 30F4
1607+ 30F4
1608+ 30F4
1609+ 30F4                              next
1609+ 30F4 DD E9       >                jp      (ix)
1610+ 30F6
1611+ 30F6              //  ______________________________________________________________________
1612+ 30F6              //
1613+ 30F6              // [compile]    -- cccc     ( compile time )
1614+ 30F6                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1614+ 30F6             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1614+ 30F6             >
1614+ 30F6             >Dict_Ptr        defl    $
1614+ 30F6             >
1614+ 30F6             >//              ______________________________________________________________________
1614+ 30F6             >//              Heap part
1614+ 30F6             >
1614+ 30F6             >
1614+ 30F6             >                org     (Heap_Ptr & $1FFF) + $E000
1614+ E8FA             >
1614+ E8FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1614+ E8FA             >Latest_Definition defl  Heap_Ptr
1614+ E8FA             >
1614+ E8FA             >                // dummy db directives used to calculate length of namec
1614+ E8FA 5B 43 4F 4D >                db      "[COMPILE]"
1614+ E8FE 50 49 4C 45 >
1614+ E902 5D          >
1614+ E903             >len_NFA         defl    $ - temp_NFA
1614+ E903             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1614+ E8FA             >
1614+ E8FA C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1614+ E8FB 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1614+ E8FF 50 49 4C 45 >
1614+ E903 5D          >
1614+ E904             >                org     $-1                 // alter last byte of Name just above to set
1614+ E903 DD          >                db      {b $} | END_BIT     // msb as name end
1614+ E904             >
1614+ E904 EF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1614+ E906             >Prev_Ptr        defl    Heap_Ptr
1614+ E906             >
1614+ E906             >mirror_Ptr      defl    $
1614+ E906             >
1614+ E906 F8 30       >                dw      Dict_Ptr + 2        // xt
1614+ E908             >Heap_Ptr        defl    $ - $E000           // save current HP
1614+ E908             >
1614+ E908             >Current_HP      defl  $ - $E000             // used to set HP once!
1614+ E908             >
1614+ E908             >//              ______________________________________________________________________
1614+ E908             >//              Dictionary part
1614+ E908             >
1614+ E908             >                org     Dict_Ptr
1614+ 30F6             >
1614+ 30F6 06 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1614+ 30F8             >
1614+ 30F8             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1614+ 30F8 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1614+ 30FB             >
1614+ 30FB             >
1614+ 30FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1614+ 30FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1614+ 30FB             >
1614+ 30FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1615+ 30FB ED 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1616+ 30FD E2 24                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1617+ 30FF E4 26 53 2A                  dw      ZERO, QERROR            // 0 ?error
1618+ 3103 6D 25                        dw      DROP                    // drop       (  cfa  )
1619+ 3105 1F 28                        dw      COMMA                   // ,
1620+ 3107 BD 24                        dw      EXIT                    // ; immediate
1621+ 3109
1622+ 3109              //  ______________________________________________________________________
1623+ 3109              //
1624+ 3109              // literal      n --      ( compile time )
1625+ 3109                              Colon_Def LITERAL,  "LITERAL", is_immediate
1625+ 3109             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1625+ 3109             >
1625+ 3109             >Dict_Ptr        defl    $
1625+ 3109             >
1625+ 3109             >//              ______________________________________________________________________
1625+ 3109             >//              Heap part
1625+ 3109             >
1625+ 3109             >
1625+ 3109             >                org     (Heap_Ptr & $1FFF) + $E000
1625+ E908             >
1625+ E908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ E908             >Latest_Definition defl  Heap_Ptr
1625+ E908             >
1625+ E908             >                // dummy db directives used to calculate length of namec
1625+ E908 4C 49 54 45 >                db      "LITERAL"
1625+ E90C 52 41 4C    >
1625+ E90F             >len_NFA         defl    $ - temp_NFA
1625+ E90F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ E908             >
1625+ E908 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ E909 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1625+ E90D 52 41 4C    >
1625+ E910             >                org     $-1                 // alter last byte of Name just above to set
1625+ E90F CC          >                db      {b $} | END_BIT     // msb as name end
1625+ E910             >
1625+ E910 FA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1625+ E912             >Prev_Ptr        defl    Heap_Ptr
1625+ E912             >
1625+ E912             >mirror_Ptr      defl    $
1625+ E912             >
1625+ E912 0B 31       >                dw      Dict_Ptr + 2        // xt
1625+ E914             >Heap_Ptr        defl    $ - $E000           // save current HP
1625+ E914             >
1625+ E914             >Current_HP      defl  $ - $E000             // used to set HP once!
1625+ E914             >
1625+ E914             >//              ______________________________________________________________________
1625+ E914             >//              Dictionary part
1625+ E914             >
1625+ E914             >                org     Dict_Ptr
1625+ 3109             >
1625+ 3109 12 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1625+ 310B             >
1625+ 310B             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 310B CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1625+ 310E             >
1625+ 310E             >
1625+ 310E             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 310E             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 310E             >
1625+ 310E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 310E AF 27 F2 25                  dw      STATE, FETCH            // state @
1627+ 3112                                                              // if
1628+ 3112 8D 20                        dw      ZBRANCH
1629+ 3114 08 00                        dw      Literal_Endif - $
1630+ 3116 C3 2A 3D 20                  dw          COMPILE, LIT        //      compile lit
1631+ 311A 1F 28                        dw          COMMA               //      ,
1632+ 311C              Literal_Endif:                                  // endif
1633+ 311C BD 24                        dw      EXIT                    // ; immediate
1634+ 311E
1635+ 311E              //  ______________________________________________________________________
1636+ 311E              //
1637+ 311E              // dliteral     n --      ( compile time )
1638+ 311E                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1638+ 311E             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1638+ 311E             >
1638+ 311E             >Dict_Ptr        defl    $
1638+ 311E             >
1638+ 311E             >//              ______________________________________________________________________
1638+ 311E             >//              Heap part
1638+ 311E             >
1638+ 311E             >
1638+ 311E             >                org     (Heap_Ptr & $1FFF) + $E000
1638+ E914             >
1638+ E914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1638+ E914             >Latest_Definition defl  Heap_Ptr
1638+ E914             >
1638+ E914             >                // dummy db directives used to calculate length of namec
1638+ E914 44 4C 49 54 >                db      "DLITERAL"
1638+ E918 45 52 41 4C >
1638+ E91C             >len_NFA         defl    $ - temp_NFA
1638+ E91C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1638+ E914             >
1638+ E914 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1638+ E915 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1638+ E919 45 52 41 4C >
1638+ E91D             >                org     $-1                 // alter last byte of Name just above to set
1638+ E91C CC          >                db      {b $} | END_BIT     // msb as name end
1638+ E91D             >
1638+ E91D 08 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1638+ E91F             >Prev_Ptr        defl    Heap_Ptr
1638+ E91F             >
1638+ E91F             >mirror_Ptr      defl    $
1638+ E91F             >
1638+ E91F 20 31       >                dw      Dict_Ptr + 2        // xt
1638+ E921             >Heap_Ptr        defl    $ - $E000           // save current HP
1638+ E921             >
1638+ E921             >Current_HP      defl  $ - $E000             // used to set HP once!
1638+ E921             >
1638+ E921             >//              ______________________________________________________________________
1638+ E921             >//              Dictionary part
1638+ E921             >
1638+ E921             >                org     Dict_Ptr
1638+ 311E             >
1638+ 311E 1F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1638+ 3120             >
1638+ 3120             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1638+ 3120 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1638+ 3123             >
1638+ 3123             >
1638+ 3123             >                endif           ; ok        // for other definitions it "points" the correct handler
1638+ 3123             >                // Use of "; ok" to suppress "warning[fwdref]"
1638+ 3123             >
1638+ 3123             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1639+ 3123 AF 27 F2 25                  dw      STATE, FETCH            // state @
1640+ 3127                                                              // if
1641+ 3127 8D 20                        dw      ZBRANCH
1642+ 3129 08 00                        dw      DLiteral_Endif - $
1643+ 312B 81 25                        dw          SWAP                //      swap
1644+ 312D 0B 31 0B 31                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1645+ 3131              DLiteral_Endif:                                 // endif
1646+ 3131 BD 24                        dw      EXIT                    // ; immediate
1647+ 3133
1648+ 3133              //  ______________________________________________________________________
1649+ 3133              //
1650+ 3133              // [char]       n --      ( compile time )
1651+ 3133              // inside colon definition, gets first character from next input word
1652+ 3133              // and compiles it as literal.
1653+ 3133                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1653+ 3133             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1653+ 3133             >
1653+ 3133             >Dict_Ptr        defl    $
1653+ 3133             >
1653+ 3133             >//              ______________________________________________________________________
1653+ 3133             >//              Heap part
1653+ 3133             >
1653+ 3133             >
1653+ 3133             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E921             >
1653+ E921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E921             >Latest_Definition defl  Heap_Ptr
1653+ E921             >
1653+ E921             >                // dummy db directives used to calculate length of namec
1653+ E921 5B 43 48 41 >                db      "[CHAR]"
1653+ E925 52 5D       >
1653+ E927             >len_NFA         defl    $ - temp_NFA
1653+ E927             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E921             >
1653+ E921 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E922 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1653+ E926 52 5D       >
1653+ E928             >                org     $-1                 // alter last byte of Name just above to set
1653+ E927 DD          >                db      {b $} | END_BIT     // msb as name end
1653+ E928             >
1653+ E928 14 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E92A             >Prev_Ptr        defl    Heap_Ptr
1653+ E92A             >
1653+ E92A             >mirror_Ptr      defl    $
1653+ E92A             >
1653+ E92A 35 31       >                dw      Dict_Ptr + 2        // xt
1653+ E92C             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E92C             >
1653+ E92C             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E92C             >
1653+ E92C             >//              ______________________________________________________________________
1653+ E92C             >//              Dictionary part
1653+ E92C             >
1653+ E92C             >                org     Dict_Ptr
1653+ 3133             >
1653+ 3133 2A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 3135             >
1653+ 3135             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 3135 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 3138             >
1653+ 3138             >
1653+ 3138             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 3138             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 3138             >
1653+ 3138             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 3138 0D 2E 0B 31                  dw      CHAR, LITERAL           // char [compile] literal
1655+ 313C BD 24                        dw      EXIT                    // ; immediate
1656+ 313E
1657+ 313E              //  ______________________________________________________________________
1658+ 313E              //
1659+ 313E              // 0x00         n --      ( compile time )
1660+ 313E                              Colon_Def NUL_WORD,  $00, is_immediate
1660+ 313E             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1660+ 313E             >
1660+ 313E             >Dict_Ptr        defl    $
1660+ 313E             >
1660+ 313E             >//              ______________________________________________________________________
1660+ 313E             >//              Heap part
1660+ 313E             >
1660+ 313E             >
1660+ 313E             >                org     (Heap_Ptr & $1FFF) + $E000
1660+ E92C             >
1660+ E92C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1660+ E92C             >Latest_Definition defl  Heap_Ptr
1660+ E92C             >
1660+ E92C             >                // dummy db directives used to calculate length of namec
1660+ E92C 00          >                db      $00
1660+ E92D             >len_NFA         defl    $ - temp_NFA
1660+ E92D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1660+ E92C             >
1660+ E92C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1660+ E92D 00          >                db      $00               // name string in 7-bit ascii, but
1660+ E92E             >                org     $-1                 // alter last byte of Name just above to set
1660+ E92D 80          >                db      {b $} | END_BIT     // msb as name end
1660+ E92E             >
1660+ E92E 21 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1660+ E930             >Prev_Ptr        defl    Heap_Ptr
1660+ E930             >
1660+ E930             >mirror_Ptr      defl    $
1660+ E930             >
1660+ E930 40 31       >                dw      Dict_Ptr + 2        // xt
1660+ E932             >Heap_Ptr        defl    $ - $E000           // save current HP
1660+ E932             >
1660+ E932             >Current_HP      defl  $ - $E000             // used to set HP once!
1660+ E932             >
1660+ E932             >//              ______________________________________________________________________
1660+ E932             >//              Dictionary part
1660+ E932             >
1660+ E932             >                org     Dict_Ptr
1660+ 313E             >
1660+ 313E 30 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1660+ 3140             >
1660+ 3140             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1660+ 3140 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1660+ 3143             >
1660+ 3143             >
1660+ 3143             >                endif           ; ok        // for other definitions it "points" the correct handler
1660+ 3143             >                // Use of "; ok" to suppress "warning[fwdref]"
1660+ 3143             >
1660+ 3143             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1661+ 3143 85 27 F2 25                  dw      BLK, FETCH, ONE         // blk @ 1
1661+ 3147 EB 26
1662+ 3149 7A 28                        dw      GREATER                 // > if
1663+ 314B                                                              // if
1664+ 314B 8D 20                        dw      ZBRANCH
1665+ 314D 28 00                        dw      Nul_Else_1 - $
1666+ 314F EB 26 85 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1666+ 3153 DA 25
1667+ 3155 E4 26 8B 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1667+ 3159 FC 25
1668+ 315B 85 27 F2 25                  dw          BLK, FETCH          //      blk @
1669+ 315F 1C 27                        dw          BSCR                //      b/scr
1670+ 3161 2A 25                        dw          ONE_SUBTRACT        //      1 -
1671+ 3163 7D 24                        dw          AND_OP              //      and  ( this is tricky )
1672+ 3165 E2 24                        dw          ZEQUAL              //      0=
1673+ 3167                                                              //      if
1674+ 3167 8D 20                        dw          ZBRANCH
1675+ 3169 08 00                        dw          Nul_Endif_2 - $
1676+ 316B 7B 2A                        dw              QEXEC           //          ?exec
1677+ 316D D2 24 6D 25                  dw              R_TO, DROP      //          r> drop
1678+ 3171              Nul_Endif_2:                                    //      endif
1679+ 3171 89 20                        dw      BRANCH
1680+ 3173 06 00                        dw      Nul_Endif_1 - $
1681+ 3175              Nul_Else_1:                                     // else
1682+ 3175 D2 24 6D 25                  dw          R_TO, DROP          //      r> drop
1683+ 3179              Nul_Endif_1:                                    // endif
1684+ 3179 BD 24                        dw      EXIT                    // ;
1685+ 317B
1686+ 317B              //  ______________________________________________________________________
1687+ 317B              //
1688+ 317B              // ?stack       --
1689+ 317B              // Raise error #1 if stack is empty and you pop it
1690+ 317B              // Raise error #7 if stack is full.
1691+ 317B              // This means SP must always stay between HERE and FFFF
1692+ 317B              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1693+ 317B              // for Next 8K MMU paging this is $DOE8
1694+ 317B                              Colon_Def QSTACK, "?STACK", is_normal
1694+ 317B             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1694+ 317B             >
1694+ 317B             >Dict_Ptr        defl    $
1694+ 317B             >
1694+ 317B             >//              ______________________________________________________________________
1694+ 317B             >//              Heap part
1694+ 317B             >
1694+ 317B             >
1694+ 317B             >                org     (Heap_Ptr & $1FFF) + $E000
1694+ E932             >
1694+ E932             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1694+ E932             >Latest_Definition defl  Heap_Ptr
1694+ E932             >
1694+ E932             >                // dummy db directives used to calculate length of namec
1694+ E932 3F 53 54 41 >                db      "?STACK"
1694+ E936 43 4B       >
1694+ E938             >len_NFA         defl    $ - temp_NFA
1694+ E938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1694+ E932             >
1694+ E932 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1694+ E933 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1694+ E937 43 4B       >
1694+ E939             >                org     $-1                 // alter last byte of Name just above to set
1694+ E938 CB          >                db      {b $} | END_BIT     // msb as name end
1694+ E939             >
1694+ E939 2C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1694+ E93B             >Prev_Ptr        defl    Heap_Ptr
1694+ E93B             >
1694+ E93B             >mirror_Ptr      defl    $
1694+ E93B             >
1694+ E93B 7D 31       >                dw      Dict_Ptr + 2        // xt
1694+ E93D             >Heap_Ptr        defl    $ - $E000           // save current HP
1694+ E93D             >
1694+ E93D             >Current_HP      defl  $ - $E000             // used to set HP once!
1694+ E93D             >
1694+ E93D             >//              ______________________________________________________________________
1694+ E93D             >//              Dictionary part
1694+ E93D             >
1694+ E93D             >                org     Dict_Ptr
1694+ 317B             >
1694+ 317B 3B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1694+ 317D             >
1694+ 317D             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1694+ 317D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1694+ 3180             >
1694+ 3180             >
1694+ 3180             >                endif           ; ok        // for other definitions it "points" the correct handler
1694+ 3180             >                // Use of "; ok" to suppress "warning[fwdref]"
1694+ 3180             >
1694+ 3180             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1695+ 3180 A4 24                        dw      SPFETCH                 // sp@
1696+ 3182 3D 27 F2 25                  dw      S0, FETCH               // s0 @
1697+ 3186 81 25 5F 28                  dw      SWAP, ULESS             // swap u<
1698+ 318A EB 26 53 2A                  dw      ONE, QERROR             // 1 ?error
1699+ 318E 09 28                        dw      HERE                    // here
1700+ 3190 3D 27 F2 25                  dw      S0, FETCH, LESS         // s0 @ <
1700+ 3194 6D 28
1701+ 3196                                                              // if
1702+ 3196 8D 20                        dw      ZBRANCH
1703+ 3198 14 00                        dw      QStack_Endif - $
1704+ 319A A4 24                        dw          SPFETCH             //      sp@
1705+ 319C 09 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1705+ 31A0 80 00
1706+ 31A2 0A 25 5F 28                  dw          PLUS, ULESS         //      plus u<
1707+ 31A6 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1707+ 31AA 53 2A
1708+ 31AC              QStack_Endif:                                   // endif
1709+ 31AC BD 24                        dw      EXIT                    // ;
1710+ 31AE
1711+ 31AE
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L1.asm
 141  31AE                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L2.asm
   1+ 31AE              //  ______________________________________________________________________
   2+ 31AE              //
   3+ 31AE              //  L2.asm
   4+ 31AE              //
   5+ 31AE              //  Level-2 3dos
   6+ 31AE              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 31AE              //  ______________________________________________________________________
   8+ 31AE
   9+ 31AE
  10+ 31AE              //  ______________________________________________________________________
  11+ 31AE              //
  12+ 31AE              // interpret    --
  13+ 31AE              // This is the text interpreter.
  14+ 31AE              // It executes or compiles, depending on STATE, the text coming from
  15+ 31AE              // current input stream.
  16+ 31AE              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 31AE              // the word is interpreted as numeric and converted, using current BASE,
  18+ 31AE              // leaving on top of stack a single or double precision number, depending
  19+ 31AE              // on the presence of a decimal point.
  20+ 31AE              // If the number conversion fails, the terminal is notified with ? followed
  21+ 31AE              // by the offending word.
  22+ 31AE                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 31AE             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 31AE             >
  22+ 31AE             >Dict_Ptr        defl    $
  22+ 31AE             >
  22+ 31AE             >//              ______________________________________________________________________
  22+ 31AE             >//              Heap part
  22+ 31AE             >
  22+ 31AE             >
  22+ 31AE             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E93D             >
  22+ E93D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E93D             >Latest_Definition defl  Heap_Ptr
  22+ E93D             >
  22+ E93D             >                // dummy db directives used to calculate length of namec
  22+ E93D 49 4E 54 45 >                db      "INTERPRET"
  22+ E941 52 50 52 45 >
  22+ E945 54          >
  22+ E946             >len_NFA         defl    $ - temp_NFA
  22+ E946             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E93D             >
  22+ E93D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E93E 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E942 52 50 52 45 >
  22+ E946 54          >
  22+ E947             >                org     $-1                 // alter last byte of Name just above to set
  22+ E946 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E947             >
  22+ E947 32 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E949             >Prev_Ptr        defl    Heap_Ptr
  22+ E949             >
  22+ E949             >mirror_Ptr      defl    $
  22+ E949             >
  22+ E949 B0 31       >                dw      Dict_Ptr + 2        // xt
  22+ E94B             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E94B             >
  22+ E94B             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E94B             >
  22+ E94B             >//              ______________________________________________________________________
  22+ E94B             >//              Dictionary part
  22+ E94B             >
  22+ E94B             >                org     Dict_Ptr
  22+ 31AE             >
  22+ 31AE 49 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 31B0             >
  22+ 31B0             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 31B0 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 31B3             >
  22+ 31B3             >
  22+ 31B3             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 31B3             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 31B3             >
  22+ 31B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 31B3
  24+ 31B3              Interpret_Begin:                                        // begin
  25+ 31B3 ED 2F                        dw          LFIND                       //      -find
  26+ 31B5                                                                      //      if
  27+ 31B5 8D 20                        dw          ZBRANCH
  28+ 31B7 1A 00                        dw          Interpret_Else_1 - $
  29+ 31B9 AF 27 F2 25                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 31BD 6D 28
  30+ 31BF                                                                      //          if
  31+ 31BF 8D 20                        dw              ZBRANCH
  32+ 31C1 08 00                        dw              Interpret_Else_2 - $
  33+ 31C3 D8 2A                        dw                  COMPILE_XT          //              compile,
  34+ 31C5                                                                      //          else
  35+ 31C5 89 20                        dw              BRANCH
  36+ 31C7 06 00                        dw              Interpret_Endif_2 - $
  37+ 31C9              Interpret_Else_2:
  38+ 31C9 48 20 AB 26                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 31CD              Interpret_Endif_2:                                      //          endif
  40+ 31CD                                                                      //      else
  41+ 31CD 89 20                        dw          BRANCH
  42+ 31CF 1A 00                        dw          Interpret_Endif_1 - $
  43+ 31D1              Interpret_Else_1:
  44+ 31D1 09 28 3F 2F                  dw              HERE, NUMBER            //          here number
  45+ 31D5 BB 27 F2 25                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31D9 23 25
  46+ 31DB                                                                      //          if
  47+ 31DB 8D 20                        dw              ZBRANCH
  48+ 31DD 08 00                        dw              Interpret_Else_3 - $
  49+ 31DF              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31DF              //                                                      //              if
  51+ 31DF              //              dw                  ZBRANCH
  52+ 31DF              //              dw                  Interpret_Endif_4 - $
  53+ 31DF              //              dw                      ONE, ZERO       //                  1 0
  54+ 31DF              //              dw                      TWO_DROP        //                  2drop
  55+ 31DF              //Interpret_Endif_4:                                      //              endif
  56+ 31DF 20 31                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31E1                                                                      //          else
  58+ 31E1 89 20                        dw              BRANCH
  59+ 31E3 06 00                        dw              Interpret_Endif_3 - $
  60+ 31E5              Interpret_Else_3:
  61+ 31E5 6D 25                        dw                  DROP                //              drop
  62+ 31E7 0B 31                        dw                  LITERAL             //              [compile]  literal
  63+ 31E9              Interpret_Endif_3:                                      //          endif
  64+ 31E9              Interpret_Endif_1:                                      //      endif
  65+ 31E9 7D 31                        dw          QSTACK                      //      ?stack
  66+ 31EB 0E 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31ED                                                                      //      if
  68+ 31ED 8D 20                        dw          ZBRANCH
  69+ 31EF 04 00                        dw          Interpret_Endif_5 - $
  70+ 31F1 52 32                        dw              QUIT                    //          quit
  71+ 31F3              Interpret_Endif_5:                                      //      endif
  72+ 31F3 89 20                        dw      BRANCH
  73+ 31F5 BE FF                        dw      Interpret_Begin - $
  74+ 31F7 BD 24                        dw      EXIT                            // ;
  75+ 31F9
  76+ 31F9              //  ______________________________________________________________________
  77+ 31F9              //
  78+ 31F9              // vocabulary   -- cccc     ( compile time )
  79+ 31F9              // Defining word used in the form   VOCABULARY cccc
  80+ 31F9              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31F9              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31F9              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31F9              // so new definitions can be inserted in that vocabulary.
  84+ 31F9                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31F9             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31F9             >
  84+ 31F9             >Dict_Ptr        defl    $
  84+ 31F9             >
  84+ 31F9             >//              ______________________________________________________________________
  84+ 31F9             >//              Heap part
  84+ 31F9             >
  84+ 31F9             >
  84+ 31F9             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E94B             >
  84+ E94B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E94B             >Latest_Definition defl  Heap_Ptr
  84+ E94B             >
  84+ E94B             >                // dummy db directives used to calculate length of namec
  84+ E94B 56 4F 43 41 >                db      "VOCABULARY"
  84+ E94F 42 55 4C 41 >
  84+ E953 52 59       >
  84+ E955             >len_NFA         defl    $ - temp_NFA
  84+ E955             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E94B             >
  84+ E94B 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E94C 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E950 42 55 4C 41 >
  84+ E954 52 59       >
  84+ E956             >                org     $-1                 // alter last byte of Name just above to set
  84+ E955 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E956             >
  84+ E956 3D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E958             >Prev_Ptr        defl    Heap_Ptr
  84+ E958             >
  84+ E958             >mirror_Ptr      defl    $
  84+ E958             >
  84+ E958 FB 31       >                dw      Dict_Ptr + 2        // xt
  84+ E95A             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E95A             >
  84+ E95A             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E95A             >
  84+ E95A             >//              ______________________________________________________________________
  84+ E95A             >//              Dictionary part
  84+ E95A             >
  84+ E95A             >                org     Dict_Ptr
  84+ 31F9             >
  84+ 31F9 58 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31FB             >
  84+ 31FB             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31FB CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31FE             >
  84+ 31FE             >
  84+ 31FE             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31FE             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31FE             >
  84+ 31FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31FE
  86+ 31FE DF 30                        dw      CREATE
  87+ 3200
  88+ 3200                              // dummy word + link part
  89+ 3200 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 3204 1F 28
  90+ 3206 A9 27 F2 25                  dw      CURRENT, FETCH          // current @
  91+ 320A F2 25                        dw      FETCH                   // @
  92+ 320C                          //  dw      CELL_MINUS              // cell-
  93+ 320C 1F 28                        dw      COMMA                   // ,
  94+ 320E
  95+ 320E                              // voc-link part
  96+ 320E 09 28                        dw      HERE                    // here
  97+ 3210 67 27 F2 25                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 3214 1F 28                        dw      COMMA                   // ,
  99+ 3216 67 27 FC 25                  dw      VOC_LINK, STORE         // voc-link !
 100+ 321A                              // DOES part
 101+ 321A 6E 2B                        dw      C_DOES                  // _does>_
 102+ 321C              Vocabulary_Does:
 103+ 321C                        //    nop
 104+ 321C CD 8F 26                     call    Enter_Ptr
 105+ 321F
 106+ 321F 39 25                        dw      CELL_PLUS               // cell+
 107+ 3221 A3 27 FC 25                  dw      CONTEXT, STORE          // context !
 108+ 3225 BD 24                        dw      EXIT                    // ;
 109+ 3227
 110+ 3227              //  ______________________________________________________________________
 111+ 3227              //
 112+ 3227              // forth        --
 113+ 3227              // Name of the first vocabulary.
 114+ 3227              // It makes FORTH the CONTEXT vocabulary.
 115+ 3227              // Until new user vocabulary are defined, new colon-definitions becomes
 116+ 3227              // part of FORTH. It is immediate, so it will executed during the creation
 117+ 3227              // of a colon definition to be able to select the vocabulary.
 118+ 3227
 119+ 3227                              New_Def FORTH, "FORTH", Vocabulary_Does, is_immediate
 119+ 3227             >
 119+ 3227             >Dict_Ptr        defl    $
 119+ 3227             >
 119+ 3227             >//              ______________________________________________________________________
 119+ 3227             >//              Heap part
 119+ 3227             >
 119+ 3227             >
 119+ 3227             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E95A             >
 119+ E95A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E95A             >Latest_Definition defl  Heap_Ptr
 119+ E95A             >
 119+ E95A             >                // dummy db directives used to calculate length of namec
 119+ E95A 46 4F 52 54 >                db      "FORTH"
 119+ E95E 48          >
 119+ E95F             >len_NFA         defl    $ - temp_NFA
 119+ E95F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E95A             >
 119+ E95A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E95B 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 119+ E95F 48          >
 119+ E960             >                org     $-1                 // alter last byte of Name just above to set
 119+ E95F C8          >                db      {b $} | END_BIT     // msb as name end
 119+ E960             >
 119+ E960 4B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E962             >Prev_Ptr        defl    Heap_Ptr
 119+ E962             >
 119+ E962             >mirror_Ptr      defl    $
 119+ E962             >
 119+ E962 29 32       >                dw      Dict_Ptr + 2        // xt
 119+ E964             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E964             >
 119+ E964             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E964             >
 119+ E964             >//              ______________________________________________________________________
 119+ E964             >//              Dictionary part
 119+ E964             >
 119+ E964             >                org     Dict_Ptr
 119+ 3227             >
 119+ 3227 62 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 3229             >
 119+ 3229             >FORTH:          if Vocabulary_Does != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 3229 CD 1C 32    >                call    Vocabulary_Does ; ok        // for primitive definitions  actual code
 119+ 322C             >
 119+ 322C             >
 119+ 322C             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 322C             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 322C             >
 119+ 322C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 322C
 121+ 322C 81 A0                        db      $81, $A0
 122+ 322E              Forth_Latest_Ptr:
 123+ 322E 5A 09                        dw      Latest_Definition
 124+ 3230              Voclink_Ptr:
 125+ 3230 00 00                        dw      0
 126+ 3232
 127+ 3232              // ____
 128+ 3232              // temp_VOC        defl    $                   // save this address
 129+ 3232              //              org     (Heap_Ptr & $1FFF) + $E000
 130+ 3232              //              db      $81, $A0
 131+ 3232              // Forth_Latest_Ptr_HEAP:
 132+ 3232              //                 dw      Latest_Definition
 133+ 3232              // Voclink_Ptr_HEAP:
 134+ 3232              //                 dw      0
 135+ 3232              // Heap_Ptr        defl    $ - $E000           // save current HP
 136+ 3232              //                 org     temp_VOC
 137+ 3232              // ____
 138+ 3232
 139+ 3232              // Any new vocabulary is structured as follow:
 140+ 3232              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 141+ 3232              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 142+ 3232              // PFA+4 always contains the LATEST word of this VOCABULARY.
 143+ 3232              //       at creations it points to the null-word of its parent vocabulary
 144+ 3232              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 145+ 3232              // PFA+6 is the pointer that builds up the vocabulary linked list.
 146+ 3232              //       FORTH has 0 here to signal the end of the list and user's variable
 147+ 3232              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 148+ 3232              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 149+ 3232              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 150+ 3232
 151+ 3232              //  ______________________________________________________________________
 152+ 3232              //
 153+ 3232              // definitions  --
 154+ 3232              // Used in the form  cccc DEFINITIONS
 155+ 3232              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 156+ 3232              // vocabulary cccc.
 157+ 3232                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 157+ 3232             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 157+ 3232             >
 157+ 3232             >Dict_Ptr        defl    $
 157+ 3232             >
 157+ 3232             >//              ______________________________________________________________________
 157+ 3232             >//              Heap part
 157+ 3232             >
 157+ 3232             >
 157+ 3232             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E964             >
 157+ E964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E964             >Latest_Definition defl  Heap_Ptr
 157+ E964             >
 157+ E964             >                // dummy db directives used to calculate length of namec
 157+ E964 44 45 46 49 >                db      "DEFINITIONS"
 157+ E968 4E 49 54 49 >
 157+ E96C 4F 4E 53    >
 157+ E96F             >len_NFA         defl    $ - temp_NFA
 157+ E96F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E964             >
 157+ E964 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E965 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 157+ E969 4E 49 54 49 >
 157+ E96D 4F 4E 53    >
 157+ E970             >                org     $-1                 // alter last byte of Name just above to set
 157+ E96F D3          >                db      {b $} | END_BIT     // msb as name end
 157+ E970             >
 157+ E970 5A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E972             >Prev_Ptr        defl    Heap_Ptr
 157+ E972             >
 157+ E972             >mirror_Ptr      defl    $
 157+ E972             >
 157+ E972 34 32       >                dw      Dict_Ptr + 2        // xt
 157+ E974             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E974             >
 157+ E974             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E974             >
 157+ E974             >//              ______________________________________________________________________
 157+ E974             >//              Dictionary part
 157+ E974             >
 157+ E974             >                org     Dict_Ptr
 157+ 3232             >
 157+ 3232 72 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 3234             >
 157+ 3234             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 3234 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 3237             >
 157+ 3237             >
 157+ 3237             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 3237             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 3237             >
 157+ 3237             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 3237 A3 27 F2 25                  dw      CONTEXT, FETCH          // context @
 159+ 323B A9 27 FC 25                  dw      CURRENT, STORE          // current !
 160+ 323F BD 24                        dw      EXIT                    // ;
 161+ 3241
 162+ 3241              //  ______________________________________________________________________
 163+ 3241              //
 164+ 3241              // (            -- cccc )
 165+ 3241              // the following text is interpreted as a comment until a closing )
 166+ 3241                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 166+ 3241             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 166+ 3241             >
 166+ 3241             >Dict_Ptr        defl    $
 166+ 3241             >
 166+ 3241             >//              ______________________________________________________________________
 166+ 3241             >//              Heap part
 166+ 3241             >
 166+ 3241             >
 166+ 3241             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E974             >
 166+ E974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E974             >Latest_Definition defl  Heap_Ptr
 166+ E974             >
 166+ E974             >                // dummy db directives used to calculate length of namec
 166+ E974 28          >                db      "("
 166+ E975             >len_NFA         defl    $ - temp_NFA
 166+ E975             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E974             >
 166+ E974 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E975 28          >                db      "("               // name string in 7-bit ascii, but
 166+ E976             >                org     $-1                 // alter last byte of Name just above to set
 166+ E975 A8          >                db      {b $} | END_BIT     // msb as name end
 166+ E976             >
 166+ E976 64 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E978             >Prev_Ptr        defl    Heap_Ptr
 166+ E978             >
 166+ E978             >mirror_Ptr      defl    $
 166+ E978             >
 166+ E978 43 32       >                dw      Dict_Ptr + 2        // xt
 166+ E97A             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E97A             >
 166+ E97A             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E97A             >
 166+ E97A             >//              ______________________________________________________________________
 166+ E97A             >//              Dictionary part
 166+ E97A             >
 166+ E97A             >                org     Dict_Ptr
 166+ 3241             >
 166+ 3241 78 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 3243             >
 166+ 3243             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 3243 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 166+ 3246             >
 166+ 3246             >
 166+ 3246             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 3246             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 3246             >
 166+ 3246             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 3246 3D 20 29 00                  dw      LIT, ")"                // [char] )
 168+ 324A AB 2D 6D 25                  dw      WORD, DROP              // word drop
 169+ 324E BD 24                        dw      EXIT                    // ;
 170+ 3250
 171+ 3250              //  ______________________________________________________________________
 172+ 3250              //
 173+ 3250              // quit         --
 174+ 3250              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 175+ 3250                              Colon_Def QUIT, "QUIT", is_normal
 175+ 3250             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 175+ 3250             >
 175+ 3250             >Dict_Ptr        defl    $
 175+ 3250             >
 175+ 3250             >//              ______________________________________________________________________
 175+ 3250             >//              Heap part
 175+ 3250             >
 175+ 3250             >
 175+ 3250             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E97A             >
 175+ E97A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E97A             >Latest_Definition defl  Heap_Ptr
 175+ E97A             >
 175+ E97A             >                // dummy db directives used to calculate length of namec
 175+ E97A 51 55 49 54 >                db      "QUIT"
 175+ E97E             >len_NFA         defl    $ - temp_NFA
 175+ E97E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E97A             >
 175+ E97A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E97B 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 175+ E97F             >                org     $-1                 // alter last byte of Name just above to set
 175+ E97E D4          >                db      {b $} | END_BIT     // msb as name end
 175+ E97F             >
 175+ E97F 74 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E981             >Prev_Ptr        defl    Heap_Ptr
 175+ E981             >
 175+ E981             >mirror_Ptr      defl    $
 175+ E981             >
 175+ E981 52 32       >                dw      Dict_Ptr + 2        // xt
 175+ E983             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E983             >
 175+ E983             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E983             >
 175+ E983             >//              ______________________________________________________________________
 175+ E983             >//              Dictionary part
 175+ E983             >
 175+ E983             >                org     Dict_Ptr
 175+ 3250             >
 175+ 3250 81 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 3252             >
 175+ 3252             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 3252 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 3255             >
 175+ 3255             >
 175+ 3255             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 3255             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 3255             >
 175+ 3255             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 3255
 177+ 3255 F1 27 F2 25                  dw      SOURCE_ID, FETCH        // source-id @
 178+ 3259 5D 23 6D 25                  dw      F_CLOSE, DROP           // f_close drop
 179+ 325D E4 26 F1 27                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 179+ 3261 FC 25
 180+ 3263 E4 26 85 27                  dw      ZERO, BLK, STORE        // 0 blk !
 180+ 3267 FC 25
 181+ 3269 E1 2A                        dw      SQUARED_OPEN            // [compile] [
 182+ 326B                                                              // begin
 183+ 326B              Quit_Begin:
 184+ 326B 43 27 F2 25                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 184+ 326F B8 24
 185+ 3271 E6 28                        dw      CR                      //      cr
 186+ 3273 48 2D                        dw      QUERY                   //      query
 187+ 3275              Next_Breakpoint_1:
 188+ 3275 B0 31                        dw      INTERPRET               //      interpret
 189+ 3277 AF 27 F2 25                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 189+ 327B E2 24
 190+ 327D                                                              //      if
 191+ 327D 8D 20                        dw      ZBRANCH
 192+ 327F 07 00                        dw      Quit_Endif - $
 193+ 3281 F6 2D                        dw          C_DOT_QUOTE
 194+ 3283 02 6F 6B                     db          2, "ok"             //          .( ok)
 195+ 3286              Quit_Endif:                                     //      else
 196+ 3286                                                              // again
 197+ 3286 89 20                        dw      BRANCH
 198+ 3288 E3 FF                        dw      Quit_Begin - $
 199+ 328A BD 24                        dw      EXIT                    // ;
 200+ 328C
 201+ 328C              //  ______________________________________________________________________
 202+ 328C              //
 203+ 328C              // abort        --
 204+ 328C                              Colon_Def ABORT, "ABORT", is_normal
 204+ 328C             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 204+ 328C             >
 204+ 328C             >Dict_Ptr        defl    $
 204+ 328C             >
 204+ 328C             >//              ______________________________________________________________________
 204+ 328C             >//              Heap part
 204+ 328C             >
 204+ 328C             >
 204+ 328C             >                org     (Heap_Ptr & $1FFF) + $E000
 204+ E983             >
 204+ E983             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ E983             >Latest_Definition defl  Heap_Ptr
 204+ E983             >
 204+ E983             >                // dummy db directives used to calculate length of namec
 204+ E983 41 42 4F 52 >                db      "ABORT"
 204+ E987 54          >
 204+ E988             >len_NFA         defl    $ - temp_NFA
 204+ E988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ E983             >
 204+ E983 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ E984 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 204+ E988 54          >
 204+ E989             >                org     $-1                 // alter last byte of Name just above to set
 204+ E988 D4          >                db      {b $} | END_BIT     // msb as name end
 204+ E989             >
 204+ E989 7A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 204+ E98B             >Prev_Ptr        defl    Heap_Ptr
 204+ E98B             >
 204+ E98B             >mirror_Ptr      defl    $
 204+ E98B             >
 204+ E98B 8E 32       >                dw      Dict_Ptr + 2        // xt
 204+ E98D             >Heap_Ptr        defl    $ - $E000           // save current HP
 204+ E98D             >
 204+ E98D             >Current_HP      defl  $ - $E000             // used to set HP once!
 204+ E98D             >
 204+ E98D             >//              ______________________________________________________________________
 204+ E98D             >//              Dictionary part
 204+ E98D             >
 204+ E98D             >                org     Dict_Ptr
 204+ 328C             >
 204+ 328C 8B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 204+ 328E             >
 204+ 328E             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 328E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 3291             >
 204+ 3291             >
 204+ 3291             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 3291             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 3291             >
 204+ 3291             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 3291 3D 27 F2 25                  dw      S0, FETCH               // s0 @
 206+ 3295 07 27                        dw      BL                      // bl
 207+ 3297 64 25 FC 25                  dw      OVER, STORE             // over !
 208+ 329B AD 24                        dw      SPSTORE                 // sp!
 209+ 329D 2A 2B                        dw      DECIMAL                 // decimal
 210+ 329F 29 32                        dw      FORTH                   // [compile] forth
 211+ 32A1 34 32                        dw      DEFINITIONS             // definitions
 212+ 32A3
 213+ 32A3 E1 2A                        dw      SQUARED_OPEN            // [compile] [
 214+ 32A5 43 27 F2 25                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 214+ 32A9 B8 24
 215+ 32AB
 216+ 32AB              Autoexec_Ptr:
 217+ 32AB B7 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 218+ 32AD 52 32                        dw      QUIT                    // quit
 219+ 32AF              //              dw      EXIT                    // ;
 220+ 32AF
 221+ 32AF              //  ______________________________________________________________________
 222+ 32AF              //
 223+ 32AF              // warm         --
 224+ 32AF                              Colon_Def WARM, "WARM", is_normal
 224+ 32AF             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 224+ 32AF             >
 224+ 32AF             >Dict_Ptr        defl    $
 224+ 32AF             >
 224+ 32AF             >//              ______________________________________________________________________
 224+ 32AF             >//              Heap part
 224+ 32AF             >
 224+ 32AF             >
 224+ 32AF             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E98D             >
 224+ E98D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E98D             >Latest_Definition defl  Heap_Ptr
 224+ E98D             >
 224+ E98D             >                // dummy db directives used to calculate length of namec
 224+ E98D 57 41 52 4D >                db      "WARM"
 224+ E991             >len_NFA         defl    $ - temp_NFA
 224+ E991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E98D             >
 224+ E98D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E98E 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 224+ E992             >                org     $-1                 // alter last byte of Name just above to set
 224+ E991 CD          >                db      {b $} | END_BIT     // msb as name end
 224+ E992             >
 224+ E992 83 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E994             >Prev_Ptr        defl    Heap_Ptr
 224+ E994             >
 224+ E994             >mirror_Ptr      defl    $
 224+ E994             >
 224+ E994 B1 32       >                dw      Dict_Ptr + 2        // xt
 224+ E996             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E996             >
 224+ E996             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E996             >
 224+ E996             >//              ______________________________________________________________________
 224+ E996             >//              Dictionary part
 224+ E996             >
 224+ E996             >                org     Dict_Ptr
 224+ 32AF             >
 224+ 32AF 94 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 32B1             >
 224+ 32B1             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 32B1 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 32B4             >
 224+ 32B4             >
 224+ 32B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 32B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 32B4             >
 224+ 32B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 32B4 7C 36                        dw      BLK_INIT                // blk-init
 226+ 32B6                          //  dw      SPLASH                  // splash
 227+ 32B6                          //  dw      LIT, 7, EMIT            // 7 emit
 228+ 32B6 8E 32                        dw      ABORT                   // abort
 229+ 32B8                          //  dw      EXIT                    // exit
 230+ 32B8
 231+ 32B8              //  ______________________________________________________________________
 232+ 32B8              //
 233+ 32B8              // cold         --
 234+ 32B8                              Colon_Def COLD, "COLD", is_normal
 234+ 32B8             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 234+ 32B8             >
 234+ 32B8             >Dict_Ptr        defl    $
 234+ 32B8             >
 234+ 32B8             >//              ______________________________________________________________________
 234+ 32B8             >//              Heap part
 234+ 32B8             >
 234+ 32B8             >
 234+ 32B8             >                org     (Heap_Ptr & $1FFF) + $E000
 234+ E996             >
 234+ E996             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ E996             >Latest_Definition defl  Heap_Ptr
 234+ E996             >
 234+ E996             >                // dummy db directives used to calculate length of namec
 234+ E996 43 4F 4C 44 >                db      "COLD"
 234+ E99A             >len_NFA         defl    $ - temp_NFA
 234+ E99A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ E996             >
 234+ E996 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ E997 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 234+ E99B             >                org     $-1                 // alter last byte of Name just above to set
 234+ E99A C4          >                db      {b $} | END_BIT     // msb as name end
 234+ E99B             >
 234+ E99B 8D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 234+ E99D             >Prev_Ptr        defl    Heap_Ptr
 234+ E99D             >
 234+ E99D             >mirror_Ptr      defl    $
 234+ E99D             >
 234+ E99D BA 32       >                dw      Dict_Ptr + 2        // xt
 234+ E99F             >Heap_Ptr        defl    $ - $E000           // save current HP
 234+ E99F             >
 234+ E99F             >Current_HP      defl  $ - $E000             // used to set HP once!
 234+ E99F             >
 234+ E99F             >//              ______________________________________________________________________
 234+ E99F             >//              Dictionary part
 234+ E99F             >
 234+ E99F             >                org     Dict_Ptr
 234+ 32B8             >
 234+ 32B8 9D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 234+ 32BA             >
 234+ 32BA             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 32BA CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 32BD             >
 234+ 32BD             >
 234+ 32BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 32BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 32BD             >
 234+ 32BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 32BD AB 26 AB 26                  dw      NOOP, NOOP
 236+ 32C1 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 237+ 32C5 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 238+ 32C9 F2 25                        dw      FETCH                   // @
 239+ 32CB 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 239+ 32CF 0A 25
 240+ 32D1 3D 20 16 00                  dw      LIT, 22                 // 22
 241+ 32D5 02 24                        dw      CMOVE
 242+ 32D7 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 243+ 32DB F2 25                        dw      FETCH                   // @
 244+ 32DD 3D 20 2E 32                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 245+ 32E1 FC 25                        dw      STORE                   // !
 246+ 32E3 E4 26 7F 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 246+ 32E7 FC 25
 247+ 32E9 6D 27 F2 25                  dw      FIRST, FETCH, DUP       // first @ dup
 247+ 32ED 88 25
 248+ 32EF D9 27 FC 25                  dw      USED, STORE             // used !
 249+ 32F3 DF 27 FC 25                  dw      PREV, STORE             // prev !
 250+ 32F7 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 250+ 32FB EB 27 FC 25
 251+ 32FF              //              dw      LIT, 8
 252+ 32FF              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 253+ 32FF 1D 37                        dw      EMPTY_BUFFERS
 254+ 3301 E4 26 85 27                  dw      ZERO, BLK, STORE
 254+ 3305 FC 25
 255+ 3307 E4 26 F1 27                  dw      ZERO, SOURCE_ID, STORE
 255+ 330B FC 25
 256+ 330D
 257+ 330D 3D 20 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 257+ 3311 BB 28
 258+ 3313 E4 26 BB 28                  dw      ZERO, EMITC
 259+ 3317
 260+ 3317 B1 32        Warm_Start:     dw      WARM
 261+ 3319 BA 32        Cold_Start:     dw      COLD
 262+ 331B              //              dw      EXIT
 263+ 331B
 264+ 331B
 265+ 331B              //  ______________________________________________________________________
 266+ 331B
 267+ 331B              Tools_vForth_Directory
 268+ 331B 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 268+ 331F 6F 6F 6C 73
 268+ 3323 2F 76 46 6F
 268+ 3327 72 74 68 2F
 268+ 332B FF
 269+ 332C 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 269+ 3330 6F 74 2F 76
 269+ 3334 66 6F 72 74
 269+ 3338 68 2E 62 69
 269+ 333C 6E 00
 270+ 333E
 271+ 333E              Saved_Speed:
 272+ 333E 00                           db      0
 273+ 333F 00 00 00 00  Saved_MMU       db      0,0,0, 0,0,0   // MMU2-MMU7
 273+ 3343 00 00
 274+ 3345
 275+ 3345              Saved_Layer:
 276+ 3345 00                           db      0           // graphics current mode
 277+ 3346
 278+ 3346 00 00        Saved_Basic_Add dw      0
 279+ 3348
 280+ 3348              //  ______________________________________________________________________
 281+ 3348              WarmRoutine:
 282+ 3348              ColdRoutine:
 283+ 3348              //  ______________________________________________________________________
 284+ 3348              // 0.
 285+ 3348 ED 73 08 20                  ld      (SP_Basic), sp
 286+ 334C 31 00 40                     ld      sp, $4000               // safe area
 287+ 334F D9                           exx
 288+ 3350 22 46 33                     ld      (Saved_Basic_Add), hl   //  save Basic's h'l' return address
 289+ 3353 D9                           exx
 290+ 3354
 291+ 3354              //  ______________________________________________________________________
 292+ 3354              // 1.
 293+ 3354              // Accepts one parameter from Basic as the filename to load
 294+ 3354 7C                           ld      a, h
 295+ 3355 B5                           or      l
 296+ 3356 28 15                        jr      z, Skip_Parameter
 297+ 3358
 298+ 3358 11 7A 3F                     ld      de, Param_From_Basic
 299+ 335B 01 00 00                     ld      bc, 0
 300+ 335E              Parameter_Loop:
 301+ 335E 7E                           ld      a, (hl)
 302+ 335F FE 3A                        cp      ':'
 303+ 3361 28 08                        jr      z, End_Parameter
 304+ 3363 FE 0D                        cp      $0D
 305+ 3365 28 04                        jr      z, End_Parameter
 306+ 3367 ED A0                        ldi
 307+ 3369 18 F3                        jr      Parameter_Loop
 308+ 336B              End_Parameter:
 309+ 336B                              // append 0x00
 310+ 336B AF                           xor     a
 311+ 336C 12                           ld      (de), a
 312+ 336D                          //  ld      hl, 0
 313+ 336D                          //  sbc     hl, bc
 314+ 336D                          //  ld      a, l
 315+ 336D                          //  ld      (Len_Filename), a
 316+ 336D              Skip_Parameter:
 317+ 336D
 318+ 336D              //  ______________________________________________________________________
 319+ 336D              // 2. prepare save-area address and hw register port
 320+ 336D 21 3E 33                     ld      hl, Saved_Speed     // save-area
 321+ 3370              //              ld      bc, $243B               // hw-register port
 322+ 3370              //  ______________________________________________________________________
 323+ 3370              // 2.1
 324+ 3370              // ask / read speed and MMU status
 325+ 3370 3E 07                        ld      a ,$07                  // read current speed
 326+ 3372 CD 2B 34                     call    Get_MMU_status          // Saved_Speed becomes Saved_MMU
 327+ 3375 16 03                        ld      d, 3                    // set top speed
 328+ 3377 B2                           or      d                       // reuse data just read
 329+ 3378 ED 92 07                     nextreg 07, a
 330+ 337B
 331+ 337B 1E 06                        ld      e, 6                    // loop limit for six 8k-pages
 332+ 337D              MMU_read_loop:
 333+ 337D 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 334+ 337F 93                           sub     e                       // calculated as difference from $58 ($58-6 ... $58-1)
 335+ 3380 CD 2B 34                     call    Get_MMU_status
 336+ 3383 1D                           dec     e
 337+ 3384 20 F7                        jr      nz, MMU_read_loop
 338+ 3386              //  ______________________________________________________________________
 339+ 3386              // 2.2
 340+ 3386              // save current LAYER status
 341+ 3386
 342+ 3386 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 343+ 3389 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 344+ 338B 3E 00                        ld      a, 0        // query current status
 345+ 338D CF                           rst     8
 346+ 338E 94                           db      $94         // carry flag set on success
 347+ 338F
 348+ 338F 32 45 33                     ld      (Saved_Layer), a     // store after MMUs
 349+ 3392              //  ______________________________________________________________________
 350+ 3392              // 3.
 351+ 3392              // Reserve from OS twelve pages from $20 upward.
 352+ 3392 CD 06 34                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 353+ 3395
 354+ 3395              //  ______________________________________________________________________
 355+ 3395              // 4.
 356+ 3395              // Backup MMU2 content to page $28
 357+ 3395 21 00 60                     ld      hl, $6000
 358+ 3398 11 00 40                     ld      de, $4000
 359+ 339B CD F6 33                     call    Backup_Restore_MMU
 360+ 339E
 361+ 339E              //  ______________________________________________________________________
 362+ 339E              // 5.
 363+ 339E              // Set current drive/directory
 364+ 339E
 365+ 339E              //              ld      a, $00
 366+ 339E              //              rst     8
 367+ 339E              //              defb    $89     ; m_getsetdrv
 368+ 339E              //              rst     8
 369+ 339E              //              defb    $89     ; m_getsetdrv
 370+ 339E
 371+ 339E CD CB 33                     call    Set_Cur_Dir
 372+ 33A1
 373+ 33A1              //  ______________________________________________________________________
 374+ 33A1              // 6.
 375+ 33A1              // Setup MMU for Forth system (set MMU4-MMU6 to $28-$2A and MMU7 to $20)
 376+ 33A1 CD E5 33                     call    Set_forth_MMU
 377+ 33A4
 378+ 33A4              //  ______________________________________________________________________
 379+ 33A4              // 7.
 380+ 33A4              // Get current handle via M_GETHANDLE and load ram
 381+ 33A4 CF                           rst     8
 382+ 33A5 8D                           DEFB    $8d             ; M_GETHANDLE
 383+ 33A6 F5                           push    af
 384+ 33A7 21 00 E0                     ld      hl, $E000       ; that now is attached to 8k-page $20
 385+ 33AA 01 FF 1F                     ld      bc, $1FFF
 386+ 33AD CF                           rst     8
 387+ 33AE 9D                           DEFB    $9D             ; f_read
 388+ 33AF F1                           pop     af
 389+ 33B0 CF                           rst     8
 390+ 33B1 9B                           DEFB    $9B             ; f_close
 391+ 33B2
 392+ 33B2              //  ______________________________________________________________________
 393+ 33B2              // 8.
 394+ 33B2              // set LAYER 1,2
 395+ 33B2 D9                           exx
 396+ 33B3 01 02 01                     ld      bc, $0102
 397+ 33B6 CD 31 34                     call    Set_Layer
 398+ 33B9
 399+ 33B9              //  ______________________________________________________________________
 400+ 33B9              // 9.
 401+ 33B9              // pre-set the four main 16-bit registers
 402+ 33B9 ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 403+ 33BD ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 404+ 33C1 01 19 33                     ld      bc, Cold_Start          // Instruction Pointer
 405+ 33C4 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 406+ 33C8
 407+ 33C8                              // unlimited scrolling: print chr$26;chr$0
 408+ 33C8                              // ld      a, 26
 409+ 33C8                              // rst     $10
 410+ 33C8                              // xor     a
 411+ 33C8                              // rst     $10
 412+ 33C8
 413+ 33C8 FB                           ei
 414+ 33C9
 415+ 33C9                          //  push    ix
 416+ 33C9                          //  pop     hl
 417+ 33C9                          //  rst     $20
 418+ 33C9                              next
 418+ 33C9 DD E9       >                jp      (ix)
 419+ 33CB
 420+ 33CB
 421+ 33CB              //  ______________________________________________________________________
 422+ 33CB              // Routine
 423+ 33CB              // set current directory  /tools/vForth
 424+ 33CB              Set_Cur_Dir:
 425+ 33CB 21 1B 33                     ld      hl, Tools_vForth_Directory
 426+ 33CE 11 00 40                     ld      de, $4000 // use some temporary safe zone
 427+ 33D1 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 428+ 33D4 ED B0                        ldir
 429+ 33D6 D9                           exx
 430+ 33D7 21 00 40                     ld      hl, $4000
 431+ 33DA                          //  ld      hl, Tools_vForth_Directory
 432+ 33DA D9                           exx
 433+ 33DB 11 B1 01                     ld      de, $01B1
 434+ 33DE 0E 07                        ld      c, 7
 435+ 33E0 3E 00                        ld      a, 0
 436+ 33E2 CF                           rst     8
 437+ 33E3 94                           db      $94     // carry flag set on success !
 438+ 33E4                                              // but we don't care for now, in case
 439+ 33E4                                              // later INIT-BLK will issue an error
 440+ 33E4 C9                           ret
 441+ 33E5
 442+ 33E5              //  ______________________________________________________________________
 443+ 33E5              // Routine
 444+ 33E5              // set MMU7 to $20
 445+ 33E5              Set_forth_MMU:
 446+ 33E5                      ////    nextreg $53, $28         ;   MMU3  = $6000 no !!
 447+ 33E5 ED 91 54 28                  nextreg $54, $28         ;   MMU4  = $8000
 448+ 33E9 ED 91 55 29                  nextreg $55, $29         ;   MMU5  = $A000
 449+ 33ED ED 91 56 2A                  nextreg $56, $2A         ;   MMU6  = $C000
 450+ 33F1 ED 91 57 20                  nextreg $57, $20         ;   MMU7  = $E000
 451+ 33F5 C9                           ret
 452+ 33F6
 453+ 33F6              //  ______________________________________________________________________
 454+ 33F6              // Routine, safe backup
 455+ 33F6              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 456+ 33F6              Backup_Restore_MMU:
 457+ 33F6 ED 91 52 2B                  nextreg $52, $2B        ;   MMU2  = $4000 never modified
 458+ 33FA 01 00 20                     ld      bc, $2000       ;   8k
 459+ 33FD ED B0                        ldir
 460+ 33FF 3A 3F 33                     ld      a, (Saved_MMU)
 461+ 3402 ED 92 52                     nextreg $52, a
 462+ 3405 C9                           ret
 463+ 3406
 464+ 3406              //  ______________________________________________________________________
 465+ 3406              // Routine:
 466+ 3406              // reserve MMU pages
 467+ 3406              // $20 - $27 Heap Space (8 pages)
 468+ 3406              // $28 - $2A Main memory
 469+ 3406              // $2B : backup of MMU3
 470+ 3406              Restore_Reserve_MMU:
 471+ 3406 2E 20                        ld      l, $20      // first page
 472+ 3408 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 473+ 340A              Reserve_MMU_Loop:
 474+ 340A 7D                           ld      a, l            // pass page through a
 475+ 340B D9                           exx
 476+ 340C                               // parameters:
 477+ 340C              Deallocate_MMU:
 478+ 340C 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 479+ 340F 5F                            ld      e, a           // E' is bank-id
 480+ 3410 D9                           exx
 481+ 3411 E5                           push    hl
 482+ 3412
 483+ 3412 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 484+ 3414 3E 01                        ld      a, 1
 485+ 3416 11 BD 01                     ld      de, $01BD  // IDE_BANK
 486+ 3419 CF                           rst     8
 487+ 341A 94                           db      $94     // M_P3DOS
 488+ 341B
 489+ 341B E1                           pop     hl
 490+ 341C 2C                           inc     l       // next page number
 491+ 341D 25                           dec     h       // decrease counter.
 492+ 341E 20 EA                        jr      nz, Reserve_MMU_Loop
 493+ 3420 C9                           ret
 494+ 3421
 495+ 3421              //  ______________________________________________________________________
 496+ 3421              // Routine
 497+ 3421              // Input:  bc=$243B, a=reg, hl=array
 498+ 3421              // Operation: set  hardware register  a  to value at  (hl)
 499+ 3421              // Output: bc=$243B, a=a+1, hl=hl+1
 500+ 3421              Put_MMU_status:
 501+ 3421 56                           ld      d, (hl)
 502+ 3422 ED 79                        out     (c), a
 503+ 3424 04                           inc     b        // 253Bh
 504+ 3425 ED 51                        out     (c), d
 505+ 3427 05                           dec     b        // 243Bh
 506+ 3428 23                           inc     hl
 507+ 3429 3C                           inc     a
 508+ 342A C9                           ret
 509+ 342B
 510+ 342B              //  ______________________________________________________________________
 511+ 342B              // Routine
 512+ 342B              // Input:  bc=$243B, a=reg, hl=array
 513+ 342B              // Operation: get current value of hardware register  a  and store at (hl)
 514+ 342B              // Output: bc=$243B, a=a+1, hl=hl+1
 515+ 342B              Get_MMU_status:
 516+ 342B              //              out     (c), a
 517+ 342B              //              inc     b        // 253Bh
 518+ 342B              //              in      d ,(c)
 519+ 342B              //              dec     b        // 243Bh
 520+ 342B CD 32 21                     call    NEXTREG_read
 521+ 342E 77                           ld      (hl), a
 522+ 342F 23                           inc     hl
 523+ 3430 C9                           ret
 524+ 3431
 525+ 3431              //  ______________________________________________________________________
 526+ 3431              // Routine
 527+ 3431              // set LAYER B,C
 528+ 3431              // Input: bc=$0102 for Layer 1,2
 529+ 3431              Set_Layer:
 530+ 3431 D9                           exx
 531+ 3432 11 D5 01                     ld      de, $01D5
 532+ 3435 0E 07                        ld      c, 7
 533+ 3437 3E 01                        ld      a, 1
 534+ 3439 CF                           rst     8
 535+ 343A 94                           db      $94
 536+ 343B C9                           ret
 537+ 343C
 538+ 343C              //  ______________________________________________________________________
 539+ 343C              //
 540+ 343C              // basic        --
 541+ 343C                              New_Def BASIC, "BASIC", is_code, is_normal
 541+ 343C             >
 541+ 343C             >Dict_Ptr        defl    $
 541+ 343C             >
 541+ 343C             >//              ______________________________________________________________________
 541+ 343C             >//              Heap part
 541+ 343C             >
 541+ 343C             >
 541+ 343C             >                org     (Heap_Ptr & $1FFF) + $E000
 541+ E99F             >
 541+ E99F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ E99F             >Latest_Definition defl  Heap_Ptr
 541+ E99F             >
 541+ E99F             >                // dummy db directives used to calculate length of namec
 541+ E99F 42 41 53 49 >                db      "BASIC"
 541+ E9A3 43          >
 541+ E9A4             >len_NFA         defl    $ - temp_NFA
 541+ E9A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ E99F             >
 541+ E99F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ E9A0 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 541+ E9A4 43          >
 541+ E9A5             >                org     $-1                 // alter last byte of Name just above to set
 541+ E9A4 C3          >                db      {b $} | END_BIT     // msb as name end
 541+ E9A5             >
 541+ E9A5 96 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 541+ E9A7             >Prev_Ptr        defl    Heap_Ptr
 541+ E9A7             >
 541+ E9A7             >mirror_Ptr      defl    $
 541+ E9A7             >
 541+ E9A7 3E 34       >                dw      Dict_Ptr + 2        // xt
 541+ E9A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 541+ E9A9             >
 541+ E9A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 541+ E9A9             >
 541+ E9A9             >//              ______________________________________________________________________
 541+ E9A9             >//              Dictionary part
 541+ E9A9             >
 541+ E9A9             >                org     Dict_Ptr
 541+ 343C             >
 541+ 343C A7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 541+ 343E             >
 541+ 343E             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 343E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 541+ 343E ~           >
 541+ 343E ~           >
 541+ 343E             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 343E             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 343E             >
 541+ 343E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 343E
 543+ 343E              // using dot-command, no more needs to return bc
 544+ 343E              //              pop     bc                      // return  TOS  value to Basic
 545+ 343E
 546+ 343E F3                           di
 547+ 343F
 548+ 343F 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 549+ 3442
 550+ 3442                              // address
 551+ 3442 21 3E 33                     ld      hl, Saved_Speed
 552+ 3445 01 3B 24                     ld      bc , $243B
 553+ 3448
 554+ 3448                              // set speed
 555+ 3448 3E 07                        ld      a, $07
 556+ 344A CD 21 34                     call    Put_MMU_status
 557+ 344D
 558+ 344D                        //    inc     hl
 559+ 344D                        //    inc     hl
 560+ 344D                              // set MMU pages
 561+ 344D 3E 52                        ld      a, $52
 562+ 344F 1E 06                        ld      e, 6
 563+ 3451              MMU_put_loop:
 564+ 3451 CD 21 34                     call    Put_MMU_status
 565+ 3454 1D                           dec     e
 566+ 3455 20 FA                        jr      nz, MMU_put_loop
 567+ 3457              //  ______________________________________________________________________
 568+ 3457                              // restore layer ide mode
 569+ 3457 7E                           ld      a, (hl)
 570+ 3458
 571+ 3458                              // decode what service $01D5 returned at startup
 572+ 3458                              // bits 0..1=layer (0,1,2)
 573+ 3458                              // bits 2..3=sub-mode for layer 1 (0=lores,1=ula,2=hires,3=hicol)
 574+ 3458 D9                           exx
 575+ 3459 47                           ld      b, a
 576+ 345A 0F                           rrca
 577+ 345B 0F                           rrca
 578+ 345C E6 03                        and     3
 579+ 345E 4F                           ld      c, a
 580+ 345F 78                           ld      a, b
 581+ 3460 E6 03                        and     3
 582+ 3462 47                           ld      b, a
 583+ 3463 CD 31 34                     call    Set_Layer
 584+ 3466
 585+ 3466              //  ______________________________________________________________________
 586+ 3466              //              Restore page from backup
 587+ 3466 21 00 40                     ld      hl, $4000
 588+ 3469 11 00 60                     ld      de, $6000
 589+ 346C CD F6 33                     call    Backup_Restore_MMU
 590+ 346F              //  ______________________________________________________________________
 591+ 346F              //
 592+ 346F                              // free 8k pages
 593+ 346F 3E 03                        ld      a, 3
 594+ 3471 32 0D 34                     ld      (Deallocate_MMU+1), a
 595+ 3474 CD 06 34                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 596+ 3477              //  ______________________________________________________________________
 597+ 3477
 598+ 3477                              // restore basic pointers
 599+ 3477 2A 46 33                     ld      hl, (Saved_Basic_Add)   // restore h'l'
 600+ 347A D9                           exx
 601+ 347B ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 602+ 347F
 603+ 347F FB                           ei
 604+ 3480
 605+ 3480                              // these two bytes are patched by BLK-INIT with RST8+$FF
 606+ 3480              Exit_with_error:
 607+ 3480 AF                           xor     a
 608+ 3481 76                           halt
 609+ 3482 C9                           ret                             // to where USR Basic was left
 610+ 3483
 611+ 3483              //  ______________________________________________________________________
 612+ 3483              //
 613+ 3483              // +-           n1 n2 -- n3
 614+ 3483              // leaves n1 with the sign of n2 as n3.
 615+ 3483                              Colon_Def PLUS_MINUS, "+-", is_normal
 615+ 3483             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 615+ 3483             >
 615+ 3483             >Dict_Ptr        defl    $
 615+ 3483             >
 615+ 3483             >//              ______________________________________________________________________
 615+ 3483             >//              Heap part
 615+ 3483             >
 615+ 3483             >
 615+ 3483             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E9A9             >
 615+ E9A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E9A9             >Latest_Definition defl  Heap_Ptr
 615+ E9A9             >
 615+ E9A9             >                // dummy db directives used to calculate length of namec
 615+ E9A9 2B 2D       >                db      "+-"
 615+ E9AB             >len_NFA         defl    $ - temp_NFA
 615+ E9AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E9A9             >
 615+ E9A9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E9AA 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 615+ E9AC             >                org     $-1                 // alter last byte of Name just above to set
 615+ E9AB AD          >                db      {b $} | END_BIT     // msb as name end
 615+ E9AC             >
 615+ E9AC 9F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E9AE             >Prev_Ptr        defl    Heap_Ptr
 615+ E9AE             >
 615+ E9AE             >mirror_Ptr      defl    $
 615+ E9AE             >
 615+ E9AE 85 34       >                dw      Dict_Ptr + 2        // xt
 615+ E9B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E9B0             >
 615+ E9B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E9B0             >
 615+ E9B0             >//              ______________________________________________________________________
 615+ E9B0             >//              Dictionary part
 615+ E9B0             >
 615+ E9B0             >                org     Dict_Ptr
 615+ 3483             >
 615+ 3483 AE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 3485             >
 615+ 3485             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 3485 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 3488             >
 615+ 3488             >
 615+ 3488             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 3488             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 3488             >
 615+ 3488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 3488 F3 24                        dw      ZLESS                   // 0<
 617+ 348A                                                              // if
 618+ 348A 8D 20                        dw      ZBRANCH
 619+ 348C 04 00                        dw      Plus_Minus_Endif - $
 620+ 348E 4A 25                        dw          MINUS               //      minus
 621+ 3490              Plus_Minus_Endif:                               // endif
 622+ 3490 BD 24                        dw      EXIT                    // ;
 623+ 3492
 624+ 3492              //  ______________________________________________________________________
 625+ 3492              //
 626+ 3492              // d+-          d1 n -- d2
 627+ 3492              // leaves d1 with the sign of n as d2.
 628+ 3492                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 628+ 3492             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 628+ 3492             >
 628+ 3492             >Dict_Ptr        defl    $
 628+ 3492             >
 628+ 3492             >//              ______________________________________________________________________
 628+ 3492             >//              Heap part
 628+ 3492             >
 628+ 3492             >
 628+ 3492             >                org     (Heap_Ptr & $1FFF) + $E000
 628+ E9B0             >
 628+ E9B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ E9B0             >Latest_Definition defl  Heap_Ptr
 628+ E9B0             >
 628+ E9B0             >                // dummy db directives used to calculate length of namec
 628+ E9B0 44 2B 2D    >                db      "D+-"
 628+ E9B3             >len_NFA         defl    $ - temp_NFA
 628+ E9B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ E9B0             >
 628+ E9B0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ E9B1 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 628+ E9B4             >                org     $-1                 // alter last byte of Name just above to set
 628+ E9B3 AD          >                db      {b $} | END_BIT     // msb as name end
 628+ E9B4             >
 628+ E9B4 A9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 628+ E9B6             >Prev_Ptr        defl    Heap_Ptr
 628+ E9B6             >
 628+ E9B6             >mirror_Ptr      defl    $
 628+ E9B6             >
 628+ E9B6 94 34       >                dw      Dict_Ptr + 2        // xt
 628+ E9B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 628+ E9B8             >
 628+ E9B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 628+ E9B8             >
 628+ E9B8             >//              ______________________________________________________________________
 628+ E9B8             >//              Dictionary part
 628+ E9B8             >
 628+ E9B8             >                org     Dict_Ptr
 628+ 3492             >
 628+ 3492 B6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 628+ 3494             >
 628+ 3494             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 3494 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 3497             >
 628+ 3497             >
 628+ 3497             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 3497             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 3497             >
 628+ 3497             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 3497 F3 24                        dw      ZLESS                   // 0<
 630+ 3499                                                              // if
 631+ 3499 8D 20                        dw      ZBRANCH
 632+ 349B 04 00                        dw      DPlus_Minus_Endif - $
 633+ 349D 57 25                        dw          DMINUS              //      dminus
 634+ 349F              DPlus_Minus_Endif:                              // endif
 635+ 349F BD 24                        dw      EXIT                    // ;
 636+ 34A1
 637+ 34A1              //  ______________________________________________________________________
 638+ 34A1              //
 639+ 34A1              // abs          n1 -- n2
 640+ 34A1                              Colon_Def ABS_OP, "ABS", is_normal
 640+ 34A1             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 640+ 34A1             >
 640+ 34A1             >Dict_Ptr        defl    $
 640+ 34A1             >
 640+ 34A1             >//              ______________________________________________________________________
 640+ 34A1             >//              Heap part
 640+ 34A1             >
 640+ 34A1             >
 640+ 34A1             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ E9B8             >
 640+ E9B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ E9B8             >Latest_Definition defl  Heap_Ptr
 640+ E9B8             >
 640+ E9B8             >                // dummy db directives used to calculate length of namec
 640+ E9B8 41 42 53    >                db      "ABS"
 640+ E9BB             >len_NFA         defl    $ - temp_NFA
 640+ E9BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ E9B8             >
 640+ E9B8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ E9B9 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 640+ E9BC             >                org     $-1                 // alter last byte of Name just above to set
 640+ E9BB D3          >                db      {b $} | END_BIT     // msb as name end
 640+ E9BC             >
 640+ E9BC B0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ E9BE             >Prev_Ptr        defl    Heap_Ptr
 640+ E9BE             >
 640+ E9BE             >mirror_Ptr      defl    $
 640+ E9BE             >
 640+ E9BE A3 34       >                dw      Dict_Ptr + 2        // xt
 640+ E9C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ E9C0             >
 640+ E9C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ E9C0             >
 640+ E9C0             >//              ______________________________________________________________________
 640+ E9C0             >//              Dictionary part
 640+ E9C0             >
 640+ E9C0             >                org     Dict_Ptr
 640+ 34A1             >
 640+ 34A1 BE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 34A3             >
 640+ 34A3             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 34A3 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 34A6             >
 640+ 34A6             >
 640+ 34A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 34A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 34A6             >
 640+ 34A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 34A6 88 25                        dw      DUP                     // dup
 642+ 34A8 85 34                        dw      PLUS_MINUS              // +-
 643+ 34AA BD 24                        dw      EXIT                    // ;
 644+ 34AC
 645+ 34AC              //  ______________________________________________________________________
 646+ 34AC              //
 647+ 34AC              // dabs         d1 -- d2
 648+ 34AC                              Colon_Def DABS, "DABS", is_normal
 648+ 34AC             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 648+ 34AC             >
 648+ 34AC             >Dict_Ptr        defl    $
 648+ 34AC             >
 648+ 34AC             >//              ______________________________________________________________________
 648+ 34AC             >//              Heap part
 648+ 34AC             >
 648+ 34AC             >
 648+ 34AC             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ E9C0             >
 648+ E9C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ E9C0             >Latest_Definition defl  Heap_Ptr
 648+ E9C0             >
 648+ E9C0             >                // dummy db directives used to calculate length of namec
 648+ E9C0 44 41 42 53 >                db      "DABS"
 648+ E9C4             >len_NFA         defl    $ - temp_NFA
 648+ E9C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ E9C0             >
 648+ E9C0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ E9C1 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 648+ E9C5             >                org     $-1                 // alter last byte of Name just above to set
 648+ E9C4 D3          >                db      {b $} | END_BIT     // msb as name end
 648+ E9C5             >
 648+ E9C5 B8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ E9C7             >Prev_Ptr        defl    Heap_Ptr
 648+ E9C7             >
 648+ E9C7             >mirror_Ptr      defl    $
 648+ E9C7             >
 648+ E9C7 AE 34       >                dw      Dict_Ptr + 2        // xt
 648+ E9C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ E9C9             >
 648+ E9C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ E9C9             >
 648+ E9C9             >//              ______________________________________________________________________
 648+ E9C9             >//              Dictionary part
 648+ E9C9             >
 648+ E9C9             >                org     Dict_Ptr
 648+ 34AC             >
 648+ 34AC C7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 34AE             >
 648+ 34AE             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 34AE CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 34B1             >
 648+ 34B1             >
 648+ 34B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 34B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 34B1             >
 648+ 34B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 34B1 88 25                        dw      DUP                     // dup
 650+ 34B3 94 34                        dw      DPLUS_MINUS             // d+-
 651+ 34B5 BD 24                        dw      EXIT                    // ;
 652+ 34B7
 653+ 34B7              //  ______________________________________________________________________
 654+ 34B7              //
 655+ 34B7              // m*           n1 n2 -- d
 656+ 34B7              // multiply two integer giving a double
 657+ 34B7                              Colon_Def MMUL, "M*", is_normal
 657+ 34B7             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 657+ 34B7             >
 657+ 34B7             >Dict_Ptr        defl    $
 657+ 34B7             >
 657+ 34B7             >//              ______________________________________________________________________
 657+ 34B7             >//              Heap part
 657+ 34B7             >
 657+ 34B7             >
 657+ 34B7             >                org     (Heap_Ptr & $1FFF) + $E000
 657+ E9C9             >
 657+ E9C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 657+ E9C9             >Latest_Definition defl  Heap_Ptr
 657+ E9C9             >
 657+ E9C9             >                // dummy db directives used to calculate length of namec
 657+ E9C9 4D 2A       >                db      "M*"
 657+ E9CB             >len_NFA         defl    $ - temp_NFA
 657+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 657+ E9C9             >
 657+ E9C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 657+ E9CA 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 657+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 657+ E9CB AA          >                db      {b $} | END_BIT     // msb as name end
 657+ E9CC             >
 657+ E9CC C0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 657+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 657+ E9CE             >
 657+ E9CE             >mirror_Ptr      defl    $
 657+ E9CE             >
 657+ E9CE B9 34       >                dw      Dict_Ptr + 2        // xt
 657+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 657+ E9D0             >
 657+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 657+ E9D0             >
 657+ E9D0             >//              ______________________________________________________________________
 657+ E9D0             >//              Dictionary part
 657+ E9D0             >
 657+ E9D0             >                org     Dict_Ptr
 657+ 34B7             >
 657+ 34B7 CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 657+ 34B9             >
 657+ 34B9             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 657+ 34B9 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 657+ 34BC             >
 657+ 34BC             >
 657+ 34BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 657+ 34BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 657+ 34BC             >
 657+ 34BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 658+ 34BC D0 25 98 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 658+ 34C0 C7 24
 659+ 34C2 A3 34 81 25                  dw      ABS_OP, SWAP            // abs swap
 660+ 34C6 A3 34 25 24                  dw      ABS_OP, UM_MUL          // abs um*
 661+ 34CA D2 24 94 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 662+ 34CE BD 24                        dw      EXIT                    // ;
 663+ 34D0
 664+ 34D0              //  ______________________________________________________________________
 665+ 34D0              //
 666+ 34D0              // sm/rem       d n -- q r
 667+ 34D0              // Symmetric division: divides a double into n giving quotient q and remainder r
 668+ 34D0              // the remainder has the sign of d.
 669+ 34D0                              Colon_Def SMDIVM, "SM/REM", is_normal
 669+ 34D0             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 669+ 34D0             >
 669+ 34D0             >Dict_Ptr        defl    $
 669+ 34D0             >
 669+ 34D0             >//              ______________________________________________________________________
 669+ 34D0             >//              Heap part
 669+ 34D0             >
 669+ 34D0             >
 669+ 34D0             >                org     (Heap_Ptr & $1FFF) + $E000
 669+ E9D0             >
 669+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 669+ E9D0             >Latest_Definition defl  Heap_Ptr
 669+ E9D0             >
 669+ E9D0             >                // dummy db directives used to calculate length of namec
 669+ E9D0 53 4D 2F 52 >                db      "SM/REM"
 669+ E9D4 45 4D       >
 669+ E9D6             >len_NFA         defl    $ - temp_NFA
 669+ E9D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 669+ E9D0             >
 669+ E9D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 669+ E9D1 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 669+ E9D5 45 4D       >
 669+ E9D7             >                org     $-1                 // alter last byte of Name just above to set
 669+ E9D6 CD          >                db      {b $} | END_BIT     // msb as name end
 669+ E9D7             >
 669+ E9D7 C9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 669+ E9D9             >Prev_Ptr        defl    Heap_Ptr
 669+ E9D9             >
 669+ E9D9             >mirror_Ptr      defl    $
 669+ E9D9             >
 669+ E9D9 D2 34       >                dw      Dict_Ptr + 2        // xt
 669+ E9DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 669+ E9DB             >
 669+ E9DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 669+ E9DB             >
 669+ E9DB             >//              ______________________________________________________________________
 669+ E9DB             >//              Dictionary part
 669+ E9DB             >
 669+ E9DB             >                org     Dict_Ptr
 669+ 34D0             >
 669+ 34D0 D9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 669+ 34D2             >
 669+ 34D2             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 669+ 34D2 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 669+ 34D5             >
 669+ 34D5             >
 669+ 34D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 669+ 34D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 669+ 34D5             >
 669+ 34D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 670+ 34D5 64 25 C7 24                  dw      OVER, TO_R, TO_R        // over >r >r
 670+ 34D9 C7 24
 671+ 34DB AE 34 DD 24                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 671+ 34DF A3 34
 672+ 34E1 4D 24                        dw      UMDIVMOD                // um/mod
 673+ 34E3 D2 24                        dw      R_TO                    // r>
 674+ 34E5 DD 24 98 24                  dw      R_OP, XOR_OP            // r xor
 675+ 34E9 85 34 81 25                  dw      PLUS_MINUS, SWAP        // +- swap
 676+ 34ED D2 24                        dw      R_TO                    // r>
 677+ 34EF 85 34 81 25                  dw      PLUS_MINUS, SWAP        // +- swap
 678+ 34F3 BD 24                        dw      EXIT                    // ;
 679+ 34F5
 680+ 34F5              //  ______________________________________________________________________
 681+ 34F5              //
 682+ 34F5              // fm/mod       d n -- q r
 683+ 34F5              // Floored division: divides a double into n giving quotient q and remainder r
 684+ 34F5              // the remainder has the sign of d.
 685+ 34F5                              Colon_Def FMDIVM, "FM/MOD", is_normal
 685+ 34F5             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 685+ 34F5             >
 685+ 34F5             >Dict_Ptr        defl    $
 685+ 34F5             >
 685+ 34F5             >//              ______________________________________________________________________
 685+ 34F5             >//              Heap part
 685+ 34F5             >
 685+ 34F5             >
 685+ 34F5             >                org     (Heap_Ptr & $1FFF) + $E000
 685+ E9DB             >
 685+ E9DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ E9DB             >Latest_Definition defl  Heap_Ptr
 685+ E9DB             >
 685+ E9DB             >                // dummy db directives used to calculate length of namec
 685+ E9DB 46 4D 2F 4D >                db      "FM/MOD"
 685+ E9DF 4F 44       >
 685+ E9E1             >len_NFA         defl    $ - temp_NFA
 685+ E9E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ E9DB             >
 685+ E9DB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ E9DC 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 685+ E9E0 4F 44       >
 685+ E9E2             >                org     $-1                 // alter last byte of Name just above to set
 685+ E9E1 C4          >                db      {b $} | END_BIT     // msb as name end
 685+ E9E2             >
 685+ E9E2 D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 685+ E9E4             >Prev_Ptr        defl    Heap_Ptr
 685+ E9E4             >
 685+ E9E4             >mirror_Ptr      defl    $
 685+ E9E4             >
 685+ E9E4 F7 34       >                dw      Dict_Ptr + 2        // xt
 685+ E9E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 685+ E9E6             >
 685+ E9E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 685+ E9E6             >
 685+ E9E6             >//              ______________________________________________________________________
 685+ E9E6             >//              Dictionary part
 685+ E9E6             >
 685+ E9E6             >                org     Dict_Ptr
 685+ 34F5             >
 685+ 34F5 E4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 685+ 34F7             >
 685+ 34F7             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 34F7 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 34FA             >
 685+ 34FA             >
 685+ 34FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 34FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 34FA             >
 685+ 34FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 34FA 88 25 C7 24                  dw      DUP, TO_R               // dup >r
 687+ 34FE D2 34                        dw      SMDIVM
 688+ 3500 64 25 88 25                  dw      OVER, DUP
 689+ 3504 E2 24 E2 24                  dw      ZEQUAL, ZEQUAL
 690+ 3508 81 25 F3 24                  dw      SWAP, ZLESS
 691+ 350C DD 24 F3 24                  dw      R_OP, ZLESS
 692+ 3510 98 24 7D 24                  dw      XOR_OP, AND_OP
 693+ 3514 8D 20                        dw      ZBRANCH
 694+ 3516 10 00                        dw      Fm_Mod_Else - $
 695+ 3518 2A 25                        dw          ONE_SUBTRACT
 696+ 351A 81 25 D2 24                  dw          SWAP, R_TO
 697+ 351E 0A 25 81 25                  dw          PLUS, SWAP
 698+ 3522 89 20                        dw      BRANCH
 699+ 3524 06 00                        dw      Fm_Mod_Endif - $
 700+ 3526              Fm_Mod_Else:
 701+ 3526 D2 24 6D 25                  dw          R_TO, DROP
 702+ 352A              Fm_Mod_Endif:
 703+ 352A BD 24                        dw      EXIT
 704+ 352C              //              dw      TWO_DUP                 // 2dup
 705+ 352C              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 706+ 352C              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 707+ 352C              //              dw      UMDIVMOD                // um/mod
 708+ 352C              //              dw      SWAP                    // swap
 709+ 352C              //              dw      II, ZLESS               // i'
 710+ 352C              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 711+ 352C              //              dw      R_TO                    // r>
 712+ 352C              //              dw      PLUS_MINUS, SWAP        // +- swap
 713+ 352C              //              dw      R_OP                    // r@
 714+ 352C              //              dw      ZLESS                   // i'
 715+ 352C              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 716+ 352C              //              dw      R_TO                    // r>
 717+ 352C              //              dw      PLUS_MINUS              // +- swap
 718+ 352C              //              dw      EXIT                    // ;
 719+ 352C
 720+ 352C              //  ______________________________________________________________________
 721+ 352C              //
 722+ 352C              // m/mod        d n -- q r
 723+ 352C              // multiply two integer giving a double
 724+ 352C                              Colon_Def MDIVM, "M/MOD", is_normal
 724+ 352C             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 724+ 352C             >
 724+ 352C             >Dict_Ptr        defl    $
 724+ 352C             >
 724+ 352C             >//              ______________________________________________________________________
 724+ 352C             >//              Heap part
 724+ 352C             >
 724+ 352C             >
 724+ 352C             >                org     (Heap_Ptr & $1FFF) + $E000
 724+ E9E6             >
 724+ E9E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 724+ E9E6             >Latest_Definition defl  Heap_Ptr
 724+ E9E6             >
 724+ E9E6             >                // dummy db directives used to calculate length of namec
 724+ E9E6 4D 2F 4D 4F >                db      "M/MOD"
 724+ E9EA 44          >
 724+ E9EB             >len_NFA         defl    $ - temp_NFA
 724+ E9EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 724+ E9E6             >
 724+ E9E6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 724+ E9E7 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 724+ E9EB 44          >
 724+ E9EC             >                org     $-1                 // alter last byte of Name just above to set
 724+ E9EB C4          >                db      {b $} | END_BIT     // msb as name end
 724+ E9EC             >
 724+ E9EC DB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 724+ E9EE             >Prev_Ptr        defl    Heap_Ptr
 724+ E9EE             >
 724+ E9EE             >mirror_Ptr      defl    $
 724+ E9EE             >
 724+ E9EE 2E 35       >                dw      Dict_Ptr + 2        // xt
 724+ E9F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 724+ E9F0             >
 724+ E9F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 724+ E9F0             >
 724+ E9F0             >//              ______________________________________________________________________
 724+ E9F0             >//              Dictionary part
 724+ E9F0             >
 724+ E9F0             >                org     Dict_Ptr
 724+ 352C             >
 724+ 352C EE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 724+ 352E             >
 724+ 352E             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 724+ 352E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 724+ 3531             >
 724+ 3531             >
 724+ 3531             >                endif           ; ok        // for other definitions it "points" the correct handler
 724+ 3531             >                // Use of "; ok" to suppress "warning[fwdref]"
 724+ 3531             >
 724+ 3531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 725+ 3531 D2 34                        dw      SMDIVM
 726+ 3533 BD 24                        dw      EXIT                    // ;
 727+ 3535
 728+ 3535              //  ______________________________________________________________________
 729+ 3535              //
 730+ 3535              // m/           d n -- q
 731+ 3535              // multiply two integer giving a double
 732+ 3535                              Colon_Def MDIV, "M/", is_normal
 732+ 3535             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 732+ 3535             >
 732+ 3535             >Dict_Ptr        defl    $
 732+ 3535             >
 732+ 3535             >//              ______________________________________________________________________
 732+ 3535             >//              Heap part
 732+ 3535             >
 732+ 3535             >
 732+ 3535             >                org     (Heap_Ptr & $1FFF) + $E000
 732+ E9F0             >
 732+ E9F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 732+ E9F0             >Latest_Definition defl  Heap_Ptr
 732+ E9F0             >
 732+ E9F0             >                // dummy db directives used to calculate length of namec
 732+ E9F0 4D 2F       >                db      "M/"
 732+ E9F2             >len_NFA         defl    $ - temp_NFA
 732+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 732+ E9F0             >
 732+ E9F0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 732+ E9F1 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 732+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 732+ E9F2 AF          >                db      {b $} | END_BIT     // msb as name end
 732+ E9F3             >
 732+ E9F3 E6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 732+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 732+ E9F5             >
 732+ E9F5             >mirror_Ptr      defl    $
 732+ E9F5             >
 732+ E9F5 37 35       >                dw      Dict_Ptr + 2        // xt
 732+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 732+ E9F7             >
 732+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 732+ E9F7             >
 732+ E9F7             >//              ______________________________________________________________________
 732+ E9F7             >//              Dictionary part
 732+ E9F7             >
 732+ E9F7             >                org     Dict_Ptr
 732+ 3535             >
 732+ 3535 F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 732+ 3537             >
 732+ 3537             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 732+ 3537 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 732+ 353A             >
 732+ 353A             >
 732+ 353A             >                endif           ; ok        // for other definitions it "points" the correct handler
 732+ 353A             >                // Use of "; ok" to suppress "warning[fwdref]"
 732+ 353A             >
 732+ 353A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 733+ 353A 2E 35 72 25                  dw      MDIVM, NIP
 734+ 353E BD 24                        dw      EXIT                    // ;
 735+ 3540
 736+ 3540              //  ______________________________________________________________________
 737+ 3540              //
 738+ 3540              // *            n1 n2 -- n3
 739+ 3540              // multiply two integer
 740+ 3540                              Colon_Def MUL, "*", is_normal
 740+ 3540             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 740+ 3540             >
 740+ 3540             >Dict_Ptr        defl    $
 740+ 3540             >
 740+ 3540             >//              ______________________________________________________________________
 740+ 3540             >//              Heap part
 740+ 3540             >
 740+ 3540             >
 740+ 3540             >                org     (Heap_Ptr & $1FFF) + $E000
 740+ E9F7             >
 740+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 740+ E9F7             >Latest_Definition defl  Heap_Ptr
 740+ E9F7             >
 740+ E9F7             >                // dummy db directives used to calculate length of namec
 740+ E9F7 2A          >                db      "*"
 740+ E9F8             >len_NFA         defl    $ - temp_NFA
 740+ E9F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 740+ E9F7             >
 740+ E9F7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 740+ E9F8 2A          >                db      "*"               // name string in 7-bit ascii, but
 740+ E9F9             >                org     $-1                 // alter last byte of Name just above to set
 740+ E9F8 AA          >                db      {b $} | END_BIT     // msb as name end
 740+ E9F9             >
 740+ E9F9 F0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 740+ E9FB             >Prev_Ptr        defl    Heap_Ptr
 740+ E9FB             >
 740+ E9FB             >mirror_Ptr      defl    $
 740+ E9FB             >
 740+ E9FB 42 35       >                dw      Dict_Ptr + 2        // xt
 740+ E9FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 740+ E9FD             >
 740+ E9FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 740+ E9FD             >
 740+ E9FD             >//              ______________________________________________________________________
 740+ E9FD             >//              Dictionary part
 740+ E9FD             >
 740+ E9FD             >                org     Dict_Ptr
 740+ 3540             >
 740+ 3540 FB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 740+ 3542             >
 740+ 3542             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 740+ 3542 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 740+ 3545             >
 740+ 3545             >
 740+ 3545             >                endif           ; ok        // for other definitions it "points" the correct handler
 740+ 3545             >                // Use of "; ok" to suppress "warning[fwdref]"
 740+ 3545             >
 740+ 3545             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 741+ 3545 B9 34 6D 25                  dw      MMUL, DROP              // m* drop
 742+ 3549 BD 24                        dw      EXIT                    // ;
 743+ 354B
 744+ 354B              //  ______________________________________________________________________
 745+ 354B              //
 746+ 354B              // /mod         n1 n2 -- n3 n4
 747+ 354B              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 748+ 354B              // The remainder has the sign of n1
 749+ 354B                              Colon_Def DIVMOD, "/MOD", is_normal
 749+ 354B             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 749+ 354B             >
 749+ 354B             >Dict_Ptr        defl    $
 749+ 354B             >
 749+ 354B             >//              ______________________________________________________________________
 749+ 354B             >//              Heap part
 749+ 354B             >
 749+ 354B             >
 749+ 354B             >                org     (Heap_Ptr & $1FFF) + $E000
 749+ E9FD             >
 749+ E9FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ E9FD             >Latest_Definition defl  Heap_Ptr
 749+ E9FD             >
 749+ E9FD             >                // dummy db directives used to calculate length of namec
 749+ E9FD 2F 4D 4F 44 >                db      "/MOD"
 749+ EA01             >len_NFA         defl    $ - temp_NFA
 749+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ E9FD             >
 749+ E9FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ E9FE 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 749+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 749+ EA01 C4          >                db      {b $} | END_BIT     // msb as name end
 749+ EA02             >
 749+ EA02 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 749+ EA04             >Prev_Ptr        defl    Heap_Ptr
 749+ EA04             >
 749+ EA04             >mirror_Ptr      defl    $
 749+ EA04             >
 749+ EA04 4D 35       >                dw      Dict_Ptr + 2        // xt
 749+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 749+ EA06             >
 749+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 749+ EA06             >
 749+ EA06             >//              ______________________________________________________________________
 749+ EA06             >//              Dictionary part
 749+ EA06             >
 749+ EA06             >                org     Dict_Ptr
 749+ 354B             >
 749+ 354B 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 749+ 354D             >
 749+ 354D             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 354D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 3550             >
 749+ 3550             >
 749+ 3550             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 3550             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 3550             >
 749+ 3550             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 3550 C7 24 3D 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 750+ 3554 D2 24
 751+ 3556 2E 35                        dw      MDIVM                   // m/mod
 752+ 3558 BD 24                        dw      EXIT                    // ;
 753+ 355A
 754+ 355A              //  ______________________________________________________________________
 755+ 355A              //
 756+ 355A              // /            n1 n2 -- n3
 757+ 355A              // division
 758+ 355A                              Colon_Def DIV, "/", is_normal
 758+ 355A             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 758+ 355A             >
 758+ 355A             >Dict_Ptr        defl    $
 758+ 355A             >
 758+ 355A             >//              ______________________________________________________________________
 758+ 355A             >//              Heap part
 758+ 355A             >
 758+ 355A             >
 758+ 355A             >                org     (Heap_Ptr & $1FFF) + $E000
 758+ EA06             >
 758+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 758+ EA06             >Latest_Definition defl  Heap_Ptr
 758+ EA06             >
 758+ EA06             >                // dummy db directives used to calculate length of namec
 758+ EA06 2F          >                db      "/"
 758+ EA07             >len_NFA         defl    $ - temp_NFA
 758+ EA07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 758+ EA06             >
 758+ EA06 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 758+ EA07 2F          >                db      "/"               // name string in 7-bit ascii, but
 758+ EA08             >                org     $-1                 // alter last byte of Name just above to set
 758+ EA07 AF          >                db      {b $} | END_BIT     // msb as name end
 758+ EA08             >
 758+ EA08 FD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 758+ EA0A             >Prev_Ptr        defl    Heap_Ptr
 758+ EA0A             >
 758+ EA0A             >mirror_Ptr      defl    $
 758+ EA0A             >
 758+ EA0A 5C 35       >                dw      Dict_Ptr + 2        // xt
 758+ EA0C             >Heap_Ptr        defl    $ - $E000           // save current HP
 758+ EA0C             >
 758+ EA0C             >Current_HP      defl  $ - $E000             // used to set HP once!
 758+ EA0C             >
 758+ EA0C             >//              ______________________________________________________________________
 758+ EA0C             >//              Dictionary part
 758+ EA0C             >
 758+ EA0C             >                org     Dict_Ptr
 758+ 355A             >
 758+ 355A 0A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 758+ 355C             >
 758+ 355C             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 758+ 355C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 758+ 355F             >
 758+ 355F             >
 758+ 355F             >                endif           ; ok        // for other definitions it "points" the correct handler
 758+ 355F             >                // Use of "; ok" to suppress "warning[fwdref]"
 758+ 355F             >
 758+ 355F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 759+ 355F 4D 35 72 25                  dw      DIVMOD, NIP             // /mod nip
 760+ 3563 BD 24                        dw      EXIT                    // ;
 761+ 3565
 762+ 3565              //  ______________________________________________________________________
 763+ 3565              //
 764+ 3565              // mod          n1 n2 -- n3
 765+ 3565                              Colon_Def MOD, "MOD", is_normal
 765+ 3565             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 765+ 3565             >
 765+ 3565             >Dict_Ptr        defl    $
 765+ 3565             >
 765+ 3565             >//              ______________________________________________________________________
 765+ 3565             >//              Heap part
 765+ 3565             >
 765+ 3565             >
 765+ 3565             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ EA0C             >
 765+ EA0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ EA0C             >Latest_Definition defl  Heap_Ptr
 765+ EA0C             >
 765+ EA0C             >                // dummy db directives used to calculate length of namec
 765+ EA0C 4D 4F 44    >                db      "MOD"
 765+ EA0F             >len_NFA         defl    $ - temp_NFA
 765+ EA0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ EA0C             >
 765+ EA0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ EA0D 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 765+ EA10             >                org     $-1                 // alter last byte of Name just above to set
 765+ EA0F C4          >                db      {b $} | END_BIT     // msb as name end
 765+ EA10             >
 765+ EA10 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ EA12             >Prev_Ptr        defl    Heap_Ptr
 765+ EA12             >
 765+ EA12             >mirror_Ptr      defl    $
 765+ EA12             >
 765+ EA12 67 35       >                dw      Dict_Ptr + 2        // xt
 765+ EA14             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ EA14             >
 765+ EA14             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ EA14             >
 765+ EA14             >//              ______________________________________________________________________
 765+ EA14             >//              Dictionary part
 765+ EA14             >
 765+ EA14             >                org     Dict_Ptr
 765+ 3565             >
 765+ 3565 12 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 3567             >
 765+ 3567             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 3567 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 356A             >
 765+ 356A             >
 765+ 356A             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 356A             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 356A             >
 765+ 356A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 356A 4D 35 6D 25                  dw      DIVMOD, DROP            // /mod drop
 767+ 356E BD 24                        dw      EXIT                    // ;
 768+ 3570
 769+ 3570              //  ______________________________________________________________________
 770+ 3570              //
 771+ 3570              // */mod        n1 n2 n3 -- n4 n5
 772+ 3570              // leaves the quotient n5 and the remainder n4 of the operation
 773+ 3570              // (n1 * n2) / n3. The intermediate passage through a double number
 774+ 3570              // avoids loss of precision
 775+ 3570                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 775+ 3570             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 775+ 3570             >
 775+ 3570             >Dict_Ptr        defl    $
 775+ 3570             >
 775+ 3570             >//              ______________________________________________________________________
 775+ 3570             >//              Heap part
 775+ 3570             >
 775+ 3570             >
 775+ 3570             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ EA14             >
 775+ EA14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ EA14             >Latest_Definition defl  Heap_Ptr
 775+ EA14             >
 775+ EA14             >                // dummy db directives used to calculate length of namec
 775+ EA14 2A 2F 4D 4F >                db      "*/MOD"
 775+ EA18 44          >
 775+ EA19             >len_NFA         defl    $ - temp_NFA
 775+ EA19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ EA14             >
 775+ EA14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ EA15 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 775+ EA19 44          >
 775+ EA1A             >                org     $-1                 // alter last byte of Name just above to set
 775+ EA19 C4          >                db      {b $} | END_BIT     // msb as name end
 775+ EA1A             >
 775+ EA1A 0C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ EA1C             >Prev_Ptr        defl    Heap_Ptr
 775+ EA1C             >
 775+ EA1C             >mirror_Ptr      defl    $
 775+ EA1C             >
 775+ EA1C 72 35       >                dw      Dict_Ptr + 2        // xt
 775+ EA1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ EA1E             >
 775+ EA1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ EA1E             >
 775+ EA1E             >//              ______________________________________________________________________
 775+ EA1E             >//              Dictionary part
 775+ EA1E             >
 775+ EA1E             >                org     Dict_Ptr
 775+ 3570             >
 775+ 3570 1C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 3572             >
 775+ 3572             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 3572 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 3575             >
 775+ 3575             >
 775+ 3575             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 3575             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 3575             >
 775+ 3575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 3575 C7 24 B9 34                  dw      TO_R, MMUL              // >r  m*
 777+ 3579 D2 24 2E 35                  dw      R_TO, MDIVM             // r>  m/mod
 778+ 357D BD 24                        dw      EXIT                    // ;
 779+ 357F
 780+ 357F              //  ______________________________________________________________________
 781+ 357F              //
 782+ 357F              // */          n1 n2 n3 -- n4
 783+ 357F              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 784+ 357F                              Colon_Def MUL_DIV, "*/", is_normal
 784+ 357F             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 784+ 357F             >
 784+ 357F             >Dict_Ptr        defl    $
 784+ 357F             >
 784+ 357F             >//              ______________________________________________________________________
 784+ 357F             >//              Heap part
 784+ 357F             >
 784+ 357F             >
 784+ 357F             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ EA1E             >
 784+ EA1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ EA1E             >Latest_Definition defl  Heap_Ptr
 784+ EA1E             >
 784+ EA1E             >                // dummy db directives used to calculate length of namec
 784+ EA1E 2A 2F       >                db      "*/"
 784+ EA20             >len_NFA         defl    $ - temp_NFA
 784+ EA20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ EA1E             >
 784+ EA1E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ EA1F 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 784+ EA21             >                org     $-1                 // alter last byte of Name just above to set
 784+ EA20 AF          >                db      {b $} | END_BIT     // msb as name end
 784+ EA21             >
 784+ EA21 14 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ EA23             >Prev_Ptr        defl    Heap_Ptr
 784+ EA23             >
 784+ EA23             >mirror_Ptr      defl    $
 784+ EA23             >
 784+ EA23 81 35       >                dw      Dict_Ptr + 2        // xt
 784+ EA25             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ EA25             >
 784+ EA25             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ EA25             >
 784+ EA25             >//              ______________________________________________________________________
 784+ EA25             >//              Dictionary part
 784+ EA25             >
 784+ EA25             >                org     Dict_Ptr
 784+ 357F             >
 784+ 357F 23 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 3581             >
 784+ 3581             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 3581 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 3584             >
 784+ 3584             >
 784+ 3584             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 3584             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 3584             >
 784+ 3584             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 3584 72 35                        dw     MUL_DIV_MOD              // */mod
 786+ 3586 72 25                        dw     NIP                      // nip
 787+ 3588 BD 24                        dw     EXIT                     // ;
 788+ 358A
 789+ 358A
 790+ 358A              //  ______________________________________________________________________
 791+ 358A              //
 792+ 358A              // m/mod        ud1 u2 -- u3 ud4
 793+ 358A              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 794+ 358A              // All terms are unsigned.
 795+ 358A              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 796+ 358A              //              dw      TO_R                    // >r           ( ud1 )
 797+ 358A              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 798+ 358A              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 799+ 358A              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 800+ 358A              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 801+ 358A              //              dw      EXIT                    // ;
 802+ 358A
 803+ 358A              //  ______________________________________________________________________
 804+ 358A              //
 805+ 358A              // (line)       n1 n2 -- a b
 806+ 358A              // sends the line n1 of block n2 to the disk buffer.
 807+ 358A              // it returns the address a and ca counter b = C/L meaning a whole line.
 808+ 358A                              Colon_Def CLINE, "(LINE)", is_normal
 808+ 358A             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 808+ 358A             >
 808+ 358A             >Dict_Ptr        defl    $
 808+ 358A             >
 808+ 358A             >//              ______________________________________________________________________
 808+ 358A             >//              Heap part
 808+ 358A             >
 808+ 358A             >
 808+ 358A             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ EA25             >
 808+ EA25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ EA25             >Latest_Definition defl  Heap_Ptr
 808+ EA25             >
 808+ EA25             >                // dummy db directives used to calculate length of namec
 808+ EA25 28 4C 49 4E >                db      "(LINE)"
 808+ EA29 45 29       >
 808+ EA2B             >len_NFA         defl    $ - temp_NFA
 808+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ EA25             >
 808+ EA25 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ EA26 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 808+ EA2A 45 29       >
 808+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
 808+ EA2B A9          >                db      {b $} | END_BIT     // msb as name end
 808+ EA2C             >
 808+ EA2C 1E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ EA2E             >Prev_Ptr        defl    Heap_Ptr
 808+ EA2E             >
 808+ EA2E             >mirror_Ptr      defl    $
 808+ EA2E             >
 808+ EA2E 8C 35       >                dw      Dict_Ptr + 2        // xt
 808+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ EA30             >
 808+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ EA30             >
 808+ EA30             >//              ______________________________________________________________________
 808+ EA30             >//              Dictionary part
 808+ EA30             >
 808+ EA30             >                org     Dict_Ptr
 808+ 358A             >
 808+ 358A 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 358C             >
 808+ 358C             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 358C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 358F             >
 808+ 358F             >
 808+ 358F             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 358F             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 358F             >
 808+ 358F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 358F C7 24                        dw      TO_R                    // >r
 810+ 3591 0E 27                        dw      CL                      // c/l
 811+ 3593 15 27 72 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 812+ 3597 D2 24                        dw      R_TO                    // r>
 813+ 3599 1C 27 42 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 813+ 359D 0A 25
 814+ 359F 75 37                        dw      BLOCK                   // block   ( forward )
 815+ 35A1 0A 25                        dw      PLUS                    // +
 816+ 35A3 0E 27                        dw      CL                      // c/l
 817+ 35A5 BD 24                        dw      EXIT                    // ;
 818+ 35A7
 819+ 35A7              //  ______________________________________________________________________
 820+ 35A7              //
 821+ 35A7              // .line        n1 n2 --
 822+ 35A7              // Sends to output line  n1  of screen n2.
 823+ 35A7                              Colon_Def DOT_LINE, ".LINE", is_normal
 823+ 35A7             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 823+ 35A7             >
 823+ 35A7             >Dict_Ptr        defl    $
 823+ 35A7             >
 823+ 35A7             >//              ______________________________________________________________________
 823+ 35A7             >//              Heap part
 823+ 35A7             >
 823+ 35A7             >
 823+ 35A7             >                org     (Heap_Ptr & $1FFF) + $E000
 823+ EA30             >
 823+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ EA30             >Latest_Definition defl  Heap_Ptr
 823+ EA30             >
 823+ EA30             >                // dummy db directives used to calculate length of namec
 823+ EA30 2E 4C 49 4E >                db      ".LINE"
 823+ EA34 45          >
 823+ EA35             >len_NFA         defl    $ - temp_NFA
 823+ EA35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ EA30             >
 823+ EA30 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ EA31 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 823+ EA35 45          >
 823+ EA36             >                org     $-1                 // alter last byte of Name just above to set
 823+ EA35 C5          >                db      {b $} | END_BIT     // msb as name end
 823+ EA36             >
 823+ EA36 25 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 823+ EA38             >Prev_Ptr        defl    Heap_Ptr
 823+ EA38             >
 823+ EA38             >mirror_Ptr      defl    $
 823+ EA38             >
 823+ EA38 A9 35       >                dw      Dict_Ptr + 2        // xt
 823+ EA3A             >Heap_Ptr        defl    $ - $E000           // save current HP
 823+ EA3A             >
 823+ EA3A             >Current_HP      defl  $ - $E000             // used to set HP once!
 823+ EA3A             >
 823+ EA3A             >//              ______________________________________________________________________
 823+ EA3A             >//              Dictionary part
 823+ EA3A             >
 823+ EA3A             >                org     Dict_Ptr
 823+ 35A7             >
 823+ 35A7 38 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 823+ 35A9             >
 823+ 35A9             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 35A9 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 35AC             >
 823+ 35AC             >
 823+ 35AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 35AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 35AC             >
 823+ 35AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 35AC 8C 35 70 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 824+ 35B0 59 2C
 825+ 35B2 BD 24                        dw      EXIT                    // ;
 826+ 35B4
 827+ 35B4              //  ______________________________________________________________________
 828+ 35B4              //
 829+ 35B4              // message       n1 n2 --
 830+ 35B4              // prints error message to current channel.
 831+ 35B4              // if WARNING is 0, prints "MSG#n".
 832+ 35B4              // if WARNING is 1, prints line n of screen 4.
 833+ 35B4              // if WARNING is -1, see ERROR
 834+ 35B4              // value can be negative or beyond block 4.
 835+ 35B4                              Colon_Def MESSAGE, "MESSAGE", is_normal
 835+ 35B4             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 835+ 35B4             >
 835+ 35B4             >Dict_Ptr        defl    $
 835+ 35B4             >
 835+ 35B4             >//              ______________________________________________________________________
 835+ 35B4             >//              Heap part
 835+ 35B4             >
 835+ 35B4             >
 835+ 35B4             >                org     (Heap_Ptr & $1FFF) + $E000
 835+ EA3A             >
 835+ EA3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 835+ EA3A             >Latest_Definition defl  Heap_Ptr
 835+ EA3A             >
 835+ EA3A             >                // dummy db directives used to calculate length of namec
 835+ EA3A 4D 45 53 53 >                db      "MESSAGE"
 835+ EA3E 41 47 45    >
 835+ EA41             >len_NFA         defl    $ - temp_NFA
 835+ EA41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 835+ EA3A             >
 835+ EA3A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 835+ EA3B 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 835+ EA3F 41 47 45    >
 835+ EA42             >                org     $-1                 // alter last byte of Name just above to set
 835+ EA41 C5          >                db      {b $} | END_BIT     // msb as name end
 835+ EA42             >
 835+ EA42 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 835+ EA44             >Prev_Ptr        defl    Heap_Ptr
 835+ EA44             >
 835+ EA44             >mirror_Ptr      defl    $
 835+ EA44             >
 835+ EA44 B6 35       >                dw      Dict_Ptr + 2        // xt
 835+ EA46             >Heap_Ptr        defl    $ - $E000           // save current HP
 835+ EA46             >
 835+ EA46             >Current_HP      defl  $ - $E000             // used to set HP once!
 835+ EA46             >
 835+ EA46             >//              ______________________________________________________________________
 835+ EA46             >//              Dictionary part
 835+ EA46             >
 835+ EA46             >                org     Dict_Ptr
 835+ 35B4             >
 835+ 35B4 44 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 835+ 35B6             >
 835+ 35B6             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 835+ 35B6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 835+ 35B9             >
 835+ 35B9             >
 835+ 35B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 835+ 35B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 835+ 35B9             >
 835+ 35B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 836+ 35B9 55 27 F2 25                  dw      WARNING, FETCH          // warning @
 837+ 35BD                                                              // if
 838+ 35BD 8D 20                        dw      ZBRANCH
 839+ 35BF 12 00                        dw      Message_Else - $
 840+ 35C1 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 840+ 35C5 0A 25
 841+ 35C7 F2 26                        dw          TWO                 //      2
 842+ 35C9 A9 35                        dw          DOT_LINE            //      .line
 843+ 35CB DB 28                        dw          SPACE               //      space
 844+ 35CD                                                              // else
 845+ 35CD
 846+ 35CD 89 20                        dw      BRANCH
 847+ 35CF 0B 00                        dw      Message_ENdif - $
 848+ 35D1              Message_Else:
 849+ 35D1 F6 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 850+ 35D3 04 6D 73 67                  db          4, "msg#"
 850+ 35D7 23
 851+ 35D8 A6 3C                        dw          DOT                 //      .  ( forward )
 852+ 35DA              Message_ENdif:                                  // endif
 853+ 35DA BD 24                        dw      EXIT                    // ;
 854+ 35DC
 855+ 35DC
 856+ 35DC              //  ______________________________________________________________________
 857+ 35DC              //
 858+ 35DC              // device
 859+ 35DC                              Variable_Def DEVICE,   "DEVICE",   2
 859+ 35DC             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 859+ 35DC             >
 859+ 35DC             >Dict_Ptr        defl    $
 859+ 35DC             >
 859+ 35DC             >//              ______________________________________________________________________
 859+ 35DC             >//              Heap part
 859+ 35DC             >
 859+ 35DC             >
 859+ 35DC             >                org     (Heap_Ptr & $1FFF) + $E000
 859+ EA46             >
 859+ EA46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ EA46             >Latest_Definition defl  Heap_Ptr
 859+ EA46             >
 859+ EA46             >                // dummy db directives used to calculate length of namec
 859+ EA46 44 45 56 49 >                db      "DEVICE"
 859+ EA4A 43 45       >
 859+ EA4C             >len_NFA         defl    $ - temp_NFA
 859+ EA4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ EA46             >
 859+ EA46 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ EA47 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 859+ EA4B 43 45       >
 859+ EA4D             >                org     $-1                 // alter last byte of Name just above to set
 859+ EA4C C5          >                db      {b $} | END_BIT     // msb as name end
 859+ EA4D             >
 859+ EA4D 3A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 859+ EA4F             >Prev_Ptr        defl    Heap_Ptr
 859+ EA4F             >
 859+ EA4F             >mirror_Ptr      defl    $
 859+ EA4F             >
 859+ EA4F DE 35       >                dw      Dict_Ptr + 2        // xt
 859+ EA51             >Heap_Ptr        defl    $ - $E000           // save current HP
 859+ EA51             >
 859+ EA51             >Current_HP      defl  $ - $E000             // used to set HP once!
 859+ EA51             >
 859+ EA51             >//              ______________________________________________________________________
 859+ EA51             >//              Dictionary part
 859+ EA51             >
 859+ EA51             >                org     Dict_Ptr
 859+ 35DC             >
 859+ 35DC 4F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 859+ 35DE             >
 859+ 35DE             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 35DE CD CB 26    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 859+ 35E1             >
 859+ 35E1             >
 859+ 35E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 35E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 35E1             >
 859+ 35E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 35E1 02 00       >                dw      2
 860+ 35E3
 861+ 35E3              //  ______________________________________________________________________
 862+ 35E3
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L2.asm
 142  35E3                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt1.asm
   1+ 35E3              //  ______________________________________________________________________
   2+ 35E3              //
   3+ 35E3              //  next-opt.asm
   4+ 35E3              //
   5+ 35E3              //  ZX Spectrum Next - peculiar definitions
   6+ 35E3              //  ______________________________________________________________________
   7+ 35E3
   8+ 35E3              //  ______________________________________________________________________
   9+ 35E3              //
  10+ 35E3              // reg@         n -- b
  11+ 35E3              // read Next REGister n giving byte b
  12+ 35E3              //
  13+ 35E3              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35E3              //              dw      LIT, $243B
  15+ 35E3              //              dw      PSTORE
  16+ 35E3              //              dw      LIT, $253B
  17+ 35E3              //              dw      PFETCH
  18+ 35E3              //              dw      EXIT
  19+ 35E3                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35E3             >
  19+ 35E3             >Dict_Ptr        defl    $
  19+ 35E3             >
  19+ 35E3             >//              ______________________________________________________________________
  19+ 35E3             >//              Heap part
  19+ 35E3             >
  19+ 35E3             >
  19+ 35E3             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA51             >
  19+ EA51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA51             >Latest_Definition defl  Heap_Ptr
  19+ EA51             >
  19+ EA51             >                // dummy db directives used to calculate length of namec
  19+ EA51 52 45 47 40 >                db      "REG@"
  19+ EA55             >len_NFA         defl    $ - temp_NFA
  19+ EA55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA51             >
  19+ EA51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA52 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA56             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA55 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA56             >
  19+ EA56 46 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA58             >Prev_Ptr        defl    Heap_Ptr
  19+ EA58             >
  19+ EA58             >mirror_Ptr      defl    $
  19+ EA58             >
  19+ EA58 E5 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA5A             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA5A             >
  19+ EA5A             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA5A             >
  19+ EA5A             >//              ______________________________________________________________________
  19+ EA5A             >//              Dictionary part
  19+ EA5A             >
  19+ EA5A             >                org     Dict_Ptr
  19+ 35E3             >
  19+ 35E3 58 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35E5             >
  19+ 35E5             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35E5 ~           >
  19+ 35E5 ~           >
  19+ 35E5             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35E5             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35E5             >
  19+ 35E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35E5 D9                           exx
  21+ 35E6 01 3B 24                     ld      bc, $243B
  22+ 35E9 E1                           pop     hl
  23+ 35EA ED 69                        out     (c), l
  24+ 35EC 04                           inc     b
  25+ 35ED ED 68                        in      l, (c)
  26+ 35EF E5                           push    hl
  27+ 35F0 D9                           exx
  28+ 35F1                              next
  28+ 35F1 DD E9       >                jp      (ix)
  29+ 35F3
  30+ 35F3
  31+ 35F3              //  ______________________________________________________________________
  32+ 35F3              //
  33+ 35F3              // reg!         b n --
  34+ 35F3              // write value b to Next REGister n
  35+ 35F3              //
  36+ 35F3              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35F3              //              dw      LIT, $243B
  38+ 35F3              //              dw      PSTORE
  39+ 35F3              //              dw      LIT, $253B
  40+ 35F3              //              dw      PSTORE
  41+ 35F3              //              dw      EXIT
  42+ 35F3                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35F3             >
  42+ 35F3             >Dict_Ptr        defl    $
  42+ 35F3             >
  42+ 35F3             >//              ______________________________________________________________________
  42+ 35F3             >//              Heap part
  42+ 35F3             >
  42+ 35F3             >
  42+ 35F3             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA5A             >
  42+ EA5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA5A             >Latest_Definition defl  Heap_Ptr
  42+ EA5A             >
  42+ EA5A             >                // dummy db directives used to calculate length of namec
  42+ EA5A 52 45 47 21 >                db      "REG!"
  42+ EA5E             >len_NFA         defl    $ - temp_NFA
  42+ EA5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA5A             >
  42+ EA5A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA5B 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA5F             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA5E A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA5F             >
  42+ EA5F 51 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA61             >Prev_Ptr        defl    Heap_Ptr
  42+ EA61             >
  42+ EA61             >mirror_Ptr      defl    $
  42+ EA61             >
  42+ EA61 F5 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA63             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA63             >
  42+ EA63             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA63             >
  42+ EA63             >//              ______________________________________________________________________
  42+ EA63             >//              Dictionary part
  42+ EA63             >
  42+ EA63             >                org     Dict_Ptr
  42+ 35F3             >
  42+ 35F3 61 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35F5             >
  42+ 35F5             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35F5 ~           >
  42+ 35F5 ~           >
  42+ 35F5             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35F5             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35F5             >
  42+ 35F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35F5 D9                           exx
  44+ 35F6 01 3B 24                     ld      bc, $243B
  45+ 35F9 E1                           pop     hl
  46+ 35FA ED 69                        out     (c), l
  47+ 35FC 04                           inc     b
  48+ 35FD E1                           pop     hl
  49+ 35FE ED 69                        out     (c), l
  50+ 3600 D9                           exx
  51+ 3601                              next
  51+ 3601 DD E9       >                jp      (ix)
  52+ 3603
  53+ 3603
  54+ 3603              //  ______________________________________________________________________
  55+ 3603              //
  56+ 3603              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 3603              // NextZXOS call wrapper.
  58+ 3603              //  n1 = hl register parameter value
  59+ 3603              //  n2 = de register parameter value
  60+ 3603              //  n3 = bc register parameter value
  61+ 3603              //  n4 =  a register parameter value
  62+ 3603              //   a = routine address in ROM 3
  63+ 3603              // ----
  64+ 3603              //  n5 = hl returned value
  65+ 3603              //  n6 = de returned value
  66+ 3603              //  n7 = bc returned value
  67+ 3603              //  n8 =  a returned value
  68+ 3603              //   f
  69+ 3603                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 3603             >
  69+ 3603             >Dict_Ptr        defl    $
  69+ 3603             >
  69+ 3603             >//              ______________________________________________________________________
  69+ 3603             >//              Heap part
  69+ 3603             >
  69+ 3603             >
  69+ 3603             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA63             >
  69+ EA63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA63             >Latest_Definition defl  Heap_Ptr
  69+ EA63             >
  69+ EA63             >                // dummy db directives used to calculate length of namec
  69+ EA63 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA67 44 4F 53    >
  69+ EA6A             >len_NFA         defl    $ - temp_NFA
  69+ EA6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA63             >
  69+ EA63 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA64 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA68 44 4F 53    >
  69+ EA6B             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA6A D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA6B             >
  69+ EA6B 5A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA6D             >Prev_Ptr        defl    Heap_Ptr
  69+ EA6D             >
  69+ EA6D             >mirror_Ptr      defl    $
  69+ EA6D             >
  69+ EA6D 05 36       >                dw      Dict_Ptr + 2        // xt
  69+ EA6F             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA6F             >
  69+ EA6F             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA6F             >
  69+ EA6F             >//              ______________________________________________________________________
  69+ EA6F             >//              Dictionary part
  69+ EA6F             >
  69+ EA6F             >                org     Dict_Ptr
  69+ 3603             >
  69+ 3603 6D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 3605             >
  69+ 3605             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 3605 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 3605 ~           >
  69+ 3605 ~           >
  69+ 3605             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 3605             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 3605             >
  69+ 3605             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 3605 D9                            exx
  71+ 3606 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 3607 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 3608 7B                            ld      a, e
  74+ 3609 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 360A D1                            pop     de                  // de' argument              //  n1
  76+ 360B E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 360C D9                           exx
  78+ 360D E1                           pop     hl                  // entry address a
  79+ 360E DD E5                        push    ix
  80+ 3610 D5                           push    de
  81+ 3611 C5                           push    bc
  82+ 3612 EB                           ex      de, hl              // de is entry address
  83+ 3613              //              ld      (SP_Saved), sp
  84+ 3613              //              ld      sp, Cold_origin - 5
  85+ 3613              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 3613 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 3615 F3                           di
  88+ 3616 CF                           rst     08
  89+ 3617 94                           db      $94
  90+ 3618 FB                           ei
  91+ 3619                      ////    ld      a, (Saved_MMU + 1)
  92+ 3619                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 3619
  94+ 3619              //              ld      sp, (SP_Saved)
  95+ 3619              //              push    ix
  96+ 3619              //              pop     hl
  97+ 3619              //              ld      (IX_Echo), hl
  98+ 3619 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 361D
 100+ 361D D9                           exx
 101+ 361E C1                           pop     bc
 102+ 361F D1                           pop     de
 103+ 3620 DD E1                        pop     ix
 104+ 3622 D9                            exx
 105+ 3623 E5                            push    hl
 106+ 3624 D5                            push    de
 107+ 3625 C5                            push    bc
 108+ 3626 26 00                         ld      h, 0
 109+ 3628 6F                            ld      l, a
 110+ 3629 E5                            push    hl
 111+ 362A D9                           exx
 112+ 362B ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 362D 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 362E E5                           push    hl
 115+ 362F                              next
 115+ 362F DD E9       >                jp      (ix)
 116+ 3631
 117+ 3631              //  ______________________________________________________________________
 118+ 3631              //
 119+ 3631              // blk-fh
 120+ 3631              // MOVED AT THE END.
 121+ 3631              //              Variable_Def BLK_FH,   "BLK-FH",   1
 122+ 3631              //
 123+ 3631              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 124+ 3631              // Len_Filename:   db      30
 125+ 3631              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 126+ 3631              //                 ds      32
 127+ 3631
 128+ 3631              //  ______________________________________________________________________
 129+ 3631              //
 130+ 3631              // blk-seek     n --
 131+ 3631              // seek block n  within blocks!.bin  file
 132+ 3631                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 3631             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 3631             >
 132+ 3631             >Dict_Ptr        defl    $
 132+ 3631             >
 132+ 3631             >//              ______________________________________________________________________
 132+ 3631             >//              Heap part
 132+ 3631             >
 132+ 3631             >
 132+ 3631             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA6F             >
 132+ EA6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA6F             >Latest_Definition defl  Heap_Ptr
 132+ EA6F             >
 132+ EA6F             >                // dummy db directives used to calculate length of namec
 132+ EA6F 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA73 53 45 45 4B >
 132+ EA77             >len_NFA         defl    $ - temp_NFA
 132+ EA77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA6F             >
 132+ EA6F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA70 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA74 53 45 45 4B >
 132+ EA78             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA77 CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA78             >
 132+ EA78 63 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA7A             >Prev_Ptr        defl    Heap_Ptr
 132+ EA7A             >
 132+ EA7A             >mirror_Ptr      defl    $
 132+ EA7A             >
 132+ EA7A 33 36       >                dw      Dict_Ptr + 2        // xt
 132+ EA7C             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA7C             >
 132+ EA7C             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA7C             >
 132+ EA7C             >//              ______________________________________________________________________
 132+ EA7C             >//              Dictionary part
 132+ EA7C             >
 132+ EA7C             >                org     Dict_Ptr
 132+ 3631             >
 132+ 3631 7A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 3633             >
 132+ 3633             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 3633 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 3636             >
 132+ 3636             >
 132+ 3636             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 3636             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 3636             >
 132+ 3636             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 3636 15 27 B9 34                  dw  BBUF, MMUL
 134+ 363A 60 3F F2 25                  dw  BLK_FH, FETCH
 135+ 363E 40 23                        dw  F_SEEK
 136+ 3640 3D 20 2D 00                  dw  LIT, $2D, QERROR
 136+ 3644 53 2A
 137+ 3646 BD 24                        dw  EXIT
 138+ 3648
 139+ 3648              //  ______________________________________________________________________
 140+ 3648              //
 141+ 3648              // blk-read     n --
 142+ 3648              // seek block n  within blocks!.bin  file
 143+ 3648                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 3648             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 3648             >
 143+ 3648             >Dict_Ptr        defl    $
 143+ 3648             >
 143+ 3648             >//              ______________________________________________________________________
 143+ 3648             >//              Heap part
 143+ 3648             >
 143+ 3648             >
 143+ 3648             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA7C             >
 143+ EA7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA7C             >Latest_Definition defl  Heap_Ptr
 143+ EA7C             >
 143+ EA7C             >                // dummy db directives used to calculate length of namec
 143+ EA7C 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA80 52 45 41 44 >
 143+ EA84             >len_NFA         defl    $ - temp_NFA
 143+ EA84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA7C             >
 143+ EA7C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA7D 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA81 52 45 41 44 >
 143+ EA85             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA84 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA85             >
 143+ EA85 6F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA87             >Prev_Ptr        defl    Heap_Ptr
 143+ EA87             >
 143+ EA87             >mirror_Ptr      defl    $
 143+ EA87             >
 143+ EA87 4A 36       >                dw      Dict_Ptr + 2        // xt
 143+ EA89             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA89             >
 143+ EA89             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA89             >
 143+ EA89             >//              ______________________________________________________________________
 143+ EA89             >//              Dictionary part
 143+ EA89             >
 143+ EA89             >                org     Dict_Ptr
 143+ 3648             >
 143+ 3648 87 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 364A             >
 143+ 364A             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 364A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 364D             >
 143+ 364D             >
 143+ 364D             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 364D             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 364D             >
 143+ 364D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 364D 33 36                        dw  BLK_SEEK
 145+ 364F 15 27                        dw  BBUF
 146+ 3651 60 3F F2 25                  dw  BLK_FH, FETCH
 147+ 3655 91 23                        dw  F_READ
 148+ 3657 3D 20 2E 00                  dw  LIT, $2E, QERROR
 148+ 365B 53 2A
 149+ 365D 6D 25                        dw  DROP
 150+ 365F BD 24                        dw  EXIT
 151+ 3661
 152+ 3661              //  ______________________________________________________________________
 153+ 3661              //
 154+ 3661              // blk-write     n --
 155+ 3661              // seek block n  within blocks!.bin  file
 156+ 3661                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 3661             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 3661             >
 156+ 3661             >Dict_Ptr        defl    $
 156+ 3661             >
 156+ 3661             >//              ______________________________________________________________________
 156+ 3661             >//              Heap part
 156+ 3661             >
 156+ 3661             >
 156+ 3661             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA89             >
 156+ EA89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA89             >Latest_Definition defl  Heap_Ptr
 156+ EA89             >
 156+ EA89             >                // dummy db directives used to calculate length of namec
 156+ EA89 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA8D 57 52 49 54 >
 156+ EA91 45          >
 156+ EA92             >len_NFA         defl    $ - temp_NFA
 156+ EA92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA89             >
 156+ EA89 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA8A 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA8E 57 52 49 54 >
 156+ EA92 45          >
 156+ EA93             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA92 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA93             >
 156+ EA93 7C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA95             >Prev_Ptr        defl    Heap_Ptr
 156+ EA95             >
 156+ EA95             >mirror_Ptr      defl    $
 156+ EA95             >
 156+ EA95 63 36       >                dw      Dict_Ptr + 2        // xt
 156+ EA97             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA97             >
 156+ EA97             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA97             >
 156+ EA97             >//              ______________________________________________________________________
 156+ EA97             >//              Dictionary part
 156+ EA97             >
 156+ EA97             >                org     Dict_Ptr
 156+ 3661             >
 156+ 3661 95 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 3663             >
 156+ 3663             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 3663 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 3666             >
 156+ 3666             >
 156+ 3666             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 3666             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 3666             >
 156+ 3666             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 3666 33 36                        dw  BLK_SEEK
 158+ 3668 15 27                        dw  BBUF
 159+ 366A 60 3F F2 25                  dw  BLK_FH, FETCH
 160+ 366E B1 23                        dw  F_WRITE
 161+ 3670 3D 20 2F 00                  dw  LIT, $2F, QERROR
 161+ 3674 53 2A
 162+ 3676 6D 25                        dw  DROP
 163+ 3678 BD 24                        dw  EXIT
 164+ 367A
 165+ 367A              //  ______________________________________________________________________
 166+ 367A              //
 167+ 367A              // blk-init     n --
 168+ 367A              // seek block n  within blocks!.bin  file
 169+ 367A                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 367A             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 367A             >
 169+ 367A             >Dict_Ptr        defl    $
 169+ 367A             >
 169+ 367A             >//              ______________________________________________________________________
 169+ 367A             >//              Heap part
 169+ 367A             >
 169+ 367A             >
 169+ 367A             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA97             >
 169+ EA97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA97             >Latest_Definition defl  Heap_Ptr
 169+ EA97             >
 169+ EA97             >                // dummy db directives used to calculate length of namec
 169+ EA97 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA9B 49 4E 49 54 >
 169+ EA9F             >len_NFA         defl    $ - temp_NFA
 169+ EA9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA97             >
 169+ EA97 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA98 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA9C 49 4E 49 54 >
 169+ EAA0             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA9F D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EAA0             >
 169+ EAA0 89 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EAA2             >Prev_Ptr        defl    Heap_Ptr
 169+ EAA2             >
 169+ EAA2             >mirror_Ptr      defl    $
 169+ EAA2             >
 169+ EAA2 7C 36       >                dw      Dict_Ptr + 2        // xt
 169+ EAA4             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EAA4             >
 169+ EAA4             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EAA4             >
 169+ EAA4             >//              ______________________________________________________________________
 169+ EAA4             >//              Dictionary part
 169+ EAA4             >
 169+ EAA4             >                org     Dict_Ptr
 169+ 367A             >
 169+ 367A A2 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 367C             >
 169+ 367C             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 367C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 367F             >
 169+ 367F             >
 169+ 367F             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 367F             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 367F             >
 169+ 367F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 367F 60 3F F2 25                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 3683 5D 23 6D 25
 171+ 3687 67 3F 23 25                  dw  BLK_FNAME, ONE_PLUS
 172+ 368B 09 28 F9 26                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 368F C5 23
 173+ 3691                          //    dw  LIT, $2C, QERROR
 174+ 3691
 175+ 3691 8D 20                        dw  ZBRANCH
 176+ 3693 0E 00                        dw  Blk_Init_Endif - $
 177+ 3695
 178+ 3695 3D 20 CF FF                  dw  LIT, $FFCF                  // PATCH op-code RST $08, $FF
 179+ 3699 3D 20 80 34                  dw  LIT, Exit_with_error
 180+ 369D FC 25                        dw  STORE
 181+ 369F
 182+ 369F 3E 34                        dw  BASIC
 183+ 36A1              Blk_Init_Endif:
 184+ 36A1
 185+ 36A1 60 3F FC 25                  dw  BLK_FH, STORE
 186+ 36A5 BD 24                        dw  EXIT
 187+ 36A7
 188+ 36A7              //  ______________________________________________________________________
 189+ 36A7              //
 190+ 36A7              // #sec
 191+ 36A7              // number of 512-Byte "sectors" available on thie sysstem.
 192+ 36A7              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 193+ 36A7
 194+ 36A7                              Constant_Def NSEC , "#SEC", 32767
 194+ 36A7             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 194+ 36A7             >
 194+ 36A7             >Dict_Ptr        defl    $
 194+ 36A7             >
 194+ 36A7             >//              ______________________________________________________________________
 194+ 36A7             >//              Heap part
 194+ 36A7             >
 194+ 36A7             >
 194+ 36A7             >                org     (Heap_Ptr & $1FFF) + $E000
 194+ EAA4             >
 194+ EAA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ EAA4             >Latest_Definition defl  Heap_Ptr
 194+ EAA4             >
 194+ EAA4             >                // dummy db directives used to calculate length of namec
 194+ EAA4 23 53 45 43 >                db      "#SEC"
 194+ EAA8             >len_NFA         defl    $ - temp_NFA
 194+ EAA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ EAA4             >
 194+ EAA4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ EAA5 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 194+ EAA9             >                org     $-1                 // alter last byte of Name just above to set
 194+ EAA8 C3          >                db      {b $} | END_BIT     // msb as name end
 194+ EAA9             >
 194+ EAA9 97 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194+ EAAB             >Prev_Ptr        defl    Heap_Ptr
 194+ EAAB             >
 194+ EAAB             >mirror_Ptr      defl    $
 194+ EAAB             >
 194+ EAAB A9 36       >                dw      Dict_Ptr + 2        // xt
 194+ EAAD             >Heap_Ptr        defl    $ - $E000           // save current HP
 194+ EAAD             >
 194+ EAAD             >Current_HP      defl  $ - $E000             // used to set HP once!
 194+ EAAD             >
 194+ EAAD             >//              ______________________________________________________________________
 194+ EAAD             >//              Dictionary part
 194+ EAAD             >
 194+ EAAD             >                org     Dict_Ptr
 194+ 36A7             >
 194+ 36A7 AB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 194+ 36A9             >
 194+ 36A9             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 36A9 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 194+ 36AC             >
 194+ 36AC             >
 194+ 36AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 36AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 36AC             >
 194+ 36AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 36AC FF 7F       >                dw      32767
 195+ 36AE
 196+ 36AE              //  ______________________________________________________________________
 197+ 36AE
 198+ 36AE
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/next-opt1.asm
 143  36AE                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOT/source/L3.asm
   1+ 36AE              //  ______________________________________________________________________
   2+ 36AE              //
   3+ 36AE              //  L3.asm
   4+ 36AE              //
   5+ 36AE              //  Continuation of L2.asm
   6+ 36AE              //  I/O Block definitions
   7+ 36AE              //  ______________________________________________________________________
   8+ 36AE
   9+ 36AE
  10+ 36AE              //  ______________________________________________________________________
  11+ 36AE              //
  12+ 36AE              // r/w          a n f --
  13+ 36AE              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 36AE                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 36AE             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 36AE             >
  14+ 36AE             >Dict_Ptr        defl    $
  14+ 36AE             >
  14+ 36AE             >//              ______________________________________________________________________
  14+ 36AE             >//              Heap part
  14+ 36AE             >
  14+ 36AE             >
  14+ 36AE             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAAD             >
  14+ EAAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAAD             >Latest_Definition defl  Heap_Ptr
  14+ EAAD             >
  14+ EAAD             >                // dummy db directives used to calculate length of namec
  14+ EAAD 52 2F 57    >                db      "R/W"
  14+ EAB0             >len_NFA         defl    $ - temp_NFA
  14+ EAB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAAD             >
  14+ EAAD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAAE 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAB1             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAB0 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAB1             >
  14+ EAB1 A4 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAB3             >Prev_Ptr        defl    Heap_Ptr
  14+ EAB3             >
  14+ EAB3             >mirror_Ptr      defl    $
  14+ EAB3             >
  14+ EAB3 B0 36       >                dw      Dict_Ptr + 2        // xt
  14+ EAB5             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB5             >
  14+ EAB5             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB5             >
  14+ EAB5             >//              ______________________________________________________________________
  14+ EAB5             >//              Dictionary part
  14+ EAB5             >
  14+ EAB5             >                org     Dict_Ptr
  14+ 36AE             >
  14+ 36AE B3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 36B0             >
  14+ 36B0             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 36B0 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 36B3             >
  14+ 36B3             >
  14+ 36B3             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 36B3             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 36B3             >
  14+ 36B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 36B3 C7 24                        dw      TO_R                    // >r
  16+ 36B5 2A 25                        dw      ONE_SUBTRACT            // 1-
  17+ 36B7 88 25 F3 24                  dw      DUP, ZLESS              // dup 0<
  18+ 36BB 64 25 A9 36                  dw      OVER, NSEC              // over #sec
  19+ 36BF 2A 25 7A 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 36C3 8C 24                        dw      OR_OP                   // or
  21+ 36C5 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 36C9 53 2A
  22+ 36CB D2 24                        dw      R_TO                    // r>
  23+ 36CD                                                              // if
  24+ 36CD 8D 20                        dw      ZBRANCH
  25+ 36CF 08 00                        dw      Read_Write_Else - $
  26+ 36D1 4A 36                        dw          BLK_READ            //      blk-read
  27+ 36D3 89 20                        dw      BRANCH
  28+ 36D5 04 00                        dw      Read_Write_Endif - $
  29+ 36D7              Read_Write_Else:                                // else
  30+ 36D7 63 36                        dw          BLK_WRITE           //      blk-write
  31+ 36D9              Read_Write_Endif:                               // endif
  32+ 36D9 BD 24                        dw      EXIT                    // ;
  33+ 36DB
  34+ 36DB
  35+ 36DB              //  ______________________________________________________________________
  36+ 36DB              //
  37+ 36DB              // +buf        a1 -- a2 f
  38+ 36DB              // advences to next buffer, cyclically rotating along them
  39+ 36DB                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36DB             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36DB             >
  39+ 36DB             >Dict_Ptr        defl    $
  39+ 36DB             >
  39+ 36DB             >//              ______________________________________________________________________
  39+ 36DB             >//              Heap part
  39+ 36DB             >
  39+ 36DB             >
  39+ 36DB             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB5             >
  39+ EAB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB5             >Latest_Definition defl  Heap_Ptr
  39+ EAB5             >
  39+ EAB5             >                // dummy db directives used to calculate length of namec
  39+ EAB5 2B 42 55 46 >                db      "+BUF"
  39+ EAB9             >len_NFA         defl    $ - temp_NFA
  39+ EAB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB5             >
  39+ EAB5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAB6 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EABA             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAB9 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EABA             >
  39+ EABA AD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EABC             >Prev_Ptr        defl    Heap_Ptr
  39+ EABC             >
  39+ EABC             >mirror_Ptr      defl    $
  39+ EABC             >
  39+ EABC DD 36       >                dw      Dict_Ptr + 2        // xt
  39+ EABE             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EABE             >
  39+ EABE             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EABE             >
  39+ EABE             >//              ______________________________________________________________________
  39+ EABE             >//              Dictionary part
  39+ EABE             >
  39+ EABE             >                org     Dict_Ptr
  39+ 36DB             >
  39+ 36DB BC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36DD             >
  39+ 36DD             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36DD CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36E0             >
  39+ 36E0             >
  39+ 36E0             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36E0             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36E0             >
  39+ 36E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36E0 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36E4 0A 25
  41+ 36E6 88 25 73 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36EA F2 25
  42+ 36EC 54 28                        dw      EQUALS                  // =
  43+ 36EE                                                              // if
  44+ 36EE 8D 20                        dw      ZBRANCH
  45+ 36F0 08 00                        dw      PBuf_Endif - $
  46+ 36F2 6D 25                        dw          DROP                //      drop
  47+ 36F4 6D 27 F2 25                  dw          FIRST, FETCH        //      first @
  48+ 36F8              PBuf_Endif:                                     // endif
  49+ 36F8 88 25 DF 27                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36FC F2 25
  50+ 36FE 48 28                        dw      SUBTRACT                // -
  51+ 3700 BD 24                        dw      EXIT                    // ;
  52+ 3702
  53+ 3702              //  ______________________________________________________________________
  54+ 3702              //
  55+ 3702              // update       --
  56+ 3702              // mark the last used block to be written to disk
  57+ 3702                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 3702             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 3702             >
  57+ 3702             >Dict_Ptr        defl    $
  57+ 3702             >
  57+ 3702             >//              ______________________________________________________________________
  57+ 3702             >//              Heap part
  57+ 3702             >
  57+ 3702             >
  57+ 3702             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EABE             >
  57+ EABE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EABE             >Latest_Definition defl  Heap_Ptr
  57+ EABE             >
  57+ EABE             >                // dummy db directives used to calculate length of namec
  57+ EABE 55 50 44 41 >                db      "UPDATE"
  57+ EAC2 54 45       >
  57+ EAC4             >len_NFA         defl    $ - temp_NFA
  57+ EAC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EABE             >
  57+ EABE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EABF 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAC3 54 45       >
  57+ EAC5             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC4 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC5             >
  57+ EAC5 B5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAC7             >Prev_Ptr        defl    Heap_Ptr
  57+ EAC7             >
  57+ EAC7             >mirror_Ptr      defl    $
  57+ EAC7             >
  57+ EAC7 04 37       >                dw      Dict_Ptr + 2        // xt
  57+ EAC9             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAC9             >
  57+ EAC9             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAC9             >
  57+ EAC9             >//              ______________________________________________________________________
  57+ EAC9             >//              Dictionary part
  57+ EAC9             >
  57+ EAC9             >                org     Dict_Ptr
  57+ 3702             >
  57+ 3702 C7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 3704             >
  57+ 3704             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 3704 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 3707             >
  57+ 3707             >
  57+ 3707             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 3707             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 3707             >
  57+ 3707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 3707 DF 27 F2 25                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 370B F2 25
  59+ 370D 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 3711 8C 24
  60+ 3713 DF 27 F2 25                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 3717 FC 25
  61+ 3719 BD 24                        dw      EXIT                    // ;
  62+ 371B
  63+ 371B
  64+ 371B              //  ______________________________________________________________________
  65+ 371B              //
  66+ 371B              // empty-buffers --
  67+ 371B                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 371B             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 371B             >
  67+ 371B             >Dict_Ptr        defl    $
  67+ 371B             >
  67+ 371B             >//              ______________________________________________________________________
  67+ 371B             >//              Heap part
  67+ 371B             >
  67+ 371B             >
  67+ 371B             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAC9             >
  67+ EAC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAC9             >Latest_Definition defl  Heap_Ptr
  67+ EAC9             >
  67+ EAC9             >                // dummy db directives used to calculate length of namec
  67+ EAC9 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EACD 59 2D 42 55 >
  67+ EAD1 46 46 45 52 >
  67+ EAD5 53          >
  67+ EAD6             >len_NFA         defl    $ - temp_NFA
  67+ EAD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAC9             >
  67+ EAC9 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EACA 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EACE 59 2D 42 55 >
  67+ EAD2 46 46 45 52 >
  67+ EAD6 53          >
  67+ EAD7             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAD6 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAD7             >
  67+ EAD7 BE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAD9             >Prev_Ptr        defl    Heap_Ptr
  67+ EAD9             >
  67+ EAD9             >mirror_Ptr      defl    $
  67+ EAD9             >
  67+ EAD9 1D 37       >                dw      Dict_Ptr + 2        // xt
  67+ EADB             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EADB             >
  67+ EADB             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EADB             >
  67+ EADB             >//              ______________________________________________________________________
  67+ EADB             >//              Dictionary part
  67+ EADB             >
  67+ EADB             >                org     Dict_Ptr
  67+ 371B             >
  67+ 371B D9 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 371D             >
  67+ 371D             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 371D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 3720             >
  67+ 3720             >
  67+ 3720             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 3720             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 3720             >
  67+ 3720             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 3720 6D 27 F2 25                  dw      FIRST, FETCH            // first @
  69+ 3724 73 27 F2 25                  dw      LIMIT, FETCH            // limit @
  70+ 3728 64 25 48 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 372C 73 2D
  71+ 372E BD 24                        dw      EXIT                    // ;
  72+ 3730
  73+ 3730              //  ______________________________________________________________________
  74+ 3730              //
  75+ 3730              // buffer       n -- a
  76+ 3730              // read block n and gives the address to a buffer
  77+ 3730              // any block previously inside the buffer, if modified, is rewritten to
  78+ 3730              // disk before reading the block n.
  79+ 3730
  80+ 3730                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 3730             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 3730             >
  80+ 3730             >Dict_Ptr        defl    $
  80+ 3730             >
  80+ 3730             >//              ______________________________________________________________________
  80+ 3730             >//              Heap part
  80+ 3730             >
  80+ 3730             >
  80+ 3730             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EADB             >
  80+ EADB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EADB             >Latest_Definition defl  Heap_Ptr
  80+ EADB             >
  80+ EADB             >                // dummy db directives used to calculate length of namec
  80+ EADB 42 55 46 46 >                db      "BUFFER"
  80+ EADF 45 52       >
  80+ EAE1             >len_NFA         defl    $ - temp_NFA
  80+ EAE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EADB             >
  80+ EADB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EADC 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAE0 45 52       >
  80+ EAE2             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAE1 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAE2             >
  80+ EAE2 C9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE4             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE4             >
  80+ EAE4             >mirror_Ptr      defl    $
  80+ EAE4             >
  80+ EAE4 32 37       >                dw      Dict_Ptr + 2        // xt
  80+ EAE6             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAE6             >
  80+ EAE6             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAE6             >
  80+ EAE6             >//              ______________________________________________________________________
  80+ EAE6             >//              Dictionary part
  80+ EAE6             >
  80+ EAE6             >                org     Dict_Ptr
  80+ 3730             >
  80+ 3730 E4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 3732             >
  80+ 3732             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 3732 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 3735             >
  80+ 3735             >
  80+ 3735             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 3735             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 3735             >
  80+ 3735             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 3735 D9 27 F2 25                  dw      USED, FETCH             // used @
  82+ 3739 88 25 C7 24                  dw      DUP, TO_R               // dup >r
  83+ 373D                                                              // begin
  84+ 373D              Buffer_Begin:
  85+ 373D DD 36                        dw          PBUF                //      +buf
  86+ 373F                                                              // until
  87+ 373F 8D 20                        dw      ZBRANCH
  88+ 3741 FC FF                        dw      Buffer_Begin - $
  89+ 3743 D9 27 FC 25                  dw      USED, STORE             // used !
  90+ 3747 DD 24 F2 25                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 374B F3 24
  91+ 374D                                                              // if
  92+ 374D 8D 20                        dw      ZBRANCH
  93+ 374F 14 00                        dw      Buffer_Endif - $
  94+ 3751 DD 24 39 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 3755 DD 24 F2 25                  dw          R_OP, FETCH         //      r fetch
  96+ 3759 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 375D 7D 24                        dw          AND_OP              //      and
  98+ 375F E4 26 B0 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 3763              Buffer_Endif:                                   // endif
 100+ 3763 DD 24 FC 25                  dw      R_OP, STORE             // r !
 101+ 3767 DD 24 DF 27                  dw      R_OP, PREV, STORE       // r prev !
 101+ 376B FC 25
 102+ 376D D2 24 39 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 3771 BD 24                        dw      EXIT                    // ;
 104+ 3773
 105+ 3773              //  ______________________________________________________________________
 106+ 3773              //
 107+ 3773              // block        n -- a
 108+ 3773              // Leaves the buffer address that contains the block n.
 109+ 3773              // If the block is not already present, it will be loaded from disk
 110+ 3773              // The block previously inside the buffer, if modified, is rewritten to
 111+ 3773              // disk before reading the block n.
 112+ 3773              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 3773
 114+ 3773                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 3773             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 3773             >
 114+ 3773             >Dict_Ptr        defl    $
 114+ 3773             >
 114+ 3773             >//              ______________________________________________________________________
 114+ 3773             >//              Heap part
 114+ 3773             >
 114+ 3773             >
 114+ 3773             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAE6             >
 114+ EAE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAE6             >Latest_Definition defl  Heap_Ptr
 114+ EAE6             >
 114+ EAE6             >                // dummy db directives used to calculate length of namec
 114+ EAE6 42 4C 4F 43 >                db      "BLOCK"
 114+ EAEA 4B          >
 114+ EAEB             >len_NFA         defl    $ - temp_NFA
 114+ EAEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAE6             >
 114+ EAE6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAE7 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAEB 4B          >
 114+ EAEC             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAEB CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAEC             >
 114+ EAEC DB 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAEE             >Prev_Ptr        defl    Heap_Ptr
 114+ EAEE             >
 114+ EAEE             >mirror_Ptr      defl    $
 114+ EAEE             >
 114+ EAEE 75 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAF0             >
 114+ EAF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAF0             >
 114+ EAF0             >//              ______________________________________________________________________
 114+ EAF0             >//              Dictionary part
 114+ EAF0             >
 114+ EAF0             >                org     Dict_Ptr
 114+ 3773             >
 114+ 3773 EE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 3775             >
 114+ 3775             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 3775 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3778             >
 114+ 3778             >
 114+ 3778             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3778             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3778             >
 114+ 3778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3778                          //  dw      OFFSET, FETCH           // offset @
 116+ 3778                          //  dw      PLUS
 117+ 3778 C7 24                        dw      TO_R                    // + >r
 118+ 377A DF 27 F2 25                  dw      PREV, FETCH             // prev @
 119+ 377E 88 25 F2 25                  dw      DUP, FETCH              // dup @
 120+ 3782 DD 24 48 28                  dw      R_OP, SUBTRACT          // r -
 121+ 3786 88 25 0A 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 378A                                                              // if
 123+ 378A 8D 20                        dw        ZBRANCH
 124+ 378C 32 00                        dw        Block_Endif_1 - $
 125+ 378E              Block_Begin:                                    //      begin
 126+ 378E DD 36 E2 24                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 3792                                                              //          if
 128+ 3792 8D 20                        dw          ZBRANCH
 129+ 3794 12 00                        dw          Block_Endif_2 - $
 130+ 3796 6D 25                        dw              DROP            //              drop
 131+ 3798 DD 24 32 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 379C 88 25                        dw              DUP             //              dup
 133+ 379E DD 24 EB 26                  dw              R_OP, ONE       //              r 1
 134+ 37A2 B0 36                        dw              READ_WRITE      //              r/w
 135+ 37A4 45 25                        dw              TWO_MINUS       //              2-
 136+ 37A6              Block_Endif_2:                                  //          endif
 137+ 37A6 88 25 F2 25                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 37AA DD 24
 138+ 37AC 48 28 88 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 37B0 0A 25 E2 24                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 37B4                                                              //      until
 141+ 37B4 8D 20                        dw        ZBRANCH
 142+ 37B6 D8 FF                        dw        Block_Begin - $
 143+ 37B8 88 25 DF 27                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 37BC FC 25
 144+ 37BE              Block_Endif_1:                                  // endif
 145+ 37BE D2 24 6D 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 37C2 39 25
 146+ 37C4 BD 24                        dw      EXIT                    // ;
 147+ 37C6
 148+ 37C6              //  ______________________________________________________________________
 149+ 37C6              //
 150+ 37C6              // #buff        -- n
 151+ 37C6              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 37C6                              Constant_Def NBUFF,   "#BUFF", BUFFERS
 152+ 37C6             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 37C6             >
 152+ 37C6             >Dict_Ptr        defl    $
 152+ 37C6             >
 152+ 37C6             >//              ______________________________________________________________________
 152+ 37C6             >//              Heap part
 152+ 37C6             >
 152+ 37C6             >
 152+ 37C6             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAF0             >
 152+ EAF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAF0             >Latest_Definition defl  Heap_Ptr
 152+ EAF0             >
 152+ EAF0             >                // dummy db directives used to calculate length of namec
 152+ EAF0 23 42 55 46 >                db      "#BUFF"
 152+ EAF4 46          >
 152+ EAF5             >len_NFA         defl    $ - temp_NFA
 152+ EAF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAF0             >
 152+ EAF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAF1 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF5 46          >
 152+ EAF6             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF5 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAF6             >
 152+ EAF6 E6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAF8             >Prev_Ptr        defl    Heap_Ptr
 152+ EAF8             >
 152+ EAF8             >mirror_Ptr      defl    $
 152+ EAF8             >
 152+ EAF8 C8 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAFA             >
 152+ EAFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAFA             >
 152+ EAFA             >//              ______________________________________________________________________
 152+ EAFA             >//              Dictionary part
 152+ EAFA             >
 152+ EAFA             >                org     Dict_Ptr
 152+ 37C6             >
 152+ 37C6 F8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 37C8             >
 152+ 37C8             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 37C8 CD B8 26    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 37CB             >
 152+ 37CB             >
 152+ 37CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 37CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 37CB             >
 152+ 37CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 37CB 06 00       >                dw      BUFFERS
 153+ 37CD
 154+ 37CD              //  ______________________________________________________________________
 155+ 37CD              //
 156+ 37CD              // flush        --
 157+ 37CD                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 37CD             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 37CD             >
 157+ 37CD             >Dict_Ptr        defl    $
 157+ 37CD             >
 157+ 37CD             >//              ______________________________________________________________________
 157+ 37CD             >//              Heap part
 157+ 37CD             >
 157+ 37CD             >
 157+ 37CD             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAFA             >
 157+ EAFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAFA             >Latest_Definition defl  Heap_Ptr
 157+ EAFA             >
 157+ EAFA             >                // dummy db directives used to calculate length of namec
 157+ EAFA 46 4C 55 53 >                db      "FLUSH"
 157+ EAFE 48          >
 157+ EAFF             >len_NFA         defl    $ - temp_NFA
 157+ EAFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAFA             >
 157+ EAFA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAFB 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAFF 48          >
 157+ EB00             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAFF C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB00             >
 157+ EB00 F0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB02             >Prev_Ptr        defl    Heap_Ptr
 157+ EB02             >
 157+ EB02             >mirror_Ptr      defl    $
 157+ EB02             >
 157+ EB02 CF 37       >                dw      Dict_Ptr + 2        // xt
 157+ EB04             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB04             >
 157+ EB04             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB04             >
 157+ EB04             >//              ______________________________________________________________________
 157+ EB04             >//              Dictionary part
 157+ EB04             >
 157+ EB04             >                org     Dict_Ptr
 157+ 37CD             >
 157+ 37CD 02 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 37CF             >
 157+ 37CF             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 37CF CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37D2             >
 157+ 37D2             >
 157+ 37D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37D2             >
 157+ 37D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37D2 C8 37 23 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37D6 E4 26
 159+ 37D8              Flush_Do:                                       // do
 160+ 37D8 C6 20                        dw      C_DO
 161+ 37DA E4 26 32 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37DE 6D 25
 162+ 37E0                                                              // loop
 163+ 37E0 81 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37E4 60 3F F2 25                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37E8 6A 23 6D 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37EC BD 24                        dw      EXIT                    // exit
 167+ 37EE
 168+ 37EE              //  ______________________________________________________________________
 169+ 37EE              //
 170+ 37EE              // f_getline    a m fh -- n
 171+ 37EE              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37EE              // Address a is left for subsequent processing
 173+ 37EE              // and n as the actual number of byte read, that is the length of line
 174+ 37EE                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37EE             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37EE             >
 174+ 37EE             >Dict_Ptr        defl    $
 174+ 37EE             >
 174+ 37EE             >//              ______________________________________________________________________
 174+ 37EE             >//              Heap part
 174+ 37EE             >
 174+ 37EE             >
 174+ 37EE             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB04             >
 174+ EB04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB04             >Latest_Definition defl  Heap_Ptr
 174+ EB04             >
 174+ EB04             >                // dummy db directives used to calculate length of namec
 174+ EB04 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB08 54 4C 49 4E >
 174+ EB0C 45          >
 174+ EB0D             >len_NFA         defl    $ - temp_NFA
 174+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB04             >
 174+ EB04 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB05 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB09 54 4C 49 4E >
 174+ EB0D 45          >
 174+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB0D C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB0E             >
 174+ EB0E FA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB10             >Prev_Ptr        defl    Heap_Ptr
 174+ EB10             >
 174+ EB10             >mirror_Ptr      defl    $
 174+ EB10             >
 174+ EB10 F0 37       >                dw      Dict_Ptr + 2        // xt
 174+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB12             >
 174+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB12             >
 174+ EB12             >//              ______________________________________________________________________
 174+ EB12             >//              Dictionary part
 174+ EB12             >
 174+ EB12             >                org     Dict_Ptr
 174+ 37EE             >
 174+ 37EE 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37F0             >
 174+ 37F0             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37F0 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37F3             >
 174+ 37F3             >
 174+ 37F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37F3             >
 174+ 37F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37F3 C7 24                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37F5 78 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37F7 DD 24 77 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37FB 3D 20 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 37FF 53 2A
 179+ 3801
 180+ 3801 C3 25 64 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 3805 23 25 81 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 3809
 183+ 3809 DD 24 91 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 380D 3D 20 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 3811 53 2A
 185+ 3813                                                              // if ( at least 1 chr was read )  \  fh
 186+ 3813 8D 20                        dw      ZBRANCH
 187+ 3815 3C 00                        dw      FGetline_Else - $
 188+ 3817 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 381B BA 21
 189+ 381D 6D 25 72 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 3821 81 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 3823 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 3827 BA 21
 192+ 3829 6D 25 72 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 382D 8F 25 85 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 3831 88 25 F7 27                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 3835 FC 25
 195+ 3837 88 25 C7 24                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 383B C3 25 D2 24                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 383F E4 26 14 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 3843 D2 24 40 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 3847 3D 20 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 384B 53 2A
 200+ 384D                                                              // else
 201+ 384D 89 20                        dw      BRANCH
 202+ 384F 0C 00                        dw      FGetline_Endif - $
 203+ 3851              FGetline_Else:
 204+ 3851 D2 24                        dw          R_TO                //      r>              ( m d a fh )
 205+ 3853 C3 25 BD 25                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 3857 6D 25 E4 26                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 385B              FGetline_Endif:                                 // endif
 208+ 385B C7 24 88 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 385F 88 25
 209+ 3861 23 25 81 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 3865 DD 24 02 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3869 D0 25 0A 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 386D E4 26 81 25                  dw      ZERO, SWAP              // 0 swap
 213+ 3871 3D 25 FC 25                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 3875 DD 24 0A 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3879 2A 25
 215+ 387B 81 25 DD 24                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 387F 48 28
 216+ 3881 7E 2D                        dw      BLANK                   // blank
 217+ 3883 D2 24                        dw      R_TO                    // r>                   ( n )
 218+ 3885 BD 24                        dw      EXIT                    // ;
 219+ 3887
 220+ 3887              //  ______________________________________________________________________
 221+ 3887              //
 222+ 3887              // f_include    fh --
 223+ 3887              // Given a filehandle includes the source from file
 224+ 3887                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 3887             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 3887             >
 224+ 3887             >Dict_Ptr        defl    $
 224+ 3887             >
 224+ 3887             >//              ______________________________________________________________________
 224+ 3887             >//              Heap part
 224+ 3887             >
 224+ 3887             >
 224+ 3887             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB12             >
 224+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB12             >Latest_Definition defl  Heap_Ptr
 224+ EB12             >
 224+ EB12             >                // dummy db directives used to calculate length of namec
 224+ EB12 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB16 43 4C 55 44 >
 224+ EB1A 45          >
 224+ EB1B             >len_NFA         defl    $ - temp_NFA
 224+ EB1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB12             >
 224+ EB12 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB13 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB17 43 4C 55 44 >
 224+ EB1B 45          >
 224+ EB1C             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB1B C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB1C             >
 224+ EB1C 04 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB1E             >Prev_Ptr        defl    Heap_Ptr
 224+ EB1E             >
 224+ EB1E             >mirror_Ptr      defl    $
 224+ EB1E             >
 224+ EB1E 89 38       >                dw      Dict_Ptr + 2        // xt
 224+ EB20             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB20             >
 224+ EB20             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB20             >
 224+ EB20             >//              ______________________________________________________________________
 224+ EB20             >//              Dictionary part
 224+ EB20             >
 224+ EB20             >                org     Dict_Ptr
 224+ 3887             >
 224+ 3887 1E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3889             >
 224+ 3889             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3889 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 388C             >
 224+ 388C             >
 224+ 388C             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 388C             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 388C             >
 224+ 388C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 388C 85 27 F2 25                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 3890 C7 24
 226+ 3892 8B 27 F2 25                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 3896 C7 24
 227+ 3898 F1 27 F2 25                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 389C C7 24
 228+ 389E DD 24                        dw      R_OP                    // r
 229+ 38A0 FC 24                        dw      ZGREATER                // 0>  (filehandle)
 230+ 38A2                                                              // if
 231+ 38A2 8D 20                        dw      ZBRANCH
 232+ 38A4 20 00                        dw      FInclude_Else_1 - $
 233+ 38A6 DD 24 77 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 38AA 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 38AE 53 2A
 235+ 38B0 8B 27 F2 25                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 38B4 45 25                        dw          TWO_MINUS
 237+ 38B6 F7 27 F2 25                  dw          SPAN, FETCH         //      span @ -
 238+ 38BA 48 28                        dw          SUBTRACT
 239+ 38BC 3D 28 14 25                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 38C0                                                              // else
 241+ 38C0 89 20                        dw      BRANCH
 242+ 38C2 06 00                        dw      FInclude_Endif_1 - $
 243+ 38C4              FInclude_Else_1:
 244+ 38C4 E4 26 E4 26                  dw          ZERO, ZERO          //      0 0
 245+ 38C8                                                              // endif
 246+ 38C8              FInclude_Endif_1:
 247+ 38C8 C7 24 C7 24                  dw      TO_R, TO_R              // >r >r
 248+ 38CC F1 27 FC 25                  dw      SOURCE_ID, STORE        // source-id !
 249+ 38D0              FInclude_Begin:                                 // begin
 250+ 38D0 EB 26 75 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 38D4 15 27
 251+ 38D6 D0 25 7E 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 38DA 81 25 23 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 38DE 81 25 3D 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 38E2 F1 27 F2 25                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 38E6 F0 37                        dw          F_GETLINE           //      f_getline
 256+ 38E8                                                              // while
 257+ 38E8 8D 20                        dw      ZBRANCH
 258+ 38EA 14 00                        dw      FInclude_Repeat - $
 259+ 38EC EB 26 85 27                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 38F0 FC 25
 260+ 38F2 E4 26 8B 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 38F6 FC 25
 261+ 38F8 B0 31                        dw          INTERPRET           //      interpret
 262+ 38FA 89 20                        dw      BRANCH
 263+ 38FC D4 FF                        dw      FInclude_Begin - $
 264+ 38FE              FInclude_Repeat:                                // repeat
 265+ 38FE                              //  close current file
 266+ 38FE F1 27 F2 25                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 3902 5D 23                        dw      F_CLOSE                 // f_close
 268+ 3904 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 3908 53 2A
 269+ 390A
 270+ 390A D2 24 D2 24                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 390E D2 24
 271+ 3910 88 25 F1 27                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 3914 FC 25
 272+ 3916 FC 24                        dw      ZGREATER                // 0>
 273+ 3918                                                              // if
 274+ 3918 8D 20                        dw      ZBRANCH
 275+ 391A 12 00                        dw      FInclude_Else_2 - $
 276+ 391C F1 27 F2 25                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 3920 40 23                        dw          F_SEEK              //      f_seek
 278+ 3922 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 3926 53 2A
 279+ 3928                                                              // else
 280+ 3928 89 20                        dw      BRANCH
 281+ 392A 04 00                        dw      FInclude_Endif_2 - $
 282+ 392C              FInclude_Else_2:
 283+ 392C BD 25                        dw          TWO_DROP            //      2drop
 284+ 392E              FInclude_Endif_2:                               // endif
 285+ 392E D2 24 8B 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 3932 FC 25
 286+ 3934 D2 24 85 27                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 3938 FC 25
 287+ 393A BD 24                        dw      EXIT                    // ;
 288+ 393C
 289+ 393C              //  ______________________________________________________________________
 290+ 393C              //
 291+ 393C              // open<         -- fh
 292+ 393C              // Open the following filename and return it file-handle
 293+ 393C              // Used in the form OPEN CCCC
 294+ 393C                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 393C             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 393C             >
 294+ 393C             >Dict_Ptr        defl    $
 294+ 393C             >
 294+ 393C             >//              ______________________________________________________________________
 294+ 393C             >//              Heap part
 294+ 393C             >
 294+ 393C             >
 294+ 393C             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB20             >
 294+ EB20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB20             >Latest_Definition defl  Heap_Ptr
 294+ EB20             >
 294+ EB20             >                // dummy db directives used to calculate length of namec
 294+ EB20 4F 50 45 4E >                db      "OPEN<"
 294+ EB24 3C          >
 294+ EB25             >len_NFA         defl    $ - temp_NFA
 294+ EB25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB20             >
 294+ EB20 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB21 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB25 3C          >
 294+ EB26             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB25 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB26             >
 294+ EB26 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB28             >Prev_Ptr        defl    Heap_Ptr
 294+ EB28             >
 294+ EB28             >mirror_Ptr      defl    $
 294+ EB28             >
 294+ EB28 3E 39       >                dw      Dict_Ptr + 2        // xt
 294+ EB2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB2A             >
 294+ EB2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB2A             >
 294+ EB2A             >//              ______________________________________________________________________
 294+ EB2A             >//              Dictionary part
 294+ EB2A             >
 294+ EB2A             >                org     Dict_Ptr
 294+ 393C             >
 294+ 393C 28 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 393E             >
 294+ 393E             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 393E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 3941             >
 294+ 3941             >
 294+ 3941             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 3941             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 3941             >
 294+ 3941             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 3941 07 27                        dw      BL
 296+ 3943 AB 2D 98 2B                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 3947 64 25
 297+ 3949 0A 25 E4 26                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 394D 81 25 FC 25
 298+ 3951 9C 2D EB 26                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 3955 C5 23
 299+ 3957 3D 20 2B 00                  dw      LIT, 43                 // 43
 300+ 395B 53 2A                        dw      QERROR                  // ?error
 301+ 395D BD 24                        dw      EXIT                    // ;
 302+ 395F
 303+ 395F              //  ______________________________________________________________________
 304+ 395F              //
 305+ 395F              // use          -- cccc
 306+ 395F              // Include the following filename
 307+ 395F              //              Colon_Def USE, "USE", is_normal
 308+ 395F              //              dw      OPEN_FH                 // open<
 309+ 395F              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 395F              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 395F              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 395F              //              dw      EXIT                    // ;
 313+ 395F
 314+ 395F              //  ______________________________________________________________________
 315+ 395F              //
 316+ 395F              // include      -- cccc
 317+ 395F              // Include the following filename
 318+ 395F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 395F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 395F             >
 318+ 395F             >Dict_Ptr        defl    $
 318+ 395F             >
 318+ 395F             >//              ______________________________________________________________________
 318+ 395F             >//              Heap part
 318+ 395F             >
 318+ 395F             >
 318+ 395F             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB2A             >
 318+ EB2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB2A             >Latest_Definition defl  Heap_Ptr
 318+ EB2A             >
 318+ EB2A             >                // dummy db directives used to calculate length of namec
 318+ EB2A 49 4E 43 4C >                db      "INCLUDE"
 318+ EB2E 55 44 45    >
 318+ EB31             >len_NFA         defl    $ - temp_NFA
 318+ EB31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB2A             >
 318+ EB2A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB2B 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB2F 55 44 45    >
 318+ EB32             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB31 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB32             >
 318+ EB32 20 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB34             >Prev_Ptr        defl    Heap_Ptr
 318+ EB34             >
 318+ EB34             >mirror_Ptr      defl    $
 318+ EB34             >
 318+ EB34 61 39       >                dw      Dict_Ptr + 2        // xt
 318+ EB36             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB36             >
 318+ EB36             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB36             >
 318+ EB36             >//              ______________________________________________________________________
 318+ EB36             >//              Dictionary part
 318+ EB36             >
 318+ EB36             >                org     Dict_Ptr
 318+ 395F             >
 318+ 395F 34 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 3961             >
 318+ 3961             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 3961 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 3964             >
 318+ 3964             >
 318+ 3964             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 3964             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 3964             >
 318+ 3964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 3964 3E 39                        dw      OPEN_FH                 // open<
 320+ 3966 89 38                        dw      F_INCLUDE               //  f_include
 321+ 3968 BD 24                        dw      EXIT                    // ;
 322+ 396A
 323+ 396A              //  ______________________________________________________________________
 324+ 396A              //
 325+ 396A              // needs
 326+ 396A              // check for cccc exists in vocabulary
 327+ 396A              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 396A
 329+ 396A              // temp filename cccc.f as counted string zero-padded
 330+ 396A                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 396A             >
 330+ 396A             >Dict_Ptr        defl    $
 330+ 396A             >
 330+ 396A             >//              ______________________________________________________________________
 330+ 396A             >//              Heap part
 330+ 396A             >
 330+ 396A             >
 330+ 396A             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB36             >
 330+ EB36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB36             >Latest_Definition defl  Heap_Ptr
 330+ EB36             >
 330+ EB36             >                // dummy db directives used to calculate length of namec
 330+ EB36 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB3A 53 2D 57    >
 330+ EB3D             >len_NFA         defl    $ - temp_NFA
 330+ EB3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB36             >
 330+ EB36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB37 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB3B 53 2D 57    >
 330+ EB3E             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB3D D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB3E             >
 330+ EB3E 2A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB40             >Prev_Ptr        defl    Heap_Ptr
 330+ EB40             >
 330+ EB40             >mirror_Ptr      defl    $
 330+ EB40             >
 330+ EB40 6C 39       >                dw      Dict_Ptr + 2        // xt
 330+ EB42             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB42             >
 330+ EB42             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB42             >
 330+ EB42             >//              ______________________________________________________________________
 330+ EB42             >//              Dictionary part
 330+ EB42             >
 330+ EB42             >                org     Dict_Ptr
 330+ 396A             >
 330+ 396A 40 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 396C             >
 330+ 396C             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 396C CD F4 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 396F             >
 330+ 396F             >
 330+ 396F             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 396F             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 396F             >
 330+ 396F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 396F 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 3992              // temp complete path+filename
 333+ 3992                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 3992             >
 333+ 3992             >Dict_Ptr        defl    $
 333+ 3992             >
 333+ 3992             >//              ______________________________________________________________________
 333+ 3992             >//              Heap part
 333+ 3992             >
 333+ 3992             >
 333+ 3992             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB42             >
 333+ EB42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB42             >Latest_Definition defl  Heap_Ptr
 333+ EB42             >
 333+ EB42             >                // dummy db directives used to calculate length of namec
 333+ EB42 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB46 53 2D 46 4E >
 333+ EB4A             >len_NFA         defl    $ - temp_NFA
 333+ EB4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB42             >
 333+ EB42 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB43 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB47 53 2D 46 4E >
 333+ EB4B             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB4A CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB4B             >
 333+ EB4B 36 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB4D             >Prev_Ptr        defl    Heap_Ptr
 333+ EB4D             >
 333+ EB4D             >mirror_Ptr      defl    $
 333+ EB4D             >
 333+ EB4D 94 39       >                dw      Dict_Ptr + 2        // xt
 333+ EB4F             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB4F             >
 333+ EB4F             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB4F             >
 333+ EB4F             >//              ______________________________________________________________________
 333+ EB4F             >//              Dictionary part
 333+ EB4F             >
 333+ EB4F             >                org     Dict_Ptr
 333+ 3992             >
 333+ 3992 4D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 3994             >
 333+ 3994             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 3994 CD F4 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 3997             >
 333+ 3997             >
 333+ 3997             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 3997             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 3997             >
 333+ 3997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 3997 00 00 00...                  ds      40
 335+ 39BF              // constant path
 336+ 39BF                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 336+ 39BF             >
 336+ 39BF             >Dict_Ptr        defl    $
 336+ 39BF             >
 336+ 39BF             >//              ______________________________________________________________________
 336+ 39BF             >//              Heap part
 336+ 39BF             >
 336+ 39BF             >
 336+ 39BF             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB4F             >
 336+ EB4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB4F             >Latest_Definition defl  Heap_Ptr
 336+ EB4F             >
 336+ EB4F             >                // dummy db directives used to calculate length of namec
 336+ EB4F 4E 45 45 44 >                db      "NEEDS-INC"
 336+ EB53 53 2D 49 4E >
 336+ EB57 43          >
 336+ EB58             >len_NFA         defl    $ - temp_NFA
 336+ EB58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB4F             >
 336+ EB4F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB50 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 336+ EB54 53 2D 49 4E >
 336+ EB58 43          >
 336+ EB59             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB58 C3          >                db      {b $} | END_BIT     // msb as name end
 336+ EB59             >
 336+ EB59 42 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB5B             >Prev_Ptr        defl    Heap_Ptr
 336+ EB5B             >
 336+ EB5B             >mirror_Ptr      defl    $
 336+ EB5B             >
 336+ EB5B C1 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB5D             >
 336+ EB5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB5D             >
 336+ EB5D             >//              ______________________________________________________________________
 336+ EB5D             >//              Dictionary part
 336+ EB5D             >
 336+ EB5D             >                org     Dict_Ptr
 336+ 39BF             >
 336+ 39BF 5B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 39C1             >
 336+ 39C1             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 39C1 CD F4 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 39C4             >
 336+ 39C4             >
 336+ 39C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 39C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 39C4             >
 336+ 39C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 39C4 04 69 6E 63                  db      4, "inc/", 0
 337+ 39C8 2F 00
 338+ 39CA                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 338+ 39CA             >
 338+ 39CA             >Dict_Ptr        defl    $
 338+ 39CA             >
 338+ 39CA             >//              ______________________________________________________________________
 338+ 39CA             >//              Heap part
 338+ 39CA             >
 338+ 39CA             >
 338+ 39CA             >                org     (Heap_Ptr & $1FFF) + $E000
 338+ EB5D             >
 338+ EB5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ EB5D             >Latest_Definition defl  Heap_Ptr
 338+ EB5D             >
 338+ EB5D             >                // dummy db directives used to calculate length of namec
 338+ EB5D 4E 45 45 44 >                db      "NEEDS-LIB"
 338+ EB61 53 2D 4C 49 >
 338+ EB65 42          >
 338+ EB66             >len_NFA         defl    $ - temp_NFA
 338+ EB66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ EB5D             >
 338+ EB5D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ EB5E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 338+ EB62 53 2D 4C 49 >
 338+ EB66 42          >
 338+ EB67             >                org     $-1                 // alter last byte of Name just above to set
 338+ EB66 C2          >                db      {b $} | END_BIT     // msb as name end
 338+ EB67             >
 338+ EB67 4F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 338+ EB69             >Prev_Ptr        defl    Heap_Ptr
 338+ EB69             >
 338+ EB69             >mirror_Ptr      defl    $
 338+ EB69             >
 338+ EB69 CC 39       >                dw      Dict_Ptr + 2        // xt
 338+ EB6B             >Heap_Ptr        defl    $ - $E000           // save current HP
 338+ EB6B             >
 338+ EB6B             >Current_HP      defl  $ - $E000             // used to set HP once!
 338+ EB6B             >
 338+ EB6B             >//              ______________________________________________________________________
 338+ EB6B             >//              Dictionary part
 338+ EB6B             >
 338+ EB6B             >                org     Dict_Ptr
 338+ 39CA             >
 338+ 39CA 69 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 338+ 39CC             >
 338+ 39CC             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 39CC CD F4 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 338+ 39CF             >
 338+ 39CF             >
 338+ 39CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 39CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 39CF             >
 338+ 39CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 39CF 04 6C 69 62                  db      4, "lib/", 0
 339+ 39D3 2F 00
 340+ 39D5
 341+ 39D5              // Concatenate path at a and filename and include it
 342+ 39D5              // No error is issued if filename doesn't exist.
 343+ 39D5                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 343+ 39D5             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 343+ 39D5             >
 343+ 39D5             >Dict_Ptr        defl    $
 343+ 39D5             >
 343+ 39D5             >//              ______________________________________________________________________
 343+ 39D5             >//              Heap part
 343+ 39D5             >
 343+ 39D5             >
 343+ 39D5             >                org     (Heap_Ptr & $1FFF) + $E000
 343+ EB6B             >
 343+ EB6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ EB6B             >Latest_Definition defl  Heap_Ptr
 343+ EB6B             >
 343+ EB6B             >                // dummy db directives used to calculate length of namec
 343+ EB6B 4E 45 45 44 >                db      "NEEDS/"
 343+ EB6F 53 2F       >
 343+ EB71             >len_NFA         defl    $ - temp_NFA
 343+ EB71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ EB6B             >
 343+ EB6B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ EB6C 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 343+ EB70 53 2F       >
 343+ EB72             >                org     $-1                 // alter last byte of Name just above to set
 343+ EB71 AF          >                db      {b $} | END_BIT     // msb as name end
 343+ EB72             >
 343+ EB72 5D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 343+ EB74             >Prev_Ptr        defl    Heap_Ptr
 343+ EB74             >
 343+ EB74             >mirror_Ptr      defl    $
 343+ EB74             >
 343+ EB74 D7 39       >                dw      Dict_Ptr + 2        // xt
 343+ EB76             >Heap_Ptr        defl    $ - $E000           // save current HP
 343+ EB76             >
 343+ EB76             >Current_HP      defl  $ - $E000             // used to set HP once!
 343+ EB76             >
 343+ EB76             >//              ______________________________________________________________________
 343+ EB76             >//              Dictionary part
 343+ EB76             >
 343+ EB76             >                org     Dict_Ptr
 343+ 39D5             >
 343+ 39D5 74 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 343+ 39D7             >
 343+ 39D7             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 39D7 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 343+ 39DA             >
 343+ 39DA             >
 343+ 39DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 39DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 39DA             >
 343+ 39DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 39DA 98 2B 78 25                  dw      COUNT, TUCK             // n a n
 345+ 39DE 94 39 81 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 345+ 39E2 02 24
 346+ 39E4 94 39 0A 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 347+ 39E8 6C 39 23 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 347+ 39EC 81 25
 348+ 39EE 3D 20 23 00                  dw      LIT, 35
 349+ 39F2 02 24                        dw      CMOVE
 350+ 39F4 94 39                        dw      NEEDS_FN
 351+ 39F6 9C 2D EB 26                  dw      PAD, ONE, F_OPEN
 351+ 39FA C5 23
 352+ 39FC E2 24                        dw      ZEQUAL
 353+ 39FE 8D 20                        dw      ZBRANCH
 354+ 3A00 08 00                        dw      Needs_1 - $
 355+ 3A02 89 38                        dw          F_INCLUDE
 356+ 3A04 89 20                        dw      BRANCH
 357+ 3A06 04 00                        dw      Needs_2 - $
 358+ 3A08              Needs_1:
 359+ 3A08              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 360+ 3A08              //              dw          LIT, 43, MESSAGE
 361+ 3A08 6D 25                        dw          DROP
 362+ 3A0A              Needs_2:
 363+ 3A0A BD 24                        dw      EXIT                    // ;
 364+ 3A0C
 365+ 3A0C              NDOM_PTR:
 366+ 3A0C              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 3A0C              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 368+ 3A0C 3A 3F 2F 2A                  db ':?/*|\<>"'
 368+ 3A10 7C 5C 3C 3E
 368+ 3A14 22
 369+ 3A15              //              db 0
 370+ 3A15
 371+ 3A15              NCDM_PTR:
 372+ 3A15              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 373+ 3A15              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 3A15 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 3A19 24 5F 7B 7D
 374+ 3A1D 7E
 375+ 3A1E              //              db 0
 376+ 3A1E
 377+ 3A1E              // Replace illegal character in filename using the map here above
 378+ 3A1E              // at the moment we need only  "
 379+ 3A1E                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 3A1E             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 3A1E             >
 379+ 3A1E             >Dict_Ptr        defl    $
 379+ 3A1E             >
 379+ 3A1E             >//              ______________________________________________________________________
 379+ 3A1E             >//              Heap part
 379+ 3A1E             >
 379+ 3A1E             >
 379+ 3A1E             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB76             >
 379+ EB76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB76             >Latest_Definition defl  Heap_Ptr
 379+ EB76             >
 379+ EB76             >                // dummy db directives used to calculate length of namec
 379+ EB76 4D 41 50 2D >                db      "MAP-FN"
 379+ EB7A 46 4E       >
 379+ EB7C             >len_NFA         defl    $ - temp_NFA
 379+ EB7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB76             >
 379+ EB76 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB77 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB7B 46 4E       >
 379+ EB7D             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB7C CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB7D             >
 379+ EB7D 6B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB7F             >Prev_Ptr        defl    Heap_Ptr
 379+ EB7F             >
 379+ EB7F             >mirror_Ptr      defl    $
 379+ EB7F             >
 379+ EB7F 20 3A       >                dw      Dict_Ptr + 2        // xt
 379+ EB81             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB81             >
 379+ EB81             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB81             >
 379+ EB81             >//              ______________________________________________________________________
 379+ EB81             >//              Dictionary part
 379+ EB81             >
 379+ EB81             >                org     Dict_Ptr
 379+ 3A1E             >
 379+ 3A1E 7F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 3A20             >
 379+ 3A20             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 3A20 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 3A23             >
 379+ 3A23             >
 379+ 3A23             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 3A23             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 3A23             >
 379+ 3A23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 3A23 98 2B A5 2B                  dw      COUNT, BOUNDS
 381+ 3A27 C6 20                        dw      C_DO
 382+ 3A29              Needs_3:
 383+ 3A29              //              dw          NCDM, NDOM, LIT, 10
 384+ 3A29 3D 20 15 3A                  dw          LIT, NCDM_PTR           //
 385+ 3A2D 3D 20 0C 3A                  dw          LIT, NDOM_PTR           //
 386+ 3A31 3D 20 09 00                  dw          LIT, 9
 387+ 3A35 CC 20 07 26                  dw          I, CFETCH
 388+ 3A39 E8 21                        dw          C_MAP
 389+ 3A3B CC 20 10 26                  dw          I, CSTORE
 390+ 3A3F              Needs_4:
 391+ 3A3F 81 20                        dw      C_LOOP
 392+ 3A41 E8 FF                        dw      Needs_3 - $
 393+ 3A43 BD 24                        dw      EXIT
 394+ 3A45
 395+ 3A45
 396+ 3A45              // include  "path/cccc.f" if cccc is not defined
 397+ 3A45              // filename cccc.f is temporary stored at NEEDS-W
 398+ 3A45                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 398+ 3A45             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 398+ 3A45             >
 398+ 3A45             >Dict_Ptr        defl    $
 398+ 3A45             >
 398+ 3A45             >//              ______________________________________________________________________
 398+ 3A45             >//              Heap part
 398+ 3A45             >
 398+ 3A45             >
 398+ 3A45             >                org     (Heap_Ptr & $1FFF) + $E000
 398+ EB81             >
 398+ EB81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ EB81             >Latest_Definition defl  Heap_Ptr
 398+ EB81             >
 398+ EB81             >                // dummy db directives used to calculate length of namec
 398+ EB81 4E 45 45 44 >                db      "NEEDS-F"
 398+ EB85 53 2D 46    >
 398+ EB88             >len_NFA         defl    $ - temp_NFA
 398+ EB88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ EB81             >
 398+ EB81 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ EB82 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 398+ EB86 53 2D 46    >
 398+ EB89             >                org     $-1                 // alter last byte of Name just above to set
 398+ EB88 C6          >                db      {b $} | END_BIT     // msb as name end
 398+ EB89             >
 398+ EB89 76 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 398+ EB8B             >Prev_Ptr        defl    Heap_Ptr
 398+ EB8B             >
 398+ EB8B             >mirror_Ptr      defl    $
 398+ EB8B             >
 398+ EB8B 47 3A       >                dw      Dict_Ptr + 2        // xt
 398+ EB8D             >Heap_Ptr        defl    $ - $E000           // save current HP
 398+ EB8D             >
 398+ EB8D             >Current_HP      defl  $ - $E000             // used to set HP once!
 398+ EB8D             >
 398+ EB8D             >//              ______________________________________________________________________
 398+ EB8D             >//              Dictionary part
 398+ EB8D             >
 398+ EB8D             >                org     Dict_Ptr
 398+ 3A45             >
 398+ 3A45 8B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 398+ 3A47             >
 398+ 3A47             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 3A47 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 3A4A             >
 398+ 3A4A             >
 398+ 3A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 3A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 3A4A             >
 398+ 3A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 3A4A ED 2F                        dw      LFIND
 400+ 3A4C 8D 20                        dw      ZBRANCH
 401+ 3A4E 0A 00                        dw      Needs_5 - $
 402+ 3A50
 403+ 3A50 6D 25 BD 25                  dw          DROP, TWO_DROP
 404+ 3A54 89 20                        dw      BRANCH
 405+ 3A56 2C 00                        dw      Needs_6 - $
 406+ 3A58              Needs_5:
 407+ 3A58 6C 39                        dw          NEEDS_W
 408+ 3A5A 3D 20 23 00                  dw          LIT, 35
 409+ 3A5E 73 2D                        dw          ERASE                   // a
 410+ 3A60 09 28 07 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 410+ 3A64 23 25
 411+ 3A66 09 28 64 25                  dw          HERE, OVER              // a n here n
 412+ 3A6A 6C 39 81 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 412+ 3A6E 02 24
 413+ 3A70 6C 39 20 3A                  dw          NEEDS_W, NEEDS_CHECK
 414+ 3A74 6C 39 0A 25                  dw          NEEDS_W, PLUS           // a a1+1
 415+ 3A78 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 416+ 3A7C 81 25 FC 25                  dw          SWAP, STORE             // a
 417+ 3A80 D7 39                        dw          NEEDS_SLASH
 418+ 3A82              Needs_6:
 419+ 3A82 BD 24                        dw      EXIT
 420+ 3A84
 421+ 3A84
 422+ 3A84              // check for cccc exists in vocabulary
 423+ 3A84              // if it doesn't then  INCLUDE  inc/cccc.F
 424+ 3A84              // search in inc subdirectory
 425+ 3A84                              Colon_Def NEEDS, "NEEDS", is_normal
 425+ 3A84             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 425+ 3A84             >
 425+ 3A84             >Dict_Ptr        defl    $
 425+ 3A84             >
 425+ 3A84             >//              ______________________________________________________________________
 425+ 3A84             >//              Heap part
 425+ 3A84             >
 425+ 3A84             >
 425+ 3A84             >                org     (Heap_Ptr & $1FFF) + $E000
 425+ EB8D             >
 425+ EB8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ EB8D             >Latest_Definition defl  Heap_Ptr
 425+ EB8D             >
 425+ EB8D             >                // dummy db directives used to calculate length of namec
 425+ EB8D 4E 45 45 44 >                db      "NEEDS"
 425+ EB91 53          >
 425+ EB92             >len_NFA         defl    $ - temp_NFA
 425+ EB92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ EB8D             >
 425+ EB8D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ EB8E 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 425+ EB92 53          >
 425+ EB93             >                org     $-1                 // alter last byte of Name just above to set
 425+ EB92 D3          >                db      {b $} | END_BIT     // msb as name end
 425+ EB93             >
 425+ EB93 81 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 425+ EB95             >Prev_Ptr        defl    Heap_Ptr
 425+ EB95             >
 425+ EB95             >mirror_Ptr      defl    $
 425+ EB95             >
 425+ EB95 86 3A       >                dw      Dict_Ptr + 2        // xt
 425+ EB97             >Heap_Ptr        defl    $ - $E000           // save current HP
 425+ EB97             >
 425+ EB97             >Current_HP      defl  $ - $E000             // used to set HP once!
 425+ EB97             >
 425+ EB97             >//              ______________________________________________________________________
 425+ EB97             >//              Dictionary part
 425+ EB97             >
 425+ EB97             >                org     Dict_Ptr
 425+ 3A84             >
 425+ 3A84 95 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 425+ 3A86             >
 425+ 3A86             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 3A86 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 3A89             >
 425+ 3A89             >
 425+ 3A89             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 3A89             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 3A89             >
 425+ 3A89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 3A89 8B 27 F2 25                  dw      TO_IN, FETCH
 427+ 3A8D 88 25                        dw      DUP
 428+ 3A8F C1 39 47 3A                  dw      NEEDS_INC, NEEDS_PATH
 429+ 3A93 8B 27 FC 25                  dw      TO_IN, STORE
 430+ 3A97 CC 39 47 3A                  dw      NEEDS_LIB, NEEDS_PATH
 431+ 3A9B 8B 27 FC 25                  dw      TO_IN, STORE
 432+ 3A9F ED 2F                        dw      LFIND
 433+ 3AA1 8D 20                        dw      ZBRANCH
 434+ 3AA3 08 00                        dw      Needs_10 - $
 435+ 3AA5 BD 25                        dw          TWO_DROP
 436+ 3AA7 89 20                        dw      BRANCH
 437+ 3AA9 10 00                        dw      Needs_11 - $
 438+ 3AAB              Needs_10:
 439+ 3AAB 6C 39 98 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 439+ 3AAF 59 2C DB 28
 440+ 3AB3 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 440+ 3AB7 B6 35
 441+ 3AB9              Needs_11:
 442+ 3AB9 BD 24                        dw      EXIT
 443+ 3ABB
 444+ 3ABB
 445+ 3ABB              //  ______________________________________________________________________
 446+ 3ABB              //
 447+ 3ABB              // load         n --
 448+ 3ABB                              Colon_Def LOAD, "LOAD", is_normal
 448+ 3ABB             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 448+ 3ABB             >
 448+ 3ABB             >Dict_Ptr        defl    $
 448+ 3ABB             >
 448+ 3ABB             >//              ______________________________________________________________________
 448+ 3ABB             >//              Heap part
 448+ 3ABB             >
 448+ 3ABB             >
 448+ 3ABB             >                org     (Heap_Ptr & $1FFF) + $E000
 448+ EB97             >
 448+ EB97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ EB97             >Latest_Definition defl  Heap_Ptr
 448+ EB97             >
 448+ EB97             >                // dummy db directives used to calculate length of namec
 448+ EB97 4C 4F 41 44 >                db      "LOAD"
 448+ EB9B             >len_NFA         defl    $ - temp_NFA
 448+ EB9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ EB97             >
 448+ EB97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ EB98 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 448+ EB9C             >                org     $-1                 // alter last byte of Name just above to set
 448+ EB9B C4          >                db      {b $} | END_BIT     // msb as name end
 448+ EB9C             >
 448+ EB9C 8D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 448+ EB9E             >Prev_Ptr        defl    Heap_Ptr
 448+ EB9E             >
 448+ EB9E             >mirror_Ptr      defl    $
 448+ EB9E             >
 448+ EB9E BD 3A       >                dw      Dict_Ptr + 2        // xt
 448+ EBA0             >Heap_Ptr        defl    $ - $E000           // save current HP
 448+ EBA0             >
 448+ EBA0             >Current_HP      defl  $ - $E000             // used to set HP once!
 448+ EBA0             >
 448+ EBA0             >//              ______________________________________________________________________
 448+ EBA0             >//              Dictionary part
 448+ EBA0             >
 448+ EBA0             >                org     Dict_Ptr
 448+ 3ABB             >
 448+ 3ABB 9E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 448+ 3ABD             >
 448+ 3ABD             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 3ABD CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 3AC0             >
 448+ 3AC0             >
 448+ 3AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 3AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 3AC0             >
 448+ 3AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 3AC0 85 27 F2 25                  dw      BLK, FETCH, TO_R        // blk @ >r
 449+ 3AC4 C7 24
 450+ 3AC6 8B 27 F2 25                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 450+ 3ACA C7 24
 451+ 3ACC
 452+ 3ACC E4 26 8B 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 452+ 3AD0 FC 25
 453+ 3AD2 1C 27 42 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 453+ 3AD6 85 27 FC 25
 454+ 3ADA B0 31                        dw      INTERPRET               // interpret
 455+ 3ADC
 456+ 3ADC D2 24 8B 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 456+ 3AE0 FC 25
 457+ 3AE2 D2 24 85 27                  dw      R_TO, BLK, STORE        // r> blk !
 457+ 3AE6 FC 25
 458+ 3AE8 BD 24                        dw      EXIT                    // ;
 459+ 3AEA
 460+ 3AEA              //  ______________________________________________________________________
 461+ 3AEA              //
 462+ 3AEA              // -->          --
 463+ 3AEA                              Colon_Def LOAD_NEXT, "-->", is_immediate
 463+ 3AEA             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 463+ 3AEA             >
 463+ 3AEA             >Dict_Ptr        defl    $
 463+ 3AEA             >
 463+ 3AEA             >//              ______________________________________________________________________
 463+ 3AEA             >//              Heap part
 463+ 3AEA             >
 463+ 3AEA             >
 463+ 3AEA             >                org     (Heap_Ptr & $1FFF) + $E000
 463+ EBA0             >
 463+ EBA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ EBA0             >Latest_Definition defl  Heap_Ptr
 463+ EBA0             >
 463+ EBA0             >                // dummy db directives used to calculate length of namec
 463+ EBA0 2D 2D 3E    >                db      "-->"
 463+ EBA3             >len_NFA         defl    $ - temp_NFA
 463+ EBA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ EBA0             >
 463+ EBA0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ EBA1 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 463+ EBA4             >                org     $-1                 // alter last byte of Name just above to set
 463+ EBA3 BE          >                db      {b $} | END_BIT     // msb as name end
 463+ EBA4             >
 463+ EBA4 97 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 463+ EBA6             >Prev_Ptr        defl    Heap_Ptr
 463+ EBA6             >
 463+ EBA6             >mirror_Ptr      defl    $
 463+ EBA6             >
 463+ EBA6 EC 3A       >                dw      Dict_Ptr + 2        // xt
 463+ EBA8             >Heap_Ptr        defl    $ - $E000           // save current HP
 463+ EBA8             >
 463+ EBA8             >Current_HP      defl  $ - $E000             // used to set HP once!
 463+ EBA8             >
 463+ EBA8             >//              ______________________________________________________________________
 463+ EBA8             >//              Dictionary part
 463+ EBA8             >
 463+ EBA8             >                org     Dict_Ptr
 463+ 3AEA             >
 463+ 3AEA A6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 463+ 3AEC             >
 463+ 3AEC             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 3AEC CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 3AEF             >
 463+ 3AEF             >
 463+ 3AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 3AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 3AEF             >
 463+ 3AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 3AEF B0 2A                        dw      QLOADING                // ?loading
 465+ 3AF1 E4 26 8B 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 465+ 3AF5 FC 25
 466+ 3AF7 1C 27                        dw      BSCR                    // b/scr
 467+ 3AF9 85 27 F2 25                  dw      BLK, FETCH              // blk @
 468+ 3AFD 64 25                        dw      OVER                    // over
 469+ 3AFF 67 35                        dw      MOD                     // mod
 470+ 3B01 48 28                        dw      SUBTRACT                // -
 471+ 3B03 85 27 DA 25                  dw      BLK, PLUSSTORE          // +!
 472+ 3B07 BD 24                        dw      EXIT                    // ;
 473+ 3B09
 474+ 3B09              //  ______________________________________________________________________
 475+ 3B09              //
 476+ 3B09              // '            -- xt
 477+ 3B09                              Colon_Def TICK, "'", is_normal
 477+ 3B09             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 477+ 3B09             >
 477+ 3B09             >Dict_Ptr        defl    $
 477+ 3B09             >
 477+ 3B09             >//              ______________________________________________________________________
 477+ 3B09             >//              Heap part
 477+ 3B09             >
 477+ 3B09             >
 477+ 3B09             >                org     (Heap_Ptr & $1FFF) + $E000
 477+ EBA8             >
 477+ EBA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 477+ EBA8             >Latest_Definition defl  Heap_Ptr
 477+ EBA8             >
 477+ EBA8             >                // dummy db directives used to calculate length of namec
 477+ EBA8 27          >                db      "'"
 477+ EBA9             >len_NFA         defl    $ - temp_NFA
 477+ EBA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 477+ EBA8             >
 477+ EBA8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 477+ EBA9 27          >                db      "'"               // name string in 7-bit ascii, but
 477+ EBAA             >                org     $-1                 // alter last byte of Name just above to set
 477+ EBA9 A7          >                db      {b $} | END_BIT     // msb as name end
 477+ EBAA             >
 477+ EBAA A0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 477+ EBAC             >Prev_Ptr        defl    Heap_Ptr
 477+ EBAC             >
 477+ EBAC             >mirror_Ptr      defl    $
 477+ EBAC             >
 477+ EBAC 0B 3B       >                dw      Dict_Ptr + 2        // xt
 477+ EBAE             >Heap_Ptr        defl    $ - $E000           // save current HP
 477+ EBAE             >
 477+ EBAE             >Current_HP      defl  $ - $E000             // used to set HP once!
 477+ EBAE             >
 477+ EBAE             >//              ______________________________________________________________________
 477+ EBAE             >//              Dictionary part
 477+ EBAE             >
 477+ EBAE             >                org     Dict_Ptr
 477+ 3B09             >
 477+ 3B09 AC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 477+ 3B0B             >
 477+ 3B0B             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 477+ 3B0B CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 477+ 3B0E             >
 477+ 3B0E             >
 477+ 3B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 477+ 3B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 477+ 3B0E             >
 477+ 3B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 478+ 3B0E ED 2F                        dw      LFIND                   // -find
 479+ 3B10 E2 24                        dw      ZEQUAL                  // 0=
 480+ 3B12 E4 26 53 2A                  dw      ZERO, QERROR            // 0 ?error
 481+ 3B16 6D 25                        dw      DROP                    // drop
 482+ 3B18 BD 24                        dw      EXIT                    // ;
 483+ 3B1A
 484+ 3B1A              //  ______________________________________________________________________
 485+ 3B1A              //
 486+ 3B1A              // forget       -- cccc
 487+ 3B1A                              Colon_Def FORGET, "FORGET", is_normal
 487+ 3B1A             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 487+ 3B1A             >
 487+ 3B1A             >Dict_Ptr        defl    $
 487+ 3B1A             >
 487+ 3B1A             >//              ______________________________________________________________________
 487+ 3B1A             >//              Heap part
 487+ 3B1A             >
 487+ 3B1A             >
 487+ 3B1A             >                org     (Heap_Ptr & $1FFF) + $E000
 487+ EBAE             >
 487+ EBAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 487+ EBAE             >Latest_Definition defl  Heap_Ptr
 487+ EBAE             >
 487+ EBAE             >                // dummy db directives used to calculate length of namec
 487+ EBAE 46 4F 52 47 >                db      "FORGET"
 487+ EBB2 45 54       >
 487+ EBB4             >len_NFA         defl    $ - temp_NFA
 487+ EBB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 487+ EBAE             >
 487+ EBAE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 487+ EBAF 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 487+ EBB3 45 54       >
 487+ EBB5             >                org     $-1                 // alter last byte of Name just above to set
 487+ EBB4 D4          >                db      {b $} | END_BIT     // msb as name end
 487+ EBB5             >
 487+ EBB5 A8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 487+ EBB7             >Prev_Ptr        defl    Heap_Ptr
 487+ EBB7             >
 487+ EBB7             >mirror_Ptr      defl    $
 487+ EBB7             >
 487+ EBB7 1C 3B       >                dw      Dict_Ptr + 2        // xt
 487+ EBB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 487+ EBB9             >
 487+ EBB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 487+ EBB9             >
 487+ EBB9             >//              ______________________________________________________________________
 487+ EBB9             >//              Dictionary part
 487+ EBB9             >
 487+ EBB9             >                org     Dict_Ptr
 487+ 3B1A             >
 487+ 3B1A B7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 487+ 3B1C             >
 487+ 3B1C             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 487+ 3B1C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 487+ 3B1F             >
 487+ 3B1F             >
 487+ 3B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 487+ 3B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 487+ 3B1F             >
 487+ 3B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 488+ 3B1F A9 27 F2 25                  dw      CURRENT, FETCH          // current @
 489+ 3B23 A3 27 F2 25                  dw      CONTEXT, FETCH          // context @
 490+ 3B27 48 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 490+ 3B2B 17 00 53 2A
 491+ 3B2F 0B 3B D2 29                  dw      TICK, TO_BODY           // ' >body
 492+ 3B33 88 25 5B 27                  dw      DUP, FENCE, FETCH       // dup fence @
 492+ 3B37 F2 25
 493+ 3B39 5F 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 493+ 3B3D 15 00 53 2A
 494+ 3B41 88 25 07 2A                  dw      DUP, NFA                // dup nfa
 495+ 3B45
 496+ 3B45                          //  dw      DUP
 497+ 3B45                          //  dw      LIT, $E000, LESS
 498+ 3B45                          //  dw      MMU7_FETCH, ONE, EQUALS
 499+ 3B45                          //  dw      OR_OP, NOT_OP
 500+ 3B45                          //  dw      ZBRANCH
 501+ 3B45                          //  dw      Forget_then - $
 502+ 3B45
 503+ 3B45 10 29 33 29                  dw      MMU7_FETCH, FROM_FAR
 504+ 3B49 79 27 FC 25                  dw      HP, STORE
 505+ 3B4D 88 25 FC 29                  dw      DUP, CFA, CELL_MINUS
 505+ 3B51 3D 25
 506+ 3B53              // Forget_then:
 507+ 3B53 61 27 FC 25                  dw      DP, STORE               // dp !
 508+ 3B57 12 2A F2 25                  dw      LFA, FETCH              // lfa @
 509+ 3B5B A3 27 F2 25                  dw      CONTEXT, FETCH, STORE   // context @ !
 509+ 3B5F FC 25
 510+ 3B61 BD 24                        dw      EXIT                    // ;
 511+ 3B63
 512+ 3B63              //  ______________________________________________________________________
 513+ 3B63              //
 514+ 3B63              // marker       -- cccc
 515+ 3B63                              Colon_Def MARKER, "MARKER", is_immediate
 515+ 3B63             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 515+ 3B63             >
 515+ 3B63             >Dict_Ptr        defl    $
 515+ 3B63             >
 515+ 3B63             >//              ______________________________________________________________________
 515+ 3B63             >//              Heap part
 515+ 3B63             >
 515+ 3B63             >
 515+ 3B63             >                org     (Heap_Ptr & $1FFF) + $E000
 515+ EBB9             >
 515+ EBB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ EBB9             >Latest_Definition defl  Heap_Ptr
 515+ EBB9             >
 515+ EBB9             >                // dummy db directives used to calculate length of namec
 515+ EBB9 4D 41 52 4B >                db      "MARKER"
 515+ EBBD 45 52       >
 515+ EBBF             >len_NFA         defl    $ - temp_NFA
 515+ EBBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ EBB9             >
 515+ EBB9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ EBBA 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 515+ EBBE 45 52       >
 515+ EBC0             >                org     $-1                 // alter last byte of Name just above to set
 515+ EBBF D2          >                db      {b $} | END_BIT     // msb as name end
 515+ EBC0             >
 515+ EBC0 AE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 515+ EBC2             >Prev_Ptr        defl    Heap_Ptr
 515+ EBC2             >
 515+ EBC2             >mirror_Ptr      defl    $
 515+ EBC2             >
 515+ EBC2 65 3B       >                dw      Dict_Ptr + 2        // xt
 515+ EBC4             >Heap_Ptr        defl    $ - $E000           // save current HP
 515+ EBC4             >
 515+ EBC4             >Current_HP      defl  $ - $E000             // used to set HP once!
 515+ EBC4             >
 515+ EBC4             >//              ______________________________________________________________________
 515+ EBC4             >//              Dictionary part
 515+ EBC4             >
 515+ EBC4             >                org     Dict_Ptr
 515+ 3B63             >
 515+ 3B63 C2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 515+ 3B65             >
 515+ 3B65             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 3B65 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 3B68             >
 515+ 3B68             >
 515+ 3B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 3B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 3B68             >
 515+ 3B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 3B68 DF 30                        dw      CREATE
 517+ 3B6A
 518+ 3B6A 67 27 F2 25                  dw      VOC_LINK, FETCH, COMMA
 518+ 3B6E 1F 28
 519+ 3B70 A9 27 F2 25                  dw      CURRENT, FETCH, COMMA
 519+ 3B74 1F 28
 520+ 3B76 A3 27 F2 25                  dw      CONTEXT, FETCH, COMMA
 520+ 3B7A 1F 28
 521+ 3B7C A9 27 F2 25                  dw      CURRENT, FETCH, FETCH,  COMMA
 521+ 3B80 F2 25 1F 28
 522+ 3B84 C3 29 21 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 522+ 3B88 12 2A F2 25
 522+ 3B8C 1F 28
 523+ 3B8E
 524+ 3B8E 6E 2B                        dw      C_DOES
 525+ 3B90
 526+ 3B90                        //    nop
 527+ 3B90 CD 8F 26                     call    Enter_Ptr
 528+ 3B93
 529+ 3B93 88 25 F2 25                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 529+ 3B97 67 27 FC 25
 529+ 3B9B 39 25
 530+ 3B9D 88 25 F2 25                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 530+ 3BA1 A9 27 FC 25
 530+ 3BA5 39 25
 531+ 3BA7 88 25 F2 25                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 531+ 3BAB A3 27 FC 25
 531+ 3BAF 39 25
 532+ 3BB1 88 25 F2 25                  dw      DUP, FETCH
 533+ 3BB5                          //  dw      DUP, QHEAPP
 534+ 3BB5                          //  dw      ZBRANCH
 535+ 3BB5                          //  dw      Marker_then - $
 536+ 3BB5 88 25 79 27                  dw          DUP, HP, STORE
 536+ 3BB9 FC 25
 537+ 3BBB 21 2A FC 29                  dw          PFA, CFA, CELL_MINUS
 537+ 3BBF 3D 25
 538+ 3BC1              // Marker_then:
 539+ 3BC1 61 27 FC 25                  dw      DP, STORE, CELL_PLUS
 539+ 3BC5 39 25
 540+ 3BC7 F2 25 A9 27                  dw      FETCH, CURRENT, FETCH, STORE
 540+ 3BCB F2 25 FC 25
 541+ 3BCF BD 24                        dw      EXIT
 542+ 3BD1
 543+ 3BD1              //  ______________________________________________________________________
 544+ 3BD1              //
 545+ 3BD1              // spaces       n --
 546+ 3BD1                              Colon_Def SPACES, "SPACES", is_normal
 546+ 3BD1             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 546+ 3BD1             >
 546+ 3BD1             >Dict_Ptr        defl    $
 546+ 3BD1             >
 546+ 3BD1             >//              ______________________________________________________________________
 546+ 3BD1             >//              Heap part
 546+ 3BD1             >
 546+ 3BD1             >
 546+ 3BD1             >                org     (Heap_Ptr & $1FFF) + $E000
 546+ EBC4             >
 546+ EBC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ EBC4             >Latest_Definition defl  Heap_Ptr
 546+ EBC4             >
 546+ EBC4             >                // dummy db directives used to calculate length of namec
 546+ EBC4 53 50 41 43 >                db      "SPACES"
 546+ EBC8 45 53       >
 546+ EBCA             >len_NFA         defl    $ - temp_NFA
 546+ EBCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ EBC4             >
 546+ EBC4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ EBC5 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 546+ EBC9 45 53       >
 546+ EBCB             >                org     $-1                 // alter last byte of Name just above to set
 546+ EBCA D3          >                db      {b $} | END_BIT     // msb as name end
 546+ EBCB             >
 546+ EBCB B9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 546+ EBCD             >Prev_Ptr        defl    Heap_Ptr
 546+ EBCD             >
 546+ EBCD             >mirror_Ptr      defl    $
 546+ EBCD             >
 546+ EBCD D3 3B       >                dw      Dict_Ptr + 2        // xt
 546+ EBCF             >Heap_Ptr        defl    $ - $E000           // save current HP
 546+ EBCF             >
 546+ EBCF             >Current_HP      defl  $ - $E000             // used to set HP once!
 546+ EBCF             >
 546+ EBCF             >//              ______________________________________________________________________
 546+ EBCF             >//              Dictionary part
 546+ EBCF             >
 546+ EBCF             >                org     Dict_Ptr
 546+ 3BD1             >
 546+ 3BD1 CD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 546+ 3BD3             >
 546+ 3BD3             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 3BD3 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 546+ 3BD6             >
 546+ 3BD6             >
 546+ 3BD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 3BD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 3BD6             >
 546+ 3BD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 3BD6 E4 26 98 28                  dw      ZERO, MAX
 548+ 3BDA E4 26 A0 20                  dw      ZERO, C_Q_DO
 549+ 3BDE 08 00                        dw      Spaces_Leave - $
 550+ 3BE0              Spaces_Loop:
 551+ 3BE0 DB 28                        dw          SPACE
 552+ 3BE2 81 20                        dw      C_LOOP
 553+ 3BE4 FC FF                        dw      Spaces_Loop - $
 554+ 3BE6              Spaces_Leave:
 555+ 3BE6 BD 24                        dw      EXIT                    // ;
 556+ 3BE8
 557+ 3BE8              //  ______________________________________________________________________
 558+ 3BE8              //
 559+ 3BE8              // <#           --
 560+ 3BE8                              Colon_Def BEGIN_DASH, "<#", is_normal
 560+ 3BE8             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 560+ 3BE8             >
 560+ 3BE8             >Dict_Ptr        defl    $
 560+ 3BE8             >
 560+ 3BE8             >//              ______________________________________________________________________
 560+ 3BE8             >//              Heap part
 560+ 3BE8             >
 560+ 3BE8             >
 560+ 3BE8             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ EBCF             >
 560+ EBCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ EBCF             >Latest_Definition defl  Heap_Ptr
 560+ EBCF             >
 560+ EBCF             >                // dummy db directives used to calculate length of namec
 560+ EBCF 3C 23       >                db      "<#"
 560+ EBD1             >len_NFA         defl    $ - temp_NFA
 560+ EBD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ EBCF             >
 560+ EBCF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ EBD0 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 560+ EBD2             >                org     $-1                 // alter last byte of Name just above to set
 560+ EBD1 A3          >                db      {b $} | END_BIT     // msb as name end
 560+ EBD2             >
 560+ EBD2 C4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ EBD4             >Prev_Ptr        defl    Heap_Ptr
 560+ EBD4             >
 560+ EBD4             >mirror_Ptr      defl    $
 560+ EBD4             >
 560+ EBD4 EA 3B       >                dw      Dict_Ptr + 2        // xt
 560+ EBD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ EBD6             >
 560+ EBD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ EBD6             >
 560+ EBD6             >//              ______________________________________________________________________
 560+ EBD6             >//              Dictionary part
 560+ EBD6             >
 560+ EBD6             >                org     Dict_Ptr
 560+ 3BE8             >
 560+ 3BE8 D4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 3BEA             >
 560+ 3BEA             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 3BEA CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 3BED             >
 560+ 3BED             >
 560+ 3BED             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 3BED             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 3BED             >
 560+ 3BED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 3BED 9C 2D D3 27                  dw      PAD, HLD, STORE
 561+ 3BF1 FC 25
 562+ 3BF3 BD 24                        dw      EXIT
 563+ 3BF5
 564+ 3BF5              //  ______________________________________________________________________
 565+ 3BF5              //
 566+ 3BF5              // #>           --
 567+ 3BF5                              Colon_Def DASH_END, "#>", is_normal
 567+ 3BF5             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 567+ 3BF5             >
 567+ 3BF5             >Dict_Ptr        defl    $
 567+ 3BF5             >
 567+ 3BF5             >//              ______________________________________________________________________
 567+ 3BF5             >//              Heap part
 567+ 3BF5             >
 567+ 3BF5             >
 567+ 3BF5             >                org     (Heap_Ptr & $1FFF) + $E000
 567+ EBD6             >
 567+ EBD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 567+ EBD6             >Latest_Definition defl  Heap_Ptr
 567+ EBD6             >
 567+ EBD6             >                // dummy db directives used to calculate length of namec
 567+ EBD6 23 3E       >                db      "#>"
 567+ EBD8             >len_NFA         defl    $ - temp_NFA
 567+ EBD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 567+ EBD6             >
 567+ EBD6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 567+ EBD7 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 567+ EBD9             >                org     $-1                 // alter last byte of Name just above to set
 567+ EBD8 BE          >                db      {b $} | END_BIT     // msb as name end
 567+ EBD9             >
 567+ EBD9 CF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 567+ EBDB             >Prev_Ptr        defl    Heap_Ptr
 567+ EBDB             >
 567+ EBDB             >mirror_Ptr      defl    $
 567+ EBDB             >
 567+ EBDB F7 3B       >                dw      Dict_Ptr + 2        // xt
 567+ EBDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 567+ EBDD             >
 567+ EBDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 567+ EBDD             >
 567+ EBDD             >//              ______________________________________________________________________
 567+ EBDD             >//              Dictionary part
 567+ EBDD             >
 567+ EBDD             >                org     Dict_Ptr
 567+ 3BF5             >
 567+ 3BF5 DB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 567+ 3BF7             >
 567+ 3BF7             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 567+ 3BF7 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 567+ 3BFA             >
 567+ 3BFA             >
 567+ 3BFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 567+ 3BFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 567+ 3BFA             >
 567+ 3BFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 568+ 3BFA BD 25                        dw      TWO_DROP
 569+ 3BFC D3 27 F2 25                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 569+ 3C00 9C 2D 64 25
 569+ 3C04 48 28
 570+ 3C06 BD 24                        dw      EXIT
 571+ 3C08
 572+ 3C08              //  ______________________________________________________________________
 573+ 3C08              //
 574+ 3C08              // sign         n d -- d
 575+ 3C08                              Colon_Def SIGN, "SIGN", is_normal
 575+ 3C08             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 575+ 3C08             >
 575+ 3C08             >Dict_Ptr        defl    $
 575+ 3C08             >
 575+ 3C08             >//              ______________________________________________________________________
 575+ 3C08             >//              Heap part
 575+ 3C08             >
 575+ 3C08             >
 575+ 3C08             >                org     (Heap_Ptr & $1FFF) + $E000
 575+ EBDD             >
 575+ EBDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ EBDD             >Latest_Definition defl  Heap_Ptr
 575+ EBDD             >
 575+ EBDD             >                // dummy db directives used to calculate length of namec
 575+ EBDD 53 49 47 4E >                db      "SIGN"
 575+ EBE1             >len_NFA         defl    $ - temp_NFA
 575+ EBE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ EBDD             >
 575+ EBDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ EBDE 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 575+ EBE2             >                org     $-1                 // alter last byte of Name just above to set
 575+ EBE1 CE          >                db      {b $} | END_BIT     // msb as name end
 575+ EBE2             >
 575+ EBE2 D6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 575+ EBE4             >Prev_Ptr        defl    Heap_Ptr
 575+ EBE4             >
 575+ EBE4             >mirror_Ptr      defl    $
 575+ EBE4             >
 575+ EBE4 0A 3C       >                dw      Dict_Ptr + 2        // xt
 575+ EBE6             >Heap_Ptr        defl    $ - $E000           // save current HP
 575+ EBE6             >
 575+ EBE6             >Current_HP      defl  $ - $E000             // used to set HP once!
 575+ EBE6             >
 575+ EBE6             >//              ______________________________________________________________________
 575+ EBE6             >//              Dictionary part
 575+ EBE6             >
 575+ EBE6             >                org     Dict_Ptr
 575+ 3C08             >
 575+ 3C08 E4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 575+ 3C0A             >
 575+ 3C0A             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 3C0A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 3C0D             >
 575+ 3C0D             >
 575+ 3C0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 3C0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 3C0D             >
 575+ 3C0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 3C0D F3 24                        dw      ZLESS
 577+ 3C0F 8D 20                        dw      ZBRANCH
 578+ 3C11 08 00                        dw      Sign_Endif - $
 579+ 3C13 3D 20 2D 00                  dw          LIT, 45, HOLD
 579+ 3C17 89 2D
 580+ 3C19              Sign_Endif:
 581+ 3C19 BD 24                        dw      EXIT
 582+ 3C1B
 583+ 3C1B              //  ______________________________________________________________________
 584+ 3C1B              //
 585+ 3C1B              // #           d1 -- d2
 586+ 3C1B                              Colon_Def DASH, "#", is_normal
 586+ 3C1B             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 586+ 3C1B             >
 586+ 3C1B             >Dict_Ptr        defl    $
 586+ 3C1B             >
 586+ 3C1B             >//              ______________________________________________________________________
 586+ 3C1B             >//              Heap part
 586+ 3C1B             >
 586+ 3C1B             >
 586+ 3C1B             >                org     (Heap_Ptr & $1FFF) + $E000
 586+ EBE6             >
 586+ EBE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ EBE6             >Latest_Definition defl  Heap_Ptr
 586+ EBE6             >
 586+ EBE6             >                // dummy db directives used to calculate length of namec
 586+ EBE6 23          >                db      "#"
 586+ EBE7             >len_NFA         defl    $ - temp_NFA
 586+ EBE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ EBE6             >
 586+ EBE6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ EBE7 23          >                db      "#"               // name string in 7-bit ascii, but
 586+ EBE8             >                org     $-1                 // alter last byte of Name just above to set
 586+ EBE7 A3          >                db      {b $} | END_BIT     // msb as name end
 586+ EBE8             >
 586+ EBE8 DD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 586+ EBEA             >Prev_Ptr        defl    Heap_Ptr
 586+ EBEA             >
 586+ EBEA             >mirror_Ptr      defl    $
 586+ EBEA             >
 586+ EBEA 1D 3C       >                dw      Dict_Ptr + 2        // xt
 586+ EBEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 586+ EBEC             >
 586+ EBEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 586+ EBEC             >
 586+ EBEC             >//              ______________________________________________________________________
 586+ EBEC             >//              Dictionary part
 586+ EBEC             >
 586+ EBEC             >                org     Dict_Ptr
 586+ 3C1B             >
 586+ 3C1B EA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 586+ 3C1D             >
 586+ 3C1D             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 3C1D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 3C20             >
 586+ 3C20             >
 586+ 3C20             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 3C20             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 3C20             >
 586+ 3C20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 3C20 B5 27 F2 25                  dw      BASE, FETCH
 588+ 3C24
 589+ 3C24 C7 24                        dw      TO_R                    // >r           ( ud1 )
 590+ 3C26 E4 26 DD 24                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 590+ 3C2A 4D 24
 591+ 3C2C D2 24 81 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 591+ 3C30 C7 24
 592+ 3C32 4D 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 593+ 3C34 D2 24                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 594+ 3C36
 595+ 3C36 8F 25                        dw      ROT
 596+ 3C38 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 596+ 3C3C 64 25 6D 28
 597+ 3C40 8D 20                        dw      ZBRANCH
 598+ 3C42 08 00                        dw      Dash_Endif - $
 599+ 3C44 3D 20 07 00                  dw          LIT, 7, PLUS
 599+ 3C48 0A 25
 600+ 3C4A              Dash_Endif:
 601+ 3C4A
 602+ 3C4A 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 602+ 3C4E 0A 25 89 2D
 603+ 3C52 BD 24                        dw      EXIT
 604+ 3C54
 605+ 3C54              //  ______________________________________________________________________
 606+ 3C54              //
 607+ 3C54              // #s           d1 -- d2
 608+ 3C54                              Colon_Def DASHES, "#S", is_normal
 608+ 3C54             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 608+ 3C54             >
 608+ 3C54             >Dict_Ptr        defl    $
 608+ 3C54             >
 608+ 3C54             >//              ______________________________________________________________________
 608+ 3C54             >//              Heap part
 608+ 3C54             >
 608+ 3C54             >
 608+ 3C54             >                org     (Heap_Ptr & $1FFF) + $E000
 608+ EBEC             >
 608+ EBEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ EBEC             >Latest_Definition defl  Heap_Ptr
 608+ EBEC             >
 608+ EBEC             >                // dummy db directives used to calculate length of namec
 608+ EBEC 23 53       >                db      "#S"
 608+ EBEE             >len_NFA         defl    $ - temp_NFA
 608+ EBEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ EBEC             >
 608+ EBEC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ EBED 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 608+ EBEF             >                org     $-1                 // alter last byte of Name just above to set
 608+ EBEE D3          >                db      {b $} | END_BIT     // msb as name end
 608+ EBEF             >
 608+ EBEF E6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 608+ EBF1             >Prev_Ptr        defl    Heap_Ptr
 608+ EBF1             >
 608+ EBF1             >mirror_Ptr      defl    $
 608+ EBF1             >
 608+ EBF1 56 3C       >                dw      Dict_Ptr + 2        // xt
 608+ EBF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 608+ EBF3             >
 608+ EBF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 608+ EBF3             >
 608+ EBF3             >//              ______________________________________________________________________
 608+ EBF3             >//              Dictionary part
 608+ EBF3             >
 608+ EBF3             >                org     Dict_Ptr
 608+ 3C54             >
 608+ 3C54 F1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 608+ 3C56             >
 608+ 3C56             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 3C56 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 3C59             >
 608+ 3C59             >
 608+ 3C59             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 3C59             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 3C59             >
 608+ 3C59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 3C59              Dashes_Begin:
 610+ 3C59 1D 3C D0 25                  dw      DASH, TWO_DUP
 611+ 3C5D 8C 24 E2 24                  dw          OR_OP, ZEQUAL
 612+ 3C61 8D 20                        dw      ZBRANCH
 613+ 3C63 F6 FF                        dw      Dashes_Begin - $
 614+ 3C65 BD 24                        dw      EXIT
 615+ 3C67
 616+ 3C67              //  ______________________________________________________________________
 617+ 3C67              //
 618+ 3C67              // d.r          d n --
 619+ 3C67                              Colon_Def D_DOT_R, "D.R", is_normal
 619+ 3C67             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 619+ 3C67             >
 619+ 3C67             >Dict_Ptr        defl    $
 619+ 3C67             >
 619+ 3C67             >//              ______________________________________________________________________
 619+ 3C67             >//              Heap part
 619+ 3C67             >
 619+ 3C67             >
 619+ 3C67             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ EBF3             >
 619+ EBF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ EBF3             >Latest_Definition defl  Heap_Ptr
 619+ EBF3             >
 619+ EBF3             >                // dummy db directives used to calculate length of namec
 619+ EBF3 44 2E 52    >                db      "D.R"
 619+ EBF6             >len_NFA         defl    $ - temp_NFA
 619+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ EBF3             >
 619+ EBF3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ EBF4 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 619+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 619+ EBF6 D2          >                db      {b $} | END_BIT     // msb as name end
 619+ EBF7             >
 619+ EBF7 EC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 619+ EBF9             >
 619+ EBF9             >mirror_Ptr      defl    $
 619+ EBF9             >
 619+ EBF9 69 3C       >                dw      Dict_Ptr + 2        // xt
 619+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ EBFB             >
 619+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ EBFB             >
 619+ EBFB             >//              ______________________________________________________________________
 619+ EBFB             >//              Dictionary part
 619+ EBFB             >
 619+ EBFB             >                org     Dict_Ptr
 619+ 3C67             >
 619+ 3C67 F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 3C69             >
 619+ 3C69             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 3C69 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 3C6C             >
 619+ 3C6C             >
 619+ 3C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 3C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 3C6C             >
 619+ 3C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 3C6C C7 24                        dw      TO_R
 621+ 3C6E 78 25 AE 34                  dw      TUCK, DABS
 622+ 3C72 EA 3B 56 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 622+ 3C76 8F 25 0A 3C
 622+ 3C7A F7 3B
 623+ 3C7C D2 24                        dw      R_TO
 624+ 3C7E 64 25 48 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 624+ 3C82 D3 3B 59 2C
 625+ 3C86 BD 24                        dw      EXIT
 626+ 3C88
 627+ 3C88              //  ______________________________________________________________________
 628+ 3C88              //
 629+ 3C88              // .r           n1 n2 --
 630+ 3C88                              Colon_Def DOT_R, ".R", is_normal
 630+ 3C88             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 630+ 3C88             >
 630+ 3C88             >Dict_Ptr        defl    $
 630+ 3C88             >
 630+ 3C88             >//              ______________________________________________________________________
 630+ 3C88             >//              Heap part
 630+ 3C88             >
 630+ 3C88             >
 630+ 3C88             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EBFB             >
 630+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EBFB             >Latest_Definition defl  Heap_Ptr
 630+ EBFB             >
 630+ EBFB             >                // dummy db directives used to calculate length of namec
 630+ EBFB 2E 52       >                db      ".R"
 630+ EBFD             >len_NFA         defl    $ - temp_NFA
 630+ EBFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EBFB             >
 630+ EBFB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EBFC 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 630+ EBFE             >                org     $-1                 // alter last byte of Name just above to set
 630+ EBFD D2          >                db      {b $} | END_BIT     // msb as name end
 630+ EBFE             >
 630+ EBFE F3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EC00             >Prev_Ptr        defl    Heap_Ptr
 630+ EC00             >
 630+ EC00             >mirror_Ptr      defl    $
 630+ EC00             >
 630+ EC00 8A 3C       >                dw      Dict_Ptr + 2        // xt
 630+ EC02             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EC02             >
 630+ EC02             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EC02             >
 630+ EC02             >//              ______________________________________________________________________
 630+ EC02             >//              Dictionary part
 630+ EC02             >
 630+ EC02             >                org     Dict_Ptr
 630+ 3C88             >
 630+ 3C88 00 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 3C8A             >
 630+ 3C8A             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 3C8A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3C8D             >
 630+ 3C8D             >
 630+ 3C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3C8D             >
 630+ 3C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3C8D C7 24                        dw      TO_R
 632+ 3C8F 3D 28 D2 24                  dw      S_TO_D, R_TO
 633+ 3C93 69 3C                        dw      D_DOT_R
 634+ 3C95 BD 24                        dw      EXIT
 635+ 3C97
 636+ 3C97              //  ______________________________________________________________________
 637+ 3C97              //
 638+ 3C97              // d.           d --
 639+ 3C97                              Colon_Def D_DOT, "D.", is_normal
 639+ 3C97             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 639+ 3C97             >
 639+ 3C97             >Dict_Ptr        defl    $
 639+ 3C97             >
 639+ 3C97             >//              ______________________________________________________________________
 639+ 3C97             >//              Heap part
 639+ 3C97             >
 639+ 3C97             >
 639+ 3C97             >                org     (Heap_Ptr & $1FFF) + $E000
 639+ EC02             >
 639+ EC02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 639+ EC02             >Latest_Definition defl  Heap_Ptr
 639+ EC02             >
 639+ EC02             >                // dummy db directives used to calculate length of namec
 639+ EC02 44 2E       >                db      "D."
 639+ EC04             >len_NFA         defl    $ - temp_NFA
 639+ EC04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 639+ EC02             >
 639+ EC02 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 639+ EC03 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 639+ EC05             >                org     $-1                 // alter last byte of Name just above to set
 639+ EC04 AE          >                db      {b $} | END_BIT     // msb as name end
 639+ EC05             >
 639+ EC05 FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 639+ EC07             >Prev_Ptr        defl    Heap_Ptr
 639+ EC07             >
 639+ EC07             >mirror_Ptr      defl    $
 639+ EC07             >
 639+ EC07 99 3C       >                dw      Dict_Ptr + 2        // xt
 639+ EC09             >Heap_Ptr        defl    $ - $E000           // save current HP
 639+ EC09             >
 639+ EC09             >Current_HP      defl  $ - $E000             // used to set HP once!
 639+ EC09             >
 639+ EC09             >//              ______________________________________________________________________
 639+ EC09             >//              Dictionary part
 639+ EC09             >
 639+ EC09             >                org     Dict_Ptr
 639+ 3C97             >
 639+ 3C97 07 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 639+ 3C99             >
 639+ 3C99             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 639+ 3C99 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 639+ 3C9C             >
 639+ 3C9C             >
 639+ 3C9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 639+ 3C9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 639+ 3C9C             >
 639+ 3C9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 640+ 3C9C E4 26 69 3C                  dw      ZERO, D_DOT_R, SPACE
 640+ 3CA0 DB 28
 641+ 3CA2 BD 24                        dw      EXIT
 642+ 3CA4
 643+ 3CA4              //  ______________________________________________________________________
 644+ 3CA4              //
 645+ 3CA4              // .            n --
 646+ 3CA4                              Colon_Def DOT, ".", is_normal
 646+ 3CA4             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 646+ 3CA4             >
 646+ 3CA4             >Dict_Ptr        defl    $
 646+ 3CA4             >
 646+ 3CA4             >//              ______________________________________________________________________
 646+ 3CA4             >//              Heap part
 646+ 3CA4             >
 646+ 3CA4             >
 646+ 3CA4             >                org     (Heap_Ptr & $1FFF) + $E000
 646+ EC09             >
 646+ EC09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ EC09             >Latest_Definition defl  Heap_Ptr
 646+ EC09             >
 646+ EC09             >                // dummy db directives used to calculate length of namec
 646+ EC09 2E          >                db      "."
 646+ EC0A             >len_NFA         defl    $ - temp_NFA
 646+ EC0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ EC09             >
 646+ EC09 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ EC0A 2E          >                db      "."               // name string in 7-bit ascii, but
 646+ EC0B             >                org     $-1                 // alter last byte of Name just above to set
 646+ EC0A AE          >                db      {b $} | END_BIT     // msb as name end
 646+ EC0B             >
 646+ EC0B 02 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 646+ EC0D             >Prev_Ptr        defl    Heap_Ptr
 646+ EC0D             >
 646+ EC0D             >mirror_Ptr      defl    $
 646+ EC0D             >
 646+ EC0D A6 3C       >                dw      Dict_Ptr + 2        // xt
 646+ EC0F             >Heap_Ptr        defl    $ - $E000           // save current HP
 646+ EC0F             >
 646+ EC0F             >Current_HP      defl  $ - $E000             // used to set HP once!
 646+ EC0F             >
 646+ EC0F             >//              ______________________________________________________________________
 646+ EC0F             >//              Dictionary part
 646+ EC0F             >
 646+ EC0F             >                org     Dict_Ptr
 646+ 3CA4             >
 646+ 3CA4 0D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 646+ 3CA6             >
 646+ 3CA6             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 3CA6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 3CA9             >
 646+ 3CA9             >
 646+ 3CA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 3CA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 3CA9             >
 646+ 3CA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 3CA9 3D 28 99 3C                  dw      S_TO_D, D_DOT
 648+ 3CAD BD 24                        dw      EXIT
 649+ 3CAF
 650+ 3CAF              //  ______________________________________________________________________
 651+ 3CAF              //
 652+ 3CAF              // ?            n --
 653+ 3CAF                              Colon_Def QUESTION, "?", is_normal
 653+ 3CAF             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 653+ 3CAF             >
 653+ 3CAF             >Dict_Ptr        defl    $
 653+ 3CAF             >
 653+ 3CAF             >//              ______________________________________________________________________
 653+ 3CAF             >//              Heap part
 653+ 3CAF             >
 653+ 3CAF             >
 653+ 3CAF             >                org     (Heap_Ptr & $1FFF) + $E000
 653+ EC0F             >
 653+ EC0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 653+ EC0F             >Latest_Definition defl  Heap_Ptr
 653+ EC0F             >
 653+ EC0F             >                // dummy db directives used to calculate length of namec
 653+ EC0F 3F          >                db      "?"
 653+ EC10             >len_NFA         defl    $ - temp_NFA
 653+ EC10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 653+ EC0F             >
 653+ EC0F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 653+ EC10 3F          >                db      "?"               // name string in 7-bit ascii, but
 653+ EC11             >                org     $-1                 // alter last byte of Name just above to set
 653+ EC10 BF          >                db      {b $} | END_BIT     // msb as name end
 653+ EC11             >
 653+ EC11 09 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 653+ EC13             >Prev_Ptr        defl    Heap_Ptr
 653+ EC13             >
 653+ EC13             >mirror_Ptr      defl    $
 653+ EC13             >
 653+ EC13 B1 3C       >                dw      Dict_Ptr + 2        // xt
 653+ EC15             >Heap_Ptr        defl    $ - $E000           // save current HP
 653+ EC15             >
 653+ EC15             >Current_HP      defl  $ - $E000             // used to set HP once!
 653+ EC15             >
 653+ EC15             >//              ______________________________________________________________________
 653+ EC15             >//              Dictionary part
 653+ EC15             >
 653+ EC15             >                org     Dict_Ptr
 653+ 3CAF             >
 653+ 3CAF 13 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 653+ 3CB1             >
 653+ 3CB1             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 653+ 3CB1 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 653+ 3CB4             >
 653+ 3CB4             >
 653+ 3CB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 653+ 3CB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 653+ 3CB4             >
 653+ 3CB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 654+ 3CB4 F2 25 A6 3C                  dw      FETCH, DOT
 655+ 3CB8 BD 24                        dw      EXIT
 656+ 3CBA
 657+ 3CBA              //  ______________________________________________________________________
 658+ 3CBA              //
 659+ 3CBA              // u.           u --
 660+ 3CBA                              Colon_Def U_DOT, "U.", is_normal
 660+ 3CBA             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 660+ 3CBA             >
 660+ 3CBA             >Dict_Ptr        defl    $
 660+ 3CBA             >
 660+ 3CBA             >//              ______________________________________________________________________
 660+ 3CBA             >//              Heap part
 660+ 3CBA             >
 660+ 3CBA             >
 660+ 3CBA             >                org     (Heap_Ptr & $1FFF) + $E000
 660+ EC15             >
 660+ EC15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ EC15             >Latest_Definition defl  Heap_Ptr
 660+ EC15             >
 660+ EC15             >                // dummy db directives used to calculate length of namec
 660+ EC15 55 2E       >                db      "U."
 660+ EC17             >len_NFA         defl    $ - temp_NFA
 660+ EC17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ EC15             >
 660+ EC15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ EC16 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 660+ EC18             >                org     $-1                 // alter last byte of Name just above to set
 660+ EC17 AE          >                db      {b $} | END_BIT     // msb as name end
 660+ EC18             >
 660+ EC18 0F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 660+ EC1A             >Prev_Ptr        defl    Heap_Ptr
 660+ EC1A             >
 660+ EC1A             >mirror_Ptr      defl    $
 660+ EC1A             >
 660+ EC1A BC 3C       >                dw      Dict_Ptr + 2        // xt
 660+ EC1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 660+ EC1C             >
 660+ EC1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 660+ EC1C             >
 660+ EC1C             >//              ______________________________________________________________________
 660+ EC1C             >//              Dictionary part
 660+ EC1C             >
 660+ EC1C             >                org     Dict_Ptr
 660+ 3CBA             >
 660+ 3CBA 1A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 660+ 3CBC             >
 660+ 3CBC             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ 3CBC CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ 3CBF             >
 660+ 3CBF             >
 660+ 3CBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ 3CBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ 3CBF             >
 660+ 3CBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ 3CBF E4 26 99 3C                  dw      ZERO, D_DOT
 662+ 3CC3 BD 24                        dw      EXIT
 663+ 3CC5
 664+ 3CC5              //  ______________________________________________________________________
 665+ 3CC5              //
 666+ 3CC5              // words        --
 667+ 3CC5                              Colon_Def WORDS, "WORDS", is_normal
 667+ 3CC5             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 667+ 3CC5             >
 667+ 3CC5             >Dict_Ptr        defl    $
 667+ 3CC5             >
 667+ 3CC5             >//              ______________________________________________________________________
 667+ 3CC5             >//              Heap part
 667+ 3CC5             >
 667+ 3CC5             >
 667+ 3CC5             >                org     (Heap_Ptr & $1FFF) + $E000
 667+ EC1C             >
 667+ EC1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 667+ EC1C             >Latest_Definition defl  Heap_Ptr
 667+ EC1C             >
 667+ EC1C             >                // dummy db directives used to calculate length of namec
 667+ EC1C 57 4F 52 44 >                db      "WORDS"
 667+ EC20 53          >
 667+ EC21             >len_NFA         defl    $ - temp_NFA
 667+ EC21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 667+ EC1C             >
 667+ EC1C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 667+ EC1D 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 667+ EC21 53          >
 667+ EC22             >                org     $-1                 // alter last byte of Name just above to set
 667+ EC21 D3          >                db      {b $} | END_BIT     // msb as name end
 667+ EC22             >
 667+ EC22 15 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 667+ EC24             >Prev_Ptr        defl    Heap_Ptr
 667+ EC24             >
 667+ EC24             >mirror_Ptr      defl    $
 667+ EC24             >
 667+ EC24 C7 3C       >                dw      Dict_Ptr + 2        // xt
 667+ EC26             >Heap_Ptr        defl    $ - $E000           // save current HP
 667+ EC26             >
 667+ EC26             >Current_HP      defl  $ - $E000             // used to set HP once!
 667+ EC26             >
 667+ EC26             >//              ______________________________________________________________________
 667+ EC26             >//              Dictionary part
 667+ EC26             >
 667+ EC26             >                org     Dict_Ptr
 667+ 3CC5             >
 667+ 3CC5 24 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 667+ 3CC7             >
 667+ 3CC7             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 667+ 3CC7 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 667+ 3CCA             >
 667+ 3CCA             >
 667+ 3CCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 667+ 3CCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 667+ 3CCA             >
 667+ 3CCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 668+ 3CCA 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 668+ 3CCE 91 27 FC 25
 669+ 3CD2 A3 27 F2 25                  dw      CONTEXT, FETCH, FETCH
 669+ 3CD6 F2 25
 670+ 3CD8              Words_Begin:
 671+ 3CD8 59 29                        dw          FAR // Q TO HEAP
 672+ 3CDA 88 25 07 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 672+ 3CDE 3D 20 1F 00
 672+ 3CE2 7D 24
 673+ 3CE4 91 27 F2 25                  dw          OUT, FETCH, PLUS
 673+ 3CE8 0A 25
 674+ 3CEA 0E 27 6D 28                  dw          CL, LESS, ZEQUAL
 674+ 3CEE E2 24
 675+ 3CF0 8D 20                        dw          ZBRANCH
 676+ 3CF2 0A 00                        dw          Words_Endif - $
 677+ 3CF4 E6 28 E4 26                  dw              CR, ZERO, OUT, STORE
 677+ 3CF8 91 27 FC 25
 678+ 3CFC              Words_Endif:
 679+ 3CFC 88 25 3B 30                  dw          DUP, ID_DOT
 680+ 3D00 EB 26 F3 28                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 680+ 3D04 23 25 F2 25
 681+ 3D08 88 25 E2 24                  dw          DUP, ZEQUAL
 682+ 3D0C 0E 23 8C 24                  dw          QTERMINAL, OR_OP
 683+ 3D10 8D 20                        dw      ZBRANCH
 684+ 3D12 C6 FF                        dw      Words_Begin - $
 685+ 3D14 6D 25                        dw      DROP
 686+ 3D16 BD 24                        dw      EXIT
 687+ 3D18
 688+ 3D18              //  ______________________________________________________________________
 689+ 3D18              //
 690+ 3D18              // list         n --
 691+ 3D18                              Colon_Def LIST, "LIST", is_normal
 691+ 3D18             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 691+ 3D18             >
 691+ 3D18             >Dict_Ptr        defl    $
 691+ 3D18             >
 691+ 3D18             >//              ______________________________________________________________________
 691+ 3D18             >//              Heap part
 691+ 3D18             >
 691+ 3D18             >
 691+ 3D18             >                org     (Heap_Ptr & $1FFF) + $E000
 691+ EC26             >
 691+ EC26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ EC26             >Latest_Definition defl  Heap_Ptr
 691+ EC26             >
 691+ EC26             >                // dummy db directives used to calculate length of namec
 691+ EC26 4C 49 53 54 >                db      "LIST"
 691+ EC2A             >len_NFA         defl    $ - temp_NFA
 691+ EC2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ EC26             >
 691+ EC26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ EC27 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 691+ EC2B             >                org     $-1                 // alter last byte of Name just above to set
 691+ EC2A D4          >                db      {b $} | END_BIT     // msb as name end
 691+ EC2B             >
 691+ EC2B 1C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 691+ EC2D             >Prev_Ptr        defl    Heap_Ptr
 691+ EC2D             >
 691+ EC2D             >mirror_Ptr      defl    $
 691+ EC2D             >
 691+ EC2D 1A 3D       >                dw      Dict_Ptr + 2        // xt
 691+ EC2F             >Heap_Ptr        defl    $ - $E000           // save current HP
 691+ EC2F             >
 691+ EC2F             >Current_HP      defl  $ - $E000             // used to set HP once!
 691+ EC2F             >
 691+ EC2F             >//              ______________________________________________________________________
 691+ EC2F             >//              Dictionary part
 691+ EC2F             >
 691+ EC2F             >                org     Dict_Ptr
 691+ 3D18             >
 691+ 3D18 2D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 691+ 3D1A             >
 691+ 3D1A             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 3D1A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 3D1D             >
 691+ 3D1D             >
 691+ 3D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 3D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 3D1D             >
 691+ 3D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 3D1D 2A 2B E6 28                  dw      DECIMAL, CR
 693+ 3D21 88 25 97 27                  dw      DUP, SCR, STORE
 693+ 3D25 FC 25
 694+ 3D27 F6 2D                        dw      C_DOT_QUOTE
 695+ 3D29 05 53 63 72                  db      5, "Scr# "
 695+ 3D2D 23 20
 696+ 3D2F A6 3C                        dw      DOT
 697+ 3D31 23 27 E4 26                  dw      LSCR, ZERO, C_DO
 697+ 3D35 C6 20
 698+ 3D37              List_Loop:
 699+ 3D37 E6 28                        dw          CR
 700+ 3D39 CC 20 F9 26                  dw          I, THREE
 701+ 3D3D 8A 3C DB 28                  dw          DOT_R, SPACE
 702+ 3D41 CC 20 97 27                  dw          I, SCR, FETCH, DOT_LINE
 702+ 3D45 F2 25 A9 35
 703+ 3D49 0E 23                        dw          QTERMINAL
 704+ 3D4B 8D 20                        dw          ZBRANCH
 705+ 3D4D 06 00                        dw          List_Endif - $
 706+ 3D4F 96 20                        dw              C_LEAVE
 707+ 3D51 06 00                        dw              List_Leave - $
 708+ 3D53              List_Endif:
 709+ 3D53 81 20                        dw      C_LOOP
 710+ 3D55 E2 FF                        dw      List_Loop - $
 711+ 3D57              List_Leave:
 712+ 3D57 E6 28                        dw      CR
 713+ 3D59 BD 24                        dw      EXIT
 714+ 3D5B
 715+ 3D5B              //  ______________________________________________________________________
 716+ 3D5B              //
 717+ 3D5B              // index        n1 n2 --
 718+ 3D5B                              Colon_Def INDEX, "INDEX", is_normal
 718+ 3D5B             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 718+ 3D5B             >
 718+ 3D5B             >Dict_Ptr        defl    $
 718+ 3D5B             >
 718+ 3D5B             >//              ______________________________________________________________________
 718+ 3D5B             >//              Heap part
 718+ 3D5B             >
 718+ 3D5B             >
 718+ 3D5B             >                org     (Heap_Ptr & $1FFF) + $E000
 718+ EC2F             >
 718+ EC2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ EC2F             >Latest_Definition defl  Heap_Ptr
 718+ EC2F             >
 718+ EC2F             >                // dummy db directives used to calculate length of namec
 718+ EC2F 49 4E 44 45 >                db      "INDEX"
 718+ EC33 58          >
 718+ EC34             >len_NFA         defl    $ - temp_NFA
 718+ EC34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ EC2F             >
 718+ EC2F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ EC30 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 718+ EC34 58          >
 718+ EC35             >                org     $-1                 // alter last byte of Name just above to set
 718+ EC34 D8          >                db      {b $} | END_BIT     // msb as name end
 718+ EC35             >
 718+ EC35 26 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 718+ EC37             >Prev_Ptr        defl    Heap_Ptr
 718+ EC37             >
 718+ EC37             >mirror_Ptr      defl    $
 718+ EC37             >
 718+ EC37 5D 3D       >                dw      Dict_Ptr + 2        // xt
 718+ EC39             >Heap_Ptr        defl    $ - $E000           // save current HP
 718+ EC39             >
 718+ EC39             >Current_HP      defl  $ - $E000             // used to set HP once!
 718+ EC39             >
 718+ EC39             >//              ______________________________________________________________________
 718+ EC39             >//              Dictionary part
 718+ EC39             >
 718+ EC39             >                org     Dict_Ptr
 718+ 3D5B             >
 718+ 3D5B 37 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 718+ 3D5D             >
 718+ 3D5D             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 3D5D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 3D60             >
 718+ 3D60             >
 718+ 3D60             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 3D60             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 3D60             >
 718+ 3D60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 3D60 23 25 81 25                  dw      ONE_PLUS, SWAP, C_DO
 719+ 3D64 C6 20
 720+ 3D66              Index_Loop:
 721+ 3D66 E6 28 CC 20                  dw          CR, I, THREE
 721+ 3D6A F9 26
 722+ 3D6C 8A 3C DB 28                  dw          DOT_R, SPACE
 723+ 3D70 E4 26 CC 20                  dw          ZERO, I, DOT_LINE
 723+ 3D74 A9 35
 724+ 3D76 0E 23                        dw          QTERMINAL
 725+ 3D78 8D 20                        dw          ZBRANCH
 726+ 3D7A 06 00                        dw          Index_Endif - $
 727+ 3D7C 96 20                        dw              C_LEAVE
 728+ 3D7E 06 00                        dw              Index_Leave - $
 729+ 3D80              Index_Endif:
 730+ 3D80 81 20                        dw      C_LOOP
 731+ 3D82 E4 FF                        dw      Index_Loop - $
 732+ 3D84              Index_Leave:
 733+ 3D84 E6 28                        dw      CR
 734+ 3D86 BD 24                        dw      EXIT
 735+ 3D88
 736+ 3D88              //  ______________________________________________________________________
 737+ 3D88              //
 738+ 3D88              // cls          --
 739+ 3D88                              Colon_Def CLS, "CLS", is_normal
 739+ 3D88             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 739+ 3D88             >
 739+ 3D88             >Dict_Ptr        defl    $
 739+ 3D88             >
 739+ 3D88             >//              ______________________________________________________________________
 739+ 3D88             >//              Heap part
 739+ 3D88             >
 739+ 3D88             >
 739+ 3D88             >                org     (Heap_Ptr & $1FFF) + $E000
 739+ EC39             >
 739+ EC39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ EC39             >Latest_Definition defl  Heap_Ptr
 739+ EC39             >
 739+ EC39             >                // dummy db directives used to calculate length of namec
 739+ EC39 43 4C 53    >                db      "CLS"
 739+ EC3C             >len_NFA         defl    $ - temp_NFA
 739+ EC3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ EC39             >
 739+ EC39 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ EC3A 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 739+ EC3D             >                org     $-1                 // alter last byte of Name just above to set
 739+ EC3C D3          >                db      {b $} | END_BIT     // msb as name end
 739+ EC3D             >
 739+ EC3D 2F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 739+ EC3F             >Prev_Ptr        defl    Heap_Ptr
 739+ EC3F             >
 739+ EC3F             >mirror_Ptr      defl    $
 739+ EC3F             >
 739+ EC3F 8A 3D       >                dw      Dict_Ptr + 2        // xt
 739+ EC41             >Heap_Ptr        defl    $ - $E000           // save current HP
 739+ EC41             >
 739+ EC41             >Current_HP      defl  $ - $E000             // used to set HP once!
 739+ EC41             >
 739+ EC41             >//              ______________________________________________________________________
 739+ EC41             >//              Dictionary part
 739+ EC41             >
 739+ EC41             >                org     Dict_Ptr
 739+ 3D88             >
 739+ 3D88 3F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 739+ 3D8A             >
 739+ 3D8A             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 3D8A CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 739+ 3D8D             >
 739+ 3D8D             >
 739+ 3D8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 3D8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 3D8D             >
 739+ 3D8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 3D8D 41 22                        dw      CCLS
 741+ 3D8F BD 24                        dw      EXIT
 742+ 3D91
 743+ 3D91
 744+ 3D91              //  ______________________________________________________________________
 745+ 3D91              //
 746+ 3D91              // splash       --
 747+ 3D91              //              Colon_Def SPLASH, "SPLASH", is_normal
 748+ 3D91              //              dw      CLS
 749+ 3D91              //              dw      C_DOT_QUOTE
 750+ 3D91              //              db      87
 751+ 3D91              //              db      "v-Forth 1.8 NextZXOS version", 13    // 29
 752+ 3D91              //              db      "Heap Vocabulary - build 20250719", 13  // 33
 753+ 3D91              //              db      "1990-2025 Matteo Vitturi", 13        // 25
 754+ 3D91              //              dw      EXIT
 755+ 3D91
 756+ 3D91              //  ______________________________________________________________________
 757+ 3D91              //
 758+ 3D91              // splash       --
 759+ 3D91                              Colon_Def SPLASH, "SPLASH", is_normal
 759+ 3D91             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 759+ 3D91             >
 759+ 3D91             >Dict_Ptr        defl    $
 759+ 3D91             >
 759+ 3D91             >//              ______________________________________________________________________
 759+ 3D91             >//              Heap part
 759+ 3D91             >
 759+ 3D91             >
 759+ 3D91             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ EC41             >
 759+ EC41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ EC41             >Latest_Definition defl  Heap_Ptr
 759+ EC41             >
 759+ EC41             >                // dummy db directives used to calculate length of namec
 759+ EC41 53 50 4C 41 >                db      "SPLASH"
 759+ EC45 53 48       >
 759+ EC47             >len_NFA         defl    $ - temp_NFA
 759+ EC47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ EC41             >
 759+ EC41 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ EC42 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 759+ EC46 53 48       >
 759+ EC48             >                org     $-1                 // alter last byte of Name just above to set
 759+ EC47 C8          >                db      {b $} | END_BIT     // msb as name end
 759+ EC48             >
 759+ EC48 39 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ EC4A             >Prev_Ptr        defl    Heap_Ptr
 759+ EC4A             >
 759+ EC4A             >mirror_Ptr      defl    $
 759+ EC4A             >
 759+ EC4A 93 3D       >                dw      Dict_Ptr + 2        // xt
 759+ EC4C             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ EC4C             >
 759+ EC4C             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ EC4C             >
 759+ EC4C             >//              ______________________________________________________________________
 759+ EC4C             >//              Dictionary part
 759+ EC4C             >
 759+ EC4C             >                org     Dict_Ptr
 759+ 3D91             >
 759+ 3D91 4A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 3D93             >
 759+ 3D93             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 3D93 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 3D96             >
 759+ 3D96             >
 759+ 3D96             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 3D96             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 3D96             >
 759+ 3D96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 3D96 8A 3D                        dw      CLS
 761+ 3D98 3D 20 02 00                  dw      LIT, Splash_Ptr
 762+ 3D9C 59 29                        dw      FAR
 763+ 3D9E 98 2B 59 2C                  dw      COUNT, TYPE
 764+ 3DA2 BD 24                        dw      EXIT
 765+ 3DA4
 766+ 3DA4              //  ______________________________________________________________________
 767+ 3DA4              //
 768+ 3DA4              // video        --
 769+ 3DA4                              Colon_Def VIDEO, "VIDEO", is_normal
 769+ 3DA4             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 769+ 3DA4             >
 769+ 3DA4             >Dict_Ptr        defl    $
 769+ 3DA4             >
 769+ 3DA4             >//              ______________________________________________________________________
 769+ 3DA4             >//              Heap part
 769+ 3DA4             >
 769+ 3DA4             >
 769+ 3DA4             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC4C             >
 769+ EC4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC4C             >Latest_Definition defl  Heap_Ptr
 769+ EC4C             >
 769+ EC4C             >                // dummy db directives used to calculate length of namec
 769+ EC4C 56 49 44 45 >                db      "VIDEO"
 769+ EC50 4F          >
 769+ EC51             >len_NFA         defl    $ - temp_NFA
 769+ EC51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC4C             >
 769+ EC4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC4D 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 769+ EC51 4F          >
 769+ EC52             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC51 CF          >                db      {b $} | END_BIT     // msb as name end
 769+ EC52             >
 769+ EC52 41 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC54             >Prev_Ptr        defl    Heap_Ptr
 769+ EC54             >
 769+ EC54             >mirror_Ptr      defl    $
 769+ EC54             >
 769+ EC54 A6 3D       >                dw      Dict_Ptr + 2        // xt
 769+ EC56             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC56             >
 769+ EC56             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC56             >
 769+ EC56             >//              ______________________________________________________________________
 769+ EC56             >//              Dictionary part
 769+ EC56             >
 769+ EC56             >                org     Dict_Ptr
 769+ 3DA4             >
 769+ 3DA4 54 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 3DA6             >
 769+ 3DA6             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 3DA6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 3DA9             >
 769+ 3DA9             >
 769+ 3DA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 3DA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 3DA9             >
 769+ 3DA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 3DA9 F2 26 88 25                  dw      TWO, DUP, DEVICE, STORE
 770+ 3DAD DE 35 FC 25
 771+ 3DB1 22 23                        dw      SELECT
 772+ 3DB3 BD 24                        dw      EXIT
 773+ 3DB5
 774+ 3DB5              //  ______________________________________________________________________
 775+ 3DB5              //
 776+ 3DB5              // autoexec     --
 777+ 3DB5              // this word is called the first time the Forth system boot to
 778+ 3DB5              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 779+ 3DB5                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 779+ 3DB5             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 779+ 3DB5             >
 779+ 3DB5             >Dict_Ptr        defl    $
 779+ 3DB5             >
 779+ 3DB5             >//              ______________________________________________________________________
 779+ 3DB5             >//              Heap part
 779+ 3DB5             >
 779+ 3DB5             >
 779+ 3DB5             >                org     (Heap_Ptr & $1FFF) + $E000
 779+ EC56             >
 779+ EC56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 779+ EC56             >Latest_Definition defl  Heap_Ptr
 779+ EC56             >
 779+ EC56             >                // dummy db directives used to calculate length of namec
 779+ EC56 41 55 54 4F >                db      "AUTOEXEC"
 779+ EC5A 45 58 45 43 >
 779+ EC5E             >len_NFA         defl    $ - temp_NFA
 779+ EC5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 779+ EC56             >
 779+ EC56 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 779+ EC57 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 779+ EC5B 45 58 45 43 >
 779+ EC5F             >                org     $-1                 // alter last byte of Name just above to set
 779+ EC5E C3          >                db      {b $} | END_BIT     // msb as name end
 779+ EC5F             >
 779+ EC5F 4C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 779+ EC61             >Prev_Ptr        defl    Heap_Ptr
 779+ EC61             >
 779+ EC61             >mirror_Ptr      defl    $
 779+ EC61             >
 779+ EC61 B7 3D       >                dw      Dict_Ptr + 2        // xt
 779+ EC63             >Heap_Ptr        defl    $ - $E000           // save current HP
 779+ EC63             >
 779+ EC63             >Current_HP      defl  $ - $E000             // used to set HP once!
 779+ EC63             >
 779+ EC63             >//              ______________________________________________________________________
 779+ EC63             >//              Dictionary part
 779+ EC63             >
 779+ EC63             >                org     Dict_Ptr
 779+ 3DB5             >
 779+ 3DB5 61 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 779+ 3DB7             >
 779+ 3DB7             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 779+ 3DB7 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 779+ 3DBA             >
 779+ 3DBA             >
 779+ 3DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 779+ 3DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 779+ 3DBA             >
 779+ 3DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 780+ 3DBA              Autoexec_Self:
 781+ 3DBA 3D 20 AB 26                  dw      LIT, NOOP
 782+ 3DBE 3D 20 AB 32                  dw      LIT, Autoexec_Ptr
 783+ 3DC2 FC 25                        dw      STORE
 784+ 3DC4 3D 20 7A 3F                  dw      LIT, Param_From_Basic
 785+ 3DC8 9C 2D EB 26                  dw      PAD, ONE
 786+ 3DCC C5 23                        dw      F_OPEN
 787+ 3DCE 6D 25                        dw      DROP
 788+ 3DD0 89 38                        dw      F_INCLUDE
 789+ 3DD2 BD 24                        dw      EXIT
 790+ 3DD4
 791+ 3DD4
 792+ 3DD4              //              dw      LIT, 11
 793+ 3DD4              //              dw      LIT, NOOP
 794+ 3DD4              //              dw      LIT, Autoexec_Ptr
 795+ 3DD4              //              dw      STORE
 796+ 3DD4              //              dw      LOAD
 797+ 3DD4              //
 798+ 3DD4              //              dw      NEEDS_FN, ONE, F_OPEN
 799+ 3DD4              //              dw      LIT, 43, QERROR
 800+ 3DD4              //              dw      DUP, F_INCLUDE
 801+ 3DD4              //              dw      F_CLOSE, DROP
 802+ 3DD4
 803+ 3DD4              //              dw      QUIT
 804+ 3DD4              //              dw      EXIT
 805+ 3DD4
 806+ 3DD4
 807+ 3DD4              //  ______________________________________________________________________
 808+ 3DD4              //
 809+ 3DD4              // bye     --
 810+ 3DD4              //
 811+ 3DD4                              Colon_Def BYE, "BYE", is_normal
 811+ 3DD4             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 811+ 3DD4             >
 811+ 3DD4             >Dict_Ptr        defl    $
 811+ 3DD4             >
 811+ 3DD4             >//              ______________________________________________________________________
 811+ 3DD4             >//              Heap part
 811+ 3DD4             >
 811+ 3DD4             >
 811+ 3DD4             >                org     (Heap_Ptr & $1FFF) + $E000
 811+ EC63             >
 811+ EC63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ EC63             >Latest_Definition defl  Heap_Ptr
 811+ EC63             >
 811+ EC63             >                // dummy db directives used to calculate length of namec
 811+ EC63 42 59 45    >                db      "BYE"
 811+ EC66             >len_NFA         defl    $ - temp_NFA
 811+ EC66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ EC63             >
 811+ EC63 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ EC64 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 811+ EC67             >                org     $-1                 // alter last byte of Name just above to set
 811+ EC66 C5          >                db      {b $} | END_BIT     // msb as name end
 811+ EC67             >
 811+ EC67 56 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 811+ EC69             >Prev_Ptr        defl    Heap_Ptr
 811+ EC69             >
 811+ EC69             >mirror_Ptr      defl    $
 811+ EC69             >
 811+ EC69 D6 3D       >                dw      Dict_Ptr + 2        // xt
 811+ EC6B             >Heap_Ptr        defl    $ - $E000           // save current HP
 811+ EC6B             >
 811+ EC6B             >Current_HP      defl  $ - $E000             // used to set HP once!
 811+ EC6B             >
 811+ EC6B             >//              ______________________________________________________________________
 811+ EC6B             >//              Dictionary part
 811+ EC6B             >
 811+ EC6B             >                org     Dict_Ptr
 811+ 3DD4             >
 811+ 3DD4 69 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 811+ 3DD6             >
 811+ 3DD6             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 3DD6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 3DD9             >
 811+ 3DD9             >
 811+ 3DD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 3DD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 3DD9             >
 811+ 3DD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 3DD9 CF 37                        dw      FLUSH
 813+ 3DDB 1D 37                        dw      EMPTY_BUFFERS
 814+ 3DDD 60 3F F2 25                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 814+ 3DE1 5D 23 6D 25
 815+ 3DE5 E4 26 2A 27                  dw      ZERO, PLUS_ORIGIN
 816+ 3DE9 3E 34                        dw      BASIC
 817+ 3DEB
 818+ 3DEB              //  ______________________________________________________________________
 819+ 3DEB              //
 820+ 3DEB              // invv     --
 821+ 3DEB              //
 822+ 3DEB              //              Colon_Def INVV, "INVV", is_normal
 823+ 3DEB              //              dw      LIT, 20, EMITC, ONE, EMITC
 824+ 3DEB              //              dw      EXIT
 825+ 3DEB
 826+ 3DEB              //  ______________________________________________________________________
 827+ 3DEB              //
 828+ 3DEB              // truv     --
 829+ 3DEB              //
 830+ 3DEB              //              Colon_Def TRUV, "TRUV", is_normal
 831+ 3DEB              //              dw      LIT, 20, EMITC, ZERO, EMITC
 832+ 3DEB              //              dw      EXIT
 833+ 3DEB
 834+ 3DEB              //  ______________________________________________________________________
 835+ 3DEB              //
 836+ 3DEB              // mark     --
 837+ 3DEB              //
 838+ 3DEB              //              Colon_Def MARK, "MARK", is_normal
 839+ 3DEB              //              dw      INVV, TYPE, TRUV
 840+ 3DEB              //              dw      EXIT
 841+ 3DEB
 842+ 3DEB              //  ______________________________________________________________________
 843+ 3DEB              //
 844+ 3DEB              // back     --
 845+ 3DEB              //
 846+ 3DEB                              Colon_Def BACK, "BACK", is_normal
 846+ 3DEB             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 846+ 3DEB             >
 846+ 3DEB             >Dict_Ptr        defl    $
 846+ 3DEB             >
 846+ 3DEB             >//              ______________________________________________________________________
 846+ 3DEB             >//              Heap part
 846+ 3DEB             >
 846+ 3DEB             >
 846+ 3DEB             >                org     (Heap_Ptr & $1FFF) + $E000
 846+ EC6B             >
 846+ EC6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 846+ EC6B             >Latest_Definition defl  Heap_Ptr
 846+ EC6B             >
 846+ EC6B             >                // dummy db directives used to calculate length of namec
 846+ EC6B 42 41 43 4B >                db      "BACK"
 846+ EC6F             >len_NFA         defl    $ - temp_NFA
 846+ EC6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 846+ EC6B             >
 846+ EC6B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 846+ EC6C 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 846+ EC70             >                org     $-1                 // alter last byte of Name just above to set
 846+ EC6F CB          >                db      {b $} | END_BIT     // msb as name end
 846+ EC70             >
 846+ EC70 63 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 846+ EC72             >Prev_Ptr        defl    Heap_Ptr
 846+ EC72             >
 846+ EC72             >mirror_Ptr      defl    $
 846+ EC72             >
 846+ EC72 ED 3D       >                dw      Dict_Ptr + 2        // xt
 846+ EC74             >Heap_Ptr        defl    $ - $E000           // save current HP
 846+ EC74             >
 846+ EC74             >Current_HP      defl  $ - $E000             // used to set HP once!
 846+ EC74             >
 846+ EC74             >//              ______________________________________________________________________
 846+ EC74             >//              Dictionary part
 846+ EC74             >
 846+ EC74             >                org     Dict_Ptr
 846+ 3DEB             >
 846+ 3DEB 72 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 846+ 3DED             >
 846+ 3DED             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 846+ 3DED CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 846+ 3DF0             >
 846+ 3DF0             >
 846+ 3DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 846+ 3DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 846+ 3DF0             >
 846+ 3DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 847+ 3DF0 09 28 48 28                  dw      HERE, SUBTRACT, COMMA
 847+ 3DF4 1F 28
 848+ 3DF6 BD 24                        dw      EXIT
 849+ 3DF8
 850+ 3DF8              //  ______________________________________________________________________
 851+ 3DF8              //
 852+ 3DF8              // if          ( -- a 2 ) \ compile-time
 853+ 3DF8              // IF ... THEN
 854+ 3DF8              // IF ... ELSE ... ENDIF
 855+ 3DF8                              Colon_Def IF, "IF", is_immediate
 855+ 3DF8             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 855+ 3DF8             >
 855+ 3DF8             >Dict_Ptr        defl    $
 855+ 3DF8             >
 855+ 3DF8             >//              ______________________________________________________________________
 855+ 3DF8             >//              Heap part
 855+ 3DF8             >
 855+ 3DF8             >
 855+ 3DF8             >                org     (Heap_Ptr & $1FFF) + $E000
 855+ EC74             >
 855+ EC74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ EC74             >Latest_Definition defl  Heap_Ptr
 855+ EC74             >
 855+ EC74             >                // dummy db directives used to calculate length of namec
 855+ EC74 49 46       >                db      "IF"
 855+ EC76             >len_NFA         defl    $ - temp_NFA
 855+ EC76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ EC74             >
 855+ EC74 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ EC75 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 855+ EC77             >                org     $-1                 // alter last byte of Name just above to set
 855+ EC76 C6          >                db      {b $} | END_BIT     // msb as name end
 855+ EC77             >
 855+ EC77 6B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 855+ EC79             >Prev_Ptr        defl    Heap_Ptr
 855+ EC79             >
 855+ EC79             >mirror_Ptr      defl    $
 855+ EC79             >
 855+ EC79 FA 3D       >                dw      Dict_Ptr + 2        // xt
 855+ EC7B             >Heap_Ptr        defl    $ - $E000           // save current HP
 855+ EC7B             >
 855+ EC7B             >Current_HP      defl  $ - $E000             // used to set HP once!
 855+ EC7B             >
 855+ EC7B             >//              ______________________________________________________________________
 855+ EC7B             >//              Dictionary part
 855+ EC7B             >
 855+ EC7B             >                org     Dict_Ptr
 855+ 3DF8             >
 855+ 3DF8 79 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 855+ 3DFA             >
 855+ 3DFA             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 3DFA CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 3DFD             >
 855+ 3DFD             >
 855+ 3DFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 3DFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 3DFD             >
 855+ 3DFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 3DFD C3 2A 8D 20                  dw      COMPILE, ZBRANCH
 857+ 3E01 09 28 E4 26                  dw      HERE, ZERO, COMMA
 857+ 3E05 1F 28
 858+ 3E07 F2 26                        dw      TWO
 859+ 3E09 BD 24                        dw      EXIT
 860+ 3E0B
 861+ 3E0B              //  ______________________________________________________________________
 862+ 3E0B              //
 863+ 3E0B              // then        ( a 2 -- ) \ compile-time
 864+ 3E0B              //
 865+ 3E0B                              Colon_Def THEN, "THEN", is_immediate
 865+ 3E0B             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 865+ 3E0B             >
 865+ 3E0B             >Dict_Ptr        defl    $
 865+ 3E0B             >
 865+ 3E0B             >//              ______________________________________________________________________
 865+ 3E0B             >//              Heap part
 865+ 3E0B             >
 865+ 3E0B             >
 865+ 3E0B             >                org     (Heap_Ptr & $1FFF) + $E000
 865+ EC7B             >
 865+ EC7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 865+ EC7B             >Latest_Definition defl  Heap_Ptr
 865+ EC7B             >
 865+ EC7B             >                // dummy db directives used to calculate length of namec
 865+ EC7B 54 48 45 4E >                db      "THEN"
 865+ EC7F             >len_NFA         defl    $ - temp_NFA
 865+ EC7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 865+ EC7B             >
 865+ EC7B C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 865+ EC7C 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 865+ EC80             >                org     $-1                 // alter last byte of Name just above to set
 865+ EC7F CE          >                db      {b $} | END_BIT     // msb as name end
 865+ EC80             >
 865+ EC80 74 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 865+ EC82             >Prev_Ptr        defl    Heap_Ptr
 865+ EC82             >
 865+ EC82             >mirror_Ptr      defl    $
 865+ EC82             >
 865+ EC82 0D 3E       >                dw      Dict_Ptr + 2        // xt
 865+ EC84             >Heap_Ptr        defl    $ - $E000           // save current HP
 865+ EC84             >
 865+ EC84             >Current_HP      defl  $ - $E000             // used to set HP once!
 865+ EC84             >
 865+ EC84             >//              ______________________________________________________________________
 865+ EC84             >//              Dictionary part
 865+ EC84             >
 865+ EC84             >                org     Dict_Ptr
 865+ 3E0B             >
 865+ 3E0B 82 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 865+ 3E0D             >
 865+ 3E0D             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 865+ 3E0D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 865+ 3E10             >
 865+ 3E10             >
 865+ 3E10             >                endif           ; ok        // for other definitions it "points" the correct handler
 865+ 3E10             >                // Use of "; ok" to suppress "warning[fwdref]"
 865+ 3E10             >
 865+ 3E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 866+ 3E10 68 2A                        dw      QCOMP
 867+ 3E12 F2 26 8C 2A                  dw      TWO, QPAIRS
 868+ 3E16 09 28 64 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 868+ 3E1A 48 28 81 25
 868+ 3E1E FC 25
 869+ 3E20 BD 24                        dw      EXIT
 870+ 3E22
 871+ 3E22              //  ______________________________________________________________________
 872+ 3E22              //
 873+ 3E22              // endif       ( a 2 -- ) \ compile-time
 874+ 3E22              //
 875+ 3E22                              Colon_Def ENDIF, "ENDIF", is_immediate
 875+ 3E22             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 875+ 3E22             >
 875+ 3E22             >Dict_Ptr        defl    $
 875+ 3E22             >
 875+ 3E22             >//              ______________________________________________________________________
 875+ 3E22             >//              Heap part
 875+ 3E22             >
 875+ 3E22             >
 875+ 3E22             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ EC84             >
 875+ EC84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ EC84             >Latest_Definition defl  Heap_Ptr
 875+ EC84             >
 875+ EC84             >                // dummy db directives used to calculate length of namec
 875+ EC84 45 4E 44 49 >                db      "ENDIF"
 875+ EC88 46          >
 875+ EC89             >len_NFA         defl    $ - temp_NFA
 875+ EC89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ EC84             >
 875+ EC84 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ EC85 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 875+ EC89 46          >
 875+ EC8A             >                org     $-1                 // alter last byte of Name just above to set
 875+ EC89 C6          >                db      {b $} | END_BIT     // msb as name end
 875+ EC8A             >
 875+ EC8A 7B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ EC8C             >Prev_Ptr        defl    Heap_Ptr
 875+ EC8C             >
 875+ EC8C             >mirror_Ptr      defl    $
 875+ EC8C             >
 875+ EC8C 24 3E       >                dw      Dict_Ptr + 2        // xt
 875+ EC8E             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ EC8E             >
 875+ EC8E             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ EC8E             >
 875+ EC8E             >//              ______________________________________________________________________
 875+ EC8E             >//              Dictionary part
 875+ EC8E             >
 875+ EC8E             >                org     Dict_Ptr
 875+ 3E22             >
 875+ 3E22 8C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 3E24             >
 875+ 3E24             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 3E24 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 3E27             >
 875+ 3E27             >
 875+ 3E27             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 3E27             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 3E27             >
 875+ 3E27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 3E27 0D 3E                        dw      THEN
 877+ 3E29 BD 24                        dw      EXIT
 878+ 3E2B
 879+ 3E2B              //  ______________________________________________________________________
 880+ 3E2B              //
 881+ 3E2B              // else        ( a1 2 -- a2 2 ) \ compile-time
 882+ 3E2B              //
 883+ 3E2B                              Colon_Def ELSE, "ELSE", is_immediate
 883+ 3E2B             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 883+ 3E2B             >
 883+ 3E2B             >Dict_Ptr        defl    $
 883+ 3E2B             >
 883+ 3E2B             >//              ______________________________________________________________________
 883+ 3E2B             >//              Heap part
 883+ 3E2B             >
 883+ 3E2B             >
 883+ 3E2B             >                org     (Heap_Ptr & $1FFF) + $E000
 883+ EC8E             >
 883+ EC8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ EC8E             >Latest_Definition defl  Heap_Ptr
 883+ EC8E             >
 883+ EC8E             >                // dummy db directives used to calculate length of namec
 883+ EC8E 45 4C 53 45 >                db      "ELSE"
 883+ EC92             >len_NFA         defl    $ - temp_NFA
 883+ EC92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ EC8E             >
 883+ EC8E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ EC8F 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 883+ EC93             >                org     $-1                 // alter last byte of Name just above to set
 883+ EC92 C5          >                db      {b $} | END_BIT     // msb as name end
 883+ EC93             >
 883+ EC93 84 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 883+ EC95             >Prev_Ptr        defl    Heap_Ptr
 883+ EC95             >
 883+ EC95             >mirror_Ptr      defl    $
 883+ EC95             >
 883+ EC95 2D 3E       >                dw      Dict_Ptr + 2        // xt
 883+ EC97             >Heap_Ptr        defl    $ - $E000           // save current HP
 883+ EC97             >
 883+ EC97             >Current_HP      defl  $ - $E000             // used to set HP once!
 883+ EC97             >
 883+ EC97             >//              ______________________________________________________________________
 883+ EC97             >//              Dictionary part
 883+ EC97             >
 883+ EC97             >                org     Dict_Ptr
 883+ 3E2B             >
 883+ 3E2B 95 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 883+ 3E2D             >
 883+ 3E2D             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 3E2D CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 883+ 3E30             >
 883+ 3E30             >
 883+ 3E30             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 3E30             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 3E30             >
 883+ 3E30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 3E30 68 2A                        dw      QCOMP
 885+ 3E32 F2 26 8C 2A                  dw      TWO, QPAIRS
 886+ 3E36 C3 2A 89 20                  dw      COMPILE, BRANCH
 887+ 3E3A 09 28 E4 26                  dw      HERE, ZERO, COMMA
 887+ 3E3E 1F 28
 888+ 3E40 81 25 F2 26                  dw      SWAP, TWO, THEN
 888+ 3E44 0D 3E
 889+ 3E46 F2 26                        dw      TWO
 890+ 3E48 BD 24                        dw      EXIT
 891+ 3E4A
 892+ 3E4A              //  ______________________________________________________________________
 893+ 3E4A              //
 894+ 3E4A              // begin        ( -- a 1 ) \ compile-time
 895+ 3E4A              // BEGIN ... AGAIN
 896+ 3E4A              // BEGIN ... f UNTIL
 897+ 3E4A              // BEGIN ... f WHILE ... REPEAT
 898+ 3E4A                              Colon_Def BEGIN, "BEGIN", is_immediate
 898+ 3E4A             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 898+ 3E4A             >
 898+ 3E4A             >Dict_Ptr        defl    $
 898+ 3E4A             >
 898+ 3E4A             >//              ______________________________________________________________________
 898+ 3E4A             >//              Heap part
 898+ 3E4A             >
 898+ 3E4A             >
 898+ 3E4A             >                org     (Heap_Ptr & $1FFF) + $E000
 898+ EC97             >
 898+ EC97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ EC97             >Latest_Definition defl  Heap_Ptr
 898+ EC97             >
 898+ EC97             >                // dummy db directives used to calculate length of namec
 898+ EC97 42 45 47 49 >                db      "BEGIN"
 898+ EC9B 4E          >
 898+ EC9C             >len_NFA         defl    $ - temp_NFA
 898+ EC9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ EC97             >
 898+ EC97 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ EC98 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 898+ EC9C 4E          >
 898+ EC9D             >                org     $-1                 // alter last byte of Name just above to set
 898+ EC9C CE          >                db      {b $} | END_BIT     // msb as name end
 898+ EC9D             >
 898+ EC9D 8E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 898+ EC9F             >Prev_Ptr        defl    Heap_Ptr
 898+ EC9F             >
 898+ EC9F             >mirror_Ptr      defl    $
 898+ EC9F             >
 898+ EC9F 4C 3E       >                dw      Dict_Ptr + 2        // xt
 898+ ECA1             >Heap_Ptr        defl    $ - $E000           // save current HP
 898+ ECA1             >
 898+ ECA1             >Current_HP      defl  $ - $E000             // used to set HP once!
 898+ ECA1             >
 898+ ECA1             >//              ______________________________________________________________________
 898+ ECA1             >//              Dictionary part
 898+ ECA1             >
 898+ ECA1             >                org     Dict_Ptr
 898+ 3E4A             >
 898+ 3E4A 9F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 898+ 3E4C             >
 898+ 3E4C             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 3E4C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 898+ 3E4F             >
 898+ 3E4F             >
 898+ 3E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 3E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 3E4F             >
 898+ 3E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 3E4F 68 2A                        dw      QCOMP
 900+ 3E51 09 28                        dw      HERE
 901+ 3E53 F2 26                        dw      TWO
 902+ 3E55 BD 24                        dw      EXIT
 903+ 3E57
 904+ 3E57              //  ______________________________________________________________________
 905+ 3E57              //
 906+ 3E57              // again        ( a 1 -- ) \ compile-time
 907+ 3E57                              Colon_Def AGAIN, "AGAIN", is_immediate
 907+ 3E57             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 907+ 3E57             >
 907+ 3E57             >Dict_Ptr        defl    $
 907+ 3E57             >
 907+ 3E57             >//              ______________________________________________________________________
 907+ 3E57             >//              Heap part
 907+ 3E57             >
 907+ 3E57             >
 907+ 3E57             >                org     (Heap_Ptr & $1FFF) + $E000
 907+ ECA1             >
 907+ ECA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 907+ ECA1             >Latest_Definition defl  Heap_Ptr
 907+ ECA1             >
 907+ ECA1             >                // dummy db directives used to calculate length of namec
 907+ ECA1 41 47 41 49 >                db      "AGAIN"
 907+ ECA5 4E          >
 907+ ECA6             >len_NFA         defl    $ - temp_NFA
 907+ ECA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 907+ ECA1             >
 907+ ECA1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 907+ ECA2 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 907+ ECA6 4E          >
 907+ ECA7             >                org     $-1                 // alter last byte of Name just above to set
 907+ ECA6 CE          >                db      {b $} | END_BIT     // msb as name end
 907+ ECA7             >
 907+ ECA7 97 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 907+ ECA9             >Prev_Ptr        defl    Heap_Ptr
 907+ ECA9             >
 907+ ECA9             >mirror_Ptr      defl    $
 907+ ECA9             >
 907+ ECA9 59 3E       >                dw      Dict_Ptr + 2        // xt
 907+ ECAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 907+ ECAB             >
 907+ ECAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 907+ ECAB             >
 907+ ECAB             >//              ______________________________________________________________________
 907+ ECAB             >//              Dictionary part
 907+ ECAB             >
 907+ ECAB             >                org     Dict_Ptr
 907+ 3E57             >
 907+ 3E57 A9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 907+ 3E59             >
 907+ 3E59             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 907+ 3E59 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 907+ 3E5C             >
 907+ 3E5C             >
 907+ 3E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 907+ 3E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 907+ 3E5C             >
 907+ 3E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 908+ 3E5C 68 2A                        dw      QCOMP
 909+ 3E5E F2 26 8C 2A                  dw      TWO, QPAIRS
 910+ 3E62 C3 2A 89 20                  dw      COMPILE, BRANCH
 911+ 3E66 ED 3D                        dw      BACK
 912+ 3E68 BD 24                        dw      EXIT
 913+ 3E6A
 914+ 3E6A              //  ______________________________________________________________________
 915+ 3E6A              //
 916+ 3E6A              // until        ( a 1 -- ) \ compile-time
 917+ 3E6A                              Colon_Def UNTIL, "UNTIL", is_immediate
 917+ 3E6A             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 917+ 3E6A             >
 917+ 3E6A             >Dict_Ptr        defl    $
 917+ 3E6A             >
 917+ 3E6A             >//              ______________________________________________________________________
 917+ 3E6A             >//              Heap part
 917+ 3E6A             >
 917+ 3E6A             >
 917+ 3E6A             >                org     (Heap_Ptr & $1FFF) + $E000
 917+ ECAB             >
 917+ ECAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ ECAB             >Latest_Definition defl  Heap_Ptr
 917+ ECAB             >
 917+ ECAB             >                // dummy db directives used to calculate length of namec
 917+ ECAB 55 4E 54 49 >                db      "UNTIL"
 917+ ECAF 4C          >
 917+ ECB0             >len_NFA         defl    $ - temp_NFA
 917+ ECB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ ECAB             >
 917+ ECAB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ ECAC 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 917+ ECB0 4C          >
 917+ ECB1             >                org     $-1                 // alter last byte of Name just above to set
 917+ ECB0 CC          >                db      {b $} | END_BIT     // msb as name end
 917+ ECB1             >
 917+ ECB1 A1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 917+ ECB3             >Prev_Ptr        defl    Heap_Ptr
 917+ ECB3             >
 917+ ECB3             >mirror_Ptr      defl    $
 917+ ECB3             >
 917+ ECB3 6C 3E       >                dw      Dict_Ptr + 2        // xt
 917+ ECB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 917+ ECB5             >
 917+ ECB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 917+ ECB5             >
 917+ ECB5             >//              ______________________________________________________________________
 917+ ECB5             >//              Dictionary part
 917+ ECB5             >
 917+ ECB5             >                org     Dict_Ptr
 917+ 3E6A             >
 917+ 3E6A B3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 917+ 3E6C             >
 917+ 3E6C             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 3E6C CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 3E6F             >
 917+ 3E6F             >
 917+ 3E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 3E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 3E6F             >
 917+ 3E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 3E6F 68 2A                        dw      QCOMP
 919+ 3E71 F2 26 8C 2A                  dw      TWO, QPAIRS
 920+ 3E75 C3 2A 8D 20                  dw      COMPILE, ZBRANCH
 921+ 3E79 ED 3D                        dw      BACK
 922+ 3E7B BD 24                        dw      EXIT
 923+ 3E7D
 924+ 3E7D              //  ______________________________________________________________________
 925+ 3E7D              //
 926+ 3E7D              // end          ( a 1 -- ) \ compile-time
 927+ 3E7D                              Colon_Def END, "END", is_immediate
 927+ 3E7D             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 927+ 3E7D             >
 927+ 3E7D             >Dict_Ptr        defl    $
 927+ 3E7D             >
 927+ 3E7D             >//              ______________________________________________________________________
 927+ 3E7D             >//              Heap part
 927+ 3E7D             >
 927+ 3E7D             >
 927+ 3E7D             >                org     (Heap_Ptr & $1FFF) + $E000
 927+ ECB5             >
 927+ ECB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ ECB5             >Latest_Definition defl  Heap_Ptr
 927+ ECB5             >
 927+ ECB5             >                // dummy db directives used to calculate length of namec
 927+ ECB5 45 4E 44    >                db      "END"
 927+ ECB8             >len_NFA         defl    $ - temp_NFA
 927+ ECB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ ECB5             >
 927+ ECB5 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ ECB6 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 927+ ECB9             >                org     $-1                 // alter last byte of Name just above to set
 927+ ECB8 C4          >                db      {b $} | END_BIT     // msb as name end
 927+ ECB9             >
 927+ ECB9 AB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 927+ ECBB             >Prev_Ptr        defl    Heap_Ptr
 927+ ECBB             >
 927+ ECBB             >mirror_Ptr      defl    $
 927+ ECBB             >
 927+ ECBB 7F 3E       >                dw      Dict_Ptr + 2        // xt
 927+ ECBD             >Heap_Ptr        defl    $ - $E000           // save current HP
 927+ ECBD             >
 927+ ECBD             >Current_HP      defl  $ - $E000             // used to set HP once!
 927+ ECBD             >
 927+ ECBD             >//              ______________________________________________________________________
 927+ ECBD             >//              Dictionary part
 927+ ECBD             >
 927+ ECBD             >                org     Dict_Ptr
 927+ 3E7D             >
 927+ 3E7D BB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 927+ 3E7F             >
 927+ 3E7F             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 3E7F CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 3E82             >
 927+ 3E82             >
 927+ 3E82             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 3E82             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 3E82             >
 927+ 3E82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 3E82 6C 3E                        dw      UNTIL
 929+ 3E84 BD 24                        dw      EXIT
 930+ 3E86
 931+ 3E86              //  ______________________________________________________________________
 932+ 3E86              //
 933+ 3E86              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 934+ 3E86                              Colon_Def WHILE, "WHILE", is_immediate
 934+ 3E86             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 934+ 3E86             >
 934+ 3E86             >Dict_Ptr        defl    $
 934+ 3E86             >
 934+ 3E86             >//              ______________________________________________________________________
 934+ 3E86             >//              Heap part
 934+ 3E86             >
 934+ 3E86             >
 934+ 3E86             >                org     (Heap_Ptr & $1FFF) + $E000
 934+ ECBD             >
 934+ ECBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 934+ ECBD             >Latest_Definition defl  Heap_Ptr
 934+ ECBD             >
 934+ ECBD             >                // dummy db directives used to calculate length of namec
 934+ ECBD 57 48 49 4C >                db      "WHILE"
 934+ ECC1 45          >
 934+ ECC2             >len_NFA         defl    $ - temp_NFA
 934+ ECC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 934+ ECBD             >
 934+ ECBD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 934+ ECBE 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 934+ ECC2 45          >
 934+ ECC3             >                org     $-1                 // alter last byte of Name just above to set
 934+ ECC2 C5          >                db      {b $} | END_BIT     // msb as name end
 934+ ECC3             >
 934+ ECC3 B5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 934+ ECC5             >Prev_Ptr        defl    Heap_Ptr
 934+ ECC5             >
 934+ ECC5             >mirror_Ptr      defl    $
 934+ ECC5             >
 934+ ECC5 88 3E       >                dw      Dict_Ptr + 2        // xt
 934+ ECC7             >Heap_Ptr        defl    $ - $E000           // save current HP
 934+ ECC7             >
 934+ ECC7             >Current_HP      defl  $ - $E000             // used to set HP once!
 934+ ECC7             >
 934+ ECC7             >//              ______________________________________________________________________
 934+ ECC7             >//              Dictionary part
 934+ ECC7             >
 934+ ECC7             >                org     Dict_Ptr
 934+ 3E86             >
 934+ 3E86 C5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 934+ 3E88             >
 934+ 3E88             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 934+ 3E88 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 934+ 3E8B             >
 934+ 3E8B             >
 934+ 3E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 934+ 3E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 934+ 3E8B             >
 934+ 3E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 935+ 3E8B FA 3D                        dw      IF
 936+ 3E8D              //              dw      TWO_PLUS // ( that is 4 )
 937+ 3E8D C3 25                        dw      TWO_SWAP
 938+ 3E8F BD 24                        dw      EXIT
 939+ 3E91
 940+ 3E91              //  ______________________________________________________________________
 941+ 3E91              //
 942+ 3E91              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 943+ 3E91                              Colon_Def REPEAT, "REPEAT", is_immediate
 943+ 3E91             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 943+ 3E91             >
 943+ 3E91             >Dict_Ptr        defl    $
 943+ 3E91             >
 943+ 3E91             >//              ______________________________________________________________________
 943+ 3E91             >//              Heap part
 943+ 3E91             >
 943+ 3E91             >
 943+ 3E91             >                org     (Heap_Ptr & $1FFF) + $E000
 943+ ECC7             >
 943+ ECC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ ECC7             >Latest_Definition defl  Heap_Ptr
 943+ ECC7             >
 943+ ECC7             >                // dummy db directives used to calculate length of namec
 943+ ECC7 52 45 50 45 >                db      "REPEAT"
 943+ ECCB 41 54       >
 943+ ECCD             >len_NFA         defl    $ - temp_NFA
 943+ ECCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ ECC7             >
 943+ ECC7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ ECC8 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 943+ ECCC 41 54       >
 943+ ECCE             >                org     $-1                 // alter last byte of Name just above to set
 943+ ECCD D4          >                db      {b $} | END_BIT     // msb as name end
 943+ ECCE             >
 943+ ECCE BD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 943+ ECD0             >Prev_Ptr        defl    Heap_Ptr
 943+ ECD0             >
 943+ ECD0             >mirror_Ptr      defl    $
 943+ ECD0             >
 943+ ECD0 93 3E       >                dw      Dict_Ptr + 2        // xt
 943+ ECD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 943+ ECD2             >
 943+ ECD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 943+ ECD2             >
 943+ ECD2             >//              ______________________________________________________________________
 943+ ECD2             >//              Dictionary part
 943+ ECD2             >
 943+ ECD2             >                org     Dict_Ptr
 943+ 3E91             >
 943+ 3E91 D0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 943+ 3E93             >
 943+ 3E93             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 3E93 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 3E96             >
 943+ 3E96             >
 943+ 3E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 3E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 3E96             >
 943+ 3E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 3E96 59 3E                        dw      AGAIN
 945+ 3E98              //              dw      TWO_MINUS
 946+ 3E98 0D 3E                        dw      THEN
 947+ 3E9A BD 24                        dw      EXIT
 948+ 3E9C
 949+ 3E9C              //  ______________________________________________________________________
 950+ 3E9C              //
 951+ 3E9C              // ?do-
 952+ 3E9C              // special version of "BACK" used by ?DO and LOOP
 953+ 3E9C                              Colon_Def C_DO_BACK, "?DO-", is_normal
 953+ 3E9C             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 953+ 3E9C             >
 953+ 3E9C             >Dict_Ptr        defl    $
 953+ 3E9C             >
 953+ 3E9C             >//              ______________________________________________________________________
 953+ 3E9C             >//              Heap part
 953+ 3E9C             >
 953+ 3E9C             >
 953+ 3E9C             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ ECD2             >
 953+ ECD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ ECD2             >Latest_Definition defl  Heap_Ptr
 953+ ECD2             >
 953+ ECD2             >                // dummy db directives used to calculate length of namec
 953+ ECD2 3F 44 4F 2D >                db      "?DO-"
 953+ ECD6             >len_NFA         defl    $ - temp_NFA
 953+ ECD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ ECD2             >
 953+ ECD2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ ECD3 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 953+ ECD7             >                org     $-1                 // alter last byte of Name just above to set
 953+ ECD6 AD          >                db      {b $} | END_BIT     // msb as name end
 953+ ECD7             >
 953+ ECD7 C7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ ECD9             >Prev_Ptr        defl    Heap_Ptr
 953+ ECD9             >
 953+ ECD9             >mirror_Ptr      defl    $
 953+ ECD9             >
 953+ ECD9 9E 3E       >                dw      Dict_Ptr + 2        // xt
 953+ ECDB             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ ECDB             >
 953+ ECDB             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ ECDB             >
 953+ ECDB             >//              ______________________________________________________________________
 953+ ECDB             >//              Dictionary part
 953+ ECDB             >
 953+ ECDB             >                org     Dict_Ptr
 953+ 3E9C             >
 953+ 3E9C D9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 3E9E             >
 953+ 3E9E             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 3E9E CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 953+ 3EA1             >
 953+ 3EA1             >
 953+ 3EA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 3EA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 3EA1             >
 953+ 3EA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 3EA1 ED 3D                        dw      BACK
 955+ 3EA3              CDoBack_Begin:
 956+ 3EA3 A4 24 C7 27                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 956+ 3EA7 F2 25 48 28
 957+ 3EAB 8D 20                        dw      ZBRANCH
 958+ 3EAD 0A 00                        dw      CDoBack_While - $
 959+ 3EAF 31 25 0D 3E                  dw          TWO_PLUS, THEN
 960+ 3EB3 89 20                        dw      BRANCH
 961+ 3EB5 EE FF                        dw      CDoBack_Begin - $
 962+ 3EB7              CDoBack_While:
 963+ 3EB7 9B 2A C7 27                  dw      QCSP, CSP, STORE
 963+ 3EBB FC 25
 964+ 3EBD BD 24                        dw      EXIT
 965+ 3EBF
 966+ 3EBF              //  ______________________________________________________________________
 967+ 3EBF              //
 968+ 3EBF              // do
 969+ 3EBF              // DO  ... LOOP
 970+ 3EBF              // DO  ... n +LOOP
 971+ 3EBF              // ?DO ... LOOP
 972+ 3EBF              // ?DO ... n +LOOP
 973+ 3EBF                              Colon_Def DO, "DO", is_immediate
 973+ 3EBF             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 973+ 3EBF             >
 973+ 3EBF             >Dict_Ptr        defl    $
 973+ 3EBF             >
 973+ 3EBF             >//              ______________________________________________________________________
 973+ 3EBF             >//              Heap part
 973+ 3EBF             >
 973+ 3EBF             >
 973+ 3EBF             >                org     (Heap_Ptr & $1FFF) + $E000
 973+ ECDB             >
 973+ ECDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ ECDB             >Latest_Definition defl  Heap_Ptr
 973+ ECDB             >
 973+ ECDB             >                // dummy db directives used to calculate length of namec
 973+ ECDB 44 4F       >                db      "DO"
 973+ ECDD             >len_NFA         defl    $ - temp_NFA
 973+ ECDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ ECDB             >
 973+ ECDB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ ECDC 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 973+ ECDE             >                org     $-1                 // alter last byte of Name just above to set
 973+ ECDD CF          >                db      {b $} | END_BIT     // msb as name end
 973+ ECDE             >
 973+ ECDE D2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 973+ ECE0             >Prev_Ptr        defl    Heap_Ptr
 973+ ECE0             >
 973+ ECE0             >mirror_Ptr      defl    $
 973+ ECE0             >
 973+ ECE0 C1 3E       >                dw      Dict_Ptr + 2        // xt
 973+ ECE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 973+ ECE2             >
 973+ ECE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 973+ ECE2             >
 973+ ECE2             >//              ______________________________________________________________________
 973+ ECE2             >//              Dictionary part
 973+ ECE2             >
 973+ ECE2             >                org     Dict_Ptr
 973+ 3EBF             >
 973+ 3EBF E0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 973+ 3EC1             >
 973+ 3EC1             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 3EC1 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 3EC4             >
 973+ 3EC4             >
 973+ 3EC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 3EC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 3EC4             >
 973+ 3EC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 3EC4 C3 2A C6 20                  dw      COMPILE, C_DO
 975+ 3EC8 C7 27 F2 25                  dw      CSP, FETCH, STORE_CSP
 975+ 3ECC 46 2A
 976+ 3ECE 09 28 F9 26                  dw      HERE, THREE
 977+ 3ED2 BD 24                        dw      EXIT
 978+ 3ED4
 979+ 3ED4              //  ______________________________________________________________________
 980+ 3ED4              //
 981+ 3ED4              // loop
 982+ 3ED4                              Colon_Def LOOP, "LOOP", is_immediate
 982+ 3ED4             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 982+ 3ED4             >
 982+ 3ED4             >Dict_Ptr        defl    $
 982+ 3ED4             >
 982+ 3ED4             >//              ______________________________________________________________________
 982+ 3ED4             >//              Heap part
 982+ 3ED4             >
 982+ 3ED4             >
 982+ 3ED4             >                org     (Heap_Ptr & $1FFF) + $E000
 982+ ECE2             >
 982+ ECE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 982+ ECE2             >Latest_Definition defl  Heap_Ptr
 982+ ECE2             >
 982+ ECE2             >                // dummy db directives used to calculate length of namec
 982+ ECE2 4C 4F 4F 50 >                db      "LOOP"
 982+ ECE6             >len_NFA         defl    $ - temp_NFA
 982+ ECE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 982+ ECE2             >
 982+ ECE2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 982+ ECE3 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 982+ ECE7             >                org     $-1                 // alter last byte of Name just above to set
 982+ ECE6 D0          >                db      {b $} | END_BIT     // msb as name end
 982+ ECE7             >
 982+ ECE7 DB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 982+ ECE9             >Prev_Ptr        defl    Heap_Ptr
 982+ ECE9             >
 982+ ECE9             >mirror_Ptr      defl    $
 982+ ECE9             >
 982+ ECE9 D6 3E       >                dw      Dict_Ptr + 2        // xt
 982+ ECEB             >Heap_Ptr        defl    $ - $E000           // save current HP
 982+ ECEB             >
 982+ ECEB             >Current_HP      defl  $ - $E000             // used to set HP once!
 982+ ECEB             >
 982+ ECEB             >//              ______________________________________________________________________
 982+ ECEB             >//              Dictionary part
 982+ ECEB             >
 982+ ECEB             >                org     Dict_Ptr
 982+ 3ED4             >
 982+ 3ED4 E9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 982+ 3ED6             >
 982+ 3ED6             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 982+ 3ED6 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 982+ 3ED9             >
 982+ 3ED9             >
 982+ 3ED9             >                endif           ; ok        // for other definitions it "points" the correct handler
 982+ 3ED9             >                // Use of "; ok" to suppress "warning[fwdref]"
 982+ 3ED9             >
 982+ 3ED9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 983+ 3ED9 F9 26 8C 2A                  dw      THREE, QPAIRS
 984+ 3EDD C3 2A 81 20                  dw      COMPILE, C_LOOP
 985+ 3EE1 9E 3E                        dw      C_DO_BACK
 986+ 3EE3 BD 24                        dw      EXIT
 987+ 3EE5
 988+ 3EE5              //  ______________________________________________________________________
 989+ 3EE5              //
 990+ 3EE5              // +loop
 991+ 3EE5                              Colon_Def PLOOP, "+LOOP", is_immediate
 991+ 3EE5             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 991+ 3EE5             >
 991+ 3EE5             >Dict_Ptr        defl    $
 991+ 3EE5             >
 991+ 3EE5             >//              ______________________________________________________________________
 991+ 3EE5             >//              Heap part
 991+ 3EE5             >
 991+ 3EE5             >
 991+ 3EE5             >                org     (Heap_Ptr & $1FFF) + $E000
 991+ ECEB             >
 991+ ECEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 991+ ECEB             >Latest_Definition defl  Heap_Ptr
 991+ ECEB             >
 991+ ECEB             >                // dummy db directives used to calculate length of namec
 991+ ECEB 2B 4C 4F 4F >                db      "+LOOP"
 991+ ECEF 50          >
 991+ ECF0             >len_NFA         defl    $ - temp_NFA
 991+ ECF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 991+ ECEB             >
 991+ ECEB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 991+ ECEC 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 991+ ECF0 50          >
 991+ ECF1             >                org     $-1                 // alter last byte of Name just above to set
 991+ ECF0 D0          >                db      {b $} | END_BIT     // msb as name end
 991+ ECF1             >
 991+ ECF1 E2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 991+ ECF3             >Prev_Ptr        defl    Heap_Ptr
 991+ ECF3             >
 991+ ECF3             >mirror_Ptr      defl    $
 991+ ECF3             >
 991+ ECF3 E7 3E       >                dw      Dict_Ptr + 2        // xt
 991+ ECF5             >Heap_Ptr        defl    $ - $E000           // save current HP
 991+ ECF5             >
 991+ ECF5             >Current_HP      defl  $ - $E000             // used to set HP once!
 991+ ECF5             >
 991+ ECF5             >//              ______________________________________________________________________
 991+ ECF5             >//              Dictionary part
 991+ ECF5             >
 991+ ECF5             >                org     Dict_Ptr
 991+ 3EE5             >
 991+ 3EE5 F3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 991+ 3EE7             >
 991+ 3EE7             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 991+ 3EE7 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 991+ 3EEA             >
 991+ 3EEA             >
 991+ 3EEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 991+ 3EEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 991+ 3EEA             >
 991+ 3EEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 992+ 3EEA F9 26 8C 2A                  dw      THREE, QPAIRS
 993+ 3EEE C3 2A 4B 20                  dw      COMPILE, C_PLOOP
 994+ 3EF2 9E 3E                        dw      C_DO_BACK
 995+ 3EF4 BD 24                        dw      EXIT
 996+ 3EF6
 997+ 3EF6              //  ______________________________________________________________________
 998+ 3EF6              //
 999+ 3EF6              // ?do
1000+ 3EF6                              Colon_Def QDO, "?DO", is_immediate
1000+ 3EF6             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1000+ 3EF6             >
1000+ 3EF6             >Dict_Ptr        defl    $
1000+ 3EF6             >
1000+ 3EF6             >//              ______________________________________________________________________
1000+ 3EF6             >//              Heap part
1000+ 3EF6             >
1000+ 3EF6             >
1000+ 3EF6             >                org     (Heap_Ptr & $1FFF) + $E000
1000+ ECF5             >
1000+ ECF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1000+ ECF5             >Latest_Definition defl  Heap_Ptr
1000+ ECF5             >
1000+ ECF5             >                // dummy db directives used to calculate length of namec
1000+ ECF5 3F 44 4F    >                db      "?DO"
1000+ ECF8             >len_NFA         defl    $ - temp_NFA
1000+ ECF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1000+ ECF5             >
1000+ ECF5 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1000+ ECF6 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1000+ ECF9             >                org     $-1                 // alter last byte of Name just above to set
1000+ ECF8 CF          >                db      {b $} | END_BIT     // msb as name end
1000+ ECF9             >
1000+ ECF9 EB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1000+ ECFB             >Prev_Ptr        defl    Heap_Ptr
1000+ ECFB             >
1000+ ECFB             >mirror_Ptr      defl    $
1000+ ECFB             >
1000+ ECFB F8 3E       >                dw      Dict_Ptr + 2        // xt
1000+ ECFD             >Heap_Ptr        defl    $ - $E000           // save current HP
1000+ ECFD             >
1000+ ECFD             >Current_HP      defl  $ - $E000             // used to set HP once!
1000+ ECFD             >
1000+ ECFD             >//              ______________________________________________________________________
1000+ ECFD             >//              Dictionary part
1000+ ECFD             >
1000+ ECFD             >                org     Dict_Ptr
1000+ 3EF6             >
1000+ 3EF6 FB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1000+ 3EF8             >
1000+ 3EF8             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1000+ 3EF8 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1000+ 3EFB             >
1000+ 3EFB             >
1000+ 3EFB             >                endif           ; ok        // for other definitions it "points" the correct handler
1000+ 3EFB             >                // Use of "; ok" to suppress "warning[fwdref]"
1000+ 3EFB             >
1000+ 3EFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1001+ 3EFB C3 2A A0 20                  dw      COMPILE, C_Q_DO
1002+ 3EFF C7 27 F2 25                  dw      CSP, FETCH, STORE_CSP
1002+ 3F03 46 2A
1003+ 3F05 09 28 E4 26                  dw      HERE, ZERO, COMMA, ZERO
1003+ 3F09 1F 28 E4 26
1004+ 3F0D 09 28 F9 26                  dw      HERE, THREE
1005+ 3F11 BD 24                        dw      EXIT
1006+ 3F13
1007+ 3F13              //  ______________________________________________________________________
1008+ 3F13              //
1009+ 3F13              // \
1010+ 3F13                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1010+ 3F13             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1010+ 3F13             >
1010+ 3F13             >Dict_Ptr        defl    $
1010+ 3F13             >
1010+ 3F13             >//              ______________________________________________________________________
1010+ 3F13             >//              Heap part
1010+ 3F13             >
1010+ 3F13             >
1010+ 3F13             >                org     (Heap_Ptr & $1FFF) + $E000
1010+ ECFD             >
1010+ ECFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ ECFD             >Latest_Definition defl  Heap_Ptr
1010+ ECFD             >
1010+ ECFD             >                // dummy db directives used to calculate length of namec
1010+ ECFD 5C          >                db      "\\"
1010+ ECFE             >len_NFA         defl    $ - temp_NFA
1010+ ECFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ ECFD             >
1010+ ECFD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ ECFE 5C          >                db      "\\"               // name string in 7-bit ascii, but
1010+ ECFF             >                org     $-1                 // alter last byte of Name just above to set
1010+ ECFE DC          >                db      {b $} | END_BIT     // msb as name end
1010+ ECFF             >
1010+ ECFF F5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1010+ ED01             >Prev_Ptr        defl    Heap_Ptr
1010+ ED01             >
1010+ ED01             >mirror_Ptr      defl    $
1010+ ED01             >
1010+ ED01 15 3F       >                dw      Dict_Ptr + 2        // xt
1010+ ED03             >Heap_Ptr        defl    $ - $E000           // save current HP
1010+ ED03             >
1010+ ED03             >Current_HP      defl  $ - $E000             // used to set HP once!
1010+ ED03             >
1010+ ED03             >//              ______________________________________________________________________
1010+ ED03             >//              Dictionary part
1010+ ED03             >
1010+ ED03             >                org     Dict_Ptr
1010+ 3F13             >
1010+ 3F13 01 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1010+ 3F15             >
1010+ 3F15             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 3F15 CD 8F 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1010+ 3F18             >
1010+ 3F18             >
1010+ 3F18             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 3F18             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 3F18             >
1010+ 3F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 3F18 85 27 F2 25                  dw      BLK, FETCH
1012+ 3F1C 2A 25                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1013+ 3F1E 8D 20                        dw      ZBRANCH
1014+ 3F20 34 00                        dw      Backslash_Else_1 - $
1015+ 3F22
1016+ 3F22 85 27 F2 25                  dw          BLK, FETCH
1017+ 3F26 8D 20                        dw          ZBRANCH
1018+ 3F28 1A 00                        dw          Backslash_Else_2 - $
1019+ 3F2A
1020+ 3F2A 8B 27 F2 25                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1020+ 3F2E 0E 27 2A 25
1020+ 3F32 7D 24 0E 27
1021+ 3F36 81 25 48 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1021+ 3F3A 8B 27 DA 25
1022+ 3F3E 89 20                        dw          BRANCH
1023+ 3F40 10 00                        dw          Backslash_Endif_2 - $
1024+ 3F42              Backslash_Else_2:
1025+ 3F42 E4 26 49 27                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1025+ 3F46 F2 25 8B 27
1025+ 3F4A F2 25 0A 25
1025+ 3F4E 10 26
1026+ 3F50              Backslash_Endif_2:
1027+ 3F50 89 20                        dw      BRANCH
1028+ 3F52 0A 00                        dw      Backslash_Endif_1 - $
1029+ 3F54              Backslash_Else_1:
1030+ 3F54 15 27 3D 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1030+ 3F58 8B 27 FC 25
1031+ 3F5C              Backslash_Endif_1:
1032+ 3F5C BD 24                        dw      EXIT
1033+ 3F5E
1034+ 3F5E              //  ______________________________________________________________________
1035+ 3F5E              //
1036+ 3F5E              // blk-fh
1037+ 3F5E                              Variable_Def BLK_FH,   "BLK-FH",   1
1037+ 3F5E             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1037+ 3F5E             >
1037+ 3F5E             >Dict_Ptr        defl    $
1037+ 3F5E             >
1037+ 3F5E             >//              ______________________________________________________________________
1037+ 3F5E             >//              Heap part
1037+ 3F5E             >
1037+ 3F5E             >
1037+ 3F5E             >                org     (Heap_Ptr & $1FFF) + $E000
1037+ ED03             >
1037+ ED03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1037+ ED03             >Latest_Definition defl  Heap_Ptr
1037+ ED03             >
1037+ ED03             >                // dummy db directives used to calculate length of namec
1037+ ED03 42 4C 4B 2D >                db      "BLK-FH"
1037+ ED07 46 48       >
1037+ ED09             >len_NFA         defl    $ - temp_NFA
1037+ ED09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1037+ ED03             >
1037+ ED03 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1037+ ED04 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1037+ ED08 46 48       >
1037+ ED0A             >                org     $-1                 // alter last byte of Name just above to set
1037+ ED09 C8          >                db      {b $} | END_BIT     // msb as name end
1037+ ED0A             >
1037+ ED0A FD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1037+ ED0C             >Prev_Ptr        defl    Heap_Ptr
1037+ ED0C             >
1037+ ED0C             >mirror_Ptr      defl    $
1037+ ED0C             >
1037+ ED0C 60 3F       >                dw      Dict_Ptr + 2        // xt
1037+ ED0E             >Heap_Ptr        defl    $ - $E000           // save current HP
1037+ ED0E             >
1037+ ED0E             >Current_HP      defl  $ - $E000             // used to set HP once!
1037+ ED0E             >
1037+ ED0E             >//              ______________________________________________________________________
1037+ ED0E             >//              Dictionary part
1037+ ED0E             >
1037+ ED0E             >                org     Dict_Ptr
1037+ 3F5E             >
1037+ 3F5E 0C 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1037+ 3F60             >
1037+ 3F60             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1037+ 3F60 CD CB 26    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1037+ 3F63             >
1037+ 3F63             >
1037+ 3F63             >                endif           ; ok        // for other definitions it "points" the correct handler
1037+ 3F63             >                // Use of "; ok" to suppress "warning[fwdref]"
1037+ 3F63             >
1037+ 3F63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 3F63 01 00       >                dw      1
1038+ 3F65
1039+ 3F65                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1039+ 3F65             >
1039+ 3F65             >Dict_Ptr        defl    $
1039+ 3F65             >
1039+ 3F65             >//              ______________________________________________________________________
1039+ 3F65             >//              Heap part
1039+ 3F65             >
1039+ 3F65             >
1039+ 3F65             >                org     (Heap_Ptr & $1FFF) + $E000
1039+ ED0E             >
1039+ ED0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1039+ ED0E             >Latest_Definition defl  Heap_Ptr
1039+ ED0E             >
1039+ ED0E             >                // dummy db directives used to calculate length of namec
1039+ ED0E 42 4C 4B 2D >                db      "BLK-FNAME"
1039+ ED12 46 4E 41 4D >
1039+ ED16 45          >
1039+ ED17             >len_NFA         defl    $ - temp_NFA
1039+ ED17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1039+ ED0E             >
1039+ ED0E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1039+ ED0F 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1039+ ED13 46 4E 41 4D >
1039+ ED17 45          >
1039+ ED18             >                org     $-1                 // alter last byte of Name just above to set
1039+ ED17 C5          >                db      {b $} | END_BIT     // msb as name end
1039+ ED18             >
1039+ ED18 03 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1039+ ED1A             >Prev_Ptr        defl    Heap_Ptr
1039+ ED1A             >
1039+ ED1A             >mirror_Ptr      defl    $
1039+ ED1A             >
1039+ ED1A 67 3F       >                dw      Dict_Ptr + 2        // xt
1039+ ED1C             >Heap_Ptr        defl    $ - $E000           // save current HP
1039+ ED1C             >
1039+ ED1C             >Current_HP      defl  $ - $E000             // used to set HP once!
1039+ ED1C             >
1039+ ED1C             >//              ______________________________________________________________________
1039+ ED1C             >//              Dictionary part
1039+ ED1C             >
1039+ ED1C             >                org     Dict_Ptr
1039+ 3F65             >
1039+ 3F65 1A 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1039+ 3F67             >
1039+ 3F67             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1039+ 3F67 CD F4 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1039+ 3F6A             >
1039+ 3F6A             >
1039+ 3F6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1039+ 3F6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1039+ 3F6A             >
1039+ 3F6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1040+ 3F6A 0E           Len_Filename:   db      14   // length of the following string, excluding 0x00
1041+ 3F6B 21 42 6C 6F  Blk_filename:   db      "!Blocks-64.bin", 0
1041+ 3F6F 63 6B 73 2D
1041+ 3F73 36 34 2E 62
1041+ 3F77 69 6E 00
1042+ 3F7A              Param_From_Basic:
1043+ 3F7A 6C 69 62 2F                  db      "lib/autoexec.f", 0
1043+ 3F7E 61 75 74 6F
1043+ 3F82 65 78 65 63
1043+ 3F86 2E 66 00
1044+ 3F89
1045+ 3F89              Fence_Word:
1046+ 3F89              //  ______________________________________________________________________
1047+ 3F89              //
1048+ 3F89
1049+ 3F89 00           Here_Dictionary db      0
1050+ 3F8A
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/L3.asm
 144  3F8A
 145  3F8A              // now we save the compiled file so we can either run it or debug it
 146  3F8A                              SAVENEX OPEN "output/main.nex", ORIGIN
 147  3F8A                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  3F8A                              SAVENEX CFG  0
 149  3F8A                              SAVENEX BANK 2, 0
 150  3F8A                              SAVENEX AUTO
 151  3F8A                              SAVENEX CLOSE
 152  3F8A
 153  3F8A              //              PAGE 7 ;set 7 page to current slot
 154  3F8A              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 155  3F8A              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 156  3F8A
 157  3F8A                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 158  3F8A                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 159  3F8A
 160  3F8A                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 161  3F8A                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 162  3F8A
 163  3F8A                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 164  3F8A                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 165  3F8A
 166  3F8A                              // To run must copy vforth and vforth.bin to /dot directory
 167  3F8A                              // then start with
 168  3F8A                              //      .vforth
 169  3F8A
 170  3F8A                              END
# file closed: C:\Zx\CSpect\Projects\vForth18_DOT/source/main.asm
