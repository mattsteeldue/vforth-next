# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20240119
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              //  This work is available as-is with no whatsoever warranty.
  16  0000              //  Copying, modifying and distributing this software is allowed
  17  0000              //  provided that the copyright notice is kept.
  18  0000              //  ______________________________________________________________________
  19  0000              //
  20  0000              //  by Matteo Vitturi, 1990-2024
  21  0000              //
  22  0000              //  https://sites.google.com/view/vforth/vforth15-next
  23  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  24  0000              //
  25  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  26  0000              //  Each line of this source list mustn't exceed 80 bytes.
  27  0000              //  Z80N (ZX Spectrum Next) extension is available.
  28  0000              //
  29  0000              //  This list has been tested using the following configuration:
  30  0000              //      - CSpect emulator V.2.12.30
  31  0000              //  ______________________________________________________________________
  32  0000              //
  33  0000              //  Z80 Registers usage map
  34  0000              //
  35  0000              //  AF
  36  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  37  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  38  0000              //  HL - Working
  39  0000              //
  40  0000              //  AF'- Sometime used for backup purpose
  41  0000              //  BC'- Not used
  42  0000              //  DE'- Not used
  43  0000              //  HL'- Not used
  44  0000              //
  45  0000              //  SP - Calculator Stack Pointer
  46  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  47  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  48  0000              //
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  _________________
  52  0000              //
  53  0000              //  FORTH DEFINITIONS
  54  0000              //  _________________
  55  0000
  56  0000                              OPT     --zxnext
  57  0000              //  ______________________________________________________________________
  58  0000              //
  59  0000              // this controls some debugging code in L0.asm
  60  0000              //  0 for final binary release.
  61  0000              //  1 for debugging with Visual Studio Code and DeZog
  62  0000              // -1 for for binary comparison with Forth generated code.
  63  0000              DEBUGGING       equ     1   // .dot
  64  0000              //
  65  0000              //  ______________________________________________________________________
  66  0000
  67  0000                              if ( -1 == DEBUGGING )
  68  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  69  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  70  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  71  0000 ~            Heap_offset     defl    $2000
  72  0000 ~
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  0 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  78  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  79  0000 ~            Heap_Ptr        defl    $0002
  80  0000 ~            Heap_offset     defl     0
  81  0000 ~
  82  0000                              endif
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if (  1 == DEBUGGING )
  86  0000              ORIGIN          equ     $2000                   // for .dot
  87  0000              Heap_Ptr        defl    $0002
  88  0000              Heap_offset     defl     0
  89  0000
  90  0000                              endif
  91  0000              //  ______________________________________________________________________
  92  0000
  93  0000                              DEVICE  ZXSPECTRUMNEXT
  94  0000
  95  0000                              ORG     ORIGIN
  96  2000
  97  2000                              if ( -1 == DEBUGGING )
  98  2000 ~                            ds 128                            // for binary comparison
  99  2000                              endif
 100  2000
 101  2000              //  ______________________________________________________________________
 102  2000              //
 103  2000              //  Naming convention for Label vs Forth correspondance
 104  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 105  2000              //    - Leading "0" is converted into "Z_"
 106  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 107  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 108  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 109  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 110  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 111  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 112  2000              //    - Equal sign "=" is converted in EQUAL
 113  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 114  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 115  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 116  2000              //    - Exclamation mark "!" is converted in STORE
 117  2000              //    - At-Sign "@" is converted in FETCH
 118  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 119  2000
 120  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 121  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 2E 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 2E 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C 10 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 1A 32        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 1E 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6E                           db      110
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2024-01-19 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 34 2D 30 31
  67+ E044 2D 31 39 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi "                 // 26
  69+ E05B 30 2D 32 30
  69+ E05F 32 33 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20
  70+ E071                              End_Heap
  70+ E071             >Heap_Ptr        defl    $ - $E000
  70+ E071             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E071             >
 124+ E071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E071             >Latest_Definition defl  Heap_Ptr
 124+ E071             >
 124+ E071             >                // dummy db directives used to calculate length of namec
 124+ E071 4C 49 54    >                db      "LIT"
 124+ E074             >len_NFA         defl    $ - temp_NFA
 124+ E074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E071             >
 124+ E071 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E072 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E075             >                org     $-1                 // alter last byte of Name just above to set
 124+ E074 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E075             >
 124+ E075 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E077             >Prev_Ptr        defl    Heap_Ptr
 124+ E077             >
 124+ E077             >mirror_Ptr      defl    $
 124+ E077             >
 124+ E077 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E079             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E079             >
 124+ E079             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E079             >
 124+ E079             >//              ______________________________________________________________________
 124+ E079             >//              Dictionary part
 124+ E079             >
 124+ E079             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 77 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E079             >
 140+ E079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E079             >Latest_Definition defl  Heap_Ptr
 140+ E079             >
 140+ E079             >                // dummy db directives used to calculate length of namec
 140+ E079 45 58 45 43 >                db      "EXECUTE"
 140+ E07D 55 54 45    >
 140+ E080             >len_NFA         defl    $ - temp_NFA
 140+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E079             >
 140+ E079 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07A 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07E 55 54 45    >
 140+ E081             >                org     $-1                 // alter last byte of Name just above to set
 140+ E080 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E081             >
 140+ E081 71 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E083             >Prev_Ptr        defl    Heap_Ptr
 140+ E083             >
 140+ E083             >mirror_Ptr      defl    $
 140+ E083             >
 140+ E083 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E085             >
 140+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E085             >
 140+ E085             >//              ______________________________________________________________________
 140+ E085             >//              Dictionary part
 140+ E085             >
 140+ E085             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 83 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E085             >
 160+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E085             >Latest_Definition defl  Heap_Ptr
 160+ E085             >
 160+ E085             >                // dummy db directives used to calculate length of namec
 160+ E085 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E089 4F 50 29    >
 160+ E08C             >len_NFA         defl    $ - temp_NFA
 160+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E085             >
 160+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08A 4F 50 29    >
 160+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08C A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08D             >
 160+ E08D 79 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08F             >Prev_Ptr        defl    Heap_Ptr
 160+ E08F             >
 160+ E08F             >mirror_Ptr      defl    $
 160+ E08F             >
 160+ E08F 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E091             >
 160+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E091             >
 160+ E091             >//              ______________________________________________________________________
 160+ E091             >//              Dictionary part
 160+ E091             >
 160+ E091             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8F 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E091             >
 215+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E091             >Latest_Definition defl  Heap_Ptr
 215+ E091             >
 215+ E091             >                // dummy db directives used to calculate length of namec
 215+ E091 28 4C 4F 4F >                db      "(LOOP)"
 215+ E095 50 29       >
 215+ E097             >len_NFA         defl    $ - temp_NFA
 215+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E091             >
 215+ E091 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E092 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E096 50 29       >
 215+ E098             >                org     $-1                 // alter last byte of Name just above to set
 215+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E098             >
 215+ E098 85 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09A             >Prev_Ptr        defl    Heap_Ptr
 215+ E09A             >
 215+ E09A             >mirror_Ptr      defl    $
 215+ E09A             >
 215+ E09A 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09C             >
 215+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09C             >
 215+ E09C             >//              ______________________________________________________________________
 215+ E09C             >//              Dictionary part
 215+ E09C             >
 215+ E09C             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09C             >
 225+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09C             >Latest_Definition defl  Heap_Ptr
 225+ E09C             >
 225+ E09C             >                // dummy db directives used to calculate length of namec
 225+ E09C 42 52 41 4E >                db      "BRANCH"
 225+ E0A0 43 48       >
 225+ E0A2             >len_NFA         defl    $ - temp_NFA
 225+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09C             >
 225+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A1 43 48       >
 225+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A2 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A3             >
 225+ E0A3 91 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A5             >
 225+ E0A5             >mirror_Ptr      defl    $
 225+ E0A5             >
 225+ E0A5 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A7             >
 225+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A7             >
 225+ E0A7             >//              ______________________________________________________________________
 225+ E0A7             >//              Dictionary part
 225+ E0A7             >
 225+ E0A7             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A7             >
 245+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A7             >Latest_Definition defl  Heap_Ptr
 245+ E0A7             >
 245+ E0A7             >                // dummy db directives used to calculate length of namec
 245+ E0A7 30 42 52 41 >                db      "0BRANCH"
 245+ E0AB 4E 43 48    >
 245+ E0AE             >len_NFA         defl    $ - temp_NFA
 245+ E0AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A7             >
 245+ E0A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A8 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AC 4E 43 48    >
 245+ E0AF             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AE C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AF             >
 245+ E0AF 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B1             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B1             >
 245+ E0B1             >mirror_Ptr      defl    $
 245+ E0B1             >
 245+ E0B1 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B3             >
 245+ E0B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B3             >
 245+ E0B3             >//              ______________________________________________________________________
 245+ E0B3             >//              Dictionary part
 245+ E0B3             >
 245+ E0B3             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B3             >
 260+ E0B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B3             >Latest_Definition defl  Heap_Ptr
 260+ E0B3             >
 260+ E0B3             >                // dummy db directives used to calculate length of namec
 260+ E0B3 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B7 56 45 29    >
 260+ E0BA             >len_NFA         defl    $ - temp_NFA
 260+ E0BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B3             >
 260+ E0B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B4 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B8 56 45 29    >
 260+ E0BB             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BA A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BB             >
 260+ E0BB A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BD             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BD             >
 260+ E0BD             >mirror_Ptr      defl    $
 260+ E0BD             >
 260+ E0BD 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BF             >
 260+ E0BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BF             >
 260+ E0BF             >//              ______________________________________________________________________
 260+ E0BF             >//              Dictionary part
 260+ E0BF             >
 260+ E0BF             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A EB                           ex      de, hl
 262+ 209B                              // *** ldhlrp
 263+ 209B 3E 04                        ld      a, 4
 264+ 209D ED 31                        add     hl, a
 265+ 209F                              // *** ldrphl
 266+ 209F EB                           ex      de, hl
 267+ 20A0 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A2                              next
 268+ 20A2 DD E9       >                jp      (ix)
 269+ 20A4
 270+ 20A4              //  ______________________________________________________________________
 271+ 20A4              //
 272+ 20A4              // (?do)        lim ind --
 273+ 20A4              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A4              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A4              // used to skip the loop if lim == ind
 276+ 20A4                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A4             >
 276+ 20A4             >Dict_Ptr        defl    $
 276+ 20A4             >
 276+ 20A4             >//              ______________________________________________________________________
 276+ 20A4             >//              Heap part
 276+ 20A4             >
 276+ 20A4             >
 276+ 20A4             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BF             >
 276+ E0BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BF             >Latest_Definition defl  Heap_Ptr
 276+ E0BF             >
 276+ E0BF             >                // dummy db directives used to calculate length of namec
 276+ E0BF 28 3F 44 4F >                db      "(?DO)"
 276+ E0C3 29          >
 276+ E0C4             >len_NFA         defl    $ - temp_NFA
 276+ E0C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BF             >
 276+ E0BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C4 29          >
 276+ E0C5             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C4 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C5             >
 276+ E0C5 B3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C7             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C7             >
 276+ E0C7             >mirror_Ptr      defl    $
 276+ E0C7             >
 276+ E0C7 A6 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C9             >
 276+ E0C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C9             >
 276+ E0C9             >//              ______________________________________________________________________
 276+ E0C9             >//              Dictionary part
 276+ E0C9             >
 276+ E0C9             >                org     Dict_Ptr
 276+ 20A4             >
 276+ 20A4 C7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A6             >
 276+ 20A6             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A6 ~           >
 276+ 20A6 ~           >
 276+ 20A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A6             >
 276+ 20A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A6 D9                           exx
 278+ 20A7 D1                            pop     de                  // de has the index
 279+ 20A8 E1                            pop     hl                  // hl has the limit
 280+ 20A9 44                            ld      b, h
 281+ 20AA 4D                            ld      c, l
 282+ 20AB E5                            push    hl                  // put them back to stack for later
 283+ 20AC D5                            push    de
 284+ 20AD A7                            and     a                   // reset carry flag
 285+ 20AE ED 52                         sbc     hl, de              // compute limit - index
 286+ 20B0 D9                           exx
 287+ 20B1 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B3 E1                               pop     hl
 289+ 20B4 E1                               pop     hl
 290+ 20B5 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B7              Do_Ptr:
 292+ 20B7                              // *** ldhlrp                 // prepare RP
 293+ 20B7                              // *** ex      de, hl
 294+ 20B7                              // dec     de
 295+ 20B7                              // dec     de
 296+ 20B7                              // dec     de
 297+ 20B7                              // dec     de
 298+ 20B7 ED 35 FC FF                  add     de, -4
 299+ 20BB D5                           push    de                  // pass it to h'l'
 300+ 20BC                              // *** ex      de, hl
 301+ 20BC                              // *** ldrphl
 302+ 20BC D9                           exx
 303+ 20BD E1                            pop     hl
 304+ 20BE
 305+ 20BE                               // store index as top RP
 306+ 20BE D1                            pop     de
 307+ 20BF 73                            ld      (hl), e
 308+ 20C0 23                            inc     hl
 309+ 20C1 72                            ld      (hl), d
 310+ 20C2 23                            inc     hl
 311+ 20C3                               // stores lim as second from top RP
 312+ 20C3 D1                            pop     de
 313+ 20C4 73                            ld      (hl), e
 314+ 20C5 23                            inc     hl
 315+ 20C6 72                            ld      (hl), d
 316+ 20C7 D9                           exx
 317+ 20C8                              // skip branch-style offseet
 318+ 20C8 03                           inc     bc
 319+ 20C9 03                           inc     bc
 320+ 20CA                              next
 320+ 20CA DD E9       >                jp      (ix)
 321+ 20CC
 322+ 20CC              //  ______________________________________________________________________
 323+ 20CC              //
 324+ 20CC              // (do)        lim ind --
 325+ 20CC              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CC              // this is a simpler version of (?DO)
 327+ 20CC                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CC             >
 327+ 20CC             >Dict_Ptr        defl    $
 327+ 20CC             >
 327+ 20CC             >//              ______________________________________________________________________
 327+ 20CC             >//              Heap part
 327+ 20CC             >
 327+ 20CC             >
 327+ 20CC             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C9             >
 327+ E0C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C9             >Latest_Definition defl  Heap_Ptr
 327+ E0C9             >
 327+ E0C9             >                // dummy db directives used to calculate length of namec
 327+ E0C9 28 44 4F 29 >                db      "(DO)"
 327+ E0CD             >len_NFA         defl    $ - temp_NFA
 327+ E0CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C9             >
 327+ E0C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CA 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CE             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CD A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CE             >
 327+ E0CE BF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D0             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D0             >
 327+ E0D0             >mirror_Ptr      defl    $
 327+ E0D0             >
 327+ E0D0 CE 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D2             >
 327+ E0D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D2             >
 327+ E0D2             >//              ______________________________________________________________________
 327+ E0D2             >//              Dictionary part
 327+ E0D2             >
 327+ E0D2             >                org     Dict_Ptr
 327+ 20CC             >
 327+ 20CC D0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CE             >
 327+ 20CE             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CE ~           >
 327+ 20CE ~           >
 327+ 20CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CE             >
 327+ 20CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CE 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CF 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 20D0 18 E5                        jr      Do_Ptr
 331+ 20D2
 332+ 20D2              //  ______________________________________________________________________
 333+ 20D2              //
 334+ 20D2              // i            -- n
 335+ 20D2              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D2              // the current value of the index-loop
 337+ 20D2                              New_Def I, "I", is_code, is_normal
 337+ 20D2             >
 337+ 20D2             >Dict_Ptr        defl    $
 337+ 20D2             >
 337+ 20D2             >//              ______________________________________________________________________
 337+ 20D2             >//              Heap part
 337+ 20D2             >
 337+ 20D2             >
 337+ 20D2             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D2             >
 337+ E0D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D2             >Latest_Definition defl  Heap_Ptr
 337+ E0D2             >
 337+ E0D2             >                // dummy db directives used to calculate length of namec
 337+ E0D2 49          >                db      "I"
 337+ E0D3             >len_NFA         defl    $ - temp_NFA
 337+ E0D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D2             >
 337+ E0D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D3 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D4             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D3 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D4             >
 337+ E0D4 C9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D6             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D6             >
 337+ E0D6             >mirror_Ptr      defl    $
 337+ E0D6             >
 337+ E0D6 D4 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D8             >
 337+ E0D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D8             >
 337+ E0D8             >//              ______________________________________________________________________
 337+ E0D8             >//              Dictionary part
 337+ E0D8             >
 337+ E0D8             >                org     Dict_Ptr
 337+ 20D2             >
 337+ 20D2 D6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D4             >
 337+ 20D4             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D4 ~           >
 337+ 20D4 ~           >
 337+ 20D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D4             >
 337+ 20D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D4              I_Ptr:
 339+ 20D4 62                           ld      h, d
 340+ 20D5 6B                           ld      l, e
 341+ 20D6                              // *** ldhlrp
 342+ 20D6              I_Ptr_prime:
 343+ 20D6 7E                           ld      a, (hl)
 344+ 20D7 23                           inc     hl
 345+ 20D8 66                           ld      h, (hl)
 346+ 20D9 6F                           ld      l, a
 347+ 20DA E5                           push    hl
 348+ 20DB                              next
 348+ 20DB DD E9       >                jp      (ix)
 349+ 20DD
 350+ 20DD
 351+ 20DD              //  ______________________________________________________________________
 352+ 20DD              //
 353+ 20DD              // i'            -- n
 354+ 20DD              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DD              // the limit of the index-loop
 356+ 20DD
 357+ 20DD                              New_Def II, "I'", is_code, is_normal
 357+ 20DD             >
 357+ 20DD             >Dict_Ptr        defl    $
 357+ 20DD             >
 357+ 20DD             >//              ______________________________________________________________________
 357+ 20DD             >//              Heap part
 357+ 20DD             >
 357+ 20DD             >
 357+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D8             >
 357+ E0D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D8             >Latest_Definition defl  Heap_Ptr
 357+ E0D8             >
 357+ E0D8             >                // dummy db directives used to calculate length of namec
 357+ E0D8 49 27       >                db      "I'"
 357+ E0DA             >len_NFA         defl    $ - temp_NFA
 357+ E0DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D8             >
 357+ E0D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D9 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DB             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DA A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DB             >
 357+ E0DB D2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DD             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DD             >
 357+ E0DD             >mirror_Ptr      defl    $
 357+ E0DD             >
 357+ E0DD DF 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DF             >
 357+ E0DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DF             >
 357+ E0DF             >//              ______________________________________________________________________
 357+ E0DF             >//              Dictionary part
 357+ E0DF             >
 357+ E0DF             >                org     Dict_Ptr
 357+ 20DD             >
 357+ 20DD DD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DF             >
 357+ 20DF             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DF ~           >
 357+ 20DF ~           >
 357+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DF             >
 357+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DF 62                           ld      h, d
 359+ 20E0 6B                           ld      l, e
 360+ 20E1                              // *** ldhlrp
 361+ 20E1 23                           inc     hl
 362+ 20E2 23                           inc     hl
 363+ 20E3 18 F1                        jr      I_Ptr_prime
 364+ 20E5
 365+ 20E5
 366+ 20E5              //  ______________________________________________________________________
 367+ 20E5              //
 368+ 20E5              // digit        c n -- u tf  |  ff
 369+ 20E5              // convert a character c using base n
 370+ 20E5              // returns a unsigned number and a true flag
 371+ 20E5              // or just a false flag if the conversion fails
 372+ 20E5                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E5             >
 372+ 20E5             >Dict_Ptr        defl    $
 372+ 20E5             >
 372+ 20E5             >//              ______________________________________________________________________
 372+ 20E5             >//              Heap part
 372+ 20E5             >
 372+ 20E5             >
 372+ 20E5             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DF             >
 372+ E0DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DF             >Latest_Definition defl  Heap_Ptr
 372+ E0DF             >
 372+ E0DF             >                // dummy db directives used to calculate length of namec
 372+ E0DF 44 49 47 49 >                db      "DIGIT"
 372+ E0E3 54          >
 372+ E0E4             >len_NFA         defl    $ - temp_NFA
 372+ E0E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DF             >
 372+ E0DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E0 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E4 54          >
 372+ E0E5             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E4 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E5             >
 372+ E0E5 D8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E7             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E7             >
 372+ E0E7             >mirror_Ptr      defl    $
 372+ E0E7             >
 372+ E0E7 E7 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E9             >
 372+ E0E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E9             >
 372+ E0E9             >//              ______________________________________________________________________
 372+ E0E9             >//              Dictionary part
 372+ E0E9             >
 372+ E0E9             >                org     Dict_Ptr
 372+ 20E5             >
 372+ 20E5 E7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E7             >
 372+ 20E7             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E7 ~           >
 372+ 20E7 ~           >
 372+ 20E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E7             >
 372+ 20E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E7 D9                           exx
 374+ 20E8 E1                           pop     hl                  // l has the base
 375+ 20E9 D1                           pop     de                  // e has the digit
 376+ 20EA 7B                           ld      a, e
 377+ 20EB FE 60                        cp      $60                 // check if lowercase
 378+ 20ED 38 02                        jr      c, Digit_Uppercase
 379+ 20EF D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20F1              Digit_Uppercase:
 381+ 20F1 D6 30                        sub     $30
 382+ 20F3 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F5 FE 0A                            cp      $0A
 384+ 20F7 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F9 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20FB FE 0A                                cp      $0A
 387+ 20FD 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FF
 389+ 20FF              Digit_Decimal:
 390+ 20FF                              // compare digit
 391+ 20FF BD                           cp      l                   // compare with base
 392+ 2100 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2102 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2103 21 01 00                         ld      hl, 1
 395+ 2106 D5                               push    de
 396+ 2107 E5                               push    hl
 397+ 2108 D9                               exx
 398+ 2109                                  next
 398+ 2109 DD E9       >                jp      (ix)
 399+ 210B              Digit_Fail:
 400+ 210B 21 00 00                     ld      hl, 0
 401+ 210E E5                           push    hl
 402+ 210F D9                           exx
 403+ 2110                              next
 403+ 2110 DD E9       >                jp      (ix)
 404+ 2112
 405+ 2112              //  ______________________________________________________________________
 406+ 2112              //
 407+ 2112              //  parametric uppercase routine
 408+ 2112              //  depending on the following op-code the routine can be by-passed
 409+ 2112              //  changing the behaviour of some callers.
 410+ 2112              //  If it is "ret" then the system is Case-Sensitive
 411+ 2112              //  If it is "Nop" then the system is Case-Insensitive
 412+ 2112              //  Only A register is touched.
 413+ 2112 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 2113              Case_Upper:
 415+ 2113 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 2115 D8                           ret     c                   // no change if A < "a"
 417+ 2116 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 2118 D0                           ret     nc                  // no change if A > "z"
 419+ 2119 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 211B C9                           ret
 421+ 211C
 422+ 211C              //  ______________________________________________________________________
 423+ 211C              //
 424+ 211C              //  caseon      --
 425+ 211C              // set system case-sensitivity on
 426+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 211C                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 211C             >
 427+ 211C             >Dict_Ptr        defl    $
 427+ 211C             >
 427+ 211C             >//              ______________________________________________________________________
 427+ 211C             >//              Heap part
 427+ 211C             >
 427+ 211C             >
 427+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0E9             >
 427+ E0E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0E9             >Latest_Definition defl  Heap_Ptr
 427+ E0E9             >
 427+ E0E9             >                // dummy db directives used to calculate length of namec
 427+ E0E9 43 41 53 45 >                db      "CASEON"
 427+ E0ED 4F 4E       >
 427+ E0EF             >len_NFA         defl    $ - temp_NFA
 427+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0E9             >
 427+ E0E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EA 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0EE 4F 4E       >
 427+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0EF CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F0             >
 427+ E0F0 DF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F2             >
 427+ E0F2             >mirror_Ptr      defl    $
 427+ E0F2             >
 427+ E0F2 1E 21       >                dw      Dict_Ptr + 2        // xt
 427+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F4             >
 427+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F4             >
 427+ E0F4             >//              ______________________________________________________________________
 427+ E0F4             >//              Dictionary part
 427+ E0F4             >
 427+ E0F4             >                org     Dict_Ptr
 427+ 211C             >
 427+ 211C F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 211E             >
 427+ 211E             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 211E ~           >
 427+ 211E ~           >
 427+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 211E             >
 427+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 211E 3E C9                        ld      a, $C9              // "ret"
 429+ 2120 32 12 21                     ld      (Case_Sensitive), a
 430+ 2123                              next
 430+ 2123 DD E9       >                jp      (ix)
 431+ 2125
 432+ 2125              //  ______________________________________________________________________
 433+ 2125              //
 434+ 2125              //  caseoff     --
 435+ 2125              // set system case-sensitivity on
 436+ 2125              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 2125                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 2125             >
 437+ 2125             >Dict_Ptr        defl    $
 437+ 2125             >
 437+ 2125             >//              ______________________________________________________________________
 437+ 2125             >//              Heap part
 437+ 2125             >
 437+ 2125             >
 437+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F4             >
 437+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F4             >Latest_Definition defl  Heap_Ptr
 437+ E0F4             >
 437+ E0F4             >                // dummy db directives used to calculate length of namec
 437+ E0F4 43 41 53 45 >                db      "CASEOFF"
 437+ E0F8 4F 46 46    >
 437+ E0FB             >len_NFA         defl    $ - temp_NFA
 437+ E0FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F4             >
 437+ E0F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0F9 4F 46 46    >
 437+ E0FC             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FB C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FC             >
 437+ E0FC E9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E0FE             >Prev_Ptr        defl    Heap_Ptr
 437+ E0FE             >
 437+ E0FE             >mirror_Ptr      defl    $
 437+ E0FE             >
 437+ E0FE 27 21       >                dw      Dict_Ptr + 2        // xt
 437+ E100             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E100             >
 437+ E100             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E100             >
 437+ E100             >//              ______________________________________________________________________
 437+ E100             >//              Dictionary part
 437+ E100             >
 437+ E100             >                org     Dict_Ptr
 437+ 2125             >
 437+ 2125 FE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 2127             >
 437+ 2127             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 2127 ~           >
 437+ 2127 ~           >
 437+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 2127             >
 437+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 2127 3E 00                        ld      a, $00              // "nop"
 439+ 2129 32 12 21                     ld      (Case_Sensitive), a
 440+ 212C                              next
 440+ 212C DD E9       >                jp      (ix)
 441+ 212E
 442+ 212E              //  ______________________________________________________________________
 443+ 212E              //
 444+ 212E              //  upper       c1 -- c1 | c2
 445+ 212E              // character on top of stack is forced to Uppercase.
 446+ 212E                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 212E             >
 446+ 212E             >Dict_Ptr        defl    $
 446+ 212E             >
 446+ 212E             >//              ______________________________________________________________________
 446+ 212E             >//              Heap part
 446+ 212E             >
 446+ 212E             >
 446+ 212E             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E100             >
 446+ E100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E100             >Latest_Definition defl  Heap_Ptr
 446+ E100             >
 446+ E100             >                // dummy db directives used to calculate length of namec
 446+ E100 55 50 50 45 >                db      "UPPER"
 446+ E104 52          >
 446+ E105             >len_NFA         defl    $ - temp_NFA
 446+ E105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E100             >
 446+ E100 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E101 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E105 52          >
 446+ E106             >                org     $-1                 // alter last byte of Name just above to set
 446+ E105 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E106             >
 446+ E106 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E108             >Prev_Ptr        defl    Heap_Ptr
 446+ E108             >
 446+ E108             >mirror_Ptr      defl    $
 446+ E108             >
 446+ E108 30 21       >                dw      Dict_Ptr + 2        // xt
 446+ E10A             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10A             >
 446+ E10A             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10A             >
 446+ E10A             >//              ______________________________________________________________________
 446+ E10A             >//              Dictionary part
 446+ E10A             >
 446+ E10A             >                org     Dict_Ptr
 446+ 212E             >
 446+ 212E 08 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 2130             >
 446+ 2130             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 2130 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 2130 ~           >
 446+ 2130 ~           >
 446+ 2130             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 2130             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 2130             >
 446+ 2130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 2130 E1                           pop     hl
 448+ 2131 7D                           ld      a, l
 449+ 2132 CD 13 21                     call    Case_Upper
 450+ 2135 6F                           ld      l, a
 451+ 2136
 452+ 2136                              psh1
 452+ 2136 E5          >                push    hl
 452+ 2137 DD E9       >                jp      (ix)
 453+ 2139
 454+ 2139              //  ______________________________________________________________________
 455+ 2139
 456+ 2139              MMU7_read:
 457+ 2139 3E 57                        ld      a, 87
 458+ 213B              NEXTREG_read:
 459+ 213B 01 3B 24                     ld      bc, $243B
 460+ 213E ED 79                        out     (c), a
 461+ 2140 04                           inc     b
 462+ 2141 ED 78                        in      a, (c)
 463+ 2143 C9                           ret
 464+ 2144
 465+ 2144              //  ______________________________________________________________________
 466+ 2144
 467+ 2144              TO_FAR_rout:
 468+ 2144 7C                           ld      a, h
 469+ 2145 08                           ex      af, af
 470+ 2146 7C                           ld      a, h
 471+ 2147 F6 E0                        or      $E0
 472+ 2149 67                           ld      h, a
 473+ 214A 08                           ex      af, af
 474+ 214B 07                           rlca
 475+ 214C 07                           rlca
 476+ 214D 07                           rlca
 477+ 214E E6 07                        and     $07
 478+ 2150 C6 20                        add     $20
 479+ 2152 C9                           ret
 480+ 2153
 481+ 2153
 482+ 2153              //  ______________________________________________________________________
 483+ 2153              //
 484+ 2153              // (find)       addr voc -- 0 | cfa b 1
 485+ 2153              // vocabulary search,
 486+ 2153              // - voc is starting word's NFA
 487+ 2153              // - addr is the string to be searched for
 488+ 2153              // On success, it returns the CFA of found word, the first NFA byte
 489+ 2153              // (which contains length and some flags) and a true flag.
 490+ 2153              // On fail, a false flag  (no more: leaves addr unchanged)
 491+ 2153                              New_Def C_FIND, "(FIND)", is_code, is_normal
 491+ 2153             >
 491+ 2153             >Dict_Ptr        defl    $
 491+ 2153             >
 491+ 2153             >//              ______________________________________________________________________
 491+ 2153             >//              Heap part
 491+ 2153             >
 491+ 2153             >
 491+ 2153             >                org     (Heap_Ptr & $1FFF) + $E000
 491+ E10A             >
 491+ E10A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ E10A             >Latest_Definition defl  Heap_Ptr
 491+ E10A             >
 491+ E10A             >                // dummy db directives used to calculate length of namec
 491+ E10A 28 46 49 4E >                db      "(FIND)"
 491+ E10E 44 29       >
 491+ E110             >len_NFA         defl    $ - temp_NFA
 491+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ E10A             >
 491+ E10A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ E10B 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 491+ E10F 44 29       >
 491+ E111             >                org     $-1                 // alter last byte of Name just above to set
 491+ E110 A9          >                db      {b $} | END_BIT     // msb as name end
 491+ E111             >
 491+ E111 00 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 491+ E113             >Prev_Ptr        defl    Heap_Ptr
 491+ E113             >
 491+ E113             >mirror_Ptr      defl    $
 491+ E113             >
 491+ E113 55 21       >                dw      Dict_Ptr + 2        // xt
 491+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 491+ E115             >
 491+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 491+ E115             >
 491+ E115             >//              ______________________________________________________________________
 491+ E115             >//              Dictionary part
 491+ E115             >
 491+ E115             >                org     Dict_Ptr
 491+ 2153             >
 491+ 2153 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 491+ 2155             >
 491+ 2155             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 2155 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 491+ 2155 ~           >
 491+ 2155 ~           >
 491+ 2155             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 2155             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 2155             >
 491+ 2155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 2155 D9                           exx
 493+ 2156 CD 39 21                     call    MMU7_read
 494+ 2159 D9                           exx
 495+ 215A 6F                           ld      l, a
 496+ 215B D9                           exx
 497+ 215C
 498+ 215C D1                           pop     de                      // de has dictionary pointer
 499+ 215D              Find_VocabularyLoop:
 500+ 215D 7A                               ld      a, d
 501+ 215E D6 60                            sub     $60
 502+ 2160 30 08                            jr      nc, Find_far_endif
 503+ 2162 EB                                   ex      de, hl
 504+ 2163 CD 44 21                             call    TO_FAR_rout
 505+ 2166 EB                                   ex      de, hl
 506+ 2167 ED 92 57                             nextreg 87, a
 507+ 216A              Find_far_endif:
 508+ 216A E1                               pop     hl                  // string pointer to search for
 509+ 216B E5                               push    hl                  // keep it on stack too for the end.
 510+ 216C 1A                               ld      a, (de)             // save NFA length byte
 511+ 216D 08                               ex      af,af'              // for later use (!)
 512+ 216E 1A                               ld      a, (de)             // reload NFA length byte
 513+ 216F AE                               xor     (hl)                // check if same length
 514+ 2170 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 515+ 2172                                  // word and text haven't the same length, skip to next vocabulary entry
 516+ 2172 20 33                            jr      nz, Find_DifferentLenght
 517+ 2174
 518+ 2174              Find_ThisWord:      // begin loop
 519+ 2174 23                                   inc     hl
 520+ 2175 13                                   inc     de
 521+ 2176 1A                                   ld      a, (de)
 522+ 2177                                      // case insensitive option - begin
 523+ 2177                                      // push    bc
 524+ 2177 E6 80                                and     $80                 // split A in msb and the rest
 525+ 2179 47                                   ld      b, a
 526+ 217A 1A                                   ld      a, (de)
 527+ 217B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 528+ 217D CD 12 21                             call    Case_Sensitive      // uppercase routine
 529+ 2180 4F                                   ld      c, a
 530+ 2181 7E                                   ld      a, (hl)
 531+ 2182 CD 12 21                             call    Case_Sensitive      // uppercase routine
 532+ 2185 A9                                   xor     c
 533+ 2186 A8                                   xor     b
 534+ 2187                                      // pop     bc
 535+ 2187                                      // case insensitive option - end
 536+ 2187 87                                   add     a                   // ignore msb during compare
 537+ 2188 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 538+ 218A
 539+ 218A                                  // loop back until last byte msb is found set
 540+ 218A                                  // that bit marks the ending char of this word
 541+ 218A 30 E8                            jr      nc, Find_ThisWord
 542+ 218C
 543+ 218C                                  // match found !
 544+ 218C 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 545+ 218F 19                               add     hl, de
 546+ 2190
 547+ 2190                              //  ld      a, h
 548+ 2190                              //  and     $E0
 549+ 2190                              //  xor     h
 550+ 2190                              //  jr      nz, Non_MMU7
 551+ 2190                                  //  call    MMU7_read
 552+ 2190                                  //  dec     a
 553+ 2190                                  //  jr      z, Non_MMU7
 554+ 2190 5E                                       ld      e, (hl)
 555+ 2191 23                                       inc     hl
 556+ 2192 56                                       ld      d, (hl)
 557+ 2193 EB                                       ex      de, hl
 558+ 2194              //Non_MMU7:
 559+ 2194 E3                               ex      (sp), hl            // CFA on stack and drop addr
 560+ 2195 08                               ex      af, af'             // retrieve NFA byte (!)
 561+ 2196 5F                               ld      e, a
 562+ 2197 16 00                            ld      d, 0
 563+ 2199 21 FF FF                         ld      hl, -1
 564+ 219C D5                               push    de
 565+ 219D E5                               push    hl
 566+ 219E D9                               exx
 567+ 219F 7D                               ld      a, l
 568+ 21A0 ED 92 57                         nextreg 87, a
 569+ 21A3                                  next
 569+ 21A3 DD E9       >                jp      (ix)
 570+ 21A5
 571+ 21A5              Find_DidntMatch: // didn't match (*)
 572+ 21A5 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 573+ 21A7
 574+ 21A7              Find_DifferentLenght:
 575+ 21A7                                  // consume chars until the end of the word
 576+ 21A7                                  // that is last byte msb is found set
 577+ 21A7 13                                   inc     de
 578+ 21A8 1A                                   ld      a, (de)
 579+ 21A9 87                                   add     a, a
 580+ 21AA 30 FB                            jr      nc, Find_DifferentLenght
 581+ 21AC
 582+ 21AC              Find_WordEnd:   // word-end  found (**)
 583+ 21AC                                  // take LFA and use it
 584+ 21AC 13                               inc     de
 585+ 21AD EB                               ex      de, hl
 586+ 21AE 5E                               ld      e, (hl)
 587+ 21AF 23                               inc     hl
 588+ 21B0 56                               ld      d, (hl)
 589+ 21B1 7A                               ld      a, d
 590+ 21B2 B3                               or      e
 591+ 21B3
 592+ 21B3                              // loop until end of vocabulary
 593+ 21B3 20 A8                        jr      nz, Find_VocabularyLoop
 594+ 21B5
 595+ 21B5 E1                           pop     hl              // without this, leaves addr unchanged
 596+ 21B6 21 00 00                     ld      hl, 0
 597+ 21B9 E5                           push    hl
 598+ 21BA D9                           exx
 599+ 21BB 7D                           ld      a, l
 600+ 21BC ED 92 57                     nextreg 87, a
 601+ 21BF                              next
 601+ 21BF DD E9       >                jp      (ix)
 602+ 21C1
 603+ 21C1              //  ______________________________________________________________________
 604+ 21C1              //
 605+ 21C1              // enclose      a c -- a  n1 n2 n3
 606+ 21C1              // starting from a, using delimiter c, determines the offsets:
 607+ 21C1              //   n1   the first character non-delimiter
 608+ 21C1              //   n2   the first delimiter after the text
 609+ 21C1              //   n3   the first character non enclosed.
 610+ 21C1              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 611+ 21C1              // an uncoditional delimiter.
 612+ 21C1              // Examples:
 613+ 21C1              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 614+ 21C1              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 615+ 21C1              // iii:	c  c  'nul'          -- 2  3  2
 616+ 21C1                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 616+ 21C1             >
 616+ 21C1             >Dict_Ptr        defl    $
 616+ 21C1             >
 616+ 21C1             >//              ______________________________________________________________________
 616+ 21C1             >//              Heap part
 616+ 21C1             >
 616+ 21C1             >
 616+ 21C1             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E115             >
 616+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E115             >Latest_Definition defl  Heap_Ptr
 616+ E115             >
 616+ E115             >                // dummy db directives used to calculate length of namec
 616+ E115 45 4E 43 4C >                db      "ENCLOSE"
 616+ E119 4F 53 45    >
 616+ E11C             >len_NFA         defl    $ - temp_NFA
 616+ E11C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E115             >
 616+ E115 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E116 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 616+ E11A 4F 53 45    >
 616+ E11D             >                org     $-1                 // alter last byte of Name just above to set
 616+ E11C C5          >                db      {b $} | END_BIT     // msb as name end
 616+ E11D             >
 616+ E11D 0A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E11F             >Prev_Ptr        defl    Heap_Ptr
 616+ E11F             >
 616+ E11F             >mirror_Ptr      defl    $
 616+ E11F             >
 616+ E11F C3 21       >                dw      Dict_Ptr + 2        // xt
 616+ E121             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E121             >
 616+ E121             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E121             >
 616+ E121             >//              ______________________________________________________________________
 616+ E121             >//              Dictionary part
 616+ E121             >
 616+ E121             >                org     Dict_Ptr
 616+ 21C1             >
 616+ 21C1 1F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 21C3             >
 616+ 21C3             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 21C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 616+ 21C3 ~           >
 616+ 21C3 ~           >
 616+ 21C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 21C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 21C3             >
 616+ 21C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 21C3 D9                           exx
 618+ 21C4 D1                           pop     de                  //  e has the character
 619+ 21C5 E1                           pop     hl                  // hl has the string address
 620+ 21C6 E5                           push    hl
 621+ 21C7 7B                           ld      a, e
 622+ 21C8 11 FF FF                     ld      de, -1              // let's start from -1
 623+ 21CB 2B                           dec     hl
 624+ 21CC              Enclose_NonDelimiter:
 625+ 21CC                              // find first non delimiter
 626+ 21CC 23                               inc     hl
 627+ 21CD 13                               inc     de
 628+ 21CE BE                               cp      (hl)
 629+ 21CF 28 FB                        jr      z, Enclose_NonDelimiter
 630+ 21D1 D5                           push    de
 631+ 21D2
 632+ 21D2                              // push    bc                  // save Instruction Pointer
 633+ 21D2
 634+ 21D2 4F                           ld      c, a                // save char
 635+ 21D3 7E                           ld      a, (hl)
 636+ 21D4 A7                           and     a                   // stop if 0x00
 637+ 21D5 20 07                        jr      nz, Enclose_NextChar
 638+ 21D7                              /// case iii. no more character in string
 639+ 21D7                                  // pop     bc                  // restore Instruction Pointer
 640+ 21D7 13                               inc     de
 641+ 21D8 D5                               push    de
 642+ 21D9 1B                               dec     de
 643+ 21DA D5                               push    de
 644+ 21DB D9                               exx
 645+ 21DC                                  next
 645+ 21DC DD E9       >                jp      (ix)
 646+ 21DE              Enclose_NextChar:
 647+ 21DE 79                               ld      a, c
 648+ 21DF 23                               inc     hl
 649+ 21E0 13                               inc     de
 650+ 21E1 BE                               cp      (hl)
 651+ 21E2 20 06                            jr      nz, Enclose_NonSeparator
 652+ 21E4                                      // case i. first non enclosed
 653+ 21E4                                      // pop     bc                  // restore Instruction Pointer
 654+ 21E4 D5                                   push    de
 655+ 21E5 13                                   inc     de
 656+ 21E6 D5                                   push    de
 657+ 21E7 D9                                   exx
 658+ 21E8                                      next
 658+ 21E8 DD E9       >                jp      (ix)
 659+ 21EA              Enclose_NonSeparator:
 660+ 21EA 7E                               ld      a, (hl)
 661+ 21EB A7                               and     a
 662+ 21EC 20 F0                        jr      nz, Enclose_NextChar
 663+ 21EE
 664+ 21EE                              // case ii. separator & terminator
 665+ 21EE                              // pop     bc                  // restore Instruction Pointer
 666+ 21EE D5                           push    de
 667+ 21EF D5                           push    de
 668+ 21F0 D9                           exx
 669+ 21F1                              next
 669+ 21F1 DD E9       >                jp      (ix)
 670+ 21F3
 671+ 21F3              //  ______________________________________________________________________
 672+ 21F3              //
 673+ 21F3              // (map)        a2 a1 n c1 -- c2
 674+ 21F3              // translate character c1 using mapping string a2 and a2
 675+ 21F3              // if c1 is not present within string a1 then
 676+ 21F3              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 677+ 21F3                              New_Def C_MAP, "(MAP)", is_code, is_normal
 677+ 21F3             >
 677+ 21F3             >Dict_Ptr        defl    $
 677+ 21F3             >
 677+ 21F3             >//              ______________________________________________________________________
 677+ 21F3             >//              Heap part
 677+ 21F3             >
 677+ 21F3             >
 677+ 21F3             >                org     (Heap_Ptr & $1FFF) + $E000
 677+ E121             >
 677+ E121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 677+ E121             >Latest_Definition defl  Heap_Ptr
 677+ E121             >
 677+ E121             >                // dummy db directives used to calculate length of namec
 677+ E121 28 4D 41 50 >                db      "(MAP)"
 677+ E125 29          >
 677+ E126             >len_NFA         defl    $ - temp_NFA
 677+ E126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 677+ E121             >
 677+ E121 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 677+ E122 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 677+ E126 29          >
 677+ E127             >                org     $-1                 // alter last byte of Name just above to set
 677+ E126 A9          >                db      {b $} | END_BIT     // msb as name end
 677+ E127             >
 677+ E127 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 677+ E129             >Prev_Ptr        defl    Heap_Ptr
 677+ E129             >
 677+ E129             >mirror_Ptr      defl    $
 677+ E129             >
 677+ E129 F5 21       >                dw      Dict_Ptr + 2        // xt
 677+ E12B             >Heap_Ptr        defl    $ - $E000           // save current HP
 677+ E12B             >
 677+ E12B             >Current_HP      defl  $ - $E000             // used to set HP once!
 677+ E12B             >
 677+ E12B             >//              ______________________________________________________________________
 677+ E12B             >//              Dictionary part
 677+ E12B             >
 677+ E12B             >                org     Dict_Ptr
 677+ 21F3             >
 677+ 21F3 29 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 677+ 21F5             >
 677+ 21F5             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 677+ 21F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 677+ 21F5 ~           >
 677+ 21F5 ~           >
 677+ 21F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 677+ 21F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 677+ 21F5             >
 677+ 21F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 678+ 21F5 D9                           exx
 679+ 21F6 E1                           pop     hl
 680+ 21F7 7D                           ld      a, l
 681+ 21F8 C1                           pop     bc
 682+ 21F9 E1                           pop     hl
 683+ 21FA 50                           ld      d, b
 684+ 21FB 59                           ld      e, c
 685+ 21FC ED B1                        cpir
 686+ 21FE E1                           pop     hl
 687+ 21FF 20 05                        jr      nz, C_Map_Then
 687+ 2201
 688+ 2201 19                               add     hl, de
 689+ 2202 2B                               dec     hl
 690+ 2203 ED 42                            sbc     hl, bc
 691+ 2205 7E                               ld      a, (hl)
 692+ 2206              C_Map_Then:
 693+ 2206 6F                           ld      l, a
 694+ 2207 26 00                        ld      h, 0
 695+ 2209 E5                           push    hl
 696+ 220A D9                           exx
 697+ 220B                              next
 697+ 220B DD E9       >                jp      (ix)
 698+ 220D
 699+ 220D              //  ______________________________________________________________________
 700+ 220D              //
 701+ 220D              // (compare)    a1 a2 n -- b
 702+ 220D              // this word performs a lexicographic compare of n bytes of text at address a1
 703+ 220D              // with n bytes of text at address a2. It returns numeric a value:
 704+ 220D              //  0 : if strings are equal
 705+ 220D              // +1 : if string at a1 greater than string at a2
 706+ 220D              // -1 : if string at a1 less than string at a2
 707+ 220D              // strings can be 256 bytes in length at most.
 708+ 220D                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 708+ 220D             >
 708+ 220D             >Dict_Ptr        defl    $
 708+ 220D             >
 708+ 220D             >//              ______________________________________________________________________
 708+ 220D             >//              Heap part
 708+ 220D             >
 708+ 220D             >
 708+ 220D             >                org     (Heap_Ptr & $1FFF) + $E000
 708+ E12B             >
 708+ E12B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 708+ E12B             >Latest_Definition defl  Heap_Ptr
 708+ E12B             >
 708+ E12B             >                // dummy db directives used to calculate length of namec
 708+ E12B 28 43 4F 4D >                db      "(COMPARE)"
 708+ E12F 50 41 52 45 >
 708+ E133 29          >
 708+ E134             >len_NFA         defl    $ - temp_NFA
 708+ E134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 708+ E12B             >
 708+ E12B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 708+ E12C 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 708+ E130 50 41 52 45 >
 708+ E134 29          >
 708+ E135             >                org     $-1                 // alter last byte of Name just above to set
 708+ E134 A9          >                db      {b $} | END_BIT     // msb as name end
 708+ E135             >
 708+ E135 21 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 708+ E137             >Prev_Ptr        defl    Heap_Ptr
 708+ E137             >
 708+ E137             >mirror_Ptr      defl    $
 708+ E137             >
 708+ E137 0F 22       >                dw      Dict_Ptr + 2        // xt
 708+ E139             >Heap_Ptr        defl    $ - $E000           // save current HP
 708+ E139             >
 708+ E139             >Current_HP      defl  $ - $E000             // used to set HP once!
 708+ E139             >
 708+ E139             >//              ______________________________________________________________________
 708+ E139             >//              Dictionary part
 708+ E139             >
 708+ E139             >                org     Dict_Ptr
 708+ 220D             >
 708+ 220D 37 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 708+ 220F             >
 708+ 220F             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 708+ 220F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 708+ 220F ~           >
 708+ 220F ~           >
 708+ 220F             >                endif           ; ok        // for other definitions it "points" the correct handler
 708+ 220F             >                // Use of "; ok" to suppress "warning[fwdref]"
 708+ 220F             >
 708+ 220F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 709+ 220F D9                           exx
 710+ 2210 E1                           pop     hl                  // Number of bytes
 711+ 2211 7D                           ld      a, l
 712+ 2212 E1                           pop     hl                  // hl points string a2
 713+ 2213 D1                           pop     de                  // hl points string a1
 714+ 2214              //              push    bc                  // Instruction pointer on stack
 715+ 2214 47                           ld      b, a
 716+ 2215              C_Compare_Loop:
 717+ 2215 7E                               ld      a, (hl)
 718+ 2216 CD 12 21                         call    Case_Sensitive
 719+ 2219 4F                               ld      c, a
 720+ 221A 1A                               ld      a, (de)
 721+ 221B CD 12 21                         call    Case_Sensitive
 722+ 221E B9                               cp      c
 723+ 221F 13                               inc     de
 724+ 2220 23                               inc     hl
 725+ 2221 28 0E                            jr      z, C_Compare_Equal
 726+ 2223 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 727+ 2225 21 01 00                                 ld      hl, 1               // a1 gt a2
 728+ 2228 18 03                                jr      C_Compare_Then      // Else
 729+ 222A              C_Compare_NotLessThan:
 730+ 222A 21 FF FF                                 ld      hl, -1              // a1 lt a2
 731+ 222D              C_Compare_Then:                                 // Endif
 732+ 222D              //                      pop     bc              // restore Instruction Pointer
 733+ 222D E5                                   push    hl
 734+ 222E D9                                   exx
 735+ 222F
 736+ 222F                                      next
 736+ 222F DD E9       >                jp      (ix)
 737+ 2231
 738+ 2231              C_Compare_Equal:
 739+ 2231 10 E2                        djnz    C_Compare_Loop
 740+ 2233 21 00 00                     ld      hl, 0               // a1 eq a2
 741+ 2236              //              pop     bc                  // restore Instruction Pointer
 742+ 2236 E5                           push    hl
 743+ 2237 D9                           exx
 744+ 2238
 745+ 2238                              next
 745+ 2238 DD E9       >                jp      (ix)
 746+ 223A
 747+ 223A              //  ______________________________________________________________________
 748+ 223A              //
 749+ 223A              // emitc        c --
 750+ 223A              // low level emit, calls ROM routine at #10 to send a character to
 751+ 223A              // the the current channel (see SELECT to change stream-channel)
 752+ 223A                              New_Def EMITC, "EMITC", is_code, is_normal
 752+ 223A             >
 752+ 223A             >Dict_Ptr        defl    $
 752+ 223A             >
 752+ 223A             >//              ______________________________________________________________________
 752+ 223A             >//              Heap part
 752+ 223A             >
 752+ 223A             >
 752+ 223A             >                org     (Heap_Ptr & $1FFF) + $E000
 752+ E139             >
 752+ E139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ E139             >Latest_Definition defl  Heap_Ptr
 752+ E139             >
 752+ E139             >                // dummy db directives used to calculate length of namec
 752+ E139 45 4D 49 54 >                db      "EMITC"
 752+ E13D 43          >
 752+ E13E             >len_NFA         defl    $ - temp_NFA
 752+ E13E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ E139             >
 752+ E139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ E13A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 752+ E13E 43          >
 752+ E13F             >                org     $-1                 // alter last byte of Name just above to set
 752+ E13E C3          >                db      {b $} | END_BIT     // msb as name end
 752+ E13F             >
 752+ E13F 2B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 752+ E141             >Prev_Ptr        defl    Heap_Ptr
 752+ E141             >
 752+ E141             >mirror_Ptr      defl    $
 752+ E141             >
 752+ E141 3C 22       >                dw      Dict_Ptr + 2        // xt
 752+ E143             >Heap_Ptr        defl    $ - $E000           // save current HP
 752+ E143             >
 752+ E143             >Current_HP      defl  $ - $E000             // used to set HP once!
 752+ E143             >
 752+ E143             >//              ______________________________________________________________________
 752+ E143             >//              Dictionary part
 752+ E143             >
 752+ E143             >                org     Dict_Ptr
 752+ 223A             >
 752+ 223A 41 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 752+ 223C             >
 752+ 223C             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 223C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 752+ 223C ~           >
 752+ 223C ~           >
 752+ 223C             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 223C             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 223C             >
 752+ 223C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 223C E1                           pop     hl
 754+ 223D 7D                           ld      a, l
 755+ 223E              Emitc_Ptr:
 756+ 223E C5                           push    bc
 757+ 223F D5                           push    de
 758+ 2240 DD E5                        push    ix
 759+ 2242 F3                           di
 760+ 2243 D7                           rst     $10
 761+ 2244 FB                           ei
 762+ 2245 DD E1                        pop     ix
 763+ 2247 D1                           pop     de
 764+ 2248 C1                           pop     bc
 765+ 2249              //              ld      a, -1            // max possible
 766+ 2249              //              ld      (SCR_CT), a
 767+ 2249                              next
 767+ 2249 DD E9       >                jp      (ix)
 768+ 224B
 769+ 224B              //  ______________________________________________________________________
 770+ 224B              //
 771+ 224B              // cr           --
 772+ 224B              // send a CR via EMITC
 773+ 224B                              Colon_Def CR, "CR", is_normal
 773+ 224B             >                New_Def  CR, "CR", Enter_Ptr, is_normal ; ok
 773+ 224B             >
 773+ 224B             >Dict_Ptr        defl    $
 773+ 224B             >
 773+ 224B             >//              ______________________________________________________________________
 773+ 224B             >//              Heap part
 773+ 224B             >
 773+ 224B             >
 773+ 224B             >                org     (Heap_Ptr & $1FFF) + $E000
 773+ E143             >
 773+ E143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ E143             >Latest_Definition defl  Heap_Ptr
 773+ E143             >
 773+ E143             >                // dummy db directives used to calculate length of namec
 773+ E143 43 52       >                db      "CR"
 773+ E145             >len_NFA         defl    $ - temp_NFA
 773+ E145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ E143             >
 773+ E143 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ E144 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 773+ E146             >                org     $-1                 // alter last byte of Name just above to set
 773+ E145 D2          >                db      {b $} | END_BIT     // msb as name end
 773+ E146             >
 773+ E146 39 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 773+ E148             >Prev_Ptr        defl    Heap_Ptr
 773+ E148             >
 773+ E148             >mirror_Ptr      defl    $
 773+ E148             >
 773+ E148 4D 22       >                dw      Dict_Ptr + 2        // xt
 773+ E14A             >Heap_Ptr        defl    $ - $E000           // save current HP
 773+ E14A             >
 773+ E14A             >Current_HP      defl  $ - $E000             // used to set HP once!
 773+ E14A             >
 773+ E14A             >//              ______________________________________________________________________
 773+ E14A             >//              Dictionary part
 773+ E14A             >
 773+ E14A             >                org     Dict_Ptr
 773+ 224B             >
 773+ 224B 48 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 773+ 224D             >
 773+ 224D             >CR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 224D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 773+ 2250             >
 773+ 2250             >
 773+ 2250             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 2250             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 2250             >
 773+ 2250             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 2250 3D 20 1A 00                  dw      LIT, 26, EMITC
 774+ 2254 3C 22
 775+ 2256 4B 27 3C 22                  dw      ZERO, EMITC
 776+ 225A 3D 20 0D 00                  dw      LIT, 13, EMITC
 776+ 225E 3C 22
 777+ 2260 0C 25                        dw      EXIT
 778+ 2262
 779+ 2262              Emitc_Vec:
 780+ 2262 9B 22                        dw      C_Emit_Printable  // comma
 781+ 2264 A2 22                        dw      C_Emit_Bel        // bel
 782+ 2266 9B 22                        dw      C_Emit_Printable  // bs
 783+ 2268 BC 22                        dw      C_Emit_Tab        // tab
 784+ 226A 9B 22                        dw      C_Emit_Printable  // cr
 785+ 226C C0 22                        dw      C_Emit_NL         // lf (unix newline)
 786+ 226E 9B 22                        dw      C_Emit_Printable  // blank
 787+ 2270 9B 22                        dw      C_Emit_Printable  // blank
 788+ 2272
 789+ 2272              Emit_Selector_Start:
 790+ 2272 06                           db      $06                 // comma
 791+ 2273 07                           db      $07                 // bel
 792+ 2274 08                           db      $08                 // bs
 793+ 2275 09                           db      $09                 // tab
 794+ 2276 0D                           db      $0D                 // cr
 795+ 2277 0A                           db      $0A                 // lf (unix newline)
 796+ 2278 20                           db      $20
 797+ 2279              Emit_Selector_End:
 798+ 2279 20                           db      $20
 799+ 227A
 800+ 227A              //  ______________________________________________________________________
 801+ 227A              //
 802+ 227A              // (?emit)      c1 -- c2 | c1
 803+ 227A              // decode a character to be sent via EMIT
 804+ 227A              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 805+ 227A              // the routine should resolve anything and convert the character anyway.
 806+ 227A                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 806+ 227A             >
 806+ 227A             >Dict_Ptr        defl    $
 806+ 227A             >
 806+ 227A             >//              ______________________________________________________________________
 806+ 227A             >//              Heap part
 806+ 227A             >
 806+ 227A             >
 806+ 227A             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ E14A             >
 806+ E14A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ E14A             >Latest_Definition defl  Heap_Ptr
 806+ E14A             >
 806+ E14A             >                // dummy db directives used to calculate length of namec
 806+ E14A 28 3F 45 4D >                db      "(?EMIT)"
 806+ E14E 49 54 29    >
 806+ E151             >len_NFA         defl    $ - temp_NFA
 806+ E151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ E14A             >
 806+ E14A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ E14B 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 806+ E14F 49 54 29    >
 806+ E152             >                org     $-1                 // alter last byte of Name just above to set
 806+ E151 A9          >                db      {b $} | END_BIT     // msb as name end
 806+ E152             >
 806+ E152 43 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ E154             >Prev_Ptr        defl    Heap_Ptr
 806+ E154             >
 806+ E154             >mirror_Ptr      defl    $
 806+ E154             >
 806+ E154 7C 22       >                dw      Dict_Ptr + 2        // xt
 806+ E156             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ E156             >
 806+ E156             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ E156             >
 806+ E156             >//              ______________________________________________________________________
 806+ E156             >//              Dictionary part
 806+ E156             >
 806+ E156             >                org     Dict_Ptr
 806+ 227A             >
 806+ 227A 54 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 227C             >
 806+ 227C             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 227C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 806+ 227C ~           >
 806+ 227C ~           >
 806+ 227C             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 227C             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 227C             >
 806+ 227C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 227C D9                           exx
 808+ 227D D1                           pop     de
 809+ 227E 7B                           ld      a, e                //  de has c1
 810+ 227F E6 7F                        and     $7F                 // 7-bit ascii only
 811+ 2281                              // push    bc                  // save Instruction Pointer
 812+ 2281 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 813+ 2284 21 79 22                     ld      hl, Emit_Selector_End
 814+ 2287 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 815+ 2289 20 0A                        jr      nz, C_Emit_Not_Found
 816+ 228B                                  // Found then decode it
 817+ 228B 21 62 22                         ld      hl, Emitc_Vec
 818+ 228E 09                               add     hl, bc
 819+ 228F 09                               add     hl, bc
 820+ 2290 5E                               ld      e, (hl)
 821+ 2291 23                               inc     hl
 822+ 2292 56                               ld      d, (hl)
 823+ 2293 EB                               ex      de, hl
 824+ 2294                                  // pop     bc                  // restore Instruction Pointer
 825+ 2294 E9                               jp      (hl)                // one of the following labels
 826+ 2295              C_Emit_Not_Found:
 827+ 2295                              // pop     bc                  // restore Instruction Pointer
 828+ 2295 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 829+ 2297 30 02                        jr      nc, C_Emit_Printable
 830+ 2299 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 831+ 229B              C_Emit_Printable:
 832+ 229B 6F                           ld      l, a
 833+ 229C 26 00                        ld      h, 0
 834+ 229E E5                           push    hl
 835+ 229F D9                           exx
 836+ 22A0                              next
 836+ 22A0 DD E9       >                jp      (ix)
 837+ 22A2
 838+ 22A2              C_Emit_Bel:
 839+ 22A2 D9                            exx
 840+ 22A3 C5                           push    bc                  // save Instruction Pointer
 841+ 22A4 D5                           push    de
 842+ 22A5 11 00 01                     ld      de, $0100
 843+ 22A8 21 00 02                     ld      hl, $0200
 844+ 22AB DD E5                        push    ix                  // save Next Pointer
 845+ 22AD                              // call    $03B6               // bleep Standard-ROM routine
 846+ 22AD F3                           di
 847+ 22AE DF                           rst     $18
 848+ 22AF B6 03                        defw    $03B6
 849+ 22B1 FB                           ei
 850+ 22B2 DD E1                        pop     ix                  // restore Next Pointer
 851+ 22B4 D1                           pop     de
 852+ 22B5 C1                           pop     bc                  // restore Instruction Pointer
 853+ 22B6 21 00 00                     ld      hl, NUL_CHAR
 854+ 22B9 E5                           push    hl
 855+ 22BA                              next
 855+ 22BA DD E9       >                jp      (ix)
 856+ 22BC
 857+ 22BC 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 858+ 22BE 18 DB                        jr      C_Emit_Printable
 859+ 22C0                          //  push    hl
 860+ 22C0                          //  exx
 861+ 22C0                          //  next
 862+ 22C0
 863+ 22C0 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 864+ 22C2 18 D7                        jr      C_Emit_Printable
 865+ 22C4                          //  push    hl
 866+ 22C4                          //  exx
 867+ 22C4                          //  next
 868+ 22C4
 869+ 22C4              //  ______________________________________________________________________
 870+ 22C4
 871+ 22C4              Key_Table:
 872+ 22C4 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 873+ 22C5 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 874+ 22C6 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 875+ 22C7 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 876+ 22C8 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 877+ 22C9 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 878+ 22CA C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 879+ 22CB AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 880+ 22CC C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 881+ 22CD C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 882+ 22CE C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 883+ 22CF              Key_MapTo:
 884+ 22CF 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 885+ 22D0 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 886+ 22D1 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 887+ 22D2 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 888+ 22D3 5D                           db      $5D                 //  6: SYMBOL+U : ]
 889+ 22D4 5B                           db      $5B                 //  5: SYMBOL+Y : [
 890+ 22D5 7D                           db      $7D                 //  4: SYMBOL+G : }
 891+ 22D6 7B                           db      $7B                 //  3: SYMBOL+F : {
 892+ 22D7 5C                           db      $5C                 //  2: SYMBOl+D : //
 893+ 22D8 7C                           db      $7C                 //  1: SYMBOL+S : |
 894+ 22D9 7E                           db      $7E                 //  0: SYMBOL+A : ~
 895+ 22DA
 896+ 22DA              //  ______________________________________________________________________
 897+ 22DA              //
 898+ 22DA              // curs         -- c
 899+ 22DA              // wait for a keypress
 900+ 22DA              // This definition need Standard ROM Interrupt to be served
 901+ 22DA
 902+ 22DA                              New_Def CUR, "CURS", is_code, is_normal
 902+ 22DA             >
 902+ 22DA             >Dict_Ptr        defl    $
 902+ 22DA             >
 902+ 22DA             >//              ______________________________________________________________________
 902+ 22DA             >//              Heap part
 902+ 22DA             >
 902+ 22DA             >
 902+ 22DA             >                org     (Heap_Ptr & $1FFF) + $E000
 902+ E156             >
 902+ E156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ E156             >Latest_Definition defl  Heap_Ptr
 902+ E156             >
 902+ E156             >                // dummy db directives used to calculate length of namec
 902+ E156 43 55 52 53 >                db      "CURS"
 902+ E15A             >len_NFA         defl    $ - temp_NFA
 902+ E15A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ E156             >
 902+ E156 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ E157 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 902+ E15B             >                org     $-1                 // alter last byte of Name just above to set
 902+ E15A D3          >                db      {b $} | END_BIT     // msb as name end
 902+ E15B             >
 902+ E15B 4A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 902+ E15D             >Prev_Ptr        defl    Heap_Ptr
 902+ E15D             >
 902+ E15D             >mirror_Ptr      defl    $
 902+ E15D             >
 902+ E15D DC 22       >                dw      Dict_Ptr + 2        // xt
 902+ E15F             >Heap_Ptr        defl    $ - $E000           // save current HP
 902+ E15F             >
 902+ E15F             >Current_HP      defl  $ - $E000             // used to set HP once!
 902+ E15F             >
 902+ E15F             >//              ______________________________________________________________________
 902+ E15F             >//              Dictionary part
 902+ E15F             >
 902+ E15F             >                org     Dict_Ptr
 902+ 22DA             >
 902+ 22DA 5D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 902+ 22DC             >
 902+ 22DC             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 22DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 902+ 22DC ~           >
 902+ 22DC ~           >
 902+ 22DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 22DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 22DC             >
 902+ 22DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 22DC
 904+ 22DC C5                           push    bc                  // save Instruction Pointer
 905+ 22DD D5                           push    de                  // save Return Stack Pointer
 906+ 22DE DD E5                        push    ix
 907+ 22E0 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 908+ 22E4                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 909+ 22E4 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 910+ 22E7 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 911+ 22EB
 912+ 22EB              Cur_Wait:
 913+ 22EB 76                               halt
 914+ 22EC 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 915+ 22EE                              //  call    $1601               // SELECT Standard-ROM Routine
 916+ 22EE DF                               rst     $18
 917+ 22EF 01 16                            dw      $1601
 918+ 22F1
 919+ 22F1                                  // software-flash: flips face every 320 ms
 920+ 22F1 3E 20                            ld      a, $20              // Timing based
 921+ 22F3 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 922+ 22F6
 923+ 22F6 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 924+ 22F9 20 0C                            jr      nz, Cur_Cursor
 925+ 22FB 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 926+ 22FE FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 927+ 2302 28 03                                jr      z, Cur_Cursor
 928+ 2304 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 929+ 2307              Cur_Cursor:
 930+ 2307 D7                               rst     $10
 931+ 2308 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 932+ 230A D7                               rst     $10
 933+ 230B FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 934+ 230F 28 DA                        jr      z, Cur_Wait
 935+ 2311
 936+ 2311 76                           halt    // this is to sync flashing cursor.
 937+ 2312
 938+ 2312 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 939+ 2314 D7                           rst     $10
 940+ 2315 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 941+ 2317 D7                           rst     $10
 942+ 2318
 943+ 2318 ED 7B 2C 20                  ld      sp, (SP_Saved)
 944+ 231C
 945+ 231C DD E1                        pop     ix
 946+ 231E D1                           pop     de                  // Restore Return Stack Pointer
 947+ 231F C1                           pop     bc                  // Restore Instruction Pointer
 948+ 2320                              next
 948+ 2320 DD E9       >                jp      (ix)
 949+ 2322
 950+ 2322
 951+ 2322              //  ______________________________________________________________________
 952+ 2322              //
 953+ 2322              // key          -- c
 954+ 2322              // This definition need Standard ROM Interrupt to be served
 955+ 2322
 956+ 2322                              New_Def KEY, "KEY", is_code, is_normal
 956+ 2322             >
 956+ 2322             >Dict_Ptr        defl    $
 956+ 2322             >
 956+ 2322             >//              ______________________________________________________________________
 956+ 2322             >//              Heap part
 956+ 2322             >
 956+ 2322             >
 956+ 2322             >                org     (Heap_Ptr & $1FFF) + $E000
 956+ E15F             >
 956+ E15F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ E15F             >Latest_Definition defl  Heap_Ptr
 956+ E15F             >
 956+ E15F             >                // dummy db directives used to calculate length of namec
 956+ E15F 4B 45 59    >                db      "KEY"
 956+ E162             >len_NFA         defl    $ - temp_NFA
 956+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ E15F             >
 956+ E15F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ E160 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 956+ E163             >                org     $-1                 // alter last byte of Name just above to set
 956+ E162 D9          >                db      {b $} | END_BIT     // msb as name end
 956+ E163             >
 956+ E163 56 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 956+ E165             >Prev_Ptr        defl    Heap_Ptr
 956+ E165             >
 956+ E165             >mirror_Ptr      defl    $
 956+ E165             >
 956+ E165 24 23       >                dw      Dict_Ptr + 2        // xt
 956+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 956+ E167             >
 956+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 956+ E167             >
 956+ E167             >//              ______________________________________________________________________
 956+ E167             >//              Dictionary part
 956+ E167             >
 956+ E167             >                org     Dict_Ptr
 956+ 2322             >
 956+ 2322 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 956+ 2324             >
 956+ 2324             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 2324 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 956+ 2324 ~           >
 956+ 2324 ~           >
 956+ 2324             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 2324             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 2324             >
 956+ 2324             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 2324
 958+ 2324 C5                           push    bc                  // Save Instruction Pointer
 959+ 2325
 960+ 2325              Key_Wait:
 961+ 2325 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 962+ 2329 28 FA                        jr      z, Key_Wait
 963+ 232B
 964+ 232B 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 965+ 232E
 966+ 232E                              // decode character from above table
 967+ 232E 21 C4 22                     ld      hl, Key_Table
 968+ 2331 01 0B 00                     ld      bc, $000B
 969+ 2334 ED B1                        cpir
 970+ 2336 20 05                        jr      nz, Key_DontMap
 971+ 2338 21 CF 22                         ld      hl, Key_MapTo
 972+ 233B 09                               add     hl, bc
 973+ 233C 7E                               ld      a, (hl)
 974+ 233D FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 975+ 233F 20 09                        jr      nz, Key_NoCapsLock
 976+ 2341 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 977+ 2344 7E                               ld      a, (hl)
 978+ 2345 EE 08                            xor     $08
 979+ 2347 77                               ld      (hl), a
 980+ 2348 3E 00                            ld      a, NUL_CHAR
 981+ 234A 6F           Key_NoCapsLock: ld      l, a
 982+ 234B 26 00                        ld      h, 0                // Prepare TOS
 983+ 234D
 984+ 234D FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 985+ 2351
 986+ 2351 C1                           pop     bc                  // Restore Instruction Pointer
 987+ 2352
 988+ 2352                              psh1
 988+ 2352 E5          >                push    hl
 988+ 2353 DD E9       >                jp      (ix)
 989+ 2355
 990+ 2355
 991+ 2355              //  ______________________________________________________________________
 992+ 2355              //
 993+ 2355              // click        --
 994+ 2355              // This definition need Standard ROM Interrupt to be served
 995+ 2355              //
 996+ 2355              //              New_Def CLICK, "CLICK", is_code, is_normal
 997+ 2355              //
 998+ 2355              //                push    bc
 999+ 2355              //              ld      a, ($5C48)          // BORDCR system variable
1000+ 2355              //              rra
1001+ 2355              //              rra
1002+ 2355              //              rra
1003+ 2355              //              or      $18                 // quick'n'dirty click
1004+ 2355              //              out     ($fe), a
1005+ 2355              //              ld      b, 0
1006+ 2355              //              djnz    $                   // wait loop
1007+ 2355              //              xor     $18
1008+ 2355              //              out     ($fe), a
1009+ 2355              //                pop     bc
1010+ 2355
1011+ 2355              //              next
1012+ 2355
1013+ 2355              //  ______________________________________________________________________
1014+ 2355              //
1015+ 2355              // key?         -- f
1016+ 2355              // key available
1017+ 2355              //
1018+ 2355              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1019+ 2355              //
1020+ 2355              //              ld      hl, 0000
1021+ 2355              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1022+ 2355              //              jr      z, Key_Q
1023+ 2355              //                  dec     hl
1024+ 2355              // Key_Q:
1025+ 2355              //                psh1
1026+ 2355              //              next
1027+ 2355
1028+ 2355              //  ______________________________________________________________________
1029+ 2355              //
1030+ 2355              // ?terminal    -- FALSE | TRUE
1031+ 2355              // test for BREAK keypress
1032+ 2355                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1032+ 2355             >
1032+ 2355             >Dict_Ptr        defl    $
1032+ 2355             >
1032+ 2355             >//              ______________________________________________________________________
1032+ 2355             >//              Heap part
1032+ 2355             >
1032+ 2355             >
1032+ 2355             >                org     (Heap_Ptr & $1FFF) + $E000
1032+ E167             >
1032+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ E167             >Latest_Definition defl  Heap_Ptr
1032+ E167             >
1032+ E167             >                // dummy db directives used to calculate length of namec
1032+ E167 3F 54 45 52 >                db      "?TERMINAL"
1032+ E16B 4D 49 4E 41 >
1032+ E16F 4C          >
1032+ E170             >len_NFA         defl    $ - temp_NFA
1032+ E170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ E167             >
1032+ E167 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ E168 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1032+ E16C 4D 49 4E 41 >
1032+ E170 4C          >
1032+ E171             >                org     $-1                 // alter last byte of Name just above to set
1032+ E170 CC          >                db      {b $} | END_BIT     // msb as name end
1032+ E171             >
1032+ E171 5F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1032+ E173             >Prev_Ptr        defl    Heap_Ptr
1032+ E173             >
1032+ E173             >mirror_Ptr      defl    $
1032+ E173             >
1032+ E173 57 23       >                dw      Dict_Ptr + 2        // xt
1032+ E175             >Heap_Ptr        defl    $ - $E000           // save current HP
1032+ E175             >
1032+ E175             >Current_HP      defl  $ - $E000             // used to set HP once!
1032+ E175             >
1032+ E175             >//              ______________________________________________________________________
1032+ E175             >//              Dictionary part
1032+ E175             >
1032+ E175             >                org     Dict_Ptr
1032+ 2355             >
1032+ 2355 73 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1032+ 2357             >
1032+ 2357             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 2357 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1032+ 2357 ~           >
1032+ 2357 ~           >
1032+ 2357             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 2357             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 2357             >
1032+ 2357             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 2357 D9                           exx
1034+ 2358 01 FE 7F                     ld      bc, $7ffe
1035+ 235B ED 50                        in      d, (c)
1036+ 235D 41                           ld      b, c
1037+ 235E ED 78                        in      a, (c)
1038+ 2360 B2                           or       d
1039+ 2361 1F                           rra
1040+ 2362 3F                           ccf
1041+ 2363 ED 62                        sbc     hl, hl
1042+ 2365 E5                           push    hl
1043+ 2366 D9                           exx
1044+ 2367                              next
1044+ 2367 DD E9       >                jp      (ix)
1045+ 2369
1046+ 2369
1047+ 2369              //  ______________________________________________________________________
1048+ 2369              //
1049+ 2369              // inkey        -- c | 0
1050+ 2369              // call ROM inkey$ routine, returns c or "zero".
1051+ 2369              //
1052+ 2369              //              New_Def INKEY, "INKEY", is_code, is_normal
1053+ 2369              //              push    bc
1054+ 2369              //              push    de
1055+ 2369              //              ld      (SP_Saved), sp
1056+ 2369              //              ld      sp, Cold_origin - 5
1057+ 2369              //              ld      sp, TSTACK           // Carefully balanced from startup
1058+ 2369              //              push    ix
1059+ 2369              //              di
1060+ 2369              //              call    $15E6                   // instead of 15E9
1061+ 2369              //              ei
1062+ 2369              //              pop     ix
1063+ 2369              //              ld      sp, (SP_Saved)
1064+ 2369              //              ld      l, a
1065+ 2369              //              ld      h, 0
1066+ 2369              //              pop     de
1067+ 2369              //              pop     bc
1068+ 2369              //              psh1
1069+ 2369
1070+ 2369              //  ______________________________________________________________________
1071+ 2369              //
1072+ 2369              // select      n --
1073+ 2369              // selects the given channel number
1074+ 2369
1075+ 2369                              New_Def SELECT, "SELECT", is_code, is_normal
1075+ 2369             >
1075+ 2369             >Dict_Ptr        defl    $
1075+ 2369             >
1075+ 2369             >//              ______________________________________________________________________
1075+ 2369             >//              Heap part
1075+ 2369             >
1075+ 2369             >
1075+ 2369             >                org     (Heap_Ptr & $1FFF) + $E000
1075+ E175             >
1075+ E175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1075+ E175             >Latest_Definition defl  Heap_Ptr
1075+ E175             >
1075+ E175             >                // dummy db directives used to calculate length of namec
1075+ E175 53 45 4C 45 >                db      "SELECT"
1075+ E179 43 54       >
1075+ E17B             >len_NFA         defl    $ - temp_NFA
1075+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1075+ E175             >
1075+ E175 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1075+ E176 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1075+ E17A 43 54       >
1075+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1075+ E17B D4          >                db      {b $} | END_BIT     // msb as name end
1075+ E17C             >
1075+ E17C 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1075+ E17E             >Prev_Ptr        defl    Heap_Ptr
1075+ E17E             >
1075+ E17E             >mirror_Ptr      defl    $
1075+ E17E             >
1075+ E17E 6B 23       >                dw      Dict_Ptr + 2        // xt
1075+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1075+ E180             >
1075+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1075+ E180             >
1075+ E180             >//              ______________________________________________________________________
1075+ E180             >//              Dictionary part
1075+ E180             >
1075+ E180             >                org     Dict_Ptr
1075+ 2369             >
1075+ 2369 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1075+ 236B             >
1075+ 236B             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1075+ 236B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1075+ 236B ~           >
1075+ 236B ~           >
1075+ 236B             >                endif           ; ok        // for other definitions it "points" the correct handler
1075+ 236B             >                // Use of "; ok" to suppress "warning[fwdref]"
1075+ 236B             >
1075+ 236B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1076+ 236B E1                           pop     hl
1077+ 236C C5                           push    bc
1078+ 236D D5                           push    de
1079+ 236E 7D                           ld      a, l
1080+ 236F ED 73 2C 20                  ld      (SP_Saved), sp
1081+ 2373                          //  ld      sp, Cold_origin - 5
1082+ 2373 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1083+ 2376 DD E5                        push    ix
1084+ 2378                          //  call    $1601
1085+ 2378 F3                           di
1086+ 2379 DF                           rst     $18
1087+ 237A 01 16                        dw      $1601
1088+ 237C FB                           ei
1089+ 237D DD E1                        pop     ix
1090+ 237F ED 7B 2C 20                  ld      sp, (SP_Saved)
1091+ 2383 D1                           pop     de
1092+ 2384 C1                           pop     bc
1093+ 2385                              next
1093+ 2385 DD E9       >                jp      (ix)
1094+ 2387
1095+ 2387              //  ______________________________________________________________________
1096+ 2387              //
1097+ 2387              // ZX Spectrum Next - Low Level disk primitives.
1098+ 2387              // this include is "here" for backward compatibility
1099+ 2387
1100+ 2387                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++2387              //  ______________________________________________________________________
   2++2387              //
   3++2387              //  next-opt.asm
   4++2387              //
   5++2387              //  ZX Spectrum Next - peculiar definitions
   6++2387              //  ______________________________________________________________________
   7++2387
   8++2387              //  ______________________________________________________________________
   9++2387              //
  10++2387              // f_seek       d u -- f
  11++2387              // Seek to position d in file-handle u.
  12++2387              // Return a false-flag 0 on success, True flag on error
  13++2387                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++2387             >
  13++2387             >Dict_Ptr        defl    $
  13++2387             >
  13++2387             >//              ______________________________________________________________________
  13++2387             >//              Heap part
  13++2387             >
  13++2387             >
  13++2387             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E180             >
  13++E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E180             >Latest_Definition defl  Heap_Ptr
  13++E180             >
  13++E180             >                // dummy db directives used to calculate length of namec
  13++E180 46 5F 53 45 >                db      "F_SEEK"
  13++E184 45 4B       >
  13++E186             >len_NFA         defl    $ - temp_NFA
  13++E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E180             >
  13++E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E181 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E185 45 4B       >
  13++E187             >                org     $-1                 // alter last byte of Name just above to set
  13++E186 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E187             >
  13++E187 75 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E189             >Prev_Ptr        defl    Heap_Ptr
  13++E189             >
  13++E189             >mirror_Ptr      defl    $
  13++E189             >
  13++E189 89 23       >                dw      Dict_Ptr + 2        // xt
  13++E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18B             >
  13++E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18B             >
  13++E18B             >//              ______________________________________________________________________
  13++E18B             >//              Dictionary part
  13++E18B             >
  13++E18B             >                org     Dict_Ptr
  13++2387             >
  13++2387 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++2389             >
  13++2389             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++2389 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++2389 ~           >
  13++2389 ~           >
  13++2389             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++2389             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++2389             >
  13++2389             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++2389 D9                            exx
  15++238A E1                            pop     hl                  // file-handle
  16++238B 7D                            ld      a, l
  17++238C C1                            pop     bc                  // bc has high-word of d
  18++238D D1                            pop     de
  19++238E D9                           exx
  20++238F DD E5                        push    ix
  21++2391 D5                           push    de
  22++2392 C5                           push    bc                  // save Instruction Pointer
  23++2393 D9                            exx
  24++2394 21 00 00                      ld      hl, 0 // ix, 0
  25++2397 F3                            di
  26++2398 CF                            rst     $08
  27++2399 9F                            db      $9F
  28++239A              F_Seek_Exit:
  29++239A FB                           ei
  30++239B C1                           pop     bc                  // restore Instruction Pointer
  31++239C D1                           pop     de
  32++239D DD E1                        pop     ix
  33++239F ED 62                        sbc     hl, hl              // to get 0 or -1
  34++23A1                              psh1
  34++23A1 E5          >                push    hl
  34++23A2 DD E9       >                jp      (ix)
  35++23A4
  36++23A4              //  ______________________________________________________________________
  37++23A4              //
  38++23A4              // f_close      u -- f
  39++23A4              // Close file-handle u.
  40++23A4              // Return 0 on success, True flag on error
  41++23A4
  42++23A4                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++23A4             >
  42++23A4             >Dict_Ptr        defl    $
  42++23A4             >
  42++23A4             >//              ______________________________________________________________________
  42++23A4             >//              Heap part
  42++23A4             >
  42++23A4             >
  42++23A4             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18B             >
  42++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18B             >Latest_Definition defl  Heap_Ptr
  42++E18B             >
  42++E18B             >                // dummy db directives used to calculate length of namec
  42++E18B 46 5F 43 4C >                db      "F_CLOSE"
  42++E18F 4F 53 45    >
  42++E192             >len_NFA         defl    $ - temp_NFA
  42++E192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18B             >
  42++E18B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18C 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E190 4F 53 45    >
  42++E193             >                org     $-1                 // alter last byte of Name just above to set
  42++E192 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E193             >
  42++E193 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E195             >Prev_Ptr        defl    Heap_Ptr
  42++E195             >
  42++E195             >mirror_Ptr      defl    $
  42++E195             >
  42++E195 A6 23       >                dw      Dict_Ptr + 2        // xt
  42++E197             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E197             >
  42++E197             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E197             >
  42++E197             >//              ______________________________________________________________________
  42++E197             >//              Dictionary part
  42++E197             >
  42++E197             >                org     Dict_Ptr
  42++23A4             >
  42++23A4 95 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++23A6             >
  42++23A6             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++23A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++23A6 ~           >
  42++23A6 ~           >
  42++23A6             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++23A6             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++23A6             >
  42++23A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++23A6
  44++23A6 E1                           pop     hl
  45++23A7 7D                           ld      a, l                // file-handle
  46++23A8 DD E5                        push    ix
  47++23AA D5                           push    de
  48++23AB C5                           push    bc                  // Save Instruction pointer
  49++23AC F3                           di
  50++23AD CF                           rst     $08
  51++23AE 9B                           db      $9B
  52++23AF 18 E9                        jr      F_Seek_Exit
  53++23B1              //              ei
  54++23B1              //              pop     de
  55++23B1              //              pop     bc
  56++23B1              //              pop     ix
  57++23B1              //              sbc     hl, hl
  58++23B1              //              psh1
  59++23B1
  60++23B1              //  ______________________________________________________________________
  61++23B1              //
  62++23B1              // f_sync      u -- f
  63++23B1              // Close file-handle u.
  64++23B1              // Return 0 on success, True flag on error
  65++23B1
  66++23B1                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++23B1             >
  66++23B1             >Dict_Ptr        defl    $
  66++23B1             >
  66++23B1             >//              ______________________________________________________________________
  66++23B1             >//              Heap part
  66++23B1             >
  66++23B1             >
  66++23B1             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E197             >
  66++E197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E197             >Latest_Definition defl  Heap_Ptr
  66++E197             >
  66++E197             >                // dummy db directives used to calculate length of namec
  66++E197 46 5F 53 59 >                db      "F_SYNC"
  66++E19B 4E 43       >
  66++E19D             >len_NFA         defl    $ - temp_NFA
  66++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E197             >
  66++E197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E198 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19C 4E 43       >
  66++E19E             >                org     $-1                 // alter last byte of Name just above to set
  66++E19D C3          >                db      {b $} | END_BIT     // msb as name end
  66++E19E             >
  66++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A0             >Prev_Ptr        defl    Heap_Ptr
  66++E1A0             >
  66++E1A0             >mirror_Ptr      defl    $
  66++E1A0             >
  66++E1A0 B3 23       >                dw      Dict_Ptr + 2        // xt
  66++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A2             >
  66++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A2             >
  66++E1A2             >//              ______________________________________________________________________
  66++E1A2             >//              Dictionary part
  66++E1A2             >
  66++E1A2             >                org     Dict_Ptr
  66++23B1             >
  66++23B1 A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++23B3             >
  66++23B3             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++23B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++23B3 ~           >
  66++23B3 ~           >
  66++23B3             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++23B3             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++23B3             >
  66++23B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++23B3 E1                           pop     hl
  68++23B4 7D                           ld      a, l                // file-handle
  69++23B5 DD E5                        push    ix
  70++23B7 D5                           push    de
  71++23B8 C5                           push    bc
  72++23B9 F3                           di
  73++23BA CF                           rst     $08
  74++23BB 9C                           db      $9C
  75++23BC 18 DC                        jr      F_Seek_Exit
  76++23BE              //              ei
  77++23BE              //              pop     de
  78++23BE              //              pop     bc
  79++23BE              //              pop     ix
  80++23BE              //              sbc     hl, hl
  81++23BE              //              psh1
  82++23BE
  83++23BE              //  ______________________________________________________________________
  84++23BE              //
  85++23BE              // f_fgetpos    u -- d f
  86++23BE              // Seek to position d in file-handle u.
  87++23BE              // Return a false-flag 0 on success, True flag on error
  88++23BE                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++23BE             >
  88++23BE             >Dict_Ptr        defl    $
  88++23BE             >
  88++23BE             >//              ______________________________________________________________________
  88++23BE             >//              Heap part
  88++23BE             >
  88++23BE             >
  88++23BE             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A2             >
  88++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A2             >Latest_Definition defl  Heap_Ptr
  88++E1A2             >
  88++E1A2             >                // dummy db directives used to calculate length of namec
  88++E1A2 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A6 45 54 50 4F >
  88++E1AA 53          >
  88++E1AB             >len_NFA         defl    $ - temp_NFA
  88++E1AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A2             >
  88++E1A2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A3 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1A7 45 54 50 4F >
  88++E1AB 53          >
  88++E1AC             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AB D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AC             >
  88++E1AC 97 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1AE             >Prev_Ptr        defl    Heap_Ptr
  88++E1AE             >
  88++E1AE             >mirror_Ptr      defl    $
  88++E1AE             >
  88++E1AE C0 23       >                dw      Dict_Ptr + 2        // xt
  88++E1B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B0             >
  88++E1B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B0             >
  88++E1B0             >//              ______________________________________________________________________
  88++E1B0             >//              Dictionary part
  88++E1B0             >
  88++E1B0             >                org     Dict_Ptr
  88++23BE             >
  88++23BE AE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++23C0             >
  88++23C0             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++23C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++23C0 ~           >
  88++23C0 ~           >
  88++23C0             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++23C0             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++23C0             >
  88++23C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++23C0 E1                            pop     hl
  90++23C1 7D                            ld      a, l                // file-handle
  91++23C2 DD E5                         push    ix
  92++23C4 D5                            push    de
  93++23C5 C5                            push    bc
  94++23C6 F3                            di
  95++23C7 CF                            rst     $08
  96++23C8 A0                            db      $A0
  97++23C9 FB                            ei
  98++23CA D9                           exx
  99++23CB C1                           pop     bc                  // IP
 100++23CC D1                           pop     de                  // Return Stack Pointer
 101++23CD DD E1                        pop     ix
 102++23CF D9                            exx
 103++23D0 D5                            push    de
 104++23D1 C5                            push    bc
 105++23D2 ED 62                         sbc     hl, hl
 106++23D4 E5                            push    hl
 107++23D5 D9                           exx
 108++23D6                              next
 108++23D6 DD E9       >                jp      (ix)
 109++23D8
 110++23D8              //  ______________________________________________________________________
 111++23D8              //
 112++23D8              // f_read       a n u -- n f
 113++23D8              // Read b bytes from file-handle u to address a
 114++23D8              // Return the actual number n of bytes read
 115++23D8              // Return 0 on success, True flag on error
 116++23D8                              New_Def F_READ, "F_READ", is_code, is_normal
 116++23D8             >
 116++23D8             >Dict_Ptr        defl    $
 116++23D8             >
 116++23D8             >//              ______________________________________________________________________
 116++23D8             >//              Heap part
 116++23D8             >
 116++23D8             >
 116++23D8             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B0             >
 116++E1B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B0             >Latest_Definition defl  Heap_Ptr
 116++E1B0             >
 116++E1B0             >                // dummy db directives used to calculate length of namec
 116++E1B0 46 5F 52 45 >                db      "F_READ"
 116++E1B4 41 44       >
 116++E1B6             >len_NFA         defl    $ - temp_NFA
 116++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B0             >
 116++E1B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B1 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B5 41 44       >
 116++E1B7             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B6 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1B7             >
 116++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1B9             >Prev_Ptr        defl    Heap_Ptr
 116++E1B9             >
 116++E1B9             >mirror_Ptr      defl    $
 116++E1B9             >
 116++E1B9 DA 23       >                dw      Dict_Ptr + 2        // xt
 116++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BB             >
 116++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BB             >
 116++E1BB             >//              ______________________________________________________________________
 116++E1BB             >//              Dictionary part
 116++E1BB             >
 116++E1BB             >                org     Dict_Ptr
 116++23D8             >
 116++23D8 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++23DA             >
 116++23DA             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++23DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++23DA ~           >
 116++23DA ~           >
 116++23DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++23DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++23DA             >
 116++23DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++23DA D9                            exx
 118++23DB E1                            pop     hl
 119++23DC 7D                            ld      a, l                // file-handle
 120++23DD C1                            pop     bc                  // bc has bytes to read
 121++23DE DD E3                         ex      (sp), ix            // ix has address
 122++23E0 DD E5                         push    ix
 123++23E2 E1                            pop     hl
 124++23E3 D9                           exx
 125++23E4 D5                           push    de                  // Save Return Stack pointer
 126++23E5 C5                           push    bc                  // Save Instruction pointer
 127++23E6 D9                            exx
 128++23E7 F3                            di
 129++23E8 CF                            rst     $08
 130++23E9 9D                            db      $9D
 131++23EA              F_Read_Exit:
 132++23EA FB                           ei
 133++23EB D9                           exx
 134++23EC C1                           pop     bc                  // Restore Instruction pointer
 135++23ED D1                           pop     de                  // Restore Return Stack pointer
 136++23EE DD E1                        pop     ix                  // Restore ix
 137++23F0 D9                            exx
 138++23F1 D5                            push    de                  // bytes involved in i/o operation
 139++23F2 ED 62                         sbc     hl, hl
 140++23F4 E5                            push    hl
 141++23F5 D9                           exx
 142++23F6                              next
 142++23F6 DD E9       >                jp      (ix)
 143++23F8
 144++23F8              //  ______________________________________________________________________
 145++23F8              //
 146++23F8              // f_write      a n u -- n f
 147++23F8              // Write bytes currently stored at address a to file-handle u.
 148++23F8              // Return the actual n bytes written and 0 on success, True flag on error.
 149++23F8                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 149++23F8             >
 149++23F8             >Dict_Ptr        defl    $
 149++23F8             >
 149++23F8             >//              ______________________________________________________________________
 149++23F8             >//              Heap part
 149++23F8             >
 149++23F8             >
 149++23F8             >                org     (Heap_Ptr & $1FFF) + $E000
 149++E1BB             >
 149++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149++E1BB             >Latest_Definition defl  Heap_Ptr
 149++E1BB             >
 149++E1BB             >                // dummy db directives used to calculate length of namec
 149++E1BB 46 5F 57 52 >                db      "F_WRITE"
 149++E1BF 49 54 45    >
 149++E1C2             >len_NFA         defl    $ - temp_NFA
 149++E1C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149++E1BB             >
 149++E1BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149++E1BC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 149++E1C0 49 54 45    >
 149++E1C3             >                org     $-1                 // alter last byte of Name just above to set
 149++E1C2 C5          >                db      {b $} | END_BIT     // msb as name end
 149++E1C3             >
 149++E1C3 B0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 149++E1C5             >Prev_Ptr        defl    Heap_Ptr
 149++E1C5             >
 149++E1C5             >mirror_Ptr      defl    $
 149++E1C5             >
 149++E1C5 FA 23       >                dw      Dict_Ptr + 2        // xt
 149++E1C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 149++E1C7             >
 149++E1C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 149++E1C7             >
 149++E1C7             >//              ______________________________________________________________________
 149++E1C7             >//              Dictionary part
 149++E1C7             >
 149++E1C7             >                org     Dict_Ptr
 149++23F8             >
 149++23F8 C5 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 149++23FA             >
 149++23FA             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 149++23FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 149++23FA ~           >
 149++23FA ~           >
 149++23FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 149++23FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 149++23FA             >
 149++23FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150++23FA D9                            exx
 151++23FB E1                            pop     hl
 152++23FC 7D                            ld      a, l                // file-handle
 153++23FD C1                            pop     bc                  // bc has bytes to read
 154++23FE DD E3                         ex      (sp), ix            // ix has address
 155++2400 DD E5                         push    ix
 156++2402 E1                            pop     hl
 157++2403 D9                           exx
 158++2404 D5                           push    de                  // Save Return Stack pointer
 159++2405 C5                           push    bc                  // Save Instruction pointer
 160++2406 D9                            exx
 161++2407 F3                            di
 162++2408 CF                            rst     $08
 163++2409 9E                            db      $9E
 164++240A 18 DE                         jr F_Read_Exit
 165++240C              //                ei
 166++240C              //                exx
 167++240C              //                pop     de                  // Restore Return Stack pointer
 168++240C              //                pop     bc                  // Restore Instruction pointer
 169++240C              //                pop     ix                  // Restore ix
 170++240C              //                 exx
 171++240C              //                 push    de                  // bytes involved in i/o operation
 172++240C              //                 sbc     hl, hl
 173++240C              //                 push    hl
 174++240C              //                exx
 175++240C              //                next
 176++240C
 177++240C              //  ______________________________________________________________________
 178++240C              //
 179++240C              // f_open       a1 a2 b -- u f
 180++240C              // open a file
 181++240C              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 182++240C              // a2 is address to an 8-byte header data used in some cases.
 183++240C              // b is access mode-byte, that is a combination of:
 184++240C              // any/all of:
 185++240C              //   esx_mode_read          $01 request read access
 186++240C              //   esx_mode_write         $02 request write access
 187++240C              //   esx_mode_use_header    $40 read/write +3DOS header
 188++240C              // plus one of:
 189++240C              //   esx_mode_open_exist    $00 only open existing file
 190++240C              //   esx_mode_open_creat    $08 open existing or create file
 191++240C              //   esx_mode_creat_noexist $04 create new file, error if exists
 192++240C              //   esx_mode_creat_trunc   $0c create new file, delete existing
 193++240C              // Return file-handle u and 0 on success, True flag on error
 194++240C                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 194++240C             >
 194++240C             >Dict_Ptr        defl    $
 194++240C             >
 194++240C             >//              ______________________________________________________________________
 194++240C             >//              Heap part
 194++240C             >
 194++240C             >
 194++240C             >                org     (Heap_Ptr & $1FFF) + $E000
 194++E1C7             >
 194++E1C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194++E1C7             >Latest_Definition defl  Heap_Ptr
 194++E1C7             >
 194++E1C7             >                // dummy db directives used to calculate length of namec
 194++E1C7 46 5F 4F 50 >                db      "F_OPEN"
 194++E1CB 45 4E       >
 194++E1CD             >len_NFA         defl    $ - temp_NFA
 194++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194++E1C7             >
 194++E1C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194++E1C8 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 194++E1CC 45 4E       >
 194++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 194++E1CD CE          >                db      {b $} | END_BIT     // msb as name end
 194++E1CE             >
 194++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194++E1D0             >Prev_Ptr        defl    Heap_Ptr
 194++E1D0             >
 194++E1D0             >mirror_Ptr      defl    $
 194++E1D0             >
 194++E1D0 0E 24       >                dw      Dict_Ptr + 2        // xt
 194++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 194++E1D2             >
 194++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 194++E1D2             >
 194++E1D2             >//              ______________________________________________________________________
 194++E1D2             >//              Dictionary part
 194++E1D2             >
 194++E1D2             >                org     Dict_Ptr
 194++240C             >
 194++240C D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 194++240E             >
 194++240E             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 194++240E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 194++240E ~           >
 194++240E ~           >
 194++240E             >                endif           ; ok        // for other definitions it "points" the correct handler
 194++240E             >                // Use of "; ok" to suppress "warning[fwdref]"
 194++240E             >
 194++240E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195++240E D9                            exx
 196++240F C1                            pop     bc                  // file-mode
 197++2410 41                            ld      b, c                // file-mode
 198++2411 D1                            pop     de                  // 8-bytes buffer if any
 199++2412 DD E3                         ex      (sp), ix            // filespec nul-terminated
 200++2414 DD E5                         push    ix
 201++2416 E1                            pop     hl
 202++2417 D9                           exx
 203++2418 D5                           push    de                  // Save Return Stack pointer
 204++2419 C5                           push    bc                  // Save Instruction pointer
 205++241A D9                            exx
 206++241B 3E 2A                         ld      a, "*"
 207++241D F3                            di
 208++241E CF                            rst     $08
 209++241F 9A                            db      $9A
 210++2420              F_Open_Exit:
 211++2420              //               ei                         // removed because is repeated in f_read_exit
 212++2420 5F                            ld      e, a                // return the handle-number
 213++2421 16 00                         ld      d, 0
 214++2423 18 C5                        jr F_Read_Exit
 215++2425
 216++2425              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 217++2425              //   \ FILENAME 1+ PAD 1 F_OPEN
 218++2425              //   \ DROP
 219++2425              //   \ F_CLOSE
 220++2425
 221++2425
 222++2425              //  ______________________________________________________________________
 223++2425              //
 224++2425              // f_opendir    a1 -- u f
 225++2425              // open a file
 226++2425                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 226++2425             >
 226++2425             >Dict_Ptr        defl    $
 226++2425             >
 226++2425             >//              ______________________________________________________________________
 226++2425             >//              Heap part
 226++2425             >
 226++2425             >
 226++2425             >                org     (Heap_Ptr & $1FFF) + $E000
 226++E1D2             >
 226++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226++E1D2             >Latest_Definition defl  Heap_Ptr
 226++E1D2             >
 226++E1D2             >                // dummy db directives used to calculate length of namec
 226++E1D2 46 5F 4F 50 >                db      "F_OPENDIR"
 226++E1D6 45 4E 44 49 >
 226++E1DA 52          >
 226++E1DB             >len_NFA         defl    $ - temp_NFA
 226++E1DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226++E1D2             >
 226++E1D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 226++E1D7 45 4E 44 49 >
 226++E1DB 52          >
 226++E1DC             >                org     $-1                 // alter last byte of Name just above to set
 226++E1DB D2          >                db      {b $} | END_BIT     // msb as name end
 226++E1DC             >
 226++E1DC C7 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 226++E1DE             >Prev_Ptr        defl    Heap_Ptr
 226++E1DE             >
 226++E1DE             >mirror_Ptr      defl    $
 226++E1DE             >
 226++E1DE 27 24       >                dw      Dict_Ptr + 2        // xt
 226++E1E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 226++E1E0             >
 226++E1E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 226++E1E0             >
 226++E1E0             >//              ______________________________________________________________________
 226++E1E0             >//              Dictionary part
 226++E1E0             >
 226++E1E0             >                org     Dict_Ptr
 226++2425             >
 226++2425 DE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 226++2427             >
 226++2427             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226++2427 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226++2427 ~           >
 226++2427 ~           >
 226++2427             >                endif           ; ok        // for other definitions it "points" the correct handler
 226++2427             >                // Use of "; ok" to suppress "warning[fwdref]"
 226++2427             >
 226++2427             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227++2427 DD E3                        ex      (sp), ix            // filespec nul-terminated
 228++2429 DD E5                        push    ix
 229++242B E1                           pop     hl
 230++242C D5                           push    de                  // Save Return Stack pointer
 231++242D C5                           push    bc                  // Save Instruction pointer
 232++242E 06 10                        ld      b, $10              // file-mode
 233++2430 3E 43                        ld      a, "C"
 234++2432 F3                           di
 235++2433 CF                           rst     $08
 236++2434 A3                           db      $A3
 237++2435 18 E9                        jr      F_Open_Exit
 238++2437
 239++2437
 240++2437              //  ______________________________________________________________________
 241++2437              //
 242++2437              // f_readdir    a1 a2 b -- u f
 243++2437              // open a file
 244++2437                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 244++2437             >
 244++2437             >Dict_Ptr        defl    $
 244++2437             >
 244++2437             >//              ______________________________________________________________________
 244++2437             >//              Heap part
 244++2437             >
 244++2437             >
 244++2437             >                org     (Heap_Ptr & $1FFF) + $E000
 244++E1E0             >
 244++E1E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 244++E1E0             >Latest_Definition defl  Heap_Ptr
 244++E1E0             >
 244++E1E0             >                // dummy db directives used to calculate length of namec
 244++E1E0 46 5F 52 45 >                db      "F_READDIR"
 244++E1E4 41 44 44 49 >
 244++E1E8 52          >
 244++E1E9             >len_NFA         defl    $ - temp_NFA
 244++E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 244++E1E0             >
 244++E1E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 244++E1E1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 244++E1E5 41 44 44 49 >
 244++E1E9 52          >
 244++E1EA             >                org     $-1                 // alter last byte of Name just above to set
 244++E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
 244++E1EA             >
 244++E1EA D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 244++E1EC             >Prev_Ptr        defl    Heap_Ptr
 244++E1EC             >
 244++E1EC             >mirror_Ptr      defl    $
 244++E1EC             >
 244++E1EC 39 24       >                dw      Dict_Ptr + 2        // xt
 244++E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 244++E1EE             >
 244++E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 244++E1EE             >
 244++E1EE             >//              ______________________________________________________________________
 244++E1EE             >//              Dictionary part
 244++E1EE             >
 244++E1EE             >                org     Dict_Ptr
 244++2437             >
 244++2437 EC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 244++2439             >
 244++2439             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 244++2439 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 244++2439 ~           >
 244++2439 ~           >
 244++2439             >                endif           ; ok        // for other definitions it "points" the correct handler
 244++2439             >                // Use of "; ok" to suppress "warning[fwdref]"
 244++2439             >
 244++2439             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 245++2439 D9                            exx
 246++243A E1                            pop     hl
 247++243B 7D                            ld      a, l
 248++243C D1                            pop     de
 249++243D DD E3                         ex      (sp), ix            // filespec nul-terminated
 250++243F DD E5                         push    ix
 251++2441 E1                            pop     hl
 252++2442 D9                           exx
 253++2443 D5                           push    de                  // Save Return Stack pointer
 254++2444 C5                           push    bc                  // Save Instruction pointer
 255++2445 D9                            exx
 256++2446 F3                            di
 257++2447 CF                            rst     $08
 258++2448 A4                            db      $A4
 259++2449 18 D5                         jr      F_Open_Exit
 260++244B
 261++244B
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1101+ 244B
1102+ 244B
1103+ 244B              //  ______________________________________________________________________
1104+ 244B              //
1105+ 244B              // cmove    a1 a2 u --
1106+ 244B              // If u > 0, moves memory content starting at address a1 for n bytes long
1107+ 244B              // storing then starting at address addr2.
1108+ 244B              // The content of a1 is moved first. See CMOVE> also.
1109+ 244B                              New_Def CMOVE, "CMOVE", is_code, is_normal
1109+ 244B             >
1109+ 244B             >Dict_Ptr        defl    $
1109+ 244B             >
1109+ 244B             >//              ______________________________________________________________________
1109+ 244B             >//              Heap part
1109+ 244B             >
1109+ 244B             >
1109+ 244B             >                org     (Heap_Ptr & $1FFF) + $E000
1109+ E1EE             >
1109+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1109+ E1EE             >Latest_Definition defl  Heap_Ptr
1109+ E1EE             >
1109+ E1EE             >                // dummy db directives used to calculate length of namec
1109+ E1EE 43 4D 4F 56 >                db      "CMOVE"
1109+ E1F2 45          >
1109+ E1F3             >len_NFA         defl    $ - temp_NFA
1109+ E1F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1109+ E1EE             >
1109+ E1EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1109+ E1EF 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1109+ E1F3 45          >
1109+ E1F4             >                org     $-1                 // alter last byte of Name just above to set
1109+ E1F3 C5          >                db      {b $} | END_BIT     // msb as name end
1109+ E1F4             >
1109+ E1F4 E0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1109+ E1F6             >Prev_Ptr        defl    Heap_Ptr
1109+ E1F6             >
1109+ E1F6             >mirror_Ptr      defl    $
1109+ E1F6             >
1109+ E1F6 4D 24       >                dw      Dict_Ptr + 2        // xt
1109+ E1F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1109+ E1F8             >
1109+ E1F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1109+ E1F8             >
1109+ E1F8             >//              ______________________________________________________________________
1109+ E1F8             >//              Dictionary part
1109+ E1F8             >
1109+ E1F8             >                org     Dict_Ptr
1109+ 244B             >
1109+ 244B F6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1109+ 244D             >
1109+ 244D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1109+ 244D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1109+ 244D ~           >
1109+ 244D ~           >
1109+ 244D             >                endif           ; ok        // for other definitions it "points" the correct handler
1109+ 244D             >                // Use of "; ok" to suppress "warning[fwdref]"
1109+ 244D             >
1109+ 244D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1110+ 244D D9                           exx
1111+ 244E
1112+ 244E C1                           pop     bc                  // bc has counter
1113+ 244F D1                           pop     de                  // de now has dest
1114+ 2450 E1                           pop     hl                 // hl has source, save Instruction Pointer
1115+ 2451 78                           ld      a, b
1116+ 2452 B1                           or      c
1117+ 2453 28 02                        jr      z, Cmove_NoMove
1118+ 2455 ED B0                            ldir
1119+ 2457              Cmove_NoMove:
1120+ 2457 D9                           exx
1121+ 2458
1122+ 2458                              next
1122+ 2458 DD E9       >                jp      (ix)
1123+ 245A
1124+ 245A              //  ______________________________________________________________________
1125+ 245A              //
1126+ 245A              // cmove>    a1 a2 u --
1127+ 245A              // If u > 0, moves memory content starting at address a1 for n bytes long
1128+ 245A              // storing then starting at address addr2.
1129+ 245A              // The content of a1 is moved last. See cmove.
1130+ 245A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1130+ 245A             >
1130+ 245A             >Dict_Ptr        defl    $
1130+ 245A             >
1130+ 245A             >//              ______________________________________________________________________
1130+ 245A             >//              Heap part
1130+ 245A             >
1130+ 245A             >
1130+ 245A             >                org     (Heap_Ptr & $1FFF) + $E000
1130+ E1F8             >
1130+ E1F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ E1F8             >Latest_Definition defl  Heap_Ptr
1130+ E1F8             >
1130+ E1F8             >                // dummy db directives used to calculate length of namec
1130+ E1F8 43 4D 4F 56 >                db      "CMOVE>"
1130+ E1FC 45 3E       >
1130+ E1FE             >len_NFA         defl    $ - temp_NFA
1130+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ E1F8             >
1130+ E1F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ E1F9 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1130+ E1FD 45 3E       >
1130+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1130+ E1FE BE          >                db      {b $} | END_BIT     // msb as name end
1130+ E1FF             >
1130+ E1FF EE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1130+ E201             >Prev_Ptr        defl    Heap_Ptr
1130+ E201             >
1130+ E201             >mirror_Ptr      defl    $
1130+ E201             >
1130+ E201 5C 24       >                dw      Dict_Ptr + 2        // xt
1130+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1130+ E203             >
1130+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1130+ E203             >
1130+ E203             >//              ______________________________________________________________________
1130+ E203             >//              Dictionary part
1130+ E203             >
1130+ E203             >                org     Dict_Ptr
1130+ 245A             >
1130+ 245A 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1130+ 245C             >
1130+ 245C             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 245C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1130+ 245C ~           >
1130+ 245C ~           >
1130+ 245C             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 245C             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 245C             >
1130+ 245C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 245C D9                           exx
1132+ 245D
1133+ 245D C1                           pop     bc                  // bc has counter
1134+ 245E D1                           pop     de                  // de has dest
1135+ 245F E1                           pop     hl                  // hl has source, save Instruction Pointer
1136+ 2460 78                           ld      a, b
1137+ 2461 B1                           or      c
1138+ 2462 28 08                        jr      z, CmoveV_NoMove
1139+ 2464 EB                               ex      de, hl              // compute address to
1140+ 2465 09                               add     hl, bc              // operate backward
1141+ 2466 2B                               dec     hl
1142+ 2467 EB                               ex      de, hl
1143+ 2468 09                               add     hl, bc
1144+ 2469 2B                               dec     hl
1145+ 246A ED B8                            lddr                        // backward
1146+ 246C              CmoveV_NoMove:
1147+ 246C D9                           exx
1148+ 246D
1149+ 246D                              next
1149+ 246D DD E9       >                jp      (ix)
1150+ 246F
1151+ 246F              //  ______________________________________________________________________
1152+ 246F              //
1153+ 246F              // um*      u1 u2 -- ud
1154+ 246F              // Unsigned multiplication
1155+ 246F              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1156+ 246F              // On the stack a double number is treated as two single numbers
1157+ 246F              // where DE is on the top of the stack and HL is the second from top,
1158+ 246F              // Instead, in 2VARIABLE a double number is stored as EDLH.
1159+ 246F              // this definition could use "MUL" Z80N new op-code.
1160+ 246F                              New_Def UM_MUL, "UM*", is_code, is_normal
1160+ 246F             >
1160+ 246F             >Dict_Ptr        defl    $
1160+ 246F             >
1160+ 246F             >//              ______________________________________________________________________
1160+ 246F             >//              Heap part
1160+ 246F             >
1160+ 246F             >
1160+ 246F             >                org     (Heap_Ptr & $1FFF) + $E000
1160+ E203             >
1160+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1160+ E203             >Latest_Definition defl  Heap_Ptr
1160+ E203             >
1160+ E203             >                // dummy db directives used to calculate length of namec
1160+ E203 55 4D 2A    >                db      "UM*"
1160+ E206             >len_NFA         defl    $ - temp_NFA
1160+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1160+ E203             >
1160+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1160+ E204 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1160+ E207             >                org     $-1                 // alter last byte of Name just above to set
1160+ E206 AA          >                db      {b $} | END_BIT     // msb as name end
1160+ E207             >
1160+ E207 F8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1160+ E209             >Prev_Ptr        defl    Heap_Ptr
1160+ E209             >
1160+ E209             >mirror_Ptr      defl    $
1160+ E209             >
1160+ E209 71 24       >                dw      Dict_Ptr + 2        // xt
1160+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1160+ E20B             >
1160+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1160+ E20B             >
1160+ E20B             >//              ______________________________________________________________________
1160+ E20B             >//              Dictionary part
1160+ E20B             >
1160+ E20B             >                org     Dict_Ptr
1160+ 246F             >
1160+ 246F 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1160+ 2471             >
1160+ 2471             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1160+ 2471 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1160+ 2471 ~           >
1160+ 2471 ~           >
1160+ 2471             >                endif           ; ok        // for other definitions it "points" the correct handler
1160+ 2471             >                // Use of "; ok" to suppress "warning[fwdref]"
1160+ 2471             >
1160+ 2471             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1161+ 2471 D9                           exx
1162+ 2472 D1                           pop     de                    // de has u2 operand
1163+ 2473 E1                           pop     hl                    // hl has u1 operand
1164+ 2474 45                           ld      b, l
1165+ 2475 4B                           ld      c, e
1166+ 2476 5D                           ld      e, l
1167+ 2477 6A                           ld      l, d
1168+ 2478 E5                           push    hl
1169+ 2479 69                           ld      l, c
1170+ 247A ED 30                        mul
1171+ 247C EB                           ex      de, hl
1172+ 247D ED 30                        mul
1173+ 247F AF                           xor     a
1174+ 2480 19                           add     hl, de
1175+ 2481 8F                           adc     a
1176+ 2482 59                           ld      e, c
1177+ 2483 50                           ld      d, b
1178+ 2484 ED 30                        mul
1179+ 2486 47                           ld      b, a
1180+ 2487 4C                           ld      c, h
1181+ 2488 7A                           ld      a, d
1182+ 2489 85                           add     l
1183+ 248A 67                           ld      h, a
1184+ 248B 6B                           ld      l, e
1185+ 248C D1                           pop     de
1186+ 248D ED 30                        mul
1187+ 248F EB                           ex      de, hl
1188+ 2490 ED 4A                        adc     hl, bc
1189+ 2492 D5                           push    de
1190+ 2493 E5                           push    hl
1191+ 2494 D9                           exx
1192+ 2495                              next
1192+ 2495 DD E9       >                jp      (ix)
1193+ 2497
1194+ 2497              //  ______________________________________________________________________
1195+ 2497              //
1196+ 2497              // um/mod      ud u1 -- q r
1197+ 2497              // divides ud into u1 giving quotient q and remainder r
1198+ 2497              // algorithm takes 16 bit at a time starting from msb
1199+ 2497              // DE grows from lsb upward with quotient result
1200+ 2497              // HL keeps the remainder at each stage of division
1201+ 2497              // each loop 'lowers' the next binary digit to form the current dividend
1202+ 2497                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1202+ 2497             >
1202+ 2497             >Dict_Ptr        defl    $
1202+ 2497             >
1202+ 2497             >//              ______________________________________________________________________
1202+ 2497             >//              Heap part
1202+ 2497             >
1202+ 2497             >
1202+ 2497             >                org     (Heap_Ptr & $1FFF) + $E000
1202+ E20B             >
1202+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1202+ E20B             >Latest_Definition defl  Heap_Ptr
1202+ E20B             >
1202+ E20B             >                // dummy db directives used to calculate length of namec
1202+ E20B 55 4D 2F 4D >                db      "UM/MOD"
1202+ E20F 4F 44       >
1202+ E211             >len_NFA         defl    $ - temp_NFA
1202+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1202+ E20B             >
1202+ E20B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1202+ E20C 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1202+ E210 4F 44       >
1202+ E212             >                org     $-1                 // alter last byte of Name just above to set
1202+ E211 C4          >                db      {b $} | END_BIT     // msb as name end
1202+ E212             >
1202+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1202+ E214             >Prev_Ptr        defl    Heap_Ptr
1202+ E214             >
1202+ E214             >mirror_Ptr      defl    $
1202+ E214             >
1202+ E214 99 24       >                dw      Dict_Ptr + 2        // xt
1202+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1202+ E216             >
1202+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1202+ E216             >
1202+ E216             >//              ______________________________________________________________________
1202+ E216             >//              Dictionary part
1202+ E216             >
1202+ E216             >                org     Dict_Ptr
1202+ 2497             >
1202+ 2497 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1202+ 2499             >
1202+ 2499             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1202+ 2499 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1202+ 2499 ~           >
1202+ 2499 ~           >
1202+ 2499             >                endif           ; ok        // for other definitions it "points" the correct handler
1202+ 2499             >                // Use of "; ok" to suppress "warning[fwdref]"
1202+ 2499             >
1202+ 2499             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1203+ 2499 D9                           exx
1204+ 249A C1                           pop     bc                      // divisor
1205+ 249B
1206+ 249B E1                           pop     hl                      // < high part
1207+ 249C D1                           pop     de                      // < low part and
1208+ 249D
1209+ 249D 7D                           ld      a, l                    // check without changing arguments
1210+ 249E 91                           sub     c                       // if divisor is greater than high part
1211+ 249F 7C                           ld      a, h                    // so quotient will be in range
1212+ 24A0 98                           sbc     a, b
1213+ 24A1 30 20                        jr      nc, Um_DivMod_OutOfRange
1214+ 24A3 3E 10                            ld      a, 16
1215+ 24A5              Um_DivMod_Loop:
1216+ 24A5 CB 23                                sla     e
1217+ 24A7 CB 12                                rl      d
1218+ 24A9 ED 6A                                adc     hl, hl
1219+ 24AB 30 05                                jr      nc, Um_DivMod_Carry
1220+ 24AD A7                                       and     a
1221+ 24AE ED 42                                    sbc     hl, bc
1222+ 24B0 18 07                                jr      Um_DivMod_Endif    // else
1223+ 24B2              Um_DivMod_Carry:
1224+ 24B2 A7                                       and     a
1225+ 24B3 ED 42                                    sbc     hl, bc
1226+ 24B5 30 02                                    jr      nc, Um_DivMod_Endif
1227+ 24B7 09                                           add     hl, bc
1228+ 24B8 1B                                           dec     de
1229+ 24B9              Um_DivMod_Endif:                                   // endif
1230+ 24B9 13                                   inc     de
1231+ 24BA 3D                                   dec     a
1232+ 24BB 20 E8                            jr      nz, Um_DivMod_Loop
1233+ 24BD EB                               ex      de, hl
1234+ 24BE              Um_DivMod_Bailout:
1235+ 24BE D5                               push    de                  // de := remanider
1236+ 24BF E5                               push    hl                  // hl := quotient
1237+ 24C0 D9                               exx
1238+ 24C1                                  next
1238+ 24C1 DD E9       >                jp      (ix)
1239+ 24C3
1240+ 24C3              Um_DivMod_OutOfRange:
1241+ 24C3 21 FF FF                     ld      hl, -1
1242+ 24C6 54                           ld      d, h
1243+ 24C7 5D                           ld      e, l
1244+ 24C8 18 F4                        jr      Um_DivMod_Bailout
1245+ 24CA
1246+ 24CA              //  ______________________________________________________________________
1247+ 24CA              //
1248+ 24CA              // and          n1 n2 -- n3
1249+ 24CA              // bit logical AND. Returns n3 as n1 & n2
1250+ 24CA                              New_Def AND_OP, "AND", is_code, is_normal
1250+ 24CA             >
1250+ 24CA             >Dict_Ptr        defl    $
1250+ 24CA             >
1250+ 24CA             >//              ______________________________________________________________________
1250+ 24CA             >//              Heap part
1250+ 24CA             >
1250+ 24CA             >
1250+ 24CA             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E216             >
1250+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E216             >Latest_Definition defl  Heap_Ptr
1250+ E216             >
1250+ E216             >                // dummy db directives used to calculate length of namec
1250+ E216 41 4E 44    >                db      "AND"
1250+ E219             >len_NFA         defl    $ - temp_NFA
1250+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E216             >
1250+ E216 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E217 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1250+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1250+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1250+ E21A             >
1250+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E21C             >Prev_Ptr        defl    Heap_Ptr
1250+ E21C             >
1250+ E21C             >mirror_Ptr      defl    $
1250+ E21C             >
1250+ E21C CC 24       >                dw      Dict_Ptr + 2        // xt
1250+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E21E             >
1250+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E21E             >
1250+ E21E             >//              ______________________________________________________________________
1250+ E21E             >//              Dictionary part
1250+ E21E             >
1250+ E21E             >                org     Dict_Ptr
1250+ 24CA             >
1250+ 24CA 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 24CC             >
1250+ 24CC             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 24CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1250+ 24CC ~           >
1250+ 24CC ~           >
1250+ 24CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 24CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 24CC             >
1250+ 24CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 24CC D9                           exx
1252+ 24CD D1                           pop     de
1253+ 24CE E1                           pop     hl
1254+ 24CF 7B                           ld      a, e
1255+ 24D0 A5                           and     l
1256+ 24D1 6F                           ld      l, a
1257+ 24D2 7A                           ld      a, d
1258+ 24D3 A4                           and     h
1259+ 24D4              Boolean_exit:
1260+ 24D4 67                           ld      h, a
1261+ 24D5 E5                           push    hl
1262+ 24D6 D9                           exx
1263+ 24D7                              next
1263+ 24D7 DD E9       >                jp      (ix)
1264+ 24D9
1265+ 24D9              //  ______________________________________________________________________
1266+ 24D9              //
1267+ 24D9              // or           n1 n2 -- n3
1268+ 24D9              // bit logical OR. Returns n3 as n1 | n2
1269+ 24D9                              New_Def OR_OP, "OR", is_code, is_normal
1269+ 24D9             >
1269+ 24D9             >Dict_Ptr        defl    $
1269+ 24D9             >
1269+ 24D9             >//              ______________________________________________________________________
1269+ 24D9             >//              Heap part
1269+ 24D9             >
1269+ 24D9             >
1269+ 24D9             >                org     (Heap_Ptr & $1FFF) + $E000
1269+ E21E             >
1269+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ E21E             >Latest_Definition defl  Heap_Ptr
1269+ E21E             >
1269+ E21E             >                // dummy db directives used to calculate length of namec
1269+ E21E 4F 52       >                db      "OR"
1269+ E220             >len_NFA         defl    $ - temp_NFA
1269+ E220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ E21E             >
1269+ E21E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ E21F 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1269+ E221             >                org     $-1                 // alter last byte of Name just above to set
1269+ E220 D2          >                db      {b $} | END_BIT     // msb as name end
1269+ E221             >
1269+ E221 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1269+ E223             >Prev_Ptr        defl    Heap_Ptr
1269+ E223             >
1269+ E223             >mirror_Ptr      defl    $
1269+ E223             >
1269+ E223 DB 24       >                dw      Dict_Ptr + 2        // xt
1269+ E225             >Heap_Ptr        defl    $ - $E000           // save current HP
1269+ E225             >
1269+ E225             >Current_HP      defl  $ - $E000             // used to set HP once!
1269+ E225             >
1269+ E225             >//              ______________________________________________________________________
1269+ E225             >//              Dictionary part
1269+ E225             >
1269+ E225             >                org     Dict_Ptr
1269+ 24D9             >
1269+ 24D9 23 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1269+ 24DB             >
1269+ 24DB             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 24DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1269+ 24DB ~           >
1269+ 24DB ~           >
1269+ 24DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 24DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 24DB             >
1269+ 24DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 24DB D9                           exx
1271+ 24DC D1                           pop     de
1272+ 24DD E1                           pop     hl
1273+ 24DE 7B                           ld      a, e
1274+ 24DF B5                           or      l
1275+ 24E0 6F                           ld      l, a
1276+ 24E1 7A                           ld      a, d
1277+ 24E2 B4                           or      h
1278+ 24E3 18 EF                        jr      Boolean_exit
1279+ 24E5                        //    ld      h, a
1280+ 24E5                        //    push    hl
1281+ 24E5                        //    exx
1282+ 24E5                        //    next
1283+ 24E5
1284+ 24E5              //  ______________________________________________________________________
1285+ 24E5              //
1286+ 24E5              // xor          n1 n2 -- n3
1287+ 24E5              // bit logical OR. Returns n3 as n1 ^ n2
1288+ 24E5                              New_Def XOR_OP, "XOR", is_code, is_normal
1288+ 24E5             >
1288+ 24E5             >Dict_Ptr        defl    $
1288+ 24E5             >
1288+ 24E5             >//              ______________________________________________________________________
1288+ 24E5             >//              Heap part
1288+ 24E5             >
1288+ 24E5             >
1288+ 24E5             >                org     (Heap_Ptr & $1FFF) + $E000
1288+ E225             >
1288+ E225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1288+ E225             >Latest_Definition defl  Heap_Ptr
1288+ E225             >
1288+ E225             >                // dummy db directives used to calculate length of namec
1288+ E225 58 4F 52    >                db      "XOR"
1288+ E228             >len_NFA         defl    $ - temp_NFA
1288+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1288+ E225             >
1288+ E225 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1288+ E226 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1288+ E229             >                org     $-1                 // alter last byte of Name just above to set
1288+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1288+ E229             >
1288+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1288+ E22B             >Prev_Ptr        defl    Heap_Ptr
1288+ E22B             >
1288+ E22B             >mirror_Ptr      defl    $
1288+ E22B             >
1288+ E22B E7 24       >                dw      Dict_Ptr + 2        // xt
1288+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1288+ E22D             >
1288+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1288+ E22D             >
1288+ E22D             >//              ______________________________________________________________________
1288+ E22D             >//              Dictionary part
1288+ E22D             >
1288+ E22D             >                org     Dict_Ptr
1288+ 24E5             >
1288+ 24E5 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1288+ 24E7             >
1288+ 24E7             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1288+ 24E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1288+ 24E7 ~           >
1288+ 24E7 ~           >
1288+ 24E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1288+ 24E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1288+ 24E7             >
1288+ 24E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1289+ 24E7 D9                           exx
1290+ 24E8 D1                           pop     de
1291+ 24E9 E1                           pop     hl
1292+ 24EA 7B                           ld      a, e
1293+ 24EB AD                           xor     l
1294+ 24EC 6F                           ld      l, a
1295+ 24ED 7A                           ld      a, d
1296+ 24EE AC                           xor     h
1297+ 24EF 18 E3                        jr      Boolean_exit
1298+ 24F1                        //    ld      h, a
1299+ 24F1                        //    push    hl
1300+ 24F1                        //    exx
1301+ 24F1                        //    next
1302+ 24F1
1303+ 24F1              //  ______________________________________________________________________
1304+ 24F1              //
1305+ 24F1              // sp@      -- a
1306+ 24F1              // returns on top of stack the value of SP before execution
1307+ 24F1                              New_Def SPFETCH, "SP@", is_code, is_normal
1307+ 24F1             >
1307+ 24F1             >Dict_Ptr        defl    $
1307+ 24F1             >
1307+ 24F1             >//              ______________________________________________________________________
1307+ 24F1             >//              Heap part
1307+ 24F1             >
1307+ 24F1             >
1307+ 24F1             >                org     (Heap_Ptr & $1FFF) + $E000
1307+ E22D             >
1307+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1307+ E22D             >Latest_Definition defl  Heap_Ptr
1307+ E22D             >
1307+ E22D             >                // dummy db directives used to calculate length of namec
1307+ E22D 53 50 40    >                db      "SP@"
1307+ E230             >len_NFA         defl    $ - temp_NFA
1307+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1307+ E22D             >
1307+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1307+ E22E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1307+ E231             >                org     $-1                 // alter last byte of Name just above to set
1307+ E230 C0          >                db      {b $} | END_BIT     // msb as name end
1307+ E231             >
1307+ E231 25 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1307+ E233             >Prev_Ptr        defl    Heap_Ptr
1307+ E233             >
1307+ E233             >mirror_Ptr      defl    $
1307+ E233             >
1307+ E233 F3 24       >                dw      Dict_Ptr + 2        // xt
1307+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1307+ E235             >
1307+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1307+ E235             >
1307+ E235             >//              ______________________________________________________________________
1307+ E235             >//              Dictionary part
1307+ E235             >
1307+ E235             >                org     Dict_Ptr
1307+ 24F1             >
1307+ 24F1 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1307+ 24F3             >
1307+ 24F3             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1307+ 24F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1307+ 24F3 ~           >
1307+ 24F3 ~           >
1307+ 24F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1307+ 24F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1307+ 24F3             >
1307+ 24F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1308+ 24F3
1309+ 24F3 21 00 00                     ld      hl, 0
1310+ 24F6 39                           add     hl, sp
1311+ 24F7
1312+ 24F7                              psh1
1312+ 24F7 E5          >                push    hl
1312+ 24F8 DD E9       >                jp      (ix)
1313+ 24FA
1314+ 24FA              //  ______________________________________________________________________
1315+ 24FA              //
1316+ 24FA              // sp!      a --
1317+ 24FA              // restore SP to the initial value passed
1318+ 24FA              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1319+ 24FA                              New_Def SPSTORE, "SP!", is_code, is_normal
1319+ 24FA             >
1319+ 24FA             >Dict_Ptr        defl    $
1319+ 24FA             >
1319+ 24FA             >//              ______________________________________________________________________
1319+ 24FA             >//              Heap part
1319+ 24FA             >
1319+ 24FA             >
1319+ 24FA             >                org     (Heap_Ptr & $1FFF) + $E000
1319+ E235             >
1319+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ E235             >Latest_Definition defl  Heap_Ptr
1319+ E235             >
1319+ E235             >                // dummy db directives used to calculate length of namec
1319+ E235 53 50 21    >                db      "SP!"
1319+ E238             >len_NFA         defl    $ - temp_NFA
1319+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ E235             >
1319+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ E236 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1319+ E239             >                org     $-1                 // alter last byte of Name just above to set
1319+ E238 A1          >                db      {b $} | END_BIT     // msb as name end
1319+ E239             >
1319+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1319+ E23B             >Prev_Ptr        defl    Heap_Ptr
1319+ E23B             >
1319+ E23B             >mirror_Ptr      defl    $
1319+ E23B             >
1319+ E23B FC 24       >                dw      Dict_Ptr + 2        // xt
1319+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1319+ E23D             >
1319+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1319+ E23D             >
1319+ E23D             >//              ______________________________________________________________________
1319+ E23D             >//              Dictionary part
1319+ E23D             >
1319+ E23D             >                org     Dict_Ptr
1319+ 24FA             >
1319+ 24FA 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1319+ 24FC             >
1319+ 24FC             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 24FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1319+ 24FC ~           >
1319+ 24FC ~           >
1319+ 24FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 24FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 24FC             >
1319+ 24FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 24FC E1                           pop     hl
1321+ 24FD F9                           ld      sp, hl
1322+ 24FE
1323+ 24FE                              next
1323+ 24FE DD E9       >                jp      (ix)
1324+ 2500
1325+ 2500              //  ______________________________________________________________________
1326+ 2500              //
1327+ 2500              // rp@      -- a
1328+ 2500              // returns on top of stack the value of Return-Pointer
1329+ 2500                              New_Def RPFETCH, "RP@", is_code, is_normal
1329+ 2500             >
1329+ 2500             >Dict_Ptr        defl    $
1329+ 2500             >
1329+ 2500             >//              ______________________________________________________________________
1329+ 2500             >//              Heap part
1329+ 2500             >
1329+ 2500             >
1329+ 2500             >                org     (Heap_Ptr & $1FFF) + $E000
1329+ E23D             >
1329+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1329+ E23D             >Latest_Definition defl  Heap_Ptr
1329+ E23D             >
1329+ E23D             >                // dummy db directives used to calculate length of namec
1329+ E23D 52 50 40    >                db      "RP@"
1329+ E240             >len_NFA         defl    $ - temp_NFA
1329+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1329+ E23D             >
1329+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1329+ E23E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1329+ E241             >                org     $-1                 // alter last byte of Name just above to set
1329+ E240 C0          >                db      {b $} | END_BIT     // msb as name end
1329+ E241             >
1329+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1329+ E243             >Prev_Ptr        defl    Heap_Ptr
1329+ E243             >
1329+ E243             >mirror_Ptr      defl    $
1329+ E243             >
1329+ E243 02 25       >                dw      Dict_Ptr + 2        // xt
1329+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1329+ E245             >
1329+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1329+ E245             >
1329+ E245             >//              ______________________________________________________________________
1329+ E245             >//              Dictionary part
1329+ E245             >
1329+ E245             >                org     Dict_Ptr
1329+ 2500             >
1329+ 2500 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1329+ 2502             >
1329+ 2502             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1329+ 2502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1329+ 2502 ~           >
1329+ 2502 ~           >
1329+ 2502             >                endif           ; ok        // for other definitions it "points" the correct handler
1329+ 2502             >                // Use of "; ok" to suppress "warning[fwdref]"
1329+ 2502             >
1329+ 2502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1330+ 2502
1331+ 2502                              // *** ldhlrp
1332+ 2502                              // *** ex      de, hl
1333+ 2502 D5                           push de
1334+ 2503
1335+ 2503                              next
1335+ 2503 DD E9       >                jp      (ix)
1336+ 2505
1337+ 2505              //  ______________________________________________________________________
1338+ 2505              //
1339+ 2505              // rp!      a --
1340+ 2505              // restore RP to the initial value passed
1341+ 2505              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1342+ 2505                              New_Def RPSTORE, "RP!", is_code, is_normal
1342+ 2505             >
1342+ 2505             >Dict_Ptr        defl    $
1342+ 2505             >
1342+ 2505             >//              ______________________________________________________________________
1342+ 2505             >//              Heap part
1342+ 2505             >
1342+ 2505             >
1342+ 2505             >                org     (Heap_Ptr & $1FFF) + $E000
1342+ E245             >
1342+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ E245             >Latest_Definition defl  Heap_Ptr
1342+ E245             >
1342+ E245             >                // dummy db directives used to calculate length of namec
1342+ E245 52 50 21    >                db      "RP!"
1342+ E248             >len_NFA         defl    $ - temp_NFA
1342+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ E245             >
1342+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ E246 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1342+ E249             >                org     $-1                 // alter last byte of Name just above to set
1342+ E248 A1          >                db      {b $} | END_BIT     // msb as name end
1342+ E249             >
1342+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1342+ E24B             >Prev_Ptr        defl    Heap_Ptr
1342+ E24B             >
1342+ E24B             >mirror_Ptr      defl    $
1342+ E24B             >
1342+ E24B 07 25       >                dw      Dict_Ptr + 2        // xt
1342+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1342+ E24D             >
1342+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1342+ E24D             >
1342+ E24D             >//              ______________________________________________________________________
1342+ E24D             >//              Dictionary part
1342+ E24D             >
1342+ E24D             >                org     Dict_Ptr
1342+ 2505             >
1342+ 2505 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1342+ 2507             >
1342+ 2507             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 2507 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1342+ 2507 ~           >
1342+ 2507 ~           >
1342+ 2507             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 2507             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 2507             >
1342+ 2507             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 2507 D1                           pop     de
1344+ 2508                              // *** ex      de, hl
1345+ 2508                              // *** ldrphl
1346+ 2508
1347+ 2508                              next
1347+ 2508 DD E9       >                jp      (ix)
1348+ 250A
1349+ 250A              //  ______________________________________________________________________
1350+ 250A              //
1351+ 250A              // exit       --
1352+ 250A              // exits back to the caller word
1353+ 250A                              New_Def EXIT, "EXIT", is_code, is_normal
1353+ 250A             >
1353+ 250A             >Dict_Ptr        defl    $
1353+ 250A             >
1353+ 250A             >//              ______________________________________________________________________
1353+ 250A             >//              Heap part
1353+ 250A             >
1353+ 250A             >
1353+ 250A             >                org     (Heap_Ptr & $1FFF) + $E000
1353+ E24D             >
1353+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1353+ E24D             >Latest_Definition defl  Heap_Ptr
1353+ E24D             >
1353+ E24D             >                // dummy db directives used to calculate length of namec
1353+ E24D 45 58 49 54 >                db      "EXIT"
1353+ E251             >len_NFA         defl    $ - temp_NFA
1353+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1353+ E24D             >
1353+ E24D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1353+ E24E 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1353+ E252             >                org     $-1                 // alter last byte of Name just above to set
1353+ E251 D4          >                db      {b $} | END_BIT     // msb as name end
1353+ E252             >
1353+ E252 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1353+ E254             >Prev_Ptr        defl    Heap_Ptr
1353+ E254             >
1353+ E254             >mirror_Ptr      defl    $
1353+ E254             >
1353+ E254 0C 25       >                dw      Dict_Ptr + 2        // xt
1353+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1353+ E256             >
1353+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1353+ E256             >
1353+ E256             >//              ______________________________________________________________________
1353+ E256             >//              Dictionary part
1353+ E256             >
1353+ E256             >                org     Dict_Ptr
1353+ 250A             >
1353+ 250A 54 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1353+ 250C             >
1353+ 250C             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1353+ 250C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1353+ 250C ~           >
1353+ 250C ~           >
1353+ 250C             >                endif           ; ok        // for other definitions it "points" the correct handler
1353+ 250C             >                // Use of "; ok" to suppress "warning[fwdref]"
1353+ 250C             >
1353+ 250C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1354+ 250C EB                           ex      de, hl
1355+ 250D                              // *** ldhlrp                      // Get Return Stack Pointer
1356+ 250D 4E                           ld      c, (hl)             // pop Instruction Pointer
1357+ 250E 23                           inc     hl                  // from Return Stack
1358+ 250F 46                           ld      b, (hl)
1359+ 2510 23                           inc     hl
1360+ 2511                              // *** ldrphl                      // Set Return Stack Pointer
1361+ 2511 EB                           ex      de, hl
1362+ 2512                              next
1362+ 2512 DD E9       >                jp      (ix)
1363+ 2514
1364+ 2514              //  ______________________________________________________________________
1365+ 2514              //
1366+ 2514              // lastl      --
1367+ 2514              // exits back to the caller word
1368+ 2514              //              New_Def EXIT, "LASTL", is_code, is_normal
1369+ 2514              //              push    de
1370+ 2514              //              ex      de, hl //**
1371+ 2514              //              // *** ldhlrp                      // Get Return Stack Pointer
1372+ 2514              //              ld      e, (hl)             // pop Instruction Pointer
1373+ 2514              //              inc     hl                  // from Return Stack
1374+ 2514              //              ld      d, (hl)
1375+ 2514              //              inc     hl
1376+ 2514              //              ld      (hl), e
1377+ 2514              //              inc     hl
1378+ 2514              //              ld      (hl), d
1379+ 2514              //              add     hl, -3
1380+ 2514              //              pop     de
1381+ 2514              //              next
1382+ 2514
1383+ 2514              //  ______________________________________________________________________
1384+ 2514              //
1385+ 2514              // >r      n --
1386+ 2514              // pop from calculator-stack and push into return-stack
1387+ 2514                              New_Def TO_R, ">R", is_code, is_normal
1387+ 2514             >
1387+ 2514             >Dict_Ptr        defl    $
1387+ 2514             >
1387+ 2514             >//              ______________________________________________________________________
1387+ 2514             >//              Heap part
1387+ 2514             >
1387+ 2514             >
1387+ 2514             >                org     (Heap_Ptr & $1FFF) + $E000
1387+ E256             >
1387+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1387+ E256             >Latest_Definition defl  Heap_Ptr
1387+ E256             >
1387+ E256             >                // dummy db directives used to calculate length of namec
1387+ E256 3E 52       >                db      ">R"
1387+ E258             >len_NFA         defl    $ - temp_NFA
1387+ E258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1387+ E256             >
1387+ E256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1387+ E257 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1387+ E259             >                org     $-1                 // alter last byte of Name just above to set
1387+ E258 D2          >                db      {b $} | END_BIT     // msb as name end
1387+ E259             >
1387+ E259 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1387+ E25B             >Prev_Ptr        defl    Heap_Ptr
1387+ E25B             >
1387+ E25B             >mirror_Ptr      defl    $
1387+ E25B             >
1387+ E25B 16 25       >                dw      Dict_Ptr + 2        // xt
1387+ E25D             >Heap_Ptr        defl    $ - $E000           // save current HP
1387+ E25D             >
1387+ E25D             >Current_HP      defl  $ - $E000             // used to set HP once!
1387+ E25D             >
1387+ E25D             >//              ______________________________________________________________________
1387+ E25D             >//              Dictionary part
1387+ E25D             >
1387+ E25D             >                org     Dict_Ptr
1387+ 2514             >
1387+ 2514 5B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1387+ 2516             >
1387+ 2516             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1387+ 2516 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1387+ 2516 ~           >
1387+ 2516 ~           >
1387+ 2516             >                endif           ; ok        // for other definitions it "points" the correct handler
1387+ 2516             >                // Use of "; ok" to suppress "warning[fwdref]"
1387+ 2516             >
1387+ 2516             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1388+ 2516 E1                           pop     hl
1389+ 2517 EB                           ex      de, hl //**
1390+ 2518                              // *** ldhlrp
1391+ 2518 2B                           dec     hl
1392+ 2519 72                           ld      (hl), d             // store current TOS
1393+ 251A 2B                           dec     hl                  // to Return Stack
1394+ 251B 73                           ld      (hl), e
1395+ 251C                              // *** ldrphl
1396+ 251C EB                           ex      de, hl //**
1397+ 251D                              next
1397+ 251D DD E9       >                jp      (ix)
1398+ 251F
1399+ 251F              //  ______________________________________________________________________
1400+ 251F              //
1401+ 251F              // r>      -- n
1402+ 251F              // pop from return-stack and push into calculator-stack
1403+ 251F                              New_Def R_TO, "R>", is_code, is_normal
1403+ 251F             >
1403+ 251F             >Dict_Ptr        defl    $
1403+ 251F             >
1403+ 251F             >//              ______________________________________________________________________
1403+ 251F             >//              Heap part
1403+ 251F             >
1403+ 251F             >
1403+ 251F             >                org     (Heap_Ptr & $1FFF) + $E000
1403+ E25D             >
1403+ E25D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ E25D             >Latest_Definition defl  Heap_Ptr
1403+ E25D             >
1403+ E25D             >                // dummy db directives used to calculate length of namec
1403+ E25D 52 3E       >                db      "R>"
1403+ E25F             >len_NFA         defl    $ - temp_NFA
1403+ E25F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ E25D             >
1403+ E25D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ E25E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1403+ E260             >                org     $-1                 // alter last byte of Name just above to set
1403+ E25F BE          >                db      {b $} | END_BIT     // msb as name end
1403+ E260             >
1403+ E260 56 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1403+ E262             >Prev_Ptr        defl    Heap_Ptr
1403+ E262             >
1403+ E262             >mirror_Ptr      defl    $
1403+ E262             >
1403+ E262 21 25       >                dw      Dict_Ptr + 2        // xt
1403+ E264             >Heap_Ptr        defl    $ - $E000           // save current HP
1403+ E264             >
1403+ E264             >Current_HP      defl  $ - $E000             // used to set HP once!
1403+ E264             >
1403+ E264             >//              ______________________________________________________________________
1403+ E264             >//              Dictionary part
1403+ E264             >
1403+ E264             >                org     Dict_Ptr
1403+ 251F             >
1403+ 251F 62 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1403+ 2521             >
1403+ 2521             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 2521 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1403+ 2521 ~           >
1403+ 2521 ~           >
1403+ 2521             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 2521             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 2521             >
1403+ 2521             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 2521
1405+ 2521 EB                           ex      de, hl //**
1406+ 2522                              // *** ldhlrp
1407+ 2522 5E                           ld      e, (hl)             // retrieve from Return Stack
1408+ 2523 23                           inc     hl
1409+ 2524 56                           ld      d, (hl)
1410+ 2525 23                           inc     hl
1411+ 2526                              // *** ldrphl
1412+ 2526 EB                           ex      de, hl //**
1413+ 2527 E5                           push    hl
1414+ 2528                              next
1414+ 2528 DD E9       >                jp      (ix)
1415+ 252A
1416+ 252A              //  ______________________________________________________________________
1417+ 252A              //
1418+ 252A              // r@           -- n
1419+ 252A              // return on top of stack the value of top of return-stack
1420+ 252A              // Since this is the same as I, we alter R's CFA to jump there
1421+ 252A                              New_Def R_OP, "R@", is_code, is_normal
1421+ 252A             >
1421+ 252A             >Dict_Ptr        defl    $
1421+ 252A             >
1421+ 252A             >//              ______________________________________________________________________
1421+ 252A             >//              Heap part
1421+ 252A             >
1421+ 252A             >
1421+ 252A             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E264             >
1421+ E264             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E264             >Latest_Definition defl  Heap_Ptr
1421+ E264             >
1421+ E264             >                // dummy db directives used to calculate length of namec
1421+ E264 52 40       >                db      "R@"
1421+ E266             >len_NFA         defl    $ - temp_NFA
1421+ E266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E264             >
1421+ E264 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E265 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1421+ E267             >                org     $-1                 // alter last byte of Name just above to set
1421+ E266 C0          >                db      {b $} | END_BIT     // msb as name end
1421+ E267             >
1421+ E267 5D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E269             >Prev_Ptr        defl    Heap_Ptr
1421+ E269             >
1421+ E269             >mirror_Ptr      defl    $
1421+ E269             >
1421+ E269 2C 25       >                dw      Dict_Ptr + 2        // xt
1421+ E26B             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E26B             >
1421+ E26B             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E26B             >
1421+ E26B             >//              ______________________________________________________________________
1421+ E26B             >//              Dictionary part
1421+ E26B             >
1421+ E26B             >                org     Dict_Ptr
1421+ 252A             >
1421+ 252A 69 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 252C             >
1421+ 252C             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 252C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1421+ 252C ~           >
1421+ 252C ~           >
1421+ 252C             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 252C             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 252C             >
1421+ 252C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 252C                          //  Behave  I_Ptr
1423+ 252C C3 D4 20                     jp      I_Ptr
1424+ 252F
1425+ 252F              //  ______________________________________________________________________
1426+ 252F              //
1427+ 252F              // r            -- n
1428+ 252F              // return on top of stack the value of top of return-stack
1429+ 252F              // Since this is the same as I, we alter R's CFA to jump there
1430+ 252F              //              New_Def R_OLD, "R", is_code, is_normal
1431+ 252F              //              jp      I_Ptr
1432+ 252F
1433+ 252F              //  ______________________________________________________________________
1434+ 252F              //
1435+ 252F              // 0=           n -- f
1436+ 252F              // true (non zero) if n is zero, false (0) elsewere
1437+ 252F                              New_Def ZEQUAL, "0=", is_code, is_normal
1437+ 252F             >
1437+ 252F             >Dict_Ptr        defl    $
1437+ 252F             >
1437+ 252F             >//              ______________________________________________________________________
1437+ 252F             >//              Heap part
1437+ 252F             >
1437+ 252F             >
1437+ 252F             >                org     (Heap_Ptr & $1FFF) + $E000
1437+ E26B             >
1437+ E26B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1437+ E26B             >Latest_Definition defl  Heap_Ptr
1437+ E26B             >
1437+ E26B             >                // dummy db directives used to calculate length of namec
1437+ E26B 30 3D       >                db      "0="
1437+ E26D             >len_NFA         defl    $ - temp_NFA
1437+ E26D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1437+ E26B             >
1437+ E26B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1437+ E26C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1437+ E26E             >                org     $-1                 // alter last byte of Name just above to set
1437+ E26D BD          >                db      {b $} | END_BIT     // msb as name end
1437+ E26E             >
1437+ E26E 64 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1437+ E270             >Prev_Ptr        defl    Heap_Ptr
1437+ E270             >
1437+ E270             >mirror_Ptr      defl    $
1437+ E270             >
1437+ E270 31 25       >                dw      Dict_Ptr + 2        // xt
1437+ E272             >Heap_Ptr        defl    $ - $E000           // save current HP
1437+ E272             >
1437+ E272             >Current_HP      defl  $ - $E000             // used to set HP once!
1437+ E272             >
1437+ E272             >//              ______________________________________________________________________
1437+ E272             >//              Dictionary part
1437+ E272             >
1437+ E272             >                org     Dict_Ptr
1437+ 252F             >
1437+ 252F 70 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1437+ 2531             >
1437+ 2531             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1437+ 2531 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1437+ 2531 ~           >
1437+ 2531 ~           >
1437+ 2531             >                endif           ; ok        // for other definitions it "points" the correct handler
1437+ 2531             >                // Use of "; ok" to suppress "warning[fwdref]"
1437+ 2531             >
1437+ 2531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1438+ 2531              Zero_Equal:
1439+ 2531 E1                           pop     hl
1440+ 2532 7D                           ld      a, l
1441+ 2533 B4                           or      h
1442+ 2534 21 00 00                     ld      hl, FALSE_FLAG
1443+ 2537 20 01                        jr      nz, ZEqual_Skip
1444+ 2539 2B                               dec     hl
1445+ 253A              ZEqual_Skip:
1446+ 253A                              psh1
1446+ 253A E5          >                push    hl
1446+ 253B DD E9       >                jp      (ix)
1447+ 253D
1448+ 253D              //  ______________________________________________________________________
1449+ 253D              //
1450+ 253D              // not         a1 -- a2
1451+ 253D              // increment by 2 top of stack
1452+ 253D                              New_Def NOT_OP, "NOT", is_code, is_normal
1452+ 253D             >
1452+ 253D             >Dict_Ptr        defl    $
1452+ 253D             >
1452+ 253D             >//              ______________________________________________________________________
1452+ 253D             >//              Heap part
1452+ 253D             >
1452+ 253D             >
1452+ 253D             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E272             >
1452+ E272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E272             >Latest_Definition defl  Heap_Ptr
1452+ E272             >
1452+ E272             >                // dummy db directives used to calculate length of namec
1452+ E272 4E 4F 54    >                db      "NOT"
1452+ E275             >len_NFA         defl    $ - temp_NFA
1452+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E272             >
1452+ E272 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E273 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1452+ E276             >                org     $-1                 // alter last byte of Name just above to set
1452+ E275 D4          >                db      {b $} | END_BIT     // msb as name end
1452+ E276             >
1452+ E276 6B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E278             >Prev_Ptr        defl    Heap_Ptr
1452+ E278             >
1452+ E278             >mirror_Ptr      defl    $
1452+ E278             >
1452+ E278 3F 25       >                dw      Dict_Ptr + 2        // xt
1452+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E27A             >
1452+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E27A             >
1452+ E27A             >//              ______________________________________________________________________
1452+ E27A             >//              Dictionary part
1452+ E27A             >
1452+ E27A             >                org     Dict_Ptr
1452+ 253D             >
1452+ 253D 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 253F             >
1452+ 253F             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 253F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1452+ 253F ~           >
1452+ 253F ~           >
1452+ 253F             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 253F             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 253F             >
1452+ 253F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 253F                          //  Behave  Zero_Equal
1454+ 253F 18 F0                        jr      Zero_Equal
1455+ 2541
1456+ 2541              //  ______________________________________________________________________
1457+ 2541              //
1458+ 2541              // 0<           n -- f
1459+ 2541              // true (non zero) if n is less than zero, false (0) elsewere
1460+ 2541                              New_Def ZLESS, "0<", is_code, is_normal
1460+ 2541             >
1460+ 2541             >Dict_Ptr        defl    $
1460+ 2541             >
1460+ 2541             >//              ______________________________________________________________________
1460+ 2541             >//              Heap part
1460+ 2541             >
1460+ 2541             >
1460+ 2541             >                org     (Heap_Ptr & $1FFF) + $E000
1460+ E27A             >
1460+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1460+ E27A             >Latest_Definition defl  Heap_Ptr
1460+ E27A             >
1460+ E27A             >                // dummy db directives used to calculate length of namec
1460+ E27A 30 3C       >                db      "0<"
1460+ E27C             >len_NFA         defl    $ - temp_NFA
1460+ E27C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1460+ E27A             >
1460+ E27A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1460+ E27B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1460+ E27D             >                org     $-1                 // alter last byte of Name just above to set
1460+ E27C BC          >                db      {b $} | END_BIT     // msb as name end
1460+ E27D             >
1460+ E27D 72 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1460+ E27F             >Prev_Ptr        defl    Heap_Ptr
1460+ E27F             >
1460+ E27F             >mirror_Ptr      defl    $
1460+ E27F             >
1460+ E27F 43 25       >                dw      Dict_Ptr + 2        // xt
1460+ E281             >Heap_Ptr        defl    $ - $E000           // save current HP
1460+ E281             >
1460+ E281             >Current_HP      defl  $ - $E000             // used to set HP once!
1460+ E281             >
1460+ E281             >//              ______________________________________________________________________
1460+ E281             >//              Dictionary part
1460+ E281             >
1460+ E281             >                org     Dict_Ptr
1460+ 2541             >
1460+ 2541 7F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1460+ 2543             >
1460+ 2543             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1460+ 2543 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1460+ 2543 ~           >
1460+ 2543 ~           >
1460+ 2543             >                endif           ; ok        // for other definitions it "points" the correct handler
1460+ 2543             >                // Use of "; ok" to suppress "warning[fwdref]"
1460+ 2543             >
1460+ 2543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1461+ 2543 E1                           pop     hl
1462+ 2544 29                           add     hl, hl
1463+ 2545 ED 62                        sbc     hl, hl
1464+ 2547                              psh1
1464+ 2547 E5          >                push    hl
1464+ 2548 DD E9       >                jp      (ix)
1465+ 254A
1466+ 254A              //  ______________________________________________________________________
1467+ 254A              //
1468+ 254A              // 0>           n -- f
1469+ 254A              // true (non zero) if n is less than zero, false (0) elsewere
1470+ 254A                              New_Def ZGREATER, "0>", is_code, is_normal
1470+ 254A             >
1470+ 254A             >Dict_Ptr        defl    $
1470+ 254A             >
1470+ 254A             >//              ______________________________________________________________________
1470+ 254A             >//              Heap part
1470+ 254A             >
1470+ 254A             >
1470+ 254A             >                org     (Heap_Ptr & $1FFF) + $E000
1470+ E281             >
1470+ E281             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ E281             >Latest_Definition defl  Heap_Ptr
1470+ E281             >
1470+ E281             >                // dummy db directives used to calculate length of namec
1470+ E281 30 3E       >                db      "0>"
1470+ E283             >len_NFA         defl    $ - temp_NFA
1470+ E283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ E281             >
1470+ E281 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ E282 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1470+ E284             >                org     $-1                 // alter last byte of Name just above to set
1470+ E283 BE          >                db      {b $} | END_BIT     // msb as name end
1470+ E284             >
1470+ E284 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1470+ E286             >Prev_Ptr        defl    Heap_Ptr
1470+ E286             >
1470+ E286             >mirror_Ptr      defl    $
1470+ E286             >
1470+ E286 4C 25       >                dw      Dict_Ptr + 2        // xt
1470+ E288             >Heap_Ptr        defl    $ - $E000           // save current HP
1470+ E288             >
1470+ E288             >Current_HP      defl  $ - $E000             // used to set HP once!
1470+ E288             >
1470+ E288             >//              ______________________________________________________________________
1470+ E288             >//              Dictionary part
1470+ E288             >
1470+ E288             >                org     Dict_Ptr
1470+ 254A             >
1470+ 254A 86 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1470+ 254C             >
1470+ 254C             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 254C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1470+ 254C ~           >
1470+ 254C ~           >
1470+ 254C             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 254C             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 254C             >
1470+ 254C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 254C E1                           pop     hl
1472+ 254D 7D                           ld      a, l
1473+ 254E B4                           or      h
1474+ 254F 29                           add     hl, hl
1475+ 2550 21 00 00                     ld      hl, FALSE_FLAG
1476+ 2553 38 04                        jr      c, ZGreater_Skip
1477+ 2555 A7                               and     a
1478+ 2556 28 01                            jr      z, ZGreater_Skip
1479+ 2558 2B                                   dec     hl
1480+ 2559              ZGreater_Skip:
1481+ 2559                              psh1
1481+ 2559 E5          >                push    hl
1481+ 255A DD E9       >                jp      (ix)
1482+ 255C
1483+ 255C              //  ______________________________________________________________________
1484+ 255C              //
1485+ 255C              // +            n1 n2 -- n3
1486+ 255C              // returns the unsigned sum of two top values
1487+ 255C                              New_Def PLUS, "+", is_code, is_normal
1487+ 255C             >
1487+ 255C             >Dict_Ptr        defl    $
1487+ 255C             >
1487+ 255C             >//              ______________________________________________________________________
1487+ 255C             >//              Heap part
1487+ 255C             >
1487+ 255C             >
1487+ 255C             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E288             >
1487+ E288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E288             >Latest_Definition defl  Heap_Ptr
1487+ E288             >
1487+ E288             >                // dummy db directives used to calculate length of namec
1487+ E288 2B          >                db      "+"
1487+ E289             >len_NFA         defl    $ - temp_NFA
1487+ E289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E288             >
1487+ E288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E289 2B          >                db      "+"               // name string in 7-bit ascii, but
1487+ E28A             >                org     $-1                 // alter last byte of Name just above to set
1487+ E289 AB          >                db      {b $} | END_BIT     // msb as name end
1487+ E28A             >
1487+ E28A 81 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E28C             >Prev_Ptr        defl    Heap_Ptr
1487+ E28C             >
1487+ E28C             >mirror_Ptr      defl    $
1487+ E28C             >
1487+ E28C 5E 25       >                dw      Dict_Ptr + 2        // xt
1487+ E28E             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E28E             >
1487+ E28E             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E28E             >
1487+ E28E             >//              ______________________________________________________________________
1487+ E28E             >//              Dictionary part
1487+ E28E             >
1487+ E28E             >                org     Dict_Ptr
1487+ 255C             >
1487+ 255C 8C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 255E             >
1487+ 255E             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 255E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1487+ 255E ~           >
1487+ 255E ~           >
1487+ 255E             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 255E             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 255E             >
1487+ 255E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 255E D9                           exx
1489+ 255F E1                           pop     hl
1490+ 2560 D1                           pop     de
1491+ 2561 19                           add     hl, de
1492+ 2562 E5                           push    hl
1493+ 2563 D9                           exx
1494+ 2564                              next
1494+ 2564 DD E9       >                jp      (ix)
1495+ 2566
1496+ 2566
1497+ 2566              //  ______________________________________________________________________
1498+ 2566              //
1499+ 2566              // d+           d1 d2 -- d3
1500+ 2566              // returns the unsigned sum of two top double-numbers
1501+ 2566              //      d2  d1
1502+ 2566              //      h l h l
1503+ 2566              // SP   LHEDLHED
1504+ 2566              // SP  +01234567
1505+ 2566                              New_Def DPLUS, "D+", is_code, is_normal
1505+ 2566             >
1505+ 2566             >Dict_Ptr        defl    $
1505+ 2566             >
1505+ 2566             >//              ______________________________________________________________________
1505+ 2566             >//              Heap part
1505+ 2566             >
1505+ 2566             >
1505+ 2566             >                org     (Heap_Ptr & $1FFF) + $E000
1505+ E28E             >
1505+ E28E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1505+ E28E             >Latest_Definition defl  Heap_Ptr
1505+ E28E             >
1505+ E28E             >                // dummy db directives used to calculate length of namec
1505+ E28E 44 2B       >                db      "D+"
1505+ E290             >len_NFA         defl    $ - temp_NFA
1505+ E290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1505+ E28E             >
1505+ E28E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1505+ E28F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1505+ E291             >                org     $-1                 // alter last byte of Name just above to set
1505+ E290 AB          >                db      {b $} | END_BIT     // msb as name end
1505+ E291             >
1505+ E291 88 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1505+ E293             >Prev_Ptr        defl    Heap_Ptr
1505+ E293             >
1505+ E293             >mirror_Ptr      defl    $
1505+ E293             >
1505+ E293 68 25       >                dw      Dict_Ptr + 2        // xt
1505+ E295             >Heap_Ptr        defl    $ - $E000           // save current HP
1505+ E295             >
1505+ E295             >Current_HP      defl  $ - $E000             // used to set HP once!
1505+ E295             >
1505+ E295             >//              ______________________________________________________________________
1505+ E295             >//              Dictionary part
1505+ E295             >
1505+ E295             >                org     Dict_Ptr
1505+ 2566             >
1505+ 2566 93 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1505+ 2568             >
1505+ 2568             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1505+ 2568 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1505+ 2568 ~           >
1505+ 2568 ~           >
1505+ 2568             >                endif           ; ok        // for other definitions it "points" the correct handler
1505+ 2568             >                // Use of "; ok" to suppress "warning[fwdref]"
1505+ 2568             >
1505+ 2568             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1506+ 2568
1507+ 2568 D9                           exx
1508+ 2569 C1                           pop     bc                  // bc := d2.H
1509+ 256A D1                           pop     de                  // hl := d2.L
1510+ 256B E1                           pop     hl                  // d1.H
1511+ 256C E3                           ex      (sp), hl            // d1.L
1512+ 256D 19                           add     hl, de              // hl := d2.L + d1.L
1513+ 256E E3                           ex      (sp), hl            // d1.H
1514+ 256F ED 4A                        adc     hl, bc              // d1.H + d2.H
1515+ 2571 E5                           push    hl
1516+ 2572 D9                           exx
1517+ 2573                              next
1517+ 2573 DD E9       >                jp      (ix)
1518+ 2575
1519+ 2575              //  ______________________________________________________________________
1520+ 2575              //
1521+ 2575              // 1+           n1 -- n2
1522+ 2575              // increment by 1 top of stack
1523+ 2575                              New_Def ONE_PLUS, "1+", is_code, is_normal
1523+ 2575             >
1523+ 2575             >Dict_Ptr        defl    $
1523+ 2575             >
1523+ 2575             >//              ______________________________________________________________________
1523+ 2575             >//              Heap part
1523+ 2575             >
1523+ 2575             >
1523+ 2575             >                org     (Heap_Ptr & $1FFF) + $E000
1523+ E295             >
1523+ E295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1523+ E295             >Latest_Definition defl  Heap_Ptr
1523+ E295             >
1523+ E295             >                // dummy db directives used to calculate length of namec
1523+ E295 31 2B       >                db      "1+"
1523+ E297             >len_NFA         defl    $ - temp_NFA
1523+ E297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1523+ E295             >
1523+ E295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1523+ E296 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1523+ E298             >                org     $-1                 // alter last byte of Name just above to set
1523+ E297 AB          >                db      {b $} | END_BIT     // msb as name end
1523+ E298             >
1523+ E298 8E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1523+ E29A             >Prev_Ptr        defl    Heap_Ptr
1523+ E29A             >
1523+ E29A             >mirror_Ptr      defl    $
1523+ E29A             >
1523+ E29A 77 25       >                dw      Dict_Ptr + 2        // xt
1523+ E29C             >Heap_Ptr        defl    $ - $E000           // save current HP
1523+ E29C             >
1523+ E29C             >Current_HP      defl  $ - $E000             // used to set HP once!
1523+ E29C             >
1523+ E29C             >//              ______________________________________________________________________
1523+ E29C             >//              Dictionary part
1523+ E29C             >
1523+ E29C             >                org     Dict_Ptr
1523+ 2575             >
1523+ 2575 9A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1523+ 2577             >
1523+ 2577             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1523+ 2577 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1523+ 2577 ~           >
1523+ 2577 ~           >
1523+ 2577             >                endif           ; ok        // for other definitions it "points" the correct handler
1523+ 2577             >                // Use of "; ok" to suppress "warning[fwdref]"
1523+ 2577             >
1523+ 2577             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1524+ 2577 E1                           pop     hl
1525+ 2578 23                           inc     hl
1526+ 2579
1527+ 2579                              psh1
1527+ 2579 E5          >                push    hl
1527+ 257A DD E9       >                jp      (ix)
1528+ 257C
1529+ 257C              //  ______________________________________________________________________
1530+ 257C              //
1531+ 257C              // 1-           n1 -- n2
1532+ 257C              // decrement by 1 top of stack
1533+ 257C                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1533+ 257C             >
1533+ 257C             >Dict_Ptr        defl    $
1533+ 257C             >
1533+ 257C             >//              ______________________________________________________________________
1533+ 257C             >//              Heap part
1533+ 257C             >
1533+ 257C             >
1533+ 257C             >                org     (Heap_Ptr & $1FFF) + $E000
1533+ E29C             >
1533+ E29C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1533+ E29C             >Latest_Definition defl  Heap_Ptr
1533+ E29C             >
1533+ E29C             >                // dummy db directives used to calculate length of namec
1533+ E29C 31 2D       >                db      "1-"
1533+ E29E             >len_NFA         defl    $ - temp_NFA
1533+ E29E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1533+ E29C             >
1533+ E29C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1533+ E29D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1533+ E29F             >                org     $-1                 // alter last byte of Name just above to set
1533+ E29E AD          >                db      {b $} | END_BIT     // msb as name end
1533+ E29F             >
1533+ E29F 95 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1533+ E2A1             >Prev_Ptr        defl    Heap_Ptr
1533+ E2A1             >
1533+ E2A1             >mirror_Ptr      defl    $
1533+ E2A1             >
1533+ E2A1 7E 25       >                dw      Dict_Ptr + 2        // xt
1533+ E2A3             >Heap_Ptr        defl    $ - $E000           // save current HP
1533+ E2A3             >
1533+ E2A3             >Current_HP      defl  $ - $E000             // used to set HP once!
1533+ E2A3             >
1533+ E2A3             >//              ______________________________________________________________________
1533+ E2A3             >//              Dictionary part
1533+ E2A3             >
1533+ E2A3             >                org     Dict_Ptr
1533+ 257C             >
1533+ 257C A1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1533+ 257E             >
1533+ 257E             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1533+ 257E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1533+ 257E ~           >
1533+ 257E ~           >
1533+ 257E             >                endif           ; ok        // for other definitions it "points" the correct handler
1533+ 257E             >                // Use of "; ok" to suppress "warning[fwdref]"
1533+ 257E             >
1533+ 257E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1534+ 257E E1                           pop     hl
1535+ 257F 2B                           dec     hl
1536+ 2580
1537+ 2580                              psh1
1537+ 2580 E5          >                push    hl
1537+ 2581 DD E9       >                jp      (ix)
1538+ 2583
1539+ 2583              //  ______________________________________________________________________
1540+ 2583              //
1541+ 2583              // 2+           n1 -- n2
1542+ 2583              // increment by 2 top of stack
1543+ 2583                              New_Def TWO_PLUS, "2+", is_code, is_normal
1543+ 2583             >
1543+ 2583             >Dict_Ptr        defl    $
1543+ 2583             >
1543+ 2583             >//              ______________________________________________________________________
1543+ 2583             >//              Heap part
1543+ 2583             >
1543+ 2583             >
1543+ 2583             >                org     (Heap_Ptr & $1FFF) + $E000
1543+ E2A3             >
1543+ E2A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1543+ E2A3             >Latest_Definition defl  Heap_Ptr
1543+ E2A3             >
1543+ E2A3             >                // dummy db directives used to calculate length of namec
1543+ E2A3 32 2B       >                db      "2+"
1543+ E2A5             >len_NFA         defl    $ - temp_NFA
1543+ E2A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1543+ E2A3             >
1543+ E2A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1543+ E2A4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1543+ E2A6             >                org     $-1                 // alter last byte of Name just above to set
1543+ E2A5 AB          >                db      {b $} | END_BIT     // msb as name end
1543+ E2A6             >
1543+ E2A6 9C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1543+ E2A8             >Prev_Ptr        defl    Heap_Ptr
1543+ E2A8             >
1543+ E2A8             >mirror_Ptr      defl    $
1543+ E2A8             >
1543+ E2A8 85 25       >                dw      Dict_Ptr + 2        // xt
1543+ E2AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1543+ E2AA             >
1543+ E2AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1543+ E2AA             >
1543+ E2AA             >//              ______________________________________________________________________
1543+ E2AA             >//              Dictionary part
1543+ E2AA             >
1543+ E2AA             >                org     Dict_Ptr
1543+ 2583             >
1543+ 2583 A8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1543+ 2585             >
1543+ 2585             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1543+ 2585 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1543+ 2585 ~           >
1543+ 2585 ~           >
1543+ 2585             >                endif           ; ok        // for other definitions it "points" the correct handler
1543+ 2585             >                // Use of "; ok" to suppress "warning[fwdref]"
1543+ 2585             >
1543+ 2585             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1544+ 2585              Two_Plus:
1545+ 2585 E1                           pop     hl
1546+ 2586 23                           inc     hl
1547+ 2587 23                           inc     hl
1548+ 2588
1549+ 2588                              psh1
1549+ 2588 E5          >                push    hl
1549+ 2589 DD E9       >                jp      (ix)
1550+ 258B
1551+ 258B              //  ______________________________________________________________________
1552+ 258B              //
1553+ 258B              // cell+        a1 -- a2
1554+ 258B              // increment by 2 top of stack
1555+ 258B                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1555+ 258B             >
1555+ 258B             >Dict_Ptr        defl    $
1555+ 258B             >
1555+ 258B             >//              ______________________________________________________________________
1555+ 258B             >//              Heap part
1555+ 258B             >
1555+ 258B             >
1555+ 258B             >                org     (Heap_Ptr & $1FFF) + $E000
1555+ E2AA             >
1555+ E2AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1555+ E2AA             >Latest_Definition defl  Heap_Ptr
1555+ E2AA             >
1555+ E2AA             >                // dummy db directives used to calculate length of namec
1555+ E2AA 43 45 4C 4C >                db      "CELL+"
1555+ E2AE 2B          >
1555+ E2AF             >len_NFA         defl    $ - temp_NFA
1555+ E2AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1555+ E2AA             >
1555+ E2AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1555+ E2AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1555+ E2AF 2B          >
1555+ E2B0             >                org     $-1                 // alter last byte of Name just above to set
1555+ E2AF AB          >                db      {b $} | END_BIT     // msb as name end
1555+ E2B0             >
1555+ E2B0 A3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1555+ E2B2             >Prev_Ptr        defl    Heap_Ptr
1555+ E2B2             >
1555+ E2B2             >mirror_Ptr      defl    $
1555+ E2B2             >
1555+ E2B2 8D 25       >                dw      Dict_Ptr + 2        // xt
1555+ E2B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1555+ E2B4             >
1555+ E2B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1555+ E2B4             >
1555+ E2B4             >//              ______________________________________________________________________
1555+ E2B4             >//              Dictionary part
1555+ E2B4             >
1555+ E2B4             >                org     Dict_Ptr
1555+ 258B             >
1555+ 258B B2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1555+ 258D             >
1555+ 258D             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1555+ 258D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1555+ 258D ~           >
1555+ 258D ~           >
1555+ 258D             >                endif           ; ok        // for other definitions it "points" the correct handler
1555+ 258D             >                // Use of "; ok" to suppress "warning[fwdref]"
1555+ 258D             >
1555+ 258D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1556+ 258D 18 F6                        jr      Two_Plus
1557+ 258F
1558+ 258F              //  ______________________________________________________________________
1559+ 258F              //
1560+ 258F              // align        a1 -- a2
1561+ 258F              // align memory : not used
1562+ 258F              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1563+ 258F              //            next
1564+ 258F
1565+ 258F              //  ______________________________________________________________________
1566+ 258F              //
1567+ 258F              // cell-        a1 -- a2
1568+ 258F              // decrement by 2 top of stack
1569+ 258F                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1569+ 258F             >
1569+ 258F             >Dict_Ptr        defl    $
1569+ 258F             >
1569+ 258F             >//              ______________________________________________________________________
1569+ 258F             >//              Heap part
1569+ 258F             >
1569+ 258F             >
1569+ 258F             >                org     (Heap_Ptr & $1FFF) + $E000
1569+ E2B4             >
1569+ E2B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1569+ E2B4             >Latest_Definition defl  Heap_Ptr
1569+ E2B4             >
1569+ E2B4             >                // dummy db directives used to calculate length of namec
1569+ E2B4 43 45 4C 4C >                db      "CELL-"
1569+ E2B8 2D          >
1569+ E2B9             >len_NFA         defl    $ - temp_NFA
1569+ E2B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1569+ E2B4             >
1569+ E2B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1569+ E2B5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1569+ E2B9 2D          >
1569+ E2BA             >                org     $-1                 // alter last byte of Name just above to set
1569+ E2B9 AD          >                db      {b $} | END_BIT     // msb as name end
1569+ E2BA             >
1569+ E2BA AA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1569+ E2BC             >Prev_Ptr        defl    Heap_Ptr
1569+ E2BC             >
1569+ E2BC             >mirror_Ptr      defl    $
1569+ E2BC             >
1569+ E2BC 91 25       >                dw      Dict_Ptr + 2        // xt
1569+ E2BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1569+ E2BE             >
1569+ E2BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1569+ E2BE             >
1569+ E2BE             >//              ______________________________________________________________________
1569+ E2BE             >//              Dictionary part
1569+ E2BE             >
1569+ E2BE             >                org     Dict_Ptr
1569+ 258F             >
1569+ 258F BC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1569+ 2591             >
1569+ 2591             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1569+ 2591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1569+ 2591 ~           >
1569+ 2591 ~           >
1569+ 2591             >                endif           ; ok        // for other definitions it "points" the correct handler
1569+ 2591             >                // Use of "; ok" to suppress "warning[fwdref]"
1569+ 2591             >
1569+ 2591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1570+ 2591              CellMinus:
1571+ 2591 E1                           pop     hl
1572+ 2592 2B                           dec     hl
1573+ 2593 2B                           dec     hl
1574+ 2594
1575+ 2594                              psh1
1575+ 2594 E5          >                push    hl
1575+ 2595 DD E9       >                jp      (ix)
1576+ 2597
1577+ 2597              //  ______________________________________________________________________
1578+ 2597              //
1579+ 2597              // 2-           a1 -- a2
1580+ 2597              // decrement by 2 top of stack
1581+ 2597                              New_Def TWO_MINUS, "2-", is_code, is_normal
1581+ 2597             >
1581+ 2597             >Dict_Ptr        defl    $
1581+ 2597             >
1581+ 2597             >//              ______________________________________________________________________
1581+ 2597             >//              Heap part
1581+ 2597             >
1581+ 2597             >
1581+ 2597             >                org     (Heap_Ptr & $1FFF) + $E000
1581+ E2BE             >
1581+ E2BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1581+ E2BE             >Latest_Definition defl  Heap_Ptr
1581+ E2BE             >
1581+ E2BE             >                // dummy db directives used to calculate length of namec
1581+ E2BE 32 2D       >                db      "2-"
1581+ E2C0             >len_NFA         defl    $ - temp_NFA
1581+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1581+ E2BE             >
1581+ E2BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1581+ E2BF 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1581+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1581+ E2C0 AD          >                db      {b $} | END_BIT     // msb as name end
1581+ E2C1             >
1581+ E2C1 B4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1581+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1581+ E2C3             >
1581+ E2C3             >mirror_Ptr      defl    $
1581+ E2C3             >
1581+ E2C3 99 25       >                dw      Dict_Ptr + 2        // xt
1581+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1581+ E2C5             >
1581+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1581+ E2C5             >
1581+ E2C5             >//              ______________________________________________________________________
1581+ E2C5             >//              Dictionary part
1581+ E2C5             >
1581+ E2C5             >                org     Dict_Ptr
1581+ 2597             >
1581+ 2597 C3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1581+ 2599             >
1581+ 2599             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1581+ 2599 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1581+ 2599 ~           >
1581+ 2599 ~           >
1581+ 2599             >                endif           ; ok        // for other definitions it "points" the correct handler
1581+ 2599             >                // Use of "; ok" to suppress "warning[fwdref]"
1581+ 2599             >
1581+ 2599             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1582+ 2599 C3 91 25                     jp      CellMinus
1583+ 259C
1584+ 259C              //  ______________________________________________________________________
1585+ 259C              //
1586+ 259C              // negate       n1 -- n2
1587+ 259C              // change the sign of number
1588+ 259C                              New_Def MINUS, "NEGATE", is_code, is_normal
1588+ 259C             >
1588+ 259C             >Dict_Ptr        defl    $
1588+ 259C             >
1588+ 259C             >//              ______________________________________________________________________
1588+ 259C             >//              Heap part
1588+ 259C             >
1588+ 259C             >
1588+ 259C             >                org     (Heap_Ptr & $1FFF) + $E000
1588+ E2C5             >
1588+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1588+ E2C5             >Latest_Definition defl  Heap_Ptr
1588+ E2C5             >
1588+ E2C5             >                // dummy db directives used to calculate length of namec
1588+ E2C5 4E 45 47 41 >                db      "NEGATE"
1588+ E2C9 54 45       >
1588+ E2CB             >len_NFA         defl    $ - temp_NFA
1588+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1588+ E2C5             >
1588+ E2C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1588+ E2C6 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1588+ E2CA 54 45       >
1588+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1588+ E2CB C5          >                db      {b $} | END_BIT     // msb as name end
1588+ E2CC             >
1588+ E2CC BE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1588+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1588+ E2CE             >
1588+ E2CE             >mirror_Ptr      defl    $
1588+ E2CE             >
1588+ E2CE 9E 25       >                dw      Dict_Ptr + 2        // xt
1588+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1588+ E2D0             >
1588+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1588+ E2D0             >
1588+ E2D0             >//              ______________________________________________________________________
1588+ E2D0             >//              Dictionary part
1588+ E2D0             >
1588+ E2D0             >                org     Dict_Ptr
1588+ 259C             >
1588+ 259C CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1588+ 259E             >
1588+ 259E             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1588+ 259E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1588+ 259E ~           >
1588+ 259E ~           >
1588+ 259E             >                endif           ; ok        // for other definitions it "points" the correct handler
1588+ 259E             >                // Use of "; ok" to suppress "warning[fwdref]"
1588+ 259E             >
1588+ 259E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1589+ 259E D9                           exx
1590+ 259F 21 00 00                     ld      hl, 0               // subtract from 0
1591+ 25A2 D1                           pop     de
1592+ 25A3 B7                           or      a
1593+ 25A4 ED 52                        sbc     hl, de
1594+ 25A6 E5                           push    hl
1595+ 25A7 D9                           exx
1596+ 25A8                              next
1596+ 25A8 DD E9       >                jp      (ix)
1597+ 25AA
1598+ 25AA              //  ______________________________________________________________________
1599+ 25AA              //
1600+ 25AA              // dnegate      d1 -- d2
1601+ 25AA              // change the sign of a double number
1602+ 25AA                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1602+ 25AA             >
1602+ 25AA             >Dict_Ptr        defl    $
1602+ 25AA             >
1602+ 25AA             >//              ______________________________________________________________________
1602+ 25AA             >//              Heap part
1602+ 25AA             >
1602+ 25AA             >
1602+ 25AA             >                org     (Heap_Ptr & $1FFF) + $E000
1602+ E2D0             >
1602+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1602+ E2D0             >Latest_Definition defl  Heap_Ptr
1602+ E2D0             >
1602+ E2D0             >                // dummy db directives used to calculate length of namec
1602+ E2D0 44 4E 45 47 >                db      "DNEGATE"
1602+ E2D4 41 54 45    >
1602+ E2D7             >len_NFA         defl    $ - temp_NFA
1602+ E2D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1602+ E2D0             >
1602+ E2D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1602+ E2D1 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1602+ E2D5 41 54 45    >
1602+ E2D8             >                org     $-1                 // alter last byte of Name just above to set
1602+ E2D7 C5          >                db      {b $} | END_BIT     // msb as name end
1602+ E2D8             >
1602+ E2D8 C5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1602+ E2DA             >Prev_Ptr        defl    Heap_Ptr
1602+ E2DA             >
1602+ E2DA             >mirror_Ptr      defl    $
1602+ E2DA             >
1602+ E2DA AC 25       >                dw      Dict_Ptr + 2        // xt
1602+ E2DC             >Heap_Ptr        defl    $ - $E000           // save current HP
1602+ E2DC             >
1602+ E2DC             >Current_HP      defl  $ - $E000             // used to set HP once!
1602+ E2DC             >
1602+ E2DC             >//              ______________________________________________________________________
1602+ E2DC             >//              Dictionary part
1602+ E2DC             >
1602+ E2DC             >                org     Dict_Ptr
1602+ 25AA             >
1602+ 25AA DA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1602+ 25AC             >
1602+ 25AC             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1602+ 25AC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1602+ 25AC ~           >
1602+ 25AC ~           >
1602+ 25AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1602+ 25AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1602+ 25AC             >
1602+ 25AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1603+ 25AC D9                           exx
1604+ 25AD C1                           pop     bc                  // d1.H
1605+ 25AE D1                           pop     de                  // d1.L
1606+ 25AF AF                           xor     a
1607+ 25B0 67                           ld      h, a
1608+ 25B1 6F                           ld      l, a
1609+ 25B2 ED 52                        sbc     hl, de              // subtact from zero
1610+ 25B4 E5                           push    hl                  // > d2-L
1611+ 25B5 67                           ld      h, a
1612+ 25B6 6F                           ld      l, a
1613+ 25B7 ED 42                        sbc     hl, bc              // subtract from zero with carry
1614+ 25B9                                                          // > d2-H
1615+ 25B9 E5                           push    hl
1616+ 25BA D9                           exx
1617+ 25BB                              next
1617+ 25BB DD E9       >                jp      (ix)
1618+ 25BD
1619+ 25BD              //  ______________________________________________________________________
1620+ 25BD              //
1621+ 25BD              // over         n1 n2 -- n1 n2 n1
1622+ 25BD              // copy the second value of stack and put it on top.
1623+ 25BD                              New_Def OVER, "OVER", is_code, is_normal
1623+ 25BD             >
1623+ 25BD             >Dict_Ptr        defl    $
1623+ 25BD             >
1623+ 25BD             >//              ______________________________________________________________________
1623+ 25BD             >//              Heap part
1623+ 25BD             >
1623+ 25BD             >
1623+ 25BD             >                org     (Heap_Ptr & $1FFF) + $E000
1623+ E2DC             >
1623+ E2DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1623+ E2DC             >Latest_Definition defl  Heap_Ptr
1623+ E2DC             >
1623+ E2DC             >                // dummy db directives used to calculate length of namec
1623+ E2DC 4F 56 45 52 >                db      "OVER"
1623+ E2E0             >len_NFA         defl    $ - temp_NFA
1623+ E2E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1623+ E2DC             >
1623+ E2DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1623+ E2DD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1623+ E2E1             >                org     $-1                 // alter last byte of Name just above to set
1623+ E2E0 D2          >                db      {b $} | END_BIT     // msb as name end
1623+ E2E1             >
1623+ E2E1 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1623+ E2E3             >Prev_Ptr        defl    Heap_Ptr
1623+ E2E3             >
1623+ E2E3             >mirror_Ptr      defl    $
1623+ E2E3             >
1623+ E2E3 BF 25       >                dw      Dict_Ptr + 2        // xt
1623+ E2E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1623+ E2E5             >
1623+ E2E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1623+ E2E5             >
1623+ E2E5             >//              ______________________________________________________________________
1623+ E2E5             >//              Dictionary part
1623+ E2E5             >
1623+ E2E5             >                org     Dict_Ptr
1623+ 25BD             >
1623+ 25BD E3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1623+ 25BF             >
1623+ 25BF             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1623+ 25BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1623+ 25BF ~           >
1623+ 25BF ~           >
1623+ 25BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1623+ 25BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1623+ 25BF             >
1623+ 25BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1624+ 25BF                              // exx     // we can use af instead OPTIMIZATION possible
1625+ 25BF F1                           pop     af                  //   n2
1626+ 25C0 E1                           pop     hl                  // < n1
1627+ 25C1 E5                           push    hl                  // > n1
1628+ 25C2 F5                           push    af                  // > n2
1629+ 25C3 E5                           push    hl                  // > n1
1630+ 25C4                              // exx
1631+ 25C4                              next
1631+ 25C4 DD E9       >                jp      (ix)
1632+ 25C6
1633+ 25C6              //  ______________________________________________________________________
1634+ 25C6              //
1635+ 25C6              // drop         n1 --
1636+ 25C6              // drops the top of stack
1637+ 25C6                              New_Def DROP, "DROP", is_code, is_normal
1637+ 25C6             >
1637+ 25C6             >Dict_Ptr        defl    $
1637+ 25C6             >
1637+ 25C6             >//              ______________________________________________________________________
1637+ 25C6             >//              Heap part
1637+ 25C6             >
1637+ 25C6             >
1637+ 25C6             >                org     (Heap_Ptr & $1FFF) + $E000
1637+ E2E5             >
1637+ E2E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1637+ E2E5             >Latest_Definition defl  Heap_Ptr
1637+ E2E5             >
1637+ E2E5             >                // dummy db directives used to calculate length of namec
1637+ E2E5 44 52 4F 50 >                db      "DROP"
1637+ E2E9             >len_NFA         defl    $ - temp_NFA
1637+ E2E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1637+ E2E5             >
1637+ E2E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1637+ E2E6 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1637+ E2EA             >                org     $-1                 // alter last byte of Name just above to set
1637+ E2E9 D0          >                db      {b $} | END_BIT     // msb as name end
1637+ E2EA             >
1637+ E2EA DC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1637+ E2EC             >Prev_Ptr        defl    Heap_Ptr
1637+ E2EC             >
1637+ E2EC             >mirror_Ptr      defl    $
1637+ E2EC             >
1637+ E2EC C8 25       >                dw      Dict_Ptr + 2        // xt
1637+ E2EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1637+ E2EE             >
1637+ E2EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1637+ E2EE             >
1637+ E2EE             >//              ______________________________________________________________________
1637+ E2EE             >//              Dictionary part
1637+ E2EE             >
1637+ E2EE             >                org     Dict_Ptr
1637+ 25C6             >
1637+ 25C6 EC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1637+ 25C8             >
1637+ 25C8             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1637+ 25C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1637+ 25C8 ~           >
1637+ 25C8 ~           >
1637+ 25C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1637+ 25C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1637+ 25C8             >
1637+ 25C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1638+ 25C8 E1                           pop     hl                  // < n1 and discard previous TOS
1639+ 25C9                              next
1639+ 25C9 DD E9       >                jp      (ix)
1640+ 25CB
1641+ 25CB              //  ______________________________________________________________________
1642+ 25CB              //
1643+ 25CB              // nip          n1 n2 -- n2
1644+ 25CB              // drops the second elemento on the stack
1645+ 25CB                              New_Def NIP, "NIP", is_code, is_normal
1645+ 25CB             >
1645+ 25CB             >Dict_Ptr        defl    $
1645+ 25CB             >
1645+ 25CB             >//              ______________________________________________________________________
1645+ 25CB             >//              Heap part
1645+ 25CB             >
1645+ 25CB             >
1645+ 25CB             >                org     (Heap_Ptr & $1FFF) + $E000
1645+ E2EE             >
1645+ E2EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1645+ E2EE             >Latest_Definition defl  Heap_Ptr
1645+ E2EE             >
1645+ E2EE             >                // dummy db directives used to calculate length of namec
1645+ E2EE 4E 49 50    >                db      "NIP"
1645+ E2F1             >len_NFA         defl    $ - temp_NFA
1645+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1645+ E2EE             >
1645+ E2EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1645+ E2EF 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1645+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1645+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1645+ E2F2             >
1645+ E2F2 E5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1645+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1645+ E2F4             >
1645+ E2F4             >mirror_Ptr      defl    $
1645+ E2F4             >
1645+ E2F4 CD 25       >                dw      Dict_Ptr + 2        // xt
1645+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1645+ E2F6             >
1645+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1645+ E2F6             >
1645+ E2F6             >//              ______________________________________________________________________
1645+ E2F6             >//              Dictionary part
1645+ E2F6             >
1645+ E2F6             >                org     Dict_Ptr
1645+ 25CB             >
1645+ 25CB F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1645+ 25CD             >
1645+ 25CD             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1645+ 25CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1645+ 25CD ~           >
1645+ 25CD ~           >
1645+ 25CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1645+ 25CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1645+ 25CD             >
1645+ 25CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1646+ 25CD
1647+ 25CD E1                           pop     hl                  // < n1 discarded
1648+ 25CE E3                           ex      (sp), hl
1649+ 25CF                              next
1649+ 25CF DD E9       >                jp      (ix)
1650+ 25D1
1651+ 25D1              //  ______________________________________________________________________
1652+ 25D1              //
1653+ 25D1              // tuck         n1 n2 -- n2 n1 n2
1654+ 25D1              // copy the top element after the second.
1655+ 25D1                              New_Def TUCK, "TUCK", is_code, is_normal
1655+ 25D1             >
1655+ 25D1             >Dict_Ptr        defl    $
1655+ 25D1             >
1655+ 25D1             >//              ______________________________________________________________________
1655+ 25D1             >//              Heap part
1655+ 25D1             >
1655+ 25D1             >
1655+ 25D1             >                org     (Heap_Ptr & $1FFF) + $E000
1655+ E2F6             >
1655+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1655+ E2F6             >Latest_Definition defl  Heap_Ptr
1655+ E2F6             >
1655+ E2F6             >                // dummy db directives used to calculate length of namec
1655+ E2F6 54 55 43 4B >                db      "TUCK"
1655+ E2FA             >len_NFA         defl    $ - temp_NFA
1655+ E2FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1655+ E2F6             >
1655+ E2F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1655+ E2F7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1655+ E2FB             >                org     $-1                 // alter last byte of Name just above to set
1655+ E2FA CB          >                db      {b $} | END_BIT     // msb as name end
1655+ E2FB             >
1655+ E2FB EE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1655+ E2FD             >Prev_Ptr        defl    Heap_Ptr
1655+ E2FD             >
1655+ E2FD             >mirror_Ptr      defl    $
1655+ E2FD             >
1655+ E2FD D3 25       >                dw      Dict_Ptr + 2        // xt
1655+ E2FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1655+ E2FF             >
1655+ E2FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1655+ E2FF             >
1655+ E2FF             >//              ______________________________________________________________________
1655+ E2FF             >//              Dictionary part
1655+ E2FF             >
1655+ E2FF             >                org     Dict_Ptr
1655+ 25D1             >
1655+ 25D1 FD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1655+ 25D3             >
1655+ 25D3             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1655+ 25D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1655+ 25D3 ~           >
1655+ 25D3 ~           >
1655+ 25D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1655+ 25D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1655+ 25D3             >
1655+ 25D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1656+ 25D3 E1                           pop     hl
1657+ 25D4 F1                           pop     af                  // < n1
1658+ 25D5 E5                           push    hl                  // > n2  and TOS
1659+ 25D6 F5                           push    af                  // > n1
1660+ 25D7 E5                           push    hl
1661+ 25D8                              next
1661+ 25D8 DD E9       >                jp      (ix)
1662+ 25DA
1663+ 25DA              //  ______________________________________________________________________
1664+ 25DA              //
1665+ 25DA              // swap         n1 n2 -- n2 n1
1666+ 25DA              // swaps the two values on top of stack
1667+ 25DA                              New_Def SWAP, "SWAP", is_code, is_normal
1667+ 25DA             >
1667+ 25DA             >Dict_Ptr        defl    $
1667+ 25DA             >
1667+ 25DA             >//              ______________________________________________________________________
1667+ 25DA             >//              Heap part
1667+ 25DA             >
1667+ 25DA             >
1667+ 25DA             >                org     (Heap_Ptr & $1FFF) + $E000
1667+ E2FF             >
1667+ E2FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1667+ E2FF             >Latest_Definition defl  Heap_Ptr
1667+ E2FF             >
1667+ E2FF             >                // dummy db directives used to calculate length of namec
1667+ E2FF 53 57 41 50 >                db      "SWAP"
1667+ E303             >len_NFA         defl    $ - temp_NFA
1667+ E303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1667+ E2FF             >
1667+ E2FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1667+ E300 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1667+ E304             >                org     $-1                 // alter last byte of Name just above to set
1667+ E303 D0          >                db      {b $} | END_BIT     // msb as name end
1667+ E304             >
1667+ E304 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1667+ E306             >Prev_Ptr        defl    Heap_Ptr
1667+ E306             >
1667+ E306             >mirror_Ptr      defl    $
1667+ E306             >
1667+ E306 DC 25       >                dw      Dict_Ptr + 2        // xt
1667+ E308             >Heap_Ptr        defl    $ - $E000           // save current HP
1667+ E308             >
1667+ E308             >Current_HP      defl  $ - $E000             // used to set HP once!
1667+ E308             >
1667+ E308             >//              ______________________________________________________________________
1667+ E308             >//              Dictionary part
1667+ E308             >
1667+ E308             >                org     Dict_Ptr
1667+ 25DA             >
1667+ 25DA 06 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1667+ 25DC             >
1667+ 25DC             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1667+ 25DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1667+ 25DC ~           >
1667+ 25DC ~           >
1667+ 25DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1667+ 25DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1667+ 25DC             >
1667+ 25DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1668+ 25DC E1                           pop     hl                  // < n1
1669+ 25DD E3                           ex      (sp),hl             // > n2
1670+ 25DE E5                           push    hl                  // copy n1 to TOS
1671+ 25DF                              next
1671+ 25DF DD E9       >                jp      (ix)
1672+ 25E1
1673+ 25E1              //  ______________________________________________________________________
1674+ 25E1              //
1675+ 25E1              // dup         n -- n n
1676+ 25E1              // duplicates the top value of stack
1677+ 25E1                              New_Def DUP, "DUP", is_code, is_normal
1677+ 25E1             >
1677+ 25E1             >Dict_Ptr        defl    $
1677+ 25E1             >
1677+ 25E1             >//              ______________________________________________________________________
1677+ 25E1             >//              Heap part
1677+ 25E1             >
1677+ 25E1             >
1677+ 25E1             >                org     (Heap_Ptr & $1FFF) + $E000
1677+ E308             >
1677+ E308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1677+ E308             >Latest_Definition defl  Heap_Ptr
1677+ E308             >
1677+ E308             >                // dummy db directives used to calculate length of namec
1677+ E308 44 55 50    >                db      "DUP"
1677+ E30B             >len_NFA         defl    $ - temp_NFA
1677+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1677+ E308             >
1677+ E308 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1677+ E309 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1677+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1677+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1677+ E30C             >
1677+ E30C FF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1677+ E30E             >Prev_Ptr        defl    Heap_Ptr
1677+ E30E             >
1677+ E30E             >mirror_Ptr      defl    $
1677+ E30E             >
1677+ E30E E3 25       >                dw      Dict_Ptr + 2        // xt
1677+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1677+ E310             >
1677+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1677+ E310             >
1677+ E310             >//              ______________________________________________________________________
1677+ E310             >//              Dictionary part
1677+ E310             >
1677+ E310             >                org     Dict_Ptr
1677+ 25E1             >
1677+ 25E1 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1677+ 25E3             >
1677+ 25E3             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1677+ 25E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1677+ 25E3 ~           >
1677+ 25E3 ~           >
1677+ 25E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1677+ 25E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1677+ 25E3             >
1677+ 25E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1678+ 25E3 E1                           pop     hl
1679+ 25E4 E5                           push    hl                  // > n duplicate TOS
1680+ 25E5 E5                           push    hl
1681+ 25E6                              next
1681+ 25E6 DD E9       >                jp      (ix)
1682+ 25E8
1683+ 25E8              //  ______________________________________________________________________
1684+ 25E8              //
1685+ 25E8              // rot         n1 n2 n3 -- n2 n3 n1
1686+ 25E8              // Rotates the 3 top values of stack by picking the 3rd in access-order
1687+ 25E8              // and putting it on top. The other two are shifted down one place.
1688+ 25E8                              New_Def ROT, "ROT", is_code, is_normal
1688+ 25E8             >
1688+ 25E8             >Dict_Ptr        defl    $
1688+ 25E8             >
1688+ 25E8             >//              ______________________________________________________________________
1688+ 25E8             >//              Heap part
1688+ 25E8             >
1688+ 25E8             >
1688+ 25E8             >                org     (Heap_Ptr & $1FFF) + $E000
1688+ E310             >
1688+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1688+ E310             >Latest_Definition defl  Heap_Ptr
1688+ E310             >
1688+ E310             >                // dummy db directives used to calculate length of namec
1688+ E310 52 4F 54    >                db      "ROT"
1688+ E313             >len_NFA         defl    $ - temp_NFA
1688+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1688+ E310             >
1688+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1688+ E311 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1688+ E314             >                org     $-1                 // alter last byte of Name just above to set
1688+ E313 D4          >                db      {b $} | END_BIT     // msb as name end
1688+ E314             >
1688+ E314 08 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1688+ E316             >Prev_Ptr        defl    Heap_Ptr
1688+ E316             >
1688+ E316             >mirror_Ptr      defl    $
1688+ E316             >
1688+ E316 EA 25       >                dw      Dict_Ptr + 2        // xt
1688+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1688+ E318             >
1688+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1688+ E318             >
1688+ E318             >//              ______________________________________________________________________
1688+ E318             >//              Dictionary part
1688+ E318             >
1688+ E318             >                org     Dict_Ptr
1688+ 25E8             >
1688+ 25E8 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1688+ 25EA             >
1688+ 25EA             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1688+ 25EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1688+ 25EA ~           >
1688+ 25EA ~           >
1688+ 25EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1688+ 25EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1688+ 25EA             >
1688+ 25EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1689+ 25EA D9                           exx
1690+ 25EB D1                           pop     de                  // < n3
1691+ 25EC E1                           pop     hl                  // < n2
1692+ 25ED E3                           ex      (sp),hl             // > n2 < n1
1693+ 25EE D5                           push    de                  // > n3
1694+ 25EF E5                           push    hl                  // copy n1 to TOS
1695+ 25F0 D9                           exx
1696+ 25F1                              next
1696+ 25F1 DD E9       >                jp      (ix)
1697+ 25F3
1698+ 25F3              //  ______________________________________________________________________
1699+ 25F3              //
1700+ 25F3              // -rot         n1 n2 n3 -- n3 n1 n2
1701+ 25F3              // Rotates the 3 top values of stack by picking the 1st in access-order
1702+ 25F3              // and putting back to 3rd place. The other two are shifted down one place.
1703+ 25F3                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1703+ 25F3             >
1703+ 25F3             >Dict_Ptr        defl    $
1703+ 25F3             >
1703+ 25F3             >//              ______________________________________________________________________
1703+ 25F3             >//              Heap part
1703+ 25F3             >
1703+ 25F3             >
1703+ 25F3             >                org     (Heap_Ptr & $1FFF) + $E000
1703+ E318             >
1703+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1703+ E318             >Latest_Definition defl  Heap_Ptr
1703+ E318             >
1703+ E318             >                // dummy db directives used to calculate length of namec
1703+ E318 2D 52 4F 54 >                db      "-ROT"
1703+ E31C             >len_NFA         defl    $ - temp_NFA
1703+ E31C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1703+ E318             >
1703+ E318 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1703+ E319 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1703+ E31D             >                org     $-1                 // alter last byte of Name just above to set
1703+ E31C D4          >                db      {b $} | END_BIT     // msb as name end
1703+ E31D             >
1703+ E31D 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1703+ E31F             >Prev_Ptr        defl    Heap_Ptr
1703+ E31F             >
1703+ E31F             >mirror_Ptr      defl    $
1703+ E31F             >
1703+ E31F F5 25       >                dw      Dict_Ptr + 2        // xt
1703+ E321             >Heap_Ptr        defl    $ - $E000           // save current HP
1703+ E321             >
1703+ E321             >Current_HP      defl  $ - $E000             // used to set HP once!
1703+ E321             >
1703+ E321             >//              ______________________________________________________________________
1703+ E321             >//              Dictionary part
1703+ E321             >
1703+ E321             >                org     Dict_Ptr
1703+ 25F3             >
1703+ 25F3 1F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1703+ 25F5             >
1703+ 25F5             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1703+ 25F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1703+ 25F5 ~           >
1703+ 25F5 ~           >
1703+ 25F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1703+ 25F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1703+ 25F5             >
1703+ 25F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1704+ 25F5 D9                           exx
1705+ 25F6 E1                           pop     hl                  // < n3
1706+ 25F7 D1                           pop     de                  // < n2
1707+ 25F8 E3                           ex      (sp),hl             // > n3 < n1
1708+ 25F9 E5                           push    hl                  // > n1
1709+ 25FA D5                           push    de                  // copy n3 to TOS
1710+ 25FB D9                           exx
1711+ 25FC                              next
1711+ 25FC DD E9       >                jp      (ix)
1712+ 25FE
1713+ 25FE              //  ______________________________________________________________________
1714+ 25FE              //
1715+ 25FE              // pick        n1 -- nx
1716+ 25FE              // picks the nth element from TOS
1717+ 25FE                              New_Def PICK, "PICK", is_code, is_normal
1717+ 25FE             >
1717+ 25FE             >Dict_Ptr        defl    $
1717+ 25FE             >
1717+ 25FE             >//              ______________________________________________________________________
1717+ 25FE             >//              Heap part
1717+ 25FE             >
1717+ 25FE             >
1717+ 25FE             >                org     (Heap_Ptr & $1FFF) + $E000
1717+ E321             >
1717+ E321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1717+ E321             >Latest_Definition defl  Heap_Ptr
1717+ E321             >
1717+ E321             >                // dummy db directives used to calculate length of namec
1717+ E321 50 49 43 4B >                db      "PICK"
1717+ E325             >len_NFA         defl    $ - temp_NFA
1717+ E325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1717+ E321             >
1717+ E321 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1717+ E322 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1717+ E326             >                org     $-1                 // alter last byte of Name just above to set
1717+ E325 CB          >                db      {b $} | END_BIT     // msb as name end
1717+ E326             >
1717+ E326 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1717+ E328             >Prev_Ptr        defl    Heap_Ptr
1717+ E328             >
1717+ E328             >mirror_Ptr      defl    $
1717+ E328             >
1717+ E328 00 26       >                dw      Dict_Ptr + 2        // xt
1717+ E32A             >Heap_Ptr        defl    $ - $E000           // save current HP
1717+ E32A             >
1717+ E32A             >Current_HP      defl  $ - $E000             // used to set HP once!
1717+ E32A             >
1717+ E32A             >//              ______________________________________________________________________
1717+ E32A             >//              Dictionary part
1717+ E32A             >
1717+ E32A             >                org     Dict_Ptr
1717+ 25FE             >
1717+ 25FE 28 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1717+ 2600             >
1717+ 2600             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1717+ 2600 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1717+ 2600 ~           >
1717+ 2600 ~           >
1717+ 2600             >                endif           ; ok        // for other definitions it "points" the correct handler
1717+ 2600             >                // Use of "; ok" to suppress "warning[fwdref]"
1717+ 2600             >
1717+ 2600             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1718+ 2600 E1                           pop     hl                  // take TOS as index
1719+ 2601 29                           add     hl, hl              // as cells
1720+ 2602 39                           add     hl, sp              // from Stack Pointer
1721+ 2603 7E                           ld      a, (hl)             // replace TOS
1722+ 2604 23                           inc     hl
1723+ 2605 66                           ld      h, (hl)
1724+ 2606 6F                           ld      l, a
1725+ 2607 E5                           push    hl
1726+ 2608                              next
1726+ 2608 DD E9       >                jp      (ix)
1727+ 260A
1728+ 260A
1729+ 260A              //  ______________________________________________________________________
1730+ 260A              //
1731+ 260A              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1732+ 260A              // picks the nth element from TOS
1733+ 260A              //              New_Def ROLL, "ROLL", is_code, is_normal
1734+ 260A              //              exx                     // we need all registers free
1735+ 260A              //              pop     hl              // number of cells to roll
1736+ 260A              //              ld      a, h
1737+ 260A              //              or       l
1738+ 260A              //              jr      z, Roll_Zero
1739+ 260A              //                  add     hl, hl              // number of bytes to move
1740+ 260A              //                  ld      b, h
1741+ 260A              //                  ld      c, l
1742+ 260A              //                  add     hl, sp          // address of n1
1743+ 260A              //                  ld      a, (hl)         // take n1 into a and a,
1744+ 260A              //                  inc     hl
1745+ 260A              //                  ex      af, af'
1746+ 260A              //                  ld      a, (hl)         // take n1 into a and a,
1747+ 260A              //                  ld      d, h
1748+ 260A              //                  ld      e, l
1749+ 260A              //                  dec     hl
1750+ 260A              //                  dec     hl
1751+ 260A              //                  lddr
1752+ 260A              //                  ex      de, hl
1753+ 260A              //                  ld      (hl), a
1754+ 260A              //                  dec     hl
1755+ 260A              //                  ex      af, af'
1756+ 260A              //                  ld      (hl), a
1757+ 260A              //Roll_Zero:
1758+ 260A              //              exx
1759+ 260A              //              next
1760+ 260A
1761+ 260A
1762+ 260A              //  ______________________________________________________________________
1763+ 260A              //
1764+ 260A              // 2over        d1 d2 -- d1 d2 d1
1765+ 260A              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1766+ 260A              // copy the second double of stack and put on top.
1767+ 260A                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1767+ 260A             >
1767+ 260A             >Dict_Ptr        defl    $
1767+ 260A             >
1767+ 260A             >//              ______________________________________________________________________
1767+ 260A             >//              Heap part
1767+ 260A             >
1767+ 260A             >
1767+ 260A             >                org     (Heap_Ptr & $1FFF) + $E000
1767+ E32A             >
1767+ E32A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1767+ E32A             >Latest_Definition defl  Heap_Ptr
1767+ E32A             >
1767+ E32A             >                // dummy db directives used to calculate length of namec
1767+ E32A 32 4F 56 45 >                db      "2OVER"
1767+ E32E 52          >
1767+ E32F             >len_NFA         defl    $ - temp_NFA
1767+ E32F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1767+ E32A             >
1767+ E32A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1767+ E32B 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1767+ E32F 52          >
1767+ E330             >                org     $-1                 // alter last byte of Name just above to set
1767+ E32F D2          >                db      {b $} | END_BIT     // msb as name end
1767+ E330             >
1767+ E330 21 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1767+ E332             >Prev_Ptr        defl    Heap_Ptr
1767+ E332             >
1767+ E332             >mirror_Ptr      defl    $
1767+ E332             >
1767+ E332 0C 26       >                dw      Dict_Ptr + 2        // xt
1767+ E334             >Heap_Ptr        defl    $ - $E000           // save current HP
1767+ E334             >
1767+ E334             >Current_HP      defl  $ - $E000             // used to set HP once!
1767+ E334             >
1767+ E334             >//              ______________________________________________________________________
1767+ E334             >//              Dictionary part
1767+ E334             >
1767+ E334             >                org     Dict_Ptr
1767+ 260A             >
1767+ 260A 32 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1767+ 260C             >
1767+ 260C             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1767+ 260C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1767+ 260C ~           >
1767+ 260C ~           >
1767+ 260C             >                endif           ; ok        // for other definitions it "points" the correct handler
1767+ 260C             >                // Use of "; ok" to suppress "warning[fwdref]"
1767+ 260C             >
1767+ 260C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1768+ 260C D9                           exx
1769+ 260D 21 07 00                     ld      hl, 7
1770+ 2610 39                           add     hl, sp
1771+ 2611 56                           ld      d, (hl)
1772+ 2612 2B                           dec     hl
1773+ 2613 5E                           ld      e, (hl)             // d1-L
1774+ 2614 D5                           push    de
1775+ 2615 2B                           dec     hl
1776+ 2616 56                           ld      d, (hl)
1777+ 2617 2B                           dec     hl
1778+ 2618 5E                           ld      e, (hl)             // d1-H
1779+ 2619 D5                           push    de
1780+ 261A D9                           exx
1781+ 261B                              next
1781+ 261B DD E9       >                jp      (ix)
1782+ 261D
1783+ 261D              //  ______________________________________________________________________
1784+ 261D              //
1785+ 261D              // 2drop        d --
1786+ 261D              //              n1 n2 --
1787+ 261D              // drops the top double from stack
1788+ 261D                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1788+ 261D             >
1788+ 261D             >Dict_Ptr        defl    $
1788+ 261D             >
1788+ 261D             >//              ______________________________________________________________________
1788+ 261D             >//              Heap part
1788+ 261D             >
1788+ 261D             >
1788+ 261D             >                org     (Heap_Ptr & $1FFF) + $E000
1788+ E334             >
1788+ E334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1788+ E334             >Latest_Definition defl  Heap_Ptr
1788+ E334             >
1788+ E334             >                // dummy db directives used to calculate length of namec
1788+ E334 32 44 52 4F >                db      "2DROP"
1788+ E338 50          >
1788+ E339             >len_NFA         defl    $ - temp_NFA
1788+ E339             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1788+ E334             >
1788+ E334 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1788+ E335 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1788+ E339 50          >
1788+ E33A             >                org     $-1                 // alter last byte of Name just above to set
1788+ E339 D0          >                db      {b $} | END_BIT     // msb as name end
1788+ E33A             >
1788+ E33A 2A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1788+ E33C             >Prev_Ptr        defl    Heap_Ptr
1788+ E33C             >
1788+ E33C             >mirror_Ptr      defl    $
1788+ E33C             >
1788+ E33C 1F 26       >                dw      Dict_Ptr + 2        // xt
1788+ E33E             >Heap_Ptr        defl    $ - $E000           // save current HP
1788+ E33E             >
1788+ E33E             >Current_HP      defl  $ - $E000             // used to set HP once!
1788+ E33E             >
1788+ E33E             >//              ______________________________________________________________________
1788+ E33E             >//              Dictionary part
1788+ E33E             >
1788+ E33E             >                org     Dict_Ptr
1788+ 261D             >
1788+ 261D 3C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1788+ 261F             >
1788+ 261F             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1788+ 261F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1788+ 261F ~           >
1788+ 261F ~           >
1788+ 261F             >                endif           ; ok        // for other definitions it "points" the correct handler
1788+ 261F             >                // Use of "; ok" to suppress "warning[fwdref]"
1788+ 261F             >
1788+ 261F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1789+ 261F E1                           pop     hl
1790+ 2620 E1                           pop     hl
1791+ 2621                              next
1791+ 2621 DD E9       >                jp      (ix)
1792+ 2623
1793+ 2623              //  ______________________________________________________________________
1794+ 2623              //
1795+ 2623              // 2nip         d1 d2 -- d2
1796+ 2623              //              n1 n2 n3 n4 -- n3 n4
1797+ 2623              // drops the second double on the stack
1798+ 2623              //              New_Def TWO_NIP, 4, "2nip"
1799+ 2623              //              ...
1800+ 2623
1801+ 2623              //  ______________________________________________________________________
1802+ 2623              //
1803+ 2623              // 2tuck         d1 d2 -- d2 d1 d2
1804+ 2623              // copy the top element after the second.
1805+ 2623              //              New_Def TWO_TUCK, 5, "2tuck"
1806+ 2623              //              ...
1807+ 2623
1808+ 2623              //  ______________________________________________________________________
1809+ 2623              //
1810+ 2623              // 2swap         d1 d2 -- d2 d1
1811+ 2623              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1812+ 2623              // swaps the two doubles on top of stack
1813+ 2623                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1813+ 2623             >
1813+ 2623             >Dict_Ptr        defl    $
1813+ 2623             >
1813+ 2623             >//              ______________________________________________________________________
1813+ 2623             >//              Heap part
1813+ 2623             >
1813+ 2623             >
1813+ 2623             >                org     (Heap_Ptr & $1FFF) + $E000
1813+ E33E             >
1813+ E33E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1813+ E33E             >Latest_Definition defl  Heap_Ptr
1813+ E33E             >
1813+ E33E             >                // dummy db directives used to calculate length of namec
1813+ E33E 32 53 57 41 >                db      "2SWAP"
1813+ E342 50          >
1813+ E343             >len_NFA         defl    $ - temp_NFA
1813+ E343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1813+ E33E             >
1813+ E33E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1813+ E33F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1813+ E343 50          >
1813+ E344             >                org     $-1                 // alter last byte of Name just above to set
1813+ E343 D0          >                db      {b $} | END_BIT     // msb as name end
1813+ E344             >
1813+ E344 34 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1813+ E346             >Prev_Ptr        defl    Heap_Ptr
1813+ E346             >
1813+ E346             >mirror_Ptr      defl    $
1813+ E346             >
1813+ E346 25 26       >                dw      Dict_Ptr + 2        // xt
1813+ E348             >Heap_Ptr        defl    $ - $E000           // save current HP
1813+ E348             >
1813+ E348             >Current_HP      defl  $ - $E000             // used to set HP once!
1813+ E348             >
1813+ E348             >//              ______________________________________________________________________
1813+ E348             >//              Dictionary part
1813+ E348             >
1813+ E348             >                org     Dict_Ptr
1813+ 2623             >
1813+ 2623 46 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1813+ 2625             >
1813+ 2625             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1813+ 2625 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1813+ 2625 ~           >
1813+ 2625 ~           >
1813+ 2625             >                endif           ; ok        // for other definitions it "points" the correct handler
1813+ 2625             >                // Use of "; ok" to suppress "warning[fwdref]"
1813+ 2625             >
1813+ 2625             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1814+ 2625 D9                           exx
1815+ 2626 F1                           pop     af                  //   d2-H
1816+ 2627 E1                           pop     hl                  // < d2-L
1817+ 2628 D1                           pop     de                  // < d1-H
1818+ 2629 E3                           ex      (sp), hl            // < d1-L > d2-L
1819+ 262A F5                           push    af                  // > d2-H
1820+ 262B E5                           push    hl                  // > d1-L
1821+ 262C D5                           push    de
1822+ 262D D9                           exx
1823+ 262E                              next
1823+ 262E DD E9       >                jp      (ix)
1824+ 2630
1825+ 2630              //  ______________________________________________________________________
1826+ 2630              //
1827+ 2630              // 2dup         d -- d d
1828+ 2630              //              n1 n2 -- n1 n2 n1 n2
1829+ 2630              // duplicates the top double of stack
1830+ 2630                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1830+ 2630             >
1830+ 2630             >Dict_Ptr        defl    $
1830+ 2630             >
1830+ 2630             >//              ______________________________________________________________________
1830+ 2630             >//              Heap part
1830+ 2630             >
1830+ 2630             >
1830+ 2630             >                org     (Heap_Ptr & $1FFF) + $E000
1830+ E348             >
1830+ E348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1830+ E348             >Latest_Definition defl  Heap_Ptr
1830+ E348             >
1830+ E348             >                // dummy db directives used to calculate length of namec
1830+ E348 32 44 55 50 >                db      "2DUP"
1830+ E34C             >len_NFA         defl    $ - temp_NFA
1830+ E34C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1830+ E348             >
1830+ E348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1830+ E349 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1830+ E34D             >                org     $-1                 // alter last byte of Name just above to set
1830+ E34C D0          >                db      {b $} | END_BIT     // msb as name end
1830+ E34D             >
1830+ E34D 3E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1830+ E34F             >Prev_Ptr        defl    Heap_Ptr
1830+ E34F             >
1830+ E34F             >mirror_Ptr      defl    $
1830+ E34F             >
1830+ E34F 32 26       >                dw      Dict_Ptr + 2        // xt
1830+ E351             >Heap_Ptr        defl    $ - $E000           // save current HP
1830+ E351             >
1830+ E351             >Current_HP      defl  $ - $E000             // used to set HP once!
1830+ E351             >
1830+ E351             >//              ______________________________________________________________________
1830+ E351             >//              Dictionary part
1830+ E351             >
1830+ E351             >                org     Dict_Ptr
1830+ 2630             >
1830+ 2630 4F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1830+ 2632             >
1830+ 2632             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1830+ 2632 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1830+ 2632 ~           >
1830+ 2632 ~           >
1830+ 2632             >                endif           ; ok        // for other definitions it "points" the correct handler
1830+ 2632             >                // Use of "; ok" to suppress "warning[fwdref]"
1830+ 2632             >
1830+ 2632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1831+ 2632 E1                           pop     hl                  // < d-H
1832+ 2633 F1                           pop     af                  // < d-L
1833+ 2634 F5                           push    af                  // < d-L
1834+ 2635 E5                           push    hl                  // > d-H
1835+ 2636 F5                           push    af                  // > d-L
1836+ 2637 E5                           push    hl                  // > d-H
1837+ 2638                              next
1837+ 2638 DD E9       >                jp      (ix)
1838+ 263A
1839+ 263A              //  ______________________________________________________________________
1840+ 263A              //
1841+ 263A              // 2rot         d1 d2 d3 -- d2 d3 d1
1842+ 263A              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1843+ 263A              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1844+ 263A              // and putting it on top. The other two are shifted down one place.
1845+ 263A              //              New_Def TWO?ROT, 4, "2rot"
1846+ 263A              //              ...
1847+ 263A              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1848+ 263A              //
1849+ 263A              //      d3  |d2  |d1  |
1850+ 263A              //      h l |h l |h l |
1851+ 263A              // SP   LHED|LHED|LHED|
1852+ 263A              // SP  +0123|4567|89ab|
1853+ 263A              //              ld      hl, $000B
1854+ 263A              //              add     hl, sp
1855+ 263A              //              ld      d, (hl)
1856+ 263A              //              dec     hl
1857+ 263A              //              ld      e, (hl)
1858+ 263A              //              dec     hl
1859+ 263A              //              push    de
1860+ 263A              //              ld      d, (hl)
1861+ 263A              //              dec     hl
1862+ 263A              //              ld      e, (hl)
1863+ 263A              //              dec     hl
1864+ 263A              //              push    de
1865+ 263A
1866+ 263A              //      d1  |d3  |d2  |d1  |
1867+ 263A              //      h l |h l |h l |h l |
1868+ 263A              // SP   LHED|LHED|LHED|LHED|
1869+ 263A              // SP       +0123|4567|89ab|
1870+ 263A
1871+ 263A              //              ld      d, h
1872+ 263A              //              ld      e, l
1873+ 263A              //              inc     de
1874+ 263A              //              inc     de
1875+ 263A              //              inc     de
1876+ 263A              //              inc     de
1877+ 263A              //              push    bc
1878+ 263A              //              ld      bc, $000C
1879+ 263A              //              lddr
1880+ 263A              //              pop     bc
1881+ 263A              //              pop     de
1882+ 263A              //              pop     de
1883+ 263A              //
1884+ 263A              //              next
1885+ 263A
1886+ 263A
1887+ 263A              //  ______________________________________________________________________
1888+ 263A              //
1889+ 263A              // +!           n a --
1890+ 263A              // Sums to the content of address a the number n.
1891+ 263A              // It is the same of  a @ n + a !
1892+ 263A                              New_Def PLUSSTORE, "+!", is_code, is_normal
1892+ 263A             >
1892+ 263A             >Dict_Ptr        defl    $
1892+ 263A             >
1892+ 263A             >//              ______________________________________________________________________
1892+ 263A             >//              Heap part
1892+ 263A             >
1892+ 263A             >
1892+ 263A             >                org     (Heap_Ptr & $1FFF) + $E000
1892+ E351             >
1892+ E351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1892+ E351             >Latest_Definition defl  Heap_Ptr
1892+ E351             >
1892+ E351             >                // dummy db directives used to calculate length of namec
1892+ E351 2B 21       >                db      "+!"
1892+ E353             >len_NFA         defl    $ - temp_NFA
1892+ E353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1892+ E351             >
1892+ E351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1892+ E352 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1892+ E354             >                org     $-1                 // alter last byte of Name just above to set
1892+ E353 A1          >                db      {b $} | END_BIT     // msb as name end
1892+ E354             >
1892+ E354 48 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1892+ E356             >Prev_Ptr        defl    Heap_Ptr
1892+ E356             >
1892+ E356             >mirror_Ptr      defl    $
1892+ E356             >
1892+ E356 3C 26       >                dw      Dict_Ptr + 2        // xt
1892+ E358             >Heap_Ptr        defl    $ - $E000           // save current HP
1892+ E358             >
1892+ E358             >Current_HP      defl  $ - $E000             // used to set HP once!
1892+ E358             >
1892+ E358             >//              ______________________________________________________________________
1892+ E358             >//              Dictionary part
1892+ E358             >
1892+ E358             >                org     Dict_Ptr
1892+ 263A             >
1892+ 263A 56 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1892+ 263C             >
1892+ 263C             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1892+ 263C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1892+ 263C ~           >
1892+ 263C ~           >
1892+ 263C             >                endif           ; ok        // for other definitions it "points" the correct handler
1892+ 263C             >                // Use of "; ok" to suppress "warning[fwdref]"
1892+ 263C             >
1892+ 263C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1893+ 263C D9                           exx
1894+ 263D E1                           pop     hl                  // hl is the address
1895+ 263E D1                           pop     de                  // de is the number
1896+ 263F 7E                           ld      a, (hl)
1897+ 2640 83                           add     e
1898+ 2641 77                           ld      (hl), a
1899+ 2642 23                           inc     hl
1900+ 2643 7E                           ld      a, (hl)
1901+ 2644 8A                           adc     d
1902+ 2645 77                           ld      (hl), a
1903+ 2646 D9                           exx
1904+ 2647                              next
1904+ 2647 DD E9       >                jp      (ix)
1905+ 2649
1906+ 2649              //  ______________________________________________________________________
1907+ 2649              //
1908+ 2649              // toggle       a n --
1909+ 2649              // Complements (xor) the byte at addrress  a  with the model n.
1910+ 2649                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1910+ 2649             >
1910+ 2649             >Dict_Ptr        defl    $
1910+ 2649             >
1910+ 2649             >//              ______________________________________________________________________
1910+ 2649             >//              Heap part
1910+ 2649             >
1910+ 2649             >
1910+ 2649             >                org     (Heap_Ptr & $1FFF) + $E000
1910+ E358             >
1910+ E358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1910+ E358             >Latest_Definition defl  Heap_Ptr
1910+ E358             >
1910+ E358             >                // dummy db directives used to calculate length of namec
1910+ E358 54 4F 47 47 >                db      "TOGGLE"
1910+ E35C 4C 45       >
1910+ E35E             >len_NFA         defl    $ - temp_NFA
1910+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1910+ E358             >
1910+ E358 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1910+ E359 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1910+ E35D 4C 45       >
1910+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1910+ E35E C5          >                db      {b $} | END_BIT     // msb as name end
1910+ E35F             >
1910+ E35F 51 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1910+ E361             >Prev_Ptr        defl    Heap_Ptr
1910+ E361             >
1910+ E361             >mirror_Ptr      defl    $
1910+ E361             >
1910+ E361 4B 26       >                dw      Dict_Ptr + 2        // xt
1910+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1910+ E363             >
1910+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1910+ E363             >
1910+ E363             >//              ______________________________________________________________________
1910+ E363             >//              Dictionary part
1910+ E363             >
1910+ E363             >                org     Dict_Ptr
1910+ 2649             >
1910+ 2649 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1910+ 264B             >
1910+ 264B             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1910+ 264B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1910+ 264B ~           >
1910+ 264B ~           >
1910+ 264B             >                endif           ; ok        // for other definitions it "points" the correct handler
1910+ 264B             >                // Use of "; ok" to suppress "warning[fwdref]"
1910+ 264B             >
1910+ 264B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1911+ 264B E1                           pop     hl
1912+ 264C 7D                           ld      a, l
1913+ 264D E1                           pop     hl
1914+ 264E AE                           xor     (hl)
1915+ 264F 77                           ld      (hl), a
1916+ 2650
1917+ 2650                              next
1917+ 2650 DD E9       >                jp      (ix)
1918+ 2652
1919+ 2652              //  ______________________________________________________________________
1920+ 2652              //
1921+ 2652              // @            a -- n
1922+ 2652              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1923+ 2652                              New_Def FETCH, "@", is_code, is_normal
1923+ 2652             >
1923+ 2652             >Dict_Ptr        defl    $
1923+ 2652             >
1923+ 2652             >//              ______________________________________________________________________
1923+ 2652             >//              Heap part
1923+ 2652             >
1923+ 2652             >
1923+ 2652             >                org     (Heap_Ptr & $1FFF) + $E000
1923+ E363             >
1923+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1923+ E363             >Latest_Definition defl  Heap_Ptr
1923+ E363             >
1923+ E363             >                // dummy db directives used to calculate length of namec
1923+ E363 40          >                db      "@"
1923+ E364             >len_NFA         defl    $ - temp_NFA
1923+ E364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1923+ E363             >
1923+ E363 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1923+ E364 40          >                db      "@"               // name string in 7-bit ascii, but
1923+ E365             >                org     $-1                 // alter last byte of Name just above to set
1923+ E364 C0          >                db      {b $} | END_BIT     // msb as name end
1923+ E365             >
1923+ E365 58 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1923+ E367             >Prev_Ptr        defl    Heap_Ptr
1923+ E367             >
1923+ E367             >mirror_Ptr      defl    $
1923+ E367             >
1923+ E367 54 26       >                dw      Dict_Ptr + 2        // xt
1923+ E369             >Heap_Ptr        defl    $ - $E000           // save current HP
1923+ E369             >
1923+ E369             >Current_HP      defl  $ - $E000             // used to set HP once!
1923+ E369             >
1923+ E369             >//              ______________________________________________________________________
1923+ E369             >//              Dictionary part
1923+ E369             >
1923+ E369             >                org     Dict_Ptr
1923+ 2652             >
1923+ 2652 67 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1923+ 2654             >
1923+ 2654             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1923+ 2654 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1923+ 2654 ~           >
1923+ 2654 ~           >
1923+ 2654             >                endif           ; ok        // for other definitions it "points" the correct handler
1923+ 2654             >                // Use of "; ok" to suppress "warning[fwdref]"
1923+ 2654             >
1923+ 2654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1924+ 2654 E1                           pop     hl
1925+ 2655 7E                           ld      a, (hl)             // low-byte
1926+ 2656 23                           inc     hl
1927+ 2657 66                           ld      h, (hl)             // high-byte
1928+ 2658 6F                           ld      l, a
1929+ 2659 E5                           push    hl
1930+ 265A                              next
1930+ 265A DD E9       >                jp      (ix)
1931+ 265C
1932+ 265C              //  ______________________________________________________________________
1933+ 265C              //
1934+ 265C              // !            n a --
1935+ 265C              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1936+ 265C                              New_Def STORE, "!", is_code, is_normal
1936+ 265C             >
1936+ 265C             >Dict_Ptr        defl    $
1936+ 265C             >
1936+ 265C             >//              ______________________________________________________________________
1936+ 265C             >//              Heap part
1936+ 265C             >
1936+ 265C             >
1936+ 265C             >                org     (Heap_Ptr & $1FFF) + $E000
1936+ E369             >
1936+ E369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1936+ E369             >Latest_Definition defl  Heap_Ptr
1936+ E369             >
1936+ E369             >                // dummy db directives used to calculate length of namec
1936+ E369 21          >                db      "!"
1936+ E36A             >len_NFA         defl    $ - temp_NFA
1936+ E36A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1936+ E369             >
1936+ E369 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1936+ E36A 21          >                db      "!"               // name string in 7-bit ascii, but
1936+ E36B             >                org     $-1                 // alter last byte of Name just above to set
1936+ E36A A1          >                db      {b $} | END_BIT     // msb as name end
1936+ E36B             >
1936+ E36B 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1936+ E36D             >Prev_Ptr        defl    Heap_Ptr
1936+ E36D             >
1936+ E36D             >mirror_Ptr      defl    $
1936+ E36D             >
1936+ E36D 5E 26       >                dw      Dict_Ptr + 2        // xt
1936+ E36F             >Heap_Ptr        defl    $ - $E000           // save current HP
1936+ E36F             >
1936+ E36F             >Current_HP      defl  $ - $E000             // used to set HP once!
1936+ E36F             >
1936+ E36F             >//              ______________________________________________________________________
1936+ E36F             >//              Dictionary part
1936+ E36F             >
1936+ E36F             >                org     Dict_Ptr
1936+ 265C             >
1936+ 265C 6D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1936+ 265E             >
1936+ 265E             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1936+ 265E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1936+ 265E ~           >
1936+ 265E ~           >
1936+ 265E             >                endif           ; ok        // for other definitions it "points" the correct handler
1936+ 265E             >                // Use of "; ok" to suppress "warning[fwdref]"
1936+ 265E             >
1936+ 265E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1937+ 265E D9                           exx
1938+ 265F E1                           pop     hl                  // address
1939+ 2660 D1                           pop     de                  // < n
1940+ 2661 73                           ld      (hl), e             // low-byte
1941+ 2662 23                           inc     hl
1942+ 2663 72                           ld      (hl), d             // high-byte
1943+ 2664 D9                           exx
1944+ 2665                              next
1944+ 2665 DD E9       >                jp      (ix)
1945+ 2667
1946+ 2667              //  ______________________________________________________________________
1947+ 2667              //
1948+ 2667              // c@           a -- c
1949+ 2667              // fetch a character n from address a
1950+ 2667                              New_Def CFETCH, "C@", is_code, is_normal
1950+ 2667             >
1950+ 2667             >Dict_Ptr        defl    $
1950+ 2667             >
1950+ 2667             >//              ______________________________________________________________________
1950+ 2667             >//              Heap part
1950+ 2667             >
1950+ 2667             >
1950+ 2667             >                org     (Heap_Ptr & $1FFF) + $E000
1950+ E36F             >
1950+ E36F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1950+ E36F             >Latest_Definition defl  Heap_Ptr
1950+ E36F             >
1950+ E36F             >                // dummy db directives used to calculate length of namec
1950+ E36F 43 40       >                db      "C@"
1950+ E371             >len_NFA         defl    $ - temp_NFA
1950+ E371             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1950+ E36F             >
1950+ E36F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1950+ E370 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1950+ E372             >                org     $-1                 // alter last byte of Name just above to set
1950+ E371 C0          >                db      {b $} | END_BIT     // msb as name end
1950+ E372             >
1950+ E372 69 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1950+ E374             >Prev_Ptr        defl    Heap_Ptr
1950+ E374             >
1950+ E374             >mirror_Ptr      defl    $
1950+ E374             >
1950+ E374 69 26       >                dw      Dict_Ptr + 2        // xt
1950+ E376             >Heap_Ptr        defl    $ - $E000           // save current HP
1950+ E376             >
1950+ E376             >Current_HP      defl  $ - $E000             // used to set HP once!
1950+ E376             >
1950+ E376             >//              ______________________________________________________________________
1950+ E376             >//              Dictionary part
1950+ E376             >
1950+ E376             >                org     Dict_Ptr
1950+ 2667             >
1950+ 2667 74 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1950+ 2669             >
1950+ 2669             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1950+ 2669 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1950+ 2669 ~           >
1950+ 2669 ~           >
1950+ 2669             >                endif           ; ok        // for other definitions it "points" the correct handler
1950+ 2669             >                // Use of "; ok" to suppress "warning[fwdref]"
1950+ 2669             >
1950+ 2669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1951+ 2669 E1                           pop     hl
1952+ 266A 6E                           ld      l, (hl)             // low-byte
1953+ 266B 26 00                        ld      h, 0
1954+ 266D
1955+ 266D                              psh1
1955+ 266D E5          >                push    hl
1955+ 266E DD E9       >                jp      (ix)
1956+ 2670
1957+ 2670              //  ______________________________________________________________________
1958+ 2670              //
1959+ 2670              // c!           c a --
1960+ 2670              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1961+ 2670                              New_Def CSTORE, "C!", is_code, is_normal
1961+ 2670             >
1961+ 2670             >Dict_Ptr        defl    $
1961+ 2670             >
1961+ 2670             >//              ______________________________________________________________________
1961+ 2670             >//              Heap part
1961+ 2670             >
1961+ 2670             >
1961+ 2670             >                org     (Heap_Ptr & $1FFF) + $E000
1961+ E376             >
1961+ E376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1961+ E376             >Latest_Definition defl  Heap_Ptr
1961+ E376             >
1961+ E376             >                // dummy db directives used to calculate length of namec
1961+ E376 43 21       >                db      "C!"
1961+ E378             >len_NFA         defl    $ - temp_NFA
1961+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1961+ E376             >
1961+ E376 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1961+ E377 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1961+ E379             >                org     $-1                 // alter last byte of Name just above to set
1961+ E378 A1          >                db      {b $} | END_BIT     // msb as name end
1961+ E379             >
1961+ E379 6F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1961+ E37B             >Prev_Ptr        defl    Heap_Ptr
1961+ E37B             >
1961+ E37B             >mirror_Ptr      defl    $
1961+ E37B             >
1961+ E37B 72 26       >                dw      Dict_Ptr + 2        // xt
1961+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
1961+ E37D             >
1961+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
1961+ E37D             >
1961+ E37D             >//              ______________________________________________________________________
1961+ E37D             >//              Dictionary part
1961+ E37D             >
1961+ E37D             >                org     Dict_Ptr
1961+ 2670             >
1961+ 2670 7B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1961+ 2672             >
1961+ 2672             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1961+ 2672 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1961+ 2672 ~           >
1961+ 2672 ~           >
1961+ 2672             >                endif           ; ok        // for other definitions it "points" the correct handler
1961+ 2672             >                // Use of "; ok" to suppress "warning[fwdref]"
1961+ 2672             >
1961+ 2672             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1962+ 2672 D9                           exx
1963+ 2673 E1                           pop     hl                  // < address
1964+ 2674 D1                           pop     de
1965+ 2675 73                           ld      (hl), e             // low-byte
1966+ 2676 D9                           exx
1967+ 2677                              next
1967+ 2677 DD E9       >                jp      (ix)
1968+ 2679
1969+ 2679              //  ______________________________________________________________________
1970+ 2679              //
1971+ 2679              // 2@           a -- d
1972+ 2679              // fetch a 32 bits number d from address a and leaves it on top of the
1973+ 2679              // stack as two single numbers, high part as top of the stack.
1974+ 2679              // A double number is normally kept in CPU registers as HLDE.
1975+ 2679              // On stack a double number is treated as two single numbers
1976+ 2679              // where BC is on the top of the stack and HL is the second from top,
1977+ 2679              // so the sign of the number can be checked on top of stack
1978+ 2679              // and in the stack memory it appears as LHED.
1979+ 2679                              New_Def TWO_FETCH, "2@", is_code, is_normal
1979+ 2679             >
1979+ 2679             >Dict_Ptr        defl    $
1979+ 2679             >
1979+ 2679             >//              ______________________________________________________________________
1979+ 2679             >//              Heap part
1979+ 2679             >
1979+ 2679             >
1979+ 2679             >                org     (Heap_Ptr & $1FFF) + $E000
1979+ E37D             >
1979+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1979+ E37D             >Latest_Definition defl  Heap_Ptr
1979+ E37D             >
1979+ E37D             >                // dummy db directives used to calculate length of namec
1979+ E37D 32 40       >                db      "2@"
1979+ E37F             >len_NFA         defl    $ - temp_NFA
1979+ E37F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1979+ E37D             >
1979+ E37D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1979+ E37E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1979+ E380             >                org     $-1                 // alter last byte of Name just above to set
1979+ E37F C0          >                db      {b $} | END_BIT     // msb as name end
1979+ E380             >
1979+ E380 76 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1979+ E382             >Prev_Ptr        defl    Heap_Ptr
1979+ E382             >
1979+ E382             >mirror_Ptr      defl    $
1979+ E382             >
1979+ E382 7B 26       >                dw      Dict_Ptr + 2        // xt
1979+ E384             >Heap_Ptr        defl    $ - $E000           // save current HP
1979+ E384             >
1979+ E384             >Current_HP      defl  $ - $E000             // used to set HP once!
1979+ E384             >
1979+ E384             >//              ______________________________________________________________________
1979+ E384             >//              Dictionary part
1979+ E384             >
1979+ E384             >                org     Dict_Ptr
1979+ 2679             >
1979+ 2679 82 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1979+ 267B             >
1979+ 267B             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1979+ 267B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1979+ 267B ~           >
1979+ 267B ~           >
1979+ 267B             >                endif           ; ok        // for other definitions it "points" the correct handler
1979+ 267B             >                // Use of "; ok" to suppress "warning[fwdref]"
1979+ 267B             >
1979+ 267B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1980+ 267B D9                           exx
1981+ 267C E1                           pop     hl                  // address
1982+ 267D 5E                           ld      e, (hl)             // low-byte
1983+ 267E 23                           inc     hl
1984+ 267F 56                           ld      d, (hl)             // high-byte
1985+ 2680 23                           inc     hl
1986+ 2681 7E                           ld      a, (hl)             // low-byte
1987+ 2682 23                           inc     hl
1988+ 2683 66                           ld      h, (hl)             // high-byte
1989+ 2684 6F                           ld      l, a
1990+ 2685 E5                           push    hl
1991+ 2686 D5                           push    de
1992+ 2687 D9                           exx
1993+ 2688                              next
1993+ 2688 DD E9       >                jp      (ix)
1994+ 268A
1995+ 268A              //  ______________________________________________________________________
1996+ 268A              //
1997+ 268A              // 2!           d a --
1998+ 268A              // stores a 32 bits number d from address a and leaves it on top of the
1999+ 268A              // stack as two single numbers, high part as top of the stack.
2000+ 268A              // A double number is normally kept in CPU registers as HLDE.
2001+ 268A              // On stack a double number is treated as two single numbers
2002+ 268A              // where BC is on the top of the stack and HL is the second from top,
2003+ 268A              // so the sign of the number can be checked on top of stack
2004+ 268A              // and in the stack memory it appears as LHED.
2005+ 268A                              New_Def TWO_STORE, "2!", is_code, is_normal
2005+ 268A             >
2005+ 268A             >Dict_Ptr        defl    $
2005+ 268A             >
2005+ 268A             >//              ______________________________________________________________________
2005+ 268A             >//              Heap part
2005+ 268A             >
2005+ 268A             >
2005+ 268A             >                org     (Heap_Ptr & $1FFF) + $E000
2005+ E384             >
2005+ E384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2005+ E384             >Latest_Definition defl  Heap_Ptr
2005+ E384             >
2005+ E384             >                // dummy db directives used to calculate length of namec
2005+ E384 32 21       >                db      "2!"
2005+ E386             >len_NFA         defl    $ - temp_NFA
2005+ E386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2005+ E384             >
2005+ E384 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2005+ E385 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2005+ E387             >                org     $-1                 // alter last byte of Name just above to set
2005+ E386 A1          >                db      {b $} | END_BIT     // msb as name end
2005+ E387             >
2005+ E387 7D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2005+ E389             >Prev_Ptr        defl    Heap_Ptr
2005+ E389             >
2005+ E389             >mirror_Ptr      defl    $
2005+ E389             >
2005+ E389 8C 26       >                dw      Dict_Ptr + 2        // xt
2005+ E38B             >Heap_Ptr        defl    $ - $E000           // save current HP
2005+ E38B             >
2005+ E38B             >Current_HP      defl  $ - $E000             // used to set HP once!
2005+ E38B             >
2005+ E38B             >//              ______________________________________________________________________
2005+ E38B             >//              Dictionary part
2005+ E38B             >
2005+ E38B             >                org     Dict_Ptr
2005+ 268A             >
2005+ 268A 89 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2005+ 268C             >
2005+ 268C             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2005+ 268C ~           >                call    runcode ; ok        // for primitive definitions  actual code
2005+ 268C ~           >
2005+ 268C ~           >
2005+ 268C             >                endif           ; ok        // for other definitions it "points" the correct handler
2005+ 268C             >                // Use of "; ok" to suppress "warning[fwdref]"
2005+ 268C             >
2005+ 268C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2006+ 268C D9                           exx
2007+ 268D E1                           pop     hl                  // address
2008+ 268E C1                           pop     bc                  // < high-part
2009+ 268F D1                           pop     de                  // < low-part > Instruction Pointer
2010+ 2690 71                           ld      (hl), c
2011+ 2691 23                           inc     hl
2012+ 2692 70                           ld      (hl), b
2013+ 2693 23                           inc     hl
2014+ 2694 73                           ld      (hl), e
2015+ 2695 23                           inc     hl
2016+ 2696 72                           ld      (hl), d
2017+ 2697 D9                           exx
2018+ 2698                              next
2018+ 2698 DD E9       >                jp      (ix)
2019+ 269A
2020+ 269A              //  ______________________________________________________________________
2021+ 269A              //
2022+ 269A              // p@           a -- c
2023+ 269A              // Read one byte from port a and leave the result on top of stack
2024+ 269A                              New_Def PFETCH, "P@", is_code, is_normal
2024+ 269A             >
2024+ 269A             >Dict_Ptr        defl    $
2024+ 269A             >
2024+ 269A             >//              ______________________________________________________________________
2024+ 269A             >//              Heap part
2024+ 269A             >
2024+ 269A             >
2024+ 269A             >                org     (Heap_Ptr & $1FFF) + $E000
2024+ E38B             >
2024+ E38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2024+ E38B             >Latest_Definition defl  Heap_Ptr
2024+ E38B             >
2024+ E38B             >                // dummy db directives used to calculate length of namec
2024+ E38B 50 40       >                db      "P@"
2024+ E38D             >len_NFA         defl    $ - temp_NFA
2024+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2024+ E38B             >
2024+ E38B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2024+ E38C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2024+ E38E             >                org     $-1                 // alter last byte of Name just above to set
2024+ E38D C0          >                db      {b $} | END_BIT     // msb as name end
2024+ E38E             >
2024+ E38E 84 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2024+ E390             >Prev_Ptr        defl    Heap_Ptr
2024+ E390             >
2024+ E390             >mirror_Ptr      defl    $
2024+ E390             >
2024+ E390 9C 26       >                dw      Dict_Ptr + 2        // xt
2024+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
2024+ E392             >
2024+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
2024+ E392             >
2024+ E392             >//              ______________________________________________________________________
2024+ E392             >//              Dictionary part
2024+ E392             >
2024+ E392             >                org     Dict_Ptr
2024+ 269A             >
2024+ 269A 90 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2024+ 269C             >
2024+ 269C             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2024+ 269C ~           >                call    runcode ; ok        // for primitive definitions  actual code
2024+ 269C ~           >
2024+ 269C ~           >
2024+ 269C             >                endif           ; ok        // for other definitions it "points" the correct handler
2024+ 269C             >                // Use of "; ok" to suppress "warning[fwdref]"
2024+ 269C             >
2024+ 269C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2025+ 269C D9                           exx
2026+ 269D C1                           pop     bc
2027+ 269E 26 00                        ld      h, 0
2028+ 26A0 ED 68                        in      l, (c)
2029+ 26A2 E5                           push    hl
2030+ 26A3 D9                           exx
2031+ 26A4                              next
2031+ 26A4 DD E9       >                jp      (ix)
2032+ 26A6
2033+ 26A6              //  ______________________________________________________________________
2034+ 26A6              //
2035+ 26A6              // p!           c a --
2036+ 26A6              // Send one byte (top of stack) to port a
2037+ 26A6                              New_Def PSTORE, "P!", is_code, is_normal
2037+ 26A6             >
2037+ 26A6             >Dict_Ptr        defl    $
2037+ 26A6             >
2037+ 26A6             >//              ______________________________________________________________________
2037+ 26A6             >//              Heap part
2037+ 26A6             >
2037+ 26A6             >
2037+ 26A6             >                org     (Heap_Ptr & $1FFF) + $E000
2037+ E392             >
2037+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2037+ E392             >Latest_Definition defl  Heap_Ptr
2037+ E392             >
2037+ E392             >                // dummy db directives used to calculate length of namec
2037+ E392 50 21       >                db      "P!"
2037+ E394             >len_NFA         defl    $ - temp_NFA
2037+ E394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2037+ E392             >
2037+ E392 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2037+ E393 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2037+ E395             >                org     $-1                 // alter last byte of Name just above to set
2037+ E394 A1          >                db      {b $} | END_BIT     // msb as name end
2037+ E395             >
2037+ E395 8B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2037+ E397             >Prev_Ptr        defl    Heap_Ptr
2037+ E397             >
2037+ E397             >mirror_Ptr      defl    $
2037+ E397             >
2037+ E397 A8 26       >                dw      Dict_Ptr + 2        // xt
2037+ E399             >Heap_Ptr        defl    $ - $E000           // save current HP
2037+ E399             >
2037+ E399             >Current_HP      defl  $ - $E000             // used to set HP once!
2037+ E399             >
2037+ E399             >//              ______________________________________________________________________
2037+ E399             >//              Dictionary part
2037+ E399             >
2037+ E399             >                org     Dict_Ptr
2037+ 26A6             >
2037+ 26A6 97 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2037+ 26A8             >
2037+ 26A8             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2037+ 26A8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2037+ 26A8 ~           >
2037+ 26A8 ~           >
2037+ 26A8             >                endif           ; ok        // for other definitions it "points" the correct handler
2037+ 26A8             >                // Use of "; ok" to suppress "warning[fwdref]"
2037+ 26A8             >
2037+ 26A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2038+ 26A8 D9                           exx
2039+ 26A9 C1                           pop     bc
2040+ 26AA E1                           pop     hl                  // < c
2041+ 26AB ED 69                        out     (c), l              // low-byte
2042+ 26AD D9                           exx
2043+ 26AE                              next
2043+ 26AE DD E9       >                jp      (ix)
2044+ 26B0
2045+ 26B0
2046+ 26B0              //  ______________________________________________________________________
2047+ 26B0              //
2048+ 26B0              // 2*           n1 -- n2
2049+ 26B0              // doubles the number at top of stack
2050+ 26B0                              New_Def TWO_MUL, "2*", is_code, is_normal
2050+ 26B0             >
2050+ 26B0             >Dict_Ptr        defl    $
2050+ 26B0             >
2050+ 26B0             >//              ______________________________________________________________________
2050+ 26B0             >//              Heap part
2050+ 26B0             >
2050+ 26B0             >
2050+ 26B0             >                org     (Heap_Ptr & $1FFF) + $E000
2050+ E399             >
2050+ E399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2050+ E399             >Latest_Definition defl  Heap_Ptr
2050+ E399             >
2050+ E399             >                // dummy db directives used to calculate length of namec
2050+ E399 32 2A       >                db      "2*"
2050+ E39B             >len_NFA         defl    $ - temp_NFA
2050+ E39B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2050+ E399             >
2050+ E399 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2050+ E39A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2050+ E39C             >                org     $-1                 // alter last byte of Name just above to set
2050+ E39B AA          >                db      {b $} | END_BIT     // msb as name end
2050+ E39C             >
2050+ E39C 92 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2050+ E39E             >Prev_Ptr        defl    Heap_Ptr
2050+ E39E             >
2050+ E39E             >mirror_Ptr      defl    $
2050+ E39E             >
2050+ E39E B2 26       >                dw      Dict_Ptr + 2        // xt
2050+ E3A0             >Heap_Ptr        defl    $ - $E000           // save current HP
2050+ E3A0             >
2050+ E3A0             >Current_HP      defl  $ - $E000             // used to set HP once!
2050+ E3A0             >
2050+ E3A0             >//              ______________________________________________________________________
2050+ E3A0             >//              Dictionary part
2050+ E3A0             >
2050+ E3A0             >                org     Dict_Ptr
2050+ 26B0             >
2050+ 26B0 9E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2050+ 26B2             >
2050+ 26B2             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2050+ 26B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2050+ 26B2 ~           >
2050+ 26B2 ~           >
2050+ 26B2             >                endif           ; ok        // for other definitions it "points" the correct handler
2050+ 26B2             >                // Use of "; ok" to suppress "warning[fwdref]"
2050+ 26B2             >
2050+ 26B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2051+ 26B2              Two_Mul_Ptr:
2052+ 26B2 E1                           pop     hl
2053+ 26B3 29                           add     hl, hl
2054+ 26B4
2055+ 26B4                              psh1
2055+ 26B4 E5          >                push    hl
2055+ 26B5 DD E9       >                jp      (ix)
2056+ 26B7
2057+ 26B7              //  ______________________________________________________________________
2058+ 26B7              //
2059+ 26B7              // 2/           n1 -- n2
2060+ 26B7              // halves the top of stack, sign is unchanged
2061+ 26B7                              New_Def TWO_DIV, "2/", is_code, is_normal
2061+ 26B7             >
2061+ 26B7             >Dict_Ptr        defl    $
2061+ 26B7             >
2061+ 26B7             >//              ______________________________________________________________________
2061+ 26B7             >//              Heap part
2061+ 26B7             >
2061+ 26B7             >
2061+ 26B7             >                org     (Heap_Ptr & $1FFF) + $E000
2061+ E3A0             >
2061+ E3A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2061+ E3A0             >Latest_Definition defl  Heap_Ptr
2061+ E3A0             >
2061+ E3A0             >                // dummy db directives used to calculate length of namec
2061+ E3A0 32 2F       >                db      "2/"
2061+ E3A2             >len_NFA         defl    $ - temp_NFA
2061+ E3A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2061+ E3A0             >
2061+ E3A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2061+ E3A1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2061+ E3A3             >                org     $-1                 // alter last byte of Name just above to set
2061+ E3A2 AF          >                db      {b $} | END_BIT     // msb as name end
2061+ E3A3             >
2061+ E3A3 99 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2061+ E3A5             >Prev_Ptr        defl    Heap_Ptr
2061+ E3A5             >
2061+ E3A5             >mirror_Ptr      defl    $
2061+ E3A5             >
2061+ E3A5 B9 26       >                dw      Dict_Ptr + 2        // xt
2061+ E3A7             >Heap_Ptr        defl    $ - $E000           // save current HP
2061+ E3A7             >
2061+ E3A7             >Current_HP      defl  $ - $E000             // used to set HP once!
2061+ E3A7             >
2061+ E3A7             >//              ______________________________________________________________________
2061+ E3A7             >//              Dictionary part
2061+ E3A7             >
2061+ E3A7             >                org     Dict_Ptr
2061+ 26B7             >
2061+ 26B7 A5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2061+ 26B9             >
2061+ 26B9             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2061+ 26B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2061+ 26B9 ~           >
2061+ 26B9 ~           >
2061+ 26B9             >                endif           ; ok        // for other definitions it "points" the correct handler
2061+ 26B9             >                // Use of "; ok" to suppress "warning[fwdref]"
2061+ 26B9             >
2061+ 26B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2062+ 26B9 E1                           pop     hl
2063+ 26BA CB 2C                        sra     h
2064+ 26BC CB 1D                        rr      l
2065+ 26BE
2066+ 26BE                              psh1
2066+ 26BE E5          >                push    hl
2066+ 26BF DD E9       >                jp      (ix)
2067+ 26C1
2068+ 26C1              //  ______________________________________________________________________
2069+ 26C1              //
2070+ 26C1              // lshift       n1 u -- n2
2071+ 26C1              // bit left shift of u bits
2072+ 26C1                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2072+ 26C1             >
2072+ 26C1             >Dict_Ptr        defl    $
2072+ 26C1             >
2072+ 26C1             >//              ______________________________________________________________________
2072+ 26C1             >//              Heap part
2072+ 26C1             >
2072+ 26C1             >
2072+ 26C1             >                org     (Heap_Ptr & $1FFF) + $E000
2072+ E3A7             >
2072+ E3A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2072+ E3A7             >Latest_Definition defl  Heap_Ptr
2072+ E3A7             >
2072+ E3A7             >                // dummy db directives used to calculate length of namec
2072+ E3A7 4C 53 48 49 >                db      "LSHIFT"
2072+ E3AB 46 54       >
2072+ E3AD             >len_NFA         defl    $ - temp_NFA
2072+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2072+ E3A7             >
2072+ E3A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2072+ E3A8 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2072+ E3AC 46 54       >
2072+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2072+ E3AD D4          >                db      {b $} | END_BIT     // msb as name end
2072+ E3AE             >
2072+ E3AE A0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2072+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2072+ E3B0             >
2072+ E3B0             >mirror_Ptr      defl    $
2072+ E3B0             >
2072+ E3B0 C3 26       >                dw      Dict_Ptr + 2        // xt
2072+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2072+ E3B2             >
2072+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2072+ E3B2             >
2072+ E3B2             >//              ______________________________________________________________________
2072+ E3B2             >//              Dictionary part
2072+ E3B2             >
2072+ E3B2             >                org     Dict_Ptr
2072+ 26C1             >
2072+ 26C1 B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2072+ 26C3             >
2072+ 26C3             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2072+ 26C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2072+ 26C3 ~           >
2072+ 26C3 ~           >
2072+ 26C3             >                endif           ; ok        // for other definitions it "points" the correct handler
2072+ 26C3             >                // Use of "; ok" to suppress "warning[fwdref]"
2072+ 26C3             >
2072+ 26C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2073+ 26C3 D9                           exx
2074+ 26C4 C1                           pop     bc
2075+ 26C5 41                           ld      b, c
2076+ 26C6 D1                           pop     de
2077+ 26C7 ED 28                        bsla    de, b
2078+ 26C9 D5                           push    de
2079+ 26CA D9                           exx
2080+ 26CB                              next
2080+ 26CB DD E9       >                jp      (ix)
2081+ 26CD
2082+ 26CD              //  ______________________________________________________________________
2083+ 26CD              //
2084+ 26CD              // rshift       n1 u -- n2
2085+ 26CD              // bit right shift of u bits
2086+ 26CD                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2086+ 26CD             >
2086+ 26CD             >Dict_Ptr        defl    $
2086+ 26CD             >
2086+ 26CD             >//              ______________________________________________________________________
2086+ 26CD             >//              Heap part
2086+ 26CD             >
2086+ 26CD             >
2086+ 26CD             >                org     (Heap_Ptr & $1FFF) + $E000
2086+ E3B2             >
2086+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2086+ E3B2             >Latest_Definition defl  Heap_Ptr
2086+ E3B2             >
2086+ E3B2             >                // dummy db directives used to calculate length of namec
2086+ E3B2 52 53 48 49 >                db      "RSHIFT"
2086+ E3B6 46 54       >
2086+ E3B8             >len_NFA         defl    $ - temp_NFA
2086+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2086+ E3B2             >
2086+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2086+ E3B3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2086+ E3B7 46 54       >
2086+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2086+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2086+ E3B9             >
2086+ E3B9 A7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2086+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2086+ E3BB             >
2086+ E3BB             >mirror_Ptr      defl    $
2086+ E3BB             >
2086+ E3BB CF 26       >                dw      Dict_Ptr + 2        // xt
2086+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2086+ E3BD             >
2086+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2086+ E3BD             >
2086+ E3BD             >//              ______________________________________________________________________
2086+ E3BD             >//              Dictionary part
2086+ E3BD             >
2086+ E3BD             >                org     Dict_Ptr
2086+ 26CD             >
2086+ 26CD BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2086+ 26CF             >
2086+ 26CF             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2086+ 26CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
2086+ 26CF ~           >
2086+ 26CF ~           >
2086+ 26CF             >                endif           ; ok        // for other definitions it "points" the correct handler
2086+ 26CF             >                // Use of "; ok" to suppress "warning[fwdref]"
2086+ 26CF             >
2086+ 26CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2087+ 26CF D9                           exx
2088+ 26D0 C1                           pop     bc
2089+ 26D1 41                           ld      b, c
2090+ 26D2 D1                           pop     de
2091+ 26D3 ED 2A                        bsrl    de, b
2092+ 26D5 D5                           push    de
2093+ 26D6 D9                           exx
2094+ 26D7                              next
2094+ 26D7 DD E9       >                jp      (ix)
2095+ 26D9
2096+ 26D9              //  ______________________________________________________________________
2097+ 26D9              //
2098+ 26D9              // cells        n1 -- n2
2099+ 26D9              // decrement by 2 top of stack
2100+ 26D9                              New_Def CELLS, "CELLS", is_code, is_normal
2100+ 26D9             >
2100+ 26D9             >Dict_Ptr        defl    $
2100+ 26D9             >
2100+ 26D9             >//              ______________________________________________________________________
2100+ 26D9             >//              Heap part
2100+ 26D9             >
2100+ 26D9             >
2100+ 26D9             >                org     (Heap_Ptr & $1FFF) + $E000
2100+ E3BD             >
2100+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2100+ E3BD             >Latest_Definition defl  Heap_Ptr
2100+ E3BD             >
2100+ E3BD             >                // dummy db directives used to calculate length of namec
2100+ E3BD 43 45 4C 4C >                db      "CELLS"
2100+ E3C1 53          >
2100+ E3C2             >len_NFA         defl    $ - temp_NFA
2100+ E3C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2100+ E3BD             >
2100+ E3BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2100+ E3BE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2100+ E3C2 53          >
2100+ E3C3             >                org     $-1                 // alter last byte of Name just above to set
2100+ E3C2 D3          >                db      {b $} | END_BIT     // msb as name end
2100+ E3C3             >
2100+ E3C3 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2100+ E3C5             >Prev_Ptr        defl    Heap_Ptr
2100+ E3C5             >
2100+ E3C5             >mirror_Ptr      defl    $
2100+ E3C5             >
2100+ E3C5 DB 26       >                dw      Dict_Ptr + 2        // xt
2100+ E3C7             >Heap_Ptr        defl    $ - $E000           // save current HP
2100+ E3C7             >
2100+ E3C7             >Current_HP      defl  $ - $E000             // used to set HP once!
2100+ E3C7             >
2100+ E3C7             >//              ______________________________________________________________________
2100+ E3C7             >//              Dictionary part
2100+ E3C7             >
2100+ E3C7             >                org     Dict_Ptr
2100+ 26D9             >
2100+ 26D9 C5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2100+ 26DB             >
2100+ 26DB             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2100+ 26DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2100+ 26DB ~           >
2100+ 26DB ~           >
2100+ 26DB             >                endif           ; ok        // for other definitions it "points" the correct handler
2100+ 26DB             >                // Use of "; ok" to suppress "warning[fwdref]"
2100+ 26DB             >
2100+ 26DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2101+ 26DB 18 D5                        jr      Two_Mul_Ptr
2102+ 26DD
2103+ 26DD
2104+ 26DD              //  ______________________________________________________________________
2105+ 26DD
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 122  26DD                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26DD              //  ______________________________________________________________________
   2+ 26DD              //
   3+ 26DD              //  L1.asm
   4+ 26DD              //
   5+ 26DD              //  Level-1 definitions and derivate
   6+ 26DD              //  ______________________________________________________________________
   7+ 26DD
   8+ 26DD              //  ______________________________________________________________________
   9+ 26DD              //
  10+ 26DD              // :            -- cccc     ( compile time )
  11+ 26DD              //              i*x -- j*x  ( run time )
  12+ 26DD              // Colon Definition
  13+ 26DD                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26DD             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26DD             >
  13+ 26DD             >Dict_Ptr        defl    $
  13+ 26DD             >
  13+ 26DD             >//              ______________________________________________________________________
  13+ 26DD             >//              Heap part
  13+ 26DD             >
  13+ 26DD             >
  13+ 26DD             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C7             >
  13+ E3C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C7             >Latest_Definition defl  Heap_Ptr
  13+ E3C7             >
  13+ E3C7             >                // dummy db directives used to calculate length of namec
  13+ E3C7 3A          >                db      ":"
  13+ E3C8             >len_NFA         defl    $ - temp_NFA
  13+ E3C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C7             >
  13+ E3C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C8 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C9             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C8 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C9             >
  13+ E3C9 BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CB             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >mirror_Ptr      defl    $
  13+ E3CB             >
  13+ E3CB DF 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CD             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CD             >
  13+ E3CD             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CD             >
  13+ E3CD             >//              ______________________________________________________________________
  13+ E3CD             >//              Dictionary part
  13+ E3CD             >
  13+ E3CD             >                org     Dict_Ptr
  13+ 26DD             >
  13+ 26DD CB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26DF             >
  13+ 26DF             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26DF CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26E2             >
  13+ 26E2             >
  13+ 26E2             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26E2             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26E2             >
  13+ 26E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26E2
  15+ 26E2 D4 2A                        dw      QEXEC                   // ?exec
  16+ 26E4 9F 2A                        dw      STORE_CSP               // !csp
  17+ 26E6 10 28 54 26                  dw      CURRENT, FETCH          // current @
  18+ 26EA 0A 28 5E 26                  dw      CONTEXT, STORE          // context !
  19+ 26EE CA 30                        dw      CREATE                  // create  ( forward )
  20+ 26F0 58 2B                        dw      SMUDGE                  // dmudge
  21+ 26F2 49 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26F4 94 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26F6                                                              // ... immediate
  24+ 26F6              Enter_Ptr:
  25+ 26F6                              // via call coded in CFA
  26+ 26F6 EB                           ex      de, hl //**
  27+ 26F7                              // *** ldhlrp
  28+ 26F7 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26F8 70                           ld      (hl), b
  30+ 26F9 2B                           dec     hl
  31+ 26FA 71                           ld      (hl), c
  32+ 26FB                              // *** ldrphl
  33+ 26FB EB                           ex      de, hl //**
  34+ 26FC
  35+ 26FC
  36+ 26FC C1                           pop     bc                  // points to PFA of "this" word
  37+ 26FD                              next
  37+ 26FD DD E9       >                jp      (ix)
  38+ 26FF
  39+ 26FF              //  ______________________________________________________________________
  40+ 26FF              //
  41+ 26FF              // ;            --
  42+ 26FF              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 26FF                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 26FF             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 26FF             >
  43+ 26FF             >Dict_Ptr        defl    $
  43+ 26FF             >
  43+ 26FF             >//              ______________________________________________________________________
  43+ 26FF             >//              Heap part
  43+ 26FF             >
  43+ 26FF             >
  43+ 26FF             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CD             >
  43+ E3CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CD             >Latest_Definition defl  Heap_Ptr
  43+ E3CD             >
  43+ E3CD             >                // dummy db directives used to calculate length of namec
  43+ E3CD 3B          >                db      ";"
  43+ E3CE             >len_NFA         defl    $ - temp_NFA
  43+ E3CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CD             >
  43+ E3CD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CE 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CF             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CE BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CF             >
  43+ E3CF C7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D1             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >mirror_Ptr      defl    $
  43+ E3D1             >
  43+ E3D1 01 27       >                dw      Dict_Ptr + 2        // xt
  43+ E3D3             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D3             >
  43+ E3D3             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D3             >
  43+ E3D3             >//              ______________________________________________________________________
  43+ E3D3             >//              Dictionary part
  43+ E3D3             >
  43+ E3D3             >                org     Dict_Ptr
  43+ 26FF             >
  43+ 26FF D1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 2701             >
  43+ 2701             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 2701 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 2704             >
  43+ 2704             >
  43+ 2704             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 2704             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 2704             >
  43+ 2704             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 2704
  45+ 2704 F4 2A                        dw      QCSP                    // ?csp
  46+ 2706 1C 2B 0C 25                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 270A 58 2B                        dw      SMUDGE                  // smudge
  48+ 270C 3C 2B                        dw      SQUARED_OPEN            // [
  49+ 270E 0C 25                        dw      EXIT                    // ; immediate
  50+ 2710
  51+ 2710              //  ______________________________________________________________________
  52+ 2710              //
  53+ 2710              // noop         --
  54+ 2710
  55+ 2710                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 2710             >
  55+ 2710             >Dict_Ptr        defl    $
  55+ 2710             >
  55+ 2710             >//              ______________________________________________________________________
  55+ 2710             >//              Heap part
  55+ 2710             >
  55+ 2710             >
  55+ 2710             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D3             >
  55+ E3D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D3             >Latest_Definition defl  Heap_Ptr
  55+ E3D3             >
  55+ E3D3             >                // dummy db directives used to calculate length of namec
  55+ E3D3 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D7             >len_NFA         defl    $ - temp_NFA
  55+ E3D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D3             >
  55+ E3D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D8             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D7 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D8             >
  55+ E3D8 CD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DA             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DA             >
  55+ E3DA             >mirror_Ptr      defl    $
  55+ E3DA             >
  55+ E3DA 12 27       >                dw      Dict_Ptr + 2        // xt
  55+ E3DC             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DC             >
  55+ E3DC             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DC             >
  55+ E3DC             >//              ______________________________________________________________________
  55+ E3DC             >//              Dictionary part
  55+ E3DC             >
  55+ E3DC             >                org     Dict_Ptr
  55+ 2710             >
  55+ 2710 DA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 2712             >
  55+ 2712             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 2712 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 2712 ~           >
  55+ 2712 ~           >
  55+ 2712             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 2712             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 2712             >
  55+ 2712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 2712                              next
  56+ 2712 DD E9       >                jp      (ix)
  57+ 2714
  58+ 2714              //  ______________________________________________________________________
  59+ 2714              //
  60+ 2714              // constant     n -- cccc     ( compile time )
  61+ 2714              //              -- n          ( run time )
  62+ 2714              // Constant definition.
  63+ 2714                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 2714             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 2714             >
  63+ 2714             >Dict_Ptr        defl    $
  63+ 2714             >
  63+ 2714             >//              ______________________________________________________________________
  63+ 2714             >//              Heap part
  63+ 2714             >
  63+ 2714             >
  63+ 2714             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DC             >
  63+ E3DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DC             >Latest_Definition defl  Heap_Ptr
  63+ E3DC             >
  63+ E3DC             >                // dummy db directives used to calculate length of namec
  63+ E3DC 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E0 54 41 4E 54 >
  63+ E3E4             >len_NFA         defl    $ - temp_NFA
  63+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DC             >
  63+ E3DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E4 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E5             >
  63+ E3E5 D3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E7             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >mirror_Ptr      defl    $
  63+ E3E7             >
  63+ E3E7 16 27       >                dw      Dict_Ptr + 2        // xt
  63+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E9             >
  63+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E9             >
  63+ E3E9             >//              ______________________________________________________________________
  63+ E3E9             >//              Dictionary part
  63+ E3E9             >
  63+ E3E9             >                org     Dict_Ptr
  63+ 2714             >
  63+ 2714 E7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 2716             >
  63+ 2716             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 2716 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 2719             >
  63+ 2719             >
  63+ 2719             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 2719             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 2719             >
  63+ 2719             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 2719 CA 30                        dw      CREATE                  // create
  65+ 271B 86 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 271D 94 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 271F              Constant_Ptr:
  68+ 271F
  69+ 271F
  70+ 271F E1                           pop     hl
  71+ 2720
  72+ 2720 7E                           ld      a, (hl)
  73+ 2721 23                           inc     hl
  74+ 2722 66                           ld      h, (hl)
  75+ 2723 6F                           ld      l, a
  76+ 2724 E5                           push    hl
  77+ 2725                              next
  77+ 2725 DD E9       >                jp      (ix)
  78+ 2727
  79+ 2727              //  ______________________________________________________________________
  80+ 2727              //
  81+ 2727              // variable     n -- cccc     ( compile time )
  82+ 2727              //              -- a          ( run time )
  83+ 2727              // Variable definition, n is the initial value.
  84+ 2727                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2727             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2727             >
  84+ 2727             >Dict_Ptr        defl    $
  84+ 2727             >
  84+ 2727             >//              ______________________________________________________________________
  84+ 2727             >//              Heap part
  84+ 2727             >
  84+ 2727             >
  84+ 2727             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E9             >
  84+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E9             >Latest_Definition defl  Heap_Ptr
  84+ E3E9             >
  84+ E3E9             >                // dummy db directives used to calculate length of namec
  84+ E3E9 56 41 52 49 >                db      "VARIABLE"
  84+ E3ED 41 42 4C 45 >
  84+ E3F1             >len_NFA         defl    $ - temp_NFA
  84+ E3F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E9             >
  84+ E3E9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F1 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F2             >
  84+ E3F2 DC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F4             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >mirror_Ptr      defl    $
  84+ E3F4             >
  84+ E3F4 29 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F6             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F6             >
  84+ E3F6             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F6             >
  84+ E3F6             >//              ______________________________________________________________________
  84+ E3F6             >//              Dictionary part
  84+ E3F6             >
  84+ E3F6             >                org     Dict_Ptr
  84+ 2727             >
  84+ 2727 F4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 2729             >
  84+ 2729             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 2729 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 272C             >
  84+ 272C             >
  84+ 272C             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 272C             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 272C             >
  84+ 272C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 272C
  86+ 272C 4B 27                        dw      ZERO
  87+ 272E 16 27                        dw      CONSTANT                // constant
  88+ 2730 94 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 2732              Variable_Ptr:
  90+ 2732
  91+ 2732
  92+ 2732
  93+ 2732
  94+ 2732                              next
  94+ 2732 DD E9       >                jp      (ix)
  95+ 2734
  96+ 2734              //  ______________________________________________________________________
  97+ 2734              //
  98+ 2734              // user         b -- cccc     ( compile time )
  99+ 2734              //              -- a          ( run time )
 100+ 2734              // User variable definition
 101+ 2734                              Colon_Def USER, "USER", is_normal
 101+ 2734             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 2734             >
 101+ 2734             >Dict_Ptr        defl    $
 101+ 2734             >
 101+ 2734             >//              ______________________________________________________________________
 101+ 2734             >//              Heap part
 101+ 2734             >
 101+ 2734             >
 101+ 2734             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F6             >
 101+ E3F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F6             >Latest_Definition defl  Heap_Ptr
 101+ E3F6             >
 101+ E3F6             >                // dummy db directives used to calculate length of namec
 101+ E3F6 55 53 45 52 >                db      "USER"
 101+ E3FA             >len_NFA         defl    $ - temp_NFA
 101+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F6             >
 101+ E3F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FA D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FB             >
 101+ E3FB E9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FD             >
 101+ E3FD             >mirror_Ptr      defl    $
 101+ E3FD             >
 101+ E3FD 36 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FF             >
 101+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FF             >
 101+ E3FF             >//              ______________________________________________________________________
 101+ E3FF             >//              Dictionary part
 101+ E3FF             >
 101+ E3FF             >                org     Dict_Ptr
 101+ 2734             >
 101+ 2734 FD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 2736             >
 101+ 2736             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 2736 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 2739             >
 101+ 2739             >
 101+ 2739             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 2739             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 2739             >
 101+ 2739             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 2739
 103+ 2739 CA 30                        dw      CREATE                  // create
 104+ 273B 95 28                        dw      CCOMMA                  // c,
 105+ 273D 94 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 273F
 107+ 273F
 108+ 273F              User_Ptr:
 109+ 273F                              // via call coded in CFA
 110+ 273F E1                           pop     hl
 111+ 2740
 112+ 2740 7E                           ld      a, (hl)
 113+ 2741 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2744 ED 31                        add     hl, a
 115+ 2746 E5                           push    hl
 116+ 2747                              next
 116+ 2747 DD E9       >                jp      (ix)
 117+ 2749
 118+ 2749              //  ______________________________________________________________________
 119+ 2749              //
 120+ 2749                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 2749             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 2749             >
 120+ 2749             >Dict_Ptr        defl    $
 120+ 2749             >
 120+ 2749             >//              ______________________________________________________________________
 120+ 2749             >//              Heap part
 120+ 2749             >
 120+ 2749             >
 120+ 2749             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FF             >
 120+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FF             >Latest_Definition defl  Heap_Ptr
 120+ E3FF             >
 120+ E3FF             >                // dummy db directives used to calculate length of namec
 120+ E3FF 30          >                db      "0"
 120+ E400             >len_NFA         defl    $ - temp_NFA
 120+ E400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FF             >
 120+ E3FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E400 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E401             >                org     $-1                 // alter last byte of Name just above to set
 120+ E400 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E401             >
 120+ E401 F6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E403             >Prev_Ptr        defl    Heap_Ptr
 120+ E403             >
 120+ E403             >mirror_Ptr      defl    $
 120+ E403             >
 120+ E403 4B 27       >                dw      Dict_Ptr + 2        // xt
 120+ E405             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E405             >
 120+ E405             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E405             >
 120+ E405             >//              ______________________________________________________________________
 120+ E405             >//              Dictionary part
 120+ E405             >
 120+ E405             >                org     Dict_Ptr
 120+ 2749             >
 120+ 2749 03 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 274B             >
 120+ 274B             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 274B CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 274E             >
 120+ 274E             >
 120+ 274E             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 274E             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 274E             >
 120+ 274E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 274E 00 00       >                dw      0
 121+ 2750                              Constant_Def ONE        ,   "1"     ,   1
 121+ 2750             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 2750             >
 121+ 2750             >Dict_Ptr        defl    $
 121+ 2750             >
 121+ 2750             >//              ______________________________________________________________________
 121+ 2750             >//              Heap part
 121+ 2750             >
 121+ 2750             >
 121+ 2750             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E405             >
 121+ E405             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E405             >Latest_Definition defl  Heap_Ptr
 121+ E405             >
 121+ E405             >                // dummy db directives used to calculate length of namec
 121+ E405 31          >                db      "1"
 121+ E406             >len_NFA         defl    $ - temp_NFA
 121+ E406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E405             >
 121+ E405 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E406 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E407             >                org     $-1                 // alter last byte of Name just above to set
 121+ E406 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E407             >
 121+ E407 FF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E409             >Prev_Ptr        defl    Heap_Ptr
 121+ E409             >
 121+ E409             >mirror_Ptr      defl    $
 121+ E409             >
 121+ E409 52 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40B             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40B             >
 121+ E40B             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40B             >
 121+ E40B             >//              ______________________________________________________________________
 121+ E40B             >//              Dictionary part
 121+ E40B             >
 121+ E40B             >                org     Dict_Ptr
 121+ 2750             >
 121+ 2750 09 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 2752             >
 121+ 2752             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 2752 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2755             >
 121+ 2755             >
 121+ 2755             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2755             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2755             >
 121+ 2755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2755 01 00       >                dw      1
 122+ 2757                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2757             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2757             >
 122+ 2757             >Dict_Ptr        defl    $
 122+ 2757             >
 122+ 2757             >//              ______________________________________________________________________
 122+ 2757             >//              Heap part
 122+ 2757             >
 122+ 2757             >
 122+ 2757             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40B             >
 122+ E40B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40B             >Latest_Definition defl  Heap_Ptr
 122+ E40B             >
 122+ E40B             >                // dummy db directives used to calculate length of namec
 122+ E40B 32          >                db      "2"
 122+ E40C             >len_NFA         defl    $ - temp_NFA
 122+ E40C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40B             >
 122+ E40B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40C 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40D             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40C B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40D             >
 122+ E40D 05 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40F             >Prev_Ptr        defl    Heap_Ptr
 122+ E40F             >
 122+ E40F             >mirror_Ptr      defl    $
 122+ E40F             >
 122+ E40F 59 27       >                dw      Dict_Ptr + 2        // xt
 122+ E411             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E411             >
 122+ E411             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E411             >
 122+ E411             >//              ______________________________________________________________________
 122+ E411             >//              Dictionary part
 122+ E411             >
 122+ E411             >                org     Dict_Ptr
 122+ 2757             >
 122+ 2757 0F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 2759             >
 122+ 2759             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 2759 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 275C             >
 122+ 275C             >
 122+ 275C             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 275C             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 275C             >
 122+ 275C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 275C 02 00       >                dw      2
 123+ 275E                              Constant_Def THREE      ,   "3"     ,   3
 123+ 275E             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 275E             >
 123+ 275E             >Dict_Ptr        defl    $
 123+ 275E             >
 123+ 275E             >//              ______________________________________________________________________
 123+ 275E             >//              Heap part
 123+ 275E             >
 123+ 275E             >
 123+ 275E             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E411             >
 123+ E411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E411             >Latest_Definition defl  Heap_Ptr
 123+ E411             >
 123+ E411             >                // dummy db directives used to calculate length of namec
 123+ E411 33          >                db      "3"
 123+ E412             >len_NFA         defl    $ - temp_NFA
 123+ E412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E411             >
 123+ E411 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E412 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E413             >                org     $-1                 // alter last byte of Name just above to set
 123+ E412 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E413             >
 123+ E413 0B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E415             >Prev_Ptr        defl    Heap_Ptr
 123+ E415             >
 123+ E415             >mirror_Ptr      defl    $
 123+ E415             >
 123+ E415 60 27       >                dw      Dict_Ptr + 2        // xt
 123+ E417             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E417             >
 123+ E417             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E417             >
 123+ E417             >//              ______________________________________________________________________
 123+ E417             >//              Dictionary part
 123+ E417             >
 123+ E417             >                org     Dict_Ptr
 123+ 275E             >
 123+ 275E 15 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 2760             >
 123+ 2760             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 2760 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 2763             >
 123+ 2763             >
 123+ 2763             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 2763             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 2763             >
 123+ 2763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 2763 03 00       >                dw      3
 124+ 2765                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2765             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2765             >
 124+ 2765             >Dict_Ptr        defl    $
 124+ 2765             >
 124+ 2765             >//              ______________________________________________________________________
 124+ 2765             >//              Heap part
 124+ 2765             >
 124+ 2765             >
 124+ 2765             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E417             >
 124+ E417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E417             >Latest_Definition defl  Heap_Ptr
 124+ E417             >
 124+ E417             >                // dummy db directives used to calculate length of namec
 124+ E417 2D 31       >                db      "-1"
 124+ E419             >len_NFA         defl    $ - temp_NFA
 124+ E419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E417             >
 124+ E417 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E418 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41A             >                org     $-1                 // alter last byte of Name just above to set
 124+ E419 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41A             >
 124+ E41A 11 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41C             >Prev_Ptr        defl    Heap_Ptr
 124+ E41C             >
 124+ E41C             >mirror_Ptr      defl    $
 124+ E41C             >
 124+ E41C 67 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41E             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41E             >
 124+ E41E             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41E             >
 124+ E41E             >//              ______________________________________________________________________
 124+ E41E             >//              Dictionary part
 124+ E41E             >
 124+ E41E             >                org     Dict_Ptr
 124+ 2765             >
 124+ 2765 1C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2767             >
 124+ 2767             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2767 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 276A             >
 124+ 276A             >
 124+ 276A             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 276A             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 276A             >
 124+ 276A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 276A FF FF       >                dw      -1
 125+ 276C                              Constant_Def BL         ,   "BL"    , $20
 125+ 276C             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 276C             >
 125+ 276C             >Dict_Ptr        defl    $
 125+ 276C             >
 125+ 276C             >//              ______________________________________________________________________
 125+ 276C             >//              Heap part
 125+ 276C             >
 125+ 276C             >
 125+ 276C             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41E             >
 125+ E41E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41E             >Latest_Definition defl  Heap_Ptr
 125+ E41E             >
 125+ E41E             >                // dummy db directives used to calculate length of namec
 125+ E41E 42 4C       >                db      "BL"
 125+ E420             >len_NFA         defl    $ - temp_NFA
 125+ E420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41E             >
 125+ E41E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E421             >                org     $-1                 // alter last byte of Name just above to set
 125+ E420 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E421             >
 125+ E421 17 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E423             >Prev_Ptr        defl    Heap_Ptr
 125+ E423             >
 125+ E423             >mirror_Ptr      defl    $
 125+ E423             >
 125+ E423 6E 27       >                dw      Dict_Ptr + 2        // xt
 125+ E425             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E425             >
 125+ E425             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E425             >
 125+ E425             >//              ______________________________________________________________________
 125+ E425             >//              Dictionary part
 125+ E425             >
 125+ E425             >                org     Dict_Ptr
 125+ 276C             >
 125+ 276C 23 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 276E             >
 125+ 276E             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 276E CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 2771             >
 125+ 2771             >
 125+ 2771             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 2771             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 2771             >
 125+ 2771             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 2771 20 00       >                dw      $20
 126+ 2773                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 2773             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 2773             >
 126+ 2773             >Dict_Ptr        defl    $
 126+ 2773             >
 126+ 2773             >//              ______________________________________________________________________
 126+ 2773             >//              Heap part
 126+ 2773             >
 126+ 2773             >
 126+ 2773             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E425             >
 126+ E425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E425             >Latest_Definition defl  Heap_Ptr
 126+ E425             >
 126+ E425             >                // dummy db directives used to calculate length of namec
 126+ E425 43 2F 4C    >                db      "C/L"
 126+ E428             >len_NFA         defl    $ - temp_NFA
 126+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E425             >
 126+ E425 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E426 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E429             >                org     $-1                 // alter last byte of Name just above to set
 126+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E429             >
 126+ E429 1E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42B             >Prev_Ptr        defl    Heap_Ptr
 126+ E42B             >
 126+ E42B             >mirror_Ptr      defl    $
 126+ E42B             >
 126+ E42B 75 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42D             >
 126+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42D             >
 126+ E42D             >//              ______________________________________________________________________
 126+ E42D             >//              Dictionary part
 126+ E42D             >
 126+ E42D             >                org     Dict_Ptr
 126+ 2773             >
 126+ 2773 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2775             >
 126+ 2775             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2775 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2778             >
 126+ 2778             >
 126+ 2778             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2778             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2778             >
 126+ 2778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2778 40 00       >                dw      64
 127+ 277A                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 277A             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 277A             >
 127+ 277A             >Dict_Ptr        defl    $
 127+ 277A             >
 127+ 277A             >//              ______________________________________________________________________
 127+ 277A             >//              Heap part
 127+ 277A             >
 127+ 277A             >
 127+ 277A             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42D             >
 127+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42D             >Latest_Definition defl  Heap_Ptr
 127+ E42D             >
 127+ E42D             >                // dummy db directives used to calculate length of namec
 127+ E42D 42 2F 42 55 >                db      "B/BUF"
 127+ E431 46          >
 127+ E432             >len_NFA         defl    $ - temp_NFA
 127+ E432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42D             >
 127+ E42D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E432 46          >
 127+ E433             >                org     $-1                 // alter last byte of Name just above to set
 127+ E432 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E433             >
 127+ E433 25 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E435             >Prev_Ptr        defl    Heap_Ptr
 127+ E435             >
 127+ E435             >mirror_Ptr      defl    $
 127+ E435             >
 127+ E435 7C 27       >                dw      Dict_Ptr + 2        // xt
 127+ E437             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E437             >
 127+ E437             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E437             >
 127+ E437             >//              ______________________________________________________________________
 127+ E437             >//              Dictionary part
 127+ E437             >
 127+ E437             >                org     Dict_Ptr
 127+ 277A             >
 127+ 277A 35 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 277C             >
 127+ 277C             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 277C CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 277F             >
 127+ 277F             >
 127+ 277F             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 277F             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 277F             >
 127+ 277F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 277F 00 02       >                dw      512
 128+ 2781                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 2781             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 2781             >
 128+ 2781             >Dict_Ptr        defl    $
 128+ 2781             >
 128+ 2781             >//              ______________________________________________________________________
 128+ 2781             >//              Heap part
 128+ 2781             >
 128+ 2781             >
 128+ 2781             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E437             >
 128+ E437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E437             >Latest_Definition defl  Heap_Ptr
 128+ E437             >
 128+ E437             >                // dummy db directives used to calculate length of namec
 128+ E437 42 2F 53 43 >                db      "B/SCR"
 128+ E43B 52          >
 128+ E43C             >len_NFA         defl    $ - temp_NFA
 128+ E43C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E437             >
 128+ E437 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E438 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43C 52          >
 128+ E43D             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43C D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43D             >
 128+ E43D 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43F             >Prev_Ptr        defl    Heap_Ptr
 128+ E43F             >
 128+ E43F             >mirror_Ptr      defl    $
 128+ E43F             >
 128+ E43F 83 27       >                dw      Dict_Ptr + 2        // xt
 128+ E441             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E441             >
 128+ E441             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E441             >
 128+ E441             >//              ______________________________________________________________________
 128+ E441             >//              Dictionary part
 128+ E441             >
 128+ E441             >                org     Dict_Ptr
 128+ 2781             >
 128+ 2781 3F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 2783             >
 128+ 2783             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 2783 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 2786             >
 128+ 2786             >
 128+ 2786             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 2786             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 2786             >
 128+ 2786             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 2786 02 00       >                dw      2
 129+ 2788                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2788             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2788             >
 129+ 2788             >Dict_Ptr        defl    $
 129+ 2788             >
 129+ 2788             >//              ______________________________________________________________________
 129+ 2788             >//              Heap part
 129+ 2788             >
 129+ 2788             >
 129+ 2788             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E441             >
 129+ E441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E441             >Latest_Definition defl  Heap_Ptr
 129+ E441             >
 129+ E441             >                // dummy db directives used to calculate length of namec
 129+ E441 4C 2F 53 43 >                db      "L/SCR"
 129+ E445 52          >
 129+ E446             >len_NFA         defl    $ - temp_NFA
 129+ E446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E441             >
 129+ E441 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E442 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E446 52          >
 129+ E447             >                org     $-1                 // alter last byte of Name just above to set
 129+ E446 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E447             >
 129+ E447 37 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E449             >Prev_Ptr        defl    Heap_Ptr
 129+ E449             >
 129+ E449             >mirror_Ptr      defl    $
 129+ E449             >
 129+ E449 8A 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44B             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44B             >
 129+ E44B             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44B             >
 129+ E44B             >//              ______________________________________________________________________
 129+ E44B             >//              Dictionary part
 129+ E44B             >
 129+ E44B             >                org     Dict_Ptr
 129+ 2788             >
 129+ 2788 49 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 278A             >
 129+ 278A             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 278A CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 278D             >
 129+ 278D             >
 129+ 278D             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 278D             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 278D             >
 129+ 278D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 278D 10 00       >                dw      16
 130+ 278F
 131+ 278F              //  ______________________________________________________________________
 132+ 278F              //
 133+ 278F              // +origin         --
 134+ 278F              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 278F              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 278F              //              dw      PLUS                    // +
 137+ 278F              //              dw      EXIT                    // ;
 138+ 278F                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 278F             >
 138+ 278F             >Dict_Ptr        defl    $
 138+ 278F             >
 138+ 278F             >//              ______________________________________________________________________
 138+ 278F             >//              Heap part
 138+ 278F             >
 138+ 278F             >
 138+ 278F             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44B             >
 138+ E44B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44B             >Latest_Definition defl  Heap_Ptr
 138+ E44B             >
 138+ E44B             >                // dummy db directives used to calculate length of namec
 138+ E44B 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44F 47 49 4E    >
 138+ E452             >len_NFA         defl    $ - temp_NFA
 138+ E452             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44B             >
 138+ E44B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E450 47 49 4E    >
 138+ E453             >                org     $-1                 // alter last byte of Name just above to set
 138+ E452 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E453             >
 138+ E453 41 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E455             >Prev_Ptr        defl    Heap_Ptr
 138+ E455             >
 138+ E455             >mirror_Ptr      defl    $
 138+ E455             >
 138+ E455 91 27       >                dw      Dict_Ptr + 2        // xt
 138+ E457             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E457             >
 138+ E457             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E457             >
 138+ E457             >//              ______________________________________________________________________
 138+ E457             >//              Dictionary part
 138+ E457             >
 138+ E457             >                org     Dict_Ptr
 138+ 278F             >
 138+ 278F 55 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 2791             >
 138+ 2791             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 2791 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 2791 ~           >
 138+ 2791 ~           >
 138+ 2791             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 2791             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 2791             >
 138+ 2791             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 2791 D9                           exx
 140+ 2792 E1                           pop     hl
 141+ 2793 11 00 20                     ld      de, Cold_origin
 142+ 2796 19                           add     hl, de
 143+ 2797 E5                           push    hl
 144+ 2798 D9                           exx
 145+ 2799                              next
 145+ 2799 DD E9       >                jp      (ix)
 146+ 279B
 147+ 279B
 148+ 279B              //  ______________________________________________________________________
 149+ 279B              //
 150+ 279B                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 279B             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 279B             >
 150+ 279B             >Dict_Ptr        defl    $
 150+ 279B             >
 150+ 279B             >//              ______________________________________________________________________
 150+ 279B             >//              Heap part
 150+ 279B             >
 150+ 279B             >
 150+ 279B             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E457             >
 150+ E457             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E457             >Latest_Definition defl  Heap_Ptr
 150+ E457             >
 150+ E457             >                // dummy db directives used to calculate length of namec
 150+ E457 28 4E 45 58 >                db      "(NEXT)"
 150+ E45B 54 29       >
 150+ E45D             >len_NFA         defl    $ - temp_NFA
 150+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E457             >
 150+ E457 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E458 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45C 54 29       >
 150+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45D A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45E             >
 150+ E45E 4B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E460             >Prev_Ptr        defl    Heap_Ptr
 150+ E460             >
 150+ E460             >mirror_Ptr      defl    $
 150+ E460             >
 150+ E460 9D 27       >                dw      Dict_Ptr + 2        // xt
 150+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E462             >
 150+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E462             >
 150+ E462             >//              ______________________________________________________________________
 150+ E462             >//              Dictionary part
 150+ E462             >
 150+ E462             >                org     Dict_Ptr
 150+ 279B             >
 150+ 279B 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 279D             >
 150+ 279D             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 279D CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 27A0             >
 150+ 27A0             >
 150+ 27A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 27A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 27A0             >
 150+ 27A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 27A0 34 20       >                dw      Next_Ptr
 151+ 27A2
 152+ 27A2              //  ______________________________________________________________________
 153+ 27A2              //
 154+ 27A2
 155+ 27A2                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 27A2             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 27A2             >
 155+ 27A2             >Dict_Ptr        defl    $
 155+ 27A2             >
 155+ 27A2             >//              ______________________________________________________________________
 155+ 27A2             >//              Heap part
 155+ 27A2             >
 155+ 27A2             >
 155+ 27A2             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E462             >
 155+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E462             >Latest_Definition defl  Heap_Ptr
 155+ E462             >
 155+ E462             >                // dummy db directives used to calculate length of namec
 155+ E462 53 30       >                db      "S0"
 155+ E464             >len_NFA         defl    $ - temp_NFA
 155+ E464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E462             >
 155+ E462 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E463 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E465             >                org     $-1                 // alter last byte of Name just above to set
 155+ E464 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E465             >
 155+ E465 57 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E467             >Prev_Ptr        defl    Heap_Ptr
 155+ E467             >
 155+ E467             >mirror_Ptr      defl    $
 155+ E467             >
 155+ E467 A4 27       >                dw      Dict_Ptr + 2        // xt
 155+ E469             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E469             >
 155+ E469             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E469             >
 155+ E469             >//              ______________________________________________________________________
 155+ E469             >//              Dictionary part
 155+ E469             >
 155+ E469             >                org     Dict_Ptr
 155+ 27A2             >
 155+ 27A2 67 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 27A4             >
 155+ 27A4             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 27A4 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 27A7             >
 155+ 27A7             >
 155+ 27A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 27A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 27A7             >
 155+ 27A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 27A7 06          >                db      06
 156+ 27A8                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 27A8             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 27A8             >
 156+ 27A8             >Dict_Ptr        defl    $
 156+ 27A8             >
 156+ 27A8             >//              ______________________________________________________________________
 156+ 27A8             >//              Heap part
 156+ 27A8             >
 156+ 27A8             >
 156+ 27A8             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E469             >
 156+ E469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E469             >Latest_Definition defl  Heap_Ptr
 156+ E469             >
 156+ E469             >                // dummy db directives used to calculate length of namec
 156+ E469 52 30       >                db      "R0"
 156+ E46B             >len_NFA         defl    $ - temp_NFA
 156+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E469             >
 156+ E469 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46B B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46C             >
 156+ E46C 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46E             >Prev_Ptr        defl    Heap_Ptr
 156+ E46E             >
 156+ E46E             >mirror_Ptr      defl    $
 156+ E46E             >
 156+ E46E AA 27       >                dw      Dict_Ptr + 2        // xt
 156+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E470             >
 156+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E470             >
 156+ E470             >//              ______________________________________________________________________
 156+ E470             >//              Dictionary part
 156+ E470             >
 156+ E470             >                org     Dict_Ptr
 156+ 27A8             >
 156+ 27A8 6E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 27AA             >
 156+ 27AA             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 27AA CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 27AD             >
 156+ 27AD             >
 156+ 27AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 27AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 27AD             >
 156+ 27AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 27AD 08          >                db      08
 157+ 27AE                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 27AE             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 27AE             >
 157+ 27AE             >Dict_Ptr        defl    $
 157+ 27AE             >
 157+ 27AE             >//              ______________________________________________________________________
 157+ 27AE             >//              Heap part
 157+ 27AE             >
 157+ 27AE             >
 157+ 27AE             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E470             >
 157+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E470             >Latest_Definition defl  Heap_Ptr
 157+ E470             >
 157+ E470             >                // dummy db directives used to calculate length of namec
 157+ E470 54 49 42    >                db      "TIB"
 157+ E473             >len_NFA         defl    $ - temp_NFA
 157+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E470             >
 157+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E471 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E474             >                org     $-1                 // alter last byte of Name just above to set
 157+ E473 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E474             >
 157+ E474 69 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E476             >Prev_Ptr        defl    Heap_Ptr
 157+ E476             >
 157+ E476             >mirror_Ptr      defl    $
 157+ E476             >
 157+ E476 B0 27       >                dw      Dict_Ptr + 2        // xt
 157+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E478             >
 157+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E478             >
 157+ E478             >//              ______________________________________________________________________
 157+ E478             >//              Dictionary part
 157+ E478             >
 157+ E478             >                org     Dict_Ptr
 157+ 27AE             >
 157+ 27AE 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 27B0             >
 157+ 27B0             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 27B0 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 27B3             >
 157+ 27B3             >
 157+ 27B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 27B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 27B3             >
 157+ 27B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 27B3 0A          >                db      10
 158+ 27B4                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 27B4             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 27B4             >
 158+ 27B4             >Dict_Ptr        defl    $
 158+ 27B4             >
 158+ 27B4             >//              ______________________________________________________________________
 158+ 27B4             >//              Heap part
 158+ 27B4             >
 158+ 27B4             >
 158+ 27B4             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E478             >
 158+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E478             >Latest_Definition defl  Heap_Ptr
 158+ E478             >
 158+ E478             >                // dummy db directives used to calculate length of namec
 158+ E478 57 49 44 54 >                db      "WIDTH"
 158+ E47C 48          >
 158+ E47D             >len_NFA         defl    $ - temp_NFA
 158+ E47D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E478             >
 158+ E478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E479 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47D 48          >
 158+ E47E             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47D C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47E             >
 158+ E47E 70 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E480             >Prev_Ptr        defl    Heap_Ptr
 158+ E480             >
 158+ E480             >mirror_Ptr      defl    $
 158+ E480             >
 158+ E480 B6 27       >                dw      Dict_Ptr + 2        // xt
 158+ E482             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E482             >
 158+ E482             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E482             >
 158+ E482             >//              ______________________________________________________________________
 158+ E482             >//              Dictionary part
 158+ E482             >
 158+ E482             >                org     Dict_Ptr
 158+ 27B4             >
 158+ 27B4 80 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 27B6             >
 158+ 27B6             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 27B6 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 27B9             >
 158+ 27B9             >
 158+ 27B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 27B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 27B9             >
 158+ 27B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 27B9 0C          >                db      12
 159+ 27BA                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 27BA             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 27BA             >
 159+ 27BA             >Dict_Ptr        defl    $
 159+ 27BA             >
 159+ 27BA             >//              ______________________________________________________________________
 159+ 27BA             >//              Heap part
 159+ 27BA             >
 159+ 27BA             >
 159+ 27BA             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E482             >
 159+ E482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E482             >Latest_Definition defl  Heap_Ptr
 159+ E482             >
 159+ E482             >                // dummy db directives used to calculate length of namec
 159+ E482 57 41 52 4E >                db      "WARNING"
 159+ E486 49 4E 47    >
 159+ E489             >len_NFA         defl    $ - temp_NFA
 159+ E489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E482             >
 159+ E482 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E483 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E487 49 4E 47    >
 159+ E48A             >                org     $-1                 // alter last byte of Name just above to set
 159+ E489 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48A             >
 159+ E48A 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48C             >Prev_Ptr        defl    Heap_Ptr
 159+ E48C             >
 159+ E48C             >mirror_Ptr      defl    $
 159+ E48C             >
 159+ E48C BC 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48E             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48E             >
 159+ E48E             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48E             >
 159+ E48E             >//              ______________________________________________________________________
 159+ E48E             >//              Dictionary part
 159+ E48E             >
 159+ E48E             >                org     Dict_Ptr
 159+ 27BA             >
 159+ 27BA 8C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 27BC             >
 159+ 27BC             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 27BC CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 27BF             >
 159+ 27BF             >
 159+ 27BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 27BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 27BF             >
 159+ 27BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 27BF 0E          >                db      14
 160+ 27C0                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 27C0             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 27C0             >
 160+ 27C0             >Dict_Ptr        defl    $
 160+ 27C0             >
 160+ 27C0             >//              ______________________________________________________________________
 160+ 27C0             >//              Heap part
 160+ 27C0             >
 160+ 27C0             >
 160+ 27C0             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48E             >
 160+ E48E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48E             >Latest_Definition defl  Heap_Ptr
 160+ E48E             >
 160+ E48E             >                // dummy db directives used to calculate length of namec
 160+ E48E 46 45 4E 43 >                db      "FENCE"
 160+ E492 45          >
 160+ E493             >len_NFA         defl    $ - temp_NFA
 160+ E493             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48E             >
 160+ E48E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48F 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E493 45          >
 160+ E494             >                org     $-1                 // alter last byte of Name just above to set
 160+ E493 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E494             >
 160+ E494 82 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E496             >Prev_Ptr        defl    Heap_Ptr
 160+ E496             >
 160+ E496             >mirror_Ptr      defl    $
 160+ E496             >
 160+ E496 C2 27       >                dw      Dict_Ptr + 2        // xt
 160+ E498             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E498             >
 160+ E498             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E498             >
 160+ E498             >//              ______________________________________________________________________
 160+ E498             >//              Dictionary part
 160+ E498             >
 160+ E498             >                org     Dict_Ptr
 160+ 27C0             >
 160+ 27C0 96 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27C2             >
 160+ 27C2             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27C2 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27C5             >
 160+ 27C5             >
 160+ 27C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27C5             >
 160+ 27C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27C5 10          >                db      16
 161+ 27C6                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27C6             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27C6             >
 161+ 27C6             >Dict_Ptr        defl    $
 161+ 27C6             >
 161+ 27C6             >//              ______________________________________________________________________
 161+ 27C6             >//              Heap part
 161+ 27C6             >
 161+ 27C6             >
 161+ 27C6             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E498             >
 161+ E498             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E498             >Latest_Definition defl  Heap_Ptr
 161+ E498             >
 161+ E498             >                // dummy db directives used to calculate length of namec
 161+ E498 44 50       >                db      "DP"
 161+ E49A             >len_NFA         defl    $ - temp_NFA
 161+ E49A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E498             >
 161+ E498 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E499 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49B             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49B             >
 161+ E49B 8E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49D             >Prev_Ptr        defl    Heap_Ptr
 161+ E49D             >
 161+ E49D             >mirror_Ptr      defl    $
 161+ E49D             >
 161+ E49D C8 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49F             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49F             >
 161+ E49F             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49F             >
 161+ E49F             >//              ______________________________________________________________________
 161+ E49F             >//              Dictionary part
 161+ E49F             >
 161+ E49F             >                org     Dict_Ptr
 161+ 27C6             >
 161+ 27C6 9D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27C8             >
 161+ 27C8             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27C8 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27CB             >
 161+ 27CB             >
 161+ 27CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27CB             >
 161+ 27CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27CB 12          >                db      18
 162+ 27CC                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27CC             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27CC             >
 162+ 27CC             >Dict_Ptr        defl    $
 162+ 27CC             >
 162+ 27CC             >//              ______________________________________________________________________
 162+ 27CC             >//              Heap part
 162+ 27CC             >
 162+ 27CC             >
 162+ 27CC             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49F             >
 162+ E49F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49F             >Latest_Definition defl  Heap_Ptr
 162+ E49F             >
 162+ E49F             >                // dummy db directives used to calculate length of namec
 162+ E49F 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A3 4C 49 4E 4B >
 162+ E4A7             >len_NFA         defl    $ - temp_NFA
 162+ E4A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49F             >
 162+ E49F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A7 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A8             >
 162+ E4A8 98 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AA             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >mirror_Ptr      defl    $
 162+ E4AA             >
 162+ E4AA CE 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AC             >
 162+ E4AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AC             >
 162+ E4AC             >//              ______________________________________________________________________
 162+ E4AC             >//              Dictionary part
 162+ E4AC             >
 162+ E4AC             >                org     Dict_Ptr
 162+ 27CC             >
 162+ 27CC AA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27CE             >
 162+ 27CE             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27CE CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27D1             >
 162+ 27D1             >
 162+ 27D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27D1             >
 162+ 27D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27D1 14          >                db      20
 163+ 27D2                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27D2             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27D2             >
 163+ 27D2             >Dict_Ptr        defl    $
 163+ 27D2             >
 163+ 27D2             >//              ______________________________________________________________________
 163+ 27D2             >//              Heap part
 163+ 27D2             >
 163+ 27D2             >
 163+ 27D2             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AC             >
 163+ E4AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AC             >Latest_Definition defl  Heap_Ptr
 163+ E4AC             >
 163+ E4AC             >                // dummy db directives used to calculate length of namec
 163+ E4AC 46 49 52 53 >                db      "FIRST"
 163+ E4B0 54          >
 163+ E4B1             >len_NFA         defl    $ - temp_NFA
 163+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AC             >
 163+ E4AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B1 54          >
 163+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B1 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B2             >
 163+ E4B2 9F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >mirror_Ptr      defl    $
 163+ E4B4             >
 163+ E4B4 D4 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B6             >
 163+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B6             >
 163+ E4B6             >//              ______________________________________________________________________
 163+ E4B6             >//              Dictionary part
 163+ E4B6             >
 163+ E4B6             >                org     Dict_Ptr
 163+ 27D2             >
 163+ 27D2 B4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27D4             >
 163+ 27D4             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27D4 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27D7             >
 163+ 27D7             >
 163+ 27D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27D7             >
 163+ 27D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27D7 16          >                db      22
 164+ 27D8                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27D8             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27D8             >
 164+ 27D8             >Dict_Ptr        defl    $
 164+ 27D8             >
 164+ 27D8             >//              ______________________________________________________________________
 164+ 27D8             >//              Heap part
 164+ 27D8             >
 164+ 27D8             >
 164+ 27D8             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B6             >
 164+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B6             >Latest_Definition defl  Heap_Ptr
 164+ E4B6             >
 164+ E4B6             >                // dummy db directives used to calculate length of namec
 164+ E4B6 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BA 54          >
 164+ E4BB             >len_NFA         defl    $ - temp_NFA
 164+ E4BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B6             >
 164+ E4B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BB 54          >
 164+ E4BC             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BB D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BC             >
 164+ E4BC AC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BE             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >mirror_Ptr      defl    $
 164+ E4BE             >
 164+ E4BE DA 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C0             >
 164+ E4C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C0             >
 164+ E4C0             >//              ______________________________________________________________________
 164+ E4C0             >//              Dictionary part
 164+ E4C0             >
 164+ E4C0             >                org     Dict_Ptr
 164+ 27D8             >
 164+ 27D8 BE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27DA             >
 164+ 27DA             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27DA CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27DD             >
 164+ 27DD             >
 164+ 27DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27DD             >
 164+ 27DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27DD 18          >                db      24
 165+ 27DE                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27DE             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27DE             >
 165+ 27DE             >Dict_Ptr        defl    $
 165+ 27DE             >
 165+ 27DE             >//              ______________________________________________________________________
 165+ 27DE             >//              Heap part
 165+ 27DE             >
 165+ 27DE             >
 165+ 27DE             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C0             >
 165+ E4C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C0             >Latest_Definition defl  Heap_Ptr
 165+ E4C0             >
 165+ E4C0             >                // dummy db directives used to calculate length of namec
 165+ E4C0 48 50       >                db      "HP"
 165+ E4C2             >len_NFA         defl    $ - temp_NFA
 165+ E4C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C0             >
 165+ E4C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C1 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C3             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C2 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C3             >
 165+ E4C3 B6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C5             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C5             >
 165+ E4C5             >mirror_Ptr      defl    $
 165+ E4C5             >
 165+ E4C5 E0 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C7             >
 165+ E4C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C7             >
 165+ E4C7             >//              ______________________________________________________________________
 165+ E4C7             >//              Dictionary part
 165+ E4C7             >
 165+ E4C7             >                org     Dict_Ptr
 165+ 27DE             >
 165+ 27DE C5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27E0             >
 165+ 27E0             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27E0 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27E3             >
 165+ 27E3             >
 165+ 27E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27E3             >
 165+ 27E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27E3 1A          >                db      26
 166+ 27E4                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27E4             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27E4             >
 166+ 27E4             >Dict_Ptr        defl    $
 166+ 27E4             >
 166+ 27E4             >//              ______________________________________________________________________
 166+ 27E4             >//              Heap part
 166+ 27E4             >
 166+ 27E4             >
 166+ 27E4             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C7             >
 166+ E4C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C7             >Latest_Definition defl  Heap_Ptr
 166+ E4C7             >
 166+ E4C7             >                // dummy db directives used to calculate length of namec
 166+ E4C7 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CB 45          >
 166+ E4CC             >len_NFA         defl    $ - temp_NFA
 166+ E4CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C7             >
 166+ E4C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CC 45          >
 166+ E4CD             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CC C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CD             >
 166+ E4CD C0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CF             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >mirror_Ptr      defl    $
 166+ E4CF             >
 166+ E4CF E6 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D1             >
 166+ E4D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D1             >
 166+ E4D1             >//              ______________________________________________________________________
 166+ E4D1             >//              Dictionary part
 166+ E4D1             >
 166+ E4D1             >                org     Dict_Ptr
 166+ 27E4             >
 166+ 27E4 CF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27E6             >
 166+ 27E6             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27E6 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27E9             >
 166+ 27E9             >
 166+ 27E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27E9             >
 166+ 27E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27E9 1C          >                db      28
 167+ 27EA                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27EA             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27EA             >
 167+ 27EA             >Dict_Ptr        defl    $
 167+ 27EA             >
 167+ 27EA             >//              ______________________________________________________________________
 167+ 27EA             >//              Heap part
 167+ 27EA             >
 167+ 27EA             >
 167+ 27EA             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D1             >
 167+ E4D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D1             >Latest_Definition defl  Heap_Ptr
 167+ E4D1             >
 167+ E4D1             >                // dummy db directives used to calculate length of namec
 167+ E4D1 42 4C 4B    >                db      "BLK"
 167+ E4D4             >len_NFA         defl    $ - temp_NFA
 167+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D1             >
 167+ E4D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D2 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D4 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D5             >
 167+ E4D5 C7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D7             >
 167+ E4D7             >mirror_Ptr      defl    $
 167+ E4D7             >
 167+ E4D7 EC 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D9             >
 167+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D9             >
 167+ E4D9             >//              ______________________________________________________________________
 167+ E4D9             >//              Dictionary part
 167+ E4D9             >
 167+ E4D9             >                org     Dict_Ptr
 167+ 27EA             >
 167+ 27EA D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27EC             >
 167+ 27EC             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27EC CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27EF             >
 167+ 27EF             >
 167+ 27EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27EF             >
 167+ 27EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27EF 1E          >                db      30
 168+ 27F0                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27F0             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27F0             >
 168+ 27F0             >Dict_Ptr        defl    $
 168+ 27F0             >
 168+ 27F0             >//              ______________________________________________________________________
 168+ 27F0             >//              Heap part
 168+ 27F0             >
 168+ 27F0             >
 168+ 27F0             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D9             >
 168+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D9             >Latest_Definition defl  Heap_Ptr
 168+ E4D9             >
 168+ E4D9             >                // dummy db directives used to calculate length of namec
 168+ E4D9 3E 49 4E    >                db      ">IN"
 168+ E4DC             >len_NFA         defl    $ - temp_NFA
 168+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D9             >
 168+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DA 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DC CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DD             >
 168+ E4DD D1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DF             >
 168+ E4DF             >mirror_Ptr      defl    $
 168+ E4DF             >
 168+ E4DF F2 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E1             >
 168+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E1             >
 168+ E4E1             >//              ______________________________________________________________________
 168+ E4E1             >//              Dictionary part
 168+ E4E1             >
 168+ E4E1             >                org     Dict_Ptr
 168+ 27F0             >
 168+ 27F0 DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27F2             >
 168+ 27F2             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27F2 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27F5             >
 168+ 27F5             >
 168+ 27F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27F5             >
 168+ 27F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27F5 20          >                db      32
 169+ 27F6                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27F6             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27F6             >
 169+ 27F6             >Dict_Ptr        defl    $
 169+ 27F6             >
 169+ 27F6             >//              ______________________________________________________________________
 169+ 27F6             >//              Heap part
 169+ 27F6             >
 169+ 27F6             >
 169+ 27F6             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E1             >
 169+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E1             >Latest_Definition defl  Heap_Ptr
 169+ E4E1             >
 169+ E4E1             >                // dummy db directives used to calculate length of namec
 169+ E4E1 4F 55 54    >                db      "OUT"
 169+ E4E4             >len_NFA         defl    $ - temp_NFA
 169+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E1             >
 169+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E5             >
 169+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E7             >
 169+ E4E7             >mirror_Ptr      defl    $
 169+ E4E7             >
 169+ E4E7 F8 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E9             >
 169+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E9             >
 169+ E4E9             >//              ______________________________________________________________________
 169+ E4E9             >//              Dictionary part
 169+ E4E9             >
 169+ E4E9             >                org     Dict_Ptr
 169+ 27F6             >
 169+ 27F6 E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27F8             >
 169+ 27F8             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27F8 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27FB             >
 169+ 27FB             >
 169+ 27FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27FB             >
 169+ 27FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27FB 22          >                db      34
 170+ 27FC                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27FC             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27FC             >
 170+ 27FC             >Dict_Ptr        defl    $
 170+ 27FC             >
 170+ 27FC             >//              ______________________________________________________________________
 170+ 27FC             >//              Heap part
 170+ 27FC             >
 170+ 27FC             >
 170+ 27FC             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E9             >
 170+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E9             >Latest_Definition defl  Heap_Ptr
 170+ E4E9             >
 170+ E4E9             >                // dummy db directives used to calculate length of namec
 170+ E4E9 53 43 52    >                db      "SCR"
 170+ E4EC             >len_NFA         defl    $ - temp_NFA
 170+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E9             >
 170+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EA 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EC D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4ED             >
 170+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EF             >
 170+ E4EF             >mirror_Ptr      defl    $
 170+ E4EF             >
 170+ E4EF FE 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F1             >
 170+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F1             >
 170+ E4F1             >//              ______________________________________________________________________
 170+ E4F1             >//              Dictionary part
 170+ E4F1             >
 170+ E4F1             >                org     Dict_Ptr
 170+ 27FC             >
 170+ 27FC EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27FE             >
 170+ 27FE             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27FE CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 2801             >
 170+ 2801             >
 170+ 2801             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 2801             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 2801             >
 170+ 2801             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 2801 24          >                db      36
 171+ 2802                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 2802             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 2802             >
 171+ 2802             >Dict_Ptr        defl    $
 171+ 2802             >
 171+ 2802             >//              ______________________________________________________________________
 171+ 2802             >//              Heap part
 171+ 2802             >
 171+ 2802             >
 171+ 2802             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F1             >
 171+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F1             >Latest_Definition defl  Heap_Ptr
 171+ E4F1             >
 171+ E4F1             >                // dummy db directives used to calculate length of namec
 171+ E4F1 4F 46 46 53 >                db      "OFFSET"
 171+ E4F5 45 54       >
 171+ E4F7             >len_NFA         defl    $ - temp_NFA
 171+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F1             >
 171+ E4F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F6 45 54       >
 171+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F7 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F8             >
 171+ E4F8 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FA             >
 171+ E4FA             >mirror_Ptr      defl    $
 171+ E4FA             >
 171+ E4FA 04 28       >                dw      Dict_Ptr + 2        // xt
 171+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FC             >
 171+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FC             >
 171+ E4FC             >//              ______________________________________________________________________
 171+ E4FC             >//              Dictionary part
 171+ E4FC             >
 171+ E4FC             >                org     Dict_Ptr
 171+ 2802             >
 171+ 2802 FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 2804             >
 171+ 2804             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 2804 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 2807             >
 171+ 2807             >
 171+ 2807             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 2807             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 2807             >
 171+ 2807             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2807 26          >                db      38
 172+ 2808                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 2808             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 2808             >
 172+ 2808             >Dict_Ptr        defl    $
 172+ 2808             >
 172+ 2808             >//              ______________________________________________________________________
 172+ 2808             >//              Heap part
 172+ 2808             >
 172+ 2808             >
 172+ 2808             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FC             >
 172+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FC             >Latest_Definition defl  Heap_Ptr
 172+ E4FC             >
 172+ E4FC             >                // dummy db directives used to calculate length of namec
 172+ E4FC 43 4F 4E 54 >                db      "CONTEXT"
 172+ E500 45 58 54    >
 172+ E503             >len_NFA         defl    $ - temp_NFA
 172+ E503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FC             >
 172+ E4FC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E501 45 58 54    >
 172+ E504             >                org     $-1                 // alter last byte of Name just above to set
 172+ E503 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E504             >
 172+ E504 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E506             >Prev_Ptr        defl    Heap_Ptr
 172+ E506             >
 172+ E506             >mirror_Ptr      defl    $
 172+ E506             >
 172+ E506 0A 28       >                dw      Dict_Ptr + 2        // xt
 172+ E508             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E508             >
 172+ E508             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E508             >
 172+ E508             >//              ______________________________________________________________________
 172+ E508             >//              Dictionary part
 172+ E508             >
 172+ E508             >                org     Dict_Ptr
 172+ 2808             >
 172+ 2808 06 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 280A             >
 172+ 280A             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 280A CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 280D             >
 172+ 280D             >
 172+ 280D             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 280D             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 280D             >
 172+ 280D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 280D 28          >                db      40
 173+ 280E                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 280E             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 280E             >
 173+ 280E             >Dict_Ptr        defl    $
 173+ 280E             >
 173+ 280E             >//              ______________________________________________________________________
 173+ 280E             >//              Heap part
 173+ 280E             >
 173+ 280E             >
 173+ 280E             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E508             >
 173+ E508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E508             >Latest_Definition defl  Heap_Ptr
 173+ E508             >
 173+ E508             >                // dummy db directives used to calculate length of namec
 173+ E508 43 55 52 52 >                db      "CURRENT"
 173+ E50C 45 4E 54    >
 173+ E50F             >len_NFA         defl    $ - temp_NFA
 173+ E50F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E508             >
 173+ E508 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E509 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50D 45 4E 54    >
 173+ E510             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50F D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E510             >
 173+ E510 FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E512             >Prev_Ptr        defl    Heap_Ptr
 173+ E512             >
 173+ E512             >mirror_Ptr      defl    $
 173+ E512             >
 173+ E512 10 28       >                dw      Dict_Ptr + 2        // xt
 173+ E514             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E514             >
 173+ E514             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E514             >
 173+ E514             >//              ______________________________________________________________________
 173+ E514             >//              Dictionary part
 173+ E514             >
 173+ E514             >                org     Dict_Ptr
 173+ 280E             >
 173+ 280E 12 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 2810             >
 173+ 2810             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 2810 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 2813             >
 173+ 2813             >
 173+ 2813             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 2813             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 2813             >
 173+ 2813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 2813 2A          >                db      42
 174+ 2814                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 2814             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 2814             >
 174+ 2814             >Dict_Ptr        defl    $
 174+ 2814             >
 174+ 2814             >//              ______________________________________________________________________
 174+ 2814             >//              Heap part
 174+ 2814             >
 174+ 2814             >
 174+ 2814             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E514             >
 174+ E514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E514             >Latest_Definition defl  Heap_Ptr
 174+ E514             >
 174+ E514             >                // dummy db directives used to calculate length of namec
 174+ E514 53 54 41 54 >                db      "STATE"
 174+ E518 45          >
 174+ E519             >len_NFA         defl    $ - temp_NFA
 174+ E519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E514             >
 174+ E514 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E515 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E519 45          >
 174+ E51A             >                org     $-1                 // alter last byte of Name just above to set
 174+ E519 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51A             >
 174+ E51A 08 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51C             >Prev_Ptr        defl    Heap_Ptr
 174+ E51C             >
 174+ E51C             >mirror_Ptr      defl    $
 174+ E51C             >
 174+ E51C 16 28       >                dw      Dict_Ptr + 2        // xt
 174+ E51E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51E             >
 174+ E51E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51E             >
 174+ E51E             >//              ______________________________________________________________________
 174+ E51E             >//              Dictionary part
 174+ E51E             >
 174+ E51E             >                org     Dict_Ptr
 174+ 2814             >
 174+ 2814 1C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 2816             >
 174+ 2816             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 2816 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 2819             >
 174+ 2819             >
 174+ 2819             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 2819             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 2819             >
 174+ 2819             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 2819 2C          >                db      44
 175+ 281A                              User_Def BASE       , "BASE"      , 46 //
 175+ 281A             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 281A             >
 175+ 281A             >Dict_Ptr        defl    $
 175+ 281A             >
 175+ 281A             >//              ______________________________________________________________________
 175+ 281A             >//              Heap part
 175+ 281A             >
 175+ 281A             >
 175+ 281A             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51E             >
 175+ E51E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51E             >Latest_Definition defl  Heap_Ptr
 175+ E51E             >
 175+ E51E             >                // dummy db directives used to calculate length of namec
 175+ E51E 42 41 53 45 >                db      "BASE"
 175+ E522             >len_NFA         defl    $ - temp_NFA
 175+ E522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51E             >
 175+ E51E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51F 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E523             >                org     $-1                 // alter last byte of Name just above to set
 175+ E522 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E523             >
 175+ E523 14 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E525             >Prev_Ptr        defl    Heap_Ptr
 175+ E525             >
 175+ E525             >mirror_Ptr      defl    $
 175+ E525             >
 175+ E525 1C 28       >                dw      Dict_Ptr + 2        // xt
 175+ E527             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E527             >
 175+ E527             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E527             >
 175+ E527             >//              ______________________________________________________________________
 175+ E527             >//              Dictionary part
 175+ E527             >
 175+ E527             >                org     Dict_Ptr
 175+ 281A             >
 175+ 281A 25 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 281C             >
 175+ 281C             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 281C CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 281F             >
 175+ 281F             >
 175+ 281F             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 281F             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 281F             >
 175+ 281F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 281F 2E          >                db      46
 176+ 2820                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 2820             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 2820             >
 176+ 2820             >Dict_Ptr        defl    $
 176+ 2820             >
 176+ 2820             >//              ______________________________________________________________________
 176+ 2820             >//              Heap part
 176+ 2820             >
 176+ 2820             >
 176+ 2820             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E527             >
 176+ E527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E527             >Latest_Definition defl  Heap_Ptr
 176+ E527             >
 176+ E527             >                // dummy db directives used to calculate length of namec
 176+ E527 44 50 4C    >                db      "DPL"
 176+ E52A             >len_NFA         defl    $ - temp_NFA
 176+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E527             >
 176+ E527 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E528 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52A CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52B             >
 176+ E52B 1E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52D             >Prev_Ptr        defl    Heap_Ptr
 176+ E52D             >
 176+ E52D             >mirror_Ptr      defl    $
 176+ E52D             >
 176+ E52D 22 28       >                dw      Dict_Ptr + 2        // xt
 176+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52F             >
 176+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52F             >
 176+ E52F             >//              ______________________________________________________________________
 176+ E52F             >//              Dictionary part
 176+ E52F             >
 176+ E52F             >                org     Dict_Ptr
 176+ 2820             >
 176+ 2820 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 2822             >
 176+ 2822             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 2822 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2825             >
 176+ 2825             >
 176+ 2825             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2825             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2825             >
 176+ 2825             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2825 30          >                db      48
 177+ 2826                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 2826             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 2826             >
 177+ 2826             >Dict_Ptr        defl    $
 177+ 2826             >
 177+ 2826             >//              ______________________________________________________________________
 177+ 2826             >//              Heap part
 177+ 2826             >
 177+ 2826             >
 177+ 2826             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52F             >
 177+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52F             >Latest_Definition defl  Heap_Ptr
 177+ E52F             >
 177+ E52F             >                // dummy db directives used to calculate length of namec
 177+ E52F 46 4C 44    >                db      "FLD"
 177+ E532             >len_NFA         defl    $ - temp_NFA
 177+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52F             >
 177+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E530 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E533             >                org     $-1                 // alter last byte of Name just above to set
 177+ E532 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E533             >
 177+ E533 27 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E535             >Prev_Ptr        defl    Heap_Ptr
 177+ E535             >
 177+ E535             >mirror_Ptr      defl    $
 177+ E535             >
 177+ E535 28 28       >                dw      Dict_Ptr + 2        // xt
 177+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E537             >
 177+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E537             >
 177+ E537             >//              ______________________________________________________________________
 177+ E537             >//              Dictionary part
 177+ E537             >
 177+ E537             >                org     Dict_Ptr
 177+ 2826             >
 177+ 2826 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2828             >
 177+ 2828             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2828 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 282B             >
 177+ 282B             >
 177+ 282B             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 282B             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 282B             >
 177+ 282B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 282B 32          >                db      50
 178+ 282C                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 282C             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 282C             >
 178+ 282C             >Dict_Ptr        defl    $
 178+ 282C             >
 178+ 282C             >//              ______________________________________________________________________
 178+ 282C             >//              Heap part
 178+ 282C             >
 178+ 282C             >
 178+ 282C             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E537             >
 178+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E537             >Latest_Definition defl  Heap_Ptr
 178+ E537             >
 178+ E537             >                // dummy db directives used to calculate length of namec
 178+ E537 43 53 50    >                db      "CSP"
 178+ E53A             >len_NFA         defl    $ - temp_NFA
 178+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E537             >
 178+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E538 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53A D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53B             >
 178+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53D             >Prev_Ptr        defl    Heap_Ptr
 178+ E53D             >
 178+ E53D             >mirror_Ptr      defl    $
 178+ E53D             >
 178+ E53D 2E 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53F             >
 178+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53F             >
 178+ E53F             >//              ______________________________________________________________________
 178+ E53F             >//              Dictionary part
 178+ E53F             >
 178+ E53F             >                org     Dict_Ptr
 178+ 282C             >
 178+ 282C 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 282E             >
 178+ 282E             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 282E CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 2831             >
 178+ 2831             >
 178+ 2831             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 2831             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 2831             >
 178+ 2831             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 2831 34          >                db      52
 179+ 2832                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 2832             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 2832             >
 179+ 2832             >Dict_Ptr        defl    $
 179+ 2832             >
 179+ 2832             >//              ______________________________________________________________________
 179+ 2832             >//              Heap part
 179+ 2832             >
 179+ 2832             >
 179+ 2832             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53F             >
 179+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53F             >Latest_Definition defl  Heap_Ptr
 179+ E53F             >
 179+ E53F             >                // dummy db directives used to calculate length of namec
 179+ E53F 52 23       >                db      "R#"
 179+ E541             >len_NFA         defl    $ - temp_NFA
 179+ E541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53F             >
 179+ E53F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E540 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E542             >                org     $-1                 // alter last byte of Name just above to set
 179+ E541 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E542             >
 179+ E542 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E544             >Prev_Ptr        defl    Heap_Ptr
 179+ E544             >
 179+ E544             >mirror_Ptr      defl    $
 179+ E544             >
 179+ E544 34 28       >                dw      Dict_Ptr + 2        // xt
 179+ E546             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E546             >
 179+ E546             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E546             >
 179+ E546             >//              ______________________________________________________________________
 179+ E546             >//              Dictionary part
 179+ E546             >
 179+ E546             >                org     Dict_Ptr
 179+ 2832             >
 179+ 2832 44 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 2834             >
 179+ 2834             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 2834 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2837             >
 179+ 2837             >
 179+ 2837             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2837             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2837             >
 179+ 2837             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2837 36          >                db      54
 180+ 2838                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2838             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2838             >
 180+ 2838             >Dict_Ptr        defl    $
 180+ 2838             >
 180+ 2838             >//              ______________________________________________________________________
 180+ 2838             >//              Heap part
 180+ 2838             >
 180+ 2838             >
 180+ 2838             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E546             >
 180+ E546             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E546             >Latest_Definition defl  Heap_Ptr
 180+ E546             >
 180+ E546             >                // dummy db directives used to calculate length of namec
 180+ E546 48 4C 44    >                db      "HLD"
 180+ E549             >len_NFA         defl    $ - temp_NFA
 180+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E546             >
 180+ E546 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E547 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 180+ E549 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54A             >
 180+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54C             >Prev_Ptr        defl    Heap_Ptr
 180+ E54C             >
 180+ E54C             >mirror_Ptr      defl    $
 180+ E54C             >
 180+ E54C 3A 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54E             >
 180+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54E             >
 180+ E54E             >//              ______________________________________________________________________
 180+ E54E             >//              Dictionary part
 180+ E54E             >
 180+ E54E             >                org     Dict_Ptr
 180+ 2838             >
 180+ 2838 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 283A             >
 180+ 283A             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 283A CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 283D             >
 180+ 283D             >
 180+ 283D             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 283D             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 283D             >
 180+ 283D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 283D 38          >                db      56
 181+ 283E                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 283E             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 283E             >
 181+ 283E             >Dict_Ptr        defl    $
 181+ 283E             >
 181+ 283E             >//              ______________________________________________________________________
 181+ 283E             >//              Heap part
 181+ 283E             >
 181+ 283E             >
 181+ 283E             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54E             >
 181+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54E             >Latest_Definition defl  Heap_Ptr
 181+ E54E             >
 181+ E54E             >                // dummy db directives used to calculate length of namec
 181+ E54E 55 53 45 44 >                db      "USED"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54E             >
 181+ E54E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54F 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 46 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 40 28       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 283E             >
 181+ 283E 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 2840             >
 181+ 2840             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 2840 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 2843             >
 181+ 2843             >
 181+ 2843             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 2843             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 2843             >
 181+ 2843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 2843 3A          >                db      58
 182+ 2844                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2844             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2844             >
 182+ 2844             >Dict_Ptr        defl    $
 182+ 2844             >
 182+ 2844             >//              ______________________________________________________________________
 182+ 2844             >//              Heap part
 182+ 2844             >
 182+ 2844             >
 182+ 2844             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 46 28       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 2844             >
 182+ 2844 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 2846             >
 182+ 2846             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 2846 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 2849             >
 182+ 2849             >
 182+ 2849             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 2849             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 2849             >
 182+ 2849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 2849 3C          >                db      60
 183+ 284A                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 284A             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 284A             >
 183+ 284A             >Dict_Ptr        defl    $
 183+ 284A             >
 183+ 284A             >//              ______________________________________________________________________
 183+ 284A             >//              Heap part
 183+ 284A             >
 183+ 284A             >
 183+ 284A             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 4C 28       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 284A             >
 183+ 284A 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 284C             >
 183+ 284C             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 284C CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 284F             >
 183+ 284F             >
 183+ 284F             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 284F             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 284F             >
 183+ 284F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 284F 3E          >                db      62
 184+ 2850                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 2850             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 2850             >
 184+ 2850             >Dict_Ptr        defl    $
 184+ 2850             >
 184+ 2850             >//              ______________________________________________________________________
 184+ 2850             >//              Heap part
 184+ 2850             >
 184+ 2850             >
 184+ 2850             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 52 28       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 2850             >
 184+ 2850 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 2852             >
 184+ 2852             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 2852 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2855             >
 184+ 2855             >
 184+ 2855             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2855             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2855             >
 184+ 2855             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2855 40          >                db      64
 185+ 2856                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 2856             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 2856             >
 185+ 2856             >Dict_Ptr        defl    $
 185+ 2856             >
 185+ 2856             >//              ______________________________________________________________________
 185+ 2856             >//              Heap part
 185+ 2856             >
 185+ 2856             >
 185+ 2856             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 58 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 2856             >
 185+ 2856 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2858             >
 185+ 2858             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2858 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 285B             >
 185+ 285B             >
 185+ 285B             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 285B             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 285B             >
 185+ 285B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 285B 42          >                db      66
 186+ 285C                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 285C             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 285C             >
 186+ 285C             >Dict_Ptr        defl    $
 186+ 285C             >
 186+ 285C             >//              ______________________________________________________________________
 186+ 285C             >//              Heap part
 186+ 285C             >
 186+ 285C             >
 186+ 285C             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 5E 28       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 285C             >
 186+ 285C 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 285E             >
 186+ 285E             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 285E CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 2861             >
 186+ 2861             >
 186+ 2861             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 2861             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 2861             >
 186+ 2861             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 2861 44          >                db      68
 187+ 2862                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 2862             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 2862             >
 187+ 2862             >Dict_Ptr        defl    $
 187+ 2862             >
 187+ 2862             >//              ______________________________________________________________________
 187+ 2862             >//              Heap part
 187+ 2862             >
 187+ 2862             >
 187+ 2862             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 64 28       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 2862             >
 187+ 2862 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2864             >
 187+ 2864             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2864 CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2867             >
 187+ 2867             >
 187+ 2867             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2867             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2867             >
 187+ 2867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2867 46          >                db      70
 188+ 2868                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2868             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2868             >
 188+ 2868             >Dict_Ptr        defl    $
 188+ 2868             >
 188+ 2868             >//              ______________________________________________________________________
 188+ 2868             >//              Heap part
 188+ 2868             >
 188+ 2868             >
 188+ 2868             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A 6A 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 2868             >
 188+ 2868 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 286A             >
 188+ 286A             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 286A CD 3F 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 286D             >
 188+ 286D             >
 188+ 286D             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 286D             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 286D             >
 188+ 286D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 286D 48          >                db      72
 189+ 286E
 190+ 286E              //  ______________________________________________________________________
 191+ 286E              //
 192+ 286E              // here         -- a
 193+ 286E                              Colon_Def HERE, "HERE", is_normal
 193+ 286E             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 286E             >
 193+ 286E             >Dict_Ptr        defl    $
 193+ 286E             >
 193+ 286E             >//              ______________________________________________________________________
 193+ 286E             >//              Heap part
 193+ 286E             >
 193+ 286E             >
 193+ 286E             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 70 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 286E             >
 193+ 286E A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 2870             >
 193+ 2870             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 2870 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 2873             >
 193+ 2873             >
 193+ 2873             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 2873             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 2873             >
 193+ 2873             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 2873 C8 27 54 26                  dw      DP, FETCH               // dp @
 195+ 2877 0C 25                        dw      EXIT                    // ;
 196+ 2879
 197+ 2879              //  ______________________________________________________________________
 198+ 2879              //
 199+ 2879              // allot        n --
 200+ 2879                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 2879             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 2879             >
 200+ 2879             >Dict_Ptr        defl    $
 200+ 2879             >
 200+ 2879             >//              ______________________________________________________________________
 200+ 2879             >//              Heap part
 200+ 2879             >
 200+ 2879             >
 200+ 2879             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD 7B 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 2879             >
 200+ 2879 AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 287B             >
 200+ 287B             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 287B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 287E             >
 200+ 287E             >
 200+ 287E             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 287E             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 287E             >
 200+ 287E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 287E C8 27 3C 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 2882 0C 25                        dw      EXIT                    // ;
 203+ 2884
 204+ 2884              //  ______________________________________________________________________
 205+ 2884              //
 206+ 2884              // comma        n --
 207+ 2884                              Colon_Def COMMA, ",", is_normal
 207+ 2884             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2884             >
 207+ 2884             >Dict_Ptr        defl    $
 207+ 2884             >
 207+ 2884             >//              ______________________________________________________________________
 207+ 2884             >//              Heap part
 207+ 2884             >
 207+ 2884             >
 207+ 2884             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 86 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 2884             >
 207+ 2884 B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 2886             >
 207+ 2886             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 2886 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 2889             >
 207+ 2889             >
 207+ 2889             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 2889             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 2889             >
 207+ 2889             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 2889 70 28 5E 26                  dw      HERE, STORE             // here !
 209+ 288D 59 27 7B 28                  dw      TWO, ALLOT              // 2 allot
 210+ 2891 0C 25                        dw      EXIT                    // ;
 211+ 2893
 212+ 2893              //  ______________________________________________________________________
 213+ 2893              //
 214+ 2893              // ccomma       c --
 215+ 2893                              Colon_Def CCOMMA, "C,", is_normal
 215+ 2893             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 2893             >
 215+ 2893             >Dict_Ptr        defl    $
 215+ 2893             >
 215+ 2893             >//              ______________________________________________________________________
 215+ 2893             >//              Heap part
 215+ 2893             >
 215+ 2893             >
 215+ 2893             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA 95 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 2893             >
 215+ 2893 BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2895             >
 215+ 2895             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2895 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2898             >
 215+ 2898             >
 215+ 2898             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2898             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2898             >
 215+ 2898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2898 70 28 72 26                  dw      HERE, CSTORE            // here c!
 217+ 289C 52 27 7B 28                  dw      ONE, ALLOT              // 1 allot
 218+ 28A0 0C 25                        dw      EXIT                    // ;
 219+ 28A2
 220+ 28A2              //  ______________________________________________________________________
 221+ 28A2              //
 222+ 28A2              // hpcomma      n --
 223+ 28A2              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 28A2              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 28A2              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 28A2              //              dw      EXIT                    // ;
 227+ 28A2
 228+ 28A2              //  ______________________________________________________________________
 229+ 28A2              //
 230+ 28A2              // s>d          n -- d
 231+ 28A2              // converts a single precision integer in a double precision
 232+ 28A2                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 28A2             >
 232+ 28A2             >Dict_Ptr        defl    $
 232+ 28A2             >
 232+ 28A2             >//              ______________________________________________________________________
 232+ 28A2             >//              Heap part
 232+ 28A2             >
 232+ 28A2             >
 232+ 28A2             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BC             >
 232+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BC             >Latest_Definition defl  Heap_Ptr
 232+ E5BC             >
 232+ E5BC             >                // dummy db directives used to calculate length of namec
 232+ E5BC 53 3E 44    >                db      "S>D"
 232+ E5BF             >len_NFA         defl    $ - temp_NFA
 232+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BC             >
 232+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C0             >
 232+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C2             >
 232+ E5C2             >mirror_Ptr      defl    $
 232+ E5C2             >
 232+ E5C2 A4 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C4             >
 232+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C4             >
 232+ E5C4             >//              ______________________________________________________________________
 232+ E5C4             >//              Dictionary part
 232+ E5C4             >
 232+ E5C4             >                org     Dict_Ptr
 232+ 28A2             >
 232+ 28A2 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 28A4             >
 232+ 28A4             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 28A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 28A4 ~           >
 232+ 28A4 ~           >
 232+ 28A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 28A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 28A4             >
 232+ 28A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 28A4 E1                           pop     hl
 234+ 28A5 7C                           ld      a, h
 235+ 28A6 E5                           push    hl
 236+ 28A7 17                           rla
 237+ 28A8 ED 62                        sbc     hl, hl
 238+ 28AA E5                           push    hl
 239+ 28AB                              next
 239+ 28AB DD E9       >                jp      (ix)
 240+ 28AD
 241+ 28AD              //  ______________________________________________________________________
 242+ 28AD              //
 243+ 28AD              // -            n1 n2 -- n3
 244+ 28AD              // subtraction
 245+ 28AD                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 28AD             >
 245+ 28AD             >Dict_Ptr        defl    $
 245+ 28AD             >
 245+ 28AD             >//              ______________________________________________________________________
 245+ 28AD             >//              Heap part
 245+ 28AD             >
 245+ 28AD             >
 245+ 28AD             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C4             >
 245+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C4             >Latest_Definition defl  Heap_Ptr
 245+ E5C4             >
 245+ E5C4             >                // dummy db directives used to calculate length of namec
 245+ E5C4 2D          >                db      "-"
 245+ E5C5             >len_NFA         defl    $ - temp_NFA
 245+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C4             >
 245+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C6             >
 245+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >mirror_Ptr      defl    $
 245+ E5C8             >
 245+ E5C8 AF 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CA             >
 245+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CA             >
 245+ E5CA             >//              ______________________________________________________________________
 245+ E5CA             >//              Dictionary part
 245+ E5CA             >
 245+ E5CA             >                org     Dict_Ptr
 245+ 28AD             >
 245+ 28AD C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 28AF             >
 245+ 28AF             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 28AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 28AF ~           >
 245+ 28AF ~           >
 245+ 28AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 28AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 28AF             >
 245+ 28AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 28AF D9                           exx
 247+ 28B0 D1                           pop     de
 248+ 28B1 E1                           pop     hl
 249+ 28B2 A7                           and     a
 250+ 28B3 ED 52                        sbc     hl, de
 251+ 28B5 E5                           push    hl
 252+ 28B6 D9                           exx
 253+ 28B7                              next
 253+ 28B7 DD E9       >                jp      (ix)
 254+ 28B9
 255+ 28B9
 256+ 28B9              //  ______________________________________________________________________
 257+ 28B9              //
 258+ 28B9              // =            n1 n2 -- n3
 259+ 28B9              // equals
 260+ 28B9                              Colon_Def EQUALS, "=", is_normal
 260+ 28B9             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 28B9             >
 260+ 28B9             >Dict_Ptr        defl    $
 260+ 28B9             >
 260+ 28B9             >//              ______________________________________________________________________
 260+ 28B9             >//              Heap part
 260+ 28B9             >
 260+ 28B9             >
 260+ 28B9             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CA             >
 260+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CA             >Latest_Definition defl  Heap_Ptr
 260+ E5CA             >
 260+ E5CA             >                // dummy db directives used to calculate length of namec
 260+ E5CA 3D          >                db      "="
 260+ E5CB             >len_NFA         defl    $ - temp_NFA
 260+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CA             >
 260+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CC             >
 260+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >mirror_Ptr      defl    $
 260+ E5CE             >
 260+ E5CE BB 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D0             >
 260+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D0             >
 260+ E5D0             >//              ______________________________________________________________________
 260+ E5D0             >//              Dictionary part
 260+ E5D0             >
 260+ E5D0             >                org     Dict_Ptr
 260+ 28B9             >
 260+ 28B9 CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 28BB             >
 260+ 28BB             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 28BB CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 28BE             >
 260+ 28BE             >
 260+ 28BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 28BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 28BE             >
 260+ 28BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 28BE AF 28 31 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28C2 0C 25                        dw      EXIT                    // ;
 263+ 28C4
 264+ 28C4              //  ______________________________________________________________________
 265+ 28C4              //
 266+ 28C4              // u<           u1 u2 -- u3
 267+ 28C4              // unsigned less-than
 268+ 28C4                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28C4             >
 268+ 28C4             >Dict_Ptr        defl    $
 268+ 28C4             >
 268+ 28C4             >//              ______________________________________________________________________
 268+ 28C4             >//              Heap part
 268+ 28C4             >
 268+ 28C4             >
 268+ 28C4             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D0             >
 268+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D0             >Latest_Definition defl  Heap_Ptr
 268+ E5D0             >
 268+ E5D0             >                // dummy db directives used to calculate length of namec
 268+ E5D0 55 3C       >                db      "U<"
 268+ E5D2             >len_NFA         defl    $ - temp_NFA
 268+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D0             >
 268+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D3             >
 268+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D5             >
 268+ E5D5             >mirror_Ptr      defl    $
 268+ E5D5             >
 268+ E5D5 C6 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D7             >
 268+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D7             >
 268+ E5D7             >//              ______________________________________________________________________
 268+ E5D7             >//              Dictionary part
 268+ E5D7             >
 268+ E5D7             >                org     Dict_Ptr
 268+ 28C4             >
 268+ 28C4 D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28C6             >
 268+ 28C6             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28C6 ~           >
 268+ 28C6 ~           >
 268+ 28C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28C6             >
 268+ 28C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28C6 D9                           exx
 270+ 28C7 D1                           pop     de
 271+ 28C8 E1                           pop     hl
 272+ 28C9 A7                           and     a
 273+ 28CA ED 52                        sbc     hl, de
 274+ 28CC ED 62                        sbc     hl, hl
 275+ 28CE E5                           push    hl
 276+ 28CF D9                           exx
 277+ 28D0                              next
 277+ 28D0 DD E9       >                jp      (ix)
 278+ 28D2
 279+ 28D2              //  ______________________________________________________________________
 280+ 28D2              //
 281+ 28D2              // <           n1 n2 -- n3
 282+ 28D2              // less-than
 283+ 28D2                              New_Def LESS, "<", is_code, is_normal
 283+ 28D2             >
 283+ 28D2             >Dict_Ptr        defl    $
 283+ 28D2             >
 283+ 28D2             >//              ______________________________________________________________________
 283+ 28D2             >//              Heap part
 283+ 28D2             >
 283+ 28D2             >
 283+ 28D2             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5D7             >
 283+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5D7             >Latest_Definition defl  Heap_Ptr
 283+ E5D7             >
 283+ E5D7             >                // dummy db directives used to calculate length of namec
 283+ E5D7 3C          >                db      "<"
 283+ E5D8             >len_NFA         defl    $ - temp_NFA
 283+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5D7             >
 283+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5D9             >
 283+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DB             >
 283+ E5DB             >mirror_Ptr      defl    $
 283+ E5DB             >
 283+ E5DB D4 28       >                dw      Dict_Ptr + 2        // xt
 283+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5DD             >
 283+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5DD             >
 283+ E5DD             >//              ______________________________________________________________________
 283+ E5DD             >//              Dictionary part
 283+ E5DD             >
 283+ E5DD             >                org     Dict_Ptr
 283+ 28D2             >
 283+ 28D2 DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 28D4             >
 283+ 28D4             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 28D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 28D4 ~           >
 283+ 28D4 ~           >
 283+ 28D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 28D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 28D4             >
 283+ 28D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 28D4 D9                           exx
 285+ 28D5 D1                           pop     de
 286+ 28D6 E1                           pop     hl
 287+ 28D7 7C                           ld      a, h
 288+ 28D8 EE 80                        xor     $80
 289+ 28DA 67                           ld      h, a
 290+ 28DB 7A                           ld      a, d
 291+ 28DC EE 80                        xor     $80
 292+ 28DE 57                           ld      d, a
 293+ 28DF              //              and     a
 294+ 28DF ED 52                        sbc     hl, de
 295+ 28E1 ED 62                        sbc     hl, hl
 296+ 28E3 E5                           push    hl
 297+ 28E4 D9                           exx
 298+ 28E5                              next
 298+ 28E5 DD E9       >                jp      (ix)
 299+ 28E7
 300+ 28E7              //  ______________________________________________________________________
 301+ 28E7              //
 302+ 28E7              // >            n1 n2 -- n3
 303+ 28E7              // greater than
 304+ 28E7                              Colon_Def GREATER, ">", is_normal
 304+ 28E7             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28E7             >
 304+ 28E7             >Dict_Ptr        defl    $
 304+ 28E7             >
 304+ 28E7             >//              ______________________________________________________________________
 304+ 28E7             >//              Heap part
 304+ 28E7             >
 304+ 28E7             >
 304+ 28E7             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DD             >
 304+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DD             >Latest_Definition defl  Heap_Ptr
 304+ E5DD             >
 304+ E5DD             >                // dummy db directives used to calculate length of namec
 304+ E5DD 3E          >                db      ">"
 304+ E5DE             >len_NFA         defl    $ - temp_NFA
 304+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DD             >
 304+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DF             >
 304+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >mirror_Ptr      defl    $
 304+ E5E1             >
 304+ E5E1 E9 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E3             >
 304+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E3             >
 304+ E5E3             >//              ______________________________________________________________________
 304+ E5E3             >//              Dictionary part
 304+ E5E3             >
 304+ E5E3             >                org     Dict_Ptr
 304+ 28E7             >
 304+ 28E7 E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28E9             >
 304+ 28E9             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28E9 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28EC             >
 304+ 28EC             >
 304+ 28EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28EC             >
 304+ 28EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28EC DC 25 D4 28                  dw      SWAP, LESS              // swap <
 306+ 28F0 0C 25                        dw      EXIT                    // ;
 307+ 28F2              //  ______________________________________________________________________
 308+ 28F2              //
 309+ 28F2              // min          n1 n2 -- n3
 310+ 28F2              // minimum between n1 and n2
 311+ 28F2                              Colon_Def MIN, "MIN" , is_normal
 311+ 28F2             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28F2             >
 311+ 28F2             >Dict_Ptr        defl    $
 311+ 28F2             >
 311+ 28F2             >//              ______________________________________________________________________
 311+ 28F2             >//              Heap part
 311+ 28F2             >
 311+ 28F2             >
 311+ 28F2             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E3             >
 311+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E3             >Latest_Definition defl  Heap_Ptr
 311+ E5E3             >
 311+ E5E3             >                // dummy db directives used to calculate length of namec
 311+ E5E3 4D 49 4E    >                db      "MIN"
 311+ E5E6             >len_NFA         defl    $ - temp_NFA
 311+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E3             >
 311+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E7             >
 311+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E9             >
 311+ E5E9             >mirror_Ptr      defl    $
 311+ E5E9             >
 311+ E5E9 F4 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EB             >
 311+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EB             >
 311+ E5EB             >//              ______________________________________________________________________
 311+ E5EB             >//              Dictionary part
 311+ E5EB             >
 311+ E5EB             >                org     Dict_Ptr
 311+ 28F2             >
 311+ 28F2 E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28F4             >
 311+ 28F4             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28F4 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28F7             >
 311+ 28F7             >
 311+ 28F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28F7             >
 311+ 28F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28F7 32 26                        dw      TWO_DUP                 // 2dup
 313+ 28F9 E9 28                        dw      GREATER                 // >
 314+ 28FB 8F 20                        dw      ZBRANCH
 315+ 28FD 04 00                        dw      Min_Skip - $   // if
 316+ 28FF DC 25                        dw          SWAP                //      swap
 317+ 2901              Min_Skip:                                       // endif
 318+ 2901 C8 25                        dw      DROP                    // drop
 319+ 2903 0C 25                        dw      EXIT                    // ;
 320+ 2905
 321+ 2905              //  ______________________________________________________________________
 322+ 2905              //
 323+ 2905              // max          n1 n2 -- n3
 324+ 2905              // maximum between n1 and n2
 325+ 2905                              Colon_Def MAX, "MAX", is_normal
 325+ 2905             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 2905             >
 325+ 2905             >Dict_Ptr        defl    $
 325+ 2905             >
 325+ 2905             >//              ______________________________________________________________________
 325+ 2905             >//              Heap part
 325+ 2905             >
 325+ 2905             >
 325+ 2905             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EB             >
 325+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EB             >Latest_Definition defl  Heap_Ptr
 325+ E5EB             >
 325+ E5EB             >                // dummy db directives used to calculate length of namec
 325+ E5EB 4D 41 58    >                db      "MAX"
 325+ E5EE             >len_NFA         defl    $ - temp_NFA
 325+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EB             >
 325+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EF             >
 325+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F1             >
 325+ E5F1             >mirror_Ptr      defl    $
 325+ E5F1             >
 325+ E5F1 07 29       >                dw      Dict_Ptr + 2        // xt
 325+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F3             >
 325+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F3             >
 325+ E5F3             >//              ______________________________________________________________________
 325+ E5F3             >//              Dictionary part
 325+ E5F3             >
 325+ E5F3             >                org     Dict_Ptr
 325+ 2905             >
 325+ 2905 F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 2907             >
 325+ 2907             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 2907 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 290A             >
 325+ 290A             >
 325+ 290A             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 290A             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 290A             >
 325+ 290A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 290A 32 26                        dw      TWO_DUP                 // 2dup
 327+ 290C D4 28                        dw      LESS                    // <
 328+ 290E 8F 20                        dw      ZBRANCH
 329+ 2910 04 00                        dw      Max_Skip - $   // if
 330+ 2912 DC 25                        dw          SWAP                //      swap
 331+ 2914              Max_Skip:                                       // endif
 332+ 2914 C8 25                        dw      DROP                    // drop
 333+ 2916 0C 25                        dw      EXIT                    // ;
 334+ 2918
 335+ 2918              //  ______________________________________________________________________
 336+ 2918              //
 337+ 2918              // ?dup         n -- 0 | n n
 338+ 2918              // duplicate if not zero
 339+ 2918                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 2918             >
 339+ 2918             >Dict_Ptr        defl    $
 339+ 2918             >
 339+ 2918             >//              ______________________________________________________________________
 339+ 2918             >//              Heap part
 339+ 2918             >
 339+ 2918             >
 339+ 2918             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F3             >
 339+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F3             >Latest_Definition defl  Heap_Ptr
 339+ E5F3             >
 339+ E5F3             >                // dummy db directives used to calculate length of namec
 339+ E5F3 3F 44 55 50 >                db      "?DUP"
 339+ E5F7             >len_NFA         defl    $ - temp_NFA
 339+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F3             >
 339+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F8             >
 339+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FA             >
 339+ E5FA             >mirror_Ptr      defl    $
 339+ E5FA             >
 339+ E5FA 1A 29       >                dw      Dict_Ptr + 2        // xt
 339+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FC             >
 339+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FC             >
 339+ E5FC             >//              ______________________________________________________________________
 339+ E5FC             >//              Dictionary part
 339+ E5FC             >
 339+ E5FC             >                org     Dict_Ptr
 339+ 2918             >
 339+ 2918 FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 291A             >
 339+ 291A             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 291A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 291A ~           >
 339+ 291A ~           >
 339+ 291A             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 291A             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 291A             >
 339+ 291A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 291A              QDup_Ptr:
 341+ 291A E1                           pop     hl
 342+ 291B 7C                           ld      a, h
 343+ 291C B5                           or      l
 344+ 291D 28 01                        jr      z, QDup_Skip
 345+ 291F E5                               push    hl
 346+ 2920              QDup_Skip:
 347+ 2920                              psh1
 347+ 2920 E5          >                push    hl
 347+ 2921 DD E9       >                jp      (ix)
 348+ 2923
 349+ 2923              //  ______________________________________________________________________
 350+ 2923              //
 351+ 2923              // -dup         n -- 0 | n n
 352+ 2923              // duplicate if not zero
 353+ 2923                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 2923             >
 353+ 2923             >Dict_Ptr        defl    $
 353+ 2923             >
 353+ 2923             >//              ______________________________________________________________________
 353+ 2923             >//              Heap part
 353+ 2923             >
 353+ 2923             >
 353+ 2923             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FC             >
 353+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FC             >Latest_Definition defl  Heap_Ptr
 353+ E5FC             >
 353+ E5FC             >                // dummy db directives used to calculate length of namec
 353+ E5FC 2D 44 55 50 >                db      "-DUP"
 353+ E600             >len_NFA         defl    $ - temp_NFA
 353+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FC             >
 353+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E601             >                org     $-1                 // alter last byte of Name just above to set
 353+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E601             >
 353+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E603             >Prev_Ptr        defl    Heap_Ptr
 353+ E603             >
 353+ E603             >mirror_Ptr      defl    $
 353+ E603             >
 353+ E603 25 29       >                dw      Dict_Ptr + 2        // xt
 353+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E605             >
 353+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E605             >
 353+ E605             >//              ______________________________________________________________________
 353+ E605             >//              Dictionary part
 353+ E605             >
 353+ E605             >                org     Dict_Ptr
 353+ 2923             >
 353+ 2923 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 2925             >
 353+ 2925             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 2925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 2925 ~           >
 353+ 2925 ~           >
 353+ 2925             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 2925             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 2925             >
 353+ 2925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 2925 C3 1A 29                     jp      QDup_Ptr
 355+ 2928
 356+ 2928              //  ______________________________________________________________________
 357+ 2928              //
 358+ 2928              // emit         c --
 359+ 2928                              Colon_Def EMIT, "EMIT", is_normal
 359+ 2928             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 2928             >
 359+ 2928             >Dict_Ptr        defl    $
 359+ 2928             >
 359+ 2928             >//              ______________________________________________________________________
 359+ 2928             >//              Heap part
 359+ 2928             >
 359+ 2928             >
 359+ 2928             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E605             >
 359+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E605             >Latest_Definition defl  Heap_Ptr
 359+ E605             >
 359+ E605             >                // dummy db directives used to calculate length of namec
 359+ E605 45 4D 49 54 >                db      "EMIT"
 359+ E609             >len_NFA         defl    $ - temp_NFA
 359+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E605             >
 359+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 359+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60A             >
 359+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60C             >Prev_Ptr        defl    Heap_Ptr
 359+ E60C             >
 359+ E60C             >mirror_Ptr      defl    $
 359+ E60C             >
 359+ E60C 2A 29       >                dw      Dict_Ptr + 2        // xt
 359+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60E             >
 359+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60E             >
 359+ E60E             >//              ______________________________________________________________________
 359+ E60E             >//              Dictionary part
 359+ E60E             >
 359+ E60E             >                org     Dict_Ptr
 359+ 2928             >
 359+ 2928 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 292A             >
 359+ 292A             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 292A CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 292D             >
 359+ 292D             >
 359+ 292D             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 292D             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 292D             >
 359+ 292D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 292D 7C 22                        dw      C_EMIT                      // (?emit)
 361+ 292F 1A 29                        dw      QDUP                        // ?dup
 362+ 2931                                                                  // if
 363+ 2931 8F 20                        dw      ZBRANCH
 364+ 2933 0A 00                        dw      Emit_Skip - $
 365+ 2935 3C 22                        dw          EMITC                   //      emitc
 366+ 2937 52 27                        dw          ONE                     //      1
 367+ 2939 F8 27 3C 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 293D              Emit_Skip:                                          // endif
 369+ 293D 0C 25                        dw      EXIT                        // ;
 370+ 293F
 371+ 293F              //  ______________________________________________________________________
 372+ 293F              //
 373+ 293F              // space        --
 374+ 293F                              Colon_Def SPACE, "SPACE", is_normal
 374+ 293F             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 293F             >
 374+ 293F             >Dict_Ptr        defl    $
 374+ 293F             >
 374+ 293F             >//              ______________________________________________________________________
 374+ 293F             >//              Heap part
 374+ 293F             >
 374+ 293F             >
 374+ 293F             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60E             >
 374+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60E             >Latest_Definition defl  Heap_Ptr
 374+ E60E             >
 374+ E60E             >                // dummy db directives used to calculate length of namec
 374+ E60E 53 50 41 43 >                db      "SPACE"
 374+ E612 45          >
 374+ E613             >len_NFA         defl    $ - temp_NFA
 374+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60E             >
 374+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E613 45          >
 374+ E614             >                org     $-1                 // alter last byte of Name just above to set
 374+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E614             >
 374+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E616             >Prev_Ptr        defl    Heap_Ptr
 374+ E616             >
 374+ E616             >mirror_Ptr      defl    $
 374+ E616             >
 374+ E616 41 29       >                dw      Dict_Ptr + 2        // xt
 374+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E618             >
 374+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E618             >
 374+ E618             >//              ______________________________________________________________________
 374+ E618             >//              Dictionary part
 374+ E618             >
 374+ E618             >                org     Dict_Ptr
 374+ 293F             >
 374+ 293F 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 2941             >
 374+ 2941             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 2941 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 2944             >
 374+ 2944             >
 374+ 2944             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 2944             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 2944             >
 374+ 2944             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 2944 6E 27 2A 29                  dw      BL, EMIT                // bl emit
 376+ 2948 0C 25                        dw      EXIT                    // ;
 377+ 294A
 378+ 294A              //  ______________________________________________________________________
 379+ 294A              //
 380+ 294A              // traverse     a n -- a
 381+ 294A              // A dictionary entry is structured as follows
 382+ 294A              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 294A              //      +1   word name, last character is toggled with $80
 384+ 294A              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 294A              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 294A              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 294A              //
 388+ 294A                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 294A             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 294A             >
 388+ 294A             >Dict_Ptr        defl    $
 388+ 294A             >
 388+ 294A             >//              ______________________________________________________________________
 388+ 294A             >//              Heap part
 388+ 294A             >
 388+ 294A             >
 388+ 294A             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E618             >
 388+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E618             >Latest_Definition defl  Heap_Ptr
 388+ E618             >
 388+ E618             >                // dummy db directives used to calculate length of namec
 388+ E618 54 52 41 56 >                db      "TRAVERSE"
 388+ E61C 45 52 53 45 >
 388+ E620             >len_NFA         defl    $ - temp_NFA
 388+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E618             >
 388+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61D 45 52 53 45 >
 388+ E621             >                org     $-1                 // alter last byte of Name just above to set
 388+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E621             >
 388+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E623             >Prev_Ptr        defl    Heap_Ptr
 388+ E623             >
 388+ E623             >mirror_Ptr      defl    $
 388+ E623             >
 388+ E623 4C 29       >                dw      Dict_Ptr + 2        // xt
 388+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E625             >
 388+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E625             >
 388+ E625             >//              ______________________________________________________________________
 388+ E625             >//              Dictionary part
 388+ E625             >
 388+ E625             >                org     Dict_Ptr
 388+ 294A             >
 388+ 294A 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 294C             >
 388+ 294C             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 294C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 294F             >
 388+ 294F             >
 388+ 294F             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 294F             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 294F             >
 388+ 294F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 294F DC 25                        dw      SWAP                    // swap
 390+ 2951              Traverse_Begin:                                 // begin
 391+ 2951 BF 25 5E 25                  dw          OVER, PLUS          //      over +
 392+ 2955 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 2959 BF 25 69 26                  dw          OVER, CFETCH        //      over @
 394+ 295D D4 28                        dw          LESS                //      <
 395+ 295F                                                              // until
 396+ 295F 8F 20                        dw      ZBRANCH
 397+ 2961 F0 FF                        dw      Traverse_Begin - $
 398+ 2963 CD 25                        dw      NIP                     //  nip
 399+ 2965 0C 25                        dw      EXIT                    //  ;
 400+ 2967
 401+ 2967              //  ______________________________________________________________________
 402+ 2967              //
 403+ 2967              // mmu7@        -- n
 404+ 2967              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2967
 406+ 2967                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2967             >
 406+ 2967             >Dict_Ptr        defl    $
 406+ 2967             >
 406+ 2967             >//              ______________________________________________________________________
 406+ 2967             >//              Heap part
 406+ 2967             >
 406+ 2967             >
 406+ 2967             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E625             >
 406+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E625             >Latest_Definition defl  Heap_Ptr
 406+ E625             >
 406+ E625             >                // dummy db directives used to calculate length of namec
 406+ E625 4D 4D 55 37 >                db      "MMU7@"
 406+ E629 40          >
 406+ E62A             >len_NFA         defl    $ - temp_NFA
 406+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E625             >
 406+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62A 40          >
 406+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62B             >
 406+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62D             >Prev_Ptr        defl    Heap_Ptr
 406+ E62D             >
 406+ E62D             >mirror_Ptr      defl    $
 406+ E62D             >
 406+ E62D 69 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62F             >
 406+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62F             >
 406+ E62F             >//              ______________________________________________________________________
 406+ E62F             >//              Dictionary part
 406+ E62F             >
 406+ E62F             >                org     Dict_Ptr
 406+ 2967             >
 406+ 2967 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 2969             >
 406+ 2969             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 2969 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 2969 ~           >
 406+ 2969 ~           >
 406+ 2969             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 2969             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 2969             >
 406+ 2969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 2969 D9                           exx
 408+ 296A CD 39 21                     call    MMU7_read
 409+ 296D D9                           exx
 410+ 296E 6F                           ld      l, a
 411+ 296F 26 00                        ld      h, 0
 412+ 2971 E5                           push    hl
 413+ 2972                              next
 413+ 2972 DD E9       >                jp      (ix)
 414+ 2974
 415+ 2974              //  ______________________________________________________________________
 416+ 2974              //
 417+ 2974              // mmu7!        n --
 418+ 2974              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 2974              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 2974
 421+ 2974                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 2974             >
 421+ 2974             >Dict_Ptr        defl    $
 421+ 2974             >
 421+ 2974             >//              ______________________________________________________________________
 421+ 2974             >//              Heap part
 421+ 2974             >
 421+ 2974             >
 421+ 2974             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62F             >
 421+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62F             >Latest_Definition defl  Heap_Ptr
 421+ E62F             >
 421+ E62F             >                // dummy db directives used to calculate length of namec
 421+ E62F 4D 4D 55 37 >                db      "MMU7!"
 421+ E633 21          >
 421+ E634             >len_NFA         defl    $ - temp_NFA
 421+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62F             >
 421+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E634 21          >
 421+ E635             >                org     $-1                 // alter last byte of Name just above to set
 421+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E635             >
 421+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E637             >Prev_Ptr        defl    Heap_Ptr
 421+ E637             >
 421+ E637             >mirror_Ptr      defl    $
 421+ E637             >
 421+ E637 76 29       >                dw      Dict_Ptr + 2        // xt
 421+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E639             >
 421+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E639             >
 421+ E639             >//              ______________________________________________________________________
 421+ E639             >//              Dictionary part
 421+ E639             >
 421+ E639             >                org     Dict_Ptr
 421+ 2974             >
 421+ 2974 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2976             >
 421+ 2976             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2976 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2976 ~           >
 421+ 2976 ~           >
 421+ 2976             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2976             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2976             >
 421+ 2976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2976 E1                           pop     hl
 423+ 2977 7D                           ld      a, l
 424+ 2978 ED 92 57                     nextreg 87, a
 425+ 297B
 426+ 297B                              next
 426+ 297B DD E9       >                jp      (ix)
 427+ 297D
 428+ 297D              //  ______________________________________________________________________
 429+ 297D              //
 430+ 297D              // >far         ha -- a n
 431+ 297D              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 297D              // take lower bits of H and L as an offset from E000h
 433+ 297D              // then return address  a  between E000h-FFFFh
 434+ 297D              // and page number n  between 64-71 (40h-47h)
 435+ 297D              // For example, in hex:
 436+ 297D              //   0000 >FAR  gives  40.E000
 437+ 297D              //   1FFF >FAR  gives  40.FFFF
 438+ 297D              //   2000 >FAR  gives  41.E000
 439+ 297D              //   3FFF >FAR  gives  41.FFFF
 440+ 297D              //   EFFF >FAR  gives  47.EFFF
 441+ 297D              //   FFFF >FAR  gives  47.FFFF
 442+ 297D                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 297D             >
 442+ 297D             >Dict_Ptr        defl    $
 442+ 297D             >
 442+ 297D             >//              ______________________________________________________________________
 442+ 297D             >//              Heap part
 442+ 297D             >
 442+ 297D             >
 442+ 297D             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E639             >
 442+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E639             >Latest_Definition defl  Heap_Ptr
 442+ E639             >
 442+ E639             >                // dummy db directives used to calculate length of namec
 442+ E639 3E 46 41 52 >                db      ">FAR"
 442+ E63D             >len_NFA         defl    $ - temp_NFA
 442+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E639             >
 442+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63E             >
 442+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E640             >Prev_Ptr        defl    Heap_Ptr
 442+ E640             >
 442+ E640             >mirror_Ptr      defl    $
 442+ E640             >
 442+ E640 7F 29       >                dw      Dict_Ptr + 2        // xt
 442+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E642             >
 442+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E642             >
 442+ E642             >//              ______________________________________________________________________
 442+ E642             >//              Dictionary part
 442+ E642             >
 442+ E642             >                org     Dict_Ptr
 442+ 297D             >
 442+ 297D 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 297F             >
 442+ 297F             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 297F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 297F ~           >
 442+ 297F ~           >
 442+ 297F             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 297F             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 297F             >
 442+ 297F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 297F E1                           pop     hl
 444+ 2980 CD 44 21                     call    TO_FAR_rout
 445+ 2983 E5                           push    hl
 446+ 2984 6F                           ld      l, a
 447+ 2985 26 00                        ld      h, 0
 448+ 2987 E5                           push    hl
 449+ 2988                              next
 449+ 2988 DD E9       >                jp      (ix)
 450+ 298A
 451+ 298A              //  ______________________________________________________________________
 452+ 298A              //
 453+ 298A              // <far         a n  -- ha
 454+ 298A              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 298A              // reverse of >FAR: encodes a FAR address compressing
 456+ 298A              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 298A                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 298A             >
 457+ 298A             >Dict_Ptr        defl    $
 457+ 298A             >
 457+ 298A             >//              ______________________________________________________________________
 457+ 298A             >//              Heap part
 457+ 298A             >
 457+ 298A             >
 457+ 298A             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E642             >
 457+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E642             >Latest_Definition defl  Heap_Ptr
 457+ E642             >
 457+ E642             >                // dummy db directives used to calculate length of namec
 457+ E642 3C 46 41 52 >                db      "<FAR"
 457+ E646             >len_NFA         defl    $ - temp_NFA
 457+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E642             >
 457+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E647             >                org     $-1                 // alter last byte of Name just above to set
 457+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E647             >
 457+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E649             >Prev_Ptr        defl    Heap_Ptr
 457+ E649             >
 457+ E649             >mirror_Ptr      defl    $
 457+ E649             >
 457+ E649 8C 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64B             >
 457+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64B             >
 457+ E64B             >//              ______________________________________________________________________
 457+ E64B             >//              Dictionary part
 457+ E64B             >
 457+ E64B             >                org     Dict_Ptr
 457+ 298A             >
 457+ 298A 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 298C             >
 457+ 298C             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 298C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 298C ~           >
 457+ 298C ~           >
 457+ 298C             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 298C             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 298C             >
 457+ 298C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 298C E1                           pop     hl                  // page number in e
 459+ 298D 7D                           ld      a, l
 460+ 298E E6 07                        and     07
 461+ 2990 0F                           rrca
 462+ 2991 0F                           rrca
 463+ 2992 0F                           rrca
 464+ 2993 08                           ex      af, af
 465+ 2994 E1                           pop     hl                  // address in hl
 466+ 2995 7C                           ld      a, h
 467+ 2996 E6 1F                        and     $1F
 468+ 2998 67                           ld      h, a
 469+ 2999 08                           ex      af, af
 470+ 299A B4                           or      h
 471+ 299B 67                           ld      h, a
 472+ 299C                              psh1
 472+ 299C E5          >                push    hl
 472+ 299D DD E9       >                jp      (ix)
 473+ 299F
 474+ 299F              //  ______________________________________________________________________
 475+ 299F              //
 476+ 299F              // ?IN_MMU7        a -- f
 477+ 299F              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 299F                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 299F             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 299F             >
 478+ 299F             >Dict_Ptr        defl    $
 478+ 299F             >
 478+ 299F             >//              ______________________________________________________________________
 478+ 299F             >//              Heap part
 478+ 299F             >
 478+ 299F             >
 478+ 299F             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64B             >
 478+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64B             >Latest_Definition defl  Heap_Ptr
 478+ E64B             >
 478+ E64B             >                // dummy db directives used to calculate length of namec
 478+ E64B 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E64F 4D 4D 55 37 >
 478+ E653             >len_NFA         defl    $ - temp_NFA
 478+ E653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64B             >
 478+ E64B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E650 4D 4D 55 37 >
 478+ E654             >                org     $-1                 // alter last byte of Name just above to set
 478+ E653 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E654             >
 478+ E654 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E656             >Prev_Ptr        defl    Heap_Ptr
 478+ E656             >
 478+ E656             >mirror_Ptr      defl    $
 478+ E656             >
 478+ E656 A1 29       >                dw      Dict_Ptr + 2        // xt
 478+ E658             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E658             >
 478+ E658             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E658             >
 478+ E658             >//              ______________________________________________________________________
 478+ E658             >//              Dictionary part
 478+ E658             >
 478+ E658             >                org     Dict_Ptr
 478+ 299F             >
 478+ 299F 56 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 29A1             >
 478+ 29A1             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 29A1 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 29A4             >
 478+ 29A4             >
 478+ 29A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 29A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 29A4             >
 478+ 29A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 29A4 E3 25                        dw      DUP
 480+ 29A6 3D 20 00 E0                  dw      LIT, $E000
 481+ 29AA C6 28                        dw      ULESS
 482+ 29AC 3F 25                        dw      NOT_OP
 483+ 29AE 0C 25                        dw      EXIT
 484+ 29B0
 485+ 29B0              //  ______________________________________________________________________
 486+ 29B0              //
 487+ 29B0              // far          hp -- ha
 488+ 29B0              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 29B0                              Colon_Def FAR, "FAR", is_normal
 489+ 29B0             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 29B0             >
 489+ 29B0             >Dict_Ptr        defl    $
 489+ 29B0             >
 489+ 29B0             >//              ______________________________________________________________________
 489+ 29B0             >//              Heap part
 489+ 29B0             >
 489+ 29B0             >
 489+ 29B0             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E658             >
 489+ E658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E658             >Latest_Definition defl  Heap_Ptr
 489+ E658             >
 489+ E658             >                // dummy db directives used to calculate length of namec
 489+ E658 46 41 52    >                db      "FAR"
 489+ E65B             >len_NFA         defl    $ - temp_NFA
 489+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E658             >
 489+ E658 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E659 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65C             >
 489+ E65C 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E65E             >Prev_Ptr        defl    Heap_Ptr
 489+ E65E             >
 489+ E65E             >mirror_Ptr      defl    $
 489+ E65E             >
 489+ E65E B2 29       >                dw      Dict_Ptr + 2        // xt
 489+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E660             >
 489+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E660             >
 489+ E660             >//              ______________________________________________________________________
 489+ E660             >//              Dictionary part
 489+ E660             >
 489+ E660             >                org     Dict_Ptr
 489+ 29B0             >
 489+ 29B0 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 29B2             >
 489+ 29B2             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 29B2 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 29B5             >
 489+ 29B5             >
 489+ 29B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 29B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 29B5             >
 489+ 29B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 29B5 7F 29                        dw      TO_FAR
 491+ 29B7 76 29                        dw      MMU7_STORE
 492+ 29B9 0C 25                        dw      EXIT
 493+ 29BB
 494+ 29BB              //  ______________________________________________________________________
 495+ 29BB              //
 496+ 29BB              // ?HEAP_PTR       n -- n f
 497+ 29BB              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 29BB                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 29BB             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 29BB             >
 498+ 29BB             >Dict_Ptr        defl    $
 498+ 29BB             >
 498+ 29BB             >//              ______________________________________________________________________
 498+ 29BB             >//              Heap part
 498+ 29BB             >
 498+ 29BB             >
 498+ 29BB             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E660             >
 498+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E660             >Latest_Definition defl  Heap_Ptr
 498+ E660             >
 498+ E660             >                // dummy db directives used to calculate length of namec
 498+ E660 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E664 50 5F 50 54 >
 498+ E668 52          >
 498+ E669             >len_NFA         defl    $ - temp_NFA
 498+ E669             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E660             >
 498+ E660 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E661 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E665 50 5F 50 54 >
 498+ E669 52          >
 498+ E66A             >                org     $-1                 // alter last byte of Name just above to set
 498+ E669 D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66A             >
 498+ E66A 58 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66C             >Prev_Ptr        defl    Heap_Ptr
 498+ E66C             >
 498+ E66C             >mirror_Ptr      defl    $
 498+ E66C             >
 498+ E66C BD 29       >                dw      Dict_Ptr + 2        // xt
 498+ E66E             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E66E             >
 498+ E66E             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E66E             >
 498+ E66E             >//              ______________________________________________________________________
 498+ E66E             >//              Dictionary part
 498+ E66E             >
 498+ E66E             >                org     Dict_Ptr
 498+ 29BB             >
 498+ 29BB 6C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 29BD             >
 498+ 29BD             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 29BD CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 29C0             >
 498+ 29C0             >
 498+ 29C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 29C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 29C0             >
 498+ 29C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 29C0 E3 25                        dw      DUP
 500+ 29C2 8F 20                        dw      ZBRANCH
 501+ 29C4 08 00                        dw      QHeap_Skip - $
 502+ 29C6 3D 20 00 60                  dw          LIT, $6000
 503+ 29CA C6 28                        dw          ULESS
 504+ 29CC              QHeap_Skip:                                          // endif
 505+ 29CC 0C 25                        dw      EXIT                        // ;
 506+ 29CE
 507+ 29CE              //  ______________________________________________________________________
 508+ 29CE              //
 509+ 29CE              // ?>heap       n1 -- n2
 510+ 29CE              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 29CE                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 29CE             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 29CE             >
 511+ 29CE             >Dict_Ptr        defl    $
 511+ 29CE             >
 511+ 29CE             >//              ______________________________________________________________________
 511+ 29CE             >//              Heap part
 511+ 29CE             >
 511+ 29CE             >
 511+ 29CE             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E66E             >
 511+ E66E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E66E             >Latest_Definition defl  Heap_Ptr
 511+ E66E             >
 511+ E66E             >                // dummy db directives used to calculate length of namec
 511+ E66E 3F 3E 48 45 >                db      "?>HEAP"
 511+ E672 41 50       >
 511+ E674             >len_NFA         defl    $ - temp_NFA
 511+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E66E             >
 511+ E66E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E66F 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E673 41 50       >
 511+ E675             >                org     $-1                 // alter last byte of Name just above to set
 511+ E674 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E675             >
 511+ E675 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E677             >Prev_Ptr        defl    Heap_Ptr
 511+ E677             >
 511+ E677             >mirror_Ptr      defl    $
 511+ E677             >
 511+ E677 D0 29       >                dw      Dict_Ptr + 2        // xt
 511+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E679             >
 511+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E679             >
 511+ E679             >//              ______________________________________________________________________
 511+ E679             >//              Dictionary part
 511+ E679             >
 511+ E679             >                org     Dict_Ptr
 511+ 29CE             >
 511+ 29CE 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 29D0             >
 511+ 29D0             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 29D0 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 29D3             >
 511+ 29D3             >
 511+ 29D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 29D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 29D3             >
 511+ 29D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 29D3 E3 25                        dw      DUP
 513+ 29D5 BD 29                        dw      QHEAPP
 514+ 29D7 8F 20                        dw      ZBRANCH
 515+ 29D9 04 00                        dw      Q2Heap_Skip - $
 516+ 29DB B2 29                        dw          FAR
 517+ 29DD              Q2Heap_Skip:                                          // endif
 518+ 29DD 0C 25                        dw      EXIT                        // ;
 519+ 29DF
 520+ 29DF              //  ______________________________________________________________________
 521+ 29DF              //
 522+ 29DF              // hp_fetch     -- a
 523+ 29DF                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 29DF             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 29DF             >
 523+ 29DF             >Dict_Ptr        defl    $
 523+ 29DF             >
 523+ 29DF             >//              ______________________________________________________________________
 523+ 29DF             >//              Heap part
 523+ 29DF             >
 523+ 29DF             >
 523+ 29DF             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E679             >
 523+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E679             >Latest_Definition defl  Heap_Ptr
 523+ E679             >
 523+ E679             >                // dummy db directives used to calculate length of namec
 523+ E679 48 50 40    >                db      "HP@"
 523+ E67C             >len_NFA         defl    $ - temp_NFA
 523+ E67C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E679             >
 523+ E679 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67A 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67D             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67C C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67D             >
 523+ E67D 6E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E67F             >Prev_Ptr        defl    Heap_Ptr
 523+ E67F             >
 523+ E67F             >mirror_Ptr      defl    $
 523+ E67F             >
 523+ E67F E1 29       >                dw      Dict_Ptr + 2        // xt
 523+ E681             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E681             >
 523+ E681             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E681             >
 523+ E681             >//              ______________________________________________________________________
 523+ E681             >//              Dictionary part
 523+ E681             >
 523+ E681             >                org     Dict_Ptr
 523+ 29DF             >
 523+ 29DF 7F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 29E1             >
 523+ 29E1             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 29E1 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 29E4             >
 523+ 29E4             >
 523+ 29E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 29E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 29E4             >
 523+ 29E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 29E4 E0 27 54 26                  dw      HP, FETCH               // hp @
 525+ 29E8 0C 25                        dw      EXIT                    // ;
 526+ 29EA
 527+ 29EA              //  ______________________________________________________________________
 528+ 29EA              //
 529+ 29EA              // page-watermark   -- n
 530+ 29EA              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 29EA                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 29EA             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 29EA             >
 531+ 29EA             >Dict_Ptr        defl    $
 531+ 29EA             >
 531+ 29EA             >//              ______________________________________________________________________
 531+ 29EA             >//              Heap part
 531+ 29EA             >
 531+ 29EA             >
 531+ 29EA             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E681             >
 531+ E681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E681             >Latest_Definition defl  Heap_Ptr
 531+ E681             >
 531+ E681             >                // dummy db directives used to calculate length of namec
 531+ E681 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E685 2D 57 41 54 >
 531+ E689 45 52 4D 41 >
 531+ E68D 52 4B       >
 531+ E68F             >len_NFA         defl    $ - temp_NFA
 531+ E68F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E681             >
 531+ E681 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E686 2D 57 41 54 >
 531+ E68A 45 52 4D 41 >
 531+ E68E 52 4B       >
 531+ E690             >                org     $-1                 // alter last byte of Name just above to set
 531+ E68F CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E690             >
 531+ E690 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E692             >Prev_Ptr        defl    Heap_Ptr
 531+ E692             >
 531+ E692             >mirror_Ptr      defl    $
 531+ E692             >
 531+ E692 EC 29       >                dw      Dict_Ptr + 2        // xt
 531+ E694             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E694             >
 531+ E694             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E694             >
 531+ E694             >//              ______________________________________________________________________
 531+ E694             >//              Dictionary part
 531+ E694             >
 531+ E694             >                org     Dict_Ptr
 531+ 29EA             >
 531+ 29EA 92 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 29EC             >
 531+ 29EC             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 29EC CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 29EF             >
 531+ 29EF             >
 531+ 29EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 29EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 29EF             >
 531+ 29EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29EF 80 1F       >                dw      $1F80
 532+ 29F1
 533+ 29F1              //  ______________________________________________________________________
 534+ 29F1              //
 535+ 29F1              // skip-hp-page ha -- a
 536+ 29F1                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 29F1             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 29F1             >
 536+ 29F1             >Dict_Ptr        defl    $
 536+ 29F1             >
 536+ 29F1             >//              ______________________________________________________________________
 536+ 29F1             >//              Heap part
 536+ 29F1             >
 536+ 29F1             >
 536+ 29F1             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E694             >
 536+ E694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E694             >Latest_Definition defl  Heap_Ptr
 536+ E694             >
 536+ E694             >                // dummy db directives used to calculate length of namec
 536+ E694 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E698 2D 48 50 2D >
 536+ E69C 50 41 47 45 >
 536+ E6A0             >len_NFA         defl    $ - temp_NFA
 536+ E6A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E694             >
 536+ E694 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E699 2D 48 50 2D >
 536+ E69D 50 41 47 45 >
 536+ E6A1             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A0 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A1             >
 536+ E6A1 81 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A3             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A3             >
 536+ E6A3             >mirror_Ptr      defl    $
 536+ E6A3             >
 536+ E6A3 F3 29       >                dw      Dict_Ptr + 2        // xt
 536+ E6A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A5             >
 536+ E6A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A5             >
 536+ E6A5             >//              ______________________________________________________________________
 536+ E6A5             >//              Dictionary part
 536+ E6A5             >
 536+ E6A5             >                org     Dict_Ptr
 536+ 29F1             >
 536+ 29F1 A3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 29F3             >
 536+ 29F3             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 29F3 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 29F6             >
 536+ 29F6             >
 536+ 29F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 29F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 29F6             >
 536+ 29F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 29F6 E1 29                        dw      HP_FETCH                // hp@
 538+ 29F8 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 29FC CC 24
 539+ 29FE 5E 25                        dw      PLUS
 540+ 2A00 EC 29                        dw      PAGE_WATERMARK
 541+ 2A02 E9 28                        dw      GREATER
 542+ 2A04 8F 20                        dw      ZBRANCH
 543+ 2A06 12 00                        dw      Skip_Skip - $   // if
 544+ 2A08 E1 29                        dw      HP_FETCH
 545+ 2A0A 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 2A0E DB 24
 546+ 2A10 77 25 85 25                  dw      ONE_PLUS, TWO_PLUS
 547+ 2A14 E0 27 5E 26                  dw      HP, STORE
 548+ 2A18              Skip_Skip:
 549+ 2A18 0C 25                        dw      EXIT                    // ;
 550+ 2A1A              //  ______________________________________________________________________
 551+ 2A1A              //
 552+ 2A1A              // latest       -- nfa
 553+ 2A1A                              Colon_Def LATEST, "LATEST", is_normal
 553+ 2A1A             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 2A1A             >
 553+ 2A1A             >Dict_Ptr        defl    $
 553+ 2A1A             >
 553+ 2A1A             >//              ______________________________________________________________________
 553+ 2A1A             >//              Heap part
 553+ 2A1A             >
 553+ 2A1A             >
 553+ 2A1A             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A5             >
 553+ E6A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A5             >Latest_Definition defl  Heap_Ptr
 553+ E6A5             >
 553+ E6A5             >                // dummy db directives used to calculate length of namec
 553+ E6A5 4C 41 54 45 >                db      "LATEST"
 553+ E6A9 53 54       >
 553+ E6AB             >len_NFA         defl    $ - temp_NFA
 553+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A5             >
 553+ E6A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A6 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AA 53 54       >
 553+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AB D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AC             >
 553+ E6AC 94 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 553+ E6AE             >
 553+ E6AE             >mirror_Ptr      defl    $
 553+ E6AE             >
 553+ E6AE 1C 2A       >                dw      Dict_Ptr + 2        // xt
 553+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B0             >
 553+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B0             >
 553+ E6B0             >//              ______________________________________________________________________
 553+ E6B0             >//              Dictionary part
 553+ E6B0             >
 553+ E6B0             >                org     Dict_Ptr
 553+ 2A1A             >
 553+ 2A1A AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 2A1C             >
 553+ 2A1C             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 2A1C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 2A1F             >
 553+ 2A1F             >
 553+ 2A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 2A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 2A1F             >
 553+ 2A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 2A1F 10 28                        dw      CURRENT                 // current
 555+ 2A21 54 26 54 26                  dw      FETCH, FETCH            // @ @
 556+ 2A25 B2 29                        dw      FAR // Q TO HEAP
 557+ 2A27 0C 25                        dw      EXIT                    // ;
 558+ 2A29
 559+ 2A29              //  ______________________________________________________________________
 560+ 2A29              //
 561+ 2A29              // >body        cfa -- pfa
 562+ 2A29                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 2A29             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 2A29             >
 562+ 2A29             >Dict_Ptr        defl    $
 562+ 2A29             >
 562+ 2A29             >//              ______________________________________________________________________
 562+ 2A29             >//              Heap part
 562+ 2A29             >
 562+ 2A29             >
 562+ 2A29             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B0             >
 562+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B0             >Latest_Definition defl  Heap_Ptr
 562+ E6B0             >
 562+ E6B0             >                // dummy db directives used to calculate length of namec
 562+ E6B0 3E 42 4F 44 >                db      ">BODY"
 562+ E6B4 59          >
 562+ E6B5             >len_NFA         defl    $ - temp_NFA
 562+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B0             >
 562+ E6B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B5 59          >
 562+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B5 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B6             >
 562+ E6B6 A5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 562+ E6B8             >
 562+ E6B8             >mirror_Ptr      defl    $
 562+ E6B8             >
 562+ E6B8 2B 2A       >                dw      Dict_Ptr + 2        // xt
 562+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BA             >
 562+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BA             >
 562+ E6BA             >//              ______________________________________________________________________
 562+ E6BA             >//              Dictionary part
 562+ E6BA             >
 562+ E6BA             >                org     Dict_Ptr
 562+ 2A29             >
 562+ 2A29 B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 2A2B             >
 562+ 2A2B             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 2A2B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 2A2E             >
 562+ 2A2E             >
 562+ 2A2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 2A2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 2A2E             >
 562+ 2A2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 2A2E 60 27 5E 25                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 2A32 0C 25                        dw      EXIT                    // ;
 565+ 2A34
 566+ 2A34              //  ______________________________________________________________________
 567+ 2A34              //
 568+ 2A34              // <name        cfa -- nfa
 569+ 2A34                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 2A34             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 2A34             >
 569+ 2A34             >Dict_Ptr        defl    $
 569+ 2A34             >
 569+ 2A34             >//              ______________________________________________________________________
 569+ 2A34             >//              Heap part
 569+ 2A34             >
 569+ 2A34             >
 569+ 2A34             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BA             >
 569+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BA             >Latest_Definition defl  Heap_Ptr
 569+ E6BA             >
 569+ E6BA             >                // dummy db directives used to calculate length of namec
 569+ E6BA 3C 4E 41 4D >                db      "<NAME"
 569+ E6BE 45          >
 569+ E6BF             >len_NFA         defl    $ - temp_NFA
 569+ E6BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BA             >
 569+ E6BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6BF 45          >
 569+ E6C0             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6BF C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C0             >
 569+ E6C0 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C2             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C2             >
 569+ E6C2             >mirror_Ptr      defl    $
 569+ E6C2             >
 569+ E6C2 36 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C4             >
 569+ E6C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C4             >
 569+ E6C4             >//              ______________________________________________________________________
 569+ E6C4             >//              Dictionary part
 569+ E6C4             >
 569+ E6C4             >                org     Dict_Ptr
 569+ 2A34             >
 569+ 2A34 C2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A36             >
 569+ 2A36             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A36 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A39             >
 569+ 2A39             >
 569+ 2A39             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A39             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A39             >
 569+ 2A39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A39 91 25                        dw      CELL_MINUS              // cell-
 571+ 2A3B E3 25 54 26                  dw      DUP, FETCH
 572+ 2A3F BD 29                        dw      QHEAPP
 573+ 2A41 8F 20                        dw      ZBRANCH
 574+ 2A43 08 00                        dw      ToName_Skip - $
 575+ 2A45 54 26 B2 29                  dw          FETCH, FAR
 576+ 2A49 91 25                        dw          CELL_MINUS
 577+ 2A4B              ToName_Skip:                                    // endif
 578+ 2A4B
 579+ 2A4B 7E 25                        dw      ONE_SUBTRACT            // 1-
 580+ 2A4D 67 27                        dw      NEG_ONE                 // -1
 581+ 2A4F 4C 29                        dw      TRAVERSE                // traverse
 582+ 2A51 0C 25                        dw      EXIT                    // ;
 583+ 2A53
 584+ 2A53              //  ______________________________________________________________________
 585+ 2A53              //
 586+ 2A53              // cfa          pfa -- cfa
 587+ 2A53                              Colon_Def CFA, "CFA", is_normal
 587+ 2A53             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 2A53             >
 587+ 2A53             >Dict_Ptr        defl    $
 587+ 2A53             >
 587+ 2A53             >//              ______________________________________________________________________
 587+ 2A53             >//              Heap part
 587+ 2A53             >
 587+ 2A53             >
 587+ 2A53             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C4             >
 587+ E6C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C4             >Latest_Definition defl  Heap_Ptr
 587+ E6C4             >
 587+ E6C4             >                // dummy db directives used to calculate length of namec
 587+ E6C4 43 46 41    >                db      "CFA"
 587+ E6C7             >len_NFA         defl    $ - temp_NFA
 587+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C4             >
 587+ E6C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C5 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C7 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6C8             >
 587+ E6C8 BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CA             >
 587+ E6CA             >mirror_Ptr      defl    $
 587+ E6CA             >
 587+ E6CA 55 2A       >                dw      Dict_Ptr + 2        // xt
 587+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CC             >
 587+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CC             >
 587+ E6CC             >//              ______________________________________________________________________
 587+ E6CC             >//              Dictionary part
 587+ E6CC             >
 587+ E6CC             >                org     Dict_Ptr
 587+ 2A53             >
 587+ 2A53 CA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 2A55             >
 587+ 2A55             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 2A55 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 2A58             >
 587+ 2A58             >
 587+ 2A58             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 2A58             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 2A58             >
 587+ 2A58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 2A58 60 27 AF 28                  dw      THREE, SUBTRACT         // 3 -
 589+ 2A5C 0C 25                        dw      EXIT                    // ;
 590+ 2A5E
 591+ 2A5E              //  ______________________________________________________________________
 592+ 2A5E              //
 593+ 2A5E              // nfa          pfa -- nfa
 594+ 2A5E                              Colon_Def NFA, "NFA", is_normal
 594+ 2A5E             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 2A5E             >
 594+ 2A5E             >Dict_Ptr        defl    $
 594+ 2A5E             >
 594+ 2A5E             >//              ______________________________________________________________________
 594+ 2A5E             >//              Heap part
 594+ 2A5E             >
 594+ 2A5E             >
 594+ 2A5E             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CC             >
 594+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CC             >Latest_Definition defl  Heap_Ptr
 594+ E6CC             >
 594+ E6CC             >                // dummy db directives used to calculate length of namec
 594+ E6CC 4E 46 41    >                db      "NFA"
 594+ E6CF             >len_NFA         defl    $ - temp_NFA
 594+ E6CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CC             >
 594+ E6CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CD 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D0             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6CF C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D0             >
 594+ E6D0 C4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D2             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D2             >
 594+ E6D2             >mirror_Ptr      defl    $
 594+ E6D2             >
 594+ E6D2 60 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D4             >
 594+ E6D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D4             >
 594+ E6D4             >//              ______________________________________________________________________
 594+ E6D4             >//              Dictionary part
 594+ E6D4             >
 594+ E6D4             >                org     Dict_Ptr
 594+ 2A5E             >
 594+ 2A5E D2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A60             >
 594+ 2A60             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A60 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A63             >
 594+ 2A63             >
 594+ 2A63             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A63             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A63             >
 594+ 2A63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A63 55 2A                        dw      CFA                     // cfa
 596+ 2A65 36 2A                        dw      TO_NAME                 // traverse
 597+ 2A67 0C 25                        dw      EXIT                    // ;
 598+ 2A69
 599+ 2A69              //  ______________________________________________________________________
 600+ 2A69              //
 601+ 2A69              // lfa          pfa -- lfa
 602+ 2A69                              Colon_Def LFA, "LFA", is_normal
 602+ 2A69             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 2A69             >
 602+ 2A69             >Dict_Ptr        defl    $
 602+ 2A69             >
 602+ 2A69             >//              ______________________________________________________________________
 602+ 2A69             >//              Heap part
 602+ 2A69             >
 602+ 2A69             >
 602+ 2A69             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D4             >
 602+ E6D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D4             >Latest_Definition defl  Heap_Ptr
 602+ E6D4             >
 602+ E6D4             >                // dummy db directives used to calculate length of namec
 602+ E6D4 4C 46 41    >                db      "LFA"
 602+ E6D7             >len_NFA         defl    $ - temp_NFA
 602+ E6D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D4             >
 602+ E6D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D5 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6D8             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D7 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6D8             >
 602+ E6D8 CC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DA             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DA             >
 602+ E6DA             >mirror_Ptr      defl    $
 602+ E6DA             >
 602+ E6DA 6B 2A       >                dw      Dict_Ptr + 2        // xt
 602+ E6DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DC             >
 602+ E6DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DC             >
 602+ E6DC             >//              ______________________________________________________________________
 602+ E6DC             >//              Dictionary part
 602+ E6DC             >
 602+ E6DC             >                org     Dict_Ptr
 602+ 2A69             >
 602+ 2A69 DA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 2A6B             >
 602+ 2A6B             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 2A6B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 2A6E             >
 602+ 2A6E             >
 602+ 2A6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 2A6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 2A6E             >
 602+ 2A6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 2A6E 60 2A                        dw      NFA                     // nfa
 604+ 2A70 52 27                        dw      ONE                     // 1
 605+ 2A72 4C 29                        dw      TRAVERSE                // traverse
 606+ 2A74 77 25                        dw      ONE_PLUS                // 1+
 607+ 2A76 0C 25                        dw      EXIT                    // ;
 608+ 2A78
 609+ 2A78              //  ______________________________________________________________________
 610+ 2A78              //
 611+ 2A78              // pfa          nfa -- pfa
 612+ 2A78                              Colon_Def PFA, "PFA", is_normal
 612+ 2A78             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 2A78             >
 612+ 2A78             >Dict_Ptr        defl    $
 612+ 2A78             >
 612+ 2A78             >//              ______________________________________________________________________
 612+ 2A78             >//              Heap part
 612+ 2A78             >
 612+ 2A78             >
 612+ 2A78             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DC             >
 612+ E6DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DC             >Latest_Definition defl  Heap_Ptr
 612+ E6DC             >
 612+ E6DC             >                // dummy db directives used to calculate length of namec
 612+ E6DC 50 46 41    >                db      "PFA"
 612+ E6DF             >len_NFA         defl    $ - temp_NFA
 612+ E6DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DC             >
 612+ E6DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E0             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6DF C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E0             >
 612+ E6E0 D4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E2             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E2             >
 612+ E6E2             >mirror_Ptr      defl    $
 612+ E6E2             >
 612+ E6E2 7A 2A       >                dw      Dict_Ptr + 2        // xt
 612+ E6E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E4             >
 612+ E6E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E4             >
 612+ E6E4             >//              ______________________________________________________________________
 612+ E6E4             >//              Dictionary part
 612+ E6E4             >
 612+ E6E4             >                org     Dict_Ptr
 612+ 2A78             >
 612+ 2A78 E2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 2A7A             >
 612+ 2A7A             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 2A7A CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 2A7D             >
 612+ 2A7D             >
 612+ 2A7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 2A7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 2A7D             >
 612+ 2A7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 2A7D D0 29                        dw      QTOHEAP
 614+ 2A7F 52 27                        dw      ONE                     // 1
 615+ 2A81 4C 29                        dw      TRAVERSE                // traverse
 616+ 2A83 77 25                        dw      ONE_PLUS                // 1+
 617+ 2A85 8D 25                        dw      CELL_PLUS               // cell+
 618+ 2A87 A1 29                        dw      QMMU7
 619+ 2A89 8F 20                        dw      ZBRANCH
 620+ 2A8B 0E 00                        dw      PFA_Skip - $
 621+ 2A8D 69 29                        dw          MMU7_FETCH
 622+ 2A8F 52 27 AF 28                  dw          ONE, SUBTRACT
 623+ 2A93 8F 20                        dw          ZBRANCH
 624+ 2A95 04 00                        dw          PFA_Skip - $
 625+ 2A97 54 26                        dw              FETCH
 626+ 2A99              PFA_Skip:                                    // endif
 627+ 2A99 2B 2A                        dw      TO_BODY                 // >body
 628+ 2A9B 0C 25                        dw      EXIT                    // ;
 629+ 2A9D
 630+ 2A9D              //  ______________________________________________________________________
 631+ 2A9D              //
 632+ 2A9D              // !csp         --
 633+ 2A9D              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 2A9D                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 2A9D             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 2A9D             >
 634+ 2A9D             >Dict_Ptr        defl    $
 634+ 2A9D             >
 634+ 2A9D             >//              ______________________________________________________________________
 634+ 2A9D             >//              Heap part
 634+ 2A9D             >
 634+ 2A9D             >
 634+ 2A9D             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E4             >
 634+ E6E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E4             >Latest_Definition defl  Heap_Ptr
 634+ E6E4             >
 634+ E6E4             >                // dummy db directives used to calculate length of namec
 634+ E6E4 21 43 53 50 >                db      "!CSP"
 634+ E6E8             >len_NFA         defl    $ - temp_NFA
 634+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E4             >
 634+ E6E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E5 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6E8 D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6E9             >
 634+ E6E9 DC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 634+ E6EB             >
 634+ E6EB             >mirror_Ptr      defl    $
 634+ E6EB             >
 634+ E6EB 9F 2A       >                dw      Dict_Ptr + 2        // xt
 634+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6ED             >
 634+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6ED             >
 634+ E6ED             >//              ______________________________________________________________________
 634+ E6ED             >//              Dictionary part
 634+ E6ED             >
 634+ E6ED             >                org     Dict_Ptr
 634+ 2A9D             >
 634+ 2A9D EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 2A9F             >
 634+ 2A9F             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 2A9F CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 2AA2             >
 634+ 2AA2             >
 634+ 2AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 2AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 2AA2             >
 634+ 2AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 2AA2 F3 24                        dw      SPFETCH                 // sp@
 636+ 2AA4 2E 28 5E 26                  dw      CSP, STORE              // csp !
 637+ 2AA8 0C 25                        dw      EXIT                    // ;
 638+ 2AAA
 639+ 2AAA              //  ______________________________________________________________________
 640+ 2AAA              //
 641+ 2AAA              // ?error       f n --
 642+ 2AAA              // rase error n if flag f it true
 643+ 2AAA                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 2AAA             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 2AAA             >
 643+ 2AAA             >Dict_Ptr        defl    $
 643+ 2AAA             >
 643+ 2AAA             >//              ______________________________________________________________________
 643+ 2AAA             >//              Heap part
 643+ 2AAA             >
 643+ 2AAA             >
 643+ 2AAA             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6ED             >
 643+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6ED             >Latest_Definition defl  Heap_Ptr
 643+ E6ED             >
 643+ E6ED             >                // dummy db directives used to calculate length of namec
 643+ E6ED 3F 45 52 52 >                db      "?ERROR"
 643+ E6F1 4F 52       >
 643+ E6F3             >len_NFA         defl    $ - temp_NFA
 643+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6ED             >
 643+ E6ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6EE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F2 4F 52       >
 643+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F3 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F4             >
 643+ E6F4 E4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F6             >
 643+ E6F6             >mirror_Ptr      defl    $
 643+ E6F6             >
 643+ E6F6 AC 2A       >                dw      Dict_Ptr + 2        // xt
 643+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6F8             >
 643+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6F8             >
 643+ E6F8             >//              ______________________________________________________________________
 643+ E6F8             >//              Dictionary part
 643+ E6F8             >
 643+ E6F8             >                org     Dict_Ptr
 643+ 2AAA             >
 643+ 2AAA F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 2AAC             >
 643+ 2AAC             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 2AAC CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 2AAF             >
 643+ 2AAF             >
 643+ 2AAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 2AAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 2AAF             >
 643+ 2AAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 2AAF DC 25                        dw      SWAP                    // swap
 645+ 2AB1                                                              // if
 646+ 2AB1 8F 20                        dw      ZBRANCH
 647+ 2AB3 08 00                        dw      QError_Else - $
 648+ 2AB5 EE 2F                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 2AB7                                                              // else
 650+ 2AB7 82 20                        dw      BRANCH
 651+ 2AB9 04 00                        dw      QError_Endif - $
 652+ 2ABB              QError_Else:
 653+ 2ABB C8 25                        dw          DROP                //      drop
 654+ 2ABD              QError_Endif:                                   // endif
 655+ 2ABD 0C 25                        dw      EXIT                    // ;
 656+ 2ABF
 657+ 2ABF              //  ______________________________________________________________________
 658+ 2ABF              //
 659+ 2ABF              // ?comp       --
 660+ 2ABF              // raise msg #17 if not compiling
 661+ 2ABF                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 2ABF             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 2ABF             >
 661+ 2ABF             >Dict_Ptr        defl    $
 661+ 2ABF             >
 661+ 2ABF             >//              ______________________________________________________________________
 661+ 2ABF             >//              Heap part
 661+ 2ABF             >
 661+ 2ABF             >
 661+ 2ABF             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6F8             >
 661+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6F8             >Latest_Definition defl  Heap_Ptr
 661+ E6F8             >
 661+ E6F8             >                // dummy db directives used to calculate length of namec
 661+ E6F8 3F 43 4F 4D >                db      "?COMP"
 661+ E6FC 50          >
 661+ E6FD             >len_NFA         defl    $ - temp_NFA
 661+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6F8             >
 661+ E6F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FD 50          >
 661+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E6FE             >
 661+ E6FE ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E700             >Prev_Ptr        defl    Heap_Ptr
 661+ E700             >
 661+ E700             >mirror_Ptr      defl    $
 661+ E700             >
 661+ E700 C1 2A       >                dw      Dict_Ptr + 2        // xt
 661+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E702             >
 661+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E702             >
 661+ E702             >//              ______________________________________________________________________
 661+ E702             >//              Dictionary part
 661+ E702             >
 661+ E702             >                org     Dict_Ptr
 661+ 2ABF             >
 661+ 2ABF 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 2AC1             >
 661+ 2AC1             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 2AC1 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 2AC4             >
 661+ 2AC4             >
 661+ 2AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 2AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 2AC4             >
 661+ 2AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 2AC4 16 28 54 26                  dw      STATE, FETCH            // state @
 663+ 2AC8 31 25                        dw      ZEQUAL                  // 0=
 664+ 2ACA 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 2ACE AC 2A                        dw      QERROR                  // ?error
 666+ 2AD0 0C 25                        dw      EXIT                    // ;
 667+ 2AD2
 668+ 2AD2              //  ______________________________________________________________________
 669+ 2AD2              //
 670+ 2AD2              // ?exec       --
 671+ 2AD2              // raise msg #18 if compiling
 672+ 2AD2                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 2AD2             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 2AD2             >
 672+ 2AD2             >Dict_Ptr        defl    $
 672+ 2AD2             >
 672+ 2AD2             >//              ______________________________________________________________________
 672+ 2AD2             >//              Heap part
 672+ 2AD2             >
 672+ 2AD2             >
 672+ 2AD2             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E702             >
 672+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E702             >Latest_Definition defl  Heap_Ptr
 672+ E702             >
 672+ E702             >                // dummy db directives used to calculate length of namec
 672+ E702 3F 45 58 45 >                db      "?EXEC"
 672+ E706 43          >
 672+ E707             >len_NFA         defl    $ - temp_NFA
 672+ E707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E702             >
 672+ E702 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E703 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E707 43          >
 672+ E708             >                org     $-1                 // alter last byte of Name just above to set
 672+ E707 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E708             >
 672+ E708 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70A             >Prev_Ptr        defl    Heap_Ptr
 672+ E70A             >
 672+ E70A             >mirror_Ptr      defl    $
 672+ E70A             >
 672+ E70A D4 2A       >                dw      Dict_Ptr + 2        // xt
 672+ E70C             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70C             >
 672+ E70C             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70C             >
 672+ E70C             >//              ______________________________________________________________________
 672+ E70C             >//              Dictionary part
 672+ E70C             >
 672+ E70C             >                org     Dict_Ptr
 672+ 2AD2             >
 672+ 2AD2 0A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 2AD4             >
 672+ 2AD4             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 2AD4 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 2AD7             >
 672+ 2AD7             >
 672+ 2AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 2AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 2AD7             >
 672+ 2AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 2AD7 16 28 54 26                  dw      STATE, FETCH            // state @
 674+ 2ADB 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 2ADF AC 2A                        dw      QERROR                  // ?error
 676+ 2AE1 0C 25                        dw      EXIT                    // ;
 677+ 2AE3
 678+ 2AE3              //  ______________________________________________________________________
 679+ 2AE3              //
 680+ 2AE3              // ?pairs       n1 n2 --
 681+ 2AE3              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 2AE3                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 2AE3             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 2AE3             >
 682+ 2AE3             >Dict_Ptr        defl    $
 682+ 2AE3             >
 682+ 2AE3             >//              ______________________________________________________________________
 682+ 2AE3             >//              Heap part
 682+ 2AE3             >
 682+ 2AE3             >
 682+ 2AE3             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70C             >
 682+ E70C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70C             >Latest_Definition defl  Heap_Ptr
 682+ E70C             >
 682+ E70C             >                // dummy db directives used to calculate length of namec
 682+ E70C 3F 50 41 49 >                db      "?PAIRS"
 682+ E710 52 53       >
 682+ E712             >len_NFA         defl    $ - temp_NFA
 682+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70C             >
 682+ E70C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E711 52 53       >
 682+ E713             >                org     $-1                 // alter last byte of Name just above to set
 682+ E712 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E713             >
 682+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E715             >Prev_Ptr        defl    Heap_Ptr
 682+ E715             >
 682+ E715             >mirror_Ptr      defl    $
 682+ E715             >
 682+ E715 E5 2A       >                dw      Dict_Ptr + 2        // xt
 682+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E717             >
 682+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E717             >
 682+ E717             >//              ______________________________________________________________________
 682+ E717             >//              Dictionary part
 682+ E717             >
 682+ E717             >                org     Dict_Ptr
 682+ 2AE3             >
 682+ 2AE3 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 2AE5             >
 682+ 2AE5             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 2AE5 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 2AE8             >
 682+ 2AE8             >
 682+ 2AE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 2AE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 2AE8             >
 682+ 2AE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 2AE8 AF 28                        dw      SUBTRACT                // -
 684+ 2AEA 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 2AEE AC 2A                        dw      QERROR                  // ?error
 686+ 2AF0 0C 25                        dw      EXIT                    // ;
 687+ 2AF2
 688+ 2AF2              //  ______________________________________________________________________
 689+ 2AF2              //
 690+ 2AF2              // ?csp       --
 691+ 2AF2              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 2AF2              // Compiler relies on that for  syntax checking of structures
 693+ 2AF2                              Colon_Def QCSP, "?CSP", is_normal
 693+ 2AF2             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 2AF2             >
 693+ 2AF2             >Dict_Ptr        defl    $
 693+ 2AF2             >
 693+ 2AF2             >//              ______________________________________________________________________
 693+ 2AF2             >//              Heap part
 693+ 2AF2             >
 693+ 2AF2             >
 693+ 2AF2             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E717             >
 693+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E717             >Latest_Definition defl  Heap_Ptr
 693+ E717             >
 693+ E717             >                // dummy db directives used to calculate length of namec
 693+ E717 3F 43 53 50 >                db      "?CSP"
 693+ E71B             >len_NFA         defl    $ - temp_NFA
 693+ E71B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E717             >
 693+ E717 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E718 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71C             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71B D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71C             >
 693+ E71C 0C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E71E             >Prev_Ptr        defl    Heap_Ptr
 693+ E71E             >
 693+ E71E             >mirror_Ptr      defl    $
 693+ E71E             >
 693+ E71E F4 2A       >                dw      Dict_Ptr + 2        // xt
 693+ E720             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E720             >
 693+ E720             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E720             >
 693+ E720             >//              ______________________________________________________________________
 693+ E720             >//              Dictionary part
 693+ E720             >
 693+ E720             >                org     Dict_Ptr
 693+ 2AF2             >
 693+ 2AF2 1E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 2AF4             >
 693+ 2AF4             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 2AF4 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 2AF7             >
 693+ 2AF7             >
 693+ 2AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 2AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 2AF7             >
 693+ 2AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 2AF7 F3 24                        dw      SPFETCH                 // sp@
 695+ 2AF9 2E 28 54 26                  dw      CSP, FETCH              // csp @
 696+ 2AFD AF 28                        dw      SUBTRACT                // -
 697+ 2AFF 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 2B03 AC 2A                        dw      QERROR                  // ?error
 699+ 2B05 0C 25                        dw      EXIT                    // ;
 700+ 2B07
 701+ 2B07              //  ______________________________________________________________________
 702+ 2B07              //
 703+ 2B07              // ?loading      --
 704+ 2B07              // raise msg #22 if not loading
 705+ 2B07                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 2B07             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 2B07             >
 705+ 2B07             >Dict_Ptr        defl    $
 705+ 2B07             >
 705+ 2B07             >//              ______________________________________________________________________
 705+ 2B07             >//              Heap part
 705+ 2B07             >
 705+ 2B07             >
 705+ 2B07             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E720             >
 705+ E720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E720             >Latest_Definition defl  Heap_Ptr
 705+ E720             >
 705+ E720             >                // dummy db directives used to calculate length of namec
 705+ E720 3F 4C 4F 41 >                db      "?LOADING"
 705+ E724 44 49 4E 47 >
 705+ E728             >len_NFA         defl    $ - temp_NFA
 705+ E728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E720             >
 705+ E720 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E721 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E725 44 49 4E 47 >
 705+ E729             >                org     $-1                 // alter last byte of Name just above to set
 705+ E728 C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E729             >
 705+ E729 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72B             >Prev_Ptr        defl    Heap_Ptr
 705+ E72B             >
 705+ E72B             >mirror_Ptr      defl    $
 705+ E72B             >
 705+ E72B 09 2B       >                dw      Dict_Ptr + 2        // xt
 705+ E72D             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72D             >
 705+ E72D             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72D             >
 705+ E72D             >//              ______________________________________________________________________
 705+ E72D             >//              Dictionary part
 705+ E72D             >
 705+ E72D             >                org     Dict_Ptr
 705+ 2B07             >
 705+ 2B07 2B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 2B09             >
 705+ 2B09             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 2B09 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 2B0C             >
 705+ 2B0C             >
 705+ 2B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 2B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 2B0C             >
 705+ 2B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 2B0C EC 27 54 26                  dw      BLK, FETCH              // blk @
 707+ 2B10 31 25                        dw      ZEQUAL                  // 0=
 708+ 2B12 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 2B16 AC 2A                        dw      QERROR                  // ?error
 710+ 2B18 0C 25                        dw      EXIT                    // ;
 711+ 2B1A
 712+ 2B1A              //  ______________________________________________________________________
 713+ 2B1A              //
 714+ 2B1A              // compile      --
 715+ 2B1A              // compiles the following word
 716+ 2B1A                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 2B1A             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 2B1A             >
 716+ 2B1A             >Dict_Ptr        defl    $
 716+ 2B1A             >
 716+ 2B1A             >//              ______________________________________________________________________
 716+ 2B1A             >//              Heap part
 716+ 2B1A             >
 716+ 2B1A             >
 716+ 2B1A             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72D             >
 716+ E72D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72D             >Latest_Definition defl  Heap_Ptr
 716+ E72D             >
 716+ E72D             >                // dummy db directives used to calculate length of namec
 716+ E72D 43 4F 4D 50 >                db      "COMPILE"
 716+ E731 49 4C 45    >
 716+ E734             >len_NFA         defl    $ - temp_NFA
 716+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72D             >
 716+ E72D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E72E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E732 49 4C 45    >
 716+ E735             >                org     $-1                 // alter last byte of Name just above to set
 716+ E734 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E735             >
 716+ E735 20 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E737             >Prev_Ptr        defl    Heap_Ptr
 716+ E737             >
 716+ E737             >mirror_Ptr      defl    $
 716+ E737             >
 716+ E737 1C 2B       >                dw      Dict_Ptr + 2        // xt
 716+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E739             >
 716+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E739             >
 716+ E739             >//              ______________________________________________________________________
 716+ E739             >//              Dictionary part
 716+ E739             >
 716+ E739             >                org     Dict_Ptr
 716+ 2B1A             >
 716+ 2B1A 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 2B1C             >
 716+ 2B1C             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 2B1C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 2B1F             >
 716+ 2B1F             >
 716+ 2B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 2B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 2B1F             >
 716+ 2B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 2B1F C1 2A                        dw      QCOMP                   // ?comp
 718+ 2B21 21 25                        dw      R_TO                    // r>
 719+ 2B23 E3 25 8D 25                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 2B27 16 25                        dw      TO_R                    // >r
 721+ 2B29 54 26 86 28                  dw      FETCH, COMMA            // @ ,
 722+ 2B2D 0C 25                        dw      EXIT                    // ;
 723+ 2B2F
 724+ 2B2F              //  ______________________________________________________________________
 725+ 2B2F              //
 726+ 2B2F              // compile,     --
 727+ 2B2F              // compiles the following word
 728+ 2B2F                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 2B2F             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 2B2F             >
 728+ 2B2F             >Dict_Ptr        defl    $
 728+ 2B2F             >
 728+ 2B2F             >//              ______________________________________________________________________
 728+ 2B2F             >//              Heap part
 728+ 2B2F             >
 728+ 2B2F             >
 728+ 2B2F             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E739             >
 728+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E739             >Latest_Definition defl  Heap_Ptr
 728+ E739             >
 728+ E739             >                // dummy db directives used to calculate length of namec
 728+ E739 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73D 49 4C 45 2C >
 728+ E741             >len_NFA         defl    $ - temp_NFA
 728+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E739             >
 728+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73A 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E73E 49 4C 45 2C >
 728+ E742             >                org     $-1                 // alter last byte of Name just above to set
 728+ E741 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E742             >
 728+ E742 2D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E744             >Prev_Ptr        defl    Heap_Ptr
 728+ E744             >
 728+ E744             >mirror_Ptr      defl    $
 728+ E744             >
 728+ E744 31 2B       >                dw      Dict_Ptr + 2        // xt
 728+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E746             >
 728+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E746             >
 728+ E746             >//              ______________________________________________________________________
 728+ E746             >//              Dictionary part
 728+ E746             >
 728+ E746             >                org     Dict_Ptr
 728+ 2B2F             >
 728+ 2B2F 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 2B31             >
 728+ 2B31             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 2B31 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 2B34             >
 728+ 2B34             >
 728+ 2B34             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 2B34             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 2B34             >
 728+ 2B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 2B34 C1 2A                        dw      QCOMP                   // ?comp
 730+ 2B36 86 28                        dw      COMMA                   // ,
 731+ 2B38 0C 25                        dw      EXIT                    // ;
 732+ 2B3A
 733+ 2B3A              //  ______________________________________________________________________
 734+ 2B3A              //
 735+ 2B3A              // [            --
 736+ 2B3A              // stop compilation
 737+ 2B3A                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 2B3A             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 2B3A             >
 737+ 2B3A             >Dict_Ptr        defl    $
 737+ 2B3A             >
 737+ 2B3A             >//              ______________________________________________________________________
 737+ 2B3A             >//              Heap part
 737+ 2B3A             >
 737+ 2B3A             >
 737+ 2B3A             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E746             >
 737+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E746             >Latest_Definition defl  Heap_Ptr
 737+ E746             >
 737+ E746             >                // dummy db directives used to calculate length of namec
 737+ E746 5B          >                db      "["
 737+ E747             >len_NFA         defl    $ - temp_NFA
 737+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E746             >
 737+ E746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E747 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E748             >                org     $-1                 // alter last byte of Name just above to set
 737+ E747 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E748             >
 737+ E748 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74A             >Prev_Ptr        defl    Heap_Ptr
 737+ E74A             >
 737+ E74A             >mirror_Ptr      defl    $
 737+ E74A             >
 737+ E74A 3C 2B       >                dw      Dict_Ptr + 2        // xt
 737+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74C             >
 737+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74C             >
 737+ E74C             >//              ______________________________________________________________________
 737+ E74C             >//              Dictionary part
 737+ E74C             >
 737+ E74C             >                org     Dict_Ptr
 737+ 2B3A             >
 737+ 2B3A 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 2B3C             >
 737+ 2B3C             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 2B3C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 2B3F             >
 737+ 2B3F             >
 737+ 2B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 2B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 2B3F             >
 737+ 2B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 2B3F 4B 27                        dw      ZERO                    // 0
 739+ 2B41 16 28 5E 26                  dw      STATE, STORE            // state !
 740+ 2B45 0C 25                        dw      EXIT                    // ; immediate
 741+ 2B47
 742+ 2B47              //  ______________________________________________________________________
 743+ 2B47              //
 744+ 2B47              // ]            --
 745+ 2B47              // start compilation
 746+ 2B47                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 2B47             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 2B47             >
 746+ 2B47             >Dict_Ptr        defl    $
 746+ 2B47             >
 746+ 2B47             >//              ______________________________________________________________________
 746+ 2B47             >//              Heap part
 746+ 2B47             >
 746+ 2B47             >
 746+ 2B47             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74C             >
 746+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74C             >Latest_Definition defl  Heap_Ptr
 746+ E74C             >
 746+ E74C             >                // dummy db directives used to calculate length of namec
 746+ E74C 5D          >                db      "]"
 746+ E74D             >len_NFA         defl    $ - temp_NFA
 746+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74C             >
 746+ E74C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74D 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74D DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E74E             >
 746+ E74E 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E750             >Prev_Ptr        defl    Heap_Ptr
 746+ E750             >
 746+ E750             >mirror_Ptr      defl    $
 746+ E750             >
 746+ E750 49 2B       >                dw      Dict_Ptr + 2        // xt
 746+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E752             >
 746+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E752             >
 746+ E752             >//              ______________________________________________________________________
 746+ E752             >//              Dictionary part
 746+ E752             >
 746+ E752             >                org     Dict_Ptr
 746+ 2B47             >
 746+ 2B47 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 2B49             >
 746+ 2B49             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 2B49 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 2B4C             >
 746+ 2B4C             >
 746+ 2B4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 2B4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 2B4C             >
 746+ 2B4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 2B4C 3D 20 C0 00                  dw      LIT, $C0                // 192
 748+ 2B50 16 28 5E 26                  dw      STATE, STORE            // state !
 749+ 2B54 0C 25                        dw      EXIT                    // ;
 750+ 2B56
 751+ 2B56              //  ______________________________________________________________________
 752+ 2B56              //
 753+ 2B56              // smudge       --
 754+ 2B56              // toggle smudge bit of latest definition
 755+ 2B56                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 2B56             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 2B56             >
 755+ 2B56             >Dict_Ptr        defl    $
 755+ 2B56             >
 755+ 2B56             >//              ______________________________________________________________________
 755+ 2B56             >//              Heap part
 755+ 2B56             >
 755+ 2B56             >
 755+ 2B56             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E752             >
 755+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E752             >Latest_Definition defl  Heap_Ptr
 755+ E752             >
 755+ E752             >                // dummy db directives used to calculate length of namec
 755+ E752 53 4D 55 44 >                db      "SMUDGE"
 755+ E756 47 45       >
 755+ E758             >len_NFA         defl    $ - temp_NFA
 755+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E752             >
 755+ E752 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E753 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E757 47 45       >
 755+ E759             >                org     $-1                 // alter last byte of Name just above to set
 755+ E758 C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E759             >
 755+ E759 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75B             >Prev_Ptr        defl    Heap_Ptr
 755+ E75B             >
 755+ E75B             >mirror_Ptr      defl    $
 755+ E75B             >
 755+ E75B 58 2B       >                dw      Dict_Ptr + 2        // xt
 755+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75D             >
 755+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75D             >
 755+ E75D             >//              ______________________________________________________________________
 755+ E75D             >//              Dictionary part
 755+ E75D             >
 755+ E75D             >                org     Dict_Ptr
 755+ 2B56             >
 755+ 2B56 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 2B58             >
 755+ 2B58             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 2B58 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 2B5B             >
 755+ 2B5B             >
 755+ 2B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 2B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 2B5B             >
 755+ 2B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 2B5B 1C 2A                        dw      LATEST                  // latest
 757+ 2B5D 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 2B61 4B 26                        dw      TOGGLE                  // toggle
 759+ 2B63 0C 25                        dw      EXIT                    // ;
 760+ 2B65
 761+ 2B65              //  ______________________________________________________________________
 762+ 2B65              //
 763+ 2B65              // immediate    --
 764+ 2B65              // make immediate the latest definition
 765+ 2B65                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 2B65             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 2B65             >
 765+ 2B65             >Dict_Ptr        defl    $
 765+ 2B65             >
 765+ 2B65             >//              ______________________________________________________________________
 765+ 2B65             >//              Heap part
 765+ 2B65             >
 765+ 2B65             >
 765+ 2B65             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75D             >
 765+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75D             >Latest_Definition defl  Heap_Ptr
 765+ E75D             >
 765+ E75D             >                // dummy db directives used to calculate length of namec
 765+ E75D 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E761 44 49 41 54 >
 765+ E765 45          >
 765+ E766             >len_NFA         defl    $ - temp_NFA
 765+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75D             >
 765+ E75D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E762 44 49 41 54 >
 765+ E766 45          >
 765+ E767             >                org     $-1                 // alter last byte of Name just above to set
 765+ E766 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E767             >
 765+ E767 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E769             >Prev_Ptr        defl    Heap_Ptr
 765+ E769             >
 765+ E769             >mirror_Ptr      defl    $
 765+ E769             >
 765+ E769 67 2B       >                dw      Dict_Ptr + 2        // xt
 765+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76B             >
 765+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76B             >
 765+ E76B             >//              ______________________________________________________________________
 765+ E76B             >//              Dictionary part
 765+ E76B             >
 765+ E76B             >                org     Dict_Ptr
 765+ 2B65             >
 765+ 2B65 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 2B67             >
 765+ 2B67             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 2B67 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 2B6A             >
 765+ 2B6A             >
 765+ 2B6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 2B6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 2B6A             >
 765+ 2B6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 2B6A 1C 2A                        dw      LATEST                  // latest
 767+ 2B6C 3D 20 40 00                  dw      LIT, $40                // 64
 768+ 2B70 4B 26                        dw      TOGGLE                  // toggle
 769+ 2B72 0C 25                        dw      EXIT                    // ;
 770+ 2B74
 771+ 2B74              //  ______________________________________________________________________
 772+ 2B74              //
 773+ 2B74              // hex          --
 774+ 2B74              // change numeration base
 775+ 2B74                              Colon_Def HEX, "HEX", is_normal
 775+ 2B74             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 2B74             >
 775+ 2B74             >Dict_Ptr        defl    $
 775+ 2B74             >
 775+ 2B74             >//              ______________________________________________________________________
 775+ 2B74             >//              Heap part
 775+ 2B74             >
 775+ 2B74             >
 775+ 2B74             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76B             >
 775+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76B             >Latest_Definition defl  Heap_Ptr
 775+ E76B             >
 775+ E76B             >                // dummy db directives used to calculate length of namec
 775+ E76B 48 45 58    >                db      "HEX"
 775+ E76E             >len_NFA         defl    $ - temp_NFA
 775+ E76E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76B             >
 775+ E76B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E76F             >                org     $-1                 // alter last byte of Name just above to set
 775+ E76E D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E76F             >
 775+ E76F 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E771             >Prev_Ptr        defl    Heap_Ptr
 775+ E771             >
 775+ E771             >mirror_Ptr      defl    $
 775+ E771             >
 775+ E771 76 2B       >                dw      Dict_Ptr + 2        // xt
 775+ E773             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E773             >
 775+ E773             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E773             >
 775+ E773             >//              ______________________________________________________________________
 775+ E773             >//              Dictionary part
 775+ E773             >
 775+ E773             >                org     Dict_Ptr
 775+ 2B74             >
 775+ 2B74 71 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 2B76             >
 775+ 2B76             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 2B76 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 2B79             >
 775+ 2B79             >
 775+ 2B79             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 2B79             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 2B79             >
 775+ 2B79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 2B79 3D 20 10 00                  dw      LIT, 16                 // 16
 777+ 2B7D 1C 28 5E 26                  dw      BASE, STORE             // base !
 778+ 2B81 0C 25                        dw      EXIT                    // ;
 779+ 2B83
 780+ 2B83              //  ______________________________________________________________________
 781+ 2B83              //
 782+ 2B83              // decimal      --
 783+ 2B83              // change numeration base
 784+ 2B83                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 2B83             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 2B83             >
 784+ 2B83             >Dict_Ptr        defl    $
 784+ 2B83             >
 784+ 2B83             >//              ______________________________________________________________________
 784+ 2B83             >//              Heap part
 784+ 2B83             >
 784+ 2B83             >
 784+ 2B83             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E773             >
 784+ E773             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E773             >Latest_Definition defl  Heap_Ptr
 784+ E773             >
 784+ E773             >                // dummy db directives used to calculate length of namec
 784+ E773 44 45 43 49 >                db      "DECIMAL"
 784+ E777 4D 41 4C    >
 784+ E77A             >len_NFA         defl    $ - temp_NFA
 784+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E773             >
 784+ E773 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E774 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E778 4D 41 4C    >
 784+ E77B             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77B             >
 784+ E77B 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77D             >Prev_Ptr        defl    Heap_Ptr
 784+ E77D             >
 784+ E77D             >mirror_Ptr      defl    $
 784+ E77D             >
 784+ E77D 85 2B       >                dw      Dict_Ptr + 2        // xt
 784+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E77F             >
 784+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E77F             >
 784+ E77F             >//              ______________________________________________________________________
 784+ E77F             >//              Dictionary part
 784+ E77F             >
 784+ E77F             >                org     Dict_Ptr
 784+ 2B83             >
 784+ 2B83 7D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 2B85             >
 784+ 2B85             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 2B85 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 2B88             >
 784+ 2B88             >
 784+ 2B88             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 2B88             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 2B88             >
 784+ 2B88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 2B88 3D 20 0A 00                  dw      LIT, 10                 // 10
 786+ 2B8C 1C 28 5E 26                  dw      BASE, STORE             // base !
 787+ 2B90 0C 25                        dw      EXIT                    // ;
 788+ 2B92
 789+ 2B92              //  ______________________________________________________________________
 790+ 2B92              //
 791+ 2B92              // (;code)       --
 792+ 2B92              // patch to CFA to call/jump to the "following code"
 793+ 2B92                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 2B92             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 2B92             >
 793+ 2B92             >Dict_Ptr        defl    $
 793+ 2B92             >
 793+ 2B92             >//              ______________________________________________________________________
 793+ 2B92             >//              Heap part
 793+ 2B92             >
 793+ 2B92             >
 793+ 2B92             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E77F             >
 793+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E77F             >Latest_Definition defl  Heap_Ptr
 793+ E77F             >
 793+ E77F             >                // dummy db directives used to calculate length of namec
 793+ E77F 28 3B 43 4F >                db      "(;CODE)"
 793+ E783 44 45 29    >
 793+ E786             >len_NFA         defl    $ - temp_NFA
 793+ E786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E77F             >
 793+ E77F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E780 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E784 44 45 29    >
 793+ E787             >                org     $-1                 // alter last byte of Name just above to set
 793+ E786 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E787             >
 793+ E787 73 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E789             >Prev_Ptr        defl    Heap_Ptr
 793+ E789             >
 793+ E789             >mirror_Ptr      defl    $
 793+ E789             >
 793+ E789 94 2B       >                dw      Dict_Ptr + 2        // xt
 793+ E78B             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78B             >
 793+ E78B             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78B             >
 793+ E78B             >//              ______________________________________________________________________
 793+ E78B             >//              Dictionary part
 793+ E78B             >
 793+ E78B             >                org     Dict_Ptr
 793+ 2B92             >
 793+ 2B92 89 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 2B94             >
 793+ 2B94             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 2B94 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 2B97             >
 793+ 2B97             >
 793+ 2B97             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 2B97             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 2B97             >
 793+ 2B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 2B97 21 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 2B99 1C 2A                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 2B9B 7A 2A 55 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 2B9F
 798+ 2B9F 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 2BA3 BF 25 72 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 2BA7 77 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 2BA9
 802+ 2BA9 5E 26                        dw      STORE                   // !
 803+ 2BAB 0C 25                        dw      EXIT                    // ;
 804+ 2BAD
 805+ 2BAD              //  ______________________________________________________________________
 806+ 2BAD              //
 807+ 2BAD              // ;code        --
 808+ 2BAD                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 2BAD             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 2BAD             >
 808+ 2BAD             >Dict_Ptr        defl    $
 808+ 2BAD             >
 808+ 2BAD             >//              ______________________________________________________________________
 808+ 2BAD             >//              Heap part
 808+ 2BAD             >
 808+ 2BAD             >
 808+ 2BAD             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78B             >
 808+ E78B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78B             >Latest_Definition defl  Heap_Ptr
 808+ E78B             >
 808+ E78B             >                // dummy db directives used to calculate length of namec
 808+ E78B 3B 43 4F 44 >                db      ";CODE"
 808+ E78F 45          >
 808+ E790             >len_NFA         defl    $ - temp_NFA
 808+ E790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78B             >
 808+ E78B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E790 45          >
 808+ E791             >                org     $-1                 // alter last byte of Name just above to set
 808+ E790 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E791             >
 808+ E791 7F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E793             >Prev_Ptr        defl    Heap_Ptr
 808+ E793             >
 808+ E793             >mirror_Ptr      defl    $
 808+ E793             >
 808+ E793 AF 2B       >                dw      Dict_Ptr + 2        // xt
 808+ E795             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E795             >
 808+ E795             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E795             >
 808+ E795             >//              ______________________________________________________________________
 808+ E795             >//              Dictionary part
 808+ E795             >
 808+ E795             >                org     Dict_Ptr
 808+ 2BAD             >
 808+ 2BAD 93 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 2BAF             >
 808+ 2BAF             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 2BAF CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 2BB2             >
 808+ 2BB2             >
 808+ 2BB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 2BB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 2BB2             >
 808+ 2BB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 2BB2 F4 2A                        dw      QCSP                    // ?csp
 810+ 2BB4 1C 2B                        dw      COMPILE                 // compile
 811+ 2BB6 94 2B                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 2BB8 3C 2B                        dw      SQUARED_OPEN            // [
 813+ 2BBA 12 27                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 2BBC 0C 25                        dw      EXIT                    // ; immediate
 815+ 2BBE
 816+ 2BBE              //  ______________________________________________________________________
 817+ 2BBE              //
 818+ 2BBE              // <builds      --
 819+ 2BBE                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 2BBE             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 2BBE             >
 819+ 2BBE             >Dict_Ptr        defl    $
 819+ 2BBE             >
 819+ 2BBE             >//              ______________________________________________________________________
 819+ 2BBE             >//              Heap part
 819+ 2BBE             >
 819+ 2BBE             >
 819+ 2BBE             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E795             >
 819+ E795             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E795             >Latest_Definition defl  Heap_Ptr
 819+ E795             >
 819+ E795             >                // dummy db directives used to calculate length of namec
 819+ E795 3C 42 55 49 >                db      "<BUILDS"
 819+ E799 4C 44 53    >
 819+ E79C             >len_NFA         defl    $ - temp_NFA
 819+ E79C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E795             >
 819+ E795 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E796 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79A 4C 44 53    >
 819+ E79D             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79C D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79D             >
 819+ E79D 8B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E79F             >Prev_Ptr        defl    Heap_Ptr
 819+ E79F             >
 819+ E79F             >mirror_Ptr      defl    $
 819+ E79F             >
 819+ E79F C0 2B       >                dw      Dict_Ptr + 2        // xt
 819+ E7A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A1             >
 819+ E7A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A1             >
 819+ E7A1             >//              ______________________________________________________________________
 819+ E7A1             >//              Dictionary part
 819+ E7A1             >
 819+ E7A1             >                org     Dict_Ptr
 819+ 2BBE             >
 819+ 2BBE 9F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 2BC0             >
 819+ 2BC0             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 2BC0 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 2BC3             >
 819+ 2BC3             >
 819+ 2BC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 2BC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 2BC3             >
 819+ 2BC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 2BC3 4B 27                        dw      ZERO                    // 0
 821+ 2BC5 16 27                        dw      CONSTANT                // constant
 822+ 2BC7 0C 25                        dw      EXIT                    // ;
 823+ 2BC9
 824+ 2BC9              //  ______________________________________________________________________
 825+ 2BC9              //
 826+ 2BC9              // recurse      --
 827+ 2BC9              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 2BC9              //              dw      QCOMP                   // ?comp
 829+ 2BC9              //              dw      LATEST                  // latest
 830+ 2BC9              //              dw      PFA, CFA                // pfa cfa
 831+ 2BC9              //              dw      COMMA                   // ,
 832+ 2BC9              //              dw      EXIT                    // ; immediate
 833+ 2BC9
 834+ 2BC9              //  ______________________________________________________________________
 835+ 2BC9              //
 836+ 2BC9              // does>     --
 837+ 2BC9                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 2BC9             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 2BC9             >
 837+ 2BC9             >Dict_Ptr        defl    $
 837+ 2BC9             >
 837+ 2BC9             >//              ______________________________________________________________________
 837+ 2BC9             >//              Heap part
 837+ 2BC9             >
 837+ 2BC9             >
 837+ 2BC9             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A1             >
 837+ E7A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A1             >Latest_Definition defl  Heap_Ptr
 837+ E7A1             >
 837+ E7A1             >                // dummy db directives used to calculate length of namec
 837+ E7A1 44 4F 45 53 >                db      "DOES>"
 837+ E7A5 3E          >
 837+ E7A6             >len_NFA         defl    $ - temp_NFA
 837+ E7A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A1             >
 837+ E7A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A2 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A6 3E          >
 837+ E7A7             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A6 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A7             >
 837+ E7A7 95 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7A9             >Prev_Ptr        defl    Heap_Ptr
 837+ E7A9             >
 837+ E7A9             >mirror_Ptr      defl    $
 837+ E7A9             >
 837+ E7A9 CB 2B       >                dw      Dict_Ptr + 2        // xt
 837+ E7AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AB             >
 837+ E7AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AB             >
 837+ E7AB             >//              ______________________________________________________________________
 837+ E7AB             >//              Dictionary part
 837+ E7AB             >
 837+ E7AB             >                org     Dict_Ptr
 837+ 2BC9             >
 837+ 2BC9 A9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 2BCB             >
 837+ 2BCB             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 2BCB CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 2BCE             >
 837+ 2BCE             >
 837+ 2BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 2BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 2BCE             >
 837+ 2BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 2BCE 21 25                        dw      R_TO                    // r>
 839+ 2BD0 1C 2A                        dw      LATEST                  // latest
 840+ 2BD2 7A 2A                        dw      PFA                     // pfa
 841+ 2BD4 5E 26                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 2BD6              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 2BD6 94 2B                        dw      C_SEMICOLON_CODE        // ;code
 844+ 2BD8              Does_Ptr:
 845+ 2BD8                              // via call coded in CFA
 846+ 2BD8 EB                           ex      de, hl //**
 847+ 2BD9                              // *** ldhlrp
 848+ 2BD9 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 2BDA 70                           ld      (hl), b
 850+ 2BDB 2B                           dec     hl
 851+ 2BDC 71                           ld      (hl), c
 852+ 2BDD                              // *** ldrphl
 853+ 2BDD EB                           ex      de, hl //**
 854+ 2BDE E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 2BDF
 856+ 2BDF 4E                           ld      c, (hl)
 857+ 2BE0 23                           inc     hl
 858+ 2BE1 46                           ld      b, (hl)
 859+ 2BE2 23                           inc     hl
 860+ 2BE3
 861+ 2BE3                              psh1
 861+ 2BE3 E5          >                push    hl
 861+ 2BE4 DD E9       >                jp      (ix)
 862+ 2BE6                              // SMUDGE !
 863+ 2BE6
 864+ 2BE6              //  ______________________________________________________________________
 865+ 2BE6              //
 866+ 2BE6              // count        a -- a2 n
 867+ 2BE6              // expects a counted string at address a, returns string address and counter
 868+ 2BE6                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 2BE6             >
 868+ 2BE6             >Dict_Ptr        defl    $
 868+ 2BE6             >
 868+ 2BE6             >//              ______________________________________________________________________
 868+ 2BE6             >//              Heap part
 868+ 2BE6             >
 868+ 2BE6             >
 868+ 2BE6             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AB             >
 868+ E7AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AB             >Latest_Definition defl  Heap_Ptr
 868+ E7AB             >
 868+ E7AB             >                // dummy db directives used to calculate length of namec
 868+ E7AB 43 4F 55 4E >                db      "COUNT"
 868+ E7AF 54          >
 868+ E7B0             >len_NFA         defl    $ - temp_NFA
 868+ E7B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AB             >
 868+ E7AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B0 54          >
 868+ E7B1             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B0 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B1             >
 868+ E7B1 A1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B3             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B3             >
 868+ E7B3             >mirror_Ptr      defl    $
 868+ E7B3             >
 868+ E7B3 E8 2B       >                dw      Dict_Ptr + 2        // xt
 868+ E7B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B5             >
 868+ E7B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B5             >
 868+ E7B5             >//              ______________________________________________________________________
 868+ E7B5             >//              Dictionary part
 868+ E7B5             >
 868+ E7B5             >                org     Dict_Ptr
 868+ 2BE6             >
 868+ 2BE6 B3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 2BE8             >
 868+ 2BE8             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 2BE8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 2BE8 ~           >
 868+ 2BE8 ~           >
 868+ 2BE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 2BE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 2BE8             >
 868+ 2BE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 2BE8 D9                           exx
 870+ 2BE9 E1                           pop     hl
 871+ 2BEA 5E                           ld      e, (hl)
 872+ 2BEB 16 00                        ld      d, 0
 873+ 2BED 23                           inc     hl
 874+ 2BEE              Count_Here:
 875+ 2BEE E5                           push    hl
 876+ 2BEF D5                           push    de
 877+ 2BF0 D9                           exx
 878+ 2BF1                              next
 878+ 2BF1 DD E9       >                jp      (ix)
 879+ 2BF3              //                pop     hl
 880+ 2BF3              //                ld      a, (hl)
 881+ 2BF3              //                inc     hl
 882+ 2BF3              //                push    hl
 883+ 2BF3              //                ld      h, 0
 884+ 2BF3              //                ld      l, a
 885+ 2BF3              //                push    hl
 886+ 2BF3              //                next
 887+ 2BF3
 888+ 2BF3              //  ______________________________________________________________________
 889+ 2BF3              //
 890+ 2BF3              // bounds       a n -- a+n n
 891+ 2BF3              // given an address and a length ( a n ) calculate the bound addresses
 892+ 2BF3              // suitable for DO-LOOP
 893+ 2BF3                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 2BF3             >
 893+ 2BF3             >Dict_Ptr        defl    $
 893+ 2BF3             >
 893+ 2BF3             >//              ______________________________________________________________________
 893+ 2BF3             >//              Heap part
 893+ 2BF3             >
 893+ 2BF3             >
 893+ 2BF3             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B5             >
 893+ E7B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B5             >Latest_Definition defl  Heap_Ptr
 893+ E7B5             >
 893+ E7B5             >                // dummy db directives used to calculate length of namec
 893+ E7B5 42 4F 55 4E >                db      "BOUNDS"
 893+ E7B9 44 53       >
 893+ E7BB             >len_NFA         defl    $ - temp_NFA
 893+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B5             >
 893+ E7B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B6 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BA 44 53       >
 893+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BB D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BC             >
 893+ E7BC AB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 893+ E7BE             >
 893+ E7BE             >mirror_Ptr      defl    $
 893+ E7BE             >
 893+ E7BE F5 2B       >                dw      Dict_Ptr + 2        // xt
 893+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C0             >
 893+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C0             >
 893+ E7C0             >//              ______________________________________________________________________
 893+ E7C0             >//              Dictionary part
 893+ E7C0             >
 893+ E7C0             >                org     Dict_Ptr
 893+ 2BF3             >
 893+ 2BF3 BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 2BF5             >
 893+ 2BF5             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 2BF5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 2BF5 ~           >
 893+ 2BF5 ~           >
 893+ 2BF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 2BF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 2BF5             >
 893+ 2BF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 2BF5 D9                           exx
 895+ 2BF6 E1                           pop     hl
 896+ 2BF7 D1                           pop     de
 897+ 2BF8 19                           add     hl, de
 898+ 2BF9 18 F3                        jr      Count_Here
 899+ 2BFB                              // push    hl
 900+ 2BFB                              // push    de
 901+ 2BFB                              // exx
 902+ 2BFB                              // next
 903+ 2BFB
 904+ 2BFB              //  ______________________________________________________________________
 905+ 2BFB              //
 906+ 2BFB              // leave        --
 907+ 2BFB              // Compile (leave) to leave current LOOP and jump just after it
 908+ 2BFB                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 2BFB             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 2BFB             >
 908+ 2BFB             >Dict_Ptr        defl    $
 908+ 2BFB             >
 908+ 2BFB             >//              ______________________________________________________________________
 908+ 2BFB             >//              Heap part
 908+ 2BFB             >
 908+ 2BFB             >
 908+ 2BFB             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C0             >
 908+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C0             >Latest_Definition defl  Heap_Ptr
 908+ E7C0             >
 908+ E7C0             >                // dummy db directives used to calculate length of namec
 908+ E7C0 4C 45 41 56 >                db      "LEAVE"
 908+ E7C4 45          >
 908+ E7C5             >len_NFA         defl    $ - temp_NFA
 908+ E7C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C0             >
 908+ E7C0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C1 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C5 45          >
 908+ E7C6             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C5 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C6             >
 908+ E7C6 B5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7C8             >Prev_Ptr        defl    Heap_Ptr
 908+ E7C8             >
 908+ E7C8             >mirror_Ptr      defl    $
 908+ E7C8             >
 908+ E7C8 FD 2B       >                dw      Dict_Ptr + 2        // xt
 908+ E7CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CA             >
 908+ E7CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CA             >
 908+ E7CA             >//              ______________________________________________________________________
 908+ E7CA             >//              Dictionary part
 908+ E7CA             >
 908+ E7CA             >                org     Dict_Ptr
 908+ 2BFB             >
 908+ 2BFB C8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 2BFD             >
 908+ 2BFD             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 2BFD CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 2C00             >
 908+ 2C00             >
 908+ 2C00             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 2C00             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 2C00             >
 908+ 2C00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 2C00 1C 2B 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 2C04 70 28 16 25                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 2C08 4B 27 86 28
 911+ 2C0C 4B 27 4B 27                  dw      ZERO, ZERO
 912+ 2C10 F3 24 E3 25                  dw      SPFETCH, DUP
 913+ 2C14 8D 25 8D 25                  dw      CELL_PLUS, CELL_PLUS
 914+ 2C18 D3 25                        dw      TUCK
 915+ 2C1A 2E 28 54 26                  dw      CSP, FETCH
 916+ 2C1E DC 25 AF 28                  dw      SWAP, SUBTRACT
 917+ 2C22 4D 24                        dw      CMOVE
 918+ 2C24 2E 28 54 26                  dw      CSP, FETCH, CELL_MINUS
 918+ 2C28 91 25
 919+ 2C2A 21 25 BF 25                  dw      R_TO, OVER, STORE
 919+ 2C2E 5E 26
 920+ 2C30 91 25 4B 27                  dw      CELL_MINUS, ZERO
 921+ 2C34 DC 25 5E 26                  dw      SWAP, STORE
 922+ 2C38 0C 25                        dw      EXIT                    // ;
 923+ 2C3A
 924+ 2C3A              //  ______________________________________________________________________
 925+ 2C3A              //
 926+ 2C3A              // type         a n --
 927+ 2C3A              // Sends to current output channel n characters starting at address a.
 928+ 2C3A                              Colon_Def TYPE, "TYPE", is_normal
 928+ 2C3A             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 2C3A             >
 928+ 2C3A             >Dict_Ptr        defl    $
 928+ 2C3A             >
 928+ 2C3A             >//              ______________________________________________________________________
 928+ 2C3A             >//              Heap part
 928+ 2C3A             >
 928+ 2C3A             >
 928+ 2C3A             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CA             >
 928+ E7CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CA             >Latest_Definition defl  Heap_Ptr
 928+ E7CA             >
 928+ E7CA             >                // dummy db directives used to calculate length of namec
 928+ E7CA 54 59 50 45 >                db      "TYPE"
 928+ E7CE             >len_NFA         defl    $ - temp_NFA
 928+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CA             >
 928+ E7CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CB 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7CF             >
 928+ E7CF C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D1             >
 928+ E7D1             >mirror_Ptr      defl    $
 928+ E7D1             >
 928+ E7D1 3C 2C       >                dw      Dict_Ptr + 2        // xt
 928+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D3             >
 928+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D3             >
 928+ E7D3             >//              ______________________________________________________________________
 928+ E7D3             >//              Dictionary part
 928+ E7D3             >
 928+ E7D3             >                org     Dict_Ptr
 928+ 2C3A             >
 928+ 2C3A D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 2C3C             >
 928+ 2C3C             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 2C3C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 2C3F             >
 928+ 2C3F             >
 928+ 2C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 2C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 2C3F             >
 928+ 2C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 2C3F F5 2B                        dw      BOUNDS                  // bounds
 930+ 2C41 A6 20                        dw      C_Q_DO                  // ?do
 931+ 2C43 0C 00                        dw      Type_Skip - $
 932+ 2C45              Type_Loop:
 933+ 2C45 D4 20 69 26                  dw          I, CFETCH           //      i c@
 934+ 2C49 2A 29                        dw          EMIT                //      emit
 935+ 2C4B 7A 20                        dw      C_LOOP                  // loop
 936+ 2C4D F8 FF                        dw      Type_Loop - $
 937+ 2C4F              Type_Skip:
 938+ 2C4F 0C 25                        dw      EXIT                    // ;
 939+ 2C51
 940+ 2C51              //  ______________________________________________________________________
 941+ 2C51              //
 942+ 2C51              // -trailing    a n1 -- a n2
 943+ 2C51              // Assumes that an n1 bytes-long string is stored at address a
 944+ 2C51              // and the string contains a space delimited word,
 945+ 2C51              // Finds n2 as the position of the first character after the word.
 946+ 2C51                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 2C51             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 2C51             >
 946+ 2C51             >Dict_Ptr        defl    $
 946+ 2C51             >
 946+ 2C51             >//              ______________________________________________________________________
 946+ 2C51             >//              Heap part
 946+ 2C51             >
 946+ 2C51             >
 946+ 2C51             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D3             >
 946+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D3             >Latest_Definition defl  Heap_Ptr
 946+ E7D3             >
 946+ E7D3             >                // dummy db directives used to calculate length of namec
 946+ E7D3 2D 54 52 41 >                db      "-TRAILING"
 946+ E7D7 49 4C 49 4E >
 946+ E7DB 47          >
 946+ E7DC             >len_NFA         defl    $ - temp_NFA
 946+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D3             >
 946+ E7D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7D8 49 4C 49 4E >
 946+ E7DC 47          >
 946+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DC C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7DD             >
 946+ E7DD CA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 946+ E7DF             >
 946+ E7DF             >mirror_Ptr      defl    $
 946+ E7DF             >
 946+ E7DF 53 2C       >                dw      Dict_Ptr + 2        // xt
 946+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E1             >
 946+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E1             >
 946+ E7E1             >//              ______________________________________________________________________
 946+ E7E1             >//              Dictionary part
 946+ E7E1             >
 946+ E7E1             >                org     Dict_Ptr
 946+ 2C51             >
 946+ 2C51 DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 2C53             >
 946+ 2C53             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 2C53 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 2C56             >
 946+ 2C56             >
 946+ 2C56             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 2C56             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 2C56             >
 946+ 2C56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 2C56 E3 25 4B 27                  dw      DUP, ZERO               // dup 0
 948+ 2C5A                                                              // do
 949+ 2C5A A6 20                        dw      C_Q_DO
 950+ 2C5C 20 00                        dw      LTrailing_Leave - $
 951+ 2C5E              LTrailing_Loop:
 952+ 2C5E 32 26 5E 25                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 2C62 7E 25                        dw          ONE_SUBTRACT        //      1-
 954+ 2C64 69 26                        dw          CFETCH              //      c@
 955+ 2C66 6E 27 AF 28                  dw          BL, SUBTRACT        //      bl -
 956+ 2C6A                                                              //      if
 957+ 2C6A 8F 20                        dw          ZBRANCH
 958+ 2C6C 0A 00                        dw          LTrailing_Else - $
 959+ 2C6E 9A 20                        dw              C_LEAVE         //          leave
 960+ 2C70 0C 00                        dw              LTrailing_Leave - $
 961+ 2C72 82 20                        dw          BRANCH              //      else
 962+ 2C74 04 00                        dw          LTrailing_Endif - $
 963+ 2C76              LTrailing_Else:
 964+ 2C76 7E 25                        dw              ONE_SUBTRACT    //          1-
 965+ 2C78              LTrailing_Endif:                                //      endif
 966+ 2C78                                                              // loop
 967+ 2C78 7A 20                        dw      C_LOOP
 968+ 2C7A E4 FF                        dw      LTrailing_Loop - $
 969+ 2C7C              LTrailing_Leave:
 970+ 2C7C 0C 25                        dw      EXIT                    // ;
 971+ 2C7E
 972+ 2C7E              //  ______________________________________________________________________
 973+ 2C7E              //
 974+ 2C7E              // accept       a n1 -- n2
 975+ 2C7E              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 2C7E              // CR stops input. A 'nul' is added as trailer.
 977+ 2C7E              // n2 is the string length. n2 is kept in span user variable also.
 978+ 2C7E                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 2C7E             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 2C7E             >
 978+ 2C7E             >Dict_Ptr        defl    $
 978+ 2C7E             >
 978+ 2C7E             >//              ______________________________________________________________________
 978+ 2C7E             >//              Heap part
 978+ 2C7E             >
 978+ 2C7E             >
 978+ 2C7E             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E1             >
 978+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E1             >Latest_Definition defl  Heap_Ptr
 978+ E7E1             >
 978+ E7E1             >                // dummy db directives used to calculate length of namec
 978+ E7E1 41 43 43 45 >                db      "ACCEPT"
 978+ E7E5 50 54       >
 978+ E7E7             >len_NFA         defl    $ - temp_NFA
 978+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E1             >
 978+ E7E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E6 50 54       >
 978+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7E7 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7E8             >
 978+ E7E8 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 978+ E7EA             >
 978+ E7EA             >mirror_Ptr      defl    $
 978+ E7EA             >
 978+ E7EA 80 2C       >                dw      Dict_Ptr + 2        // xt
 978+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EC             >
 978+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EC             >
 978+ E7EC             >//              ______________________________________________________________________
 978+ E7EC             >//              Dictionary part
 978+ E7EC             >
 978+ E7EC             >                org     Dict_Ptr
 978+ 2C7E             >
 978+ 2C7E EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 2C80             >
 978+ 2C80             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 2C80 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 2C83             >
 978+ 2C83             >
 978+ 2C83             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 2C83             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 2C83             >
 978+ 2C83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 2C83 BF 25 5E 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 2C87 BF 25
 980+ 2C89 4B 27 F5 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 2C8D                                                              // do
 982+ 2C8D A6 20                        dw      C_Q_DO
 983+ 2C8F 8C 00                        dw      Accept_Leave - $
 984+ 2C91              Accept_Loop:
 985+ 2C91 DC 22                        dw          CUR
 986+ 2C93 C8 25 24 23                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 2C97 E3 25                        dw          DUP                 //      dup             ( a  c  c )
 988+ 2C99 3D 20 0E 00                  dw          LIT, $0E            //      0E
 989+ 2C9D 91 27                        dw          PLUS_ORIGIN         //      +origin
 990+ 2C9F 54 26                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 2CA1 BB 28                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 2CA3                                                              //      if
 993+ 2CA3 8F 20                        dw          ZBRANCH
 994+ 2CA5 2C 00                        dw          Accept_Else_0 - $
 995+ 2CA7 C8 25                        dw              DROP            //          drop        ( a  )
 996+ 2CA9 E3 25 D4 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 2CAD BB 28
 997+ 2CAF 52 27 CC 24                  dw              ONE, AND_OP     //          1 and
 998+ 2CB3 E3 25                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 2CB5 21 25                        dw              R_TO            //          r> 2 - + r>
1000+ 2CB7 99 25 5E 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 2CBB 16 25                        dw              TO_R            //
1002+ 2CBD                                                              //          if
1003+ 2CBD 8F 20                        dw              ZBRANCH
1004+ 2CBF 0A 00                        dw              Accept_Else_1 - $
1005+ 2CC1 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 2CC5                                                              //          else
1007+ 2CC5 82 20                        dw              BRANCH
1008+ 2CC7 06 00                        dw              Accept_Endif_1 - $
1009+ 2CC9              Accept_Else_1:
1010+ 2CC9 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 2CCD              Accept_Endif_1:                                 //          endif
1012+ 2CCD 82 20                        dw          BRANCH
1013+ 2CCF 2E 00                        dw          Accept_Endif_0 - $
1014+ 2CD1              Accept_Else_0:                                  //      else
1015+ 2CD1 E3 25                        dw              DUP             //          dup         ( a  c  c )
1016+ 2CD3 3D 20 0D 00                  dw              LIT, 13         //          13
1017+ 2CD7 BB 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 2CD9                                                              //          if
1019+ 2CD9 8F 20                        dw              ZBRANCH
1020+ 2CDB 0C 00                        dw              Accept_Else_2 - $
1021+ 2CDD C8 25 6E 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 2CE1 4B 27                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 2CE3                                                              //          else
1024+ 2CE3 82 20                        dw              BRANCH
1025+ 2CE5 04 00                        dw              Accept_Endif_2 - $
1026+ 2CE7              Accept_Else_2:
1027+ 2CE7 E3 25                        dw                  DUP         //              dup     ( a  c  c )
1028+ 2CE9                                                              //          endif
1029+ 2CE9              Accept_Endif_2:
1030+ 2CE9 D4 20 72 26                  dw              I, CSTORE       //          i           ( a  c )
1031+ 2CED E3 25 6E 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 2CF1 D4 28
1032+ 2CF3                                                              //          if
1033+ 2CF3 8F 20                        dw              ZBRANCH
1034+ 2CF5 08 00                        dw              Accept_Endif_3 - $
1035+ 2CF7 21 25                        dw                  R_TO        //              r>
1036+ 2CF9 7E 25                        dw                  ONE_SUBTRACT//              1-
1037+ 2CFB 16 25                        dw                  TO_R        //              >r
1038+ 2CFD                                                              //          endif
1039+ 2CFD              Accept_Endif_3:
1040+ 2CFD              Accept_Endif_0:                                 //      endif
1041+ 2CFD 2A 29                        dw          EMIT                //      emit
1042+ 2CFF
1043+ 2CFF 4B 27 D4 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 2D03 77 25
1044+ 2D05 5E 26                        dw          STORE               //          ( zero pad )
1045+ 2D07 D4 20                        dw          I                   //      i
1046+ 2D09 D4 20 69 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 2D0D 31 25
1047+ 2D0F 8F 20                        dw          ZBRANCH             //
1048+ 2D11 06 00                        dw              Accept_Endif_4 - $
1049+ 2D13 9A 20                        dw                  C_LEAVE     //              leave
1050+ 2D15 06 00                        dw                  Accept_Leave - $
1051+ 2D17              Accept_Endif_4:                                 //      endif
1052+ 2D17                                                              // loop
1053+ 2D17 7A 20                        dw      C_LOOP
1054+ 2D19 78 FF                        dw      Accept_Loop - $
1055+ 2D1B              Accept_Leave:
1056+ 2D1B DC 25 AF 28                  dw      SWAP, SUBTRACT          // swap -
1057+ 2D1F 77 25                        dw      ONE_PLUS                // 1+
1058+ 2D21 E3 25 5E 28                  dw      DUP, SPAN, STORE        // dup span !
1058+ 2D25 5E 26
1059+ 2D27 0C 25                        dw      EXIT                    // ;
1060+ 2D29
1061+ 2D29              //  ______________________________________________________________________
1062+ 2D29              //
1063+ 2D29              // expect      a n --
1064+ 2D29              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 2D29              // CR stops input. A 'nul' is added as trailer.
1066+ 2D29              // n2 is the string length. n2 is kept in span user variable also.
1067+ 2D29              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 2D29              //              dw      ACCEPT, DROP            // accept drop
1069+ 2D29              //              dw      EXIT                    // ;
1070+ 2D29
1071+ 2D29              //  ______________________________________________________________________
1072+ 2D29              //
1073+ 2D29              // query        --
1074+ 2D29              // Accept at most 80 character from console. CR stops.
1075+ 2D29              // Text is stored in TIB. Variable IN is zeroed.
1076+ 2D29                              Colon_Def QUERY, "QUERY", is_normal
1076+ 2D29             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 2D29             >
1076+ 2D29             >Dict_Ptr        defl    $
1076+ 2D29             >
1076+ 2D29             >//              ______________________________________________________________________
1076+ 2D29             >//              Heap part
1076+ 2D29             >
1076+ 2D29             >
1076+ 2D29             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EC             >
1076+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EC             >Latest_Definition defl  Heap_Ptr
1076+ E7EC             >
1076+ E7EC             >                // dummy db directives used to calculate length of namec
1076+ E7EC 51 55 45 52 >                db      "QUERY"
1076+ E7F0 59          >
1076+ E7F1             >len_NFA         defl    $ - temp_NFA
1076+ E7F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EC             >
1076+ E7EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7ED 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F1 59          >
1076+ E7F2             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F1 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F2             >
1076+ E7F2 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F4             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F4             >
1076+ E7F4             >mirror_Ptr      defl    $
1076+ E7F4             >
1076+ E7F4 2B 2D       >                dw      Dict_Ptr + 2        // xt
1076+ E7F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F6             >
1076+ E7F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F6             >
1076+ E7F6             >//              ______________________________________________________________________
1076+ E7F6             >//              Dictionary part
1076+ E7F6             >
1076+ E7F6             >                org     Dict_Ptr
1076+ 2D29             >
1076+ 2D29 F4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 2D2B             >
1076+ 2D2B             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 2D2B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 2D2E             >
1076+ 2D2E             >
1076+ 2D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 2D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 2D2E             >
1076+ 2D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 2D2E B0 27 54 26                  dw      TIB, FETCH              // tib @
1078+ 2D32 3D 20 50 00                  dw      LIT, 80                 // 80
1079+ 2D36 80 2C C8 25                  dw      ACCEPT, DROP            // accept drop
1080+ 2D3A 4B 27 F2 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 2D3E 5E 26
1081+ 2D40 0C 25                        dw      EXIT                    // ;
1082+ 2D42
1083+ 2D42              //  ______________________________________________________________________
1084+ 2D42              //
1085+ 2D42              // fill        a n c --
1086+ 2D42              // If n > 0, fills n locations starting from address a with the value c.
1087+ 2D42                              New_Def FILL, "FILL", is_code, is_normal
1087+ 2D42             >
1087+ 2D42             >Dict_Ptr        defl    $
1087+ 2D42             >
1087+ 2D42             >//              ______________________________________________________________________
1087+ 2D42             >//              Heap part
1087+ 2D42             >
1087+ 2D42             >
1087+ 2D42             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F6             >
1087+ E7F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F6             >Latest_Definition defl  Heap_Ptr
1087+ E7F6             >
1087+ E7F6             >                // dummy db directives used to calculate length of namec
1087+ E7F6 46 49 4C 4C >                db      "FILL"
1087+ E7FA             >len_NFA         defl    $ - temp_NFA
1087+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F6             >
1087+ E7F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7F7 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FA CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FB             >
1087+ E7FB EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1087+ E7FD             >
1087+ E7FD             >mirror_Ptr      defl    $
1087+ E7FD             >
1087+ E7FD 44 2D       >                dw      Dict_Ptr + 2        // xt
1087+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E7FF             >
1087+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E7FF             >
1087+ E7FF             >//              ______________________________________________________________________
1087+ E7FF             >//              Dictionary part
1087+ E7FF             >
1087+ E7FF             >                org     Dict_Ptr
1087+ 2D42             >
1087+ 2D42 FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 2D44             >
1087+ 2D44             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 2D44 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 2D44 ~           >
1087+ 2D44 ~           >
1087+ 2D44             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 2D44             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 2D44             >
1087+ 2D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 2D44 D9                           exx
1089+ 2D45 D1                           pop     de                  // de has character
1090+ 2D46 C1                           pop     bc                  // bc has counter
1091+ 2D47 E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 2D48              Fill_Loop:
1093+ 2D48 78                               ld      a, b
1094+ 2D49 B1                               or      c
1095+ 2D4A 28 05                        jr      z, Fill_While_End
1096+ 2D4C 73                               ld      (hl), e
1097+ 2D4D 0B                               dec     bc
1098+ 2D4E 23                               inc     hl
1099+ 2D4F 18 F7                        jr      Fill_Loop
1100+ 2D51              Fill_While_End:
1101+ 2D51 D9                           exx
1102+ 2D52                              next
1102+ 2D52 DD E9       >                jp      (ix)
1103+ 2D54
1104+ 2D54              //  ______________________________________________________________________
1105+ 2D54              //
1106+ 2D54              // erase        a n --
1107+ 2D54              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 2D54                              Colon_Def ERASE, "ERASE", is_normal
1108+ 2D54             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 2D54             >
1108+ 2D54             >Dict_Ptr        defl    $
1108+ 2D54             >
1108+ 2D54             >//              ______________________________________________________________________
1108+ 2D54             >//              Heap part
1108+ 2D54             >
1108+ 2D54             >
1108+ 2D54             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E7FF             >
1108+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E7FF             >Latest_Definition defl  Heap_Ptr
1108+ E7FF             >
1108+ E7FF             >                // dummy db directives used to calculate length of namec
1108+ E7FF 45 52 41 53 >                db      "ERASE"
1108+ E803 45          >
1108+ E804             >len_NFA         defl    $ - temp_NFA
1108+ E804             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E7FF             >
1108+ E7FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E800 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E804 45          >
1108+ E805             >                org     $-1                 // alter last byte of Name just above to set
1108+ E804 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E805             >
1108+ E805 F6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E807             >Prev_Ptr        defl    Heap_Ptr
1108+ E807             >
1108+ E807             >mirror_Ptr      defl    $
1108+ E807             >
1108+ E807 56 2D       >                dw      Dict_Ptr + 2        // xt
1108+ E809             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E809             >
1108+ E809             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E809             >
1108+ E809             >//              ______________________________________________________________________
1108+ E809             >//              Dictionary part
1108+ E809             >
1108+ E809             >                org     Dict_Ptr
1108+ 2D54             >
1108+ 2D54 07 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 2D56             >
1108+ 2D56             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 2D56 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 2D59             >
1108+ 2D59             >
1108+ 2D59             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 2D59             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 2D59             >
1108+ 2D59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 2D59 4B 27 44 2D                  dw      ZERO, FILL              // 0 fill
1110+ 2D5D 0C 25                        dw      EXIT                    // ;
1111+ 2D5F
1112+ 2D5F              //  ______________________________________________________________________
1113+ 2D5F              //
1114+ 2D5F              // blank        a n --
1115+ 2D5F              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 2D5F                              Colon_Def BLANK, "BLANK", is_normal
1116+ 2D5F             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 2D5F             >
1116+ 2D5F             >Dict_Ptr        defl    $
1116+ 2D5F             >
1116+ 2D5F             >//              ______________________________________________________________________
1116+ 2D5F             >//              Heap part
1116+ 2D5F             >
1116+ 2D5F             >
1116+ 2D5F             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E809             >
1116+ E809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E809             >Latest_Definition defl  Heap_Ptr
1116+ E809             >
1116+ E809             >                // dummy db directives used to calculate length of namec
1116+ E809 42 4C 41 4E >                db      "BLANK"
1116+ E80D 4B          >
1116+ E80E             >len_NFA         defl    $ - temp_NFA
1116+ E80E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E809             >
1116+ E809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E80E 4B          >
1116+ E80F             >                org     $-1                 // alter last byte of Name just above to set
1116+ E80E CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E80F             >
1116+ E80F FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E811             >Prev_Ptr        defl    Heap_Ptr
1116+ E811             >
1116+ E811             >mirror_Ptr      defl    $
1116+ E811             >
1116+ E811 61 2D       >                dw      Dict_Ptr + 2        // xt
1116+ E813             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E813             >
1116+ E813             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E813             >
1116+ E813             >//              ______________________________________________________________________
1116+ E813             >//              Dictionary part
1116+ E813             >
1116+ E813             >                org     Dict_Ptr
1116+ 2D5F             >
1116+ 2D5F 11 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 2D61             >
1116+ 2D61             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 2D61 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 2D64             >
1116+ 2D64             >
1116+ 2D64             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 2D64             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 2D64             >
1116+ 2D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 2D64 6E 27 44 2D                  dw      BL, FILL                // bl fill
1118+ 2D68 0C 25                        dw      EXIT                    // ;
1119+ 2D6A
1120+ 2D6A              //  ______________________________________________________________________
1121+ 2D6A              //
1122+ 2D6A              // hold         c --
1123+ 2D6A              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 2D6A                              Colon_Def HOLD, "HOLD", is_normal
1124+ 2D6A             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 2D6A             >
1124+ 2D6A             >Dict_Ptr        defl    $
1124+ 2D6A             >
1124+ 2D6A             >//              ______________________________________________________________________
1124+ 2D6A             >//              Heap part
1124+ 2D6A             >
1124+ 2D6A             >
1124+ 2D6A             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E813             >
1124+ E813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E813             >Latest_Definition defl  Heap_Ptr
1124+ E813             >
1124+ E813             >                // dummy db directives used to calculate length of namec
1124+ E813 48 4F 4C 44 >                db      "HOLD"
1124+ E817             >len_NFA         defl    $ - temp_NFA
1124+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E813             >
1124+ E813 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E814 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E818             >                org     $-1                 // alter last byte of Name just above to set
1124+ E817 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E818             >
1124+ E818 09 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81A             >Prev_Ptr        defl    Heap_Ptr
1124+ E81A             >
1124+ E81A             >mirror_Ptr      defl    $
1124+ E81A             >
1124+ E81A 6C 2D       >                dw      Dict_Ptr + 2        // xt
1124+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81C             >
1124+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81C             >
1124+ E81C             >//              ______________________________________________________________________
1124+ E81C             >//              Dictionary part
1124+ E81C             >
1124+ E81C             >                org     Dict_Ptr
1124+ 2D6A             >
1124+ 2D6A 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 2D6C             >
1124+ 2D6C             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 2D6C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 2D6F             >
1124+ 2D6F             >
1124+ 2D6F             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 2D6F             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 2D6F             >
1124+ 2D6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 2D6F 67 27                        dw      NEG_ONE                 // -1
1126+ 2D71 3A 28 3C 26                  dw      HLD, PLUSSTORE          // hld +!
1127+ 2D75 3A 28 54 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 2D79 72 26
1128+ 2D7B 0C 25                        dw      EXIT                    // ;
1129+ 2D7D
1130+ 2D7D              //  ______________________________________________________________________
1131+ 2D7D              //
1132+ 2D7D              // pad         -- a
1133+ 2D7D              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 2D7D                              Colon_Def PAD, "PAD", is_normal
1134+ 2D7D             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 2D7D             >
1134+ 2D7D             >Dict_Ptr        defl    $
1134+ 2D7D             >
1134+ 2D7D             >//              ______________________________________________________________________
1134+ 2D7D             >//              Heap part
1134+ 2D7D             >
1134+ 2D7D             >
1134+ 2D7D             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81C             >
1134+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81C             >Latest_Definition defl  Heap_Ptr
1134+ E81C             >
1134+ E81C             >                // dummy db directives used to calculate length of namec
1134+ E81C 50 41 44    >                db      "PAD"
1134+ E81F             >len_NFA         defl    $ - temp_NFA
1134+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81C             >
1134+ E81C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E81D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E820             >                org     $-1                 // alter last byte of Name just above to set
1134+ E81F C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E820             >
1134+ E820 13 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E822             >Prev_Ptr        defl    Heap_Ptr
1134+ E822             >
1134+ E822             >mirror_Ptr      defl    $
1134+ E822             >
1134+ E822 7F 2D       >                dw      Dict_Ptr + 2        // xt
1134+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E824             >
1134+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E824             >
1134+ E824             >//              ______________________________________________________________________
1134+ E824             >//              Dictionary part
1134+ E824             >
1134+ E824             >                org     Dict_Ptr
1134+ 2D7D             >
1134+ 2D7D 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 2D7F             >
1134+ 2D7F             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 2D7F CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 2D82             >
1134+ 2D82             >
1134+ 2D82             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 2D82             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 2D82             >
1134+ 2D82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 2D82 70 28                        dw      HERE                    // here
1136+ 2D84 3D 20 44 00                  dw      LIT, 68                 // 68
1137+ 2D88 5E 25                        dw      PLUS                    // +
1138+ 2D8A 0C 25                        dw      EXIT                    // ;
1139+ 2D8C
1140+ 2D8C              //  ______________________________________________________________________
1141+ 2D8C              //
1142+ 2D8C              // word         c -- a
1143+ 2D8C              // reads characters from input streams until it encouners a c delimiter.
1144+ 2D8C              // Stores that packet so it starts from HERE
1145+ 2D8C              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 2D8C              // Other occurrences of c are ignored.
1147+ 2D8C              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 2D8C              // Otherwise text is taken from the disk-block given by BLK.
1149+ 2D8C              // "in" variable is incremented of the number of character read.
1150+ 2D8C              // The number of characters read is given by ENCLOSE.
1151+ 2D8C                              Colon_Def WORD, "WORD", is_normal
1151+ 2D8C             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 2D8C             >
1151+ 2D8C             >Dict_Ptr        defl    $
1151+ 2D8C             >
1151+ 2D8C             >//              ______________________________________________________________________
1151+ 2D8C             >//              Heap part
1151+ 2D8C             >
1151+ 2D8C             >
1151+ 2D8C             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E824             >
1151+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E824             >Latest_Definition defl  Heap_Ptr
1151+ E824             >
1151+ E824             >                // dummy db directives used to calculate length of namec
1151+ E824 57 4F 52 44 >                db      "WORD"
1151+ E828             >len_NFA         defl    $ - temp_NFA
1151+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E824             >
1151+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E825 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E829             >                org     $-1                 // alter last byte of Name just above to set
1151+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E829             >
1151+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82B             >Prev_Ptr        defl    Heap_Ptr
1151+ E82B             >
1151+ E82B             >mirror_Ptr      defl    $
1151+ E82B             >
1151+ E82B 8E 2D       >                dw      Dict_Ptr + 2        // xt
1151+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E82D             >
1151+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E82D             >
1151+ E82D             >//              ______________________________________________________________________
1151+ E82D             >//              Dictionary part
1151+ E82D             >
1151+ E82D             >                org     Dict_Ptr
1151+ 2D8C             >
1151+ 2D8C 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 2D8E             >
1151+ 2D8E             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 2D8E CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 2D91             >
1151+ 2D91             >
1151+ 2D91             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 2D91             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 2D91             >
1151+ 2D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 2D91 EC 27 54 26                  dw      BLK, FETCH              // blk @
1153+ 2D95                                                              // if
1154+ 2D95 8F 20                        dw      ZBRANCH
1155+ 2D97 0C 00                        dw      Word_Else - $
1156+ 2D99 EC 27 54 26                  dw          BLK, FETCH          //      blk @
1157+ 2D9D 60 37                        dw          BLOCK               //      block ( forward )
1158+ 2D9F                                                              // else
1159+ 2D9F 82 20                        dw      BRANCH
1160+ 2DA1 06 00                        dw      Word_Endif - $
1161+ 2DA3              Word_Else:
1162+ 2DA3 B0 27 54 26                  dw         TIB, FETCH           //      tib @
1163+ 2DA7              Word_Endif:                                     // endif
1164+ 2DA7 F2 27 54 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 2DAB 5E 25
1165+ 2DAD DC 25 C3 21                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 2DB1 70 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 2DB5 22 00 61 2D
1167+ 2DB9 F2 27 3C 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 2DBD BF 25 AF 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 2DC1 16 25
1169+ 2DC3 2C 25 70 28                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 2DC7 72 26
1170+ 2DC9 5E 25                        dw      PLUS                    // +
1171+ 2DCB 70 28 77 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 2DCF 21 25
1172+ 2DD1 4D 24                        dw      CMOVE                   // cmove
1173+ 2DD3 70 28                        dw      HERE                    // here
1174+ 2DD5 0C 25                        dw      EXIT                    // ;
1175+ 2DD7
1176+ 2DD7              //  ______________________________________________________________________
1177+ 2DD7              //
1178+ 2DD7              // (.")         --
1179+ 2DD7              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 2DD7                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 2DD7             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 2DD7             >
1180+ 2DD7             >Dict_Ptr        defl    $
1180+ 2DD7             >
1180+ 2DD7             >//              ______________________________________________________________________
1180+ 2DD7             >//              Heap part
1180+ 2DD7             >
1180+ 2DD7             >
1180+ 2DD7             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E82D             >
1180+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E82D             >Latest_Definition defl  Heap_Ptr
1180+ E82D             >
1180+ E82D             >                // dummy db directives used to calculate length of namec
1180+ E82D 28 2E 22 29 >                db      '(.")'
1180+ E831             >len_NFA         defl    $ - temp_NFA
1180+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E82D             >
1180+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E82E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E832             >                org     $-1                 // alter last byte of Name just above to set
1180+ E831 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E832             >
1180+ E832 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E834             >Prev_Ptr        defl    Heap_Ptr
1180+ E834             >
1180+ E834             >mirror_Ptr      defl    $
1180+ E834             >
1180+ E834 D9 2D       >                dw      Dict_Ptr + 2        // xt
1180+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E836             >
1180+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E836             >
1180+ E836             >//              ______________________________________________________________________
1180+ E836             >//              Dictionary part
1180+ E836             >
1180+ E836             >                org     Dict_Ptr
1180+ 2DD7             >
1180+ 2DD7 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 2DD9             >
1180+ 2DD9             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 2DD9 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 2DDC             >
1180+ 2DDC             >
1180+ 2DDC             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 2DDC             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 2DDC             >
1180+ 2DDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 2DDC 2C 25 E8 2B                  dw      R_OP, COUNT             // r count
1182+ 2DE0 E3 25 77 25                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 2DE4 21 25 5E 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 2DE8 16 25
1184+ 2DEA 3C 2C                        dw      TYPE                    // type
1185+ 2DEC 0C 25                        dw      EXIT                    // ;
1186+ 2DEE
1187+ 2DEE              //  ______________________________________________________________________
1188+ 2DEE              //
1189+ 2DEE              // char         -- c
1190+ 2DEE              // get first character from next input word
1191+ 2DEE                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 2DEE             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 2DEE             >
1191+ 2DEE             >Dict_Ptr        defl    $
1191+ 2DEE             >
1191+ 2DEE             >//              ______________________________________________________________________
1191+ 2DEE             >//              Heap part
1191+ 2DEE             >
1191+ 2DEE             >
1191+ 2DEE             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E836             >
1191+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E836             >Latest_Definition defl  Heap_Ptr
1191+ E836             >
1191+ E836             >                // dummy db directives used to calculate length of namec
1191+ E836 43 48 41 52 >                db      "CHAR"
1191+ E83A             >len_NFA         defl    $ - temp_NFA
1191+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E836             >
1191+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E837 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83A D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83B             >
1191+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83D             >Prev_Ptr        defl    Heap_Ptr
1191+ E83D             >
1191+ E83D             >mirror_Ptr      defl    $
1191+ E83D             >
1191+ E83D F0 2D       >                dw      Dict_Ptr + 2        // xt
1191+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E83F             >
1191+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E83F             >
1191+ E83F             >//              ______________________________________________________________________
1191+ E83F             >//              Dictionary part
1191+ E83F             >
1191+ E83F             >                org     Dict_Ptr
1191+ 2DEE             >
1191+ 2DEE 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 2DF0             >
1191+ 2DF0             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 2DF0 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 2DF3             >
1191+ 2DF3             >
1191+ 2DF3             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 2DF3             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 2DF3             >
1191+ 2DF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 2DF3 6E 27 8E 2D                  dw      BL, WORD                // bl word
1193+ 2DF7 77 25 69 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 2DFB 0C 25                        dw      EXIT                    // ;
1195+ 2DFD
1196+ 2DFD              //  ______________________________________________________________________
1197+ 2DFD              //
1198+ 2DFD              // ,"           --
1199+ 2DFD              // compiles a string terminated by " as a counted string from next input stream
1200+ 2DFD                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 2DFD             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 2DFD             >
1200+ 2DFD             >Dict_Ptr        defl    $
1200+ 2DFD             >
1200+ 2DFD             >//              ______________________________________________________________________
1200+ 2DFD             >//              Heap part
1200+ 2DFD             >
1200+ 2DFD             >
1200+ 2DFD             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E83F             >
1200+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E83F             >Latest_Definition defl  Heap_Ptr
1200+ E83F             >
1200+ E83F             >                // dummy db directives used to calculate length of namec
1200+ E83F 2C 22       >                db      ',"'
1200+ E841             >len_NFA         defl    $ - temp_NFA
1200+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E83F             >
1200+ E83F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E840 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E842             >                org     $-1                 // alter last byte of Name just above to set
1200+ E841 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E842             >
1200+ E842 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E844             >Prev_Ptr        defl    Heap_Ptr
1200+ E844             >
1200+ E844             >mirror_Ptr      defl    $
1200+ E844             >
1200+ E844 FF 2D       >                dw      Dict_Ptr + 2        // xt
1200+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E846             >
1200+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E846             >
1200+ E846             >//              ______________________________________________________________________
1200+ E846             >//              Dictionary part
1200+ E846             >
1200+ E846             >                org     Dict_Ptr
1200+ 2DFD             >
1200+ 2DFD 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 2DFF             >
1200+ 2DFF             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 2DFF CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 2E02             >
1200+ 2E02             >
1200+ 2E02             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 2E02             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 2E02             >
1200+ 2E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 2E02 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 2E06 8E 2D                        dw      WORD                    // word
1203+ 2E08 69 26 77 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 2E0C 7B 28                        dw      ALLOT                   // allot
1205+ 2E0E 4B 27 95 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 2E12 0C 25                        dw      EXIT
1207+ 2E14
1208+ 2E14              //  ______________________________________________________________________
1209+ 2E14              //
1210+ 2E14              // .c           c --
1211+ 2E14              // intermediate general purpose string builder, used by ." and .(
1212+ 2E14                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 2E14             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 2E14             >
1212+ 2E14             >Dict_Ptr        defl    $
1212+ 2E14             >
1212+ 2E14             >//              ______________________________________________________________________
1212+ 2E14             >//              Heap part
1212+ 2E14             >
1212+ 2E14             >
1212+ 2E14             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E846             >
1212+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E846             >Latest_Definition defl  Heap_Ptr
1212+ E846             >
1212+ E846             >                // dummy db directives used to calculate length of namec
1212+ E846 2E 43       >                db      ".C"
1212+ E848             >len_NFA         defl    $ - temp_NFA
1212+ E848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E846             >
1212+ E846 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E847 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E849             >                org     $-1                 // alter last byte of Name just above to set
1212+ E848 C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E849             >
1212+ E849 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84B             >Prev_Ptr        defl    Heap_Ptr
1212+ E84B             >
1212+ E84B             >mirror_Ptr      defl    $
1212+ E84B             >
1212+ E84B 16 2E       >                dw      Dict_Ptr + 2        // xt
1212+ E84D             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E84D             >
1212+ E84D             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E84D             >
1212+ E84D             >//              ______________________________________________________________________
1212+ E84D             >//              Dictionary part
1212+ E84D             >
1212+ E84D             >                org     Dict_Ptr
1212+ 2E14             >
1212+ 2E14 4B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 2E16             >
1212+ 2E16             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 2E16 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 2E19             >
1212+ 2E19             >
1212+ 2E19             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 2E19             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 2E19             >
1212+ 2E19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 2E19 16 28 54 26                  dw      STATE, FETCH            // state @
1214+ 2E1D                                                              // if
1215+ 2E1D 8F 20                        dw      ZBRANCH
1216+ 2E1F 12 00                        dw      Dot_C_Else - $
1217+ 2E21 1C 2B D9 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 2E25 8E 2D 69 26                  dw          WORD, CFETCH        //      word c@
1219+ 2E29 77 25 7B 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 2E2D                                                              // else
1221+ 2E2D 82 20                        dw      BRANCH
1222+ 2E2F 08 00                        dw      Dot_C_Endif - $
1223+ 2E31              Dot_C_Else:
1224+ 2E31 8E 2D E8 2B                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 2E35 3C 2C
1225+ 2E37              Dot_C_Endif:                                    // endif
1226+ 2E37 0C 25                        dw      EXIT                    ;
1227+ 2E39
1228+ 2E39              //  ______________________________________________________________________
1229+ 2E39              //
1230+ 2E39              // ."           c --
1231+ 2E39                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 2E39             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 2E39             >
1231+ 2E39             >Dict_Ptr        defl    $
1231+ 2E39             >
1231+ 2E39             >//              ______________________________________________________________________
1231+ 2E39             >//              Heap part
1231+ 2E39             >
1231+ 2E39             >
1231+ 2E39             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E84D             >
1231+ E84D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E84D             >Latest_Definition defl  Heap_Ptr
1231+ E84D             >
1231+ E84D             >                // dummy db directives used to calculate length of namec
1231+ E84D 2E 22       >                db      '."'
1231+ E84F             >len_NFA         defl    $ - temp_NFA
1231+ E84F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E84D             >
1231+ E84D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E84E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E850             >                org     $-1                 // alter last byte of Name just above to set
1231+ E84F A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E850             >
1231+ E850 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E852             >Prev_Ptr        defl    Heap_Ptr
1231+ E852             >
1231+ E852             >mirror_Ptr      defl    $
1231+ E852             >
1231+ E852 3B 2E       >                dw      Dict_Ptr + 2        // xt
1231+ E854             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E854             >
1231+ E854             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E854             >
1231+ E854             >//              ______________________________________________________________________
1231+ E854             >//              Dictionary part
1231+ E854             >
1231+ E854             >                org     Dict_Ptr
1231+ 2E39             >
1231+ 2E39 52 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 2E3B             >
1231+ 2E3B             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 2E3B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 2E3E             >
1231+ 2E3E             >
1231+ 2E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 2E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 2E3E             >
1231+ 2E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 2E3E 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 2E42 16 2E                        dw      DOT_C                   // [compile] .c
1234+ 2E44 0C 25                        dw      EXIT                    // ; immediate
1235+ 2E46
1236+ 2E46              //  ______________________________________________________________________
1237+ 2E46              //
1238+ 2E46              // .(           c --
1239+ 2E46                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 2E46             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 2E46             >
1239+ 2E46             >Dict_Ptr        defl    $
1239+ 2E46             >
1239+ 2E46             >//              ______________________________________________________________________
1239+ 2E46             >//              Heap part
1239+ 2E46             >
1239+ 2E46             >
1239+ 2E46             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E854             >
1239+ E854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E854             >Latest_Definition defl  Heap_Ptr
1239+ E854             >
1239+ E854             >                // dummy db directives used to calculate length of namec
1239+ E854 2E 28       >                db      ".("
1239+ E856             >len_NFA         defl    $ - temp_NFA
1239+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E854             >
1239+ E854 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E855 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E857             >                org     $-1                 // alter last byte of Name just above to set
1239+ E856 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E857             >
1239+ E857 4D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E859             >Prev_Ptr        defl    Heap_Ptr
1239+ E859             >
1239+ E859             >mirror_Ptr      defl    $
1239+ E859             >
1239+ E859 48 2E       >                dw      Dict_Ptr + 2        // xt
1239+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85B             >
1239+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85B             >
1239+ E85B             >//              ______________________________________________________________________
1239+ E85B             >//              Dictionary part
1239+ E85B             >
1239+ E85B             >                org     Dict_Ptr
1239+ 2E46             >
1239+ 2E46 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 2E48             >
1239+ 2E48             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 2E48 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 2E4B             >
1239+ 2E4B             >
1239+ 2E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 2E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 2E4B             >
1239+ 2E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 2E4B 3D 20 29 00                  dw      LIT, ")"                // [char] )
1241+ 2E4F 16 2E                        dw      DOT_C                   // [compile] .c
1242+ 2E51 0C 25                        dw      EXIT                    // ; immediate
1243+ 2E53
1244+ 2E53              //  ______________________________________________________________________
1245+ 2E53              //
1246+ 2E53              // (sgn)        a -- a f
1247+ 2E53              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 2E53              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 2E53              // called by NUMBER and (EXP)
1250+ 2E53                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 2E53             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 2E53             >
1250+ 2E53             >Dict_Ptr        defl    $
1250+ 2E53             >
1250+ 2E53             >//              ______________________________________________________________________
1250+ 2E53             >//              Heap part
1250+ 2E53             >
1250+ 2E53             >
1250+ 2E53             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85B             >
1250+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85B             >Latest_Definition defl  Heap_Ptr
1250+ E85B             >
1250+ E85B             >                // dummy db directives used to calculate length of namec
1250+ E85B 28 53 47 4E >                db      "(SGN)"
1250+ E85F 29          >
1250+ E860             >len_NFA         defl    $ - temp_NFA
1250+ E860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85B             >
1250+ E85B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E860 29          >
1250+ E861             >                org     $-1                 // alter last byte of Name just above to set
1250+ E860 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E861             >
1250+ E861 54 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E863             >Prev_Ptr        defl    Heap_Ptr
1250+ E863             >
1250+ E863             >mirror_Ptr      defl    $
1250+ E863             >
1250+ E863 55 2E       >                dw      Dict_Ptr + 2        // xt
1250+ E865             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E865             >
1250+ E865             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E865             >
1250+ E865             >//              ______________________________________________________________________
1250+ E865             >//              Dictionary part
1250+ E865             >
1250+ E865             >                org     Dict_Ptr
1250+ 2E53             >
1250+ 2E53 63 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 2E55             >
1250+ 2E55             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 2E55 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 2E58             >
1250+ 2E58             >
1250+ 2E58             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 2E58             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 2E58             >
1250+ 2E58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 2E58 E3 25 77 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 2E5C 69 26
1252+ 2E5E E3 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 2E62 2D 00 BB 28
1253+ 2E66                                                              // if
1254+ 2E66 8F 20                        dw      ZBRANCH
1255+ 2E68 12 00                        dw      CSgn_Else_0 - $
1256+ 2E6A C8 25                        dw          DROP                //      drop
1257+ 2E6C 77 25                        dw          ONE_PLUS            //      1+
1258+ 2E6E 52 27 22 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 2E72 3C 26
1259+ 2E74 52 27                        dw          ONE                 //      1
1260+ 2E76                                                              // else
1261+ 2E76 82 20                        dw      BRANCH
1262+ 2E78 16 00                        dw      CSgn_Endif_0 - $
1263+ 2E7A              CSgn_Else_0:
1264+ 2E7A 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 2E7E BB 28
1265+ 2E80                                                              //      if
1266+ 2E80 8F 20                        dw          ZBRANCH
1267+ 2E82 0A 00                        dw          CSgn_Endif_1 - $
1268+ 2E84 77 25                        dw              ONE_PLUS        //          1+
1269+ 2E86 52 27 22 28                  dw              ONE, DPL        //          1 dpl
1270+ 2E8A 3C 26                        dw              PLUSSTORE       //          +!
1271+ 2E8C              CSgn_Endif_1                                    //      endif
1272+ 2E8C 4B 27                        dw          ZERO                //      0
1273+ 2E8E              CSgn_Endif_0:                                   // endif
1274+ 2E8E 0C 25                        dw      EXIT
1275+ 2E90
1276+ 2E90              //  ______________________________________________________________________
1277+ 2E90              //
1278+ 2E90              // (number)     d a -- d1 a1
1279+ 2E90              // using the current BASE parse characters stored in address a
1280+ 2E90              // accumulating a double precision integer d
1281+ 2E90              // the process stops at the first not-convertible character
1282+ 2E90              // A double-number is kept in CPU registers as HLDE.
1283+ 2E90              // On the stack a double number is treated as two single numbers
1284+ 2E90              // where HL is on the top of the stack and DE is the second from top,
1285+ 2E90              // so in the stack memory it appears as LHED.
1286+ 2E90              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 2E90                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 2E90             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 2E90             >
1287+ 2E90             >Dict_Ptr        defl    $
1287+ 2E90             >
1287+ 2E90             >//              ______________________________________________________________________
1287+ 2E90             >//              Heap part
1287+ 2E90             >
1287+ 2E90             >
1287+ 2E90             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E865             >
1287+ E865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E865             >Latest_Definition defl  Heap_Ptr
1287+ E865             >
1287+ E865             >                // dummy db directives used to calculate length of namec
1287+ E865 28 4E 55 4D >                db      "(NUMBER)"
1287+ E869 42 45 52 29 >
1287+ E86D             >len_NFA         defl    $ - temp_NFA
1287+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E865             >
1287+ E865 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E866 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86A 42 45 52 29 >
1287+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1287+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E86E             >
1287+ E86E 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E870             >Prev_Ptr        defl    Heap_Ptr
1287+ E870             >
1287+ E870             >mirror_Ptr      defl    $
1287+ E870             >
1287+ E870 92 2E       >                dw      Dict_Ptr + 2        // xt
1287+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E872             >
1287+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E872             >
1287+ E872             >//              ______________________________________________________________________
1287+ E872             >//              Dictionary part
1287+ E872             >
1287+ E872             >                org     Dict_Ptr
1287+ 2E90             >
1287+ 2E90 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 2E92             >
1287+ 2E92             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 2E92 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 2E95             >
1287+ 2E95             >
1287+ 2E95             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 2E95             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 2E95             >
1287+ 2E95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 2E95                                                              // begin
1289+ 2E95              CNumber_Begin:
1290+ 2E95 77 25                        dw          ONE_PLUS            //      1+
1291+ 2E97 E3 25 16 25                  dw          DUP, TO_R           //      dup >r
1292+ 2E9B 69 26                        dw          CFETCH              //      @
1293+ 2E9D 1C 28 54 26                  dw          BASE, FETCH         //      base @
1294+ 2EA1 E7 20                        dw          DIGIT               //      digit
1295+ 2EA3                                                              // while
1296+ 2EA3 8F 20                        dw      ZBRANCH
1297+ 2EA5 2C 00                        dw      CNumber_While_end - $
1298+ 2EA7 DC 25                        dw          SWAP                //      swap
1299+ 2EA9 1C 28 54 26                  dw          BASE, FETCH         //      base @
1300+ 2EAD 71 24                        dw          UM_MUL              //      um*
1301+ 2EAF C8 25 EA 25                  dw          DROP, ROT           //      drop rot
1302+ 2EB3 1C 28 54 26                  dw          BASE, FETCH         //      base @
1303+ 2EB7 71 24                        dw          UM_MUL              //      um*
1304+ 2EB9 68 25                        dw          DPLUS               //      d+
1305+ 2EBB 22 28 54 26                  dw          DPL, FETCH          //      dpl @
1306+ 2EBF 77 25                        dw          ONE_PLUS            //      1+
1307+ 2EC1                                                              //      if
1308+ 2EC1 8F 20                        dw          ZBRANCH
1309+ 2EC3 08 00                        dw          CNumber_Endif - $
1310+ 2EC5 52 27 22 28                  dw              ONE, DPL        //          1 dpl
1311+ 2EC9 3C 26                        dw              PLUSSTORE       //          +!
1312+ 2ECB              CNumber_Endif:                                  //      endif
1313+ 2ECB 21 25                        dw             R_TO             //      r>  ( balance rp )
1314+ 2ECD 82 20                        dw      BRANCH
1315+ 2ECF C6 FF                        dw      CNumber_Begin - $
1316+ 2ED1              CNumber_While_end:                              // repeat
1317+ 2ED1 21 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 2ED3 0C 25                        dw      EXIT                    // ;
1319+ 2ED5
1320+ 2ED5              //  ______________________________________________________________________
1321+ 2ED5              //
1322+ 2ED5              // (prefix)
1323+ 2ED5                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 2ED5             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 2ED5             >
1323+ 2ED5             >Dict_Ptr        defl    $
1323+ 2ED5             >
1323+ 2ED5             >//              ______________________________________________________________________
1323+ 2ED5             >//              Heap part
1323+ 2ED5             >
1323+ 2ED5             >
1323+ 2ED5             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E872             >
1323+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E872             >Latest_Definition defl  Heap_Ptr
1323+ E872             >
1323+ E872             >                // dummy db directives used to calculate length of namec
1323+ E872 28 50 52 45 >                db      "(PREFIX)"
1323+ E876 46 49 58 29 >
1323+ E87A             >len_NFA         defl    $ - temp_NFA
1323+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E872             >
1323+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E873 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E877 46 49 58 29 >
1323+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87B             >
1323+ E87B 65 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E87D             >Prev_Ptr        defl    Heap_Ptr
1323+ E87D             >
1323+ E87D             >mirror_Ptr      defl    $
1323+ E87D             >
1323+ E87D D7 2E       >                dw      Dict_Ptr + 2        // xt
1323+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E87F             >
1323+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E87F             >
1323+ E87F             >//              ______________________________________________________________________
1323+ E87F             >//              Dictionary part
1323+ E87F             >
1323+ E87F             >                org     Dict_Ptr
1323+ 2ED5             >
1323+ 2ED5 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 2ED7             >
1323+ 2ED7             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 2ED7 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 2EDA             >
1323+ 2EDA             >
1323+ 2EDA             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 2EDA             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 2EDA             >
1323+ 2EDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 2EDA E3 25 77 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 2EDE 69 26
1325+ 2EE0 E3 25 16 25                  dw      DUP, TO_R               // dup >r
1326+ 2EE4 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 2EE8 BB 28
1327+ 2EEA                                                              // if
1328+ 2EEA 8F 20                        dw      ZBRANCH
1329+ 2EEC 06 00                        dw      CPrefix_Endif_0 - $
1330+ 2EEE 77 25                        dw          ONE_PLUS            //      1+
1331+ 2EF0 76 2B                        dw          HEX
1332+ 2EF2              CPrefix_Endif_0:                                // endif
1333+ 2EF2 2C 25                        dw      R_OP                    // r@
1334+ 2EF4 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1334+ 2EF8 BB 28
1335+ 2EFA                                                              // if
1336+ 2EFA 8F 20                        dw      ZBRANCH
1337+ 2EFC 0A 00                        dw      CPrefix_Endif_1 - $
1338+ 2EFE 77 25                        dw          ONE_PLUS            //      1+
1339+ 2F00 59 27                        dw          TWO
1340+ 2F02 1C 28 5E 26                  dw          BASE, STORE         //      2 base !
1341+ 2F06              CPrefix_Endif_1:                                // endif
1342+ 2F06 21 25                        dw      R_TO                    // r>
1343+ 2F08 3D 20 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1343+ 2F0C BB 28
1344+ 2F0E                                                              // if
1345+ 2F0E 8F 20                        dw      ZBRANCH
1346+ 2F10 06 00                        dw      CPrefix_Endif_2 - $
1347+ 2F12 77 25                        dw          ONE_PLUS            //      1+
1348+ 2F14 85 2B                        dw          DECIMAL
1349+ 2F16              CPrefix_Endif_2:                                // endif
1350+ 2F16 0C 25                        dw      EXIT
1351+ 2F18
1352+ 2F18              //  ______________________________________________________________________
1353+ 2F18
1354+ 2F18                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1354+ 2F18             >
1354+ 2F18             >Dict_Ptr        defl    $
1354+ 2F18             >
1354+ 2F18             >//              ______________________________________________________________________
1354+ 2F18             >//              Heap part
1354+ 2F18             >
1354+ 2F18             >
1354+ 2F18             >                org     (Heap_Ptr & $1FFF) + $E000
1354+ E87F             >
1354+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1354+ E87F             >Latest_Definition defl  Heap_Ptr
1354+ E87F             >
1354+ E87F             >                // dummy db directives used to calculate length of namec
1354+ E87F 50 44 4F 4D >                db      "PDOM"
1354+ E883             >len_NFA         defl    $ - temp_NFA
1354+ E883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1354+ E87F             >
1354+ E87F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1354+ E880 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1354+ E884             >                org     $-1                 // alter last byte of Name just above to set
1354+ E883 CD          >                db      {b $} | END_BIT     // msb as name end
1354+ E884             >
1354+ E884 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1354+ E886             >Prev_Ptr        defl    Heap_Ptr
1354+ E886             >
1354+ E886             >mirror_Ptr      defl    $
1354+ E886             >
1354+ E886 1A 2F       >                dw      Dict_Ptr + 2        // xt
1354+ E888             >Heap_Ptr        defl    $ - $E000           // save current HP
1354+ E888             >
1354+ E888             >Current_HP      defl  $ - $E000             // used to set HP once!
1354+ E888             >
1354+ E888             >//              ______________________________________________________________________
1354+ E888             >//              Dictionary part
1354+ E888             >
1354+ E888             >                org     Dict_Ptr
1354+ 2F18             >
1354+ 2F18 86 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1354+ 2F1A             >
1354+ 2F1A             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1354+ 2F1A CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1354+ 2F1D             >
1354+ 2F1D             >
1354+ 2F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
1354+ 2F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
1354+ 2F1D             >
1354+ 2F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1355+ 2F1D 2C 2F 2D 3A                  db ',/-:'
1356+ 2F21
1357+ 2F21                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1357+ 2F21             >
1357+ 2F21             >Dict_Ptr        defl    $
1357+ 2F21             >
1357+ 2F21             >//              ______________________________________________________________________
1357+ 2F21             >//              Heap part
1357+ 2F21             >
1357+ 2F21             >
1357+ 2F21             >                org     (Heap_Ptr & $1FFF) + $E000
1357+ E888             >
1357+ E888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1357+ E888             >Latest_Definition defl  Heap_Ptr
1357+ E888             >
1357+ E888             >                // dummy db directives used to calculate length of namec
1357+ E888 50 43 44 4D >                db      "PCDM"
1357+ E88C             >len_NFA         defl    $ - temp_NFA
1357+ E88C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1357+ E888             >
1357+ E888 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1357+ E889 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1357+ E88D             >                org     $-1                 // alter last byte of Name just above to set
1357+ E88C CD          >                db      {b $} | END_BIT     // msb as name end
1357+ E88D             >
1357+ E88D 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1357+ E88F             >Prev_Ptr        defl    Heap_Ptr
1357+ E88F             >
1357+ E88F             >mirror_Ptr      defl    $
1357+ E88F             >
1357+ E88F 23 2F       >                dw      Dict_Ptr + 2        // xt
1357+ E891             >Heap_Ptr        defl    $ - $E000           // save current HP
1357+ E891             >
1357+ E891             >Current_HP      defl  $ - $E000             // used to set HP once!
1357+ E891             >
1357+ E891             >//              ______________________________________________________________________
1357+ E891             >//              Dictionary part
1357+ E891             >
1357+ E891             >                org     Dict_Ptr
1357+ 2F21             >
1357+ 2F21 8F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1357+ 2F23             >
1357+ 2F23             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1357+ 2F23 CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1357+ 2F26             >
1357+ 2F26             >
1357+ 2F26             >                endif           ; ok        // for other definitions it "points" the correct handler
1357+ 2F26             >                // Use of "; ok" to suppress "warning[fwdref]"
1357+ 2F26             >
1357+ 2F26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1358+ 2F26 2E 2E 2E 2E                  db '....'
1359+ 2F2A
1360+ 2F2A              //  ______________________________________________________________________
1361+ 2F2A              //
1362+ 2F2A              // number       a -- d
1363+ 2F2A                              Colon_Def NUMBER,  "NUMBER", is_normal
1363+ 2F2A             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1363+ 2F2A             >
1363+ 2F2A             >Dict_Ptr        defl    $
1363+ 2F2A             >
1363+ 2F2A             >//              ______________________________________________________________________
1363+ 2F2A             >//              Heap part
1363+ 2F2A             >
1363+ 2F2A             >
1363+ 2F2A             >                org     (Heap_Ptr & $1FFF) + $E000
1363+ E891             >
1363+ E891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1363+ E891             >Latest_Definition defl  Heap_Ptr
1363+ E891             >
1363+ E891             >                // dummy db directives used to calculate length of namec
1363+ E891 4E 55 4D 42 >                db      "NUMBER"
1363+ E895 45 52       >
1363+ E897             >len_NFA         defl    $ - temp_NFA
1363+ E897             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1363+ E891             >
1363+ E891 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1363+ E892 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1363+ E896 45 52       >
1363+ E898             >                org     $-1                 // alter last byte of Name just above to set
1363+ E897 D2          >                db      {b $} | END_BIT     // msb as name end
1363+ E898             >
1363+ E898 88 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1363+ E89A             >Prev_Ptr        defl    Heap_Ptr
1363+ E89A             >
1363+ E89A             >mirror_Ptr      defl    $
1363+ E89A             >
1363+ E89A 2C 2F       >                dw      Dict_Ptr + 2        // xt
1363+ E89C             >Heap_Ptr        defl    $ - $E000           // save current HP
1363+ E89C             >
1363+ E89C             >Current_HP      defl  $ - $E000             // used to set HP once!
1363+ E89C             >
1363+ E89C             >//              ______________________________________________________________________
1363+ E89C             >//              Dictionary part
1363+ E89C             >
1363+ E89C             >                org     Dict_Ptr
1363+ 2F2A             >
1363+ 2F2A 9A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1363+ 2F2C             >
1363+ 2F2C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1363+ 2F2C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1363+ 2F2F             >
1363+ 2F2F             >
1363+ 2F2F             >                endif           ; ok        // for other definitions it "points" the correct handler
1363+ 2F2F             >                // Use of "; ok" to suppress "warning[fwdref]"
1363+ 2F2F             >
1363+ 2F2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1364+ 2F2F 4B 27 4B 27                  dw      ZERO, ZERO              // 0 0
1365+ 2F33 EA 25                        dw      ROT                     // rot
1366+ 2F35
1367+ 2F35 1C 28 54 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1367+ 2F39 16 25
1368+ 2F3B D7 2E                        dw      CPREFIX                 // (prefix)   // ***
1369+ 2F3D
1370+ 2F3D 55 2E 16 25                  dw      CSGN, TO_R              // (sgn) >r
1371+ 2F41
1372+ 2F41 67 27 22 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1372+ 2F45 5E 26
1373+ 2F47 92 2E                        dw      CNUMBER                 // (number)
1374+ 2F49              Number_Begin:                                   // begin
1375+ 2F49 E3 25 69 26                  dw        DUP, CFETCH             // dup c@
1376+ 2F4D 16 25                        dw        TO_R                    // >r
1377+ 2F4F 23 2F 1A 2F                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1377+ 2F53 3D 20 04 00
1378+ 2F57 21 25                        dw        R_TO                    // r>
1379+ 2F59 F5 21                        dw        C_MAP                   // (map)
1380+ 2F5B 4B 27 DC 25                  dw        ZERO, SWAP              // 0 swap
1381+ 2F5F 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1381+ 2F63 BB 28
1382+ 2F65
1383+ 2F65 8F 20                        dw        ZBRANCH                 // if
1384+ 2F67 0A 00                        dw        Number_Endif_1 - $
1385+ 2F69 4B 27 22 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1385+ 2F6D 5E 26
1386+ 2F6F 77 25                        dw          ONE_PLUS                //      1+
1387+ 2F71              Number_Endif_1:                                   // endif
1388+ 2F71
1389+ 2F71 8F 20                        dw      ZBRANCH                // while
1390+ 2F73 08 00                        dw      Number_While_end - $
1391+ 2F75 92 2E                        dw        CNUMBER                 // (number)
1392+ 2F77 82 20                        dw      BRANCH
1393+ 2F79 D0 FF                        dw      Number_Begin - $
1394+ 2F7B              Number_While_end:                               // repeat
1395+ 2F7B
1396+ 2F7B 69 26 6E 27                  dw      CFETCH, BL              // c@ bl
1397+ 2F7F AF 28 4B 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1397+ 2F83 AC 2A
1398+ 2F85 21 25                        dw      R_TO                    // r>
1399+ 2F87                                                              // if
1400+ 2F87 8F 20                        dw      ZBRANCH
1401+ 2F89 04 00                        dw      Number_Endif_2 - $
1402+ 2F8B AC 25                        dw          DMINUS              //      dminus
1403+ 2F8D              Number_Endif_2:                                 // endif
1404+ 2F8D 21 25 1C 28                  dw      R_TO, BASE, STORE       // r> base !  // ***
1404+ 2F91 5E 26
1405+ 2F93 0C 25                        dw      EXIT                    // ;
1406+ 2F95
1407+ 2F95              //  ______________________________________________________________________
1408+ 2F95              //
1409+ 2F95              // twofind      a -- d
1410+ 2F95                              Colon_Def TWOFIND,  "2FIND", is_normal
1410+ 2F95             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1410+ 2F95             >
1410+ 2F95             >Dict_Ptr        defl    $
1410+ 2F95             >
1410+ 2F95             >//              ______________________________________________________________________
1410+ 2F95             >//              Heap part
1410+ 2F95             >
1410+ 2F95             >
1410+ 2F95             >                org     (Heap_Ptr & $1FFF) + $E000
1410+ E89C             >
1410+ E89C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ E89C             >Latest_Definition defl  Heap_Ptr
1410+ E89C             >
1410+ E89C             >                // dummy db directives used to calculate length of namec
1410+ E89C 32 46 49 4E >                db      "2FIND"
1410+ E8A0 44          >
1410+ E8A1             >len_NFA         defl    $ - temp_NFA
1410+ E8A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ E89C             >
1410+ E89C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ E89D 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1410+ E8A1 44          >
1410+ E8A2             >                org     $-1                 // alter last byte of Name just above to set
1410+ E8A1 C4          >                db      {b $} | END_BIT     // msb as name end
1410+ E8A2             >
1410+ E8A2 91 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1410+ E8A4             >Prev_Ptr        defl    Heap_Ptr
1410+ E8A4             >
1410+ E8A4             >mirror_Ptr      defl    $
1410+ E8A4             >
1410+ E8A4 97 2F       >                dw      Dict_Ptr + 2        // xt
1410+ E8A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1410+ E8A6             >
1410+ E8A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1410+ E8A6             >
1410+ E8A6             >//              ______________________________________________________________________
1410+ E8A6             >//              Dictionary part
1410+ E8A6             >
1410+ E8A6             >                org     Dict_Ptr
1410+ 2F95             >
1410+ 2F95 A4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1410+ 2F97             >
1410+ 2F97             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 2F97 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1410+ 2F9A             >
1410+ 2F9A             >
1410+ 2F9A             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 2F9A             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 2F9A             >
1410+ 2F9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 2F9A 16 25 2C 25                  dw      TO_R, R_OP              // >r r@
1412+ 2F9E 0A 28 54 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1412+ 2FA2 54 26
1413+ 2FA4 55 21                        dw      C_FIND                  // (find)
1414+ 2FA6 1A 29                        dw      QDUP                    // ?dup
1415+ 2FA8 31 25                        dw      ZEQUAL                  // 0=
1416+ 2FAA                                                              // if
1417+ 2FAA 8F 20                        dw      ZBRANCH
1418+ 2FAC 24 00                        dw      LFind_Endif - $
1419+ 2FAE 2C 25                        dw          R_OP                //      r@
1420+ 2FB0                              // dw          LATEST               //      latest
1421+ 2FB0 10 28 54 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1421+ 2FB4 54 26
1422+ 2FB6 55 21                        dw          C_FIND              //      (find)
1423+ 2FB8
1424+ 2FB8 1A 29                            dw      QDUP                    // ?dup
1425+ 2FBA 31 25                            dw      ZEQUAL                  // 0=
1426+ 2FBC                                                                  // if
1427+ 2FBC 8F 20                            dw      ZBRANCH
1428+ 2FBE 12 00                            dw      LFind_Endif2 - $
1429+ 2FC0 2C 25                            dw          R_OP                //      r@
1430+ 2FC2 3D 20 11 32                      dw          LIT, FORTH, TO_BODY
1430+ 2FC6 2B 2A
1431+ 2FC8 8D 25 8D 25                      dw          CELL_PLUS, CELL_PLUS
1432+ 2FCC 54 26                            dw          FETCH
1433+ 2FCE 55 21                            dw          C_FIND              //      (find)
1434+ 2FD0              LFind_Endif2:                                    // endif
1435+ 2FD0
1436+ 2FD0
1437+ 2FD0              LFind_Endif:                                    // endif
1438+ 2FD0 21 25 C8 25                  dw      R_TO, DROP              // r> drop
1439+ 2FD4 0C 25                        dw      EXIT                    // ;
1440+ 2FD6
1441+ 2FD6              //  ______________________________________________________________________
1442+ 2FD6              //
1443+ 2FD6              // -find        a -- d
1444+ 2FD6                              Colon_Def LFIND,  "-FIND", is_normal
1444+ 2FD6             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1444+ 2FD6             >
1444+ 2FD6             >Dict_Ptr        defl    $
1444+ 2FD6             >
1444+ 2FD6             >//              ______________________________________________________________________
1444+ 2FD6             >//              Heap part
1444+ 2FD6             >
1444+ 2FD6             >
1444+ 2FD6             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E8A6             >
1444+ E8A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E8A6             >Latest_Definition defl  Heap_Ptr
1444+ E8A6             >
1444+ E8A6             >                // dummy db directives used to calculate length of namec
1444+ E8A6 2D 46 49 4E >                db      "-FIND"
1444+ E8AA 44          >
1444+ E8AB             >len_NFA         defl    $ - temp_NFA
1444+ E8AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E8A6             >
1444+ E8A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E8A7 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1444+ E8AB 44          >
1444+ E8AC             >                org     $-1                 // alter last byte of Name just above to set
1444+ E8AB C4          >                db      {b $} | END_BIT     // msb as name end
1444+ E8AC             >
1444+ E8AC 9C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E8AE             >Prev_Ptr        defl    Heap_Ptr
1444+ E8AE             >
1444+ E8AE             >mirror_Ptr      defl    $
1444+ E8AE             >
1444+ E8AE D8 2F       >                dw      Dict_Ptr + 2        // xt
1444+ E8B0             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E8B0             >
1444+ E8B0             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E8B0             >
1444+ E8B0             >//              ______________________________________________________________________
1444+ E8B0             >//              Dictionary part
1444+ E8B0             >
1444+ E8B0             >                org     Dict_Ptr
1444+ 2FD6             >
1444+ 2FD6 AE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 2FD8             >
1444+ 2FD8             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 2FD8 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1444+ 2FDB             >
1444+ 2FDB             >
1444+ 2FDB             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 2FDB             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 2FDB             >
1444+ 2FDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 2FDB 6E 27 8E 2D                  dw      BL, WORD                // bl word
1446+ 2FDF 97 2F                        dw      TWOFIND                 // 2find
1447+ 2FE1 0C 25                        dw      EXIT                    // ;
1448+ 2FE3
1449+ 2FE3              //  ______________________________________________________________________
1450+ 2FE3              //
1451+ 2FE3              // (abort)      --
1452+ 2FE3                              Colon_Def CABORT,  "(ABORT)", is_normal
1452+ 2FE3             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1452+ 2FE3             >
1452+ 2FE3             >Dict_Ptr        defl    $
1452+ 2FE3             >
1452+ 2FE3             >//              ______________________________________________________________________
1452+ 2FE3             >//              Heap part
1452+ 2FE3             >
1452+ 2FE3             >
1452+ 2FE3             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E8B0             >
1452+ E8B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E8B0             >Latest_Definition defl  Heap_Ptr
1452+ E8B0             >
1452+ E8B0             >                // dummy db directives used to calculate length of namec
1452+ E8B0 28 41 42 4F >                db      "(ABORT)"
1452+ E8B4 52 54 29    >
1452+ E8B7             >len_NFA         defl    $ - temp_NFA
1452+ E8B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E8B0             >
1452+ E8B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E8B1 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1452+ E8B5 52 54 29    >
1452+ E8B8             >                org     $-1                 // alter last byte of Name just above to set
1452+ E8B7 A9          >                db      {b $} | END_BIT     // msb as name end
1452+ E8B8             >
1452+ E8B8 A6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E8BA             >Prev_Ptr        defl    Heap_Ptr
1452+ E8BA             >
1452+ E8BA             >mirror_Ptr      defl    $
1452+ E8BA             >
1452+ E8BA E5 2F       >                dw      Dict_Ptr + 2        // xt
1452+ E8BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E8BC             >
1452+ E8BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E8BC             >
1452+ E8BC             >//              ______________________________________________________________________
1452+ E8BC             >//              Dictionary part
1452+ E8BC             >
1452+ E8BC             >                org     Dict_Ptr
1452+ 2FE3             >
1452+ 2FE3 BA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 2FE5             >
1452+ 2FE5             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 2FE5 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1452+ 2FE8             >
1452+ 2FE8             >
1452+ 2FE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 2FE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 2FE8             >
1452+ 2FE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 2FE8 78 32                        dw      ABORT                   // abort
1454+ 2FEA 0C 25                        dw      EXIT                    // ;
1455+ 2FEC
1456+ 2FEC              //  ______________________________________________________________________
1457+ 2FEC              //
1458+ 2FEC              // error        n --
1459+ 2FEC              // raise an error
1460+ 2FEC              // if WARNING is 0, prints "MSG#n".
1461+ 2FEC              // if WARNING is 1, prints line n of screen 4.
1462+ 2FEC              // if WARNING is -1 does (ABORT) that normally does ABORT
1463+ 2FEC              // value can be negative or beyond block 4.
1464+ 2FEC                              Colon_Def ERROR,  "ERROR", is_normal
1464+ 2FEC             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1464+ 2FEC             >
1464+ 2FEC             >Dict_Ptr        defl    $
1464+ 2FEC             >
1464+ 2FEC             >//              ______________________________________________________________________
1464+ 2FEC             >//              Heap part
1464+ 2FEC             >
1464+ 2FEC             >
1464+ 2FEC             >                org     (Heap_Ptr & $1FFF) + $E000
1464+ E8BC             >
1464+ E8BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1464+ E8BC             >Latest_Definition defl  Heap_Ptr
1464+ E8BC             >
1464+ E8BC             >                // dummy db directives used to calculate length of namec
1464+ E8BC 45 52 52 4F >                db      "ERROR"
1464+ E8C0 52          >
1464+ E8C1             >len_NFA         defl    $ - temp_NFA
1464+ E8C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1464+ E8BC             >
1464+ E8BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1464+ E8BD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1464+ E8C1 52          >
1464+ E8C2             >                org     $-1                 // alter last byte of Name just above to set
1464+ E8C1 D2          >                db      {b $} | END_BIT     // msb as name end
1464+ E8C2             >
1464+ E8C2 B0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1464+ E8C4             >Prev_Ptr        defl    Heap_Ptr
1464+ E8C4             >
1464+ E8C4             >mirror_Ptr      defl    $
1464+ E8C4             >
1464+ E8C4 EE 2F       >                dw      Dict_Ptr + 2        // xt
1464+ E8C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1464+ E8C6             >
1464+ E8C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1464+ E8C6             >
1464+ E8C6             >//              ______________________________________________________________________
1464+ E8C6             >//              Dictionary part
1464+ E8C6             >
1464+ E8C6             >                org     Dict_Ptr
1464+ 2FEC             >
1464+ 2FEC C4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1464+ 2FEE             >
1464+ 2FEE             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1464+ 2FEE CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1464+ 2FF1             >
1464+ 2FF1             >
1464+ 2FF1             >                endif           ; ok        // for other definitions it "points" the correct handler
1464+ 2FF1             >                // Use of "; ok" to suppress "warning[fwdref]"
1464+ 2FF1             >
1464+ 2FF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1465+ 2FF1 BC 27 54 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1465+ 2FF5 43 25
1466+ 2FF7                                                              // if
1467+ 2FF7 8F 20                        dw      ZBRANCH
1468+ 2FF9 04 00                        dw      Error_Endif_1 - $
1469+ 2FFB E5 2F                        dw          CABORT              //      (abort)
1470+ 2FFD              Error_Endif_1:                                  // endif
1471+ 2FFD 70 28 E8 2B                  dw      HERE, COUNT, TYPE       // here count type
1471+ 3001 3C 2C
1472+ 3003 D9 2D                        dw      C_DOT_QUOTE             // .( ? )
1473+ 3005 02 3F 20                     db      2, "? "
1474+ 3008 A1 35                        dw      MESSAGE                 // message  ( forward )
1475+ 300A A4 27 54 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1475+ 300E FC 24
1476+ 3010 EC 27 54 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1476+ 3014 1A 29
1477+ 3016                                                              // if
1478+ 3016 8F 20                        dw      ZBRANCH
1479+ 3018 08 00                        dw      Error_Endif_2 - $
1480+ 301A F2 27 54 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1480+ 301E DC 25
1481+ 3020              Error_Endif_2:                                  // endif
1482+ 3020 3C 32                        dw      QUIT                    // quit ( forward )
1483+ 3022 0C 25                        dw      EXIT                    // ;
1484+ 3024              //  ______________________________________________________________________
1485+ 3024              //
1486+ 3024              // id.          nfa --
1487+ 3024                              Colon_Def ID_DOT,  "ID.", is_normal
1487+ 3024             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1487+ 3024             >
1487+ 3024             >Dict_Ptr        defl    $
1487+ 3024             >
1487+ 3024             >//              ______________________________________________________________________
1487+ 3024             >//              Heap part
1487+ 3024             >
1487+ 3024             >
1487+ 3024             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E8C6             >
1487+ E8C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E8C6             >Latest_Definition defl  Heap_Ptr
1487+ E8C6             >
1487+ E8C6             >                // dummy db directives used to calculate length of namec
1487+ E8C6 49 44 2E    >                db      "ID."
1487+ E8C9             >len_NFA         defl    $ - temp_NFA
1487+ E8C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E8C6             >
1487+ E8C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E8C7 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1487+ E8CA             >                org     $-1                 // alter last byte of Name just above to set
1487+ E8C9 AE          >                db      {b $} | END_BIT     // msb as name end
1487+ E8CA             >
1487+ E8CA BC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E8CC             >Prev_Ptr        defl    Heap_Ptr
1487+ E8CC             >
1487+ E8CC             >mirror_Ptr      defl    $
1487+ E8CC             >
1487+ E8CC 26 30       >                dw      Dict_Ptr + 2        // xt
1487+ E8CE             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E8CE             >
1487+ E8CE             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E8CE             >
1487+ E8CE             >//              ______________________________________________________________________
1487+ E8CE             >//              Dictionary part
1487+ E8CE             >
1487+ E8CE             >                org     Dict_Ptr
1487+ 3024             >
1487+ 3024 CC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 3026             >
1487+ 3026             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 3026 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1487+ 3029             >
1487+ 3029             >
1487+ 3029             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 3029             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 3029             >
1487+ 3029             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 3029 D0 29                        dw      QTOHEAP
1489+ 302B E3 25 52 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1489+ 302F 4C 29
1490+ 3031 77 25                        dw      ONE_PLUS                // 1+
1491+ 3033 BF 25 AF 28                  dw      OVER, SUBTRACT          // over -
1492+ 3037 E3 25 16 25                  dw      DUP, TO_R               // >r
1493+ 303B 7F 2D DC 25                  dw      PAD, SWAP               // pad swap
1494+ 303F 4D 24                        dw      CMOVE                   // cmove
1495+ 3041 7F 2D 77 25                  dw      PAD, ONE_PLUS           // pad 1+
1496+ 3045 21 25 7E 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1497+ 3049 3C 2C 41 29                  dw      TYPE, SPACE             // type
1498+ 304D 0C 25                        dw      EXIT                    // ;
1499+ 304F
1500+ 304F              //  ______________________________________________________________________
1501+ 304F              //
1502+ 304F              // code         -- cccc
1503+ 304F                              Colon_Def CODE,  "CODE", is_normal
1503+ 304F             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1503+ 304F             >
1503+ 304F             >Dict_Ptr        defl    $
1503+ 304F             >
1503+ 304F             >//              ______________________________________________________________________
1503+ 304F             >//              Heap part
1503+ 304F             >
1503+ 304F             >
1503+ 304F             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E8CE             >
1503+ E8CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E8CE             >Latest_Definition defl  Heap_Ptr
1503+ E8CE             >
1503+ E8CE             >                // dummy db directives used to calculate length of namec
1503+ E8CE 43 4F 44 45 >                db      "CODE"
1503+ E8D2             >len_NFA         defl    $ - temp_NFA
1503+ E8D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E8CE             >
1503+ E8CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E8CF 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1503+ E8D3             >                org     $-1                 // alter last byte of Name just above to set
1503+ E8D2 C5          >                db      {b $} | END_BIT     // msb as name end
1503+ E8D3             >
1503+ E8D3 C6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E8D5             >Prev_Ptr        defl    Heap_Ptr
1503+ E8D5             >
1503+ E8D5             >mirror_Ptr      defl    $
1503+ E8D5             >
1503+ E8D5 51 30       >                dw      Dict_Ptr + 2        // xt
1503+ E8D7             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E8D7             >
1503+ E8D7             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E8D7             >
1503+ E8D7             >//              ______________________________________________________________________
1503+ E8D7             >//              Dictionary part
1503+ E8D7             >
1503+ E8D7             >                org     Dict_Ptr
1503+ 304F             >
1503+ 304F D5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 3051             >
1503+ 3051             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 3051 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1503+ 3054             >
1503+ 3054             >
1503+ 3054             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 3054             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 3054             >
1503+ 3054             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 3054 D8 2F                        dw      LFIND                   // -find
1505+ 3056                                                              // if
1506+ 3056 8F 20                        dw      ZBRANCH
1507+ 3058 10 00                        dw      Code_Endif - $
1508+ 305A C8 25                        dw          DROP                //      drop
1509+ 305C 36 2A 26 30                  dw          TO_NAME, ID_DOT     //      >name id.
1510+ 3060 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1510+ 3064 A1 35
1511+ 3066 41 29                        dw          SPACE               //      space
1512+ 3068              Code_Endif:                                     // endif
1513+ 3068 70 28                        dw      HERE                    // here
1514+ 306A                                                              // ( ---- here begins NFA ---- )
1515+ 306A E3 25 69 26                  dw      DUP, CFETCH             // dup c@
1516+ 306E B6 27 54 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1516+ 3072 F4 28
1517+ 3074 77 25                        dw      ONE_PLUS                // 1+
1518+ 3076 E3 25 7B 28                  dw      DUP, ALLOT              // dup allot
1519+ 307A 8D 25 8D 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1520+ 307E 16 25                        dw      TO_R                    // >r
1521+ 3080 E3 25                        dw      DUP                     // dup
1522+ 3082 3D 20                        dw      LIT
1523+ 3084 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1524+ 3086 4B 26                        dw      TOGGLE                  // toggle
1525+ 3088 70 28 7E 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1526+ 308C 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1526+ 3090 4B 26
1527+ 3092                                                              // ( ---- here is LFA ---- )
1528+ 3092 10 28 54 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1528+ 3096 54 26
1529+ 3098 86 28                        dw      COMMA
1530+ 309A E3 25 8D 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1530+ 309E 86 28
1531+ 30A0 E1 29                        dw      HP_FETCH                // hp@
1532+ 30A2 10 28 54 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1532+ 30A6 5E 26
1533+ 30A8 E1 29 B2 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1534+ 30AC 2C 25 4D 24                  dw      R_OP, CMOVE
1535+ 30B0 2C 25 9E 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1535+ 30B4 7B 28
1536+ 30B6 21 25 E0 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1536+ 30BA 3C 26
1537+ 30BC E1 29 91 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1538+ 30C0 86 28                        dw      COMMA
1539+ 30C2 4B 27 F3 29                  dw      ZERO, SKIP_HP_PAGE
1540+ 30C6                                                              // ( ---- here is LFA ---- )
1541+ 30C6 0C 25                        dw      EXIT                    // ;
1542+ 30C8
1543+ 30C8              //  ______________________________________________________________________
1544+ 30C8              //
1545+ 30C8              // create       -- cccc     ( compile time )
1546+ 30C8              //              -- a        ( run time )
1547+ 30C8                              Colon_Def CREATE,  "CREATE", is_normal
1547+ 30C8             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1547+ 30C8             >
1547+ 30C8             >Dict_Ptr        defl    $
1547+ 30C8             >
1547+ 30C8             >//              ______________________________________________________________________
1547+ 30C8             >//              Heap part
1547+ 30C8             >
1547+ 30C8             >
1547+ 30C8             >                org     (Heap_Ptr & $1FFF) + $E000
1547+ E8D7             >
1547+ E8D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1547+ E8D7             >Latest_Definition defl  Heap_Ptr
1547+ E8D7             >
1547+ E8D7             >                // dummy db directives used to calculate length of namec
1547+ E8D7 43 52 45 41 >                db      "CREATE"
1547+ E8DB 54 45       >
1547+ E8DD             >len_NFA         defl    $ - temp_NFA
1547+ E8DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1547+ E8D7             >
1547+ E8D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1547+ E8D8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1547+ E8DC 54 45       >
1547+ E8DE             >                org     $-1                 // alter last byte of Name just above to set
1547+ E8DD C5          >                db      {b $} | END_BIT     // msb as name end
1547+ E8DE             >
1547+ E8DE CE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1547+ E8E0             >Prev_Ptr        defl    Heap_Ptr
1547+ E8E0             >
1547+ E8E0             >mirror_Ptr      defl    $
1547+ E8E0             >
1547+ E8E0 CA 30       >                dw      Dict_Ptr + 2        // xt
1547+ E8E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1547+ E8E2             >
1547+ E8E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1547+ E8E2             >
1547+ E8E2             >//              ______________________________________________________________________
1547+ E8E2             >//              Dictionary part
1547+ E8E2             >
1547+ E8E2             >                org     Dict_Ptr
1547+ 30C8             >
1547+ 30C8 E0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1547+ 30CA             >
1547+ 30CA             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1547+ 30CA CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1547+ 30CD             >
1547+ 30CD             >
1547+ 30CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1547+ 30CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1547+ 30CD             >
1547+ 30CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1548+ 30CD 51 30 58 2B                  dw      CODE, SMUDGE            // code smudge
1549+ 30D1 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1549+ 30D5 95 28
1550+ 30D7 3D 20 32 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1550+ 30DB 86 28
1551+ 30DD 94 2B                        dw      C_SEMICOLON_CODE
1552+ 30DF                              // this routine is called from the call coded in CFA
1553+ 30DF              Create_Ptr:
1554+ 30DF
1555+ 30DF
1556+ 30DF
1557+ 30DF                              next
1557+ 30DF DD E9       >                jp      (ix)
1558+ 30E1
1559+ 30E1              //  ______________________________________________________________________
1560+ 30E1              //
1561+ 30E1              // [compile]    -- cccc     ( compile time )
1562+ 30E1                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1562+ 30E1             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1562+ 30E1             >
1562+ 30E1             >Dict_Ptr        defl    $
1562+ 30E1             >
1562+ 30E1             >//              ______________________________________________________________________
1562+ 30E1             >//              Heap part
1562+ 30E1             >
1562+ 30E1             >
1562+ 30E1             >                org     (Heap_Ptr & $1FFF) + $E000
1562+ E8E2             >
1562+ E8E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1562+ E8E2             >Latest_Definition defl  Heap_Ptr
1562+ E8E2             >
1562+ E8E2             >                // dummy db directives used to calculate length of namec
1562+ E8E2 5B 43 4F 4D >                db      "[COMPILE]"
1562+ E8E6 50 49 4C 45 >
1562+ E8EA 5D          >
1562+ E8EB             >len_NFA         defl    $ - temp_NFA
1562+ E8EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1562+ E8E2             >
1562+ E8E2 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1562+ E8E3 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1562+ E8E7 50 49 4C 45 >
1562+ E8EB 5D          >
1562+ E8EC             >                org     $-1                 // alter last byte of Name just above to set
1562+ E8EB DD          >                db      {b $} | END_BIT     // msb as name end
1562+ E8EC             >
1562+ E8EC D7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1562+ E8EE             >Prev_Ptr        defl    Heap_Ptr
1562+ E8EE             >
1562+ E8EE             >mirror_Ptr      defl    $
1562+ E8EE             >
1562+ E8EE E3 30       >                dw      Dict_Ptr + 2        // xt
1562+ E8F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1562+ E8F0             >
1562+ E8F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1562+ E8F0             >
1562+ E8F0             >//              ______________________________________________________________________
1562+ E8F0             >//              Dictionary part
1562+ E8F0             >
1562+ E8F0             >                org     Dict_Ptr
1562+ 30E1             >
1562+ 30E1 EE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1562+ 30E3             >
1562+ 30E3             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1562+ 30E3 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1562+ 30E6             >
1562+ 30E6             >
1562+ 30E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1562+ 30E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1562+ 30E6             >
1562+ 30E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1563+ 30E6 D8 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1564+ 30E8 31 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1565+ 30EA 4B 27 AC 2A                  dw      ZERO, QERROR            // 0 ?error
1566+ 30EE C8 25                        dw      DROP                    // drop       (  cfa  )
1567+ 30F0 86 28                        dw      COMMA                   // ,
1568+ 30F2 0C 25                        dw      EXIT                    // ; immediate
1569+ 30F4
1570+ 30F4              //  ______________________________________________________________________
1571+ 30F4              //
1572+ 30F4              // literal      n --      ( compile time )
1573+ 30F4                              Colon_Def LITERAL,  "LITERAL", is_immediate
1573+ 30F4             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1573+ 30F4             >
1573+ 30F4             >Dict_Ptr        defl    $
1573+ 30F4             >
1573+ 30F4             >//              ______________________________________________________________________
1573+ 30F4             >//              Heap part
1573+ 30F4             >
1573+ 30F4             >
1573+ 30F4             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8F0             >
1573+ E8F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8F0             >Latest_Definition defl  Heap_Ptr
1573+ E8F0             >
1573+ E8F0             >                // dummy db directives used to calculate length of namec
1573+ E8F0 4C 49 54 45 >                db      "LITERAL"
1573+ E8F4 52 41 4C    >
1573+ E8F7             >len_NFA         defl    $ - temp_NFA
1573+ E8F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8F0             >
1573+ E8F0 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8F1 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1573+ E8F5 52 41 4C    >
1573+ E8F8             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8F7 CC          >                db      {b $} | END_BIT     // msb as name end
1573+ E8F8             >
1573+ E8F8 E2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8FA             >Prev_Ptr        defl    Heap_Ptr
1573+ E8FA             >
1573+ E8FA             >mirror_Ptr      defl    $
1573+ E8FA             >
1573+ E8FA F6 30       >                dw      Dict_Ptr + 2        // xt
1573+ E8FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8FC             >
1573+ E8FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8FC             >
1573+ E8FC             >//              ______________________________________________________________________
1573+ E8FC             >//              Dictionary part
1573+ E8FC             >
1573+ E8FC             >                org     Dict_Ptr
1573+ 30F4             >
1573+ 30F4 FA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 30F6             >
1573+ 30F6             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 30F6 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 30F9             >
1573+ 30F9             >
1573+ 30F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 30F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 30F9             >
1573+ 30F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 30F9 16 28 54 26                  dw      STATE, FETCH            // state @
1575+ 30FD                                                              // if
1576+ 30FD 8F 20                        dw      ZBRANCH
1577+ 30FF 08 00                        dw      Literal_Endif - $
1578+ 3101 1C 2B 3D 20                  dw          COMPILE, LIT        //      compile lit
1579+ 3105 86 28                        dw          COMMA               //      ,
1580+ 3107              Literal_Endif:                                  // endif
1581+ 3107 0C 25                        dw      EXIT                    // ; immediate
1582+ 3109
1583+ 3109              //  ______________________________________________________________________
1584+ 3109              //
1585+ 3109              // dliteral     n --      ( compile time )
1586+ 3109                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1586+ 3109             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1586+ 3109             >
1586+ 3109             >Dict_Ptr        defl    $
1586+ 3109             >
1586+ 3109             >//              ______________________________________________________________________
1586+ 3109             >//              Heap part
1586+ 3109             >
1586+ 3109             >
1586+ 3109             >                org     (Heap_Ptr & $1FFF) + $E000
1586+ E8FC             >
1586+ E8FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ E8FC             >Latest_Definition defl  Heap_Ptr
1586+ E8FC             >
1586+ E8FC             >                // dummy db directives used to calculate length of namec
1586+ E8FC 44 4C 49 54 >                db      "DLITERAL"
1586+ E900 45 52 41 4C >
1586+ E904             >len_NFA         defl    $ - temp_NFA
1586+ E904             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ E8FC             >
1586+ E8FC C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ E8FD 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1586+ E901 45 52 41 4C >
1586+ E905             >                org     $-1                 // alter last byte of Name just above to set
1586+ E904 CC          >                db      {b $} | END_BIT     // msb as name end
1586+ E905             >
1586+ E905 F0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1586+ E907             >Prev_Ptr        defl    Heap_Ptr
1586+ E907             >
1586+ E907             >mirror_Ptr      defl    $
1586+ E907             >
1586+ E907 0B 31       >                dw      Dict_Ptr + 2        // xt
1586+ E909             >Heap_Ptr        defl    $ - $E000           // save current HP
1586+ E909             >
1586+ E909             >Current_HP      defl  $ - $E000             // used to set HP once!
1586+ E909             >
1586+ E909             >//              ______________________________________________________________________
1586+ E909             >//              Dictionary part
1586+ E909             >
1586+ E909             >                org     Dict_Ptr
1586+ 3109             >
1586+ 3109 07 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1586+ 310B             >
1586+ 310B             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 310B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1586+ 310E             >
1586+ 310E             >
1586+ 310E             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 310E             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 310E             >
1586+ 310E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 310E 16 28 54 26                  dw      STATE, FETCH            // state @
1588+ 3112                                                              // if
1589+ 3112 8F 20                        dw      ZBRANCH
1590+ 3114 08 00                        dw      DLiteral_Endif - $
1591+ 3116 DC 25                        dw          SWAP                //      swap
1592+ 3118 F6 30 F6 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1593+ 311C              DLiteral_Endif:                                 // endif
1594+ 311C 0C 25                        dw      EXIT                    // ; immediate
1595+ 311E
1596+ 311E              //  ______________________________________________________________________
1597+ 311E              //
1598+ 311E              // [char]       n --      ( compile time )
1599+ 311E              // inside colon definition, gets first character from next input word
1600+ 311E              // and compiles it as literal.
1601+ 311E                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1601+ 311E             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1601+ 311E             >
1601+ 311E             >Dict_Ptr        defl    $
1601+ 311E             >
1601+ 311E             >//              ______________________________________________________________________
1601+ 311E             >//              Heap part
1601+ 311E             >
1601+ 311E             >
1601+ 311E             >                org     (Heap_Ptr & $1FFF) + $E000
1601+ E909             >
1601+ E909             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ E909             >Latest_Definition defl  Heap_Ptr
1601+ E909             >
1601+ E909             >                // dummy db directives used to calculate length of namec
1601+ E909 5B 43 48 41 >                db      "[CHAR]"
1601+ E90D 52 5D       >
1601+ E90F             >len_NFA         defl    $ - temp_NFA
1601+ E90F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ E909             >
1601+ E909 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ E90A 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1601+ E90E 52 5D       >
1601+ E910             >                org     $-1                 // alter last byte of Name just above to set
1601+ E90F DD          >                db      {b $} | END_BIT     // msb as name end
1601+ E910             >
1601+ E910 FC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1601+ E912             >Prev_Ptr        defl    Heap_Ptr
1601+ E912             >
1601+ E912             >mirror_Ptr      defl    $
1601+ E912             >
1601+ E912 20 31       >                dw      Dict_Ptr + 2        // xt
1601+ E914             >Heap_Ptr        defl    $ - $E000           // save current HP
1601+ E914             >
1601+ E914             >Current_HP      defl  $ - $E000             // used to set HP once!
1601+ E914             >
1601+ E914             >//              ______________________________________________________________________
1601+ E914             >//              Dictionary part
1601+ E914             >
1601+ E914             >                org     Dict_Ptr
1601+ 311E             >
1601+ 311E 12 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1601+ 3120             >
1601+ 3120             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 3120 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1601+ 3123             >
1601+ 3123             >
1601+ 3123             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 3123             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 3123             >
1601+ 3123             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 3123 F0 2D F6 30                  dw      CHAR, LITERAL           // char [compile] literal
1603+ 3127 0C 25                        dw      EXIT                    // ; immediate
1604+ 3129
1605+ 3129              //  ______________________________________________________________________
1606+ 3129              //
1607+ 3129              // 0x00         n --      ( compile time )
1608+ 3129                              Colon_Def NUL_WORD,  $00, is_immediate
1608+ 3129             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1608+ 3129             >
1608+ 3129             >Dict_Ptr        defl    $
1608+ 3129             >
1608+ 3129             >//              ______________________________________________________________________
1608+ 3129             >//              Heap part
1608+ 3129             >
1608+ 3129             >
1608+ 3129             >                org     (Heap_Ptr & $1FFF) + $E000
1608+ E914             >
1608+ E914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1608+ E914             >Latest_Definition defl  Heap_Ptr
1608+ E914             >
1608+ E914             >                // dummy db directives used to calculate length of namec
1608+ E914 00          >                db      $00
1608+ E915             >len_NFA         defl    $ - temp_NFA
1608+ E915             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1608+ E914             >
1608+ E914 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1608+ E915 00          >                db      $00               // name string in 7-bit ascii, but
1608+ E916             >                org     $-1                 // alter last byte of Name just above to set
1608+ E915 80          >                db      {b $} | END_BIT     // msb as name end
1608+ E916             >
1608+ E916 09 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1608+ E918             >Prev_Ptr        defl    Heap_Ptr
1608+ E918             >
1608+ E918             >mirror_Ptr      defl    $
1608+ E918             >
1608+ E918 2B 31       >                dw      Dict_Ptr + 2        // xt
1608+ E91A             >Heap_Ptr        defl    $ - $E000           // save current HP
1608+ E91A             >
1608+ E91A             >Current_HP      defl  $ - $E000             // used to set HP once!
1608+ E91A             >
1608+ E91A             >//              ______________________________________________________________________
1608+ E91A             >//              Dictionary part
1608+ E91A             >
1608+ E91A             >                org     Dict_Ptr
1608+ 3129             >
1608+ 3129 18 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1608+ 312B             >
1608+ 312B             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1608+ 312B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1608+ 312E             >
1608+ 312E             >
1608+ 312E             >                endif           ; ok        // for other definitions it "points" the correct handler
1608+ 312E             >                // Use of "; ok" to suppress "warning[fwdref]"
1608+ 312E             >
1608+ 312E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1609+ 312E EC 27 54 26                  dw      BLK, FETCH, ONE         // blk @ 1
1609+ 3132 52 27
1610+ 3134 E9 28                        dw      GREATER                 // > if
1611+ 3136                                                              // if
1612+ 3136 8F 20                        dw      ZBRANCH
1613+ 3138 28 00                        dw      Nul_Else_1 - $
1614+ 313A 52 27 EC 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1614+ 313E 3C 26
1615+ 3140 4B 27 F2 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1615+ 3144 5E 26
1616+ 3146 EC 27 54 26                  dw          BLK, FETCH          //      blk @
1617+ 314A 83 27                        dw          BSCR                //      b/scr
1618+ 314C 7E 25                        dw          ONE_SUBTRACT        //      1 -
1619+ 314E CC 24                        dw          AND_OP              //      and  ( this is tricky )
1620+ 3150 31 25                        dw          ZEQUAL              //      0=
1621+ 3152                                                              //      if
1622+ 3152 8F 20                        dw          ZBRANCH
1623+ 3154 08 00                        dw          Nul_Endif_2 - $
1624+ 3156 D4 2A                        dw              QEXEC           //          ?exec
1625+ 3158 21 25 C8 25                  dw              R_TO, DROP      //          r> drop
1626+ 315C              Nul_Endif_2:                                    //      endif
1627+ 315C 82 20                        dw      BRANCH
1628+ 315E 06 00                        dw      Nul_Endif_1 - $
1629+ 3160              Nul_Else_1:                                     // else
1630+ 3160 21 25 C8 25                  dw          R_TO, DROP          //      r> drop
1631+ 3164              Nul_Endif_1:                                    // endif
1632+ 3164 0C 25                        dw      EXIT                    // ;
1633+ 3166
1634+ 3166              //  ______________________________________________________________________
1635+ 3166              //
1636+ 3166              // ?stack       --
1637+ 3166              // Raise error #1 if stack is empty and you pop it
1638+ 3166              // Raise error #7 if stack is full.
1639+ 3166              // This means SP must always stay between HERE and FFFF
1640+ 3166              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1641+ 3166              // for Next 8K MMU paging this is $DOE8
1642+ 3166                              Colon_Def QSTACK, "?STACK", is_normal
1642+ 3166             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1642+ 3166             >
1642+ 3166             >Dict_Ptr        defl    $
1642+ 3166             >
1642+ 3166             >//              ______________________________________________________________________
1642+ 3166             >//              Heap part
1642+ 3166             >
1642+ 3166             >
1642+ 3166             >                org     (Heap_Ptr & $1FFF) + $E000
1642+ E91A             >
1642+ E91A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ E91A             >Latest_Definition defl  Heap_Ptr
1642+ E91A             >
1642+ E91A             >                // dummy db directives used to calculate length of namec
1642+ E91A 3F 53 54 41 >                db      "?STACK"
1642+ E91E 43 4B       >
1642+ E920             >len_NFA         defl    $ - temp_NFA
1642+ E920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ E91A             >
1642+ E91A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ E91B 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1642+ E91F 43 4B       >
1642+ E921             >                org     $-1                 // alter last byte of Name just above to set
1642+ E920 CB          >                db      {b $} | END_BIT     // msb as name end
1642+ E921             >
1642+ E921 14 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1642+ E923             >Prev_Ptr        defl    Heap_Ptr
1642+ E923             >
1642+ E923             >mirror_Ptr      defl    $
1642+ E923             >
1642+ E923 68 31       >                dw      Dict_Ptr + 2        // xt
1642+ E925             >Heap_Ptr        defl    $ - $E000           // save current HP
1642+ E925             >
1642+ E925             >Current_HP      defl  $ - $E000             // used to set HP once!
1642+ E925             >
1642+ E925             >//              ______________________________________________________________________
1642+ E925             >//              Dictionary part
1642+ E925             >
1642+ E925             >                org     Dict_Ptr
1642+ 3166             >
1642+ 3166 23 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1642+ 3168             >
1642+ 3168             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 3168 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1642+ 316B             >
1642+ 316B             >
1642+ 316B             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 316B             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 316B             >
1642+ 316B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 316B F3 24                        dw      SPFETCH                 // sp@
1644+ 316D A4 27 54 26                  dw      S0, FETCH               // s0 @
1645+ 3171 DC 25 C6 28                  dw      SWAP, ULESS             // swap u<
1646+ 3175 52 27 AC 2A                  dw      ONE, QERROR             // 1 ?error
1647+ 3179 70 28                        dw      HERE                    // here
1648+ 317B A4 27 54 26                  dw      S0, FETCH, LESS         // s0 @ <
1648+ 317F D4 28
1649+ 3181                                                              // if
1650+ 3181 8F 20                        dw      ZBRANCH
1651+ 3183 14 00                        dw      QStack_Endif - $
1652+ 3185 F3 24                        dw          SPFETCH             //      sp@
1653+ 3187 70 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1653+ 318B 80 00
1654+ 318D 5E 25 C6 28                  dw          PLUS, ULESS         //      plus u<
1655+ 3191 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1655+ 3195 AC 2A
1656+ 3197              QStack_Endif:                                   // endif
1657+ 3197 0C 25                        dw      EXIT                    // ;
1658+ 3199
1659+ 3199
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 123  3199                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 3199              //  ______________________________________________________________________
   2+ 3199              //
   3+ 3199              //  L2.asm
   4+ 3199              //
   5+ 3199              //  Level-2 3dos
   6+ 3199              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 3199              //  ______________________________________________________________________
   8+ 3199
   9+ 3199
  10+ 3199              //  ______________________________________________________________________
  11+ 3199              //
  12+ 3199              // interpret    --
  13+ 3199              // This is the text interpreter.
  14+ 3199              // It executes or compiles, depending on STATE, the text coming from
  15+ 3199              // current input stream.
  16+ 3199              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 3199              // the word is interpreted as numeric and converted, using current BASE,
  18+ 3199              // leaving on top of stack a single or double precision number, depending
  19+ 3199              // on the presence of a decimal point.
  20+ 3199              // If the number conversion fails, the terminal is notified with ? followed
  21+ 3199              // by the offending word.
  22+ 3199                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 3199             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 3199             >
  22+ 3199             >Dict_Ptr        defl    $
  22+ 3199             >
  22+ 3199             >//              ______________________________________________________________________
  22+ 3199             >//              Heap part
  22+ 3199             >
  22+ 3199             >
  22+ 3199             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E925             >
  22+ E925             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E925             >Latest_Definition defl  Heap_Ptr
  22+ E925             >
  22+ E925             >                // dummy db directives used to calculate length of namec
  22+ E925 49 4E 54 45 >                db      "INTERPRET"
  22+ E929 52 50 52 45 >
  22+ E92D 54          >
  22+ E92E             >len_NFA         defl    $ - temp_NFA
  22+ E92E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E925             >
  22+ E925 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E926 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92A 52 50 52 45 >
  22+ E92E 54          >
  22+ E92F             >                org     $-1                 // alter last byte of Name just above to set
  22+ E92E D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E92F             >
  22+ E92F 1A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E931             >Prev_Ptr        defl    Heap_Ptr
  22+ E931             >
  22+ E931             >mirror_Ptr      defl    $
  22+ E931             >
  22+ E931 9B 31       >                dw      Dict_Ptr + 2        // xt
  22+ E933             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E933             >
  22+ E933             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E933             >
  22+ E933             >//              ______________________________________________________________________
  22+ E933             >//              Dictionary part
  22+ E933             >
  22+ E933             >                org     Dict_Ptr
  22+ 3199             >
  22+ 3199 31 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 319B             >
  22+ 319B             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 319B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 319E             >
  22+ 319E             >
  22+ 319E             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 319E             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 319E             >
  22+ 319E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 319E
  24+ 319E              Interpret_Begin:                                        // begin
  25+ 319E D8 2F                        dw          LFIND                       //      -find
  26+ 31A0                                                                      //      if
  27+ 31A0 8F 20                        dw          ZBRANCH
  28+ 31A2 1A 00                        dw          Interpret_Else_1 - $
  29+ 31A4 16 28 54 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 31A8 D4 28
  30+ 31AA                                                                      //          if
  31+ 31AA 8F 20                        dw              ZBRANCH
  32+ 31AC 08 00                        dw              Interpret_Else_2 - $
  33+ 31AE 31 2B                        dw                  COMPILE_XT          //              compile,
  34+ 31B0                                                                      //          else
  35+ 31B0 82 20                        dw              BRANCH
  36+ 31B2 06 00                        dw              Interpret_Endif_2 - $
  37+ 31B4              Interpret_Else_2:
  38+ 31B4 48 20 12 27                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 31B8              Interpret_Endif_2:                                      //          endif
  40+ 31B8                                                                      //      else
  41+ 31B8 82 20                        dw          BRANCH
  42+ 31BA 1A 00                        dw          Interpret_Endif_1 - $
  43+ 31BC              Interpret_Else_1:
  44+ 31BC 70 28 2C 2F                  dw              HERE, NUMBER            //          here number
  45+ 31C0 22 28 54 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31C4 77 25
  46+ 31C6                                                                      //          if
  47+ 31C6 8F 20                        dw              ZBRANCH
  48+ 31C8 08 00                        dw              Interpret_Else_3 - $
  49+ 31CA              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31CA              //                                                      //              if
  51+ 31CA              //              dw                  ZBRANCH
  52+ 31CA              //              dw                  Interpret_Endif_4 - $
  53+ 31CA              //              dw                      ONE, ZERO       //                  1 0
  54+ 31CA              //              dw                      TWO_DROP        //                  2drop
  55+ 31CA              //Interpret_Endif_4:                                      //              endif
  56+ 31CA 0B 31                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31CC                                                                      //          else
  58+ 31CC 82 20                        dw              BRANCH
  59+ 31CE 06 00                        dw              Interpret_Endif_3 - $
  60+ 31D0              Interpret_Else_3:
  61+ 31D0 C8 25                        dw                  DROP                //              drop
  62+ 31D2 F6 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31D4              Interpret_Endif_3:                                      //          endif
  64+ 31D4              Interpret_Endif_1:                                      //      endif
  65+ 31D4 68 31                        dw          QSTACK                      //      ?stack
  66+ 31D6 57 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31D8                                                                      //      if
  68+ 31D8 8F 20                        dw          ZBRANCH
  69+ 31DA 04 00                        dw          Interpret_Endif_5 - $
  70+ 31DC 3C 32                        dw              QUIT                    //          quit
  71+ 31DE              Interpret_Endif_5:                                      //      endif
  72+ 31DE 82 20                        dw      BRANCH
  73+ 31E0 BE FF                        dw      Interpret_Begin - $
  74+ 31E2 0C 25                        dw      EXIT                            // ;
  75+ 31E4
  76+ 31E4              //  ______________________________________________________________________
  77+ 31E4              //
  78+ 31E4              // vocabulary   -- cccc     ( compile time )
  79+ 31E4              // Defining word used in the form   VOCABULARY cccc
  80+ 31E4              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31E4              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31E4              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31E4              // so new definitions can be inserted in that vocabulary.
  84+ 31E4                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31E4             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31E4             >
  84+ 31E4             >Dict_Ptr        defl    $
  84+ 31E4             >
  84+ 31E4             >//              ______________________________________________________________________
  84+ 31E4             >//              Heap part
  84+ 31E4             >
  84+ 31E4             >
  84+ 31E4             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E933             >
  84+ E933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E933             >Latest_Definition defl  Heap_Ptr
  84+ E933             >
  84+ E933             >                // dummy db directives used to calculate length of namec
  84+ E933 56 4F 43 41 >                db      "VOCABULARY"
  84+ E937 42 55 4C 41 >
  84+ E93B 52 59       >
  84+ E93D             >len_NFA         defl    $ - temp_NFA
  84+ E93D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E933             >
  84+ E933 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E934 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E938 42 55 4C 41 >
  84+ E93C 52 59       >
  84+ E93E             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93D D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E93E             >
  84+ E93E 25 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E940             >Prev_Ptr        defl    Heap_Ptr
  84+ E940             >
  84+ E940             >mirror_Ptr      defl    $
  84+ E940             >
  84+ E940 E6 31       >                dw      Dict_Ptr + 2        // xt
  84+ E942             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E942             >
  84+ E942             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E942             >
  84+ E942             >//              ______________________________________________________________________
  84+ E942             >//              Dictionary part
  84+ E942             >
  84+ E942             >                org     Dict_Ptr
  84+ 31E4             >
  84+ 31E4 40 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31E6             >
  84+ 31E6             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31E6 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31E9             >
  84+ 31E9             >
  84+ 31E9             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31E9             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31E9             >
  84+ 31E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31E9
  86+ 31E9 C0 2B                        dw      CBUILDS
  87+ 31EB
  88+ 31EB                              // dummy word + link part
  89+ 31EB 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31EF 86 28
  90+ 31F1 10 28 54 26                  dw      CURRENT, FETCH          // current @
  91+ 31F5 54 26                        dw      FETCH                   // @
  92+ 31F7                          //  dw      CELL_MINUS              // cell-
  93+ 31F7 86 28                        dw      COMMA                   // ,
  94+ 31F9
  95+ 31F9                              // voc-link part
  96+ 31F9 70 28                        dw      HERE                    // here
  97+ 31FB CE 27 54 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31FF 86 28                        dw      COMMA                   // ,
  99+ 3201 CE 27 5E 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 3205                              // DOES part
 101+ 3205 CB 2B                        dw      DOES_TO                 // does>
 102+ 3207              Vocabulary_Does:
 103+ 3207 8D 25                        dw      CELL_PLUS               // cell+
 104+ 3209 0A 28 5E 26                  dw      CONTEXT, STORE          // context !
 105+ 320D 0C 25                        dw      EXIT                    // ;
 106+ 320F
 107+ 320F              //  ______________________________________________________________________
 108+ 320F              //
 109+ 320F              // forth        --
 110+ 320F              // Name of the first vocabulary.
 111+ 320F              // It makes FORTH the CONTEXT vocabulary.
 112+ 320F              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 320F              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 320F              // of a colon definition to be able to select the vocabulary.
 115+ 320F
 116+ 320F                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 320F             >
 116+ 320F             >Dict_Ptr        defl    $
 116+ 320F             >
 116+ 320F             >//              ______________________________________________________________________
 116+ 320F             >//              Heap part
 116+ 320F             >
 116+ 320F             >
 116+ 320F             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E942             >
 116+ E942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E942             >Latest_Definition defl  Heap_Ptr
 116+ E942             >
 116+ E942             >                // dummy db directives used to calculate length of namec
 116+ E942 46 4F 52 54 >                db      "FORTH"
 116+ E946 48          >
 116+ E947             >len_NFA         defl    $ - temp_NFA
 116+ E947             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E942             >
 116+ E942 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E943 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E947 48          >
 116+ E948             >                org     $-1                 // alter last byte of Name just above to set
 116+ E947 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E948             >
 116+ E948 33 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94A             >Prev_Ptr        defl    Heap_Ptr
 116+ E94A             >
 116+ E94A             >mirror_Ptr      defl    $
 116+ E94A             >
 116+ E94A 11 32       >                dw      Dict_Ptr + 2        // xt
 116+ E94C             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94C             >
 116+ E94C             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94C             >
 116+ E94C             >//              ______________________________________________________________________
 116+ E94C             >//              Dictionary part
 116+ E94C             >
 116+ E94C             >                org     Dict_Ptr
 116+ 320F             >
 116+ 320F 4A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 3211             >
 116+ 3211             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 3211 CD D8 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 3214             >
 116+ 3214             >
 116+ 3214             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 3214             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 3214             >
 116+ 3214             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 3214 07 32                        dw      Vocabulary_Does
 118+ 3216
 119+ 3216 81 A0                        db      $81, $A0
 120+ 3218              Forth_Latest_Ptr:
 121+ 3218 42 09                        dw      Latest_Definition
 122+ 321A              Voclink_Ptr:
 123+ 321A 00 00                        dw      0
 124+ 321C
 125+ 321C              // ____
 126+ 321C              // temp_VOC        defl    $                   // save this address
 127+ 321C              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 321C              //              db      $81, $A0
 129+ 321C              // Forth_Latest_Ptr_HEAP:
 130+ 321C              //                 dw      Latest_Definition
 131+ 321C              // Voclink_Ptr_HEAP:
 132+ 321C              //                 dw      0
 133+ 321C              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 321C              //                 org     temp_VOC
 135+ 321C              // ____
 136+ 321C
 137+ 321C              // Any new vocabulary is structured as follow:
 138+ 321C              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 321C              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 321C              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 321C              //       at creations it points to the null-word of its parent vocabulary
 142+ 321C              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 321C              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 321C              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 321C              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 321C              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 321C              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 321C
 149+ 321C              //  ______________________________________________________________________
 150+ 321C              //
 151+ 321C              // definitions  --
 152+ 321C              // Used in the form  cccc DEFINITIONS
 153+ 321C              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 321C              // vocabulary cccc.
 155+ 321C                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 321C             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 321C             >
 155+ 321C             >Dict_Ptr        defl    $
 155+ 321C             >
 155+ 321C             >//              ______________________________________________________________________
 155+ 321C             >//              Heap part
 155+ 321C             >
 155+ 321C             >
 155+ 321C             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94C             >
 155+ E94C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94C             >Latest_Definition defl  Heap_Ptr
 155+ E94C             >
 155+ E94C             >                // dummy db directives used to calculate length of namec
 155+ E94C 44 45 46 49 >                db      "DEFINITIONS"
 155+ E950 4E 49 54 49 >
 155+ E954 4F 4E 53    >
 155+ E957             >len_NFA         defl    $ - temp_NFA
 155+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94C             >
 155+ E94C 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E94D 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E951 4E 49 54 49 >
 155+ E955 4F 4E 53    >
 155+ E958             >                org     $-1                 // alter last byte of Name just above to set
 155+ E957 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E958             >
 155+ E958 42 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95A             >Prev_Ptr        defl    Heap_Ptr
 155+ E95A             >
 155+ E95A             >mirror_Ptr      defl    $
 155+ E95A             >
 155+ E95A 1E 32       >                dw      Dict_Ptr + 2        // xt
 155+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95C             >
 155+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95C             >
 155+ E95C             >//              ______________________________________________________________________
 155+ E95C             >//              Dictionary part
 155+ E95C             >
 155+ E95C             >                org     Dict_Ptr
 155+ 321C             >
 155+ 321C 5A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 321E             >
 155+ 321E             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 321E CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3221             >
 155+ 3221             >
 155+ 3221             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3221             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3221             >
 155+ 3221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3221 0A 28 54 26                  dw      CONTEXT, FETCH          // context @
 157+ 3225 10 28 5E 26                  dw      CURRENT, STORE          // current !
 158+ 3229 0C 25                        dw      EXIT                    // ;
 159+ 322B
 160+ 322B              //  ______________________________________________________________________
 161+ 322B              //
 162+ 322B              // (            -- cccc )
 163+ 322B              // the following text is interpreted as a comment until a closing )
 164+ 322B                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 322B             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 322B             >
 164+ 322B             >Dict_Ptr        defl    $
 164+ 322B             >
 164+ 322B             >//              ______________________________________________________________________
 164+ 322B             >//              Heap part
 164+ 322B             >
 164+ 322B             >
 164+ 322B             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95C             >
 164+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95C             >Latest_Definition defl  Heap_Ptr
 164+ E95C             >
 164+ E95C             >                // dummy db directives used to calculate length of namec
 164+ E95C 28          >                db      "("
 164+ E95D             >len_NFA         defl    $ - temp_NFA
 164+ E95D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95C             >
 164+ E95C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E95D 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E95E             >                org     $-1                 // alter last byte of Name just above to set
 164+ E95D A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E95E             >
 164+ E95E 4C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E960             >Prev_Ptr        defl    Heap_Ptr
 164+ E960             >
 164+ E960             >mirror_Ptr      defl    $
 164+ E960             >
 164+ E960 2D 32       >                dw      Dict_Ptr + 2        // xt
 164+ E962             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E962             >
 164+ E962             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E962             >
 164+ E962             >//              ______________________________________________________________________
 164+ E962             >//              Dictionary part
 164+ E962             >
 164+ E962             >                org     Dict_Ptr
 164+ 322B             >
 164+ 322B 60 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 322D             >
 164+ 322D             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 322D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 3230             >
 164+ 3230             >
 164+ 3230             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 3230             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 3230             >
 164+ 3230             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 3230 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 3234 8E 2D C8 25                  dw      WORD, DROP              // word drop
 167+ 3238 0C 25                        dw      EXIT                    // ;
 168+ 323A
 169+ 323A              //  ______________________________________________________________________
 170+ 323A              //
 171+ 323A              // quit         --
 172+ 323A              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 323A                              Colon_Def QUIT, "QUIT", is_normal
 173+ 323A             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 323A             >
 173+ 323A             >Dict_Ptr        defl    $
 173+ 323A             >
 173+ 323A             >//              ______________________________________________________________________
 173+ 323A             >//              Heap part
 173+ 323A             >
 173+ 323A             >
 173+ 323A             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E962             >
 173+ E962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E962             >Latest_Definition defl  Heap_Ptr
 173+ E962             >
 173+ E962             >                // dummy db directives used to calculate length of namec
 173+ E962 51 55 49 54 >                db      "QUIT"
 173+ E966             >len_NFA         defl    $ - temp_NFA
 173+ E966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E962             >
 173+ E962 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E963 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E967             >                org     $-1                 // alter last byte of Name just above to set
 173+ E966 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E967             >
 173+ E967 5C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E969             >Prev_Ptr        defl    Heap_Ptr
 173+ E969             >
 173+ E969             >mirror_Ptr      defl    $
 173+ E969             >
 173+ E969 3C 32       >                dw      Dict_Ptr + 2        // xt
 173+ E96B             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96B             >
 173+ E96B             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96B             >
 173+ E96B             >//              ______________________________________________________________________
 173+ E96B             >//              Dictionary part
 173+ E96B             >
 173+ E96B             >                org     Dict_Ptr
 173+ 323A             >
 173+ 323A 69 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 323C             >
 173+ 323C             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 323C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 323F             >
 173+ 323F             >
 173+ 323F             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 323F             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 323F             >
 173+ 323F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 323F
 175+ 323F 58 28 54 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 3243 A6 23 C8 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 3247 4B 27 58 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 324B 5E 26
 178+ 324D 4B 27 EC 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3251 5E 26
 179+ 3253 3C 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 3255                                                              // begin
 181+ 3255              Quit_Begin:
 182+ 3255 AA 27 54 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 3259 07 25
 183+ 325B 4D 22                        dw      CR                      //      cr
 184+ 325D 2B 2D                        dw      QUERY                   //      query
 185+ 325F              Next_Breakpoint_1:
 186+ 325F 9B 31                        dw      INTERPRET               //      interpret
 187+ 3261 16 28 54 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 3265 31 25
 188+ 3267                                                              //      if
 189+ 3267 8F 20                        dw      ZBRANCH
 190+ 3269 07 00                        dw      Quit_Endif - $
 191+ 326B D9 2D                        dw          C_DOT_QUOTE
 192+ 326D 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 3270              Quit_Endif:                                     //      else
 194+ 3270                                                              // again
 195+ 3270 82 20                        dw      BRANCH
 196+ 3272 E3 FF                        dw      Quit_Begin - $
 197+ 3274 0C 25                        dw      EXIT                    // ;
 198+ 3276
 199+ 3276              //  ______________________________________________________________________
 200+ 3276              //
 201+ 3276              // abort        --
 202+ 3276                              Colon_Def ABORT, "ABORT", is_normal
 202+ 3276             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 3276             >
 202+ 3276             >Dict_Ptr        defl    $
 202+ 3276             >
 202+ 3276             >//              ______________________________________________________________________
 202+ 3276             >//              Heap part
 202+ 3276             >
 202+ 3276             >
 202+ 3276             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96B             >
 202+ E96B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96B             >Latest_Definition defl  Heap_Ptr
 202+ E96B             >
 202+ E96B             >                // dummy db directives used to calculate length of namec
 202+ E96B 41 42 4F 52 >                db      "ABORT"
 202+ E96F 54          >
 202+ E970             >len_NFA         defl    $ - temp_NFA
 202+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96B             >
 202+ E96B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96C 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E970 54          >
 202+ E971             >                org     $-1                 // alter last byte of Name just above to set
 202+ E970 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E971             >
 202+ E971 62 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E973             >Prev_Ptr        defl    Heap_Ptr
 202+ E973             >
 202+ E973             >mirror_Ptr      defl    $
 202+ E973             >
 202+ E973 78 32       >                dw      Dict_Ptr + 2        // xt
 202+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E975             >
 202+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E975             >
 202+ E975             >//              ______________________________________________________________________
 202+ E975             >//              Dictionary part
 202+ E975             >
 202+ E975             >                org     Dict_Ptr
 202+ 3276             >
 202+ 3276 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 3278             >
 202+ 3278             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 3278 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 327B             >
 202+ 327B             >
 202+ 327B             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 327B             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 327B             >
 202+ 327B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 327B A4 27 54 26                  dw      S0, FETCH               // s0 @
 204+ 327F 6E 27                        dw      BL                      // bl
 205+ 3281 BF 25 5E 26                  dw      OVER, STORE             // over !
 206+ 3285 FC 24                        dw      SPSTORE                 // sp!
 207+ 3287 85 2B                        dw      DECIMAL                 // decimal
 208+ 3289 11 32                        dw      FORTH                   // [compile] forth
 209+ 328B 1E 32                        dw      DEFINITIONS             // definitions
 210+ 328D
 211+ 328D 3C 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 328F AA 27 54 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 3293 07 25
 213+ 3295
 214+ 3295              Autoexec_Ptr:
 215+ 3295 D9 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 3297 3C 32                        dw      QUIT                   // quit
 217+ 3299 0C 25                        dw      EXIT                    // ;
 218+ 329B
 219+ 329B              //  ______________________________________________________________________
 220+ 329B              //
 221+ 329B              // warm         --
 222+ 329B                              Colon_Def WARM, "WARM", is_normal
 222+ 329B             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 329B             >
 222+ 329B             >Dict_Ptr        defl    $
 222+ 329B             >
 222+ 329B             >//              ______________________________________________________________________
 222+ 329B             >//              Heap part
 222+ 329B             >
 222+ 329B             >
 222+ 329B             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E975             >
 222+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E975             >Latest_Definition defl  Heap_Ptr
 222+ E975             >
 222+ E975             >                // dummy db directives used to calculate length of namec
 222+ E975 57 41 52 4D >                db      "WARM"
 222+ E979             >len_NFA         defl    $ - temp_NFA
 222+ E979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E975             >
 222+ E975 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E976 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E97A             >                org     $-1                 // alter last byte of Name just above to set
 222+ E979 CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E97A             >
 222+ E97A 6B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E97C             >Prev_Ptr        defl    Heap_Ptr
 222+ E97C             >
 222+ E97C             >mirror_Ptr      defl    $
 222+ E97C             >
 222+ E97C 9D 32       >                dw      Dict_Ptr + 2        // xt
 222+ E97E             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E97E             >
 222+ E97E             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E97E             >
 222+ E97E             >//              ______________________________________________________________________
 222+ E97E             >//              Dictionary part
 222+ E97E             >
 222+ E97E             >                org     Dict_Ptr
 222+ 329B             >
 222+ 329B 7C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 329D             >
 222+ 329D             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 329D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 32A0             >
 222+ 32A0             >
 222+ 32A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 32A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 32A0             >
 222+ 32A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 32A0 67 36                        dw      BLK_INIT                // blk-init
 224+ 32A2 12 27                        dw      NOOP                    // splash
 225+ 32A4                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 32A4 78 32                        dw      ABORT                   // abort
 227+ 32A6 0C 25                        dw      EXIT                    // exit
 228+ 32A8
 229+ 32A8              //  ______________________________________________________________________
 230+ 32A8              //
 231+ 32A8              // cold         --
 232+ 32A8                              Colon_Def COLD, "COLD", is_normal
 232+ 32A8             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 32A8             >
 232+ 32A8             >Dict_Ptr        defl    $
 232+ 32A8             >
 232+ 32A8             >//              ______________________________________________________________________
 232+ 32A8             >//              Heap part
 232+ 32A8             >
 232+ 32A8             >
 232+ 32A8             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E97E             >
 232+ E97E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E97E             >Latest_Definition defl  Heap_Ptr
 232+ E97E             >
 232+ E97E             >                // dummy db directives used to calculate length of namec
 232+ E97E 43 4F 4C 44 >                db      "COLD"
 232+ E982             >len_NFA         defl    $ - temp_NFA
 232+ E982             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E97E             >
 232+ E97E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E97F 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E983             >                org     $-1                 // alter last byte of Name just above to set
 232+ E982 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E983             >
 232+ E983 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E985             >Prev_Ptr        defl    Heap_Ptr
 232+ E985             >
 232+ E985             >mirror_Ptr      defl    $
 232+ E985             >
 232+ E985 AA 32       >                dw      Dict_Ptr + 2        // xt
 232+ E987             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E987             >
 232+ E987             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E987             >
 232+ E987             >//              ______________________________________________________________________
 232+ E987             >//              Dictionary part
 232+ E987             >
 232+ E987             >                org     Dict_Ptr
 232+ 32A8             >
 232+ 32A8 85 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 32AA             >
 232+ 32AA             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 32AA CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 32AD             >
 232+ 32AD             >
 232+ 32AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 32AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 32AD             >
 232+ 32AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 32AD 12 27 12 27                  dw      NOOP, NOOP
 234+ 32B1 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 32B5 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 32B9 54 26                        dw      FETCH                   // @
 237+ 32BB 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 32BF 5E 25
 238+ 32C1 3D 20 16 00                  dw      LIT, 22                 // 22
 239+ 32C5 4D 24                        dw      CMOVE
 240+ 32C7 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 32CB 54 26                        dw      FETCH                   // @
 242+ 32CD 3D 20 18 32                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 32D1 5E 26                        dw      STORE                   // !
 244+ 32D3 4B 27 E6 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 32D7 5E 26
 245+ 32D9 D4 27 54 26                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 32DD E3 25
 246+ 32DF 40 28 5E 26                  dw      USED, STORE             // used !
 247+ 32E3 46 28 5E 26                  dw      PREV, STORE             // prev !
 248+ 32E7 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 32EB 52 28 5E 26
 249+ 32EF              //              dw      LIT, 8
 250+ 32EF              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 32EF 08 37                        dw      EMPTY_BUFFERS
 252+ 32F1 4B 27 EC 27                  dw      ZERO, BLK, STORE
 252+ 32F5 5E 26
 253+ 32F7 4B 27 58 28                  dw      ZERO, SOURCE_ID, STORE
 253+ 32FB 5E 26
 254+ 32FD
 255+ 32FD 9D 32        Warm_Start:     dw      WARM
 256+ 32FF AA 32        Cold_Start:     dw      COLD
 257+ 3301 0C 25                        dw      EXIT
 258+ 3303
 259+ 3303
 260+ 3303              //  ______________________________________________________________________
 261+ 3303
 262+ 3303              Tools_vForth_Directory
 263+ 3303 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 263+ 3307 6F 6F 6C 73
 263+ 330B 2F 76 46 6F
 263+ 330F 72 74 68 2F
 263+ 3313 FF
 264+ 3314 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 264+ 3318 6F 74 2F 76
 264+ 331C 66 6F 72 74
 264+ 3320 68 2E 62 69
 264+ 3324 6E 00
 265+ 3326
 266+ 3326              Saved_Speed:
 267+ 3326 00                           db      0
 268+ 3327 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 268+ 332B 06 07
 269+ 332D
 270+ 332D              Saved_Layer:
 271+ 332D 00                           db      0           // graphics current mode
 272+ 332E
 273+ 332E              //  ______________________________________________________________________
 274+ 332E              WarmRoutine:
 275+ 332E              ColdRoutine:
 276+ 332E              //  ______________________________________________________________________
 277+ 332E              // 0.
 278+ 332E D1                           pop     de                      // retrieve return to basic address
 279+ 332F ED 73 08 20                  ld      (SP_Basic), sp
 280+ 3333 31 00 40                     ld      sp, $4000               // safe area
 281+ 3336 D5                           push    de                      // save return to basic address
 282+ 3337 D9                           exx
 283+ 3338 E5                           push    hl                      // save Basic's h'l' return address
 284+ 3339 D9                           exx
 285+ 333A
 286+ 333A              //  ______________________________________________________________________
 287+ 333A              // 1.
 288+ 333A              // Accepts one parameter from Basic as the filename to load
 289+ 333A 7C                           ld      a, h
 290+ 333B B5                           or      l
 291+ 333C 28 15                        jr      z, Skip_Parameter
 292+ 333E
 293+ 333E 11 97 39                     ld      de, Param
 294+ 3341 01 00 00                     ld      bc, 0
 295+ 3344              Parameter_Loop:
 296+ 3344 7E                           ld      a, (hl)
 297+ 3345 FE 3A                        cp      ':'
 298+ 3347 28 08                        jr      z, End_Parameter
 299+ 3349 FE 0D                        cp      $0D
 300+ 334B 28 04                        jr      z, End_Parameter
 301+ 334D ED A0                        ldi
 302+ 334F 18 F3                        jr      Parameter_Loop
 303+ 3351              End_Parameter:
 304+ 3351                              // append 0x00
 305+ 3351 AF                           xor     a
 306+ 3352 12                           ld      (de), a
 307+ 3353              Skip_Parameter:
 308+ 3353
 309+ 3353              //  ______________________________________________________________________
 310+ 3353              // 2. prepare save-area address and hw register port
 311+ 3353 21 26 33                     ld      hl, Saved_Speed     // save-area
 312+ 3356              //              ld      bc, $243B               // hw-register port
 313+ 3356              //  ______________________________________________________________________
 314+ 3356              // 2.1
 315+ 3356              // ask / read speed and MMU status
 316+ 3356 3E 07                        ld      a ,$07                  // read current speed
 317+ 3358 CD 16 34                     call    Get_MMU_status
 318+ 335B 16 03                        ld      d, 3                    // set top speed
 319+ 335D B2                           or      d                       // reuse data just read
 320+ 335E ED 92 07                     nextreg 07, a
 321+ 3361
 322+ 3361 1E 06                        ld      e, 6                    // loop limit
 323+ 3363              MMU_read_loop:
 324+ 3363 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 325+ 3365 93                           sub     e
 326+ 3366 CD 16 34                     call    Get_MMU_status
 327+ 3369 1D                           dec     e
 328+ 336A 20 F7                        jr      nz, MMU_read_loop
 329+ 336C              //  ______________________________________________________________________
 330+ 336C              // 2.2
 331+ 336C              // save current LAYER status
 332+ 336C
 333+ 336C 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 334+ 336F 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 335+ 3371 3E 00                        ld      a, 0        // query current status
 336+ 3373 CF                           rst     8
 337+ 3374 94                           db      $94 // carry flag set on success
 338+ 3375
 339+ 3375 32 2D 33                     ld      (Saved_Layer), a     // store after MMUs
 340+ 3378              //  ______________________________________________________________________
 341+ 3378              // 2.3
 342+ 3378 21 00 60                     ld      hl, $6000
 343+ 337B 11 00 40                     ld      de, $4000
 344+ 337E CD D0 33                     call    Backup_Restore_MMU
 345+ 3381
 346+ 3381              //  ______________________________________________________________________
 347+ 3381              // 5.
 348+ 3381              // set LAYER 1,2
 349+ 3381 D9                           exx
 350+ 3382 01 02 01                     ld      bc, $0102
 351+ 3385 CD 1C 34                     call    Set_Layer
 352+ 3388
 353+ 3388              //  ______________________________________________________________________
 354+ 3388              // 6.
 355+ 3388              // Set current drive/directory
 356+ 3388
 357+ 3388              //              ld      a, $00
 358+ 3388              //              rst     8
 359+ 3388              //              defb    $89     ; m_getsetdrv
 360+ 3388              //              rst     8
 361+ 3388              //              defb    $89     ; m_getsetdrv
 362+ 3388
 363+ 3388 CD B6 33                     call    Set_Cur_Dir
 364+ 338B
 365+ 338B              //  ______________________________________________________________________
 366+ 338B              // 2.2
 367+ 338B              // Reserve pages from OS.
 368+ 338B
 369+ 338B CD F1 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 370+ 338E CD E0 33                     call    Set_forth_MMU
 371+ 3391
 372+ 3391              //  ______________________________________________________________________
 373+ 3391              // 7.
 374+ 3391              // Get current handle via M_GETHANDLE and load ram
 375+ 3391 CF                           rst     8
 376+ 3392 8D                           DEFB    $8d             ; M_GETHANDLE
 377+ 3393
 378+ 3393              //  ______________________________________________________________________
 379+ 3393              // 8.
 380+ 3393              // set MMU3-MMU7 to $20-$1C abd load ram7.bin
 381+ 3393
 382+ 3393              //              ld      hl, Filename_Ram7   ; because we are within a dot command
 383+ 3393              //              ld      b, $01          ; $01 request read access
 384+ 3393              //              ld      a, $2A          ; '*'
 385+ 3393              //              rst     8
 386+ 3393              //              DEFB    $9A             ; f_open
 387+ 3393
 388+ 3393 F5                           push    af
 389+ 3394 21 00 E0                     ld      hl, $E000
 390+ 3397 01 FF 1F                     ld      bc, $1FFF
 391+ 339A CF                           rst     8
 392+ 339B 9D                           DEFB    $9D             ; f_read
 393+ 339C F1                           pop     af
 394+ 339D CF                           rst     8
 395+ 339E 9B                           DEFB    $9B             ; f_close
 396+ 339F
 397+ 339F              //  ______________________________________________________________________
 398+ 339F              // 9.
 399+ 339F              // pre-set the four main 16-bit registers
 400+ 339F ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 401+ 33A3 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 402+ 33A7 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 403+ 33AB 01 FF 32                     ld      bc, Cold_Start          // Instruction Pointer
 404+ 33AE
 405+ 33AE                              // never stop scrolling: print chr$26;chr$0
 406+ 33AE 3E 1A                        ld      a, 26
 407+ 33B0 D7                           rst     $10
 408+ 33B1 AF                           xor     a
 409+ 33B2 D7                           rst     $10
 410+ 33B3
 411+ 33B3 FB                           ei
 412+ 33B4
 413+ 33B4                          //  push    ix
 414+ 33B4                          //  pop     hl
 415+ 33B4                          //  rst     $20
 416+ 33B4                              next
 416+ 33B4 DD E9       >                jp      (ix)
 417+ 33B6
 418+ 33B6
 419+ 33B6              //  ______________________________________________________________________
 420+ 33B6              // Routine
 421+ 33B6              // set current directory  /tools/vForth
 422+ 33B6              Set_Cur_Dir:
 423+ 33B6 21 03 33                     ld      hl, Tools_vForth_Directory
 424+ 33B9 11 00 40                     ld      de, $4000 // use some temporary safe zone
 425+ 33BC 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 426+ 33BF ED B0                        ldir
 427+ 33C1 D9                           exx
 428+ 33C2 21 00 40                     ld      hl, $4000
 429+ 33C5                          //  ld      hl, Tools_vForth_Directory
 430+ 33C5 D9                           exx
 431+ 33C6 11 B1 01                     ld      de, $01B1
 432+ 33C9 0E 07                        ld      c, 7
 433+ 33CB 3E 00                        ld      a, 0
 434+ 33CD CF                           rst     8
 435+ 33CE 94                           db      $94 // carry flag set on success !
 436+ 33CF
 437+ 33CF C9                           ret
 438+ 33D0
 439+ 33D0              //  ______________________________________________________________________
 440+ 33D0              // Routine, safe backup
 441+ 33D0              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 442+ 33D0              Backup_Restore_MMU:
 443+ 33D0 ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $6000
 444+ 33D4 01 00 20                     ld      bc, $2000
 445+ 33D7 ED B0                        ldir
 446+ 33D9 3A 27 33                     ld      a, (Saved_MMU)
 447+ 33DC ED 92 52                     nextreg $52, a
 448+ 33DF C9                           ret
 449+ 33E0
 450+ 33E0              //  ______________________________________________________________________
 451+ 33E0              // Routine
 452+ 33E0              // set MMU7 to $20 and laod ram7.bin
 453+ 33E0              Set_forth_MMU:
 454+ 33E0                      ////    nextreg $53, $28         ;   MMU3  = 24576
 455+ 33E0 ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 456+ 33E4 ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 457+ 33E8 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 458+ 33EC ED 91 57 20                  nextreg $57, $20         ;   MMU7
 459+ 33F0 C9                           ret
 460+ 33F1
 461+ 33F1              //  ______________________________________________________________________
 462+ 33F1              // Routine:
 463+ 33F1              // reserve MMU pages
 464+ 33F1              Restore_Reserve_MMU:
 465+ 33F1 2E 1D                        ld      l, $1D      // first page
 466+ 33F3 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 467+ 33F5              Reserve_MMU_Loop:
 468+ 33F5 7D                           ld      a, l            // pass page through a
 469+ 33F6 D9                           exx
 470+ 33F7                               // parameters:
 471+ 33F7              Deallocate_MMU:
 472+ 33F7 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 473+ 33FA 5F                            ld      e, a           // E' is bank-id
 474+ 33FB D9                           exx
 475+ 33FC E5                           push    hl
 476+ 33FD
 477+ 33FD 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 478+ 33FF 3E 01                        ld      a, 1
 479+ 3401 11 BD 01                     ld      de, $01BD  // IDE_BANK
 480+ 3404 CF                           rst     8
 481+ 3405 94                           db      $94     // M_P3DOS
 482+ 3406
 483+ 3406 E1                           pop     hl
 484+ 3407 2C                           inc     l       // next page number
 485+ 3408 25                           dec     h       // decrease counter.
 486+ 3409 20 EA                        jr      nz, Reserve_MMU_Loop
 487+ 340B C9                           ret
 488+ 340C
 489+ 340C              //  ______________________________________________________________________
 490+ 340C              // Routine
 491+ 340C              // Input:  bc=$243B, a=reg, hl=array
 492+ 340C              // Operation: set  hardware register  a  to value at  (hl)
 493+ 340C              // Output: bc=$243B, a=a+1, hl=hl+1
 494+ 340C              Put_MMU_status:
 495+ 340C 56                           ld      d, (hl)
 496+ 340D ED 79                        out     (c), a
 497+ 340F 04                           inc     b        // 253Bh
 498+ 3410 ED 51                        out     (c), d
 499+ 3412 05                           dec     b        // 243Bh
 500+ 3413 23                           inc     hl
 501+ 3414 3C                           inc     a
 502+ 3415 C9                           ret
 503+ 3416
 504+ 3416              //  ______________________________________________________________________
 505+ 3416              // Routine
 506+ 3416              // Input:  bc=$243B, a=reg, hl=array
 507+ 3416              // Operation: get current value of hardware register  a  and store at (hl)
 508+ 3416              // Output: bc=$243B, a=a+1, hl=hl+1
 509+ 3416              Get_MMU_status:
 510+ 3416              //              out     (c), a
 511+ 3416              //              inc     b        // 253Bh
 512+ 3416              //              in      d ,(c)
 513+ 3416              //              dec     b        // 243Bh
 514+ 3416 CD 3B 21                     call    NEXTREG_read
 515+ 3419 77                           ld      (hl), a
 516+ 341A 23                           inc     hl
 517+ 341B C9                           ret
 518+ 341C
 519+ 341C              //  ______________________________________________________________________
 520+ 341C              // Routine
 521+ 341C              // set LAYER B,C
 522+ 341C              // Input: bc=$0102 for Layer 1,2
 523+ 341C              Set_Layer:
 524+ 341C D9                           exx
 525+ 341D 11 D5 01                     ld      de, $01D5
 526+ 3420 0E 07                        ld      c, 7
 527+ 3422 3E 01                        ld      a, 1
 528+ 3424 CF                           rst     8
 529+ 3425 94                           db      $94
 530+ 3426 C9                           ret
 531+ 3427
 532+ 3427              //  ______________________________________________________________________
 533+ 3427              //
 534+ 3427              // basic        --
 535+ 3427                              New_Def BASIC, "BASIC", is_code, is_normal
 535+ 3427             >
 535+ 3427             >Dict_Ptr        defl    $
 535+ 3427             >
 535+ 3427             >//              ______________________________________________________________________
 535+ 3427             >//              Heap part
 535+ 3427             >
 535+ 3427             >
 535+ 3427             >                org     (Heap_Ptr & $1FFF) + $E000
 535+ E987             >
 535+ E987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 535+ E987             >Latest_Definition defl  Heap_Ptr
 535+ E987             >
 535+ E987             >                // dummy db directives used to calculate length of namec
 535+ E987 42 41 53 49 >                db      "BASIC"
 535+ E98B 43          >
 535+ E98C             >len_NFA         defl    $ - temp_NFA
 535+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 535+ E987             >
 535+ E987 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 535+ E988 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 535+ E98C 43          >
 535+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 535+ E98C C3          >                db      {b $} | END_BIT     // msb as name end
 535+ E98D             >
 535+ E98D 7E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 535+ E98F             >Prev_Ptr        defl    Heap_Ptr
 535+ E98F             >
 535+ E98F             >mirror_Ptr      defl    $
 535+ E98F             >
 535+ E98F 29 34       >                dw      Dict_Ptr + 2        // xt
 535+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 535+ E991             >
 535+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 535+ E991             >
 535+ E991             >//              ______________________________________________________________________
 535+ E991             >//              Dictionary part
 535+ E991             >
 535+ E991             >                org     Dict_Ptr
 535+ 3427             >
 535+ 3427 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 535+ 3429             >
 535+ 3429             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 535+ 3429 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 535+ 3429 ~           >
 535+ 3429 ~           >
 535+ 3429             >                endif           ; ok        // for other definitions it "points" the correct handler
 535+ 3429             >                // Use of "; ok" to suppress "warning[fwdref]"
 535+ 3429             >
 535+ 3429             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 536+ 3429
 537+ 3429              // using dot-command, no more needs to return bc
 538+ 3429              //              pop     bc                      // return  TOS  value to Basic
 539+ 3429
 540+ 3429 F3                           di
 541+ 342A
 542+ 342A 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 543+ 342D
 544+ 342D                              // address
 545+ 342D 21 26 33                     ld      hl, Saved_Speed
 546+ 3430 01 3B 24                     ld      bc , $243B
 547+ 3433
 548+ 3433                              // set speed
 549+ 3433 3E 07                        ld      a, $07
 550+ 3435 CD 0C 34                     call    Put_MMU_status
 551+ 3438
 552+ 3438                        //    inc     hl
 553+ 3438                        //    inc     hl
 554+ 3438                              // set MMU pages
 555+ 3438 3E 52                        ld      a, $52
 556+ 343A 1E 06                        ld      e, 6
 557+ 343C              MMU_put_loop:
 558+ 343C CD 0C 34                     call    Put_MMU_status
 559+ 343F 1D                           dec     e
 560+ 3440 20 FA                        jr      nz, MMU_put_loop
 561+ 3442              //  ______________________________________________________________________
 562+ 3442                              // restore layer ide mode
 563+ 3442 7E                           ld      a, (hl)
 564+ 3443
 565+ 3443 D9                           exx
 566+ 3444 47                           ld      b, a
 567+ 3445 0F                           rrca
 568+ 3446 0F                           rrca
 569+ 3447 E6 03                        and     3
 570+ 3449 4F                           ld      c, a
 571+ 344A 78                           ld      a, b
 572+ 344B E6 03                        and     3
 573+ 344D 47                           ld      b, a
 574+ 344E CD 1C 34                     call    Set_Layer
 575+ 3451
 576+ 3451              //  ______________________________________________________________________
 577+ 3451              //
 578+ 3451 21 00 40                     ld      hl, $4000
 579+ 3454 11 00 60                     ld      de, $6000
 580+ 3457 CD D0 33                     call    Backup_Restore_MMU
 581+ 345A              //  ______________________________________________________________________
 582+ 345A              //
 583+ 345A                              // free 8k pages
 584+ 345A 3E 03                        ld      a, 3
 585+ 345C 32 F8 33                     ld      (Deallocate_MMU+1), a
 586+ 345F CD F1 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 587+ 3462              //  ______________________________________________________________________
 588+ 3462
 589+ 3462                              // restore basic pointers
 590+ 3462 E1                           pop     hl                      // restore h'l'
 591+ 3463 D9                           exx
 592+ 3464 E1                           pop     hl
 593+ 3465 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 594+ 3469 E5                           push    hl
 595+ 346A FB                           ei
 596+ 346B              Exit_with_error:
 597+ 346B AF                           xor     a
 598+ 346C 76                           halt
 599+ 346D C9                           ret                             // to where USR Basic was left
 600+ 346E
 601+ 346E              //  ______________________________________________________________________
 602+ 346E              //
 603+ 346E              // +-           n1 n2 -- n3
 604+ 346E              // leaves n1 with the sign of n2 as n3.
 605+ 346E                              Colon_Def PLUS_MINUS, "+-", is_normal
 605+ 346E             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 605+ 346E             >
 605+ 346E             >Dict_Ptr        defl    $
 605+ 346E             >
 605+ 346E             >//              ______________________________________________________________________
 605+ 346E             >//              Heap part
 605+ 346E             >
 605+ 346E             >
 605+ 346E             >                org     (Heap_Ptr & $1FFF) + $E000
 605+ E991             >
 605+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 605+ E991             >Latest_Definition defl  Heap_Ptr
 605+ E991             >
 605+ E991             >                // dummy db directives used to calculate length of namec
 605+ E991 2B 2D       >                db      "+-"
 605+ E993             >len_NFA         defl    $ - temp_NFA
 605+ E993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 605+ E991             >
 605+ E991 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 605+ E992 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 605+ E994             >                org     $-1                 // alter last byte of Name just above to set
 605+ E993 AD          >                db      {b $} | END_BIT     // msb as name end
 605+ E994             >
 605+ E994 87 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 605+ E996             >Prev_Ptr        defl    Heap_Ptr
 605+ E996             >
 605+ E996             >mirror_Ptr      defl    $
 605+ E996             >
 605+ E996 70 34       >                dw      Dict_Ptr + 2        // xt
 605+ E998             >Heap_Ptr        defl    $ - $E000           // save current HP
 605+ E998             >
 605+ E998             >Current_HP      defl  $ - $E000             // used to set HP once!
 605+ E998             >
 605+ E998             >//              ______________________________________________________________________
 605+ E998             >//              Dictionary part
 605+ E998             >
 605+ E998             >                org     Dict_Ptr
 605+ 346E             >
 605+ 346E 96 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 605+ 3470             >
 605+ 3470             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 605+ 3470 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 605+ 3473             >
 605+ 3473             >
 605+ 3473             >                endif           ; ok        // for other definitions it "points" the correct handler
 605+ 3473             >                // Use of "; ok" to suppress "warning[fwdref]"
 605+ 3473             >
 605+ 3473             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 606+ 3473 43 25                        dw      ZLESS                   // 0<
 607+ 3475                                                              // if
 608+ 3475 8F 20                        dw      ZBRANCH
 609+ 3477 04 00                        dw      Plus_Minus_Endif - $
 610+ 3479 9E 25                        dw          MINUS               //      minus
 611+ 347B              Plus_Minus_Endif:                               // endif
 612+ 347B 0C 25                        dw      EXIT                    // ;
 613+ 347D
 614+ 347D              //  ______________________________________________________________________
 615+ 347D              //
 616+ 347D              // d+-          d1 n -- d2
 617+ 347D              // leaves d1 with the sign of n as d2.
 618+ 347D                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 618+ 347D             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 618+ 347D             >
 618+ 347D             >Dict_Ptr        defl    $
 618+ 347D             >
 618+ 347D             >//              ______________________________________________________________________
 618+ 347D             >//              Heap part
 618+ 347D             >
 618+ 347D             >
 618+ 347D             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E998             >
 618+ E998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E998             >Latest_Definition defl  Heap_Ptr
 618+ E998             >
 618+ E998             >                // dummy db directives used to calculate length of namec
 618+ E998 44 2B 2D    >                db      "D+-"
 618+ E99B             >len_NFA         defl    $ - temp_NFA
 618+ E99B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E998             >
 618+ E998 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E999 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 618+ E99C             >                org     $-1                 // alter last byte of Name just above to set
 618+ E99B AD          >                db      {b $} | END_BIT     // msb as name end
 618+ E99C             >
 618+ E99C 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E99E             >Prev_Ptr        defl    Heap_Ptr
 618+ E99E             >
 618+ E99E             >mirror_Ptr      defl    $
 618+ E99E             >
 618+ E99E 7F 34       >                dw      Dict_Ptr + 2        // xt
 618+ E9A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E9A0             >
 618+ E9A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E9A0             >
 618+ E9A0             >//              ______________________________________________________________________
 618+ E9A0             >//              Dictionary part
 618+ E9A0             >
 618+ E9A0             >                org     Dict_Ptr
 618+ 347D             >
 618+ 347D 9E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 347F             >
 618+ 347F             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 347F CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3482             >
 618+ 3482             >
 618+ 3482             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3482             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3482             >
 618+ 3482             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3482 43 25                        dw      ZLESS                   // 0<
 620+ 3484                                                              // if
 621+ 3484 8F 20                        dw      ZBRANCH
 622+ 3486 04 00                        dw      DPlus_Minus_Endif - $
 623+ 3488 AC 25                        dw          DMINUS              //      dminus
 624+ 348A              DPlus_Minus_Endif:                              // endif
 625+ 348A 0C 25                        dw      EXIT                    // ;
 626+ 348C
 627+ 348C              //  ______________________________________________________________________
 628+ 348C              //
 629+ 348C              // abs          n1 -- n2
 630+ 348C                              Colon_Def ABS_OP, "ABS", is_normal
 630+ 348C             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 630+ 348C             >
 630+ 348C             >Dict_Ptr        defl    $
 630+ 348C             >
 630+ 348C             >//              ______________________________________________________________________
 630+ 348C             >//              Heap part
 630+ 348C             >
 630+ 348C             >
 630+ 348C             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ E9A0             >
 630+ E9A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ E9A0             >Latest_Definition defl  Heap_Ptr
 630+ E9A0             >
 630+ E9A0             >                // dummy db directives used to calculate length of namec
 630+ E9A0 41 42 53    >                db      "ABS"
 630+ E9A3             >len_NFA         defl    $ - temp_NFA
 630+ E9A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ E9A0             >
 630+ E9A0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ E9A1 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 630+ E9A4             >                org     $-1                 // alter last byte of Name just above to set
 630+ E9A3 D3          >                db      {b $} | END_BIT     // msb as name end
 630+ E9A4             >
 630+ E9A4 98 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ E9A6             >Prev_Ptr        defl    Heap_Ptr
 630+ E9A6             >
 630+ E9A6             >mirror_Ptr      defl    $
 630+ E9A6             >
 630+ E9A6 8E 34       >                dw      Dict_Ptr + 2        // xt
 630+ E9A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ E9A8             >
 630+ E9A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ E9A8             >
 630+ E9A8             >//              ______________________________________________________________________
 630+ E9A8             >//              Dictionary part
 630+ E9A8             >
 630+ E9A8             >                org     Dict_Ptr
 630+ 348C             >
 630+ 348C A6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 348E             >
 630+ 348E             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 348E CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3491             >
 630+ 3491             >
 630+ 3491             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3491             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3491             >
 630+ 3491             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3491 E3 25                        dw      DUP                     // dup
 632+ 3493 70 34                        dw      PLUS_MINUS              // +-
 633+ 3495 0C 25                        dw      EXIT                    // ;
 634+ 3497
 635+ 3497              //  ______________________________________________________________________
 636+ 3497              //
 637+ 3497              // dabs         d1 -- d2
 638+ 3497                              Colon_Def DABS, "DABS", is_normal
 638+ 3497             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 638+ 3497             >
 638+ 3497             >Dict_Ptr        defl    $
 638+ 3497             >
 638+ 3497             >//              ______________________________________________________________________
 638+ 3497             >//              Heap part
 638+ 3497             >
 638+ 3497             >
 638+ 3497             >                org     (Heap_Ptr & $1FFF) + $E000
 638+ E9A8             >
 638+ E9A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ E9A8             >Latest_Definition defl  Heap_Ptr
 638+ E9A8             >
 638+ E9A8             >                // dummy db directives used to calculate length of namec
 638+ E9A8 44 41 42 53 >                db      "DABS"
 638+ E9AC             >len_NFA         defl    $ - temp_NFA
 638+ E9AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ E9A8             >
 638+ E9A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ E9A9 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 638+ E9AD             >                org     $-1                 // alter last byte of Name just above to set
 638+ E9AC D3          >                db      {b $} | END_BIT     // msb as name end
 638+ E9AD             >
 638+ E9AD A0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 638+ E9AF             >Prev_Ptr        defl    Heap_Ptr
 638+ E9AF             >
 638+ E9AF             >mirror_Ptr      defl    $
 638+ E9AF             >
 638+ E9AF 99 34       >                dw      Dict_Ptr + 2        // xt
 638+ E9B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 638+ E9B1             >
 638+ E9B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 638+ E9B1             >
 638+ E9B1             >//              ______________________________________________________________________
 638+ E9B1             >//              Dictionary part
 638+ E9B1             >
 638+ E9B1             >                org     Dict_Ptr
 638+ 3497             >
 638+ 3497 AF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 638+ 3499             >
 638+ 3499             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 3499 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 349C             >
 638+ 349C             >
 638+ 349C             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 349C             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 349C             >
 638+ 349C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 349C E3 25                        dw      DUP                     // dup
 640+ 349E 7F 34                        dw      DPLUS_MINUS             // d+-
 641+ 34A0 0C 25                        dw      EXIT                    // ;
 642+ 34A2
 643+ 34A2              //  ______________________________________________________________________
 644+ 34A2              //
 645+ 34A2              // m*           n1 n2 -- d
 646+ 34A2              // multiply two integer giving a double
 647+ 34A2                              Colon_Def MMUL, "M*", is_normal
 647+ 34A2             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 647+ 34A2             >
 647+ 34A2             >Dict_Ptr        defl    $
 647+ 34A2             >
 647+ 34A2             >//              ______________________________________________________________________
 647+ 34A2             >//              Heap part
 647+ 34A2             >
 647+ 34A2             >
 647+ 34A2             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ E9B1             >
 647+ E9B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ E9B1             >Latest_Definition defl  Heap_Ptr
 647+ E9B1             >
 647+ E9B1             >                // dummy db directives used to calculate length of namec
 647+ E9B1 4D 2A       >                db      "M*"
 647+ E9B3             >len_NFA         defl    $ - temp_NFA
 647+ E9B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ E9B1             >
 647+ E9B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ E9B2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 647+ E9B4             >                org     $-1                 // alter last byte of Name just above to set
 647+ E9B3 AA          >                db      {b $} | END_BIT     // msb as name end
 647+ E9B4             >
 647+ E9B4 A8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ E9B6             >Prev_Ptr        defl    Heap_Ptr
 647+ E9B6             >
 647+ E9B6             >mirror_Ptr      defl    $
 647+ E9B6             >
 647+ E9B6 A4 34       >                dw      Dict_Ptr + 2        // xt
 647+ E9B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ E9B8             >
 647+ E9B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ E9B8             >
 647+ E9B8             >//              ______________________________________________________________________
 647+ E9B8             >//              Dictionary part
 647+ E9B8             >
 647+ E9B8             >                org     Dict_Ptr
 647+ 34A2             >
 647+ 34A2 B6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 34A4             >
 647+ 34A4             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 34A4 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 34A7             >
 647+ 34A7             >
 647+ 34A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 34A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 34A7             >
 647+ 34A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 34A7 32 26 E7 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 648+ 34AB 16 25
 649+ 34AD 8E 34 DC 25                  dw      ABS_OP, SWAP            // abs swap
 650+ 34B1 8E 34 71 24                  dw      ABS_OP, UM_MUL          // abs um*
 651+ 34B5 21 25 7F 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 652+ 34B9 0C 25                        dw      EXIT                    // ;
 653+ 34BB
 654+ 34BB              //  ______________________________________________________________________
 655+ 34BB              //
 656+ 34BB              // sm/rem       d n -- q r
 657+ 34BB              // Symmetric division: divides a double into n giving quotient q and remainder r
 658+ 34BB              // the remainder has the sign of d.
 659+ 34BB                              Colon_Def SMDIVM, "SM/REM", is_normal
 659+ 34BB             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 659+ 34BB             >
 659+ 34BB             >Dict_Ptr        defl    $
 659+ 34BB             >
 659+ 34BB             >//              ______________________________________________________________________
 659+ 34BB             >//              Heap part
 659+ 34BB             >
 659+ 34BB             >
 659+ 34BB             >                org     (Heap_Ptr & $1FFF) + $E000
 659+ E9B8             >
 659+ E9B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 659+ E9B8             >Latest_Definition defl  Heap_Ptr
 659+ E9B8             >
 659+ E9B8             >                // dummy db directives used to calculate length of namec
 659+ E9B8 53 4D 2F 52 >                db      "SM/REM"
 659+ E9BC 45 4D       >
 659+ E9BE             >len_NFA         defl    $ - temp_NFA
 659+ E9BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 659+ E9B8             >
 659+ E9B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 659+ E9B9 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 659+ E9BD 45 4D       >
 659+ E9BF             >                org     $-1                 // alter last byte of Name just above to set
 659+ E9BE CD          >                db      {b $} | END_BIT     // msb as name end
 659+ E9BF             >
 659+ E9BF B1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 659+ E9C1             >Prev_Ptr        defl    Heap_Ptr
 659+ E9C1             >
 659+ E9C1             >mirror_Ptr      defl    $
 659+ E9C1             >
 659+ E9C1 BD 34       >                dw      Dict_Ptr + 2        // xt
 659+ E9C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 659+ E9C3             >
 659+ E9C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 659+ E9C3             >
 659+ E9C3             >//              ______________________________________________________________________
 659+ E9C3             >//              Dictionary part
 659+ E9C3             >
 659+ E9C3             >                org     Dict_Ptr
 659+ 34BB             >
 659+ 34BB C1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 659+ 34BD             >
 659+ 34BD             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 659+ 34BD CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 659+ 34C0             >
 659+ 34C0             >
 659+ 34C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 659+ 34C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 659+ 34C0             >
 659+ 34C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 660+ 34C0 BF 25 16 25                  dw      OVER, TO_R, TO_R        // over >r >r
 660+ 34C4 16 25
 661+ 34C6 99 34 2C 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 661+ 34CA 8E 34
 662+ 34CC 99 24                        dw      UMDIVMOD                // um/mod
 663+ 34CE 21 25                        dw      R_TO                    // r>
 664+ 34D0 2C 25 E7 24                  dw      R_OP, XOR_OP            // r xor
 665+ 34D4 70 34 DC 25                  dw      PLUS_MINUS, SWAP        // +- swap
 666+ 34D8 21 25                        dw      R_TO                    // r>
 667+ 34DA 70 34 DC 25                  dw      PLUS_MINUS, SWAP        // +- swap
 668+ 34DE 0C 25                        dw      EXIT                    // ;
 669+ 34E0
 670+ 34E0              //  ______________________________________________________________________
 671+ 34E0              //
 672+ 34E0              // fm/mod       d n -- q r
 673+ 34E0              // Floored division: divides a double into n giving quotient q and remainder r
 674+ 34E0              // the remainder has the sign of d.
 675+ 34E0                              Colon_Def FMDIVM, "FM/MOD", is_normal
 675+ 34E0             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 675+ 34E0             >
 675+ 34E0             >Dict_Ptr        defl    $
 675+ 34E0             >
 675+ 34E0             >//              ______________________________________________________________________
 675+ 34E0             >//              Heap part
 675+ 34E0             >
 675+ 34E0             >
 675+ 34E0             >                org     (Heap_Ptr & $1FFF) + $E000
 675+ E9C3             >
 675+ E9C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 675+ E9C3             >Latest_Definition defl  Heap_Ptr
 675+ E9C3             >
 675+ E9C3             >                // dummy db directives used to calculate length of namec
 675+ E9C3 46 4D 2F 4D >                db      "FM/MOD"
 675+ E9C7 4F 44       >
 675+ E9C9             >len_NFA         defl    $ - temp_NFA
 675+ E9C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 675+ E9C3             >
 675+ E9C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 675+ E9C4 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 675+ E9C8 4F 44       >
 675+ E9CA             >                org     $-1                 // alter last byte of Name just above to set
 675+ E9C9 C4          >                db      {b $} | END_BIT     // msb as name end
 675+ E9CA             >
 675+ E9CA B8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 675+ E9CC             >Prev_Ptr        defl    Heap_Ptr
 675+ E9CC             >
 675+ E9CC             >mirror_Ptr      defl    $
 675+ E9CC             >
 675+ E9CC E2 34       >                dw      Dict_Ptr + 2        // xt
 675+ E9CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 675+ E9CE             >
 675+ E9CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 675+ E9CE             >
 675+ E9CE             >//              ______________________________________________________________________
 675+ E9CE             >//              Dictionary part
 675+ E9CE             >
 675+ E9CE             >                org     Dict_Ptr
 675+ 34E0             >
 675+ 34E0 CC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 675+ 34E2             >
 675+ 34E2             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 675+ 34E2 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 675+ 34E5             >
 675+ 34E5             >
 675+ 34E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 675+ 34E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 675+ 34E5             >
 675+ 34E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 676+ 34E5 E3 25 16 25                  dw      DUP, TO_R               // dup >r
 677+ 34E9 BD 34                        dw      SMDIVM
 678+ 34EB BF 25 E3 25                  dw      OVER, DUP
 679+ 34EF 31 25 31 25                  dw      ZEQUAL, ZEQUAL
 680+ 34F3 DC 25 43 25                  dw      SWAP, ZLESS
 681+ 34F7 2C 25 43 25                  dw      R_OP, ZLESS
 682+ 34FB E7 24 CC 24                  dw      XOR_OP, AND_OP
 683+ 34FF 8F 20                        dw      ZBRANCH
 684+ 3501 10 00                        dw      Fm_Mod_Else - $
 685+ 3503 7E 25                        dw          ONE_SUBTRACT
 686+ 3505 DC 25 21 25                  dw          SWAP, R_TO
 687+ 3509 5E 25 DC 25                  dw          PLUS, SWAP
 688+ 350D 82 20                        dw      BRANCH
 689+ 350F 06 00                        dw      Fm_Mod_Endif - $
 690+ 3511              Fm_Mod_Else:
 691+ 3511 21 25 C8 25                  dw          R_TO, DROP
 692+ 3515              Fm_Mod_Endif:
 693+ 3515 0C 25                        dw      EXIT
 694+ 3517              //              dw      TWO_DUP                 // 2dup
 695+ 3517              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 696+ 3517              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 697+ 3517              //              dw      UMDIVMOD                // um/mod
 698+ 3517              //              dw      SWAP                    // swap
 699+ 3517              //              dw      II, ZLESS               // i'
 700+ 3517              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 701+ 3517              //              dw      R_TO                    // r>
 702+ 3517              //              dw      PLUS_MINUS, SWAP        // +- swap
 703+ 3517              //              dw      R_OP                    // r@
 704+ 3517              //              dw      ZLESS                   // i'
 705+ 3517              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 706+ 3517              //              dw      R_TO                    // r>
 707+ 3517              //              dw      PLUS_MINUS              // +- swap
 708+ 3517              //              dw      EXIT                    // ;
 709+ 3517
 710+ 3517              //  ______________________________________________________________________
 711+ 3517              //
 712+ 3517              // m/mod        d n -- q r
 713+ 3517              // multiply two integer giving a double
 714+ 3517                              Colon_Def MDIVM, "M/MOD", is_normal
 714+ 3517             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 714+ 3517             >
 714+ 3517             >Dict_Ptr        defl    $
 714+ 3517             >
 714+ 3517             >//              ______________________________________________________________________
 714+ 3517             >//              Heap part
 714+ 3517             >
 714+ 3517             >
 714+ 3517             >                org     (Heap_Ptr & $1FFF) + $E000
 714+ E9CE             >
 714+ E9CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 714+ E9CE             >Latest_Definition defl  Heap_Ptr
 714+ E9CE             >
 714+ E9CE             >                // dummy db directives used to calculate length of namec
 714+ E9CE 4D 2F 4D 4F >                db      "M/MOD"
 714+ E9D2 44          >
 714+ E9D3             >len_NFA         defl    $ - temp_NFA
 714+ E9D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 714+ E9CE             >
 714+ E9CE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 714+ E9CF 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 714+ E9D3 44          >
 714+ E9D4             >                org     $-1                 // alter last byte of Name just above to set
 714+ E9D3 C4          >                db      {b $} | END_BIT     // msb as name end
 714+ E9D4             >
 714+ E9D4 C3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 714+ E9D6             >Prev_Ptr        defl    Heap_Ptr
 714+ E9D6             >
 714+ E9D6             >mirror_Ptr      defl    $
 714+ E9D6             >
 714+ E9D6 19 35       >                dw      Dict_Ptr + 2        // xt
 714+ E9D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 714+ E9D8             >
 714+ E9D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 714+ E9D8             >
 714+ E9D8             >//              ______________________________________________________________________
 714+ E9D8             >//              Dictionary part
 714+ E9D8             >
 714+ E9D8             >                org     Dict_Ptr
 714+ 3517             >
 714+ 3517 D6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 714+ 3519             >
 714+ 3519             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 714+ 3519 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 714+ 351C             >
 714+ 351C             >
 714+ 351C             >                endif           ; ok        // for other definitions it "points" the correct handler
 714+ 351C             >                // Use of "; ok" to suppress "warning[fwdref]"
 714+ 351C             >
 714+ 351C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 715+ 351C BD 34                        dw      SMDIVM
 716+ 351E 0C 25                        dw      EXIT                    // ;
 717+ 3520
 718+ 3520              //  ______________________________________________________________________
 719+ 3520              //
 720+ 3520              // m/           d n -- q
 721+ 3520              // multiply two integer giving a double
 722+ 3520                              Colon_Def MDIV, "M/", is_normal
 722+ 3520             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 722+ 3520             >
 722+ 3520             >Dict_Ptr        defl    $
 722+ 3520             >
 722+ 3520             >//              ______________________________________________________________________
 722+ 3520             >//              Heap part
 722+ 3520             >
 722+ 3520             >
 722+ 3520             >                org     (Heap_Ptr & $1FFF) + $E000
 722+ E9D8             >
 722+ E9D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 722+ E9D8             >Latest_Definition defl  Heap_Ptr
 722+ E9D8             >
 722+ E9D8             >                // dummy db directives used to calculate length of namec
 722+ E9D8 4D 2F       >                db      "M/"
 722+ E9DA             >len_NFA         defl    $ - temp_NFA
 722+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 722+ E9D8             >
 722+ E9D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 722+ E9D9 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 722+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 722+ E9DA AF          >                db      {b $} | END_BIT     // msb as name end
 722+ E9DB             >
 722+ E9DB CE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 722+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 722+ E9DD             >
 722+ E9DD             >mirror_Ptr      defl    $
 722+ E9DD             >
 722+ E9DD 22 35       >                dw      Dict_Ptr + 2        // xt
 722+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 722+ E9DF             >
 722+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 722+ E9DF             >
 722+ E9DF             >//              ______________________________________________________________________
 722+ E9DF             >//              Dictionary part
 722+ E9DF             >
 722+ E9DF             >                org     Dict_Ptr
 722+ 3520             >
 722+ 3520 DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 722+ 3522             >
 722+ 3522             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 722+ 3522 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 722+ 3525             >
 722+ 3525             >
 722+ 3525             >                endif           ; ok        // for other definitions it "points" the correct handler
 722+ 3525             >                // Use of "; ok" to suppress "warning[fwdref]"
 722+ 3525             >
 722+ 3525             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 723+ 3525 19 35 CD 25                  dw      MDIVM, NIP
 724+ 3529 0C 25                        dw      EXIT                    // ;
 725+ 352B
 726+ 352B              //  ______________________________________________________________________
 727+ 352B              //
 728+ 352B              // *            n1 n2 -- n3
 729+ 352B              // multiply two integer
 730+ 352B                              Colon_Def MUL, "*", is_normal
 730+ 352B             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 730+ 352B             >
 730+ 352B             >Dict_Ptr        defl    $
 730+ 352B             >
 730+ 352B             >//              ______________________________________________________________________
 730+ 352B             >//              Heap part
 730+ 352B             >
 730+ 352B             >
 730+ 352B             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ E9DF             >
 730+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ E9DF             >Latest_Definition defl  Heap_Ptr
 730+ E9DF             >
 730+ E9DF             >                // dummy db directives used to calculate length of namec
 730+ E9DF 2A          >                db      "*"
 730+ E9E0             >len_NFA         defl    $ - temp_NFA
 730+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ E9DF             >
 730+ E9DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ E9E0 2A          >                db      "*"               // name string in 7-bit ascii, but
 730+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 730+ E9E0 AA          >                db      {b $} | END_BIT     // msb as name end
 730+ E9E1             >
 730+ E9E1 D8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 730+ E9E3             >
 730+ E9E3             >mirror_Ptr      defl    $
 730+ E9E3             >
 730+ E9E3 2D 35       >                dw      Dict_Ptr + 2        // xt
 730+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ E9E5             >
 730+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ E9E5             >
 730+ E9E5             >//              ______________________________________________________________________
 730+ E9E5             >//              Dictionary part
 730+ E9E5             >
 730+ E9E5             >                org     Dict_Ptr
 730+ 352B             >
 730+ 352B E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 352D             >
 730+ 352D             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 352D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 3530             >
 730+ 3530             >
 730+ 3530             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 3530             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 3530             >
 730+ 3530             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 3530 A4 34 C8 25                  dw      MMUL, DROP              // m* drop
 732+ 3534 0C 25                        dw      EXIT                    // ;
 733+ 3536
 734+ 3536              //  ______________________________________________________________________
 735+ 3536              //
 736+ 3536              // /mod         n1 n2 -- n3 n4
 737+ 3536              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 738+ 3536              // The remainder has the sign of n1
 739+ 3536                              Colon_Def DIVMOD, "/MOD", is_normal
 739+ 3536             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 739+ 3536             >
 739+ 3536             >Dict_Ptr        defl    $
 739+ 3536             >
 739+ 3536             >//              ______________________________________________________________________
 739+ 3536             >//              Heap part
 739+ 3536             >
 739+ 3536             >
 739+ 3536             >                org     (Heap_Ptr & $1FFF) + $E000
 739+ E9E5             >
 739+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ E9E5             >Latest_Definition defl  Heap_Ptr
 739+ E9E5             >
 739+ E9E5             >                // dummy db directives used to calculate length of namec
 739+ E9E5 2F 4D 4F 44 >                db      "/MOD"
 739+ E9E9             >len_NFA         defl    $ - temp_NFA
 739+ E9E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ E9E5             >
 739+ E9E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ E9E6 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 739+ E9EA             >                org     $-1                 // alter last byte of Name just above to set
 739+ E9E9 C4          >                db      {b $} | END_BIT     // msb as name end
 739+ E9EA             >
 739+ E9EA DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 739+ E9EC             >Prev_Ptr        defl    Heap_Ptr
 739+ E9EC             >
 739+ E9EC             >mirror_Ptr      defl    $
 739+ E9EC             >
 739+ E9EC 38 35       >                dw      Dict_Ptr + 2        // xt
 739+ E9EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 739+ E9EE             >
 739+ E9EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 739+ E9EE             >
 739+ E9EE             >//              ______________________________________________________________________
 739+ E9EE             >//              Dictionary part
 739+ E9EE             >
 739+ E9EE             >                org     Dict_Ptr
 739+ 3536             >
 739+ 3536 EC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 739+ 3538             >
 739+ 3538             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 3538 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 739+ 353B             >
 739+ 353B             >
 739+ 353B             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 353B             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 353B             >
 739+ 353B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 353B 16 25 A4 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 740+ 353F 21 25
 741+ 3541 19 35                        dw      MDIVM                   // m/mod
 742+ 3543 0C 25                        dw      EXIT                    // ;
 743+ 3545
 744+ 3545              //  ______________________________________________________________________
 745+ 3545              //
 746+ 3545              // /            n1 n2 -- n3
 747+ 3545              // division
 748+ 3545                              Colon_Def DIV, "/", is_normal
 748+ 3545             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 748+ 3545             >
 748+ 3545             >Dict_Ptr        defl    $
 748+ 3545             >
 748+ 3545             >//              ______________________________________________________________________
 748+ 3545             >//              Heap part
 748+ 3545             >
 748+ 3545             >
 748+ 3545             >                org     (Heap_Ptr & $1FFF) + $E000
 748+ E9EE             >
 748+ E9EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 748+ E9EE             >Latest_Definition defl  Heap_Ptr
 748+ E9EE             >
 748+ E9EE             >                // dummy db directives used to calculate length of namec
 748+ E9EE 2F          >                db      "/"
 748+ E9EF             >len_NFA         defl    $ - temp_NFA
 748+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 748+ E9EE             >
 748+ E9EE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 748+ E9EF 2F          >                db      "/"               // name string in 7-bit ascii, but
 748+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 748+ E9EF AF          >                db      {b $} | END_BIT     // msb as name end
 748+ E9F0             >
 748+ E9F0 E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 748+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 748+ E9F2             >
 748+ E9F2             >mirror_Ptr      defl    $
 748+ E9F2             >
 748+ E9F2 47 35       >                dw      Dict_Ptr + 2        // xt
 748+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 748+ E9F4             >
 748+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 748+ E9F4             >
 748+ E9F4             >//              ______________________________________________________________________
 748+ E9F4             >//              Dictionary part
 748+ E9F4             >
 748+ E9F4             >                org     Dict_Ptr
 748+ 3545             >
 748+ 3545 F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 748+ 3547             >
 748+ 3547             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 748+ 3547 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 748+ 354A             >
 748+ 354A             >
 748+ 354A             >                endif           ; ok        // for other definitions it "points" the correct handler
 748+ 354A             >                // Use of "; ok" to suppress "warning[fwdref]"
 748+ 354A             >
 748+ 354A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 749+ 354A 38 35 CD 25                  dw      DIVMOD, NIP             // /mod nip
 750+ 354E 0C 25                        dw      EXIT                    // ;
 751+ 3550
 752+ 3550              //  ______________________________________________________________________
 753+ 3550              //
 754+ 3550              // mod          n1 n2 -- n3
 755+ 3550                              Colon_Def MOD, "MOD", is_normal
 755+ 3550             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 755+ 3550             >
 755+ 3550             >Dict_Ptr        defl    $
 755+ 3550             >
 755+ 3550             >//              ______________________________________________________________________
 755+ 3550             >//              Heap part
 755+ 3550             >
 755+ 3550             >
 755+ 3550             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E9F4             >
 755+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E9F4             >Latest_Definition defl  Heap_Ptr
 755+ E9F4             >
 755+ E9F4             >                // dummy db directives used to calculate length of namec
 755+ E9F4 4D 4F 44    >                db      "MOD"
 755+ E9F7             >len_NFA         defl    $ - temp_NFA
 755+ E9F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E9F4             >
 755+ E9F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E9F5 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 755+ E9F8             >                org     $-1                 // alter last byte of Name just above to set
 755+ E9F7 C4          >                db      {b $} | END_BIT     // msb as name end
 755+ E9F8             >
 755+ E9F8 EE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E9FA             >Prev_Ptr        defl    Heap_Ptr
 755+ E9FA             >
 755+ E9FA             >mirror_Ptr      defl    $
 755+ E9FA             >
 755+ E9FA 52 35       >                dw      Dict_Ptr + 2        // xt
 755+ E9FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E9FC             >
 755+ E9FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E9FC             >
 755+ E9FC             >//              ______________________________________________________________________
 755+ E9FC             >//              Dictionary part
 755+ E9FC             >
 755+ E9FC             >                org     Dict_Ptr
 755+ 3550             >
 755+ 3550 FA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 3552             >
 755+ 3552             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 3552 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 3555             >
 755+ 3555             >
 755+ 3555             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 3555             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 3555             >
 755+ 3555             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 3555 38 35 C8 25                  dw      DIVMOD, DROP            // /mod drop
 757+ 3559 0C 25                        dw      EXIT                    // ;
 758+ 355B
 759+ 355B              //  ______________________________________________________________________
 760+ 355B              //
 761+ 355B              // */mod        n1 n2 n3 -- n4 n5
 762+ 355B              // leaves the quotient n5 and the remainder n4 of the operation
 763+ 355B              // (n1 * n2) / n3. The intermediate passage through a double number
 764+ 355B              // avoids loss of precision
 765+ 355B                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 765+ 355B             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 765+ 355B             >
 765+ 355B             >Dict_Ptr        defl    $
 765+ 355B             >
 765+ 355B             >//              ______________________________________________________________________
 765+ 355B             >//              Heap part
 765+ 355B             >
 765+ 355B             >
 765+ 355B             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E9FC             >
 765+ E9FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E9FC             >Latest_Definition defl  Heap_Ptr
 765+ E9FC             >
 765+ E9FC             >                // dummy db directives used to calculate length of namec
 765+ E9FC 2A 2F 4D 4F >                db      "*/MOD"
 765+ EA00 44          >
 765+ EA01             >len_NFA         defl    $ - temp_NFA
 765+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E9FC             >
 765+ E9FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E9FD 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 765+ EA01 44          >
 765+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 765+ EA01 C4          >                db      {b $} | END_BIT     // msb as name end
 765+ EA02             >
 765+ EA02 F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ EA04             >Prev_Ptr        defl    Heap_Ptr
 765+ EA04             >
 765+ EA04             >mirror_Ptr      defl    $
 765+ EA04             >
 765+ EA04 5D 35       >                dw      Dict_Ptr + 2        // xt
 765+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ EA06             >
 765+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ EA06             >
 765+ EA06             >//              ______________________________________________________________________
 765+ EA06             >//              Dictionary part
 765+ EA06             >
 765+ EA06             >                org     Dict_Ptr
 765+ 355B             >
 765+ 355B 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 355D             >
 765+ 355D             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 355D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 3560             >
 765+ 3560             >
 765+ 3560             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 3560             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 3560             >
 765+ 3560             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 3560 16 25 A4 34                  dw      TO_R, MMUL              // >r  m*
 767+ 3564 21 25 19 35                  dw      R_TO, MDIVM             // r>  m/mod
 768+ 3568 0C 25                        dw      EXIT                    // ;
 769+ 356A
 770+ 356A              //  ______________________________________________________________________
 771+ 356A              //
 772+ 356A              // */          n1 n2 n3 -- n4
 773+ 356A              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 774+ 356A                              Colon_Def MUL_DIV, "*/", is_normal
 774+ 356A             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 774+ 356A             >
 774+ 356A             >Dict_Ptr        defl    $
 774+ 356A             >
 774+ 356A             >//              ______________________________________________________________________
 774+ 356A             >//              Heap part
 774+ 356A             >
 774+ 356A             >
 774+ 356A             >                org     (Heap_Ptr & $1FFF) + $E000
 774+ EA06             >
 774+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ EA06             >Latest_Definition defl  Heap_Ptr
 774+ EA06             >
 774+ EA06             >                // dummy db directives used to calculate length of namec
 774+ EA06 2A 2F       >                db      "*/"
 774+ EA08             >len_NFA         defl    $ - temp_NFA
 774+ EA08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ EA06             >
 774+ EA06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ EA07 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 774+ EA09             >                org     $-1                 // alter last byte of Name just above to set
 774+ EA08 AF          >                db      {b $} | END_BIT     // msb as name end
 774+ EA09             >
 774+ EA09 FC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 774+ EA0B             >Prev_Ptr        defl    Heap_Ptr
 774+ EA0B             >
 774+ EA0B             >mirror_Ptr      defl    $
 774+ EA0B             >
 774+ EA0B 6C 35       >                dw      Dict_Ptr + 2        // xt
 774+ EA0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 774+ EA0D             >
 774+ EA0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 774+ EA0D             >
 774+ EA0D             >//              ______________________________________________________________________
 774+ EA0D             >//              Dictionary part
 774+ EA0D             >
 774+ EA0D             >                org     Dict_Ptr
 774+ 356A             >
 774+ 356A 0B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 774+ 356C             >
 774+ 356C             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 356C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 356F             >
 774+ 356F             >
 774+ 356F             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 356F             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 356F             >
 774+ 356F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 356F 5D 35                        dw     MUL_DIV_MOD              // */mod
 776+ 3571 CD 25                        dw     NIP                      // nip
 777+ 3573 0C 25                        dw     EXIT                     // ;
 778+ 3575
 779+ 3575
 780+ 3575              //  ______________________________________________________________________
 781+ 3575              //
 782+ 3575              // m/mod        ud1 u2 -- u3 ud4
 783+ 3575              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 784+ 3575              // All terms are unsigned.
 785+ 3575              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 786+ 3575              //              dw      TO_R                    // >r           ( ud1 )
 787+ 3575              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 788+ 3575              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 789+ 3575              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 790+ 3575              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 791+ 3575              //              dw      EXIT                    // ;
 792+ 3575
 793+ 3575              //  ______________________________________________________________________
 794+ 3575              //
 795+ 3575              // (line)       n1 n2 -- a b
 796+ 3575              // sends the line n1 of block n2 to the disk buffer.
 797+ 3575              // it returns the address a and ca counter b = C/L meaning a whole line.
 798+ 3575                              Colon_Def CLINE, "(LINE)", is_normal
 798+ 3575             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 798+ 3575             >
 798+ 3575             >Dict_Ptr        defl    $
 798+ 3575             >
 798+ 3575             >//              ______________________________________________________________________
 798+ 3575             >//              Heap part
 798+ 3575             >
 798+ 3575             >
 798+ 3575             >                org     (Heap_Ptr & $1FFF) + $E000
 798+ EA0D             >
 798+ EA0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 798+ EA0D             >Latest_Definition defl  Heap_Ptr
 798+ EA0D             >
 798+ EA0D             >                // dummy db directives used to calculate length of namec
 798+ EA0D 28 4C 49 4E >                db      "(LINE)"
 798+ EA11 45 29       >
 798+ EA13             >len_NFA         defl    $ - temp_NFA
 798+ EA13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 798+ EA0D             >
 798+ EA0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 798+ EA0E 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 798+ EA12 45 29       >
 798+ EA14             >                org     $-1                 // alter last byte of Name just above to set
 798+ EA13 A9          >                db      {b $} | END_BIT     // msb as name end
 798+ EA14             >
 798+ EA14 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 798+ EA16             >Prev_Ptr        defl    Heap_Ptr
 798+ EA16             >
 798+ EA16             >mirror_Ptr      defl    $
 798+ EA16             >
 798+ EA16 77 35       >                dw      Dict_Ptr + 2        // xt
 798+ EA18             >Heap_Ptr        defl    $ - $E000           // save current HP
 798+ EA18             >
 798+ EA18             >Current_HP      defl  $ - $E000             // used to set HP once!
 798+ EA18             >
 798+ EA18             >//              ______________________________________________________________________
 798+ EA18             >//              Dictionary part
 798+ EA18             >
 798+ EA18             >                org     Dict_Ptr
 798+ 3575             >
 798+ 3575 16 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 798+ 3577             >
 798+ 3577             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 798+ 3577 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 798+ 357A             >
 798+ 357A             >
 798+ 357A             >                endif           ; ok        // for other definitions it "points" the correct handler
 798+ 357A             >                // Use of "; ok" to suppress "warning[fwdref]"
 798+ 357A             >
 798+ 357A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 799+ 357A 16 25                        dw      TO_R                    // >r
 800+ 357C 75 27                        dw      CL                      // c/l
 801+ 357E 7C 27 5D 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 802+ 3582 21 25                        dw      R_TO                    // r>
 803+ 3584 83 27 2D 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 803+ 3588 5E 25
 804+ 358A 60 37                        dw      BLOCK                   // block   ( forward )
 805+ 358C 5E 25                        dw      PLUS                    // +
 806+ 358E 75 27                        dw      CL                      // c/l
 807+ 3590 0C 25                        dw      EXIT                    // ;
 808+ 3592
 809+ 3592              //  ______________________________________________________________________
 810+ 3592              //
 811+ 3592              // .line        n1 n2 --
 812+ 3592              // Sends to output line  n1  of screen n2.
 813+ 3592                              Colon_Def DOT_LINE, ".LINE", is_normal
 813+ 3592             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 813+ 3592             >
 813+ 3592             >Dict_Ptr        defl    $
 813+ 3592             >
 813+ 3592             >//              ______________________________________________________________________
 813+ 3592             >//              Heap part
 813+ 3592             >
 813+ 3592             >
 813+ 3592             >                org     (Heap_Ptr & $1FFF) + $E000
 813+ EA18             >
 813+ EA18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ EA18             >Latest_Definition defl  Heap_Ptr
 813+ EA18             >
 813+ EA18             >                // dummy db directives used to calculate length of namec
 813+ EA18 2E 4C 49 4E >                db      ".LINE"
 813+ EA1C 45          >
 813+ EA1D             >len_NFA         defl    $ - temp_NFA
 813+ EA1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ EA18             >
 813+ EA18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ EA19 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 813+ EA1D 45          >
 813+ EA1E             >                org     $-1                 // alter last byte of Name just above to set
 813+ EA1D C5          >                db      {b $} | END_BIT     // msb as name end
 813+ EA1E             >
 813+ EA1E 0D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 813+ EA20             >Prev_Ptr        defl    Heap_Ptr
 813+ EA20             >
 813+ EA20             >mirror_Ptr      defl    $
 813+ EA20             >
 813+ EA20 94 35       >                dw      Dict_Ptr + 2        // xt
 813+ EA22             >Heap_Ptr        defl    $ - $E000           // save current HP
 813+ EA22             >
 813+ EA22             >Current_HP      defl  $ - $E000             // used to set HP once!
 813+ EA22             >
 813+ EA22             >//              ______________________________________________________________________
 813+ EA22             >//              Dictionary part
 813+ EA22             >
 813+ EA22             >                org     Dict_Ptr
 813+ 3592             >
 813+ 3592 20 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 813+ 3594             >
 813+ 3594             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 3594 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 3597             >
 813+ 3597             >
 813+ 3597             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 3597             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 3597             >
 813+ 3597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 3597 77 35 53 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 814+ 359B 3C 2C
 815+ 359D 0C 25                        dw      EXIT                    // ;
 816+ 359F
 817+ 359F              //  ______________________________________________________________________
 818+ 359F              //
 819+ 359F              // message       n1 n2 --
 820+ 359F              // prints error message to current channel.
 821+ 359F              // if WARNING is 0, prints "MSG#n".
 822+ 359F              // if WARNING is 1, prints line n of screen 4.
 823+ 359F              // if WARNING is -1, see ERROR
 824+ 359F              // value can be negative or beyond block 4.
 825+ 359F                              Colon_Def MESSAGE, "MESSAGE", is_normal
 825+ 359F             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 825+ 359F             >
 825+ 359F             >Dict_Ptr        defl    $
 825+ 359F             >
 825+ 359F             >//              ______________________________________________________________________
 825+ 359F             >//              Heap part
 825+ 359F             >
 825+ 359F             >
 825+ 359F             >                org     (Heap_Ptr & $1FFF) + $E000
 825+ EA22             >
 825+ EA22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ EA22             >Latest_Definition defl  Heap_Ptr
 825+ EA22             >
 825+ EA22             >                // dummy db directives used to calculate length of namec
 825+ EA22 4D 45 53 53 >                db      "MESSAGE"
 825+ EA26 41 47 45    >
 825+ EA29             >len_NFA         defl    $ - temp_NFA
 825+ EA29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ EA22             >
 825+ EA22 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ EA23 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 825+ EA27 41 47 45    >
 825+ EA2A             >                org     $-1                 // alter last byte of Name just above to set
 825+ EA29 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ EA2A             >
 825+ EA2A 18 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 825+ EA2C             >Prev_Ptr        defl    Heap_Ptr
 825+ EA2C             >
 825+ EA2C             >mirror_Ptr      defl    $
 825+ EA2C             >
 825+ EA2C A1 35       >                dw      Dict_Ptr + 2        // xt
 825+ EA2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 825+ EA2E             >
 825+ EA2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 825+ EA2E             >
 825+ EA2E             >//              ______________________________________________________________________
 825+ EA2E             >//              Dictionary part
 825+ EA2E             >
 825+ EA2E             >                org     Dict_Ptr
 825+ 359F             >
 825+ 359F 2C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 825+ 35A1             >
 825+ 35A1             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 35A1 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 35A4             >
 825+ 35A4             >
 825+ 35A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 35A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 35A4             >
 825+ 35A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 35A4 BC 27 54 26                  dw      WARNING, FETCH          // warning @
 827+ 35A8                                                              // if
 828+ 35A8 8F 20                        dw      ZBRANCH
 829+ 35AA 12 00                        dw      Message_Else - $
 830+ 35AC 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 830+ 35B0 5E 25
 831+ 35B2 59 27                        dw          TWO                 //      2
 832+ 35B4 94 35                        dw          DOT_LINE            //      .line
 833+ 35B6 41 29                        dw          SPACE               //      space
 834+ 35B8                                                              // else
 835+ 35B8
 836+ 35B8 82 20                        dw      BRANCH
 837+ 35BA 0B 00                        dw      Message_ENdif - $
 838+ 35BC              Message_Else:
 839+ 35BC D9 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 840+ 35BE 04 6D 73 67                  db          4, "msg#"
 840+ 35C2 23
 841+ 35C3 C4 3C                        dw          DOT                 //      .  ( forward )
 842+ 35C5              Message_ENdif:                                  // endif
 843+ 35C5 0C 25                        dw      EXIT                    // ;
 844+ 35C7
 845+ 35C7
 846+ 35C7              //  ______________________________________________________________________
 847+ 35C7              //
 848+ 35C7              // device
 849+ 35C7                              Variable_Def DEVICE,   "DEVICE",   2
 849+ 35C7             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 849+ 35C7             >
 849+ 35C7             >Dict_Ptr        defl    $
 849+ 35C7             >
 849+ 35C7             >//              ______________________________________________________________________
 849+ 35C7             >//              Heap part
 849+ 35C7             >
 849+ 35C7             >
 849+ 35C7             >                org     (Heap_Ptr & $1FFF) + $E000
 849+ EA2E             >
 849+ EA2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 849+ EA2E             >Latest_Definition defl  Heap_Ptr
 849+ EA2E             >
 849+ EA2E             >                // dummy db directives used to calculate length of namec
 849+ EA2E 44 45 56 49 >                db      "DEVICE"
 849+ EA32 43 45       >
 849+ EA34             >len_NFA         defl    $ - temp_NFA
 849+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 849+ EA2E             >
 849+ EA2E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 849+ EA2F 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 849+ EA33 43 45       >
 849+ EA35             >                org     $-1                 // alter last byte of Name just above to set
 849+ EA34 C5          >                db      {b $} | END_BIT     // msb as name end
 849+ EA35             >
 849+ EA35 22 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 849+ EA37             >Prev_Ptr        defl    Heap_Ptr
 849+ EA37             >
 849+ EA37             >mirror_Ptr      defl    $
 849+ EA37             >
 849+ EA37 C9 35       >                dw      Dict_Ptr + 2        // xt
 849+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
 849+ EA39             >
 849+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
 849+ EA39             >
 849+ EA39             >//              ______________________________________________________________________
 849+ EA39             >//              Dictionary part
 849+ EA39             >
 849+ EA39             >                org     Dict_Ptr
 849+ 35C7             >
 849+ 35C7 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 849+ 35C9             >
 849+ 35C9             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 849+ 35C9 CD 32 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 849+ 35CC             >
 849+ 35CC             >
 849+ 35CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 849+ 35CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 849+ 35CC             >
 849+ 35CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 849+ 35CC 02 00       >                dw      2
 850+ 35CE
 851+ 35CE              //  ______________________________________________________________________
 852+ 35CE
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 124  35CE                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 35CE              //  ______________________________________________________________________
   2+ 35CE              //
   3+ 35CE              //  next-opt.asm
   4+ 35CE              //
   5+ 35CE              //  ZX Spectrum Next - peculiar definitions
   6+ 35CE              //  ______________________________________________________________________
   7+ 35CE
   8+ 35CE              //  ______________________________________________________________________
   9+ 35CE              //
  10+ 35CE              // reg@         n -- b
  11+ 35CE              // read Next REGister n giving byte b
  12+ 35CE              //
  13+ 35CE              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35CE              //              dw      LIT, $243B
  15+ 35CE              //              dw      PSTORE
  16+ 35CE              //              dw      LIT, $253B
  17+ 35CE              //              dw      PFETCH
  18+ 35CE              //              dw      EXIT
  19+ 35CE                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35CE             >
  19+ 35CE             >Dict_Ptr        defl    $
  19+ 35CE             >
  19+ 35CE             >//              ______________________________________________________________________
  19+ 35CE             >//              Heap part
  19+ 35CE             >
  19+ 35CE             >
  19+ 35CE             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA39             >
  19+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA39             >Latest_Definition defl  Heap_Ptr
  19+ EA39             >
  19+ EA39             >                // dummy db directives used to calculate length of namec
  19+ EA39 52 45 47 40 >                db      "REG@"
  19+ EA3D             >len_NFA         defl    $ - temp_NFA
  19+ EA3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA39             >
  19+ EA39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3A 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA3E             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3D C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA3E             >
  19+ EA3E 2E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA40             >Prev_Ptr        defl    Heap_Ptr
  19+ EA40             >
  19+ EA40             >mirror_Ptr      defl    $
  19+ EA40             >
  19+ EA40 D0 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA42             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA42             >
  19+ EA42             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA42             >
  19+ EA42             >//              ______________________________________________________________________
  19+ EA42             >//              Dictionary part
  19+ EA42             >
  19+ EA42             >                org     Dict_Ptr
  19+ 35CE             >
  19+ 35CE 40 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35D0             >
  19+ 35D0             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35D0 ~           >
  19+ 35D0 ~           >
  19+ 35D0             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35D0             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35D0             >
  19+ 35D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35D0 D9                           exx
  21+ 35D1 01 3B 24                     ld      bc, $243B
  22+ 35D4 E1                           pop     hl
  23+ 35D5 ED 69                        out     (c), l
  24+ 35D7 04                           inc     b
  25+ 35D8 ED 68                        in      l, (c)
  26+ 35DA E5                           push    hl
  27+ 35DB D9                           exx
  28+ 35DC                              next
  28+ 35DC DD E9       >                jp      (ix)
  29+ 35DE
  30+ 35DE
  31+ 35DE              //  ______________________________________________________________________
  32+ 35DE              //
  33+ 35DE              // reg!         b n --
  34+ 35DE              // write value b to Next REGister n
  35+ 35DE              //
  36+ 35DE              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35DE              //              dw      LIT, $243B
  38+ 35DE              //              dw      PSTORE
  39+ 35DE              //              dw      LIT, $253B
  40+ 35DE              //              dw      PSTORE
  41+ 35DE              //              dw      EXIT
  42+ 35DE                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35DE             >
  42+ 35DE             >Dict_Ptr        defl    $
  42+ 35DE             >
  42+ 35DE             >//              ______________________________________________________________________
  42+ 35DE             >//              Heap part
  42+ 35DE             >
  42+ 35DE             >
  42+ 35DE             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA42             >
  42+ EA42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA42             >Latest_Definition defl  Heap_Ptr
  42+ EA42             >
  42+ EA42             >                // dummy db directives used to calculate length of namec
  42+ EA42 52 45 47 21 >                db      "REG!"
  42+ EA46             >len_NFA         defl    $ - temp_NFA
  42+ EA46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA42             >
  42+ EA42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA43 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA47             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA46 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA47             >
  42+ EA47 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA49             >Prev_Ptr        defl    Heap_Ptr
  42+ EA49             >
  42+ EA49             >mirror_Ptr      defl    $
  42+ EA49             >
  42+ EA49 E0 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA4B             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4B             >
  42+ EA4B             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4B             >
  42+ EA4B             >//              ______________________________________________________________________
  42+ EA4B             >//              Dictionary part
  42+ EA4B             >
  42+ EA4B             >                org     Dict_Ptr
  42+ 35DE             >
  42+ 35DE 49 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35E0             >
  42+ 35E0             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35E0 ~           >
  42+ 35E0 ~           >
  42+ 35E0             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35E0             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35E0             >
  42+ 35E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35E0 D9                           exx
  44+ 35E1 01 3B 24                     ld      bc, $243B
  45+ 35E4 E1                           pop     hl
  46+ 35E5 ED 69                        out     (c), l
  47+ 35E7 04                           inc     b
  48+ 35E8 E1                           pop     hl
  49+ 35E9 ED 69                        out     (c), l
  50+ 35EB D9                           exx
  51+ 35EC                              next
  51+ 35EC DD E9       >                jp      (ix)
  52+ 35EE
  53+ 35EE
  54+ 35EE              //  ______________________________________________________________________
  55+ 35EE              //
  56+ 35EE              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35EE              // NextZXOS call wrapper.
  58+ 35EE              //  n1 = hl register parameter value
  59+ 35EE              //  n2 = de register parameter value
  60+ 35EE              //  n3 = bc register parameter value
  61+ 35EE              //  n4 =  a register parameter value
  62+ 35EE              //   a = routine address in ROM 3
  63+ 35EE              // ----
  64+ 35EE              //  n5 = hl returned value
  65+ 35EE              //  n6 = de returned value
  66+ 35EE              //  n7 = bc returned value
  67+ 35EE              //  n8 =  a returned value
  68+ 35EE              //   f
  69+ 35EE                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35EE             >
  69+ 35EE             >Dict_Ptr        defl    $
  69+ 35EE             >
  69+ 35EE             >//              ______________________________________________________________________
  69+ 35EE             >//              Heap part
  69+ 35EE             >
  69+ 35EE             >
  69+ 35EE             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4B             >
  69+ EA4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4B             >Latest_Definition defl  Heap_Ptr
  69+ EA4B             >
  69+ EA4B             >                // dummy db directives used to calculate length of namec
  69+ EA4B 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA4F 44 4F 53    >
  69+ EA52             >len_NFA         defl    $ - temp_NFA
  69+ EA52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4B             >
  69+ EA4B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4C 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA50 44 4F 53    >
  69+ EA53             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA52 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA53             >
  69+ EA53 42 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA55             >Prev_Ptr        defl    Heap_Ptr
  69+ EA55             >
  69+ EA55             >mirror_Ptr      defl    $
  69+ EA55             >
  69+ EA55 F0 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA57             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA57             >
  69+ EA57             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA57             >
  69+ EA57             >//              ______________________________________________________________________
  69+ EA57             >//              Dictionary part
  69+ EA57             >
  69+ EA57             >                org     Dict_Ptr
  69+ 35EE             >
  69+ 35EE 55 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35F0             >
  69+ 35F0             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35F0 ~           >
  69+ 35F0 ~           >
  69+ 35F0             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35F0             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35F0             >
  69+ 35F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35F0 D9                            exx
  71+ 35F1 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35F2 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35F3 7B                            ld      a, e
  74+ 35F4 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35F5 D1                            pop     de                  // de' argument              //  n1
  76+ 35F6 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35F7 D9                           exx
  78+ 35F8 E1                           pop     hl                  // entry address a
  79+ 35F9 DD E5                        push    ix
  80+ 35FB D5                           push    de
  81+ 35FC C5                           push    bc
  82+ 35FD EB                           ex      de, hl              // de is entry address
  83+ 35FE              //              ld      (SP_Saved), sp
  84+ 35FE              //              ld      sp, Cold_origin - 5
  85+ 35FE              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35FE 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 3600 F3                           di
  88+ 3601 CF                           rst     08
  89+ 3602 94                           db      $94
  90+ 3603 FB                           ei
  91+ 3604                      ////    ld      a, (Saved_MMU + 1)
  92+ 3604                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 3604
  94+ 3604              //              ld      sp, (SP_Saved)
  95+ 3604              //              push    ix
  96+ 3604              //              pop     hl
  97+ 3604              //              ld      (IX_Echo), hl
  98+ 3604 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 3608
 100+ 3608 D9                           exx
 101+ 3609 C1                           pop     bc
 102+ 360A D1                           pop     de
 103+ 360B DD E1                        pop     ix
 104+ 360D D9                            exx
 105+ 360E E5                            push    hl
 106+ 360F D5                            push    de
 107+ 3610 C5                            push    bc
 108+ 3611 26 00                         ld      h, 0
 109+ 3613 6F                            ld      l, a
 110+ 3614 E5                            push    hl
 111+ 3615 D9                           exx
 112+ 3616 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 3618 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 3619 E5                           push    hl
 115+ 361A                              next
 115+ 361A DD E9       >                jp      (ix)
 116+ 361C
 117+ 361C              //  ______________________________________________________________________
 118+ 361C              //
 119+ 361C              // blk-fh
 120+ 361C              // MOVED AT THE END.
 121+ 361C              //              Variable_Def BLK_FH,   "BLK-FH",   1
 122+ 361C              //
 123+ 361C              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 124+ 361C              // Len_Filename:   db      30
 125+ 361C              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 126+ 361C              //                 ds      32
 127+ 361C
 128+ 361C              //  ______________________________________________________________________
 129+ 361C              //
 130+ 361C              // blk-seek     n --
 131+ 361C              // seek block n  within blocks!.bin  file
 132+ 361C                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 361C             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 361C             >
 132+ 361C             >Dict_Ptr        defl    $
 132+ 361C             >
 132+ 361C             >//              ______________________________________________________________________
 132+ 361C             >//              Heap part
 132+ 361C             >
 132+ 361C             >
 132+ 361C             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA57             >
 132+ EA57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA57             >Latest_Definition defl  Heap_Ptr
 132+ EA57             >
 132+ EA57             >                // dummy db directives used to calculate length of namec
 132+ EA57 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA5B 53 45 45 4B >
 132+ EA5F             >len_NFA         defl    $ - temp_NFA
 132+ EA5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA57             >
 132+ EA57 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA58 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA5C 53 45 45 4B >
 132+ EA60             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA5F CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA60             >
 132+ EA60 4B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA62             >Prev_Ptr        defl    Heap_Ptr
 132+ EA62             >
 132+ EA62             >mirror_Ptr      defl    $
 132+ EA62             >
 132+ EA62 1E 36       >                dw      Dict_Ptr + 2        // xt
 132+ EA64             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA64             >
 132+ EA64             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA64             >
 132+ EA64             >//              ______________________________________________________________________
 132+ EA64             >//              Dictionary part
 132+ EA64             >
 132+ EA64             >                org     Dict_Ptr
 132+ 361C             >
 132+ 361C 62 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 361E             >
 132+ 361E             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 361E CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 3621             >
 132+ 3621             >
 132+ 3621             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 3621             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 3621             >
 132+ 3621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 3621 7C 27 A4 34                  dw  BBUF, MMUL
 134+ 3625 84 3F 54 26                  dw  BLK_FH, FETCH
 135+ 3629 89 23                        dw  F_SEEK
 136+ 362B 3D 20 2D 00                  dw  LIT, $2D, QERROR
 136+ 362F AC 2A
 137+ 3631 0C 25                        dw  EXIT
 138+ 3633
 139+ 3633              //  ______________________________________________________________________
 140+ 3633              //
 141+ 3633              // blk-read     n --
 142+ 3633              // seek block n  within blocks!.bin  file
 143+ 3633                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 3633             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 3633             >
 143+ 3633             >Dict_Ptr        defl    $
 143+ 3633             >
 143+ 3633             >//              ______________________________________________________________________
 143+ 3633             >//              Heap part
 143+ 3633             >
 143+ 3633             >
 143+ 3633             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA64             >
 143+ EA64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA64             >Latest_Definition defl  Heap_Ptr
 143+ EA64             >
 143+ EA64             >                // dummy db directives used to calculate length of namec
 143+ EA64 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA68 52 45 41 44 >
 143+ EA6C             >len_NFA         defl    $ - temp_NFA
 143+ EA6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA64             >
 143+ EA64 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA65 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA69 52 45 41 44 >
 143+ EA6D             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA6C C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA6D             >
 143+ EA6D 57 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA6F             >Prev_Ptr        defl    Heap_Ptr
 143+ EA6F             >
 143+ EA6F             >mirror_Ptr      defl    $
 143+ EA6F             >
 143+ EA6F 35 36       >                dw      Dict_Ptr + 2        // xt
 143+ EA71             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA71             >
 143+ EA71             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA71             >
 143+ EA71             >//              ______________________________________________________________________
 143+ EA71             >//              Dictionary part
 143+ EA71             >
 143+ EA71             >                org     Dict_Ptr
 143+ 3633             >
 143+ 3633 6F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 3635             >
 143+ 3635             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 3635 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 3638             >
 143+ 3638             >
 143+ 3638             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 3638             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 3638             >
 143+ 3638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 3638 1E 36                        dw  BLK_SEEK
 145+ 363A 7C 27                        dw  BBUF
 146+ 363C 84 3F 54 26                  dw  BLK_FH, FETCH
 147+ 3640 DA 23                        dw  F_READ
 148+ 3642 3D 20 2E 00                  dw  LIT, $2E, QERROR
 148+ 3646 AC 2A
 149+ 3648 C8 25                        dw  DROP
 150+ 364A 0C 25                        dw  EXIT
 151+ 364C
 152+ 364C              //  ______________________________________________________________________
 153+ 364C              //
 154+ 364C              // blk-write     n --
 155+ 364C              // seek block n  within blocks!.bin  file
 156+ 364C                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 364C             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 364C             >
 156+ 364C             >Dict_Ptr        defl    $
 156+ 364C             >
 156+ 364C             >//              ______________________________________________________________________
 156+ 364C             >//              Heap part
 156+ 364C             >
 156+ 364C             >
 156+ 364C             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA71             >
 156+ EA71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA71             >Latest_Definition defl  Heap_Ptr
 156+ EA71             >
 156+ EA71             >                // dummy db directives used to calculate length of namec
 156+ EA71 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA75 57 52 49 54 >
 156+ EA79 45          >
 156+ EA7A             >len_NFA         defl    $ - temp_NFA
 156+ EA7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA71             >
 156+ EA71 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA72 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA76 57 52 49 54 >
 156+ EA7A 45          >
 156+ EA7B             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA7A C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA7B             >
 156+ EA7B 64 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA7D             >Prev_Ptr        defl    Heap_Ptr
 156+ EA7D             >
 156+ EA7D             >mirror_Ptr      defl    $
 156+ EA7D             >
 156+ EA7D 4E 36       >                dw      Dict_Ptr + 2        // xt
 156+ EA7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA7F             >
 156+ EA7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA7F             >
 156+ EA7F             >//              ______________________________________________________________________
 156+ EA7F             >//              Dictionary part
 156+ EA7F             >
 156+ EA7F             >                org     Dict_Ptr
 156+ 364C             >
 156+ 364C 7D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 364E             >
 156+ 364E             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 364E CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 3651             >
 156+ 3651             >
 156+ 3651             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 3651             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 3651             >
 156+ 3651             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 3651 1E 36                        dw  BLK_SEEK
 158+ 3653 7C 27                        dw  BBUF
 159+ 3655 84 3F 54 26                  dw  BLK_FH, FETCH
 160+ 3659 FA 23                        dw  F_WRITE
 161+ 365B 3D 20 2F 00                  dw  LIT, $2F, QERROR
 161+ 365F AC 2A
 162+ 3661 C8 25                        dw  DROP
 163+ 3663 0C 25                        dw  EXIT
 164+ 3665
 165+ 3665              //  ______________________________________________________________________
 166+ 3665              //
 167+ 3665              // blk-init     n --
 168+ 3665              // seek block n  within blocks!.bin  file
 169+ 3665                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 3665             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 3665             >
 169+ 3665             >Dict_Ptr        defl    $
 169+ 3665             >
 169+ 3665             >//              ______________________________________________________________________
 169+ 3665             >//              Heap part
 169+ 3665             >
 169+ 3665             >
 169+ 3665             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA7F             >
 169+ EA7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA7F             >Latest_Definition defl  Heap_Ptr
 169+ EA7F             >
 169+ EA7F             >                // dummy db directives used to calculate length of namec
 169+ EA7F 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA83 49 4E 49 54 >
 169+ EA87             >len_NFA         defl    $ - temp_NFA
 169+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA7F             >
 169+ EA7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA80 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA84 49 4E 49 54 >
 169+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA87 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA88             >
 169+ EA88 71 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 169+ EA8A             >
 169+ EA8A             >mirror_Ptr      defl    $
 169+ EA8A             >
 169+ EA8A 67 36       >                dw      Dict_Ptr + 2        // xt
 169+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EA8C             >
 169+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EA8C             >
 169+ EA8C             >//              ______________________________________________________________________
 169+ EA8C             >//              Dictionary part
 169+ EA8C             >
 169+ EA8C             >                org     Dict_Ptr
 169+ 3665             >
 169+ 3665 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 3667             >
 169+ 3667             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 3667 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 366A             >
 169+ 366A             >
 169+ 366A             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 366A             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 366A             >
 169+ 366A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 366A 84 3F 54 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 366E A6 23 C8 25
 171+ 3672 8B 3F 77 25                  dw  BLK_FNAME, ONE_PLUS
 172+ 3676 70 28 60 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 367A 0E 24
 173+ 367C                          //    dw  LIT, $2C, QERROR
 174+ 367C
 175+ 367C 8F 20                        dw  ZBRANCH
 176+ 367E 0E 00                        dw  Blk_Init_Endif - $
 177+ 3680
 178+ 3680 3D 20 CF FF                  dw  LIT, $FFCF
 179+ 3684 3D 20 6B 34                  dw  LIT, Exit_with_error
 180+ 3688 5E 26                        dw  STORE
 181+ 368A
 182+ 368A 29 34                        dw  BASIC
 183+ 368C              Blk_Init_Endif:
 184+ 368C
 185+ 368C 84 3F 5E 26                  dw  BLK_FH, STORE
 186+ 3690 0C 25                        dw  EXIT
 187+ 3692
 188+ 3692              //  ______________________________________________________________________
 189+ 3692              //
 190+ 3692              // #sec
 191+ 3692              // number of 512-Byte "sectors" available on thie sysstem.
 192+ 3692              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 193+ 3692
 194+ 3692                              Constant_Def NSEC , "#SEC", 32767
 194+ 3692             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 194+ 3692             >
 194+ 3692             >Dict_Ptr        defl    $
 194+ 3692             >
 194+ 3692             >//              ______________________________________________________________________
 194+ 3692             >//              Heap part
 194+ 3692             >
 194+ 3692             >
 194+ 3692             >                org     (Heap_Ptr & $1FFF) + $E000
 194+ EA8C             >
 194+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ EA8C             >Latest_Definition defl  Heap_Ptr
 194+ EA8C             >
 194+ EA8C             >                // dummy db directives used to calculate length of namec
 194+ EA8C 23 53 45 43 >                db      "#SEC"
 194+ EA90             >len_NFA         defl    $ - temp_NFA
 194+ EA90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ EA8C             >
 194+ EA8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ EA8D 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 194+ EA91             >                org     $-1                 // alter last byte of Name just above to set
 194+ EA90 C3          >                db      {b $} | END_BIT     // msb as name end
 194+ EA91             >
 194+ EA91 7F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194+ EA93             >Prev_Ptr        defl    Heap_Ptr
 194+ EA93             >
 194+ EA93             >mirror_Ptr      defl    $
 194+ EA93             >
 194+ EA93 94 36       >                dw      Dict_Ptr + 2        // xt
 194+ EA95             >Heap_Ptr        defl    $ - $E000           // save current HP
 194+ EA95             >
 194+ EA95             >Current_HP      defl  $ - $E000             // used to set HP once!
 194+ EA95             >
 194+ EA95             >//              ______________________________________________________________________
 194+ EA95             >//              Dictionary part
 194+ EA95             >
 194+ EA95             >                org     Dict_Ptr
 194+ 3692             >
 194+ 3692 93 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 194+ 3694             >
 194+ 3694             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 3694 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 194+ 3697             >
 194+ 3697             >
 194+ 3697             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 3697             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 3697             >
 194+ 3697             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 3697 FF 7F       >                dw      32767
 195+ 3699
 196+ 3699              //  ______________________________________________________________________
 197+ 3699
 198+ 3699
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 125  3699                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 3699              //  ______________________________________________________________________
   2+ 3699              //
   3+ 3699              //  L3.asm
   4+ 3699              //
   5+ 3699              //  Continuation of L2.asm
   6+ 3699              //  I/O Block definitions
   7+ 3699              //  ______________________________________________________________________
   8+ 3699
   9+ 3699
  10+ 3699              //  ______________________________________________________________________
  11+ 3699              //
  12+ 3699              // r/w          a n f --
  13+ 3699              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3699                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3699             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3699             >
  14+ 3699             >Dict_Ptr        defl    $
  14+ 3699             >
  14+ 3699             >//              ______________________________________________________________________
  14+ 3699             >//              Heap part
  14+ 3699             >
  14+ 3699             >
  14+ 3699             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA95             >
  14+ EA95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA95             >Latest_Definition defl  Heap_Ptr
  14+ EA95             >
  14+ EA95             >                // dummy db directives used to calculate length of namec
  14+ EA95 52 2F 57    >                db      "R/W"
  14+ EA98             >len_NFA         defl    $ - temp_NFA
  14+ EA98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA95             >
  14+ EA95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA96 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA99             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA98 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA99             >
  14+ EA99 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA9B             >Prev_Ptr        defl    Heap_Ptr
  14+ EA9B             >
  14+ EA9B             >mirror_Ptr      defl    $
  14+ EA9B             >
  14+ EA9B 9B 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA9D             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA9D             >
  14+ EA9D             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA9D             >
  14+ EA9D             >//              ______________________________________________________________________
  14+ EA9D             >//              Dictionary part
  14+ EA9D             >
  14+ EA9D             >                org     Dict_Ptr
  14+ 3699             >
  14+ 3699 9B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 369B             >
  14+ 369B             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 369B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 369E             >
  14+ 369E             >
  14+ 369E             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 369E             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 369E             >
  14+ 369E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 369E 16 25                        dw      TO_R                    // >r
  16+ 36A0 7E 25                        dw      ONE_SUBTRACT            // 1-
  17+ 36A2 E3 25 43 25                  dw      DUP, ZLESS              // dup 0<
  18+ 36A6 BF 25 94 36                  dw      OVER, NSEC              // over #sec
  19+ 36AA 7E 25 E9 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 36AE DB 24                        dw      OR_OP                   // or
  21+ 36B0 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 36B4 AC 2A
  22+ 36B6 21 25                        dw      R_TO                    // r>
  23+ 36B8                                                              // if
  24+ 36B8 8F 20                        dw      ZBRANCH
  25+ 36BA 08 00                        dw      Read_Write_Else - $
  26+ 36BC 35 36                        dw          BLK_READ            //      blk-read
  27+ 36BE 82 20                        dw      BRANCH
  28+ 36C0 04 00                        dw      Read_Write_Endif - $
  29+ 36C2              Read_Write_Else:                                // else
  30+ 36C2 4E 36                        dw          BLK_WRITE           //      blk-write
  31+ 36C4              Read_Write_Endif:                               // endif
  32+ 36C4 0C 25                        dw      EXIT                    // ;
  33+ 36C6
  34+ 36C6
  35+ 36C6              //  ______________________________________________________________________
  36+ 36C6              //
  37+ 36C6              // +buf        a1 -- a2 f
  38+ 36C6              // advences to next buffer, cyclically rotating along them
  39+ 36C6                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36C6             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36C6             >
  39+ 36C6             >Dict_Ptr        defl    $
  39+ 36C6             >
  39+ 36C6             >//              ______________________________________________________________________
  39+ 36C6             >//              Heap part
  39+ 36C6             >
  39+ 36C6             >
  39+ 36C6             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA9D             >
  39+ EA9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA9D             >Latest_Definition defl  Heap_Ptr
  39+ EA9D             >
  39+ EA9D             >                // dummy db directives used to calculate length of namec
  39+ EA9D 2B 42 55 46 >                db      "+BUF"
  39+ EAA1             >len_NFA         defl    $ - temp_NFA
  39+ EAA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA9D             >
  39+ EA9D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA9E 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAA2             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAA1 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAA2             >
  39+ EAA2 95 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAA4             >Prev_Ptr        defl    Heap_Ptr
  39+ EAA4             >
  39+ EAA4             >mirror_Ptr      defl    $
  39+ EAA4             >
  39+ EAA4 C8 36       >                dw      Dict_Ptr + 2        // xt
  39+ EAA6             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAA6             >
  39+ EAA6             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAA6             >
  39+ EAA6             >//              ______________________________________________________________________
  39+ EAA6             >//              Dictionary part
  39+ EAA6             >
  39+ EAA6             >                org     Dict_Ptr
  39+ 36C6             >
  39+ 36C6 A4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36C8             >
  39+ 36C8             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36C8 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36CB             >
  39+ 36CB             >
  39+ 36CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36CB             >
  39+ 36CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36CB 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36CF 5E 25
  41+ 36D1 E3 25 DA 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36D5 54 26
  42+ 36D7 BB 28                        dw      EQUALS                  // =
  43+ 36D9                                                              // if
  44+ 36D9 8F 20                        dw      ZBRANCH
  45+ 36DB 08 00                        dw      PBuf_Endif - $
  46+ 36DD C8 25                        dw          DROP                //      drop
  47+ 36DF D4 27 54 26                  dw          FIRST, FETCH        //      first @
  48+ 36E3              PBuf_Endif:                                     // endif
  49+ 36E3 E3 25 46 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36E7 54 26
  50+ 36E9 AF 28                        dw      SUBTRACT                // -
  51+ 36EB 0C 25                        dw      EXIT                    // ;
  52+ 36ED
  53+ 36ED              //  ______________________________________________________________________
  54+ 36ED              //
  55+ 36ED              // update       --
  56+ 36ED              // mark the last used block to be written to disk
  57+ 36ED                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36ED             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36ED             >
  57+ 36ED             >Dict_Ptr        defl    $
  57+ 36ED             >
  57+ 36ED             >//              ______________________________________________________________________
  57+ 36ED             >//              Heap part
  57+ 36ED             >
  57+ 36ED             >
  57+ 36ED             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAA6             >
  57+ EAA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAA6             >Latest_Definition defl  Heap_Ptr
  57+ EAA6             >
  57+ EAA6             >                // dummy db directives used to calculate length of namec
  57+ EAA6 55 50 44 41 >                db      "UPDATE"
  57+ EAAA 54 45       >
  57+ EAAC             >len_NFA         defl    $ - temp_NFA
  57+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAA6             >
  57+ EAA6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAA7 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAAB 54 45       >
  57+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAAC C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAAD             >
  57+ EAAD 9D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  57+ EAAF             >
  57+ EAAF             >mirror_Ptr      defl    $
  57+ EAAF             >
  57+ EAAF EF 36       >                dw      Dict_Ptr + 2        // xt
  57+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAB1             >
  57+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAB1             >
  57+ EAB1             >//              ______________________________________________________________________
  57+ EAB1             >//              Dictionary part
  57+ EAB1             >
  57+ EAB1             >                org     Dict_Ptr
  57+ 36ED             >
  57+ 36ED AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36EF             >
  57+ 36EF             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36EF CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36F2             >
  57+ 36F2             >
  57+ 36F2             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36F2             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36F2             >
  57+ 36F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36F2 46 28 54 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36F6 54 26
  59+ 36F8 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36FC DB 24
  60+ 36FE 46 28 54 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 3702 5E 26
  61+ 3704 0C 25                        dw      EXIT                    // ;
  62+ 3706
  63+ 3706
  64+ 3706              //  ______________________________________________________________________
  65+ 3706              //
  66+ 3706              // empty-buffers --
  67+ 3706                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 3706             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 3706             >
  67+ 3706             >Dict_Ptr        defl    $
  67+ 3706             >
  67+ 3706             >//              ______________________________________________________________________
  67+ 3706             >//              Heap part
  67+ 3706             >
  67+ 3706             >
  67+ 3706             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAB1             >
  67+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAB1             >Latest_Definition defl  Heap_Ptr
  67+ EAB1             >
  67+ EAB1             >                // dummy db directives used to calculate length of namec
  67+ EAB1 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAB5 59 2D 42 55 >
  67+ EAB9 46 46 45 52 >
  67+ EABD 53          >
  67+ EABE             >len_NFA         defl    $ - temp_NFA
  67+ EABE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAB1             >
  67+ EAB1 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAB2 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAB6 59 2D 42 55 >
  67+ EABA 46 46 45 52 >
  67+ EABE 53          >
  67+ EABF             >                org     $-1                 // alter last byte of Name just above to set
  67+ EABE D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EABF             >
  67+ EABF A6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAC1             >Prev_Ptr        defl    Heap_Ptr
  67+ EAC1             >
  67+ EAC1             >mirror_Ptr      defl    $
  67+ EAC1             >
  67+ EAC1 08 37       >                dw      Dict_Ptr + 2        // xt
  67+ EAC3             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAC3             >
  67+ EAC3             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAC3             >
  67+ EAC3             >//              ______________________________________________________________________
  67+ EAC3             >//              Dictionary part
  67+ EAC3             >
  67+ EAC3             >                org     Dict_Ptr
  67+ 3706             >
  67+ 3706 C1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 3708             >
  67+ 3708             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 3708 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 370B             >
  67+ 370B             >
  67+ 370B             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 370B             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 370B             >
  67+ 370B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 370B D4 27 54 26                  dw      FIRST, FETCH            // first @
  69+ 370F DA 27 54 26                  dw      LIMIT, FETCH            // limit @
  70+ 3713 BF 25 AF 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 3717 56 2D
  71+ 3719 0C 25                        dw      EXIT                    // ;
  72+ 371B
  73+ 371B              //  ______________________________________________________________________
  74+ 371B              //
  75+ 371B              // buffer       n -- a
  76+ 371B              // read block n and gives the address to a buffer
  77+ 371B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 371B              // disk before reading the block n.
  79+ 371B
  80+ 371B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 371B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 371B             >
  80+ 371B             >Dict_Ptr        defl    $
  80+ 371B             >
  80+ 371B             >//              ______________________________________________________________________
  80+ 371B             >//              Heap part
  80+ 371B             >
  80+ 371B             >
  80+ 371B             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAC3             >
  80+ EAC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAC3             >Latest_Definition defl  Heap_Ptr
  80+ EAC3             >
  80+ EAC3             >                // dummy db directives used to calculate length of namec
  80+ EAC3 42 55 46 46 >                db      "BUFFER"
  80+ EAC7 45 52       >
  80+ EAC9             >len_NFA         defl    $ - temp_NFA
  80+ EAC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAC3             >
  80+ EAC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAC4 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAC8 45 52       >
  80+ EACA             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAC9 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EACA             >
  80+ EACA B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EACC             >Prev_Ptr        defl    Heap_Ptr
  80+ EACC             >
  80+ EACC             >mirror_Ptr      defl    $
  80+ EACC             >
  80+ EACC 1D 37       >                dw      Dict_Ptr + 2        // xt
  80+ EACE             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EACE             >
  80+ EACE             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EACE             >
  80+ EACE             >//              ______________________________________________________________________
  80+ EACE             >//              Dictionary part
  80+ EACE             >
  80+ EACE             >                org     Dict_Ptr
  80+ 371B             >
  80+ 371B CC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 371D             >
  80+ 371D             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 371D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 3720             >
  80+ 3720             >
  80+ 3720             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 3720             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 3720             >
  80+ 3720             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 3720 40 28 54 26                  dw      USED, FETCH             // used @
  82+ 3724 E3 25 16 25                  dw      DUP, TO_R               // dup >r
  83+ 3728                                                              // begin
  84+ 3728              Buffer_Begin:
  85+ 3728 C8 36                        dw          PBUF                //      +buf
  86+ 372A                                                              // until
  87+ 372A 8F 20                        dw      ZBRANCH
  88+ 372C FC FF                        dw      Buffer_Begin - $
  89+ 372E 40 28 5E 26                  dw      USED, STORE             // used !
  90+ 3732 2C 25 54 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3736 43 25
  91+ 3738                                                              // if
  92+ 3738 8F 20                        dw      ZBRANCH
  93+ 373A 14 00                        dw      Buffer_Endif - $
  94+ 373C 2C 25 8D 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 3740 2C 25 54 26                  dw          R_OP, FETCH         //      r fetch
  96+ 3744 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3748 CC 24                        dw          AND_OP              //      and
  98+ 374A 4B 27 9B 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 374E              Buffer_Endif:                                   // endif
 100+ 374E 2C 25 5E 26                  dw      R_OP, STORE             // r !
 101+ 3752 2C 25 46 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3756 5E 26
 102+ 3758 21 25 8D 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 375C 0C 25                        dw      EXIT                    // ;
 104+ 375E
 105+ 375E              //  ______________________________________________________________________
 106+ 375E              //
 107+ 375E              // block        n -- a
 108+ 375E              // Leaves the buffer address that contains the block n.
 109+ 375E              // If the block is not already present, it will be loaded from disk
 110+ 375E              // The block previously inside the buffer, if modified, is rewritten to
 111+ 375E              // disk before reading the block n.
 112+ 375E              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 375E
 114+ 375E                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 375E             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 375E             >
 114+ 375E             >Dict_Ptr        defl    $
 114+ 375E             >
 114+ 375E             >//              ______________________________________________________________________
 114+ 375E             >//              Heap part
 114+ 375E             >
 114+ 375E             >
 114+ 375E             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EACE             >
 114+ EACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EACE             >Latest_Definition defl  Heap_Ptr
 114+ EACE             >
 114+ EACE             >                // dummy db directives used to calculate length of namec
 114+ EACE 42 4C 4F 43 >                db      "BLOCK"
 114+ EAD2 4B          >
 114+ EAD3             >len_NFA         defl    $ - temp_NFA
 114+ EAD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EACE             >
 114+ EACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EACF 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAD3 4B          >
 114+ EAD4             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAD3 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAD4             >
 114+ EAD4 C3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAD6             >Prev_Ptr        defl    Heap_Ptr
 114+ EAD6             >
 114+ EAD6             >mirror_Ptr      defl    $
 114+ EAD6             >
 114+ EAD6 60 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAD8             >
 114+ EAD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAD8             >
 114+ EAD8             >//              ______________________________________________________________________
 114+ EAD8             >//              Dictionary part
 114+ EAD8             >
 114+ EAD8             >                org     Dict_Ptr
 114+ 375E             >
 114+ 375E D6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 3760             >
 114+ 3760             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 3760 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3763             >
 114+ 3763             >
 114+ 3763             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3763             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3763             >
 114+ 3763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3763                          //  dw      OFFSET, FETCH           // offset @
 116+ 3763                          //  dw      PLUS
 117+ 3763 16 25                        dw      TO_R                    // + >r
 118+ 3765 46 28 54 26                  dw      PREV, FETCH             // prev @
 119+ 3769 E3 25 54 26                  dw      DUP, FETCH              // dup @
 120+ 376D 2C 25 AF 28                  dw      R_OP, SUBTRACT          // r -
 121+ 3771 E3 25 5E 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3775                                                              // if
 123+ 3775 8F 20                        dw        ZBRANCH
 124+ 3777 32 00                        dw        Block_Endif_1 - $
 125+ 3779              Block_Begin:                                    //      begin
 126+ 3779 C8 36 31 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 377D                                                              //          if
 128+ 377D 8F 20                        dw          ZBRANCH
 129+ 377F 12 00                        dw          Block_Endif_2 - $
 130+ 3781 C8 25                        dw              DROP            //              drop
 131+ 3783 2C 25 1D 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 3787 E3 25                        dw              DUP             //              dup
 133+ 3789 2C 25 52 27                  dw              R_OP, ONE       //              r 1
 134+ 378D 9B 36                        dw              READ_WRITE      //              r/w
 135+ 378F 99 25                        dw              TWO_MINUS       //              2-
 136+ 3791              Block_Endif_2:                                  //          endif
 137+ 3791 E3 25 54 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3795 2C 25
 138+ 3797 AF 28 E3 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 379B 5E 25 31 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 379F                                                              //      until
 141+ 379F 8F 20                        dw        ZBRANCH
 142+ 37A1 D8 FF                        dw        Block_Begin - $
 143+ 37A3 E3 25 46 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 37A7 5E 26
 144+ 37A9              Block_Endif_1:                                  // endif
 145+ 37A9 21 25 C8 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 37AD 8D 25
 146+ 37AF 0C 25                        dw      EXIT                    // ;
 147+ 37B1
 148+ 37B1              //  ______________________________________________________________________
 149+ 37B1              //
 150+ 37B1              // #buff        -- n
 151+ 37B1              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 37B1                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 37B1             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 37B1             >
 152+ 37B1             >Dict_Ptr        defl    $
 152+ 37B1             >
 152+ 37B1             >//              ______________________________________________________________________
 152+ 37B1             >//              Heap part
 152+ 37B1             >
 152+ 37B1             >
 152+ 37B1             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAD8             >
 152+ EAD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAD8             >Latest_Definition defl  Heap_Ptr
 152+ EAD8             >
 152+ EAD8             >                // dummy db directives used to calculate length of namec
 152+ EAD8 23 42 55 46 >                db      "#BUFF"
 152+ EADC 46          >
 152+ EADD             >len_NFA         defl    $ - temp_NFA
 152+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAD8             >
 152+ EAD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAD9 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EADD 46          >
 152+ EADE             >                org     $-1                 // alter last byte of Name just above to set
 152+ EADD C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EADE             >
 152+ EADE CE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAE0             >Prev_Ptr        defl    Heap_Ptr
 152+ EAE0             >
 152+ EAE0             >mirror_Ptr      defl    $
 152+ EAE0             >
 152+ EAE0 B3 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAE2             >
 152+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAE2             >
 152+ EAE2             >//              ______________________________________________________________________
 152+ EAE2             >//              Dictionary part
 152+ EAE2             >
 152+ EAE2             >                org     Dict_Ptr
 152+ 37B1             >
 152+ 37B1 E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 37B3             >
 152+ 37B3             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 37B3 CD 1F 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 37B6             >
 152+ 37B6             >
 152+ 37B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 37B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 37B6             >
 152+ 37B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 37B6 07 00       >                dw      7
 153+ 37B8
 154+ 37B8              //  ______________________________________________________________________
 155+ 37B8              //
 156+ 37B8              // flush        --
 157+ 37B8                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 37B8             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 37B8             >
 157+ 37B8             >Dict_Ptr        defl    $
 157+ 37B8             >
 157+ 37B8             >//              ______________________________________________________________________
 157+ 37B8             >//              Heap part
 157+ 37B8             >
 157+ 37B8             >
 157+ 37B8             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAE2             >
 157+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAE2             >Latest_Definition defl  Heap_Ptr
 157+ EAE2             >
 157+ EAE2             >                // dummy db directives used to calculate length of namec
 157+ EAE2 46 4C 55 53 >                db      "FLUSH"
 157+ EAE6 48          >
 157+ EAE7             >len_NFA         defl    $ - temp_NFA
 157+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAE2             >
 157+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAE3 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAE7 48          >
 157+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAE7 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAE8             >
 157+ EAE8 D8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 157+ EAEA             >
 157+ EAEA             >mirror_Ptr      defl    $
 157+ EAEA             >
 157+ EAEA BA 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAEC             >
 157+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAEC             >
 157+ EAEC             >//              ______________________________________________________________________
 157+ EAEC             >//              Dictionary part
 157+ EAEC             >
 157+ EAEC             >                org     Dict_Ptr
 157+ 37B8             >
 157+ 37B8 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 37BA             >
 157+ 37BA             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 37BA CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37BD             >
 157+ 37BD             >
 157+ 37BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37BD             >
 157+ 37BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37BD B3 37 77 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37C1 4B 27
 159+ 37C3              Flush_Do:                                       // do
 160+ 37C3 CE 20                        dw      C_DO
 161+ 37C5 4B 27 1D 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37C9 C8 25
 162+ 37CB                                                              // loop
 163+ 37CB 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37CF 84 3F 54 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37D3 B3 23 C8 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37D7 0C 25                        dw      EXIT                    // exit
 167+ 37D9
 168+ 37D9              //  ______________________________________________________________________
 169+ 37D9              //
 170+ 37D9              // f_getline    a m fh -- n
 171+ 37D9              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37D9              // Address a is left for subsequent processing
 173+ 37D9              // and n as the actual number of byte read, that is the length of line
 174+ 37D9                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37D9             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37D9             >
 174+ 37D9             >Dict_Ptr        defl    $
 174+ 37D9             >
 174+ 37D9             >//              ______________________________________________________________________
 174+ 37D9             >//              Heap part
 174+ 37D9             >
 174+ 37D9             >
 174+ 37D9             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAEC             >
 174+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAEC             >Latest_Definition defl  Heap_Ptr
 174+ EAEC             >
 174+ EAEC             >                // dummy db directives used to calculate length of namec
 174+ EAEC 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAF0 54 4C 49 4E >
 174+ EAF4 45          >
 174+ EAF5             >len_NFA         defl    $ - temp_NFA
 174+ EAF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAEC             >
 174+ EAEC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAED 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAF1 54 4C 49 4E >
 174+ EAF5 45          >
 174+ EAF6             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAF5 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAF6             >
 174+ EAF6 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAF8             >Prev_Ptr        defl    Heap_Ptr
 174+ EAF8             >
 174+ EAF8             >mirror_Ptr      defl    $
 174+ EAF8             >
 174+ EAF8 DB 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAFA             >
 174+ EAFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAFA             >
 174+ EAFA             >//              ______________________________________________________________________
 174+ EAFA             >//              Dictionary part
 174+ EAFA             >
 174+ EAFA             >                org     Dict_Ptr
 174+ 37D9             >
 174+ 37D9 F8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37DB             >
 174+ 37DB             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37DB CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37DE             >
 174+ 37DE             >
 174+ 37DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37DE             >
 174+ 37DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37DE 16 25                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37E0 D3 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37E2 2C 25 C0 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37E6 3D 20 22 00                  dw      LIT, 34, QERROR         // 44 ?error        ( m a m d )
 178+ 37EA AC 2A
 179+ 37EC
 180+ 37EC 25 26 BF 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37F0 77 25 DC 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37F4
 183+ 37F4 2C 25 DA 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37F8 3D 20 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 37FC AC 2A
 185+ 37FE                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37FE 8F 20                        dw      ZBRANCH
 187+ 3800 3C 00                        dw      FGetline_Else - $
 188+ 3802 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 3806 C3 21
 189+ 3808 C8 25 CD 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 380C DC 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 380E 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 3812 C3 21
 192+ 3814 C8 25 CD 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 3818 EA 25 F4 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 381C E3 25 5E 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 3820 5E 26
 195+ 3822 E3 25 16 25                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 3826 25 26 21 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 382A 4B 27 68 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 382E 21 25 89 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 3832 3D 20 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 3836 AC 2A
 200+ 3838                                                              // else
 201+ 3838 82 20                        dw      BRANCH
 202+ 383A 0C 00                        dw      FGetline_Endif - $
 203+ 383C              FGetline_Else:
 204+ 383C 21 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 383E 25 26 1F 26                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 3842 C8 25 4B 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3846              FGetline_Endif:                                 // endif
 208+ 3846 16 25 E3 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 384A E3 25
 209+ 384C 77 25 DC 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 3850 2C 25 4D 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3854 32 26 5E 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3858 4B 27 DC 25                  dw      ZERO, SWAP              // 0 swap
 213+ 385C 91 25 5E 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 3860 2C 25 5E 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3864 7E 25
 215+ 3866 DC 25 2C 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 386A AF 28
 216+ 386C 61 2D                        dw      BLANK                   // blank
 217+ 386E 21 25                        dw      R_TO                    // r>                   ( n )
 218+ 3870 0C 25                        dw      EXIT                    // ;
 219+ 3872
 220+ 3872              //  ______________________________________________________________________
 221+ 3872              //
 222+ 3872              // f_include    fh --
 223+ 3872              // Given a filehandle includes the source from file
 224+ 3872                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 3872             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 3872             >
 224+ 3872             >Dict_Ptr        defl    $
 224+ 3872             >
 224+ 3872             >//              ______________________________________________________________________
 224+ 3872             >//              Heap part
 224+ 3872             >
 224+ 3872             >
 224+ 3872             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAFA             >
 224+ EAFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAFA             >Latest_Definition defl  Heap_Ptr
 224+ EAFA             >
 224+ EAFA             >                // dummy db directives used to calculate length of namec
 224+ EAFA 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAFE 43 4C 55 44 >
 224+ EB02 45          >
 224+ EB03             >len_NFA         defl    $ - temp_NFA
 224+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAFA             >
 224+ EAFA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAFB 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAFF 43 4C 55 44 >
 224+ EB03 45          >
 224+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB03 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB04             >
 224+ EB04 EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB06             >Prev_Ptr        defl    Heap_Ptr
 224+ EB06             >
 224+ EB06             >mirror_Ptr      defl    $
 224+ EB06             >
 224+ EB06 74 38       >                dw      Dict_Ptr + 2        // xt
 224+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB08             >
 224+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB08             >
 224+ EB08             >//              ______________________________________________________________________
 224+ EB08             >//              Dictionary part
 224+ EB08             >
 224+ EB08             >                org     Dict_Ptr
 224+ 3872             >
 224+ 3872 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3874             >
 224+ 3874             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3874 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3877             >
 224+ 3877             >
 224+ 3877             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3877             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3877             >
 224+ 3877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3877 EC 27 54 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 387B 16 25
 226+ 387D F2 27 54 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 3881 16 25
 227+ 3883 58 28 54 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3887 16 25
 228+ 3889 2C 25                        dw      R_OP                    // r
 229+ 388B 4C 25                        dw      ZGREATER                // 0>  (filehandle)
 230+ 388D                                                              // if
 231+ 388D 8F 20                        dw      ZBRANCH
 232+ 388F 20 00                        dw      FInclude_Else_1 - $
 233+ 3891 2C 25 C0 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 3895 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 3899 AC 2A
 235+ 389B F2 27 54 26                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 389F 99 25                        dw          TWO_MINUS
 237+ 38A1 5E 28 54 26                  dw          SPAN, FETCH         //      span @ -
 238+ 38A5 AF 28                        dw          SUBTRACT
 239+ 38A7 A4 28 68 25                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 38AB                                                              // else
 241+ 38AB 82 20                        dw      BRANCH
 242+ 38AD 06 00                        dw      FInclude_Endif_1 - $
 243+ 38AF              FInclude_Else_1:
 244+ 38AF 4B 27 4B 27                  dw          ZERO, ZERO          //      0 0
 245+ 38B3                                                              // endif
 246+ 38B3              FInclude_Endif_1:
 247+ 38B3 16 25 16 25                  dw      TO_R, TO_R              // >r >r
 248+ 38B7 58 28 5E 26                  dw      SOURCE_ID, STORE        // source-id !
 249+ 38BB              FInclude_Begin:                                 // begin
 250+ 38BB 52 27 60 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 38BF 7C 27
 251+ 38C1 32 26 61 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 38C5 DC 25 77 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 38C9 DC 25 91 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 38CD 58 28 54 26                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 38D1 DB 37                        dw          F_GETLINE           //      f_getline
 256+ 38D3                                                              // while
 257+ 38D3 8F 20                        dw      ZBRANCH
 258+ 38D5 14 00                        dw      FInclude_Repeat - $
 259+ 38D7 52 27 EC 27                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 38DB 5E 26
 260+ 38DD 4B 27 F2 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 38E1 5E 26
 261+ 38E3 9B 31                        dw          INTERPRET           //      interpret
 262+ 38E5 82 20                        dw      BRANCH
 263+ 38E7 D4 FF                        dw      FInclude_Begin - $
 264+ 38E9              FInclude_Repeat:                                // repeat
 265+ 38E9                              //  close current file
 266+ 38E9 58 28 54 26                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 38ED A6 23                        dw      F_CLOSE                 // f_close
 268+ 38EF 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 38F3 AC 2A
 269+ 38F5
 270+ 38F5 21 25 21 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 38F9 21 25
 271+ 38FB E3 25 58 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 38FF 5E 26
 272+ 3901 4C 25                        dw      ZGREATER                // 0>
 273+ 3903                                                              // if
 274+ 3903 8F 20                        dw      ZBRANCH
 275+ 3905 12 00                        dw      FInclude_Else_2 - $
 276+ 3907 58 28 54 26                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 390B 89 23                        dw          F_SEEK              //      f_seek
 278+ 390D 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 3911 AC 2A
 279+ 3913                                                              // else
 280+ 3913 82 20                        dw      BRANCH
 281+ 3915 04 00                        dw      FInclude_Endif_2 - $
 282+ 3917              FInclude_Else_2:
 283+ 3917 1F 26                        dw          TWO_DROP            //      2drop
 284+ 3919              FInclude_Endif_2:                               // endif
 285+ 3919 21 25 F2 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 391D 5E 26
 286+ 391F 21 25 EC 27                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 3923 5E 26
 287+ 3925 0C 25                        dw      EXIT                    // ;
 288+ 3927
 289+ 3927              //  ______________________________________________________________________
 290+ 3927              //
 291+ 3927              // open<         -- fh
 292+ 3927              // Open the following filename and return it file-handle
 293+ 3927              // Used in the form OPEN CCCC
 294+ 3927                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 3927             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 3927             >
 294+ 3927             >Dict_Ptr        defl    $
 294+ 3927             >
 294+ 3927             >//              ______________________________________________________________________
 294+ 3927             >//              Heap part
 294+ 3927             >
 294+ 3927             >
 294+ 3927             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB08             >
 294+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB08             >Latest_Definition defl  Heap_Ptr
 294+ EB08             >
 294+ EB08             >                // dummy db directives used to calculate length of namec
 294+ EB08 4F 50 45 4E >                db      "OPEN<"
 294+ EB0C 3C          >
 294+ EB0D             >len_NFA         defl    $ - temp_NFA
 294+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB08             >
 294+ EB08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB09 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB0D 3C          >
 294+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB0D BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB0E             >
 294+ EB0E FA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB10             >Prev_Ptr        defl    Heap_Ptr
 294+ EB10             >
 294+ EB10             >mirror_Ptr      defl    $
 294+ EB10             >
 294+ EB10 29 39       >                dw      Dict_Ptr + 2        // xt
 294+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB12             >
 294+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB12             >
 294+ EB12             >//              ______________________________________________________________________
 294+ EB12             >//              Dictionary part
 294+ EB12             >
 294+ EB12             >                org     Dict_Ptr
 294+ 3927             >
 294+ 3927 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 3929             >
 294+ 3929             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 3929 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 392C             >
 294+ 392C             >
 294+ 392C             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 392C             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 392C             >
 294+ 392C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 392C 6E 27                        dw      BL
 296+ 392E 8E 2D E8 2B                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 3932 BF 25
 297+ 3934 5E 25 4B 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 3938 DC 25 5E 26
 298+ 393C 7F 2D 52 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 3940 0E 24
 299+ 3942 3D 20 2B 00                  dw      LIT, 43                 // 43
 300+ 3946 AC 2A                        dw      QERROR                  // ?error
 301+ 3948 0C 25                        dw      EXIT                    // ;
 302+ 394A
 303+ 394A              //  ______________________________________________________________________
 304+ 394A              //
 305+ 394A              // use          -- cccc
 306+ 394A              // Include the following filename
 307+ 394A                              Colon_Def USE, "USE", is_normal
 307+ 394A             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 307+ 394A             >
 307+ 394A             >Dict_Ptr        defl    $
 307+ 394A             >
 307+ 394A             >//              ______________________________________________________________________
 307+ 394A             >//              Heap part
 307+ 394A             >
 307+ 394A             >
 307+ 394A             >                org     (Heap_Ptr & $1FFF) + $E000
 307+ EB12             >
 307+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ EB12             >Latest_Definition defl  Heap_Ptr
 307+ EB12             >
 307+ EB12             >                // dummy db directives used to calculate length of namec
 307+ EB12 55 53 45    >                db      "USE"
 307+ EB15             >len_NFA         defl    $ - temp_NFA
 307+ EB15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ EB12             >
 307+ EB12 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ EB13 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 307+ EB16             >                org     $-1                 // alter last byte of Name just above to set
 307+ EB15 C5          >                db      {b $} | END_BIT     // msb as name end
 307+ EB16             >
 307+ EB16 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 307+ EB18             >Prev_Ptr        defl    Heap_Ptr
 307+ EB18             >
 307+ EB18             >mirror_Ptr      defl    $
 307+ EB18             >
 307+ EB18 4C 39       >                dw      Dict_Ptr + 2        // xt
 307+ EB1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 307+ EB1A             >
 307+ EB1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 307+ EB1A             >
 307+ EB1A             >//              ______________________________________________________________________
 307+ EB1A             >//              Dictionary part
 307+ EB1A             >
 307+ EB1A             >                org     Dict_Ptr
 307+ 394A             >
 307+ 394A 18 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 307+ 394C             >
 307+ 394C             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 394C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 394F             >
 307+ 394F             >
 307+ 394F             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 394F             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 394F             >
 307+ 394F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 394F 29 39                        dw      OPEN_FH                 // open<
 309+ 3951 84 3F 54 26                  dw      BLK_FH, FETCH           // blk-fh @
 310+ 3955 A6 23 C8 25                  dw      F_CLOSE, DROP           // f_close drop
 311+ 3959 84 3F 5E 26                  dw      BLK_FH, STORE           // blk-fh !
 312+ 395D 0C 25                        dw      EXIT                    // ;
 313+ 395F
 314+ 395F              //  ______________________________________________________________________
 315+ 395F              //
 316+ 395F              // include      -- cccc
 317+ 395F              // Include the following filename
 318+ 395F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 395F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 395F             >
 318+ 395F             >Dict_Ptr        defl    $
 318+ 395F             >
 318+ 395F             >//              ______________________________________________________________________
 318+ 395F             >//              Heap part
 318+ 395F             >
 318+ 395F             >
 318+ 395F             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB1A             >
 318+ EB1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB1A             >Latest_Definition defl  Heap_Ptr
 318+ EB1A             >
 318+ EB1A             >                // dummy db directives used to calculate length of namec
 318+ EB1A 49 4E 43 4C >                db      "INCLUDE"
 318+ EB1E 55 44 45    >
 318+ EB21             >len_NFA         defl    $ - temp_NFA
 318+ EB21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB1A             >
 318+ EB1A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB1B 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB1F 55 44 45    >
 318+ EB22             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB21 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB22             >
 318+ EB22 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB24             >Prev_Ptr        defl    Heap_Ptr
 318+ EB24             >
 318+ EB24             >mirror_Ptr      defl    $
 318+ EB24             >
 318+ EB24 61 39       >                dw      Dict_Ptr + 2        // xt
 318+ EB26             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB26             >
 318+ EB26             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB26             >
 318+ EB26             >//              ______________________________________________________________________
 318+ EB26             >//              Dictionary part
 318+ EB26             >
 318+ EB26             >                org     Dict_Ptr
 318+ 395F             >
 318+ 395F 24 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 3961             >
 318+ 3961             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 3961 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 3964             >
 318+ 3964             >
 318+ 3964             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 3964             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 3964             >
 318+ 3964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 3964 29 39                        dw      OPEN_FH                 // open
 320+ 3966 74 38                        dw      F_INCLUDE               //  f_include
 321+ 3968 0C 25                        dw      EXIT                    // ;
 322+ 396A
 323+ 396A              //  ______________________________________________________________________
 324+ 396A              //
 325+ 396A              // needs
 326+ 396A              // check for cccc exists in vocabulary
 327+ 396A              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 396A
 329+ 396A              // temp filename cccc.f as counted string zero-padded
 330+ 396A                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 396A             >
 330+ 396A             >Dict_Ptr        defl    $
 330+ 396A             >
 330+ 396A             >//              ______________________________________________________________________
 330+ 396A             >//              Heap part
 330+ 396A             >
 330+ 396A             >
 330+ 396A             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB26             >
 330+ EB26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB26             >Latest_Definition defl  Heap_Ptr
 330+ EB26             >
 330+ EB26             >                // dummy db directives used to calculate length of namec
 330+ EB26 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB2A 53 2D 57    >
 330+ EB2D             >len_NFA         defl    $ - temp_NFA
 330+ EB2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB26             >
 330+ EB26 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB27 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB2B 53 2D 57    >
 330+ EB2E             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB2D D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB2E             >
 330+ EB2E 1A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB30             >Prev_Ptr        defl    Heap_Ptr
 330+ EB30             >
 330+ EB30             >mirror_Ptr      defl    $
 330+ EB30             >
 330+ EB30 6C 39       >                dw      Dict_Ptr + 2        // xt
 330+ EB32             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB32             >
 330+ EB32             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB32             >
 330+ EB32             >//              ______________________________________________________________________
 330+ EB32             >//              Dictionary part
 330+ EB32             >
 330+ EB32             >                org     Dict_Ptr
 330+ 396A             >
 330+ 396A 30 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 396C             >
 330+ 396C             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 396C CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 396F             >
 330+ 396F             >
 330+ 396F             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 396F             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 396F             >
 330+ 396F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 396F 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 3992              // temp complete path+filename
 333+ 3992                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 3992             >
 333+ 3992             >Dict_Ptr        defl    $
 333+ 3992             >
 333+ 3992             >//              ______________________________________________________________________
 333+ 3992             >//              Heap part
 333+ 3992             >
 333+ 3992             >
 333+ 3992             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB32             >
 333+ EB32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB32             >Latest_Definition defl  Heap_Ptr
 333+ EB32             >
 333+ EB32             >                // dummy db directives used to calculate length of namec
 333+ EB32 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB36 53 2D 46 4E >
 333+ EB3A             >len_NFA         defl    $ - temp_NFA
 333+ EB3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB32             >
 333+ EB32 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB33 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB37 53 2D 46 4E >
 333+ EB3B             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB3A CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB3B             >
 333+ EB3B 26 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB3D             >Prev_Ptr        defl    Heap_Ptr
 333+ EB3D             >
 333+ EB3D             >mirror_Ptr      defl    $
 333+ EB3D             >
 333+ EB3D 94 39       >                dw      Dict_Ptr + 2        // xt
 333+ EB3F             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB3F             >
 333+ EB3F             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB3F             >
 333+ EB3F             >//              ______________________________________________________________________
 333+ EB3F             >//              Dictionary part
 333+ EB3F             >
 333+ EB3F             >                org     Dict_Ptr
 333+ 3992             >
 333+ 3992 3D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 3994             >
 333+ 3994             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 3994 CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 3997             >
 333+ 3997             >
 333+ 3997             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 3997             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 3997             >
 333+ 3997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 3997 63 3A 2F 74  Param:          db      "c:/tools/vforth/lib/autoexec-dot.f", 0
 334+ 399B 6F 6F 6C 73
 334+ 399F 2F 76 66 6F
 334+ 39A3 72 74 68 2F
 334+ 39A7 6C 69 62 2F
 334+ 39AB 61 75 74 6F
 334+ 39AF 65 78 65 63
 334+ 39B3 2D 64 6F 74
 334+ 39B7 2E 66 00
 335+ 39BA 00 00 00...                  ds      30
 336+ 39D8              // constant path
 337+ 39D8                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 39D8             >
 337+ 39D8             >Dict_Ptr        defl    $
 337+ 39D8             >
 337+ 39D8             >//              ______________________________________________________________________
 337+ 39D8             >//              Heap part
 337+ 39D8             >
 337+ 39D8             >
 337+ 39D8             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB3F             >
 337+ EB3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB3F             >Latest_Definition defl  Heap_Ptr
 337+ EB3F             >
 337+ EB3F             >                // dummy db directives used to calculate length of namec
 337+ EB3F 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB43 53 2D 49 4E >
 337+ EB47 43          >
 337+ EB48             >len_NFA         defl    $ - temp_NFA
 337+ EB48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB3F             >
 337+ EB3F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB40 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB44 53 2D 49 4E >
 337+ EB48 43          >
 337+ EB49             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB48 C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB49             >
 337+ EB49 32 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB4B             >Prev_Ptr        defl    Heap_Ptr
 337+ EB4B             >
 337+ EB4B             >mirror_Ptr      defl    $
 337+ EB4B             >
 337+ EB4B DA 39       >                dw      Dict_Ptr + 2        // xt
 337+ EB4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB4D             >
 337+ EB4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB4D             >
 337+ EB4D             >//              ______________________________________________________________________
 337+ EB4D             >//              Dictionary part
 337+ EB4D             >
 337+ EB4D             >                org     Dict_Ptr
 337+ 39D8             >
 337+ 39D8 4B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 39DA             >
 337+ 39DA             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 39DA CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 39DD             >
 337+ 39DD             >
 337+ 39DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 39DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 39DD             >
 337+ 39DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 39DD 04 69 6E 63                  db      4, "inc/", 0
 338+ 39E1 2F 00
 339+ 39E3                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 39E3             >
 339+ 39E3             >Dict_Ptr        defl    $
 339+ 39E3             >
 339+ 39E3             >//              ______________________________________________________________________
 339+ 39E3             >//              Heap part
 339+ 39E3             >
 339+ 39E3             >
 339+ 39E3             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB4D             >
 339+ EB4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB4D             >Latest_Definition defl  Heap_Ptr
 339+ EB4D             >
 339+ EB4D             >                // dummy db directives used to calculate length of namec
 339+ EB4D 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB51 53 2D 4C 49 >
 339+ EB55 42          >
 339+ EB56             >len_NFA         defl    $ - temp_NFA
 339+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB4D             >
 339+ EB4D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB4E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB52 53 2D 4C 49 >
 339+ EB56 42          >
 339+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB56 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB57             >
 339+ EB57 3F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB59             >Prev_Ptr        defl    Heap_Ptr
 339+ EB59             >
 339+ EB59             >mirror_Ptr      defl    $
 339+ EB59             >
 339+ EB59 E5 39       >                dw      Dict_Ptr + 2        // xt
 339+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB5B             >
 339+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB5B             >
 339+ EB5B             >//              ______________________________________________________________________
 339+ EB5B             >//              Dictionary part
 339+ EB5B             >
 339+ EB5B             >                org     Dict_Ptr
 339+ 39E3             >
 339+ 39E3 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 39E5             >
 339+ 39E5             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 39E5 CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 39E8             >
 339+ 39E8             >
 339+ 39E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 39E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 39E8             >
 339+ 39E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 39E8 04 6C 69 62                  db      4, "lib/", 0
 340+ 39EC 2F 00
 341+ 39EE
 342+ 39EE              // Concatenate path at a and filename and include it
 343+ 39EE              // No error is issued if filename doesn't exist.
 344+ 39EE                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 39EE             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 39EE             >
 344+ 39EE             >Dict_Ptr        defl    $
 344+ 39EE             >
 344+ 39EE             >//              ______________________________________________________________________
 344+ 39EE             >//              Heap part
 344+ 39EE             >
 344+ 39EE             >
 344+ 39EE             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB5B             >
 344+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB5B             >Latest_Definition defl  Heap_Ptr
 344+ EB5B             >
 344+ EB5B             >                // dummy db directives used to calculate length of namec
 344+ EB5B 4E 45 45 44 >                db      "NEEDS/"
 344+ EB5F 53 2F       >
 344+ EB61             >len_NFA         defl    $ - temp_NFA
 344+ EB61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB5B             >
 344+ EB5B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB5C 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB60 53 2F       >
 344+ EB62             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB61 AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB62             >
 344+ EB62 4D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB64             >Prev_Ptr        defl    Heap_Ptr
 344+ EB64             >
 344+ EB64             >mirror_Ptr      defl    $
 344+ EB64             >
 344+ EB64 F0 39       >                dw      Dict_Ptr + 2        // xt
 344+ EB66             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB66             >
 344+ EB66             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB66             >
 344+ EB66             >//              ______________________________________________________________________
 344+ EB66             >//              Dictionary part
 344+ EB66             >
 344+ EB66             >                org     Dict_Ptr
 344+ 39EE             >
 344+ 39EE 64 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 39F0             >
 344+ 39F0             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 39F0 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 39F3             >
 344+ 39F3             >
 344+ 39F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 39F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 39F3             >
 344+ 39F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 39F3 E8 2B D3 25                  dw      COUNT, TUCK             // n a n
 346+ 39F7 94 39 DC 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 39FB 4D 24
 347+ 39FD 94 39 5E 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 3A01 6C 39 77 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 3A05 DC 25
 349+ 3A07 3D 20 23 00                  dw      LIT, 35
 350+ 3A0B 4D 24                        dw      CMOVE
 351+ 3A0D 94 39                        dw      NEEDS_FN
 352+ 3A0F 7F 2D 52 27                  dw      PAD, ONE, F_OPEN
 352+ 3A13 0E 24
 353+ 3A15 31 25                        dw      ZEQUAL
 354+ 3A17 8F 20                        dw      ZBRANCH
 355+ 3A19 08 00                        dw      Needs_1 - $
 356+ 3A1B 74 38                        dw          F_INCLUDE
 357+ 3A1D 82 20                        dw      BRANCH
 358+ 3A1F 04 00                        dw      Needs_2 - $
 359+ 3A21              Needs_1:
 360+ 3A21              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 3A21              //              dw          LIT, 43, MESSAGE
 362+ 3A21 C8 25                        dw          DROP
 363+ 3A23              Needs_2:
 364+ 3A23 0C 25                        dw      EXIT                    // ;
 365+ 3A25
 366+ 3A25
 367+ 3A25                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 3A25             >
 367+ 3A25             >Dict_Ptr        defl    $
 367+ 3A25             >
 367+ 3A25             >//              ______________________________________________________________________
 367+ 3A25             >//              Heap part
 367+ 3A25             >
 367+ 3A25             >
 367+ 3A25             >                org     (Heap_Ptr & $1FFF) + $E000
 367+ EB66             >
 367+ EB66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ EB66             >Latest_Definition defl  Heap_Ptr
 367+ EB66             >
 367+ EB66             >                // dummy db directives used to calculate length of namec
 367+ EB66 4E 44 4F 4D >                db      "NDOM"
 367+ EB6A             >len_NFA         defl    $ - temp_NFA
 367+ EB6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ EB66             >
 367+ EB66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ EB67 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 367+ EB6B             >                org     $-1                 // alter last byte of Name just above to set
 367+ EB6A CD          >                db      {b $} | END_BIT     // msb as name end
 367+ EB6B             >
 367+ EB6B 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 367+ EB6D             >Prev_Ptr        defl    Heap_Ptr
 367+ EB6D             >
 367+ EB6D             >mirror_Ptr      defl    $
 367+ EB6D             >
 367+ EB6D 27 3A       >                dw      Dict_Ptr + 2        // xt
 367+ EB6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 367+ EB6F             >
 367+ EB6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 367+ EB6F             >
 367+ EB6F             >//              ______________________________________________________________________
 367+ EB6F             >//              Dictionary part
 367+ EB6F             >
 367+ EB6F             >                org     Dict_Ptr
 367+ 3A25             >
 367+ 3A25 6D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 367+ 3A27             >
 367+ 3A27             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 3A27 CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 367+ 3A2A             >
 367+ 3A2A             >
 367+ 3A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 3A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 3A2A             >
 367+ 3A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 3A2A              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 3A2A 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 3A2E 7C 5C 3C 3E
 369+ 3A32 22
 370+ 3A33 00                           db 0
 371+ 3A34
 372+ 3A34                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 372+ 3A34             >
 372+ 3A34             >Dict_Ptr        defl    $
 372+ 3A34             >
 372+ 3A34             >//              ______________________________________________________________________
 372+ 3A34             >//              Heap part
 372+ 3A34             >
 372+ 3A34             >
 372+ 3A34             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ EB6F             >
 372+ EB6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ EB6F             >Latest_Definition defl  Heap_Ptr
 372+ EB6F             >
 372+ EB6F             >                // dummy db directives used to calculate length of namec
 372+ EB6F 4E 43 44 4D >                db      "NCDM"
 372+ EB73             >len_NFA         defl    $ - temp_NFA
 372+ EB73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ EB6F             >
 372+ EB6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ EB70 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 372+ EB74             >                org     $-1                 // alter last byte of Name just above to set
 372+ EB73 CD          >                db      {b $} | END_BIT     // msb as name end
 372+ EB74             >
 372+ EB74 66 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ EB76             >Prev_Ptr        defl    Heap_Ptr
 372+ EB76             >
 372+ EB76             >mirror_Ptr      defl    $
 372+ EB76             >
 372+ EB76 36 3A       >                dw      Dict_Ptr + 2        // xt
 372+ EB78             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ EB78             >
 372+ EB78             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ EB78             >
 372+ EB78             >//              ______________________________________________________________________
 372+ EB78             >//              Dictionary part
 372+ EB78             >
 372+ EB78             >                org     Dict_Ptr
 372+ 3A34             >
 372+ 3A34 76 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 3A36             >
 372+ 3A36             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 3A36 CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 372+ 3A39             >
 372+ 3A39             >
 372+ 3A39             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 3A39             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 3A39             >
 372+ 3A39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 3A39              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 3A39 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 3A3D 24 5F 7B 7D
 374+ 3A41 7E
 375+ 3A42 00                           db 0
 376+ 3A43
 377+ 3A43              // Replace illegal character in filename using the map here above
 378+ 3A43              // at the moment we need only  "
 379+ 3A43                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 3A43             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 3A43             >
 379+ 3A43             >Dict_Ptr        defl    $
 379+ 3A43             >
 379+ 3A43             >//              ______________________________________________________________________
 379+ 3A43             >//              Heap part
 379+ 3A43             >
 379+ 3A43             >
 379+ 3A43             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB78             >
 379+ EB78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB78             >Latest_Definition defl  Heap_Ptr
 379+ EB78             >
 379+ EB78             >                // dummy db directives used to calculate length of namec
 379+ EB78 4D 41 50 2D >                db      "MAP-FN"
 379+ EB7C 46 4E       >
 379+ EB7E             >len_NFA         defl    $ - temp_NFA
 379+ EB7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB78             >
 379+ EB78 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB79 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB7D 46 4E       >
 379+ EB7F             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB7E CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB7F             >
 379+ EB7F 6F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB81             >Prev_Ptr        defl    Heap_Ptr
 379+ EB81             >
 379+ EB81             >mirror_Ptr      defl    $
 379+ EB81             >
 379+ EB81 45 3A       >                dw      Dict_Ptr + 2        // xt
 379+ EB83             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB83             >
 379+ EB83             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB83             >
 379+ EB83             >//              ______________________________________________________________________
 379+ EB83             >//              Dictionary part
 379+ EB83             >
 379+ EB83             >                org     Dict_Ptr
 379+ 3A43             >
 379+ 3A43 81 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 3A45             >
 379+ 3A45             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 3A45 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 3A48             >
 379+ 3A48             >
 379+ 3A48             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 3A48             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 3A48             >
 379+ 3A48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 3A48 E8 2B F5 2B                  dw      COUNT, BOUNDS
 381+ 3A4C CE 20                        dw      C_DO
 382+ 3A4E              Needs_3:
 383+ 3A4E 36 3A 27 3A                  dw          NCDM, NDOM, LIT, 10
 383+ 3A52 3D 20 0A 00
 384+ 3A56 D4 20 69 26                  dw          I, CFETCH
 385+ 3A5A F5 21                        dw          C_MAP
 386+ 3A5C D4 20 72 26                  dw          I, CSTORE
 387+ 3A60              Needs_4:
 388+ 3A60 7A 20                        dw      C_LOOP
 389+ 3A62 EC FF                        dw      Needs_3 - $
 390+ 3A64 0C 25                        dw      EXIT
 391+ 3A66
 392+ 3A66
 393+ 3A66              // include  "path/cccc.f" if cccc is not defined
 394+ 3A66              // filename cccc.f is temporary stored at NEEDS-W
 395+ 3A66                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 395+ 3A66             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 395+ 3A66             >
 395+ 3A66             >Dict_Ptr        defl    $
 395+ 3A66             >
 395+ 3A66             >//              ______________________________________________________________________
 395+ 3A66             >//              Heap part
 395+ 3A66             >
 395+ 3A66             >
 395+ 3A66             >                org     (Heap_Ptr & $1FFF) + $E000
 395+ EB83             >
 395+ EB83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ EB83             >Latest_Definition defl  Heap_Ptr
 395+ EB83             >
 395+ EB83             >                // dummy db directives used to calculate length of namec
 395+ EB83 4E 45 45 44 >                db      "NEEDS-F"
 395+ EB87 53 2D 46    >
 395+ EB8A             >len_NFA         defl    $ - temp_NFA
 395+ EB8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ EB83             >
 395+ EB83 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ EB84 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 395+ EB88 53 2D 46    >
 395+ EB8B             >                org     $-1                 // alter last byte of Name just above to set
 395+ EB8A C6          >                db      {b $} | END_BIT     // msb as name end
 395+ EB8B             >
 395+ EB8B 78 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 395+ EB8D             >Prev_Ptr        defl    Heap_Ptr
 395+ EB8D             >
 395+ EB8D             >mirror_Ptr      defl    $
 395+ EB8D             >
 395+ EB8D 68 3A       >                dw      Dict_Ptr + 2        // xt
 395+ EB8F             >Heap_Ptr        defl    $ - $E000           // save current HP
 395+ EB8F             >
 395+ EB8F             >Current_HP      defl  $ - $E000             // used to set HP once!
 395+ EB8F             >
 395+ EB8F             >//              ______________________________________________________________________
 395+ EB8F             >//              Dictionary part
 395+ EB8F             >
 395+ EB8F             >                org     Dict_Ptr
 395+ 3A66             >
 395+ 3A66 8D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 395+ 3A68             >
 395+ 3A68             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 3A68 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 3A6B             >
 395+ 3A6B             >
 395+ 3A6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 3A6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 3A6B             >
 395+ 3A6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 3A6B D8 2F                        dw      LFIND
 397+ 3A6D 8F 20                        dw      ZBRANCH
 398+ 3A6F 0A 00                        dw      Needs_5 - $
 399+ 3A71
 400+ 3A71 C8 25 1F 26                  dw          DROP, TWO_DROP
 401+ 3A75 82 20                        dw      BRANCH
 402+ 3A77 2C 00                        dw      Needs_6 - $
 403+ 3A79              Needs_5:
 404+ 3A79 6C 39                        dw          NEEDS_W
 405+ 3A7B 3D 20 23 00                  dw          LIT, 35
 406+ 3A7F 56 2D                        dw          ERASE                   // a
 407+ 3A81 70 28 69 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 407+ 3A85 77 25
 408+ 3A87 70 28 BF 25                  dw          HERE, OVER              // a n here n
 409+ 3A8B 6C 39 DC 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 409+ 3A8F 4D 24
 410+ 3A91 6C 39 45 3A                  dw          NEEDS_W, NEEDS_CHECK
 411+ 3A95 6C 39 5E 25                  dw          NEEDS_W, PLUS           // a a1+1
 412+ 3A99 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 413+ 3A9D DC 25 5E 26                  dw          SWAP, STORE             // a
 414+ 3AA1 F0 39                        dw          NEEDS_SLASH
 415+ 3AA3              Needs_6:
 416+ 3AA3 0C 25                        dw      EXIT
 417+ 3AA5
 418+ 3AA5
 419+ 3AA5              // check for cccc exists in vocabulary
 420+ 3AA5              // if it doesn't then  INCLUDE  inc/cccc.F
 421+ 3AA5              // search in inc subdirectory
 422+ 3AA5                              Colon_Def NEEDS, "NEEDS", is_normal
 422+ 3AA5             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 422+ 3AA5             >
 422+ 3AA5             >Dict_Ptr        defl    $
 422+ 3AA5             >
 422+ 3AA5             >//              ______________________________________________________________________
 422+ 3AA5             >//              Heap part
 422+ 3AA5             >
 422+ 3AA5             >
 422+ 3AA5             >                org     (Heap_Ptr & $1FFF) + $E000
 422+ EB8F             >
 422+ EB8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ EB8F             >Latest_Definition defl  Heap_Ptr
 422+ EB8F             >
 422+ EB8F             >                // dummy db directives used to calculate length of namec
 422+ EB8F 4E 45 45 44 >                db      "NEEDS"
 422+ EB93 53          >
 422+ EB94             >len_NFA         defl    $ - temp_NFA
 422+ EB94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ EB8F             >
 422+ EB8F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ EB90 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 422+ EB94 53          >
 422+ EB95             >                org     $-1                 // alter last byte of Name just above to set
 422+ EB94 D3          >                db      {b $} | END_BIT     // msb as name end
 422+ EB95             >
 422+ EB95 83 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 422+ EB97             >Prev_Ptr        defl    Heap_Ptr
 422+ EB97             >
 422+ EB97             >mirror_Ptr      defl    $
 422+ EB97             >
 422+ EB97 A7 3A       >                dw      Dict_Ptr + 2        // xt
 422+ EB99             >Heap_Ptr        defl    $ - $E000           // save current HP
 422+ EB99             >
 422+ EB99             >Current_HP      defl  $ - $E000             // used to set HP once!
 422+ EB99             >
 422+ EB99             >//              ______________________________________________________________________
 422+ EB99             >//              Dictionary part
 422+ EB99             >
 422+ EB99             >                org     Dict_Ptr
 422+ 3AA5             >
 422+ 3AA5 97 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 422+ 3AA7             >
 422+ 3AA7             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 3AA7 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 3AAA             >
 422+ 3AAA             >
 422+ 3AAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 3AAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 3AAA             >
 422+ 3AAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 3AAA F2 27 54 26                  dw      TO_IN, FETCH
 424+ 3AAE E3 25                        dw      DUP
 425+ 3AB0 DA 39 68 3A                  dw      NEEDS_INC, NEEDS_PATH
 426+ 3AB4 F2 27 5E 26                  dw      TO_IN, STORE
 427+ 3AB8 E5 39 68 3A                  dw      NEEDS_LIB, NEEDS_PATH
 428+ 3ABC F2 27 5E 26                  dw      TO_IN, STORE
 429+ 3AC0 D8 2F                        dw      LFIND
 430+ 3AC2 8F 20                        dw      ZBRANCH
 431+ 3AC4 08 00                        dw      Needs_10 - $
 432+ 3AC6 1F 26                        dw          TWO_DROP
 433+ 3AC8 82 20                        dw      BRANCH
 434+ 3ACA 10 00                        dw      Needs_11 - $
 435+ 3ACC              Needs_10:
 436+ 3ACC 6C 39 E8 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 436+ 3AD0 3C 2C 41 29
 437+ 3AD4 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 437+ 3AD8 A1 35
 438+ 3ADA              Needs_11:
 439+ 3ADA 0C 25                        dw      EXIT
 440+ 3ADC
 441+ 3ADC
 442+ 3ADC              //  ______________________________________________________________________
 443+ 3ADC              //
 444+ 3ADC              // load         n --
 445+ 3ADC                              Colon_Def LOAD, "LOAD", is_normal
 445+ 3ADC             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 445+ 3ADC             >
 445+ 3ADC             >Dict_Ptr        defl    $
 445+ 3ADC             >
 445+ 3ADC             >//              ______________________________________________________________________
 445+ 3ADC             >//              Heap part
 445+ 3ADC             >
 445+ 3ADC             >
 445+ 3ADC             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ EB99             >
 445+ EB99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ EB99             >Latest_Definition defl  Heap_Ptr
 445+ EB99             >
 445+ EB99             >                // dummy db directives used to calculate length of namec
 445+ EB99 4C 4F 41 44 >                db      "LOAD"
 445+ EB9D             >len_NFA         defl    $ - temp_NFA
 445+ EB9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ EB99             >
 445+ EB99 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ EB9A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 445+ EB9E             >                org     $-1                 // alter last byte of Name just above to set
 445+ EB9D C4          >                db      {b $} | END_BIT     // msb as name end
 445+ EB9E             >
 445+ EB9E 8F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ EBA0             >Prev_Ptr        defl    Heap_Ptr
 445+ EBA0             >
 445+ EBA0             >mirror_Ptr      defl    $
 445+ EBA0             >
 445+ EBA0 DE 3A       >                dw      Dict_Ptr + 2        // xt
 445+ EBA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ EBA2             >
 445+ EBA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ EBA2             >
 445+ EBA2             >//              ______________________________________________________________________
 445+ EBA2             >//              Dictionary part
 445+ EBA2             >
 445+ EBA2             >                org     Dict_Ptr
 445+ 3ADC             >
 445+ 3ADC A0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 3ADE             >
 445+ 3ADE             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 3ADE CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 3AE1             >
 445+ 3AE1             >
 445+ 3AE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 3AE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 3AE1             >
 445+ 3AE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 3AE1 EC 27 54 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 446+ 3AE5 16 25
 447+ 3AE7 F2 27 54 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 447+ 3AEB 16 25
 448+ 3AED
 449+ 3AED 4B 27 F2 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 449+ 3AF1 5E 26
 450+ 3AF3 83 27 2D 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 450+ 3AF7 EC 27 5E 26
 451+ 3AFB 9B 31                        dw      INTERPRET               // interpret
 452+ 3AFD
 453+ 3AFD 21 25 F2 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 453+ 3B01 5E 26
 454+ 3B03 21 25 EC 27                  dw      R_TO, BLK, STORE        // r> blk !
 454+ 3B07 5E 26
 455+ 3B09 0C 25                        dw      EXIT                    // ;
 456+ 3B0B
 457+ 3B0B              //  ______________________________________________________________________
 458+ 3B0B              //
 459+ 3B0B              // -->          --
 460+ 3B0B                              Colon_Def LOAD_NEXT, "-->", is_immediate
 460+ 3B0B             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 460+ 3B0B             >
 460+ 3B0B             >Dict_Ptr        defl    $
 460+ 3B0B             >
 460+ 3B0B             >//              ______________________________________________________________________
 460+ 3B0B             >//              Heap part
 460+ 3B0B             >
 460+ 3B0B             >
 460+ 3B0B             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ EBA2             >
 460+ EBA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ EBA2             >Latest_Definition defl  Heap_Ptr
 460+ EBA2             >
 460+ EBA2             >                // dummy db directives used to calculate length of namec
 460+ EBA2 2D 2D 3E    >                db      "-->"
 460+ EBA5             >len_NFA         defl    $ - temp_NFA
 460+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ EBA2             >
 460+ EBA2 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ EBA3 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 460+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 460+ EBA5 BE          >                db      {b $} | END_BIT     // msb as name end
 460+ EBA6             >
 460+ EBA6 99 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 460+ EBA8             >
 460+ EBA8             >mirror_Ptr      defl    $
 460+ EBA8             >
 460+ EBA8 0D 3B       >                dw      Dict_Ptr + 2        // xt
 460+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ EBAA             >
 460+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ EBAA             >
 460+ EBAA             >//              ______________________________________________________________________
 460+ EBAA             >//              Dictionary part
 460+ EBAA             >
 460+ EBAA             >                org     Dict_Ptr
 460+ 3B0B             >
 460+ 3B0B A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 3B0D             >
 460+ 3B0D             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 3B0D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 3B10             >
 460+ 3B10             >
 460+ 3B10             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 3B10             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 3B10             >
 460+ 3B10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 3B10 09 2B                        dw      QLOADING                // ?loading
 462+ 3B12 4B 27 F2 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 462+ 3B16 5E 26
 463+ 3B18 83 27                        dw      BSCR                    // b/scr
 464+ 3B1A EC 27 54 26                  dw      BLK, FETCH              // blk @
 465+ 3B1E BF 25                        dw      OVER                    // over
 466+ 3B20 52 35                        dw      MOD                     // mod
 467+ 3B22 AF 28                        dw      SUBTRACT                // -
 468+ 3B24 EC 27 3C 26                  dw      BLK, PLUSSTORE          // +!
 469+ 3B28 0C 25                        dw      EXIT                    // ;
 470+ 3B2A
 471+ 3B2A              //  ______________________________________________________________________
 472+ 3B2A              //
 473+ 3B2A              // '            -- xt
 474+ 3B2A                              Colon_Def TICK, "'", is_normal
 474+ 3B2A             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 474+ 3B2A             >
 474+ 3B2A             >Dict_Ptr        defl    $
 474+ 3B2A             >
 474+ 3B2A             >//              ______________________________________________________________________
 474+ 3B2A             >//              Heap part
 474+ 3B2A             >
 474+ 3B2A             >
 474+ 3B2A             >                org     (Heap_Ptr & $1FFF) + $E000
 474+ EBAA             >
 474+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ EBAA             >Latest_Definition defl  Heap_Ptr
 474+ EBAA             >
 474+ EBAA             >                // dummy db directives used to calculate length of namec
 474+ EBAA 27          >                db      "'"
 474+ EBAB             >len_NFA         defl    $ - temp_NFA
 474+ EBAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ EBAA             >
 474+ EBAA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ EBAB 27          >                db      "'"               // name string in 7-bit ascii, but
 474+ EBAC             >                org     $-1                 // alter last byte of Name just above to set
 474+ EBAB A7          >                db      {b $} | END_BIT     // msb as name end
 474+ EBAC             >
 474+ EBAC A2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 474+ EBAE             >Prev_Ptr        defl    Heap_Ptr
 474+ EBAE             >
 474+ EBAE             >mirror_Ptr      defl    $
 474+ EBAE             >
 474+ EBAE 2C 3B       >                dw      Dict_Ptr + 2        // xt
 474+ EBB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 474+ EBB0             >
 474+ EBB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 474+ EBB0             >
 474+ EBB0             >//              ______________________________________________________________________
 474+ EBB0             >//              Dictionary part
 474+ EBB0             >
 474+ EBB0             >                org     Dict_Ptr
 474+ 3B2A             >
 474+ 3B2A AE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 474+ 3B2C             >
 474+ 3B2C             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 3B2C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 3B2F             >
 474+ 3B2F             >
 474+ 3B2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 3B2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 3B2F             >
 474+ 3B2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 3B2F D8 2F                        dw      LFIND                   // -find
 476+ 3B31 31 25                        dw      ZEQUAL                  // 0=
 477+ 3B33 4B 27 AC 2A                  dw      ZERO, QERROR            // 0 ?error
 478+ 3B37 C8 25                        dw      DROP                    // drop
 479+ 3B39 0C 25                        dw      EXIT                    // ;
 480+ 3B3B
 481+ 3B3B              //  ______________________________________________________________________
 482+ 3B3B              //
 483+ 3B3B              // forget       -- cccc
 484+ 3B3B                              Colon_Def FORGET, "FORGET", is_normal
 484+ 3B3B             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 484+ 3B3B             >
 484+ 3B3B             >Dict_Ptr        defl    $
 484+ 3B3B             >
 484+ 3B3B             >//              ______________________________________________________________________
 484+ 3B3B             >//              Heap part
 484+ 3B3B             >
 484+ 3B3B             >
 484+ 3B3B             >                org     (Heap_Ptr & $1FFF) + $E000
 484+ EBB0             >
 484+ EBB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ EBB0             >Latest_Definition defl  Heap_Ptr
 484+ EBB0             >
 484+ EBB0             >                // dummy db directives used to calculate length of namec
 484+ EBB0 46 4F 52 47 >                db      "FORGET"
 484+ EBB4 45 54       >
 484+ EBB6             >len_NFA         defl    $ - temp_NFA
 484+ EBB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ EBB0             >
 484+ EBB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ EBB1 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 484+ EBB5 45 54       >
 484+ EBB7             >                org     $-1                 // alter last byte of Name just above to set
 484+ EBB6 D4          >                db      {b $} | END_BIT     // msb as name end
 484+ EBB7             >
 484+ EBB7 AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 484+ EBB9             >Prev_Ptr        defl    Heap_Ptr
 484+ EBB9             >
 484+ EBB9             >mirror_Ptr      defl    $
 484+ EBB9             >
 484+ EBB9 3D 3B       >                dw      Dict_Ptr + 2        // xt
 484+ EBBB             >Heap_Ptr        defl    $ - $E000           // save current HP
 484+ EBBB             >
 484+ EBBB             >Current_HP      defl  $ - $E000             // used to set HP once!
 484+ EBBB             >
 484+ EBBB             >//              ______________________________________________________________________
 484+ EBBB             >//              Dictionary part
 484+ EBBB             >
 484+ EBBB             >                org     Dict_Ptr
 484+ 3B3B             >
 484+ 3B3B B9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 484+ 3B3D             >
 484+ 3B3D             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 3B3D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 3B40             >
 484+ 3B40             >
 484+ 3B40             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 3B40             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 3B40             >
 484+ 3B40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 3B40 10 28 54 26                  dw      CURRENT, FETCH          // current @
 486+ 3B44 0A 28 54 26                  dw      CONTEXT, FETCH          // context @
 487+ 3B48 AF 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 487+ 3B4C 17 00 AC 2A
 488+ 3B50 2C 3B 2B 2A                  dw      TICK, TO_BODY           // ' >body
 489+ 3B54 E3 25 C2 27                  dw      DUP, FENCE, FETCH       // dup fence @
 489+ 3B58 54 26
 490+ 3B5A C6 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 490+ 3B5E 15 00 AC 2A
 491+ 3B62 E3 25 60 2A                  dw      DUP, NFA                // dup nfa
 492+ 3B66
 493+ 3B66                          //  dw      DUP
 494+ 3B66                          //  dw      LIT, $E000, LESS
 495+ 3B66                          //  dw      MMU7_FETCH, ONE, EQUALS
 496+ 3B66                          //  dw      OR_OP, NOT_OP
 497+ 3B66                          //  dw      ZBRANCH
 498+ 3B66                          //  dw      Forget_then - $
 499+ 3B66
 500+ 3B66 69 29 8C 29                  dw      MMU7_FETCH, FROM_FAR
 501+ 3B6A E0 27 5E 26                  dw      HP, STORE
 502+ 3B6E E3 25 55 2A                  dw      DUP, CFA, CELL_MINUS
 502+ 3B72 91 25
 503+ 3B74              // Forget_then:
 504+ 3B74 C8 27 5E 26                  dw      DP, STORE               // dp !
 505+ 3B78 6B 2A 54 26                  dw      LFA, FETCH              // lfa @
 506+ 3B7C 0A 28 54 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 506+ 3B80 5E 26
 507+ 3B82 0C 25                        dw      EXIT                    // ;
 508+ 3B84
 509+ 3B84              //  ______________________________________________________________________
 510+ 3B84              //
 511+ 3B84              // marker       -- cccc
 512+ 3B84                              Colon_Def MARKER, "MARKER", is_immediate
 512+ 3B84             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 512+ 3B84             >
 512+ 3B84             >Dict_Ptr        defl    $
 512+ 3B84             >
 512+ 3B84             >//              ______________________________________________________________________
 512+ 3B84             >//              Heap part
 512+ 3B84             >
 512+ 3B84             >
 512+ 3B84             >                org     (Heap_Ptr & $1FFF) + $E000
 512+ EBBB             >
 512+ EBBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ EBBB             >Latest_Definition defl  Heap_Ptr
 512+ EBBB             >
 512+ EBBB             >                // dummy db directives used to calculate length of namec
 512+ EBBB 4D 41 52 4B >                db      "MARKER"
 512+ EBBF 45 52       >
 512+ EBC1             >len_NFA         defl    $ - temp_NFA
 512+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ EBBB             >
 512+ EBBB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ EBBC 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 512+ EBC0 45 52       >
 512+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 512+ EBC1 D2          >                db      {b $} | END_BIT     // msb as name end
 512+ EBC2             >
 512+ EBC2 B0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 512+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 512+ EBC4             >
 512+ EBC4             >mirror_Ptr      defl    $
 512+ EBC4             >
 512+ EBC4 86 3B       >                dw      Dict_Ptr + 2        // xt
 512+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 512+ EBC6             >
 512+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 512+ EBC6             >
 512+ EBC6             >//              ______________________________________________________________________
 512+ EBC6             >//              Dictionary part
 512+ EBC6             >
 512+ EBC6             >                org     Dict_Ptr
 512+ 3B84             >
 512+ 3B84 C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 512+ 3B86             >
 512+ 3B86             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 3B86 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 3B89             >
 512+ 3B89             >
 512+ 3B89             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 3B89             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 3B89             >
 512+ 3B89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 3B89 C0 2B                        dw      CBUILDS
 514+ 3B8B CE 27 54 26                  dw      VOC_LINK, FETCH, COMMA
 514+ 3B8F 86 28
 515+ 3B91 10 28 54 26                  dw      CURRENT, FETCH, COMMA
 515+ 3B95 86 28
 516+ 3B97 0A 28 54 26                  dw      CONTEXT, FETCH, COMMA
 516+ 3B9B 86 28
 517+ 3B9D 10 28 54 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 517+ 3BA1 54 26 86 28
 518+ 3BA5 1C 2A 7A 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 518+ 3BA9 6B 2A 54 26
 518+ 3BAD 86 28
 519+ 3BAF CB 2B                        dw      DOES_TO
 520+ 3BB1 E3 25 54 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 520+ 3BB5 CE 27 5E 26
 520+ 3BB9 8D 25
 521+ 3BBB E3 25 54 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 521+ 3BBF 10 28 5E 26
 521+ 3BC3 8D 25
 522+ 3BC5 E3 25 54 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 522+ 3BC9 0A 28 5E 26
 522+ 3BCD 8D 25
 523+ 3BCF E3 25 54 26                  dw      DUP, FETCH
 524+ 3BD3                          //  dw      DUP, QHEAPP
 525+ 3BD3                          //  dw      ZBRANCH
 526+ 3BD3                          //  dw      Marker_then - $
 527+ 3BD3 E3 25 E0 27                  dw          DUP, HP, STORE
 527+ 3BD7 5E 26
 528+ 3BD9 7A 2A 55 2A                  dw          PFA, CFA, CELL_MINUS
 528+ 3BDD 91 25
 529+ 3BDF              // Marker_then:
 530+ 3BDF C8 27 5E 26                  dw      DP, STORE, CELL_PLUS
 530+ 3BE3 8D 25
 531+ 3BE5 54 26 10 28                  dw      FETCH, CURRENT, FETCH, STORE
 531+ 3BE9 54 26 5E 26
 532+ 3BED 0C 25                        dw      EXIT
 533+ 3BEF
 534+ 3BEF              //  ______________________________________________________________________
 535+ 3BEF              //
 536+ 3BEF              // spaces       n --
 537+ 3BEF                              Colon_Def SPACES, "SPACES", is_normal
 537+ 3BEF             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 537+ 3BEF             >
 537+ 3BEF             >Dict_Ptr        defl    $
 537+ 3BEF             >
 537+ 3BEF             >//              ______________________________________________________________________
 537+ 3BEF             >//              Heap part
 537+ 3BEF             >
 537+ 3BEF             >
 537+ 3BEF             >                org     (Heap_Ptr & $1FFF) + $E000
 537+ EBC6             >
 537+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ EBC6             >Latest_Definition defl  Heap_Ptr
 537+ EBC6             >
 537+ EBC6             >                // dummy db directives used to calculate length of namec
 537+ EBC6 53 50 41 43 >                db      "SPACES"
 537+ EBCA 45 53       >
 537+ EBCC             >len_NFA         defl    $ - temp_NFA
 537+ EBCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ EBC6             >
 537+ EBC6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ EBC7 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 537+ EBCB 45 53       >
 537+ EBCD             >                org     $-1                 // alter last byte of Name just above to set
 537+ EBCC D3          >                db      {b $} | END_BIT     // msb as name end
 537+ EBCD             >
 537+ EBCD BB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 537+ EBCF             >Prev_Ptr        defl    Heap_Ptr
 537+ EBCF             >
 537+ EBCF             >mirror_Ptr      defl    $
 537+ EBCF             >
 537+ EBCF F1 3B       >                dw      Dict_Ptr + 2        // xt
 537+ EBD1             >Heap_Ptr        defl    $ - $E000           // save current HP
 537+ EBD1             >
 537+ EBD1             >Current_HP      defl  $ - $E000             // used to set HP once!
 537+ EBD1             >
 537+ EBD1             >//              ______________________________________________________________________
 537+ EBD1             >//              Dictionary part
 537+ EBD1             >
 537+ EBD1             >                org     Dict_Ptr
 537+ 3BEF             >
 537+ 3BEF CF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 537+ 3BF1             >
 537+ 3BF1             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 3BF1 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 3BF4             >
 537+ 3BF4             >
 537+ 3BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 3BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 3BF4             >
 537+ 3BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 3BF4 4B 27 07 29                  dw      ZERO, MAX
 539+ 3BF8 4B 27 A6 20                  dw      ZERO, C_Q_DO
 540+ 3BFC 08 00                        dw      Spaces_Leave - $
 541+ 3BFE              Spaces_Loop:
 542+ 3BFE 41 29                        dw          SPACE
 543+ 3C00 7A 20                        dw      C_LOOP
 544+ 3C02 FC FF                        dw      Spaces_Loop - $
 545+ 3C04              Spaces_Leave:
 546+ 3C04 0C 25                        dw      EXIT                    // ;
 547+ 3C06
 548+ 3C06              //  ______________________________________________________________________
 549+ 3C06              //
 550+ 3C06              // <#           --
 551+ 3C06                              Colon_Def BEGIN_DASH, "<#", is_normal
 551+ 3C06             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 551+ 3C06             >
 551+ 3C06             >Dict_Ptr        defl    $
 551+ 3C06             >
 551+ 3C06             >//              ______________________________________________________________________
 551+ 3C06             >//              Heap part
 551+ 3C06             >
 551+ 3C06             >
 551+ 3C06             >                org     (Heap_Ptr & $1FFF) + $E000
 551+ EBD1             >
 551+ EBD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ EBD1             >Latest_Definition defl  Heap_Ptr
 551+ EBD1             >
 551+ EBD1             >                // dummy db directives used to calculate length of namec
 551+ EBD1 3C 23       >                db      "<#"
 551+ EBD3             >len_NFA         defl    $ - temp_NFA
 551+ EBD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ EBD1             >
 551+ EBD1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ EBD2 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 551+ EBD4             >                org     $-1                 // alter last byte of Name just above to set
 551+ EBD3 A3          >                db      {b $} | END_BIT     // msb as name end
 551+ EBD4             >
 551+ EBD4 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 551+ EBD6             >Prev_Ptr        defl    Heap_Ptr
 551+ EBD6             >
 551+ EBD6             >mirror_Ptr      defl    $
 551+ EBD6             >
 551+ EBD6 08 3C       >                dw      Dict_Ptr + 2        // xt
 551+ EBD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 551+ EBD8             >
 551+ EBD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 551+ EBD8             >
 551+ EBD8             >//              ______________________________________________________________________
 551+ EBD8             >//              Dictionary part
 551+ EBD8             >
 551+ EBD8             >                org     Dict_Ptr
 551+ 3C06             >
 551+ 3C06 D6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 551+ 3C08             >
 551+ 3C08             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 3C08 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 3C0B             >
 551+ 3C0B             >
 551+ 3C0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 3C0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 3C0B             >
 551+ 3C0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 3C0B 7F 2D 3A 28                  dw      PAD, HLD, STORE
 552+ 3C0F 5E 26
 553+ 3C11 0C 25                        dw      EXIT
 554+ 3C13
 555+ 3C13              //  ______________________________________________________________________
 556+ 3C13              //
 557+ 3C13              // #>           --
 558+ 3C13                              Colon_Def DASH_END, "#>", is_normal
 558+ 3C13             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 558+ 3C13             >
 558+ 3C13             >Dict_Ptr        defl    $
 558+ 3C13             >
 558+ 3C13             >//              ______________________________________________________________________
 558+ 3C13             >//              Heap part
 558+ 3C13             >
 558+ 3C13             >
 558+ 3C13             >                org     (Heap_Ptr & $1FFF) + $E000
 558+ EBD8             >
 558+ EBD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ EBD8             >Latest_Definition defl  Heap_Ptr
 558+ EBD8             >
 558+ EBD8             >                // dummy db directives used to calculate length of namec
 558+ EBD8 23 3E       >                db      "#>"
 558+ EBDA             >len_NFA         defl    $ - temp_NFA
 558+ EBDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ EBD8             >
 558+ EBD8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ EBD9 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 558+ EBDB             >                org     $-1                 // alter last byte of Name just above to set
 558+ EBDA BE          >                db      {b $} | END_BIT     // msb as name end
 558+ EBDB             >
 558+ EBDB D1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 558+ EBDD             >Prev_Ptr        defl    Heap_Ptr
 558+ EBDD             >
 558+ EBDD             >mirror_Ptr      defl    $
 558+ EBDD             >
 558+ EBDD 15 3C       >                dw      Dict_Ptr + 2        // xt
 558+ EBDF             >Heap_Ptr        defl    $ - $E000           // save current HP
 558+ EBDF             >
 558+ EBDF             >Current_HP      defl  $ - $E000             // used to set HP once!
 558+ EBDF             >
 558+ EBDF             >//              ______________________________________________________________________
 558+ EBDF             >//              Dictionary part
 558+ EBDF             >
 558+ EBDF             >                org     Dict_Ptr
 558+ 3C13             >
 558+ 3C13 DD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 558+ 3C15             >
 558+ 3C15             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 3C15 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 3C18             >
 558+ 3C18             >
 558+ 3C18             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 3C18             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 3C18             >
 558+ 3C18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 3C18 1F 26                        dw      TWO_DROP
 560+ 3C1A 3A 28 54 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 560+ 3C1E 7F 2D BF 25
 560+ 3C22 AF 28
 561+ 3C24 0C 25                        dw      EXIT
 562+ 3C26
 563+ 3C26              //  ______________________________________________________________________
 564+ 3C26              //
 565+ 3C26              // sign         n d -- d
 566+ 3C26                              Colon_Def SIGN, "SIGN", is_normal
 566+ 3C26             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 566+ 3C26             >
 566+ 3C26             >Dict_Ptr        defl    $
 566+ 3C26             >
 566+ 3C26             >//              ______________________________________________________________________
 566+ 3C26             >//              Heap part
 566+ 3C26             >
 566+ 3C26             >
 566+ 3C26             >                org     (Heap_Ptr & $1FFF) + $E000
 566+ EBDF             >
 566+ EBDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ EBDF             >Latest_Definition defl  Heap_Ptr
 566+ EBDF             >
 566+ EBDF             >                // dummy db directives used to calculate length of namec
 566+ EBDF 53 49 47 4E >                db      "SIGN"
 566+ EBE3             >len_NFA         defl    $ - temp_NFA
 566+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ EBDF             >
 566+ EBDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ EBE0 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 566+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 566+ EBE3 CE          >                db      {b $} | END_BIT     // msb as name end
 566+ EBE4             >
 566+ EBE4 D8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 566+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 566+ EBE6             >
 566+ EBE6             >mirror_Ptr      defl    $
 566+ EBE6             >
 566+ EBE6 28 3C       >                dw      Dict_Ptr + 2        // xt
 566+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 566+ EBE8             >
 566+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 566+ EBE8             >
 566+ EBE8             >//              ______________________________________________________________________
 566+ EBE8             >//              Dictionary part
 566+ EBE8             >
 566+ EBE8             >                org     Dict_Ptr
 566+ 3C26             >
 566+ 3C26 E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 566+ 3C28             >
 566+ 3C28             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 3C28 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 3C2B             >
 566+ 3C2B             >
 566+ 3C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 3C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 3C2B             >
 566+ 3C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 3C2B 43 25                        dw      ZLESS
 568+ 3C2D 8F 20                        dw      ZBRANCH
 569+ 3C2F 08 00                        dw      Sign_Endif - $
 570+ 3C31 3D 20 2D 00                  dw          LIT, 45, HOLD
 570+ 3C35 6C 2D
 571+ 3C37              Sign_Endif:
 572+ 3C37 0C 25                        dw      EXIT
 573+ 3C39
 574+ 3C39              //  ______________________________________________________________________
 575+ 3C39              //
 576+ 3C39              // #           d1 -- d2
 577+ 3C39                              Colon_Def DASH, "#", is_normal
 577+ 3C39             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 577+ 3C39             >
 577+ 3C39             >Dict_Ptr        defl    $
 577+ 3C39             >
 577+ 3C39             >//              ______________________________________________________________________
 577+ 3C39             >//              Heap part
 577+ 3C39             >
 577+ 3C39             >
 577+ 3C39             >                org     (Heap_Ptr & $1FFF) + $E000
 577+ EBE8             >
 577+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ EBE8             >Latest_Definition defl  Heap_Ptr
 577+ EBE8             >
 577+ EBE8             >                // dummy db directives used to calculate length of namec
 577+ EBE8 23          >                db      "#"
 577+ EBE9             >len_NFA         defl    $ - temp_NFA
 577+ EBE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ EBE8             >
 577+ EBE8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ EBE9 23          >                db      "#"               // name string in 7-bit ascii, but
 577+ EBEA             >                org     $-1                 // alter last byte of Name just above to set
 577+ EBE9 A3          >                db      {b $} | END_BIT     // msb as name end
 577+ EBEA             >
 577+ EBEA DF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 577+ EBEC             >Prev_Ptr        defl    Heap_Ptr
 577+ EBEC             >
 577+ EBEC             >mirror_Ptr      defl    $
 577+ EBEC             >
 577+ EBEC 3B 3C       >                dw      Dict_Ptr + 2        // xt
 577+ EBEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 577+ EBEE             >
 577+ EBEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 577+ EBEE             >
 577+ EBEE             >//              ______________________________________________________________________
 577+ EBEE             >//              Dictionary part
 577+ EBEE             >
 577+ EBEE             >                org     Dict_Ptr
 577+ 3C39             >
 577+ 3C39 EC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 577+ 3C3B             >
 577+ 3C3B             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 3C3B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 3C3E             >
 577+ 3C3E             >
 577+ 3C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 3C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 3C3E             >
 577+ 3C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 3C3E 1C 28 54 26                  dw      BASE, FETCH
 579+ 3C42
 580+ 3C42 16 25                        dw      TO_R                    // >r           ( ud1 )
 581+ 3C44 4B 27 2C 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 581+ 3C48 99 24
 582+ 3C4A 21 25 DC 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 582+ 3C4E 16 25
 583+ 3C50 99 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 584+ 3C52 21 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 585+ 3C54
 586+ 3C54 EA 25                        dw      ROT
 587+ 3C56 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 587+ 3C5A BF 25 D4 28
 588+ 3C5E 8F 20                        dw      ZBRANCH
 589+ 3C60 08 00                        dw      Dash_Endif - $
 590+ 3C62 3D 20 07 00                  dw          LIT, 7, PLUS
 590+ 3C66 5E 25
 591+ 3C68              Dash_Endif:
 592+ 3C68
 593+ 3C68 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 593+ 3C6C 5E 25 6C 2D
 594+ 3C70 0C 25                        dw      EXIT
 595+ 3C72
 596+ 3C72              //  ______________________________________________________________________
 597+ 3C72              //
 598+ 3C72              // #s           d1 -- d2
 599+ 3C72                              Colon_Def DASHES, "#S", is_normal
 599+ 3C72             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 599+ 3C72             >
 599+ 3C72             >Dict_Ptr        defl    $
 599+ 3C72             >
 599+ 3C72             >//              ______________________________________________________________________
 599+ 3C72             >//              Heap part
 599+ 3C72             >
 599+ 3C72             >
 599+ 3C72             >                org     (Heap_Ptr & $1FFF) + $E000
 599+ EBEE             >
 599+ EBEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ EBEE             >Latest_Definition defl  Heap_Ptr
 599+ EBEE             >
 599+ EBEE             >                // dummy db directives used to calculate length of namec
 599+ EBEE 23 53       >                db      "#S"
 599+ EBF0             >len_NFA         defl    $ - temp_NFA
 599+ EBF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ EBEE             >
 599+ EBEE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ EBEF 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 599+ EBF1             >                org     $-1                 // alter last byte of Name just above to set
 599+ EBF0 D3          >                db      {b $} | END_BIT     // msb as name end
 599+ EBF1             >
 599+ EBF1 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 599+ EBF3             >Prev_Ptr        defl    Heap_Ptr
 599+ EBF3             >
 599+ EBF3             >mirror_Ptr      defl    $
 599+ EBF3             >
 599+ EBF3 74 3C       >                dw      Dict_Ptr + 2        // xt
 599+ EBF5             >Heap_Ptr        defl    $ - $E000           // save current HP
 599+ EBF5             >
 599+ EBF5             >Current_HP      defl  $ - $E000             // used to set HP once!
 599+ EBF5             >
 599+ EBF5             >//              ______________________________________________________________________
 599+ EBF5             >//              Dictionary part
 599+ EBF5             >
 599+ EBF5             >                org     Dict_Ptr
 599+ 3C72             >
 599+ 3C72 F3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 599+ 3C74             >
 599+ 3C74             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 3C74 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 3C77             >
 599+ 3C77             >
 599+ 3C77             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 3C77             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 3C77             >
 599+ 3C77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 3C77              Dashes_Begin:
 601+ 3C77 3B 3C 32 26                  dw      DASH, TWO_DUP
 602+ 3C7B DB 24 31 25                  dw          OR_OP, ZEQUAL
 603+ 3C7F 8F 20                        dw      ZBRANCH
 604+ 3C81 F6 FF                        dw      Dashes_Begin - $
 605+ 3C83 0C 25                        dw      EXIT
 606+ 3C85
 607+ 3C85              //  ______________________________________________________________________
 608+ 3C85              //
 609+ 3C85              // d.r          d n --
 610+ 3C85                              Colon_Def D_DOT_R, "D.R", is_normal
 610+ 3C85             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 610+ 3C85             >
 610+ 3C85             >Dict_Ptr        defl    $
 610+ 3C85             >
 610+ 3C85             >//              ______________________________________________________________________
 610+ 3C85             >//              Heap part
 610+ 3C85             >
 610+ 3C85             >
 610+ 3C85             >                org     (Heap_Ptr & $1FFF) + $E000
 610+ EBF5             >
 610+ EBF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ EBF5             >Latest_Definition defl  Heap_Ptr
 610+ EBF5             >
 610+ EBF5             >                // dummy db directives used to calculate length of namec
 610+ EBF5 44 2E 52    >                db      "D.R"
 610+ EBF8             >len_NFA         defl    $ - temp_NFA
 610+ EBF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ EBF5             >
 610+ EBF5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ EBF6 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 610+ EBF9             >                org     $-1                 // alter last byte of Name just above to set
 610+ EBF8 D2          >                db      {b $} | END_BIT     // msb as name end
 610+ EBF9             >
 610+ EBF9 EE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 610+ EBFB             >Prev_Ptr        defl    Heap_Ptr
 610+ EBFB             >
 610+ EBFB             >mirror_Ptr      defl    $
 610+ EBFB             >
 610+ EBFB 87 3C       >                dw      Dict_Ptr + 2        // xt
 610+ EBFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 610+ EBFD             >
 610+ EBFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 610+ EBFD             >
 610+ EBFD             >//              ______________________________________________________________________
 610+ EBFD             >//              Dictionary part
 610+ EBFD             >
 610+ EBFD             >                org     Dict_Ptr
 610+ 3C85             >
 610+ 3C85 FB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 610+ 3C87             >
 610+ 3C87             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 3C87 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 3C8A             >
 610+ 3C8A             >
 610+ 3C8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 3C8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 3C8A             >
 610+ 3C8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 3C8A 16 25                        dw      TO_R
 612+ 3C8C D3 25 99 34                  dw      TUCK, DABS
 613+ 3C90 08 3C 74 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 613+ 3C94 EA 25 28 3C
 613+ 3C98 15 3C
 614+ 3C9A 21 25                        dw      R_TO
 615+ 3C9C BF 25 AF 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 615+ 3CA0 F1 3B 3C 2C
 616+ 3CA4 0C 25                        dw      EXIT
 617+ 3CA6
 618+ 3CA6              //  ______________________________________________________________________
 619+ 3CA6              //
 620+ 3CA6              // .r           n1 n2 --
 621+ 3CA6                              Colon_Def DOT_R, ".R", is_normal
 621+ 3CA6             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 621+ 3CA6             >
 621+ 3CA6             >Dict_Ptr        defl    $
 621+ 3CA6             >
 621+ 3CA6             >//              ______________________________________________________________________
 621+ 3CA6             >//              Heap part
 621+ 3CA6             >
 621+ 3CA6             >
 621+ 3CA6             >                org     (Heap_Ptr & $1FFF) + $E000
 621+ EBFD             >
 621+ EBFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ EBFD             >Latest_Definition defl  Heap_Ptr
 621+ EBFD             >
 621+ EBFD             >                // dummy db directives used to calculate length of namec
 621+ EBFD 2E 52       >                db      ".R"
 621+ EBFF             >len_NFA         defl    $ - temp_NFA
 621+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ EBFD             >
 621+ EBFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ EBFE 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 621+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 621+ EBFF D2          >                db      {b $} | END_BIT     // msb as name end
 621+ EC00             >
 621+ EC00 F5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 621+ EC02             >Prev_Ptr        defl    Heap_Ptr
 621+ EC02             >
 621+ EC02             >mirror_Ptr      defl    $
 621+ EC02             >
 621+ EC02 A8 3C       >                dw      Dict_Ptr + 2        // xt
 621+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 621+ EC04             >
 621+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 621+ EC04             >
 621+ EC04             >//              ______________________________________________________________________
 621+ EC04             >//              Dictionary part
 621+ EC04             >
 621+ EC04             >                org     Dict_Ptr
 621+ 3CA6             >
 621+ 3CA6 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 621+ 3CA8             >
 621+ 3CA8             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 3CA8 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 3CAB             >
 621+ 3CAB             >
 621+ 3CAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 3CAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 3CAB             >
 621+ 3CAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 3CAB 16 25                        dw      TO_R
 623+ 3CAD A4 28 21 25                  dw      S_TO_D, R_TO
 624+ 3CB1 87 3C                        dw      D_DOT_R
 625+ 3CB3 0C 25                        dw      EXIT
 626+ 3CB5
 627+ 3CB5              //  ______________________________________________________________________
 628+ 3CB5              //
 629+ 3CB5              // d.           d --
 630+ 3CB5                              Colon_Def D_DOT, "D.", is_normal
 630+ 3CB5             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 630+ 3CB5             >
 630+ 3CB5             >Dict_Ptr        defl    $
 630+ 3CB5             >
 630+ 3CB5             >//              ______________________________________________________________________
 630+ 3CB5             >//              Heap part
 630+ 3CB5             >
 630+ 3CB5             >
 630+ 3CB5             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EC04             >
 630+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EC04             >Latest_Definition defl  Heap_Ptr
 630+ EC04             >
 630+ EC04             >                // dummy db directives used to calculate length of namec
 630+ EC04 44 2E       >                db      "D."
 630+ EC06             >len_NFA         defl    $ - temp_NFA
 630+ EC06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EC04             >
 630+ EC04 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EC05 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 630+ EC07             >                org     $-1                 // alter last byte of Name just above to set
 630+ EC06 AE          >                db      {b $} | END_BIT     // msb as name end
 630+ EC07             >
 630+ EC07 FD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EC09             >Prev_Ptr        defl    Heap_Ptr
 630+ EC09             >
 630+ EC09             >mirror_Ptr      defl    $
 630+ EC09             >
 630+ EC09 B7 3C       >                dw      Dict_Ptr + 2        // xt
 630+ EC0B             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EC0B             >
 630+ EC0B             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EC0B             >
 630+ EC0B             >//              ______________________________________________________________________
 630+ EC0B             >//              Dictionary part
 630+ EC0B             >
 630+ EC0B             >                org     Dict_Ptr
 630+ 3CB5             >
 630+ 3CB5 09 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 3CB7             >
 630+ 3CB7             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 3CB7 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 3CBA             >
 630+ 3CBA             >
 630+ 3CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 3CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 3CBA             >
 630+ 3CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 3CBA 4B 27 87 3C                  dw      ZERO, D_DOT_R, SPACE
 631+ 3CBE 41 29
 632+ 3CC0 0C 25                        dw      EXIT
 633+ 3CC2
 634+ 3CC2              //  ______________________________________________________________________
 635+ 3CC2              //
 636+ 3CC2              // .            n --
 637+ 3CC2                              Colon_Def DOT, ".", is_normal
 637+ 3CC2             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 637+ 3CC2             >
 637+ 3CC2             >Dict_Ptr        defl    $
 637+ 3CC2             >
 637+ 3CC2             >//              ______________________________________________________________________
 637+ 3CC2             >//              Heap part
 637+ 3CC2             >
 637+ 3CC2             >
 637+ 3CC2             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ EC0B             >
 637+ EC0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ EC0B             >Latest_Definition defl  Heap_Ptr
 637+ EC0B             >
 637+ EC0B             >                // dummy db directives used to calculate length of namec
 637+ EC0B 2E          >                db      "."
 637+ EC0C             >len_NFA         defl    $ - temp_NFA
 637+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ EC0B             >
 637+ EC0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ EC0C 2E          >                db      "."               // name string in 7-bit ascii, but
 637+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 637+ EC0C AE          >                db      {b $} | END_BIT     // msb as name end
 637+ EC0D             >
 637+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 637+ EC0F             >
 637+ EC0F             >mirror_Ptr      defl    $
 637+ EC0F             >
 637+ EC0F C4 3C       >                dw      Dict_Ptr + 2        // xt
 637+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ EC11             >
 637+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ EC11             >
 637+ EC11             >//              ______________________________________________________________________
 637+ EC11             >//              Dictionary part
 637+ EC11             >
 637+ EC11             >                org     Dict_Ptr
 637+ 3CC2             >
 637+ 3CC2 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 3CC4             >
 637+ 3CC4             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 3CC4 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 3CC7             >
 637+ 3CC7             >
 637+ 3CC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 3CC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 3CC7             >
 637+ 3CC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 3CC7 A4 28 B7 3C                  dw      S_TO_D, D_DOT
 639+ 3CCB 0C 25                        dw      EXIT
 640+ 3CCD
 641+ 3CCD              //  ______________________________________________________________________
 642+ 3CCD              //
 643+ 3CCD              // ?            n --
 644+ 3CCD                              Colon_Def QUESTION, "?", is_normal
 644+ 3CCD             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 644+ 3CCD             >
 644+ 3CCD             >Dict_Ptr        defl    $
 644+ 3CCD             >
 644+ 3CCD             >//              ______________________________________________________________________
 644+ 3CCD             >//              Heap part
 644+ 3CCD             >
 644+ 3CCD             >
 644+ 3CCD             >                org     (Heap_Ptr & $1FFF) + $E000
 644+ EC11             >
 644+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ EC11             >Latest_Definition defl  Heap_Ptr
 644+ EC11             >
 644+ EC11             >                // dummy db directives used to calculate length of namec
 644+ EC11 3F          >                db      "?"
 644+ EC12             >len_NFA         defl    $ - temp_NFA
 644+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ EC11             >
 644+ EC11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ EC12 3F          >                db      "?"               // name string in 7-bit ascii, but
 644+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 644+ EC12 BF          >                db      {b $} | END_BIT     // msb as name end
 644+ EC13             >
 644+ EC13 0B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 644+ EC15             >Prev_Ptr        defl    Heap_Ptr
 644+ EC15             >
 644+ EC15             >mirror_Ptr      defl    $
 644+ EC15             >
 644+ EC15 CF 3C       >                dw      Dict_Ptr + 2        // xt
 644+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 644+ EC17             >
 644+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 644+ EC17             >
 644+ EC17             >//              ______________________________________________________________________
 644+ EC17             >//              Dictionary part
 644+ EC17             >
 644+ EC17             >                org     Dict_Ptr
 644+ 3CCD             >
 644+ 3CCD 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 644+ 3CCF             >
 644+ 3CCF             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 3CCF CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 3CD2             >
 644+ 3CD2             >
 644+ 3CD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 3CD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 3CD2             >
 644+ 3CD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 3CD2 54 26 C4 3C                  dw      FETCH, DOT
 646+ 3CD6 0C 25                        dw      EXIT
 647+ 3CD8
 648+ 3CD8              //  ______________________________________________________________________
 649+ 3CD8              //
 650+ 3CD8              // u.           u --
 651+ 3CD8                              Colon_Def U_DOT, "U.", is_normal
 651+ 3CD8             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 651+ 3CD8             >
 651+ 3CD8             >Dict_Ptr        defl    $
 651+ 3CD8             >
 651+ 3CD8             >//              ______________________________________________________________________
 651+ 3CD8             >//              Heap part
 651+ 3CD8             >
 651+ 3CD8             >
 651+ 3CD8             >                org     (Heap_Ptr & $1FFF) + $E000
 651+ EC17             >
 651+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ EC17             >Latest_Definition defl  Heap_Ptr
 651+ EC17             >
 651+ EC17             >                // dummy db directives used to calculate length of namec
 651+ EC17 55 2E       >                db      "U."
 651+ EC19             >len_NFA         defl    $ - temp_NFA
 651+ EC19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ EC17             >
 651+ EC17 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ EC18 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 651+ EC1A             >                org     $-1                 // alter last byte of Name just above to set
 651+ EC19 AE          >                db      {b $} | END_BIT     // msb as name end
 651+ EC1A             >
 651+ EC1A 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 651+ EC1C             >Prev_Ptr        defl    Heap_Ptr
 651+ EC1C             >
 651+ EC1C             >mirror_Ptr      defl    $
 651+ EC1C             >
 651+ EC1C DA 3C       >                dw      Dict_Ptr + 2        // xt
 651+ EC1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 651+ EC1E             >
 651+ EC1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 651+ EC1E             >
 651+ EC1E             >//              ______________________________________________________________________
 651+ EC1E             >//              Dictionary part
 651+ EC1E             >
 651+ EC1E             >                org     Dict_Ptr
 651+ 3CD8             >
 651+ 3CD8 1C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 651+ 3CDA             >
 651+ 3CDA             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 3CDA CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 3CDD             >
 651+ 3CDD             >
 651+ 3CDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 3CDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 3CDD             >
 651+ 3CDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 3CDD 4B 27 B7 3C                  dw      ZERO, D_DOT
 653+ 3CE1 0C 25                        dw      EXIT
 654+ 3CE3
 655+ 3CE3              //  ______________________________________________________________________
 656+ 3CE3              //
 657+ 3CE3              // words        --
 658+ 3CE3                              Colon_Def WORDS, "WORDS", is_normal
 658+ 3CE3             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 658+ 3CE3             >
 658+ 3CE3             >Dict_Ptr        defl    $
 658+ 3CE3             >
 658+ 3CE3             >//              ______________________________________________________________________
 658+ 3CE3             >//              Heap part
 658+ 3CE3             >
 658+ 3CE3             >
 658+ 3CE3             >                org     (Heap_Ptr & $1FFF) + $E000
 658+ EC1E             >
 658+ EC1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ EC1E             >Latest_Definition defl  Heap_Ptr
 658+ EC1E             >
 658+ EC1E             >                // dummy db directives used to calculate length of namec
 658+ EC1E 57 4F 52 44 >                db      "WORDS"
 658+ EC22 53          >
 658+ EC23             >len_NFA         defl    $ - temp_NFA
 658+ EC23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ EC1E             >
 658+ EC1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ EC1F 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 658+ EC23 53          >
 658+ EC24             >                org     $-1                 // alter last byte of Name just above to set
 658+ EC23 D3          >                db      {b $} | END_BIT     // msb as name end
 658+ EC24             >
 658+ EC24 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 658+ EC26             >Prev_Ptr        defl    Heap_Ptr
 658+ EC26             >
 658+ EC26             >mirror_Ptr      defl    $
 658+ EC26             >
 658+ EC26 E5 3C       >                dw      Dict_Ptr + 2        // xt
 658+ EC28             >Heap_Ptr        defl    $ - $E000           // save current HP
 658+ EC28             >
 658+ EC28             >Current_HP      defl  $ - $E000             // used to set HP once!
 658+ EC28             >
 658+ EC28             >//              ______________________________________________________________________
 658+ EC28             >//              Dictionary part
 658+ EC28             >
 658+ EC28             >                org     Dict_Ptr
 658+ 3CE3             >
 658+ 3CE3 26 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 658+ 3CE5             >
 658+ 3CE5             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 3CE5 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 3CE8             >
 658+ 3CE8             >
 658+ 3CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 3CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 3CE8             >
 658+ 3CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 3CE8 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 659+ 3CEC F8 27 5E 26
 660+ 3CF0 0A 28 54 26                  dw      CONTEXT, FETCH, FETCH
 660+ 3CF4 54 26
 661+ 3CF6              Words_Begin:
 662+ 3CF6 B2 29                        dw          FAR // Q TO HEAP
 663+ 3CF8 E3 25 69 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 663+ 3CFC 3D 20 1F 00
 663+ 3D00 CC 24
 664+ 3D02 F8 27 54 26                  dw          OUT, FETCH, PLUS
 664+ 3D06 5E 25
 665+ 3D08 75 27 D4 28                  dw          CL, LESS, ZEQUAL
 665+ 3D0C 31 25
 666+ 3D0E 8F 20                        dw          ZBRANCH
 667+ 3D10 0A 00                        dw          Words_Endif - $
 668+ 3D12 4D 22 4B 27                  dw              CR, ZERO, OUT, STORE
 668+ 3D16 F8 27 5E 26
 669+ 3D1A              Words_Endif:
 670+ 3D1A E3 25 26 30                  dw          DUP, ID_DOT
 671+ 3D1E 52 27 4C 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 671+ 3D22 77 25 54 26
 672+ 3D26 E3 25 31 25                  dw          DUP, ZEQUAL
 673+ 3D2A 57 23 DB 24                  dw          QTERMINAL, OR_OP
 674+ 3D2E 8F 20                        dw      ZBRANCH
 675+ 3D30 C6 FF                        dw      Words_Begin - $
 676+ 3D32 C8 25                        dw      DROP
 677+ 3D34 0C 25                        dw      EXIT
 678+ 3D36
 679+ 3D36              //  ______________________________________________________________________
 680+ 3D36              //
 681+ 3D36              // list         n --
 682+ 3D36                              Colon_Def LIST, "LIST", is_normal
 682+ 3D36             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 682+ 3D36             >
 682+ 3D36             >Dict_Ptr        defl    $
 682+ 3D36             >
 682+ 3D36             >//              ______________________________________________________________________
 682+ 3D36             >//              Heap part
 682+ 3D36             >
 682+ 3D36             >
 682+ 3D36             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ EC28             >
 682+ EC28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ EC28             >Latest_Definition defl  Heap_Ptr
 682+ EC28             >
 682+ EC28             >                // dummy db directives used to calculate length of namec
 682+ EC28 4C 49 53 54 >                db      "LIST"
 682+ EC2C             >len_NFA         defl    $ - temp_NFA
 682+ EC2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ EC28             >
 682+ EC28 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ EC29 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 682+ EC2D             >                org     $-1                 // alter last byte of Name just above to set
 682+ EC2C D4          >                db      {b $} | END_BIT     // msb as name end
 682+ EC2D             >
 682+ EC2D 1E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ EC2F             >Prev_Ptr        defl    Heap_Ptr
 682+ EC2F             >
 682+ EC2F             >mirror_Ptr      defl    $
 682+ EC2F             >
 682+ EC2F 38 3D       >                dw      Dict_Ptr + 2        // xt
 682+ EC31             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ EC31             >
 682+ EC31             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ EC31             >
 682+ EC31             >//              ______________________________________________________________________
 682+ EC31             >//              Dictionary part
 682+ EC31             >
 682+ EC31             >                org     Dict_Ptr
 682+ 3D36             >
 682+ 3D36 2F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 3D38             >
 682+ 3D38             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 3D38 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 3D3B             >
 682+ 3D3B             >
 682+ 3D3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 3D3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 3D3B             >
 682+ 3D3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 3D3B 85 2B 4D 22                  dw      DECIMAL, CR
 684+ 3D3F E3 25 FE 27                  dw      DUP, SCR, STORE
 684+ 3D43 5E 26
 685+ 3D45 D9 2D                        dw      C_DOT_QUOTE
 686+ 3D47 05 53 63 72                  db      5, "Scr# "
 686+ 3D4B 23 20
 687+ 3D4D C4 3C                        dw      DOT
 688+ 3D4F 8A 27 4B 27                  dw      LSCR, ZERO, C_DO
 688+ 3D53 CE 20
 689+ 3D55              List_Loop:
 690+ 3D55 4D 22                        dw          CR
 691+ 3D57 D4 20 60 27                  dw          I, THREE
 692+ 3D5B A8 3C 41 29                  dw          DOT_R, SPACE
 693+ 3D5F D4 20 FE 27                  dw          I, SCR, FETCH, DOT_LINE
 693+ 3D63 54 26 94 35
 694+ 3D67 57 23                        dw          QTERMINAL
 695+ 3D69 8F 20                        dw          ZBRANCH
 696+ 3D6B 06 00                        dw          List_Endif - $
 697+ 3D6D 9A 20                        dw              C_LEAVE
 698+ 3D6F 06 00                        dw              List_Leave - $
 699+ 3D71              List_Endif:
 700+ 3D71 7A 20                        dw      C_LOOP
 701+ 3D73 E2 FF                        dw      List_Loop - $
 702+ 3D75              List_Leave:
 703+ 3D75 4D 22                        dw      CR
 704+ 3D77 0C 25                        dw      EXIT
 705+ 3D79
 706+ 3D79              //  ______________________________________________________________________
 707+ 3D79              //
 708+ 3D79              // index        n1 n2 --
 709+ 3D79                              Colon_Def INDEX, "INDEX", is_normal
 709+ 3D79             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 709+ 3D79             >
 709+ 3D79             >Dict_Ptr        defl    $
 709+ 3D79             >
 709+ 3D79             >//              ______________________________________________________________________
 709+ 3D79             >//              Heap part
 709+ 3D79             >
 709+ 3D79             >
 709+ 3D79             >                org     (Heap_Ptr & $1FFF) + $E000
 709+ EC31             >
 709+ EC31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 709+ EC31             >Latest_Definition defl  Heap_Ptr
 709+ EC31             >
 709+ EC31             >                // dummy db directives used to calculate length of namec
 709+ EC31 49 4E 44 45 >                db      "INDEX"
 709+ EC35 58          >
 709+ EC36             >len_NFA         defl    $ - temp_NFA
 709+ EC36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 709+ EC31             >
 709+ EC31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 709+ EC32 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 709+ EC36 58          >
 709+ EC37             >                org     $-1                 // alter last byte of Name just above to set
 709+ EC36 D8          >                db      {b $} | END_BIT     // msb as name end
 709+ EC37             >
 709+ EC37 28 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 709+ EC39             >Prev_Ptr        defl    Heap_Ptr
 709+ EC39             >
 709+ EC39             >mirror_Ptr      defl    $
 709+ EC39             >
 709+ EC39 7B 3D       >                dw      Dict_Ptr + 2        // xt
 709+ EC3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 709+ EC3B             >
 709+ EC3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 709+ EC3B             >
 709+ EC3B             >//              ______________________________________________________________________
 709+ EC3B             >//              Dictionary part
 709+ EC3B             >
 709+ EC3B             >                org     Dict_Ptr
 709+ 3D79             >
 709+ 3D79 39 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 709+ 3D7B             >
 709+ 3D7B             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 709+ 3D7B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 709+ 3D7E             >
 709+ 3D7E             >
 709+ 3D7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 709+ 3D7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 709+ 3D7E             >
 709+ 3D7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 710+ 3D7E 77 25 DC 25                  dw      ONE_PLUS, SWAP, C_DO
 710+ 3D82 CE 20
 711+ 3D84              Index_Loop:
 712+ 3D84 4D 22 D4 20                  dw          CR, I, THREE
 712+ 3D88 60 27
 713+ 3D8A A8 3C 41 29                  dw          DOT_R, SPACE
 714+ 3D8E 4B 27 D4 20                  dw          ZERO, I, DOT_LINE
 714+ 3D92 94 35
 715+ 3D94 57 23                        dw          QTERMINAL
 716+ 3D96 8F 20                        dw          ZBRANCH
 717+ 3D98 06 00                        dw          Index_Endif - $
 718+ 3D9A 9A 20                        dw              C_LEAVE
 719+ 3D9C 06 00                        dw              Index_Leave - $
 720+ 3D9E              Index_Endif:
 721+ 3D9E 7A 20                        dw      C_LOOP
 722+ 3DA0 E4 FF                        dw      Index_Loop - $
 723+ 3DA2              Index_Leave:
 724+ 3DA2 4D 22                        dw      CR
 725+ 3DA4 0C 25                        dw      EXIT
 726+ 3DA6
 727+ 3DA6              //  ______________________________________________________________________
 728+ 3DA6              //
 729+ 3DA6              // cls          --
 730+ 3DA6                              Colon_Def CLS, "CLS", is_normal
 730+ 3DA6             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 730+ 3DA6             >
 730+ 3DA6             >Dict_Ptr        defl    $
 730+ 3DA6             >
 730+ 3DA6             >//              ______________________________________________________________________
 730+ 3DA6             >//              Heap part
 730+ 3DA6             >
 730+ 3DA6             >
 730+ 3DA6             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ EC3B             >
 730+ EC3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ EC3B             >Latest_Definition defl  Heap_Ptr
 730+ EC3B             >
 730+ EC3B             >                // dummy db directives used to calculate length of namec
 730+ EC3B 43 4C 53    >                db      "CLS"
 730+ EC3E             >len_NFA         defl    $ - temp_NFA
 730+ EC3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ EC3B             >
 730+ EC3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ EC3C 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 730+ EC3F             >                org     $-1                 // alter last byte of Name just above to set
 730+ EC3E D3          >                db      {b $} | END_BIT     // msb as name end
 730+ EC3F             >
 730+ EC3F 31 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ EC41             >Prev_Ptr        defl    Heap_Ptr
 730+ EC41             >
 730+ EC41             >mirror_Ptr      defl    $
 730+ EC41             >
 730+ EC41 A8 3D       >                dw      Dict_Ptr + 2        // xt
 730+ EC43             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ EC43             >
 730+ EC43             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ EC43             >
 730+ EC43             >//              ______________________________________________________________________
 730+ EC43             >//              Dictionary part
 730+ EC43             >
 730+ EC43             >                org     Dict_Ptr
 730+ 3DA6             >
 730+ 3DA6 41 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 3DA8             >
 730+ 3DA8             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 3DA8 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 3DAB             >
 730+ 3DAB             >
 730+ 3DAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 3DAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 3DAB             >
 730+ 3DAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 3DAB 3D 20 0E 00                  dw      LIT, $0E, EMITC
 731+ 3DAF 3C 22
 732+ 3DB1 0C 25                        dw      EXIT
 733+ 3DB3
 734+ 3DB3              //  ______________________________________________________________________
 735+ 3DB3              //
 736+ 3DB3              // splash       --
 737+ 3DB3              //              Colon_Def SPLASH, "SPLASH", is_normal
 738+ 3DB3              //              dw      CLS
 739+ 3DB3              //              dw      C_DOT_QUOTE
 740+ 3DB3              //              db      87
 741+ 3DB3              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 742+ 3DB3              //              db      "Heap Vocabulary - build 20240119", 13  // 33
 743+ 3DB3              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 744+ 3DB3              //              dw      EXIT
 745+ 3DB3
 746+ 3DB3              //  ______________________________________________________________________
 747+ 3DB3              //
 748+ 3DB3              // splash       --
 749+ 3DB3                              Colon_Def SPLASH, "SPLASH", is_normal
 749+ 3DB3             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 749+ 3DB3             >
 749+ 3DB3             >Dict_Ptr        defl    $
 749+ 3DB3             >
 749+ 3DB3             >//              ______________________________________________________________________
 749+ 3DB3             >//              Heap part
 749+ 3DB3             >
 749+ 3DB3             >
 749+ 3DB3             >                org     (Heap_Ptr & $1FFF) + $E000
 749+ EC43             >
 749+ EC43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ EC43             >Latest_Definition defl  Heap_Ptr
 749+ EC43             >
 749+ EC43             >                // dummy db directives used to calculate length of namec
 749+ EC43 53 50 4C 41 >                db      "SPLASH"
 749+ EC47 53 48       >
 749+ EC49             >len_NFA         defl    $ - temp_NFA
 749+ EC49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ EC43             >
 749+ EC43 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ EC44 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 749+ EC48 53 48       >
 749+ EC4A             >                org     $-1                 // alter last byte of Name just above to set
 749+ EC49 C8          >                db      {b $} | END_BIT     // msb as name end
 749+ EC4A             >
 749+ EC4A 3B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 749+ EC4C             >Prev_Ptr        defl    Heap_Ptr
 749+ EC4C             >
 749+ EC4C             >mirror_Ptr      defl    $
 749+ EC4C             >
 749+ EC4C B5 3D       >                dw      Dict_Ptr + 2        // xt
 749+ EC4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 749+ EC4E             >
 749+ EC4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 749+ EC4E             >
 749+ EC4E             >//              ______________________________________________________________________
 749+ EC4E             >//              Dictionary part
 749+ EC4E             >
 749+ EC4E             >                org     Dict_Ptr
 749+ 3DB3             >
 749+ 3DB3 4C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 749+ 3DB5             >
 749+ 3DB5             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 3DB5 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 3DB8             >
 749+ 3DB8             >
 749+ 3DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 3DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 3DB8             >
 749+ 3DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 3DB8 A8 3D                        dw      CLS
 751+ 3DBA 3D 20 02 00                  dw      LIT, Splash_Ptr
 752+ 3DBE B2 29                        dw      FAR
 753+ 3DC0 E8 2B 3C 2C                  dw      COUNT, TYPE
 754+ 3DC4 0C 25                        dw      EXIT
 755+ 3DC6
 756+ 3DC6              //  ______________________________________________________________________
 757+ 3DC6              //
 758+ 3DC6              // video        --
 759+ 3DC6                              Colon_Def VIDEO, "VIDEO", is_normal
 759+ 3DC6             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 759+ 3DC6             >
 759+ 3DC6             >Dict_Ptr        defl    $
 759+ 3DC6             >
 759+ 3DC6             >//              ______________________________________________________________________
 759+ 3DC6             >//              Heap part
 759+ 3DC6             >
 759+ 3DC6             >
 759+ 3DC6             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ EC4E             >
 759+ EC4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ EC4E             >Latest_Definition defl  Heap_Ptr
 759+ EC4E             >
 759+ EC4E             >                // dummy db directives used to calculate length of namec
 759+ EC4E 56 49 44 45 >                db      "VIDEO"
 759+ EC52 4F          >
 759+ EC53             >len_NFA         defl    $ - temp_NFA
 759+ EC53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ EC4E             >
 759+ EC4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ EC4F 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 759+ EC53 4F          >
 759+ EC54             >                org     $-1                 // alter last byte of Name just above to set
 759+ EC53 CF          >                db      {b $} | END_BIT     // msb as name end
 759+ EC54             >
 759+ EC54 43 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ EC56             >Prev_Ptr        defl    Heap_Ptr
 759+ EC56             >
 759+ EC56             >mirror_Ptr      defl    $
 759+ EC56             >
 759+ EC56 C8 3D       >                dw      Dict_Ptr + 2        // xt
 759+ EC58             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ EC58             >
 759+ EC58             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ EC58             >
 759+ EC58             >//              ______________________________________________________________________
 759+ EC58             >//              Dictionary part
 759+ EC58             >
 759+ EC58             >                org     Dict_Ptr
 759+ 3DC6             >
 759+ 3DC6 56 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 3DC8             >
 759+ 3DC8             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 3DC8 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 3DCB             >
 759+ 3DCB             >
 759+ 3DCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 3DCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 3DCB             >
 759+ 3DCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 3DCB 59 27 E3 25                  dw      TWO, DUP, DEVICE, STORE
 760+ 3DCF C9 35 5E 26
 761+ 3DD3 6B 23                        dw      SELECT
 762+ 3DD5 0C 25                        dw      EXIT
 763+ 3DD7
 764+ 3DD7              //  ______________________________________________________________________
 765+ 3DD7              //
 766+ 3DD7              // autoexec     --
 767+ 3DD7              // this word is called the first time the Forth system boot to
 768+ 3DD7              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 769+ 3DD7                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 769+ 3DD7             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 769+ 3DD7             >
 769+ 3DD7             >Dict_Ptr        defl    $
 769+ 3DD7             >
 769+ 3DD7             >//              ______________________________________________________________________
 769+ 3DD7             >//              Heap part
 769+ 3DD7             >
 769+ 3DD7             >
 769+ 3DD7             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC58             >
 769+ EC58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC58             >Latest_Definition defl  Heap_Ptr
 769+ EC58             >
 769+ EC58             >                // dummy db directives used to calculate length of namec
 769+ EC58 41 55 54 4F >                db      "AUTOEXEC"
 769+ EC5C 45 58 45 43 >
 769+ EC60             >len_NFA         defl    $ - temp_NFA
 769+ EC60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC58             >
 769+ EC58 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC59 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 769+ EC5D 45 58 45 43 >
 769+ EC61             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC60 C3          >                db      {b $} | END_BIT     // msb as name end
 769+ EC61             >
 769+ EC61 4E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC63             >Prev_Ptr        defl    Heap_Ptr
 769+ EC63             >
 769+ EC63             >mirror_Ptr      defl    $
 769+ EC63             >
 769+ EC63 D9 3D       >                dw      Dict_Ptr + 2        // xt
 769+ EC65             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC65             >
 769+ EC65             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC65             >
 769+ EC65             >//              ______________________________________________________________________
 769+ EC65             >//              Dictionary part
 769+ EC65             >
 769+ EC65             >                org     Dict_Ptr
 769+ 3DD7             >
 769+ 3DD7 63 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 3DD9             >
 769+ 3DD9             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 3DD9 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 3DDC             >
 769+ 3DDC             >
 769+ 3DDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 3DDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 3DDC             >
 769+ 3DDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 3DDC              Autoexec_Self:
 771+ 3DDC 3D 20 97 39                  dw      LIT, Param
 772+ 3DE0 7F 2D 52 27                  dw      PAD, ONE
 773+ 3DE4 0E 24                        dw      F_OPEN
 774+ 3DE6 C8 25                        dw      DROP
 775+ 3DE8 74 38                        dw      F_INCLUDE
 776+ 3DEA 3C 32                        dw      QUIT
 777+ 3DEC 3D 20 3C 32                  dw      LIT, QUIT
 778+ 3DF0 3D 20 DC 3D                  dw      LIT, Autoexec_Self
 779+ 3DF4 5E 26                        dw      STORE
 780+ 3DF6 0C 25                        dw      EXIT
 781+ 3DF8
 782+ 3DF8
 783+ 3DF8              //  ______________________________________________________________________
 784+ 3DF8              //
 785+ 3DF8              // bye     --
 786+ 3DF8              //
 787+ 3DF8                              Colon_Def BYE, "BYE", is_normal
 787+ 3DF8             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 787+ 3DF8             >
 787+ 3DF8             >Dict_Ptr        defl    $
 787+ 3DF8             >
 787+ 3DF8             >//              ______________________________________________________________________
 787+ 3DF8             >//              Heap part
 787+ 3DF8             >
 787+ 3DF8             >
 787+ 3DF8             >                org     (Heap_Ptr & $1FFF) + $E000
 787+ EC65             >
 787+ EC65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ EC65             >Latest_Definition defl  Heap_Ptr
 787+ EC65             >
 787+ EC65             >                // dummy db directives used to calculate length of namec
 787+ EC65 42 59 45    >                db      "BYE"
 787+ EC68             >len_NFA         defl    $ - temp_NFA
 787+ EC68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ EC65             >
 787+ EC65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ EC66 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 787+ EC69             >                org     $-1                 // alter last byte of Name just above to set
 787+ EC68 C5          >                db      {b $} | END_BIT     // msb as name end
 787+ EC69             >
 787+ EC69 58 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 787+ EC6B             >Prev_Ptr        defl    Heap_Ptr
 787+ EC6B             >
 787+ EC6B             >mirror_Ptr      defl    $
 787+ EC6B             >
 787+ EC6B FA 3D       >                dw      Dict_Ptr + 2        // xt
 787+ EC6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 787+ EC6D             >
 787+ EC6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 787+ EC6D             >
 787+ EC6D             >//              ______________________________________________________________________
 787+ EC6D             >//              Dictionary part
 787+ EC6D             >
 787+ EC6D             >                org     Dict_Ptr
 787+ 3DF8             >
 787+ 3DF8 6B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 787+ 3DFA             >
 787+ 3DFA             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 3DFA CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 3DFD             >
 787+ 3DFD             >
 787+ 3DFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 3DFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 3DFD             >
 787+ 3DFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 3DFD BA 37                        dw      FLUSH
 789+ 3DFF 08 37                        dw      EMPTY_BUFFERS
 790+ 3E01 84 3F 54 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 790+ 3E05 A6 23 C8 25
 791+ 3E09 4B 27 91 27                  dw      ZERO, PLUS_ORIGIN
 792+ 3E0D 29 34                        dw      BASIC
 793+ 3E0F
 794+ 3E0F              //  ______________________________________________________________________
 795+ 3E0F              //
 796+ 3E0F              // invv     --
 797+ 3E0F              //
 798+ 3E0F              //              Colon_Def INVV, "INVV", is_normal
 799+ 3E0F              //              dw      LIT, 20, EMITC, ONE, EMITC
 800+ 3E0F              //              dw      EXIT
 801+ 3E0F
 802+ 3E0F              //  ______________________________________________________________________
 803+ 3E0F              //
 804+ 3E0F              // truv     --
 805+ 3E0F              //
 806+ 3E0F              //              Colon_Def TRUV, "TRUV", is_normal
 807+ 3E0F              //              dw      LIT, 20, EMITC, ZERO, EMITC
 808+ 3E0F              //              dw      EXIT
 809+ 3E0F
 810+ 3E0F              //  ______________________________________________________________________
 811+ 3E0F              //
 812+ 3E0F              // mark     --
 813+ 3E0F              //
 814+ 3E0F              //              Colon_Def MARK, "MARK", is_normal
 815+ 3E0F              //              dw      INVV, TYPE, TRUV
 816+ 3E0F              //              dw      EXIT
 817+ 3E0F
 818+ 3E0F              //  ______________________________________________________________________
 819+ 3E0F              //
 820+ 3E0F              // back     --
 821+ 3E0F              //
 822+ 3E0F                              Colon_Def BACK, "BACK", is_normal
 822+ 3E0F             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 822+ 3E0F             >
 822+ 3E0F             >Dict_Ptr        defl    $
 822+ 3E0F             >
 822+ 3E0F             >//              ______________________________________________________________________
 822+ 3E0F             >//              Heap part
 822+ 3E0F             >
 822+ 3E0F             >
 822+ 3E0F             >                org     (Heap_Ptr & $1FFF) + $E000
 822+ EC6D             >
 822+ EC6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 822+ EC6D             >Latest_Definition defl  Heap_Ptr
 822+ EC6D             >
 822+ EC6D             >                // dummy db directives used to calculate length of namec
 822+ EC6D 42 41 43 4B >                db      "BACK"
 822+ EC71             >len_NFA         defl    $ - temp_NFA
 822+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 822+ EC6D             >
 822+ EC6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 822+ EC6E 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 822+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 822+ EC71 CB          >                db      {b $} | END_BIT     // msb as name end
 822+ EC72             >
 822+ EC72 65 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 822+ EC74             >Prev_Ptr        defl    Heap_Ptr
 822+ EC74             >
 822+ EC74             >mirror_Ptr      defl    $
 822+ EC74             >
 822+ EC74 11 3E       >                dw      Dict_Ptr + 2        // xt
 822+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 822+ EC76             >
 822+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 822+ EC76             >
 822+ EC76             >//              ______________________________________________________________________
 822+ EC76             >//              Dictionary part
 822+ EC76             >
 822+ EC76             >                org     Dict_Ptr
 822+ 3E0F             >
 822+ 3E0F 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 822+ 3E11             >
 822+ 3E11             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 822+ 3E11 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 822+ 3E14             >
 822+ 3E14             >
 822+ 3E14             >                endif           ; ok        // for other definitions it "points" the correct handler
 822+ 3E14             >                // Use of "; ok" to suppress "warning[fwdref]"
 822+ 3E14             >
 822+ 3E14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 823+ 3E14 70 28 AF 28                  dw      HERE, SUBTRACT, COMMA
 823+ 3E18 86 28
 824+ 3E1A 0C 25                        dw      EXIT
 825+ 3E1C
 826+ 3E1C              //  ______________________________________________________________________
 827+ 3E1C              //
 828+ 3E1C              // if          ( -- a 2 ) \ compile-time
 829+ 3E1C              // IF ... THEN
 830+ 3E1C              // IF ... ELSE ... ENDIF
 831+ 3E1C                              Colon_Def IF, "IF", is_immediate
 831+ 3E1C             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 831+ 3E1C             >
 831+ 3E1C             >Dict_Ptr        defl    $
 831+ 3E1C             >
 831+ 3E1C             >//              ______________________________________________________________________
 831+ 3E1C             >//              Heap part
 831+ 3E1C             >
 831+ 3E1C             >
 831+ 3E1C             >                org     (Heap_Ptr & $1FFF) + $E000
 831+ EC76             >
 831+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ EC76             >Latest_Definition defl  Heap_Ptr
 831+ EC76             >
 831+ EC76             >                // dummy db directives used to calculate length of namec
 831+ EC76 49 46       >                db      "IF"
 831+ EC78             >len_NFA         defl    $ - temp_NFA
 831+ EC78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ EC76             >
 831+ EC76 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ EC77 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 831+ EC79             >                org     $-1                 // alter last byte of Name just above to set
 831+ EC78 C6          >                db      {b $} | END_BIT     // msb as name end
 831+ EC79             >
 831+ EC79 6D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 831+ EC7B             >Prev_Ptr        defl    Heap_Ptr
 831+ EC7B             >
 831+ EC7B             >mirror_Ptr      defl    $
 831+ EC7B             >
 831+ EC7B 1E 3E       >                dw      Dict_Ptr + 2        // xt
 831+ EC7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 831+ EC7D             >
 831+ EC7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 831+ EC7D             >
 831+ EC7D             >//              ______________________________________________________________________
 831+ EC7D             >//              Dictionary part
 831+ EC7D             >
 831+ EC7D             >                org     Dict_Ptr
 831+ 3E1C             >
 831+ 3E1C 7B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 831+ 3E1E             >
 831+ 3E1E             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 3E1E CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 3E21             >
 831+ 3E21             >
 831+ 3E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 3E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 3E21             >
 831+ 3E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 3E21 1C 2B 8F 20                  dw      COMPILE, ZBRANCH
 833+ 3E25 70 28 4B 27                  dw      HERE, ZERO, COMMA
 833+ 3E29 86 28
 834+ 3E2B 59 27                        dw      TWO
 835+ 3E2D 0C 25                        dw      EXIT
 836+ 3E2F
 837+ 3E2F              //  ______________________________________________________________________
 838+ 3E2F              //
 839+ 3E2F              // then        ( a 2 -- ) \ compile-time
 840+ 3E2F              //
 841+ 3E2F                              Colon_Def THEN, "THEN", is_immediate
 841+ 3E2F             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 841+ 3E2F             >
 841+ 3E2F             >Dict_Ptr        defl    $
 841+ 3E2F             >
 841+ 3E2F             >//              ______________________________________________________________________
 841+ 3E2F             >//              Heap part
 841+ 3E2F             >
 841+ 3E2F             >
 841+ 3E2F             >                org     (Heap_Ptr & $1FFF) + $E000
 841+ EC7D             >
 841+ EC7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 841+ EC7D             >Latest_Definition defl  Heap_Ptr
 841+ EC7D             >
 841+ EC7D             >                // dummy db directives used to calculate length of namec
 841+ EC7D 54 48 45 4E >                db      "THEN"
 841+ EC81             >len_NFA         defl    $ - temp_NFA
 841+ EC81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 841+ EC7D             >
 841+ EC7D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 841+ EC7E 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 841+ EC82             >                org     $-1                 // alter last byte of Name just above to set
 841+ EC81 CE          >                db      {b $} | END_BIT     // msb as name end
 841+ EC82             >
 841+ EC82 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 841+ EC84             >Prev_Ptr        defl    Heap_Ptr
 841+ EC84             >
 841+ EC84             >mirror_Ptr      defl    $
 841+ EC84             >
 841+ EC84 31 3E       >                dw      Dict_Ptr + 2        // xt
 841+ EC86             >Heap_Ptr        defl    $ - $E000           // save current HP
 841+ EC86             >
 841+ EC86             >Current_HP      defl  $ - $E000             // used to set HP once!
 841+ EC86             >
 841+ EC86             >//              ______________________________________________________________________
 841+ EC86             >//              Dictionary part
 841+ EC86             >
 841+ EC86             >                org     Dict_Ptr
 841+ 3E2F             >
 841+ 3E2F 84 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 841+ 3E31             >
 841+ 3E31             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 841+ 3E31 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 841+ 3E34             >
 841+ 3E34             >
 841+ 3E34             >                endif           ; ok        // for other definitions it "points" the correct handler
 841+ 3E34             >                // Use of "; ok" to suppress "warning[fwdref]"
 841+ 3E34             >
 841+ 3E34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 842+ 3E34 C1 2A                        dw      QCOMP
 843+ 3E36 59 27 E5 2A                  dw      TWO, QPAIRS
 844+ 3E3A 70 28 BF 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 844+ 3E3E AF 28 DC 25
 844+ 3E42 5E 26
 845+ 3E44 0C 25                        dw      EXIT
 846+ 3E46
 847+ 3E46              //  ______________________________________________________________________
 848+ 3E46              //
 849+ 3E46              // endif       ( a 2 -- ) \ compile-time
 850+ 3E46              //
 851+ 3E46                              Colon_Def ENDIF, "ENDIF", is_immediate
 851+ 3E46             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 851+ 3E46             >
 851+ 3E46             >Dict_Ptr        defl    $
 851+ 3E46             >
 851+ 3E46             >//              ______________________________________________________________________
 851+ 3E46             >//              Heap part
 851+ 3E46             >
 851+ 3E46             >
 851+ 3E46             >                org     (Heap_Ptr & $1FFF) + $E000
 851+ EC86             >
 851+ EC86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ EC86             >Latest_Definition defl  Heap_Ptr
 851+ EC86             >
 851+ EC86             >                // dummy db directives used to calculate length of namec
 851+ EC86 45 4E 44 49 >                db      "ENDIF"
 851+ EC8A 46          >
 851+ EC8B             >len_NFA         defl    $ - temp_NFA
 851+ EC8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ EC86             >
 851+ EC86 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ EC87 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 851+ EC8B 46          >
 851+ EC8C             >                org     $-1                 // alter last byte of Name just above to set
 851+ EC8B C6          >                db      {b $} | END_BIT     // msb as name end
 851+ EC8C             >
 851+ EC8C 7D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 851+ EC8E             >Prev_Ptr        defl    Heap_Ptr
 851+ EC8E             >
 851+ EC8E             >mirror_Ptr      defl    $
 851+ EC8E             >
 851+ EC8E 48 3E       >                dw      Dict_Ptr + 2        // xt
 851+ EC90             >Heap_Ptr        defl    $ - $E000           // save current HP
 851+ EC90             >
 851+ EC90             >Current_HP      defl  $ - $E000             // used to set HP once!
 851+ EC90             >
 851+ EC90             >//              ______________________________________________________________________
 851+ EC90             >//              Dictionary part
 851+ EC90             >
 851+ EC90             >                org     Dict_Ptr
 851+ 3E46             >
 851+ 3E46 8E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 851+ 3E48             >
 851+ 3E48             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 3E48 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ 3E4B             >
 851+ 3E4B             >
 851+ 3E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 3E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 3E4B             >
 851+ 3E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 3E4B 31 3E                        dw      THEN
 853+ 3E4D 0C 25                        dw      EXIT
 854+ 3E4F
 855+ 3E4F              //  ______________________________________________________________________
 856+ 3E4F              //
 857+ 3E4F              // else        ( a1 2 -- a2 2 ) \ compile-time
 858+ 3E4F              //
 859+ 3E4F                              Colon_Def ELSE, "ELSE", is_immediate
 859+ 3E4F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 859+ 3E4F             >
 859+ 3E4F             >Dict_Ptr        defl    $
 859+ 3E4F             >
 859+ 3E4F             >//              ______________________________________________________________________
 859+ 3E4F             >//              Heap part
 859+ 3E4F             >
 859+ 3E4F             >
 859+ 3E4F             >                org     (Heap_Ptr & $1FFF) + $E000
 859+ EC90             >
 859+ EC90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ EC90             >Latest_Definition defl  Heap_Ptr
 859+ EC90             >
 859+ EC90             >                // dummy db directives used to calculate length of namec
 859+ EC90 45 4C 53 45 >                db      "ELSE"
 859+ EC94             >len_NFA         defl    $ - temp_NFA
 859+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ EC90             >
 859+ EC90 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ EC91 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 859+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 859+ EC94 C5          >                db      {b $} | END_BIT     // msb as name end
 859+ EC95             >
 859+ EC95 86 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 859+ EC97             >Prev_Ptr        defl    Heap_Ptr
 859+ EC97             >
 859+ EC97             >mirror_Ptr      defl    $
 859+ EC97             >
 859+ EC97 51 3E       >                dw      Dict_Ptr + 2        // xt
 859+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 859+ EC99             >
 859+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 859+ EC99             >
 859+ EC99             >//              ______________________________________________________________________
 859+ EC99             >//              Dictionary part
 859+ EC99             >
 859+ EC99             >                org     Dict_Ptr
 859+ 3E4F             >
 859+ 3E4F 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 859+ 3E51             >
 859+ 3E51             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 3E51 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 859+ 3E54             >
 859+ 3E54             >
 859+ 3E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 3E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 3E54             >
 859+ 3E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 860+ 3E54 C1 2A                        dw      QCOMP
 861+ 3E56 59 27 E5 2A                  dw      TWO, QPAIRS
 862+ 3E5A 1C 2B 82 20                  dw      COMPILE, BRANCH
 863+ 3E5E 70 28 4B 27                  dw      HERE, ZERO, COMMA
 863+ 3E62 86 28
 864+ 3E64 DC 25 59 27                  dw      SWAP, TWO, THEN
 864+ 3E68 31 3E
 865+ 3E6A 59 27                        dw      TWO
 866+ 3E6C 0C 25                        dw      EXIT
 867+ 3E6E
 868+ 3E6E              //  ______________________________________________________________________
 869+ 3E6E              //
 870+ 3E6E              // begin        ( -- a 1 ) \ compile-time
 871+ 3E6E              // BEGIN ... AGAIN
 872+ 3E6E              // BEGIN ... f UNTIL
 873+ 3E6E              // BEGIN ... f WHILE ... REPEAT
 874+ 3E6E                              Colon_Def BEGIN, "BEGIN", is_immediate
 874+ 3E6E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 874+ 3E6E             >
 874+ 3E6E             >Dict_Ptr        defl    $
 874+ 3E6E             >
 874+ 3E6E             >//              ______________________________________________________________________
 874+ 3E6E             >//              Heap part
 874+ 3E6E             >
 874+ 3E6E             >
 874+ 3E6E             >                org     (Heap_Ptr & $1FFF) + $E000
 874+ EC99             >
 874+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ EC99             >Latest_Definition defl  Heap_Ptr
 874+ EC99             >
 874+ EC99             >                // dummy db directives used to calculate length of namec
 874+ EC99 42 45 47 49 >                db      "BEGIN"
 874+ EC9D 4E          >
 874+ EC9E             >len_NFA         defl    $ - temp_NFA
 874+ EC9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ EC99             >
 874+ EC99 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ EC9A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 874+ EC9E 4E          >
 874+ EC9F             >                org     $-1                 // alter last byte of Name just above to set
 874+ EC9E CE          >                db      {b $} | END_BIT     // msb as name end
 874+ EC9F             >
 874+ EC9F 90 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 874+ ECA1             >Prev_Ptr        defl    Heap_Ptr
 874+ ECA1             >
 874+ ECA1             >mirror_Ptr      defl    $
 874+ ECA1             >
 874+ ECA1 70 3E       >                dw      Dict_Ptr + 2        // xt
 874+ ECA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 874+ ECA3             >
 874+ ECA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 874+ ECA3             >
 874+ ECA3             >//              ______________________________________________________________________
 874+ ECA3             >//              Dictionary part
 874+ ECA3             >
 874+ ECA3             >                org     Dict_Ptr
 874+ 3E6E             >
 874+ 3E6E A1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 874+ 3E70             >
 874+ 3E70             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 3E70 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 3E73             >
 874+ 3E73             >
 874+ 3E73             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 3E73             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 3E73             >
 874+ 3E73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 3E73 C1 2A                        dw      QCOMP
 876+ 3E75 70 28                        dw      HERE
 877+ 3E77 59 27                        dw      TWO
 878+ 3E79 0C 25                        dw      EXIT
 879+ 3E7B
 880+ 3E7B              //  ______________________________________________________________________
 881+ 3E7B              //
 882+ 3E7B              // again        ( a 1 -- ) \ compile-time
 883+ 3E7B                              Colon_Def AGAIN, "AGAIN", is_immediate
 883+ 3E7B             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 883+ 3E7B             >
 883+ 3E7B             >Dict_Ptr        defl    $
 883+ 3E7B             >
 883+ 3E7B             >//              ______________________________________________________________________
 883+ 3E7B             >//              Heap part
 883+ 3E7B             >
 883+ 3E7B             >
 883+ 3E7B             >                org     (Heap_Ptr & $1FFF) + $E000
 883+ ECA3             >
 883+ ECA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ ECA3             >Latest_Definition defl  Heap_Ptr
 883+ ECA3             >
 883+ ECA3             >                // dummy db directives used to calculate length of namec
 883+ ECA3 41 47 41 49 >                db      "AGAIN"
 883+ ECA7 4E          >
 883+ ECA8             >len_NFA         defl    $ - temp_NFA
 883+ ECA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ ECA3             >
 883+ ECA3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ ECA4 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 883+ ECA8 4E          >
 883+ ECA9             >                org     $-1                 // alter last byte of Name just above to set
 883+ ECA8 CE          >                db      {b $} | END_BIT     // msb as name end
 883+ ECA9             >
 883+ ECA9 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 883+ ECAB             >Prev_Ptr        defl    Heap_Ptr
 883+ ECAB             >
 883+ ECAB             >mirror_Ptr      defl    $
 883+ ECAB             >
 883+ ECAB 7D 3E       >                dw      Dict_Ptr + 2        // xt
 883+ ECAD             >Heap_Ptr        defl    $ - $E000           // save current HP
 883+ ECAD             >
 883+ ECAD             >Current_HP      defl  $ - $E000             // used to set HP once!
 883+ ECAD             >
 883+ ECAD             >//              ______________________________________________________________________
 883+ ECAD             >//              Dictionary part
 883+ ECAD             >
 883+ ECAD             >                org     Dict_Ptr
 883+ 3E7B             >
 883+ 3E7B AB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 883+ 3E7D             >
 883+ 3E7D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 3E7D CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 883+ 3E80             >
 883+ 3E80             >
 883+ 3E80             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 3E80             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 3E80             >
 883+ 3E80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 3E80 C1 2A                        dw      QCOMP
 885+ 3E82 59 27 E5 2A                  dw      TWO, QPAIRS
 886+ 3E86 1C 2B 82 20                  dw      COMPILE, BRANCH
 887+ 3E8A 11 3E                        dw      BACK
 888+ 3E8C 0C 25                        dw      EXIT
 889+ 3E8E
 890+ 3E8E              //  ______________________________________________________________________
 891+ 3E8E              //
 892+ 3E8E              // until        ( a 1 -- ) \ compile-time
 893+ 3E8E                              Colon_Def UNTIL, "UNTIL", is_immediate
 893+ 3E8E             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 893+ 3E8E             >
 893+ 3E8E             >Dict_Ptr        defl    $
 893+ 3E8E             >
 893+ 3E8E             >//              ______________________________________________________________________
 893+ 3E8E             >//              Heap part
 893+ 3E8E             >
 893+ 3E8E             >
 893+ 3E8E             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ ECAD             >
 893+ ECAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ ECAD             >Latest_Definition defl  Heap_Ptr
 893+ ECAD             >
 893+ ECAD             >                // dummy db directives used to calculate length of namec
 893+ ECAD 55 4E 54 49 >                db      "UNTIL"
 893+ ECB1 4C          >
 893+ ECB2             >len_NFA         defl    $ - temp_NFA
 893+ ECB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ ECAD             >
 893+ ECAD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ ECAE 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 893+ ECB2 4C          >
 893+ ECB3             >                org     $-1                 // alter last byte of Name just above to set
 893+ ECB2 CC          >                db      {b $} | END_BIT     // msb as name end
 893+ ECB3             >
 893+ ECB3 A3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ ECB5             >Prev_Ptr        defl    Heap_Ptr
 893+ ECB5             >
 893+ ECB5             >mirror_Ptr      defl    $
 893+ ECB5             >
 893+ ECB5 90 3E       >                dw      Dict_Ptr + 2        // xt
 893+ ECB7             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ ECB7             >
 893+ ECB7             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ ECB7             >
 893+ ECB7             >//              ______________________________________________________________________
 893+ ECB7             >//              Dictionary part
 893+ ECB7             >
 893+ ECB7             >                org     Dict_Ptr
 893+ 3E8E             >
 893+ 3E8E B5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 3E90             >
 893+ 3E90             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 3E90 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 893+ 3E93             >
 893+ 3E93             >
 893+ 3E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 3E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 3E93             >
 893+ 3E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 3E93 C1 2A                        dw      QCOMP
 895+ 3E95 59 27 E5 2A                  dw      TWO, QPAIRS
 896+ 3E99 1C 2B 8F 20                  dw      COMPILE, ZBRANCH
 897+ 3E9D 11 3E                        dw      BACK
 898+ 3E9F 0C 25                        dw      EXIT
 899+ 3EA1
 900+ 3EA1              //  ______________________________________________________________________
 901+ 3EA1              //
 902+ 3EA1              // end          ( a 1 -- ) \ compile-time
 903+ 3EA1                              Colon_Def END, "END", is_immediate
 903+ 3EA1             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 903+ 3EA1             >
 903+ 3EA1             >Dict_Ptr        defl    $
 903+ 3EA1             >
 903+ 3EA1             >//              ______________________________________________________________________
 903+ 3EA1             >//              Heap part
 903+ 3EA1             >
 903+ 3EA1             >
 903+ 3EA1             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ ECB7             >
 903+ ECB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ ECB7             >Latest_Definition defl  Heap_Ptr
 903+ ECB7             >
 903+ ECB7             >                // dummy db directives used to calculate length of namec
 903+ ECB7 45 4E 44    >                db      "END"
 903+ ECBA             >len_NFA         defl    $ - temp_NFA
 903+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ ECB7             >
 903+ ECB7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ ECB8 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 903+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 903+ ECBA C4          >                db      {b $} | END_BIT     // msb as name end
 903+ ECBB             >
 903+ ECBB AD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 903+ ECBD             >
 903+ ECBD             >mirror_Ptr      defl    $
 903+ ECBD             >
 903+ ECBD A3 3E       >                dw      Dict_Ptr + 2        // xt
 903+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ ECBF             >
 903+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ ECBF             >
 903+ ECBF             >//              ______________________________________________________________________
 903+ ECBF             >//              Dictionary part
 903+ ECBF             >
 903+ ECBF             >                org     Dict_Ptr
 903+ 3EA1             >
 903+ 3EA1 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 3EA3             >
 903+ 3EA3             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 3EA3 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 3EA6             >
 903+ 3EA6             >
 903+ 3EA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 3EA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 3EA6             >
 903+ 3EA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 3EA6 90 3E                        dw      UNTIL
 905+ 3EA8 0C 25                        dw      EXIT
 906+ 3EAA
 907+ 3EAA              //  ______________________________________________________________________
 908+ 3EAA              //
 909+ 3EAA              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 910+ 3EAA                              Colon_Def WHILE, "WHILE", is_immediate
 910+ 3EAA             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 910+ 3EAA             >
 910+ 3EAA             >Dict_Ptr        defl    $
 910+ 3EAA             >
 910+ 3EAA             >//              ______________________________________________________________________
 910+ 3EAA             >//              Heap part
 910+ 3EAA             >
 910+ 3EAA             >
 910+ 3EAA             >                org     (Heap_Ptr & $1FFF) + $E000
 910+ ECBF             >
 910+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ ECBF             >Latest_Definition defl  Heap_Ptr
 910+ ECBF             >
 910+ ECBF             >                // dummy db directives used to calculate length of namec
 910+ ECBF 57 48 49 4C >                db      "WHILE"
 910+ ECC3 45          >
 910+ ECC4             >len_NFA         defl    $ - temp_NFA
 910+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ ECBF             >
 910+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ ECC0 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 910+ ECC4 45          >
 910+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 910+ ECC4 C5          >                db      {b $} | END_BIT     // msb as name end
 910+ ECC5             >
 910+ ECC5 B7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 910+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 910+ ECC7             >
 910+ ECC7             >mirror_Ptr      defl    $
 910+ ECC7             >
 910+ ECC7 AC 3E       >                dw      Dict_Ptr + 2        // xt
 910+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 910+ ECC9             >
 910+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 910+ ECC9             >
 910+ ECC9             >//              ______________________________________________________________________
 910+ ECC9             >//              Dictionary part
 910+ ECC9             >
 910+ ECC9             >                org     Dict_Ptr
 910+ 3EAA             >
 910+ 3EAA C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 910+ 3EAC             >
 910+ 3EAC             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 3EAC CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 3EAF             >
 910+ 3EAF             >
 910+ 3EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 3EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 3EAF             >
 910+ 3EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 3EAF 1E 3E                        dw      IF
 912+ 3EB1              //              dw      TWO_PLUS // ( that is 4 )
 913+ 3EB1 25 26                        dw      TWO_SWAP
 914+ 3EB3 0C 25                        dw      EXIT
 915+ 3EB5
 916+ 3EB5              //  ______________________________________________________________________
 917+ 3EB5              //
 918+ 3EB5              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 919+ 3EB5                              Colon_Def REPEAT, "REPEAT", is_immediate
 919+ 3EB5             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 919+ 3EB5             >
 919+ 3EB5             >Dict_Ptr        defl    $
 919+ 3EB5             >
 919+ 3EB5             >//              ______________________________________________________________________
 919+ 3EB5             >//              Heap part
 919+ 3EB5             >
 919+ 3EB5             >
 919+ 3EB5             >                org     (Heap_Ptr & $1FFF) + $E000
 919+ ECC9             >
 919+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ ECC9             >Latest_Definition defl  Heap_Ptr
 919+ ECC9             >
 919+ ECC9             >                // dummy db directives used to calculate length of namec
 919+ ECC9 52 45 50 45 >                db      "REPEAT"
 919+ ECCD 41 54       >
 919+ ECCF             >len_NFA         defl    $ - temp_NFA
 919+ ECCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ ECC9             >
 919+ ECC9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ ECCA 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 919+ ECCE 41 54       >
 919+ ECD0             >                org     $-1                 // alter last byte of Name just above to set
 919+ ECCF D4          >                db      {b $} | END_BIT     // msb as name end
 919+ ECD0             >
 919+ ECD0 BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 919+ ECD2             >Prev_Ptr        defl    Heap_Ptr
 919+ ECD2             >
 919+ ECD2             >mirror_Ptr      defl    $
 919+ ECD2             >
 919+ ECD2 B7 3E       >                dw      Dict_Ptr + 2        // xt
 919+ ECD4             >Heap_Ptr        defl    $ - $E000           // save current HP
 919+ ECD4             >
 919+ ECD4             >Current_HP      defl  $ - $E000             // used to set HP once!
 919+ ECD4             >
 919+ ECD4             >//              ______________________________________________________________________
 919+ ECD4             >//              Dictionary part
 919+ ECD4             >
 919+ ECD4             >                org     Dict_Ptr
 919+ 3EB5             >
 919+ 3EB5 D2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 919+ 3EB7             >
 919+ 3EB7             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 3EB7 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 3EBA             >
 919+ 3EBA             >
 919+ 3EBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 3EBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 3EBA             >
 919+ 3EBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 3EBA 7D 3E                        dw      AGAIN
 921+ 3EBC              //              dw      TWO_MINUS
 922+ 3EBC 31 3E                        dw      THEN
 923+ 3EBE 0C 25                        dw      EXIT
 924+ 3EC0
 925+ 3EC0              //  ______________________________________________________________________
 926+ 3EC0              //
 927+ 3EC0              // ?do-
 928+ 3EC0              // special version of "BACK" used by ?DO and LOOP
 929+ 3EC0                              Colon_Def C_DO_BACK, "?DO-", is_normal
 929+ 3EC0             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 929+ 3EC0             >
 929+ 3EC0             >Dict_Ptr        defl    $
 929+ 3EC0             >
 929+ 3EC0             >//              ______________________________________________________________________
 929+ 3EC0             >//              Heap part
 929+ 3EC0             >
 929+ 3EC0             >
 929+ 3EC0             >                org     (Heap_Ptr & $1FFF) + $E000
 929+ ECD4             >
 929+ ECD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ ECD4             >Latest_Definition defl  Heap_Ptr
 929+ ECD4             >
 929+ ECD4             >                // dummy db directives used to calculate length of namec
 929+ ECD4 3F 44 4F 2D >                db      "?DO-"
 929+ ECD8             >len_NFA         defl    $ - temp_NFA
 929+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ ECD4             >
 929+ ECD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ ECD5 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 929+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 929+ ECD8 AD          >                db      {b $} | END_BIT     // msb as name end
 929+ ECD9             >
 929+ ECD9 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 929+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 929+ ECDB             >
 929+ ECDB             >mirror_Ptr      defl    $
 929+ ECDB             >
 929+ ECDB C2 3E       >                dw      Dict_Ptr + 2        // xt
 929+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 929+ ECDD             >
 929+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 929+ ECDD             >
 929+ ECDD             >//              ______________________________________________________________________
 929+ ECDD             >//              Dictionary part
 929+ ECDD             >
 929+ ECDD             >                org     Dict_Ptr
 929+ 3EC0             >
 929+ 3EC0 DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 929+ 3EC2             >
 929+ 3EC2             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 3EC2 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 3EC5             >
 929+ 3EC5             >
 929+ 3EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 3EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 3EC5             >
 929+ 3EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 3EC5 11 3E                        dw      BACK
 931+ 3EC7              CDoBack_Begin:
 932+ 3EC7 F3 24 2E 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 932+ 3ECB 54 26 AF 28
 933+ 3ECF 8F 20                        dw      ZBRANCH
 934+ 3ED1 0A 00                        dw      CDoBack_While - $
 935+ 3ED3 85 25 31 3E                  dw          TWO_PLUS, THEN
 936+ 3ED7 82 20                        dw      BRANCH
 937+ 3ED9 EE FF                        dw      CDoBack_Begin - $
 938+ 3EDB              CDoBack_While:
 939+ 3EDB F4 2A 2E 28                  dw      QCSP, CSP, STORE
 939+ 3EDF 5E 26
 940+ 3EE1 0C 25                        dw      EXIT
 941+ 3EE3
 942+ 3EE3              //  ______________________________________________________________________
 943+ 3EE3              //
 944+ 3EE3              // do
 945+ 3EE3              // DO  ... LOOP
 946+ 3EE3              // DO  ... n +LOOP
 947+ 3EE3              // ?DO ... LOOP
 948+ 3EE3              // ?DO ... n +LOOP
 949+ 3EE3                              Colon_Def DO, "DO", is_immediate
 949+ 3EE3             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 949+ 3EE3             >
 949+ 3EE3             >Dict_Ptr        defl    $
 949+ 3EE3             >
 949+ 3EE3             >//              ______________________________________________________________________
 949+ 3EE3             >//              Heap part
 949+ 3EE3             >
 949+ 3EE3             >
 949+ 3EE3             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ ECDD             >
 949+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ ECDD             >Latest_Definition defl  Heap_Ptr
 949+ ECDD             >
 949+ ECDD             >                // dummy db directives used to calculate length of namec
 949+ ECDD 44 4F       >                db      "DO"
 949+ ECDF             >len_NFA         defl    $ - temp_NFA
 949+ ECDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ ECDD             >
 949+ ECDD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ ECDE 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 949+ ECE0             >                org     $-1                 // alter last byte of Name just above to set
 949+ ECDF CF          >                db      {b $} | END_BIT     // msb as name end
 949+ ECE0             >
 949+ ECE0 D4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ ECE2             >Prev_Ptr        defl    Heap_Ptr
 949+ ECE2             >
 949+ ECE2             >mirror_Ptr      defl    $
 949+ ECE2             >
 949+ ECE2 E5 3E       >                dw      Dict_Ptr + 2        // xt
 949+ ECE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ ECE4             >
 949+ ECE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ ECE4             >
 949+ ECE4             >//              ______________________________________________________________________
 949+ ECE4             >//              Dictionary part
 949+ ECE4             >
 949+ ECE4             >                org     Dict_Ptr
 949+ 3EE3             >
 949+ 3EE3 E2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 3EE5             >
 949+ 3EE5             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 3EE5 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 3EE8             >
 949+ 3EE8             >
 949+ 3EE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 3EE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 3EE8             >
 949+ 3EE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 3EE8 1C 2B CE 20                  dw      COMPILE, C_DO
 951+ 3EEC 2E 28 54 26                  dw      CSP, FETCH, STORE_CSP
 951+ 3EF0 9F 2A
 952+ 3EF2 70 28 60 27                  dw      HERE, THREE
 953+ 3EF6 0C 25                        dw      EXIT
 954+ 3EF8
 955+ 3EF8              //  ______________________________________________________________________
 956+ 3EF8              //
 957+ 3EF8              // loop
 958+ 3EF8                              Colon_Def LOOP, "LOOP", is_immediate
 958+ 3EF8             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 958+ 3EF8             >
 958+ 3EF8             >Dict_Ptr        defl    $
 958+ 3EF8             >
 958+ 3EF8             >//              ______________________________________________________________________
 958+ 3EF8             >//              Heap part
 958+ 3EF8             >
 958+ 3EF8             >
 958+ 3EF8             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ ECE4             >
 958+ ECE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ ECE4             >Latest_Definition defl  Heap_Ptr
 958+ ECE4             >
 958+ ECE4             >                // dummy db directives used to calculate length of namec
 958+ ECE4 4C 4F 4F 50 >                db      "LOOP"
 958+ ECE8             >len_NFA         defl    $ - temp_NFA
 958+ ECE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ ECE4             >
 958+ ECE4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ ECE5 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 958+ ECE9             >                org     $-1                 // alter last byte of Name just above to set
 958+ ECE8 D0          >                db      {b $} | END_BIT     // msb as name end
 958+ ECE9             >
 958+ ECE9 DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ ECEB             >Prev_Ptr        defl    Heap_Ptr
 958+ ECEB             >
 958+ ECEB             >mirror_Ptr      defl    $
 958+ ECEB             >
 958+ ECEB FA 3E       >                dw      Dict_Ptr + 2        // xt
 958+ ECED             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ ECED             >
 958+ ECED             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ ECED             >
 958+ ECED             >//              ______________________________________________________________________
 958+ ECED             >//              Dictionary part
 958+ ECED             >
 958+ ECED             >                org     Dict_Ptr
 958+ 3EF8             >
 958+ 3EF8 EB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 3EFA             >
 958+ 3EFA             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 3EFA CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 3EFD             >
 958+ 3EFD             >
 958+ 3EFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 3EFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 3EFD             >
 958+ 3EFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 3EFD 60 27 E5 2A                  dw      THREE, QPAIRS
 960+ 3F01 1C 2B 7A 20                  dw      COMPILE, C_LOOP
 961+ 3F05 C2 3E                        dw      C_DO_BACK
 962+ 3F07 0C 25                        dw      EXIT
 963+ 3F09
 964+ 3F09              //  ______________________________________________________________________
 965+ 3F09              //
 966+ 3F09              // +loop
 967+ 3F09                              Colon_Def PLOOP, "+LOOP", is_immediate
 967+ 3F09             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 967+ 3F09             >
 967+ 3F09             >Dict_Ptr        defl    $
 967+ 3F09             >
 967+ 3F09             >//              ______________________________________________________________________
 967+ 3F09             >//              Heap part
 967+ 3F09             >
 967+ 3F09             >
 967+ 3F09             >                org     (Heap_Ptr & $1FFF) + $E000
 967+ ECED             >
 967+ ECED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ ECED             >Latest_Definition defl  Heap_Ptr
 967+ ECED             >
 967+ ECED             >                // dummy db directives used to calculate length of namec
 967+ ECED 2B 4C 4F 4F >                db      "+LOOP"
 967+ ECF1 50          >
 967+ ECF2             >len_NFA         defl    $ - temp_NFA
 967+ ECF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ ECED             >
 967+ ECED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ ECEE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 967+ ECF2 50          >
 967+ ECF3             >                org     $-1                 // alter last byte of Name just above to set
 967+ ECF2 D0          >                db      {b $} | END_BIT     // msb as name end
 967+ ECF3             >
 967+ ECF3 E4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 967+ ECF5             >Prev_Ptr        defl    Heap_Ptr
 967+ ECF5             >
 967+ ECF5             >mirror_Ptr      defl    $
 967+ ECF5             >
 967+ ECF5 0B 3F       >                dw      Dict_Ptr + 2        // xt
 967+ ECF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 967+ ECF7             >
 967+ ECF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 967+ ECF7             >
 967+ ECF7             >//              ______________________________________________________________________
 967+ ECF7             >//              Dictionary part
 967+ ECF7             >
 967+ ECF7             >                org     Dict_Ptr
 967+ 3F09             >
 967+ 3F09 F5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 967+ 3F0B             >
 967+ 3F0B             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 3F0B CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 3F0E             >
 967+ 3F0E             >
 967+ 3F0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 3F0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 3F0E             >
 967+ 3F0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 3F0E 60 27 E5 2A                  dw      THREE, QPAIRS
 969+ 3F12 1C 2B 4B 20                  dw      COMPILE, C_PLOOP
 970+ 3F16 C2 3E                        dw      C_DO_BACK
 971+ 3F18 0C 25                        dw      EXIT
 972+ 3F1A
 973+ 3F1A              //  ______________________________________________________________________
 974+ 3F1A              //
 975+ 3F1A              // ?do
 976+ 3F1A                              Colon_Def QDO, "?DO", is_immediate
 976+ 3F1A             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 976+ 3F1A             >
 976+ 3F1A             >Dict_Ptr        defl    $
 976+ 3F1A             >
 976+ 3F1A             >//              ______________________________________________________________________
 976+ 3F1A             >//              Heap part
 976+ 3F1A             >
 976+ 3F1A             >
 976+ 3F1A             >                org     (Heap_Ptr & $1FFF) + $E000
 976+ ECF7             >
 976+ ECF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ ECF7             >Latest_Definition defl  Heap_Ptr
 976+ ECF7             >
 976+ ECF7             >                // dummy db directives used to calculate length of namec
 976+ ECF7 3F 44 4F    >                db      "?DO"
 976+ ECFA             >len_NFA         defl    $ - temp_NFA
 976+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ ECF7             >
 976+ ECF7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ ECF8 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 976+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
 976+ ECFA CF          >                db      {b $} | END_BIT     // msb as name end
 976+ ECFB             >
 976+ ECFB ED 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 976+ ECFD             >Prev_Ptr        defl    Heap_Ptr
 976+ ECFD             >
 976+ ECFD             >mirror_Ptr      defl    $
 976+ ECFD             >
 976+ ECFD 1C 3F       >                dw      Dict_Ptr + 2        // xt
 976+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 976+ ECFF             >
 976+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 976+ ECFF             >
 976+ ECFF             >//              ______________________________________________________________________
 976+ ECFF             >//              Dictionary part
 976+ ECFF             >
 976+ ECFF             >                org     Dict_Ptr
 976+ 3F1A             >
 976+ 3F1A FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 976+ 3F1C             >
 976+ 3F1C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 3F1C CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 3F1F             >
 976+ 3F1F             >
 976+ 3F1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 3F1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 3F1F             >
 976+ 3F1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 3F1F 1C 2B A6 20                  dw      COMPILE, C_Q_DO
 978+ 3F23 2E 28 54 26                  dw      CSP, FETCH, STORE_CSP
 978+ 3F27 9F 2A
 979+ 3F29 70 28 4B 27                  dw      HERE, ZERO, COMMA, ZERO
 979+ 3F2D 86 28 4B 27
 980+ 3F31 70 28 60 27                  dw      HERE, THREE
 981+ 3F35 0C 25                        dw      EXIT
 982+ 3F37
 983+ 3F37              //  ______________________________________________________________________
 984+ 3F37              //
 985+ 3F37              // \
 986+ 3F37                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 986+ 3F37             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 986+ 3F37             >
 986+ 3F37             >Dict_Ptr        defl    $
 986+ 3F37             >
 986+ 3F37             >//              ______________________________________________________________________
 986+ 3F37             >//              Heap part
 986+ 3F37             >
 986+ 3F37             >
 986+ 3F37             >                org     (Heap_Ptr & $1FFF) + $E000
 986+ ECFF             >
 986+ ECFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 986+ ECFF             >Latest_Definition defl  Heap_Ptr
 986+ ECFF             >
 986+ ECFF             >                // dummy db directives used to calculate length of namec
 986+ ECFF 5C          >                db      "\\"
 986+ ED00             >len_NFA         defl    $ - temp_NFA
 986+ ED00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 986+ ECFF             >
 986+ ECFF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 986+ ED00 5C          >                db      "\\"               // name string in 7-bit ascii, but
 986+ ED01             >                org     $-1                 // alter last byte of Name just above to set
 986+ ED00 DC          >                db      {b $} | END_BIT     // msb as name end
 986+ ED01             >
 986+ ED01 F7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 986+ ED03             >Prev_Ptr        defl    Heap_Ptr
 986+ ED03             >
 986+ ED03             >mirror_Ptr      defl    $
 986+ ED03             >
 986+ ED03 39 3F       >                dw      Dict_Ptr + 2        // xt
 986+ ED05             >Heap_Ptr        defl    $ - $E000           // save current HP
 986+ ED05             >
 986+ ED05             >Current_HP      defl  $ - $E000             // used to set HP once!
 986+ ED05             >
 986+ ED05             >//              ______________________________________________________________________
 986+ ED05             >//              Dictionary part
 986+ ED05             >
 986+ ED05             >                org     Dict_Ptr
 986+ 3F37             >
 986+ 3F37 03 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 986+ 3F39             >
 986+ 3F39             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 986+ 3F39 CD F6 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 986+ 3F3C             >
 986+ 3F3C             >
 986+ 3F3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 986+ 3F3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 986+ 3F3C             >
 986+ 3F3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 987+ 3F3C EC 27 54 26                  dw      BLK, FETCH
 988+ 3F40 8F 20                        dw      ZBRANCH
 989+ 3F42 30 00                        dw      Backslash_Else_1 - $
 990+ 3F44 EC 27 54 26                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 990+ 3F48 52 27 E9 28
 991+ 3F4C 8F 20                        dw          ZBRANCH
 992+ 3F4E 18 00                        dw          Backslash_Else_2 - $
 993+ 3F50 F2 27 54 26                  dw              TO_IN, FETCH, CL, MOD, CL
 993+ 3F54 75 27 52 35
 993+ 3F58 75 27
 994+ 3F5A DC 25 AF 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 994+ 3F5E F2 27 3C 26
 995+ 3F62 82 20                        dw          BRANCH
 996+ 3F64 0A 00                        dw          Backslash_Endif_2 - $
 997+ 3F66              Backslash_Else_2:
 998+ 3F66 7C 27 91 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 998+ 3F6A F2 27 5E 26
 999+ 3F6E              Backslash_Endif_2:
1000+ 3F6E 82 20                        dw      BRANCH
1001+ 3F70 10 00                        dw      Backslash_Endif_1 - $
1002+ 3F72              Backslash_Else_1:
1003+ 3F72 4B 27 B0 27                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1003+ 3F76 54 26 F2 27
1003+ 3F7A 54 26 5E 25
1003+ 3F7E 5E 26
1004+ 3F80              Backslash_Endif_1:
1005+ 3F80 0C 25                        dw      EXIT
1006+ 3F82
1007+ 3F82              //  ______________________________________________________________________
1008+ 3F82              //
1009+ 3F82              // blk-fh
1010+ 3F82                              Variable_Def BLK_FH,   "BLK-FH",   1
1010+ 3F82             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1010+ 3F82             >
1010+ 3F82             >Dict_Ptr        defl    $
1010+ 3F82             >
1010+ 3F82             >//              ______________________________________________________________________
1010+ 3F82             >//              Heap part
1010+ 3F82             >
1010+ 3F82             >
1010+ 3F82             >                org     (Heap_Ptr & $1FFF) + $E000
1010+ ED05             >
1010+ ED05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ ED05             >Latest_Definition defl  Heap_Ptr
1010+ ED05             >
1010+ ED05             >                // dummy db directives used to calculate length of namec
1010+ ED05 42 4C 4B 2D >                db      "BLK-FH"
1010+ ED09 46 48       >
1010+ ED0B             >len_NFA         defl    $ - temp_NFA
1010+ ED0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ ED05             >
1010+ ED05 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ ED06 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1010+ ED0A 46 48       >
1010+ ED0C             >                org     $-1                 // alter last byte of Name just above to set
1010+ ED0B C8          >                db      {b $} | END_BIT     // msb as name end
1010+ ED0C             >
1010+ ED0C FF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1010+ ED0E             >Prev_Ptr        defl    Heap_Ptr
1010+ ED0E             >
1010+ ED0E             >mirror_Ptr      defl    $
1010+ ED0E             >
1010+ ED0E 84 3F       >                dw      Dict_Ptr + 2        // xt
1010+ ED10             >Heap_Ptr        defl    $ - $E000           // save current HP
1010+ ED10             >
1010+ ED10             >Current_HP      defl  $ - $E000             // used to set HP once!
1010+ ED10             >
1010+ ED10             >//              ______________________________________________________________________
1010+ ED10             >//              Dictionary part
1010+ ED10             >
1010+ ED10             >                org     Dict_Ptr
1010+ 3F82             >
1010+ 3F82 0E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1010+ 3F84             >
1010+ 3F84             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 3F84 CD 32 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1010+ 3F87             >
1010+ 3F87             >
1010+ 3F87             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 3F87             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 3F87             >
1010+ 3F87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 3F87 01 00       >                dw      1
1011+ 3F89
1012+ 3F89                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1012+ 3F89             >
1012+ 3F89             >Dict_Ptr        defl    $
1012+ 3F89             >
1012+ 3F89             >//              ______________________________________________________________________
1012+ 3F89             >//              Heap part
1012+ 3F89             >
1012+ 3F89             >
1012+ 3F89             >                org     (Heap_Ptr & $1FFF) + $E000
1012+ ED10             >
1012+ ED10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1012+ ED10             >Latest_Definition defl  Heap_Ptr
1012+ ED10             >
1012+ ED10             >                // dummy db directives used to calculate length of namec
1012+ ED10 42 4C 4B 2D >                db      "BLK-FNAME"
1012+ ED14 46 4E 41 4D >
1012+ ED18 45          >
1012+ ED19             >len_NFA         defl    $ - temp_NFA
1012+ ED19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1012+ ED10             >
1012+ ED10 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1012+ ED11 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1012+ ED15 46 4E 41 4D >
1012+ ED19 45          >
1012+ ED1A             >                org     $-1                 // alter last byte of Name just above to set
1012+ ED19 C5          >                db      {b $} | END_BIT     // msb as name end
1012+ ED1A             >
1012+ ED1A 05 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1012+ ED1C             >Prev_Ptr        defl    Heap_Ptr
1012+ ED1C             >
1012+ ED1C             >mirror_Ptr      defl    $
1012+ ED1C             >
1012+ ED1C 8B 3F       >                dw      Dict_Ptr + 2        // xt
1012+ ED1E             >Heap_Ptr        defl    $ - $E000           // save current HP
1012+ ED1E             >
1012+ ED1E             >Current_HP      defl  $ - $E000             // used to set HP once!
1012+ ED1E             >
1012+ ED1E             >//              ______________________________________________________________________
1012+ ED1E             >//              Dictionary part
1012+ ED1E             >
1012+ ED1E             >                org     Dict_Ptr
1012+ 3F89             >
1012+ 3F89 1C 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1012+ 3F8B             >
1012+ 3F8B             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1012+ 3F8B CD DF 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1012+ 3F8E             >
1012+ 3F8E             >
1012+ 3F8E             >                endif           ; ok        // for other definitions it "points" the correct handler
1012+ 3F8E             >                // Use of "; ok" to suppress "warning[fwdref]"
1012+ 3F8E             >
1012+ 3F8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1013+ 3F8E 1E           Len_Filename:   db      30
1014+ 3F8F 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1014+ 3F93 6F 6F 6C 73
1014+ 3F97 2F 76 66 6F
1014+ 3F9B 72 74 68 2F
1014+ 3F9F 21 42 6C 6F
1014+ 3FA3 63 6B 73 2D
1014+ 3FA7 36 34 2E 62
1014+ 3FAB 69 6E 00
1015+ 3FAE
1016+ 3FAE              Fence_Word:
1017+ 3FAE              //  ______________________________________________________________________
1018+ 3FAE              //
1019+ 3FAE
1020+ 3FAE 00           Here_Dictionary db      0
1021+ 3FAF
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 126  3FAF
 127  3FAF              // now we save the compiled file so we can either run it or debug it
 128  3FAF                              SAVENEX OPEN "output/main.nex", ORIGIN
 129  3FAF                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 130  3FAF                              SAVENEX CFG  0
 131  3FAF                              SAVENEX BANK 2, 0
 132  3FAF                              SAVENEX AUTO
 133  3FAF                              SAVENEX CLOSE
 134  3FAF
 135  3FAF              //              PAGE 7 ;set 7 page to current slot
 136  3FAF              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 137  3FAF              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 138  3FAF
 139  3FAF                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 140  3FAF                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 141  3FAF
 142  3FAF                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 143  3FAF                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 144  3FAF
 145  3FAF                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 146  3FAF                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 147  3FAF
 148  3FAF                              // To run must copy vforth and vforth.bin to /dot directory
 149  3FAF                              // then start with
 150  3FAF                              //      .vforth
 151  3FAF
 152  3FAF                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
