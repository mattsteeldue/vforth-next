# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  DOT-command version
   8  0000              //  build 20231112
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              //  This work is available as-is with no whatsoever warranty.
  16  0000              //  Copying, modifying and distributing this software is allowed
  17  0000              //  provided that the copyright notice is kept.
  18  0000              //  ______________________________________________________________________
  19  0000              //
  20  0000              //  by Matteo Vitturi, 1990-2023
  21  0000              //
  22  0000              //  https://sites.google.com/view/vforth/vforth15-next
  23  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  24  0000              //
  25  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  26  0000              //  Each line of this source list mustn't exceed 80 bytes.
  27  0000              //  Z80N (ZX Spectrum Next) extension is available.
  28  0000              //
  29  0000              //  This list has been tested using the following configuration:
  30  0000              //      - CSpect emulator V.2.12.30
  31  0000              //  ______________________________________________________________________
  32  0000              //
  33  0000              //  Z80 Registers usage map
  34  0000              //
  35  0000              //  AF
  36  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  37  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  38  0000              //  HL - Working
  39  0000              //
  40  0000              //  AF'- Sometime used for backup purpose
  41  0000              //  BC'- Not used
  42  0000              //  DE'- Not used
  43  0000              //  HL'- Not used
  44  0000              //
  45  0000              //  SP - Calculator Stack Pointer
  46  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  47  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  48  0000              //
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  _________________
  52  0000              //
  53  0000              //  FORTH DEFINITIONS
  54  0000              //  _________________
  55  0000
  56  0000                              OPT     --zxnext
  57  0000              //  ______________________________________________________________________
  58  0000              //
  59  0000              // this controls some debugging code in L0.asm
  60  0000              //  0 for final binary release.
  61  0000              //  1 for debugging with Visual Studio Code and DeZog
  62  0000              // -1 for for binary comparison with Forth generated code.
  63  0000              DEBUGGING       equ     1   // .dot
  64  0000              //
  65  0000              //  ______________________________________________________________________
  66  0000
  67  0000                              if ( -1 == DEBUGGING )
  68  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  69  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  70  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  71  0000 ~            Heap_offset     defl    $2000
  72  0000 ~
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  0 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  78  0000 ~            // ORIGIN          equ     $9A93                // binary and Tape
  79  0000 ~            Heap_Ptr        defl    $0002
  80  0000 ~            Heap_offset     defl     0
  81  0000 ~
  82  0000                              endif
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if (  1 == DEBUGGING )
  86  0000              ORIGIN          equ     $2000                   // for .dot
  87  0000              Heap_Ptr        defl    $0002
  88  0000              Heap_offset     defl     0
  89  0000
  90  0000                              endif
  91  0000              //  ______________________________________________________________________
  92  0000
  93  0000                              DEVICE  ZXSPECTRUMNEXT
  94  0000
  95  0000                              ORG     ORIGIN
  96  2000
  97  2000                              if ( -1 == DEBUGGING )
  98  2000 ~                            ds 128                            // for binary comparison
  99  2000                              endif
 100  2000
 101  2000              //  ______________________________________________________________________
 102  2000              //
 103  2000              //  Naming convention for Label vs Forth correspondance
 104  2000              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 105  2000              //    - Leading "0" is converted into "Z_"
 106  2000              //    - Leading "(" is converted into "C_", closing bracket is omitted
 107  2000              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 108  2000              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 109  2000              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 110  2000              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 111  2000              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 112  2000              //    - Equal sign "=" is converted in EQUAL
 113  2000              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 114  2000              //    - Asterisk sign "*" is converted in _MUL or STAR
 115  2000              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 116  2000              //    - Exclamation mark "!" is converted in STORE
 117  2000              //    - At-Sign "@" is converted in FETCH
 118  2000              //    - Words that collide with Assembler are normally suffixed with "_OP"
 119  2000
 120  2000                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  system.asm
   4+ 2000              //  ______________________________________________________________________
   5+ 2000
   6+ 2000              // Registers:
   7+ 2000              //
   8+ 2000              //      BC: Instruction Pointer
   9+ 2000              //      DE: Return Stack Pointer
  10+ 2000              //      HL: W register
  11+ 2000              //      SP: Calc stack Pointer
  12+ 2000              //      IX: Inner-Interpreter Address
  13+ 2000
  14+ 2000              //  ______________________________________________________________________
  15+ 2000              //
  16+ 2000              // ZX-Spectrum standard system variables
  17+ 2000              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 2000              LASTK           equ     $5C08                   // LASTK system variable
  19+ 2000              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 2000              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 2000              RAMTOP          equ     $5CB2
  22+ 2000              TSTACK          equ     $5C00                   // TSTACK
  23+ 2000              // FSTACK          ecu     $4000 - 8
  24+ 2000              //  ______________________________________________________________________
  25+ 2000              //
  26+ 2000              // Flag constants
  27+ 2000              TRUE_FLAG       equ     $FFFF
  28+ 2000              FALSE_FLAG      equ     $0000
  29+ 2000
  30+ 2000              //  ______________________________________________________________________
  31+ 2000              //
  32+ 2000              // Ascii char constants
  33+ 2000              NUL_CHAR        equ     $00
  34+ 2000              COMMA_CHAR      equ     $06
  35+ 2000              BACKSPACE_CHAR  equ     $08
  36+ 2000              CR_CHAR         equ     $0D
  37+ 2000              BLANK_CHAR      equ     $20
  38+ 2000              QUOTE_CHAR      equ     "'"
  39+ 2000              DQUOTE_CHAR     equ     '"'
  40+ 2000              UNDERSCORE_CHAR equ     $5F
  41+ 2000              SOLIDBLOCK_CHAR equ     $8F
  42+ 2000              HALFBLOCK_CHAR  equ     $8C
  43+ 2000              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 2000              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 2000
  46+ 2000
  47+ 2000              //  ______________________________________________________________________
  48+ 2000              //
  49+ 2000
  50+ 2000                              // emulate something like:  ld hl,rp
  51+ 2000              ldhlrp          macro
  52+ 2000 ~                            ld      hl,(RP_Pointer)
  53+ 2000                              endm
  54+ 2000
  55+ 2000                              // emulate something like:  ld rp,hl
  56+ 2000              ldrphl          macro
  57+ 2000 ~                            ld      (RP_Pointer),hl
  58+ 2000                              endm
  59+ 2000
  60+ 2000              //  ______________________________________________________________________
  61+ 2000              //
  62+ 2000              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 2000              next            macro
  64+ 2000 ~                            jp      (ix)
  65+ 2000                              endm
  66+ 2000
  67+ 2000              psh1            macro
  68+ 2000 ~                            push    hl
  69+ 2000 ~                            jp      (ix)
  70+ 2000                              endm
  71+ 2000
  72+ 2000              psh2            macro
  73+ 2000 ~                            push    de
  74+ 2000 ~                            push    hl
  75+ 2000 ~                            jp      (ix)
  76+ 2000                              endm
  77+ 2000
  78+ 2000              //  ______________________________________________________________________
  79+ 2000              //
  80+ 2000              // Bit constants in length-byte
  81+ 2000
  82+ 2000              SMUDGE_BIT      equ     %00100000               // $20
  83+ 2000              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 2000              END_BIT         equ     %10000000               // $80
  85+ 2000
  86+ 2000
  87+ 2000              //  ______________________________________________________________________
  88+ 2000              //
  89+ 2000              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 2000              //  pointers
  91+ 2000              temp_NFA        defl    0
  92+ 2000              last_NFA        defl    0
  93+ 2000              len_NFA         defl    0
  94+ 2000
  95+ 2000              Dict_Ptr        defl    0
  96+ 2000              // Heap_Ptr        defl    $0002
  97+ 2000              Prev_Ptr        defl    0
  98+ 2000              mirror_Ptr      defl    0
  99+ 2000
 100+ 2000              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 2000              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 2000              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 2000
 104+ 2000
 105+ 2000              Behave          macro   xp
 106+ 2000 ~            temp_PTR        defl    $                   // save this org
 107+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 2000 ~                            dw      xp
 109+ 2000 ~                            org     temp_PTR
 110+ 2000                              endm
 111+ 2000
 112+ 2000              //  ______________________________________________________________________
 113+ 2000              //
 114+ 2000              //  Create a new "low-level" definition
 115+ 2000              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 2000              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 2000              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 2000              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 2000              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 2000              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 2000              //  This macro acts much like the standard Forth definition CREATE
 122+ 2000
 123+ 2000              New_Def         macro   label, namec, runcode, bits
 124+ 2000 ~
 125+ 2000 ~            Dict_Ptr        defl    $
 126+ 2000 ~
 127+ 2000 ~            //              ______________________________________________________________________
 128+ 2000 ~            //              Heap part
 129+ 2000 ~
 130+ 2000 ~
 131+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 2000 ~
 133+ 2000 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 2000 ~            Latest_Definition defl  Heap_Ptr
 135+ 2000 ~
 136+ 2000 ~                            // dummy db directives used to calculate length of namec
 137+ 2000 ~                            db      namec
 138+ 2000 ~            len_NFA         defl    $ - temp_NFA
 139+ 2000 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 2000 ~
 141+ 2000 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 2000 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 2000 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 2000 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 2000 ~
 146+ 2000 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 2000 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 2000 ~
 149+ 2000 ~            mirror_Ptr      defl    $
 150+ 2000 ~
 151+ 2000 ~                            dw      Dict_Ptr + 2        // xt
 152+ 2000 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 2000 ~
 154+ 2000 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 2000 ~
 156+ 2000 ~            //              ______________________________________________________________________
 157+ 2000 ~            //              Dictionary part
 158+ 2000 ~
 159+ 2000 ~                            org     Dict_Ptr
 160+ 2000 ~
 161+ 2000 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 2000 ~
 163+ 2000 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 2000 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 2000 ~
 166+ 2000 ~
 167+ 2000 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 2000 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 2000 ~
 170+ 2000 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2000                              endm
 172+ 2000
 173+ 2000              //  ______________________________________________________________________
 174+ 2000              //
 175+ 2000              // Create a "constant"
 176+ 2000              // The constant value is compiled in first PFA cell
 177+ 2000              Constant_Def    macro   label, namec, constant_value
 178+ 2000 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 2000 ~                            dw      constant_value
 180+ 2000                              endm
 181+ 2000
 182+ 2000              //  ______________________________________________________________________
 183+ 2000              //
 184+ 2000              // Create a "variable"
 185+ 2000              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 2000              // this allow creation of "variables" which content is  of any length
 187+ 2000              Variable_Def    macro   label, namec, initial_value
 188+ 2000 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 2000 ~                            dw      initial_value
 190+ 2000                              endm
 191+ 2000
 192+ 2000              //  ______________________________________________________________________
 193+ 2000              //
 194+ 2000              // Create a "user"
 195+ 2000              // It uses a single byte as offset to calculate the address of the variable
 196+ 2000              User_Def        macro   label, namec, offset_value
 197+ 2000 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 2000 ~                            db      offset_value
 199+ 2000                              endm
 200+ 2000
 201+ 2000              //  ______________________________________________________________________
 202+ 2000              //
 203+ 2000              // Create a "colon-definition"
 204+ 2000              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 2000              // The PFA, three bytes later, contains the actual Forth definition
 206+ 2000              Colon_Def       macro   label, namec, bits
 207+ 2000 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 2000                              endm
 209+ 2000
 210+ 2000              //  ______________________________________________________________________
 211+ 2000              //
 212+ 2000              // Create a "heap-string"
 213+ 2000              Start_Heap      macro
 214+ 2000 ~            temp_ORG        defl    $                   // save this ORG
 215+ 2000 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 2000 ~
 217+ 2000                              endm
 218+ 2000
 219+ 2000              End_Heap        macro
 220+ 2000 ~            Heap_Ptr        defl    $ - $E000
 221+ 2000 ~                            org     temp_ORG
 222+ 2000 ~
 223+ 2000                              endm
 224+ 2000
 225+ 2000
 226+ 2000              //  ______________________________________________________________________
 227+ 2000              //
 228+ 2000
 229+ 2000
 230+ 2000
 231+ 2000              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 2000              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 2000              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 2000              USER_system:    equ     $D188               // User variables zone.
 235+ 2000              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 2000              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 2000
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/system.asm
 121  2000                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
   1+ 2000              //  ______________________________________________________________________
   2+ 2000              //
   3+ 2000              //  L0.asm
   4+ 2000              //
   5+ 2000              //  Origin-Area and Level-0 definitions
   6+ 2000              //  ______________________________________________________________________
   7+ 2000
   8+ 2000              Cold_origin:
   9+ 2000 F3                           di      // and     a
  10+ 2001 C3 25 33                     jp      ColdRoutine
  11+ 2004              Warm_origin:
  12+ 2004 37                           scf
  13+ 2005 C3 25 33                     jp      WarmRoutine
  14+ 2008
  15+ 2008              // +008
  16+ 2008 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 200A
  18+ 200A              // +00A
  19+ 200A 00 0E                        dw      $0E00
  20+ 200C
  21+ 200C              // +00C
  22+ 200C 10 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 200E
  24+ 200E              // +00E
  25+ 200E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 2010
  27+ 2010              // +010
  28+ 2010 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 2012
  30+ 2012              // +012
  31+ 2012 E8 D0        S0_origin:      dw      S0_system
  32+ 2014 88 D1        R0_origin:      dw      R0_system
  33+ 2016 E8 D0        TIB_origin:     dw      TIB_system
  34+ 2018 1F 00        WIDTH_origin:   dw      31
  35+ 201A 01 00        WARNING_origin: dw      1
  36+ 201C 00 80        FENCE_origin:   dw      $8000 // $8184 // 25446 // $6000 // **** Fence_Word
  37+ 201E 00 80        DP_origin       dw      $8000 // $8184 // 25446 // $6000 // ****Fence_Word
  38+ 2020 11 32        VOCLINK_origin: dw      Voclink_Ptr
  39+ 2022 E4 D1                        dw      FIRST_system
  40+ 2024 00 E0                        dw      LIMIT_system
  41+ 2026 1E 0D        HP_origin:      dw      Current_HP
  42+ 2028
  43+ 2028              // +028
  44+ 2028 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 2029 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 202A 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 202B 00                           db      0
  48+ 202C
  49+ 202C              // +02C
  50+ 202C 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 202E
  52+ 202E              // +02E
  53+ 202E 88 D1        USER_Pointer:   dw      USER_system
  54+ 2030
  55+ 2030              // +030
  56+ 2030 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 2032
  58+ 2032              // +32
  59+ 2032 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 2034
  61+ 2034
  62+ 2034                              Start_Heap
  62+ 2034             >temp_ORG        defl    $                   // save this ORG
  62+ 2034             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6E                           db      110
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 32
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-11-19 ", $0D  // 36
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 33 2D 31 31
  67+ E044 2D 31 39 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 13
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi "                 // 25
  69+ E05B 30 2D 32 30
  69+ E05F 32 33 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20
  70+ E071                              End_Heap
  70+ E071             >Heap_Ptr        defl    $ - $E000
  70+ E071             >                org     temp_ORG
  70+ 2034             >
  71+ 2034
  72+ 2034              //  ______________________________________________________________________
  73+ 2034
  74+ 2034              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 2034              // instead of their equivalent long sequences.
  76+ 2034
  77+ 2034              //  ______________________________________________________________________
  78+ 2034
  79+ 2034              // address for "next" - inner interpreter
  80+ 2034              // This address must always be pointed by IX
  81+ 2034              // "next" macro simply does a  jp(ix)  instruction
  82+ 2034
  83+ 2034              // Psh2_Ptr:       push    de
  84+ 2034              // Psh1_Ptr:       push    hl
  85+ 2034
  86+ 2034              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 2034
  88+ 2034              //              if ( 1 == DEBUGGING )
  89+ 2034              //              ld      hl, Next_Breakpoint_1
  90+ 2034              //              and     a
  91+ 2034              //              sbc     hl, bc
  92+ 2034              //              jr      nz, Next_Continue
  93+ 2034              //              nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 2034              //              endif
  95+ 2034
  96+ 2034              Next_Continue:
  97+ 2034 0A                           ld      a, (bc)
  98+ 2035 03                           inc     bc
  99+ 2036 6F                           ld      l, a
 100+ 2037 0A                           ld      a, (bc)
 101+ 2038 03                           inc     bc
 102+ 2039 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 203A
 104+ 203A              // Execute xt i.e. CFA held in HL
 105+ 203A              Exec_Ptr:
 106+ 203A
 107+ 203A
 108+ 203A
 109+ 203A
 110+ 203A E9                           jp      (hl)                // and jump to it
 111+ 203B                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 203B
 113+ 203B              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 203B              // 0x00         n --      ( compile time )
 115+ 203B              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 203B              //              next
 117+ 203B
 118+ 203B              //  ______________________________________________________________________
 119+ 203B              //
 120+ 203B              // lit          -- x
 121+ 203B              // puts on top of stack the value of the following word.
 122+ 203B              // it is compiled in colon definition before a literal number
 123+ 203B
 124+ 203B                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 203B             >
 124+ 203B             >Dict_Ptr        defl    $
 124+ 203B             >
 124+ 203B             >//              ______________________________________________________________________
 124+ 203B             >//              Heap part
 124+ 203B             >
 124+ 203B             >
 124+ 203B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E071             >
 124+ E071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E071             >Latest_Definition defl  Heap_Ptr
 124+ E071             >
 124+ E071             >                // dummy db directives used to calculate length of namec
 124+ E071 4C 49 54    >                db      "LIT"
 124+ E074             >len_NFA         defl    $ - temp_NFA
 124+ E074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E071             >
 124+ E071 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E072 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E075             >                org     $-1                 // alter last byte of Name just above to set
 124+ E074 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E075             >
 124+ E075 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E077             >Prev_Ptr        defl    Heap_Ptr
 124+ E077             >
 124+ E077             >mirror_Ptr      defl    $
 124+ E077             >
 124+ E077 3D 20       >                dw      Dict_Ptr + 2        // xt
 124+ E079             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E079             >
 124+ E079             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E079             >
 124+ E079             >//              ______________________________________________________________________
 124+ E079             >//              Dictionary part
 124+ E079             >
 124+ E079             >                org     Dict_Ptr
 124+ 203B             >
 124+ 203B 77 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 203D             >
 124+ 203D             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 203D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 203D ~           >
 124+ 203D ~           >
 124+ 203D             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 203D             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 203D             >
 124+ 203D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 203D
 126+ 203D 0A                           ld      a, (bc)
 127+ 203E 03                           inc     bc
 128+ 203F 6F                           ld      l, a
 129+ 2040 0A                           ld      a, (bc)
 130+ 2041 03                           inc     bc
 131+ 2042 67                           ld      h, a
 132+ 2043 E5                           push    hl
 133+ 2044                              next
 133+ 2044 DD E9       >                jp      (ix)
 134+ 2046
 135+ 2046              //  ______________________________________________________________________
 136+ 2046              //
 137+ 2046              // execute      i*x xt -- j*x
 138+ 2046              // execution token. usually xt is given by CFA
 139+ 2046
 140+ 2046                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 2046             >
 140+ 2046             >Dict_Ptr        defl    $
 140+ 2046             >
 140+ 2046             >//              ______________________________________________________________________
 140+ 2046             >//              Heap part
 140+ 2046             >
 140+ 2046             >
 140+ 2046             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E079             >
 140+ E079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E079             >Latest_Definition defl  Heap_Ptr
 140+ E079             >
 140+ E079             >                // dummy db directives used to calculate length of namec
 140+ E079 45 58 45 43 >                db      "EXECUTE"
 140+ E07D 55 54 45    >
 140+ E080             >len_NFA         defl    $ - temp_NFA
 140+ E080             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E079             >
 140+ E079 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07A 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07E 55 54 45    >
 140+ E081             >                org     $-1                 // alter last byte of Name just above to set
 140+ E080 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E081             >
 140+ E081 71 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E083             >Prev_Ptr        defl    Heap_Ptr
 140+ E083             >
 140+ E083             >mirror_Ptr      defl    $
 140+ E083             >
 140+ E083 48 20       >                dw      Dict_Ptr + 2        // xt
 140+ E085             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E085             >
 140+ E085             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E085             >
 140+ E085             >//              ______________________________________________________________________
 140+ E085             >//              Dictionary part
 140+ E085             >
 140+ E085             >                org     Dict_Ptr
 140+ 2046             >
 140+ 2046 83 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 2048             >
 140+ 2048             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 2048 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 2048 ~           >
 140+ 2048 ~           >
 140+ 2048             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 2048             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 2048             >
 140+ 2048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 2048 C9                           ret
 142+ 2049
 143+ 2049              //  ______________________________________________________________________
 144+ 2049              //
 145+ 2049              // brk
 146+ 2049              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 2049              //              next
 148+ 2049
 149+ 2049
 150+ 2049
 151+ 2049              //  ______________________________________________________________________
 152+ 2049              //
 153+ 2049              // (+loop)      n --
 154+ 2049              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 2049              // keep track of index and limit, they are accessed via I and I'
 156+ 2049              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 2049              // between the loop limit minus one and the loop limit, continue execution
 158+ 2049              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 2049              // parameters and continue execution immediately following the loop.
 160+ 2049                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 2049             >
 160+ 2049             >Dict_Ptr        defl    $
 160+ 2049             >
 160+ 2049             >//              ______________________________________________________________________
 160+ 2049             >//              Heap part
 160+ 2049             >
 160+ 2049             >
 160+ 2049             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E085             >
 160+ E085             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E085             >Latest_Definition defl  Heap_Ptr
 160+ E085             >
 160+ E085             >                // dummy db directives used to calculate length of namec
 160+ E085 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E089 4F 50 29    >
 160+ E08C             >len_NFA         defl    $ - temp_NFA
 160+ E08C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E085             >
 160+ E085 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08A 4F 50 29    >
 160+ E08D             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08C A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08D             >
 160+ E08D 79 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E08F             >Prev_Ptr        defl    Heap_Ptr
 160+ E08F             >
 160+ E08F             >mirror_Ptr      defl    $
 160+ E08F             >
 160+ E08F 4B 20       >                dw      Dict_Ptr + 2        // xt
 160+ E091             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E091             >
 160+ E091             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E091             >
 160+ E091             >//              ______________________________________________________________________
 160+ E091             >//              Dictionary part
 160+ E091             >
 160+ E091             >                org     Dict_Ptr
 160+ 2049             >
 160+ 2049 8F 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 204B             >
 160+ 204B             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 204B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 204B ~           >
 160+ 204B ~           >
 160+ 204B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 204B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 204B             >
 160+ 204B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 204B
 162+ 204B              Loop_Ptr:
 163+ 204B E1                           pop     hl                  // get increment
 164+ 204C EB                           ex      de, hl
 165+ 204D                              // *** ldhlrp
 166+ 204D C5                           push    bc                  // Save IP
 167+ 204E 42                           ld      b, d                // bc is increment
 168+ 204F 4B                           ld      c, e
 169+ 2050 E5                           push    hl
 170+ 2051 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 2052 7B                           ld      a, e                // de keeps index before increment.
 172+ 2053 81                           add     c
 173+ 2054 77                           ld      (hl), a
 174+ 2055 23                           inc     hl
 175+ 2056 56                           ld      d, (hl)
 176+ 2057 7A                           ld      a, d
 177+ 2058 88                           adc     b
 178+ 2059 77                           ld      (hl),a
 179+ 205A 23                           inc     hl
 180+ 205B
 181+ 205B 7B                           ld      a, e
 182+ 205C 96                           sub     (hl)
 183+ 205D 5F                           ld      e, a
 184+ 205E 23                           inc     hl
 185+ 205F 7A                           ld      a, d
 186+ 2060 9E                           sbc     (hl)
 187+ 2061 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 2062
 189+ 2062 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 2063 09                           add     hl, bc
 191+ 2064 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 2066 28 01                        jr      z, Loop_NegativeIncrement
 193+ 2068 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 2069              Loop_NegativeIncrement:
 195+ 2069 38 04                        jr      c, Loop_Endif
 196+ 206B D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 206C C1                               pop     bc                  // Retrieve IP
 198+ 206D 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 206F              Loop_Endif:
 200+ 206F C1                           pop     bc                  // discard original RP
 201+ 2070 EB                           ex      de, hl
 202+ 2071 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 2072                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 2072 EB                           ex      de, hl
 205+ 2073 C1                           pop     bc                  // Retrieve IP
 206+ 2074 03                           inc     bc                  // skip branch-style offset
 207+ 2075 03                           inc     bc
 208+ 2076                              next
 208+ 2076 DD E9       >                jp      (ix)
 209+ 2078
 210+ 2078              //  ______________________________________________________________________
 211+ 2078              //
 212+ 2078              // (loop)       n --
 213+ 2078              // same as (LOOP) but index is incremented by 1
 214+ 2078              // compiled by LOOP.
 215+ 2078                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 2078             >
 215+ 2078             >Dict_Ptr        defl    $
 215+ 2078             >
 215+ 2078             >//              ______________________________________________________________________
 215+ 2078             >//              Heap part
 215+ 2078             >
 215+ 2078             >
 215+ 2078             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E091             >
 215+ E091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E091             >Latest_Definition defl  Heap_Ptr
 215+ E091             >
 215+ E091             >                // dummy db directives used to calculate length of namec
 215+ E091 28 4C 4F 4F >                db      "(LOOP)"
 215+ E095 50 29       >
 215+ E097             >len_NFA         defl    $ - temp_NFA
 215+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E091             >
 215+ E091 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E092 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E096 50 29       >
 215+ E098             >                org     $-1                 // alter last byte of Name just above to set
 215+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E098             >
 215+ E098 85 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09A             >Prev_Ptr        defl    Heap_Ptr
 215+ E09A             >
 215+ E09A             >mirror_Ptr      defl    $
 215+ E09A             >
 215+ E09A 7A 20       >                dw      Dict_Ptr + 2        // xt
 215+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09C             >
 215+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09C             >
 215+ E09C             >//              ______________________________________________________________________
 215+ E09C             >//              Dictionary part
 215+ E09C             >
 215+ E09C             >                org     Dict_Ptr
 215+ 2078             >
 215+ 2078 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 207A             >
 215+ 207A             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 207A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 207A ~           >
 215+ 207A ~           >
 215+ 207A             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 207A             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 207A             >
 215+ 207A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 207A ED 8A 00 01                  push    1
 217+ 207E 18 CB                        jr      Loop_Ptr
 218+ 2080
 219+ 2080              //  ______________________________________________________________________
 220+ 2080              //
 221+ 2080              // branch       --
 222+ 2080              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 2080              // compiled by ELSE, AGAIN and some other immediate words
 224+ 2080
 225+ 2080                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 2080             >
 225+ 2080             >Dict_Ptr        defl    $
 225+ 2080             >
 225+ 2080             >//              ______________________________________________________________________
 225+ 2080             >//              Heap part
 225+ 2080             >
 225+ 2080             >
 225+ 2080             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09C             >
 225+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09C             >Latest_Definition defl  Heap_Ptr
 225+ E09C             >
 225+ E09C             >                // dummy db directives used to calculate length of namec
 225+ E09C 42 52 41 4E >                db      "BRANCH"
 225+ E0A0 43 48       >
 225+ E0A2             >len_NFA         defl    $ - temp_NFA
 225+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09C             >
 225+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A1 43 48       >
 225+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A2 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A3             >
 225+ E0A3 91 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A5             >
 225+ E0A5             >mirror_Ptr      defl    $
 225+ E0A5             >
 225+ E0A5 82 20       >                dw      Dict_Ptr + 2        // xt
 225+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A7             >
 225+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A7             >
 225+ E0A7             >//              ______________________________________________________________________
 225+ E0A7             >//              Dictionary part
 225+ E0A7             >
 225+ E0A7             >                org     Dict_Ptr
 225+ 2080             >
 225+ 2080 A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 2082             >
 225+ 2082             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 2082 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 2082 ~           >
 225+ 2082 ~           >
 225+ 2082             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 2082             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 2082             >
 225+ 2082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 2082              Branch_Ptr:
 227+ 2082 0A                           ld      a, (bc)
 228+ 2083 6F                           ld      l, a
 229+ 2084 03                           inc     bc
 230+ 2085 0A                           ld      a, (bc)
 231+ 2086 67                           ld      h, a
 232+ 2087 0B                           dec     bc
 233+ 2088 09                           add     hl, bc
 234+ 2089 4D                           ld      c, l
 235+ 208A 44                           ld      b, h
 236+ 208B                              next
 236+ 208B DD E9       >                jp      (ix)
 237+ 208D
 238+ 208D
 239+ 208D              //  ______________________________________________________________________
 240+ 208D              //
 241+ 208D              // 0branch      f --
 242+ 208D              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 208D              // compiled by IF, UNTIL and some other immediate words
 244+ 208D
 245+ 208D                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 208D             >
 245+ 208D             >Dict_Ptr        defl    $
 245+ 208D             >
 245+ 208D             >//              ______________________________________________________________________
 245+ 208D             >//              Heap part
 245+ 208D             >
 245+ 208D             >
 245+ 208D             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A7             >
 245+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A7             >Latest_Definition defl  Heap_Ptr
 245+ E0A7             >
 245+ E0A7             >                // dummy db directives used to calculate length of namec
 245+ E0A7 30 42 52 41 >                db      "0BRANCH"
 245+ E0AB 4E 43 48    >
 245+ E0AE             >len_NFA         defl    $ - temp_NFA
 245+ E0AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A7             >
 245+ E0A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0A8 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AC 4E 43 48    >
 245+ E0AF             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0AE C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0AF             >
 245+ E0AF 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B1             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B1             >
 245+ E0B1             >mirror_Ptr      defl    $
 245+ E0B1             >
 245+ E0B1 8F 20       >                dw      Dict_Ptr + 2        // xt
 245+ E0B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B3             >
 245+ E0B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B3             >
 245+ E0B3             >//              ______________________________________________________________________
 245+ E0B3             >//              Dictionary part
 245+ E0B3             >
 245+ E0B3             >                org     Dict_Ptr
 245+ 208D             >
 245+ 208D B1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 208F             >
 245+ 208F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 208F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 208F ~           >
 245+ 208F ~           >
 245+ 208F             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 208F             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 208F             >
 245+ 208F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 208F              ZBranch_Ptr:
 247+ 208F E1                           pop     hl
 248+ 2090 7D                           ld      a, l
 249+ 2091 B4                           or      h
 250+ 2092 28 EE                        jr      z, Branch_Ptr
 251+ 2094 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 2095 03                           inc     bc
 253+ 2096                              next
 253+ 2096 DD E9       >                jp      (ix)
 254+ 2098
 255+ 2098              //  ______________________________________________________________________
 256+ 2098              //
 257+ 2098              // (leave)        --
 258+ 2098              // compiled by LEAVE
 259+ 2098              // this forces to exit from loop and jump past
 260+ 2098                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 2098             >
 260+ 2098             >Dict_Ptr        defl    $
 260+ 2098             >
 260+ 2098             >//              ______________________________________________________________________
 260+ 2098             >//              Heap part
 260+ 2098             >
 260+ 2098             >
 260+ 2098             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B3             >
 260+ E0B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B3             >Latest_Definition defl  Heap_Ptr
 260+ E0B3             >
 260+ E0B3             >                // dummy db directives used to calculate length of namec
 260+ E0B3 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B7 56 45 29    >
 260+ E0BA             >len_NFA         defl    $ - temp_NFA
 260+ E0BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B3             >
 260+ E0B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B4 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0B8 56 45 29    >
 260+ E0BB             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BA A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BB             >
 260+ E0BB A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BD             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BD             >
 260+ E0BD             >mirror_Ptr      defl    $
 260+ E0BD             >
 260+ E0BD 9A 20       >                dw      Dict_Ptr + 2        // xt
 260+ E0BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0BF             >
 260+ E0BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0BF             >
 260+ E0BF             >//              ______________________________________________________________________
 260+ E0BF             >//              Dictionary part
 260+ E0BF             >
 260+ E0BF             >                org     Dict_Ptr
 260+ 2098             >
 260+ 2098 BD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 209A             >
 260+ 209A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 209A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 209A ~           >
 260+ 209A ~           >
 260+ 209A             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 209A             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 209A             >
 260+ 209A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 209A EB                           ex      de, hl
 262+ 209B                              // *** ldhlrp
 263+ 209B 3E 04                        ld      a, 4
 264+ 209D ED 31                        add     hl, a
 265+ 209F                              // *** ldrphl
 266+ 209F EB                           ex      de, hl
 267+ 20A0 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 20A2                              next
 268+ 20A2 DD E9       >                jp      (ix)
 269+ 20A4
 270+ 20A4              //  ______________________________________________________________________
 271+ 20A4              //
 272+ 20A4              // (?do)        lim ind --
 273+ 20A4              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 20A4              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 20A4              // used to skip the loop if lim == ind
 276+ 20A4                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 20A4             >
 276+ 20A4             >Dict_Ptr        defl    $
 276+ 20A4             >
 276+ 20A4             >//              ______________________________________________________________________
 276+ 20A4             >//              Heap part
 276+ 20A4             >
 276+ 20A4             >
 276+ 20A4             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0BF             >
 276+ E0BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0BF             >Latest_Definition defl  Heap_Ptr
 276+ E0BF             >
 276+ E0BF             >                // dummy db directives used to calculate length of namec
 276+ E0BF 28 3F 44 4F >                db      "(?DO)"
 276+ E0C3 29          >
 276+ E0C4             >len_NFA         defl    $ - temp_NFA
 276+ E0C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0BF             >
 276+ E0BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C4 29          >
 276+ E0C5             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C4 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C5             >
 276+ E0C5 B3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C7             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C7             >
 276+ E0C7             >mirror_Ptr      defl    $
 276+ E0C7             >
 276+ E0C7 A6 20       >                dw      Dict_Ptr + 2        // xt
 276+ E0C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0C9             >
 276+ E0C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0C9             >
 276+ E0C9             >//              ______________________________________________________________________
 276+ E0C9             >//              Dictionary part
 276+ E0C9             >
 276+ E0C9             >                org     Dict_Ptr
 276+ 20A4             >
 276+ 20A4 C7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 20A6             >
 276+ 20A6             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 20A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 20A6 ~           >
 276+ 20A6 ~           >
 276+ 20A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 20A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 20A6             >
 276+ 20A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 20A6 D9                           exx
 278+ 20A7 D1                            pop     de                  // de has the index
 279+ 20A8 E1                            pop     hl                  // hl has the limit
 280+ 20A9 44                            ld      b, h
 281+ 20AA 4D                            ld      c, l
 282+ 20AB E5                            push    hl                  // put them back to stack for later
 283+ 20AC D5                            push    de
 284+ 20AD A7                            and     a                   // reset carry flag
 285+ 20AE ED 52                         sbc     hl, de              // compute limit - index
 286+ 20B0 D9                           exx
 287+ 20B1 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 20B3 E1                               pop     hl
 289+ 20B4 E1                               pop     hl
 290+ 20B5 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 20B7              Do_Ptr:
 292+ 20B7                              // *** ldhlrp                 // prepare RP
 293+ 20B7                              // *** ex      de, hl
 294+ 20B7                              // dec     de
 295+ 20B7                              // dec     de
 296+ 20B7                              // dec     de
 297+ 20B7                              // dec     de
 298+ 20B7 ED 35 FC FF                  add     de, -4
 299+ 20BB D5                           push    de                  // pass it to h'l'
 300+ 20BC                              // *** ex      de, hl
 301+ 20BC                              // *** ldrphl
 302+ 20BC D9                           exx
 303+ 20BD E1                            pop     hl
 304+ 20BE
 305+ 20BE                               // store index as top RP
 306+ 20BE D1                            pop     de
 307+ 20BF 73                            ld      (hl), e
 308+ 20C0 23                            inc     hl
 309+ 20C1 72                            ld      (hl), d
 310+ 20C2 23                            inc     hl
 311+ 20C3                               // stores lim as second from top RP
 312+ 20C3 D1                            pop     de
 313+ 20C4 73                            ld      (hl), e
 314+ 20C5 23                            inc     hl
 315+ 20C6 72                            ld      (hl), d
 316+ 20C7 D9                           exx
 317+ 20C8                              // skip branch-style offseet
 318+ 20C8 03                           inc     bc
 319+ 20C9 03                           inc     bc
 320+ 20CA                              next
 320+ 20CA DD E9       >                jp      (ix)
 321+ 20CC
 322+ 20CC              //  ______________________________________________________________________
 323+ 20CC              //
 324+ 20CC              // (do)        lim ind --
 325+ 20CC              // compiled by DO to make a loop checking for lim == ind first
 326+ 20CC              // this is a simpler version of (?DO)
 327+ 20CC                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 20CC             >
 327+ 20CC             >Dict_Ptr        defl    $
 327+ 20CC             >
 327+ 20CC             >//              ______________________________________________________________________
 327+ 20CC             >//              Heap part
 327+ 20CC             >
 327+ 20CC             >
 327+ 20CC             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0C9             >
 327+ E0C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0C9             >Latest_Definition defl  Heap_Ptr
 327+ E0C9             >
 327+ E0C9             >                // dummy db directives used to calculate length of namec
 327+ E0C9 28 44 4F 29 >                db      "(DO)"
 327+ E0CD             >len_NFA         defl    $ - temp_NFA
 327+ E0CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0C9             >
 327+ E0C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CA 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CE             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CD A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CE             >
 327+ E0CE BF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D0             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D0             >
 327+ E0D0             >mirror_Ptr      defl    $
 327+ E0D0             >
 327+ E0D0 CE 20       >                dw      Dict_Ptr + 2        // xt
 327+ E0D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D2             >
 327+ E0D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D2             >
 327+ E0D2             >//              ______________________________________________________________________
 327+ E0D2             >//              Dictionary part
 327+ E0D2             >
 327+ E0D2             >                org     Dict_Ptr
 327+ 20CC             >
 327+ 20CC D0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 20CE             >
 327+ 20CE             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 20CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 20CE ~           >
 327+ 20CE ~           >
 327+ 20CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 20CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 20CE             >
 327+ 20CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 20CE 0B                           dec     bc                  // prepare IP beforehand
 329+ 20CF 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 20D0 18 E5                        jr      Do_Ptr
 331+ 20D2
 332+ 20D2              //  ______________________________________________________________________
 333+ 20D2              //
 334+ 20D2              // i            -- n
 335+ 20D2              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 20D2              // the current value of the index-loop
 337+ 20D2                              New_Def I, "I", is_code, is_normal
 337+ 20D2             >
 337+ 20D2             >Dict_Ptr        defl    $
 337+ 20D2             >
 337+ 20D2             >//              ______________________________________________________________________
 337+ 20D2             >//              Heap part
 337+ 20D2             >
 337+ 20D2             >
 337+ 20D2             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D2             >
 337+ E0D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D2             >Latest_Definition defl  Heap_Ptr
 337+ E0D2             >
 337+ E0D2             >                // dummy db directives used to calculate length of namec
 337+ E0D2 49          >                db      "I"
 337+ E0D3             >len_NFA         defl    $ - temp_NFA
 337+ E0D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D2             >
 337+ E0D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D3 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D4             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D3 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D4             >
 337+ E0D4 C9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D6             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D6             >
 337+ E0D6             >mirror_Ptr      defl    $
 337+ E0D6             >
 337+ E0D6 D4 20       >                dw      Dict_Ptr + 2        // xt
 337+ E0D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D8             >
 337+ E0D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D8             >
 337+ E0D8             >//              ______________________________________________________________________
 337+ E0D8             >//              Dictionary part
 337+ E0D8             >
 337+ E0D8             >                org     Dict_Ptr
 337+ 20D2             >
 337+ 20D2 D6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 20D4             >
 337+ 20D4             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 20D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 20D4 ~           >
 337+ 20D4 ~           >
 337+ 20D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 20D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 20D4             >
 337+ 20D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 20D4              I_Ptr:
 339+ 20D4 62                           ld      h, d
 340+ 20D5 6B                           ld      l, e
 341+ 20D6                              // *** ldhlrp
 342+ 20D6              I_Ptr_prime:
 343+ 20D6 7E                           ld      a, (hl)
 344+ 20D7 23                           inc     hl
 345+ 20D8 66                           ld      h, (hl)
 346+ 20D9 6F                           ld      l, a
 347+ 20DA E5                           push    hl
 348+ 20DB                              next
 348+ 20DB DD E9       >                jp      (ix)
 349+ 20DD
 350+ 20DD
 351+ 20DD              //  ______________________________________________________________________
 352+ 20DD              //
 353+ 20DD              // i'            -- n
 354+ 20DD              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 20DD              // the limit of the index-loop
 356+ 20DD
 357+ 20DD                              New_Def II, "I'", is_code, is_normal
 357+ 20DD             >
 357+ 20DD             >Dict_Ptr        defl    $
 357+ 20DD             >
 357+ 20DD             >//              ______________________________________________________________________
 357+ 20DD             >//              Heap part
 357+ 20DD             >
 357+ 20DD             >
 357+ 20DD             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D8             >
 357+ E0D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D8             >Latest_Definition defl  Heap_Ptr
 357+ E0D8             >
 357+ E0D8             >                // dummy db directives used to calculate length of namec
 357+ E0D8 49 27       >                db      "I'"
 357+ E0DA             >len_NFA         defl    $ - temp_NFA
 357+ E0DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D8             >
 357+ E0D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0D9 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DB             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DA A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DB             >
 357+ E0DB D2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DD             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DD             >
 357+ E0DD             >mirror_Ptr      defl    $
 357+ E0DD             >
 357+ E0DD DF 20       >                dw      Dict_Ptr + 2        // xt
 357+ E0DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0DF             >
 357+ E0DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0DF             >
 357+ E0DF             >//              ______________________________________________________________________
 357+ E0DF             >//              Dictionary part
 357+ E0DF             >
 357+ E0DF             >                org     Dict_Ptr
 357+ 20DD             >
 357+ 20DD DD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 20DF             >
 357+ 20DF             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 20DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 20DF ~           >
 357+ 20DF ~           >
 357+ 20DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 20DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 20DF             >
 357+ 20DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 20DF 62                           ld      h, d
 359+ 20E0 6B                           ld      l, e
 360+ 20E1                              // *** ldhlrp
 361+ 20E1 23                           inc     hl
 362+ 20E2 23                           inc     hl
 363+ 20E3 18 F1                        jr      I_Ptr_prime
 364+ 20E5
 365+ 20E5
 366+ 20E5              //  ______________________________________________________________________
 367+ 20E5              //
 368+ 20E5              // digit        c n -- u tf  |  ff
 369+ 20E5              // convert a character c using base n
 370+ 20E5              // returns a unsigned number and a true flag
 371+ 20E5              // or just a false flag if the conversion fails
 372+ 20E5                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 20E5             >
 372+ 20E5             >Dict_Ptr        defl    $
 372+ 20E5             >
 372+ 20E5             >//              ______________________________________________________________________
 372+ 20E5             >//              Heap part
 372+ 20E5             >
 372+ 20E5             >
 372+ 20E5             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0DF             >
 372+ E0DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0DF             >Latest_Definition defl  Heap_Ptr
 372+ E0DF             >
 372+ E0DF             >                // dummy db directives used to calculate length of namec
 372+ E0DF 44 49 47 49 >                db      "DIGIT"
 372+ E0E3 54          >
 372+ E0E4             >len_NFA         defl    $ - temp_NFA
 372+ E0E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0DF             >
 372+ E0DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E0 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E4 54          >
 372+ E0E5             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E4 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E5             >
 372+ E0E5 D8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E7             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E7             >
 372+ E0E7             >mirror_Ptr      defl    $
 372+ E0E7             >
 372+ E0E7 E7 20       >                dw      Dict_Ptr + 2        // xt
 372+ E0E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0E9             >
 372+ E0E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0E9             >
 372+ E0E9             >//              ______________________________________________________________________
 372+ E0E9             >//              Dictionary part
 372+ E0E9             >
 372+ E0E9             >                org     Dict_Ptr
 372+ 20E5             >
 372+ 20E5 E7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 20E7             >
 372+ 20E7             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 20E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 20E7 ~           >
 372+ 20E7 ~           >
 372+ 20E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 20E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 20E7             >
 372+ 20E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 20E7 D9                           exx
 374+ 20E8 E1                           pop     hl                  // l has the base
 375+ 20E9 D1                           pop     de                  // e has the digit
 376+ 20EA 7B                           ld      a, e
 377+ 20EB FE 60                        cp      $60                 // check if lowercase
 378+ 20ED 38 02                        jr      c, Digit_Uppercase
 379+ 20EF D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 20F1              Digit_Uppercase:
 381+ 20F1 D6 30                        sub     $30
 382+ 20F3 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 20F5 FE 0A                            cp      $0A
 384+ 20F7 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 20F9 D6 07                                sub     7                   // try hex and subtract 7
 386+ 20FB FE 0A                                cp      $0A
 387+ 20FD 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 20FF
 389+ 20FF              Digit_Decimal:
 390+ 20FF                              // compare digit
 391+ 20FF BD                           cp      l                   // compare with base
 392+ 2100 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 2102 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 2103 21 01 00                         ld      hl, 1
 395+ 2106 D5                               push    de
 396+ 2107 E5                               push    hl
 397+ 2108 D9                               exx
 398+ 2109                                  next
 398+ 2109 DD E9       >                jp      (ix)
 399+ 210B              Digit_Fail:
 400+ 210B 21 00 00                     ld      hl, 0
 401+ 210E E5                           push    hl
 402+ 210F D9                           exx
 403+ 2110                              next
 403+ 2110 DD E9       >                jp      (ix)
 404+ 2112
 405+ 2112              //  ______________________________________________________________________
 406+ 2112              //
 407+ 2112              //  parametric uppercase routine
 408+ 2112              //  depending on the following op-code the routine can be by-passed
 409+ 2112              //  changing the behaviour of some callers.
 410+ 2112              //  If it is "ret" then the system is Case-Sensitive
 411+ 2112              //  If it is "Nop" then the system is Case-Insensitive
 412+ 2112              //  Only A register is touched.
 413+ 2112 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 2113              Case_Upper:
 415+ 2113 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 2115 D8                           ret     c                   // no change if A < "a"
 417+ 2116 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 2118 D0                           ret     nc                  // no change if A > "z"
 419+ 2119 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 211B C9                           ret
 421+ 211C
 422+ 211C              //  ______________________________________________________________________
 423+ 211C              //
 424+ 211C              //  caseon      --
 425+ 211C              // set system case-sensitivity on
 426+ 211C              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 211C                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 211C             >
 427+ 211C             >Dict_Ptr        defl    $
 427+ 211C             >
 427+ 211C             >//              ______________________________________________________________________
 427+ 211C             >//              Heap part
 427+ 211C             >
 427+ 211C             >
 427+ 211C             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0E9             >
 427+ E0E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0E9             >Latest_Definition defl  Heap_Ptr
 427+ E0E9             >
 427+ E0E9             >                // dummy db directives used to calculate length of namec
 427+ E0E9 43 41 53 45 >                db      "CASEON"
 427+ E0ED 4F 4E       >
 427+ E0EF             >len_NFA         defl    $ - temp_NFA
 427+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0E9             >
 427+ E0E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EA 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0EE 4F 4E       >
 427+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0EF CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F0             >
 427+ E0F0 DF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F2             >
 427+ E0F2             >mirror_Ptr      defl    $
 427+ E0F2             >
 427+ E0F2 1E 21       >                dw      Dict_Ptr + 2        // xt
 427+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F4             >
 427+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F4             >
 427+ E0F4             >//              ______________________________________________________________________
 427+ E0F4             >//              Dictionary part
 427+ E0F4             >
 427+ E0F4             >                org     Dict_Ptr
 427+ 211C             >
 427+ 211C F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 211E             >
 427+ 211E             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 211E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 211E ~           >
 427+ 211E ~           >
 427+ 211E             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 211E             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 211E             >
 427+ 211E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 211E 3E C9                        ld      a, $C9              // "ret"
 429+ 2120 32 12 21                     ld      (Case_Sensitive), a
 430+ 2123                              next
 430+ 2123 DD E9       >                jp      (ix)
 431+ 2125
 432+ 2125              //  ______________________________________________________________________
 433+ 2125              //
 434+ 2125              //  caseoff     --
 435+ 2125              // set system case-sensitivity on
 436+ 2125              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 2125                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 2125             >
 437+ 2125             >Dict_Ptr        defl    $
 437+ 2125             >
 437+ 2125             >//              ______________________________________________________________________
 437+ 2125             >//              Heap part
 437+ 2125             >
 437+ 2125             >
 437+ 2125             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F4             >
 437+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F4             >Latest_Definition defl  Heap_Ptr
 437+ E0F4             >
 437+ E0F4             >                // dummy db directives used to calculate length of namec
 437+ E0F4 43 41 53 45 >                db      "CASEOFF"
 437+ E0F8 4F 46 46    >
 437+ E0FB             >len_NFA         defl    $ - temp_NFA
 437+ E0FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F4             >
 437+ E0F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0F9 4F 46 46    >
 437+ E0FC             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FB C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FC             >
 437+ E0FC E9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E0FE             >Prev_Ptr        defl    Heap_Ptr
 437+ E0FE             >
 437+ E0FE             >mirror_Ptr      defl    $
 437+ E0FE             >
 437+ E0FE 27 21       >                dw      Dict_Ptr + 2        // xt
 437+ E100             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E100             >
 437+ E100             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E100             >
 437+ E100             >//              ______________________________________________________________________
 437+ E100             >//              Dictionary part
 437+ E100             >
 437+ E100             >                org     Dict_Ptr
 437+ 2125             >
 437+ 2125 FE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 2127             >
 437+ 2127             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 2127 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 2127 ~           >
 437+ 2127 ~           >
 437+ 2127             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 2127             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 2127             >
 437+ 2127             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 2127 3E 00                        ld      a, $00              // "nop"
 439+ 2129 32 12 21                     ld      (Case_Sensitive), a
 440+ 212C                              next
 440+ 212C DD E9       >                jp      (ix)
 441+ 212E
 442+ 212E              //  ______________________________________________________________________
 443+ 212E              //
 444+ 212E              //  upper       c1 -- c1 | c2
 445+ 212E              // character on top of stack is forced to Uppercase.
 446+ 212E                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 212E             >
 446+ 212E             >Dict_Ptr        defl    $
 446+ 212E             >
 446+ 212E             >//              ______________________________________________________________________
 446+ 212E             >//              Heap part
 446+ 212E             >
 446+ 212E             >
 446+ 212E             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E100             >
 446+ E100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E100             >Latest_Definition defl  Heap_Ptr
 446+ E100             >
 446+ E100             >                // dummy db directives used to calculate length of namec
 446+ E100 55 50 50 45 >                db      "UPPER"
 446+ E104 52          >
 446+ E105             >len_NFA         defl    $ - temp_NFA
 446+ E105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E100             >
 446+ E100 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E101 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E105 52          >
 446+ E106             >                org     $-1                 // alter last byte of Name just above to set
 446+ E105 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E106             >
 446+ E106 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E108             >Prev_Ptr        defl    Heap_Ptr
 446+ E108             >
 446+ E108             >mirror_Ptr      defl    $
 446+ E108             >
 446+ E108 30 21       >                dw      Dict_Ptr + 2        // xt
 446+ E10A             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10A             >
 446+ E10A             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10A             >
 446+ E10A             >//              ______________________________________________________________________
 446+ E10A             >//              Dictionary part
 446+ E10A             >
 446+ E10A             >                org     Dict_Ptr
 446+ 212E             >
 446+ 212E 08 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 2130             >
 446+ 2130             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 2130 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 2130 ~           >
 446+ 2130 ~           >
 446+ 2130             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 2130             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 2130             >
 446+ 2130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 2130 E1                           pop     hl
 448+ 2131 7D                           ld      a, l
 449+ 2132 CD 13 21                     call    Case_Upper
 450+ 2135 6F                           ld      l, a
 451+ 2136
 452+ 2136                              psh1
 452+ 2136 E5          >                push    hl
 452+ 2137 DD E9       >                jp      (ix)
 453+ 2139
 454+ 2139              //  ______________________________________________________________________
 455+ 2139
 456+ 2139              MMU7_read:
 457+ 2139 3E 57                        ld      a, 87
 458+ 213B              NEXTREG_read:
 459+ 213B 01 3B 24                     ld      bc, $243B
 460+ 213E ED 79                        out     (c), a
 461+ 2140 04                           inc     b
 462+ 2141 ED 78                        in      a, (c)
 463+ 2143 C9                           ret
 464+ 2144
 465+ 2144              //  ______________________________________________________________________
 466+ 2144
 467+ 2144              TO_FAR_rout:
 468+ 2144 7C                           ld      a, h
 469+ 2145 08                           ex      af, af
 470+ 2146 7C                           ld      a, h
 471+ 2147 F6 E0                        or      $E0
 472+ 2149 67                           ld      h, a
 473+ 214A 08                           ex      af, af
 474+ 214B 07                           rlca
 475+ 214C 07                           rlca
 476+ 214D 07                           rlca
 477+ 214E E6 07                        and     $07
 478+ 2150 C6 20                        add     $20
 479+ 2152 C9                           ret
 480+ 2153
 481+ 2153
 482+ 2153              //  ______________________________________________________________________
 483+ 2153              //
 484+ 2153              // (find)       addr voc -- 0 | cfa b 1
 485+ 2153              // vocabulary search,
 486+ 2153              // - voc is starting word's NFA
 487+ 2153              // - addr is the string to be searched for
 488+ 2153              // On success, it returns the CFA of found word, the first NFA byte
 489+ 2153              // (which contains length and some flags) and a true flag.
 490+ 2153              // On fail, a false flag  (no more: leaves addr unchanged)
 491+ 2153                              New_Def C_FIND, "(FIND)", is_code, is_normal
 491+ 2153             >
 491+ 2153             >Dict_Ptr        defl    $
 491+ 2153             >
 491+ 2153             >//              ______________________________________________________________________
 491+ 2153             >//              Heap part
 491+ 2153             >
 491+ 2153             >
 491+ 2153             >                org     (Heap_Ptr & $1FFF) + $E000
 491+ E10A             >
 491+ E10A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ E10A             >Latest_Definition defl  Heap_Ptr
 491+ E10A             >
 491+ E10A             >                // dummy db directives used to calculate length of namec
 491+ E10A 28 46 49 4E >                db      "(FIND)"
 491+ E10E 44 29       >
 491+ E110             >len_NFA         defl    $ - temp_NFA
 491+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ E10A             >
 491+ E10A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ E10B 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 491+ E10F 44 29       >
 491+ E111             >                org     $-1                 // alter last byte of Name just above to set
 491+ E110 A9          >                db      {b $} | END_BIT     // msb as name end
 491+ E111             >
 491+ E111 00 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 491+ E113             >Prev_Ptr        defl    Heap_Ptr
 491+ E113             >
 491+ E113             >mirror_Ptr      defl    $
 491+ E113             >
 491+ E113 55 21       >                dw      Dict_Ptr + 2        // xt
 491+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 491+ E115             >
 491+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 491+ E115             >
 491+ E115             >//              ______________________________________________________________________
 491+ E115             >//              Dictionary part
 491+ E115             >
 491+ E115             >                org     Dict_Ptr
 491+ 2153             >
 491+ 2153 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 491+ 2155             >
 491+ 2155             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 2155 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 491+ 2155 ~           >
 491+ 2155 ~           >
 491+ 2155             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 2155             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 2155             >
 491+ 2155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 2155 D9                           exx
 493+ 2156 CD 39 21                     call    MMU7_read
 494+ 2159 D9                           exx
 495+ 215A 6F                           ld      l, a
 496+ 215B D9                           exx
 497+ 215C
 498+ 215C D1                           pop     de                      // de has dictionary pointer
 499+ 215D              Find_VocabularyLoop:
 500+ 215D 7A                               ld      a, d
 501+ 215E D6 60                            sub     $60
 502+ 2160 30 08                            jr      nc, Find_far_endif
 503+ 2162 EB                                   ex      de, hl
 504+ 2163 CD 44 21                             call    TO_FAR_rout
 505+ 2166 EB                                   ex      de, hl
 506+ 2167 ED 92 57                             nextreg 87, a
 507+ 216A              Find_far_endif:
 508+ 216A E1                               pop     hl                  // string pointer to search for
 509+ 216B E5                               push    hl                  // keep it on stack too for the end.
 510+ 216C 1A                               ld      a, (de)             // save NFA length byte
 511+ 216D 08                               ex      af,af'              // for later use (!)
 512+ 216E 1A                               ld      a, (de)             // reload NFA length byte
 513+ 216F AE                               xor     (hl)                // check if same length
 514+ 2170 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 515+ 2172                                  // word and text haven't the same length, skip to next vocabulary entry
 516+ 2172 20 33                            jr      nz, Find_DifferentLenght
 517+ 2174
 518+ 2174              Find_ThisWord:      // begin loop
 519+ 2174 23                                   inc     hl
 520+ 2175 13                                   inc     de
 521+ 2176 1A                                   ld      a, (de)
 522+ 2177                                      // case insensitive option - begin
 523+ 2177                                      // push    bc
 524+ 2177 E6 80                                and     $80                 // split A in msb and the rest
 525+ 2179 47                                   ld      b, a
 526+ 217A 1A                                   ld      a, (de)
 527+ 217B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 528+ 217D CD 12 21                             call    Case_Sensitive      // uppercase routine
 529+ 2180 4F                                   ld      c, a
 530+ 2181 7E                                   ld      a, (hl)
 531+ 2182 CD 12 21                             call    Case_Sensitive      // uppercase routine
 532+ 2185 A9                                   xor     c
 533+ 2186 A8                                   xor     b
 534+ 2187                                      // pop     bc
 535+ 2187                                      // case insensitive option - end
 536+ 2187 87                                   add     a                   // ignore msb during compare
 537+ 2188 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 538+ 218A
 539+ 218A                                  // loop back until last byte msb is found set
 540+ 218A                                  // that bit marks the ending char of this word
 541+ 218A 30 E8                            jr      nc, Find_ThisWord
 542+ 218C
 543+ 218C                                  // match found !
 544+ 218C 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 545+ 218F 19                               add     hl, de
 546+ 2190
 547+ 2190                              //  ld      a, h
 548+ 2190                              //  and     $E0
 549+ 2190                              //  xor     h
 550+ 2190                              //  jr      nz, Non_MMU7
 551+ 2190                                  //  call    MMU7_read
 552+ 2190                                  //  dec     a
 553+ 2190                                  //  jr      z, Non_MMU7
 554+ 2190 5E                                       ld      e, (hl)
 555+ 2191 23                                       inc     hl
 556+ 2192 56                                       ld      d, (hl)
 557+ 2193 EB                                       ex      de, hl
 558+ 2194              //Non_MMU7:
 559+ 2194 E3                               ex      (sp), hl            // CFA on stack and drop addr
 560+ 2195 08                               ex      af, af'             // retrieve NFA byte (!)
 561+ 2196 5F                               ld      e, a
 562+ 2197 16 00                            ld      d, 0
 563+ 2199 21 FF FF                         ld      hl, -1
 564+ 219C D5                               push    de
 565+ 219D E5                               push    hl
 566+ 219E D9                               exx
 567+ 219F 7D                               ld      a, l
 568+ 21A0 ED 92 57                         nextreg 87, a
 569+ 21A3                                  next
 569+ 21A3 DD E9       >                jp      (ix)
 570+ 21A5
 571+ 21A5              Find_DidntMatch: // didn't match (*)
 572+ 21A5 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 573+ 21A7
 574+ 21A7              Find_DifferentLenght:
 575+ 21A7                                  // consume chars until the end of the word
 576+ 21A7                                  // that is last byte msb is found set
 577+ 21A7 13                                   inc     de
 578+ 21A8 1A                                   ld      a, (de)
 579+ 21A9 87                                   add     a, a
 580+ 21AA 30 FB                            jr      nc, Find_DifferentLenght
 581+ 21AC
 582+ 21AC              Find_WordEnd:   // word-end  found (**)
 583+ 21AC                                  // take LFA and use it
 584+ 21AC 13                               inc     de
 585+ 21AD EB                               ex      de, hl
 586+ 21AE 5E                               ld      e, (hl)
 587+ 21AF 23                               inc     hl
 588+ 21B0 56                               ld      d, (hl)
 589+ 21B1 7A                               ld      a, d
 590+ 21B2 B3                               or      e
 591+ 21B3
 592+ 21B3                              // loop until end of vocabulary
 593+ 21B3 20 A8                        jr      nz, Find_VocabularyLoop
 594+ 21B5
 595+ 21B5 E1                           pop     hl              // without this, leaves addr unchanged
 596+ 21B6 21 00 00                     ld      hl, 0
 597+ 21B9 E5                           push    hl
 598+ 21BA D9                           exx
 599+ 21BB 7D                           ld      a, l
 600+ 21BC ED 92 57                     nextreg 87, a
 601+ 21BF                              next
 601+ 21BF DD E9       >                jp      (ix)
 602+ 21C1
 603+ 21C1              //  ______________________________________________________________________
 604+ 21C1              //
 605+ 21C1              // enclose      a c -- a  n1 n2 n3
 606+ 21C1              // starting from a, using delimiter c, determines the offsets:
 607+ 21C1              //   n1   the first character non-delimiter
 608+ 21C1              //   n2   the first delimiter after the text
 609+ 21C1              //   n3   the first character non enclosed.
 610+ 21C1              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 611+ 21C1              // an uncoditional delimiter.
 612+ 21C1              // Examples:
 613+ 21C1              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 614+ 21C1              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 615+ 21C1              // iii:	c  c  'nul'          -- 2  3  2
 616+ 21C1                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 616+ 21C1             >
 616+ 21C1             >Dict_Ptr        defl    $
 616+ 21C1             >
 616+ 21C1             >//              ______________________________________________________________________
 616+ 21C1             >//              Heap part
 616+ 21C1             >
 616+ 21C1             >
 616+ 21C1             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ E115             >
 616+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ E115             >Latest_Definition defl  Heap_Ptr
 616+ E115             >
 616+ E115             >                // dummy db directives used to calculate length of namec
 616+ E115 45 4E 43 4C >                db      "ENCLOSE"
 616+ E119 4F 53 45    >
 616+ E11C             >len_NFA         defl    $ - temp_NFA
 616+ E11C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ E115             >
 616+ E115 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ E116 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 616+ E11A 4F 53 45    >
 616+ E11D             >                org     $-1                 // alter last byte of Name just above to set
 616+ E11C C5          >                db      {b $} | END_BIT     // msb as name end
 616+ E11D             >
 616+ E11D 0A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ E11F             >Prev_Ptr        defl    Heap_Ptr
 616+ E11F             >
 616+ E11F             >mirror_Ptr      defl    $
 616+ E11F             >
 616+ E11F C3 21       >                dw      Dict_Ptr + 2        // xt
 616+ E121             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ E121             >
 616+ E121             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ E121             >
 616+ E121             >//              ______________________________________________________________________
 616+ E121             >//              Dictionary part
 616+ E121             >
 616+ E121             >                org     Dict_Ptr
 616+ 21C1             >
 616+ 21C1 1F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 21C3             >
 616+ 21C3             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 21C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 616+ 21C3 ~           >
 616+ 21C3 ~           >
 616+ 21C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 21C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 21C3             >
 616+ 21C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 21C3 D9                           exx
 618+ 21C4 D1                           pop     de                  //  e has the character
 619+ 21C5 E1                           pop     hl                  // hl has the string address
 620+ 21C6 E5                           push    hl
 621+ 21C7 7B                           ld      a, e
 622+ 21C8 11 FF FF                     ld      de, -1              // let's start from -1
 623+ 21CB 2B                           dec     hl
 624+ 21CC              Enclose_NonDelimiter:
 625+ 21CC                              // find first non delimiter
 626+ 21CC 23                               inc     hl
 627+ 21CD 13                               inc     de
 628+ 21CE BE                               cp      (hl)
 629+ 21CF 28 FB                        jr      z, Enclose_NonDelimiter
 630+ 21D1 D5                           push    de
 631+ 21D2
 632+ 21D2                              // push    bc                  // save Instruction Pointer
 633+ 21D2
 634+ 21D2 4F                           ld      c, a                // save char
 635+ 21D3 7E                           ld      a, (hl)
 636+ 21D4 A7                           and     a                   // stop if 0x00
 637+ 21D5 20 07                        jr      nz, Enclose_NextChar
 638+ 21D7                              /// case iii. no more character in string
 639+ 21D7                                  // pop     bc                  // restore Instruction Pointer
 640+ 21D7 13                               inc     de
 641+ 21D8 D5                               push    de
 642+ 21D9 1B                               dec     de
 643+ 21DA D5                               push    de
 644+ 21DB D9                               exx
 645+ 21DC                                  next
 645+ 21DC DD E9       >                jp      (ix)
 646+ 21DE              Enclose_NextChar:
 647+ 21DE 79                               ld      a, c
 648+ 21DF 23                               inc     hl
 649+ 21E0 13                               inc     de
 650+ 21E1 BE                               cp      (hl)
 651+ 21E2 20 06                            jr      nz, Enclose_NonSeparator
 652+ 21E4                                      // case i. first non enclosed
 653+ 21E4                                      // pop     bc                  // restore Instruction Pointer
 654+ 21E4 D5                                   push    de
 655+ 21E5 13                                   inc     de
 656+ 21E6 D5                                   push    de
 657+ 21E7 D9                                   exx
 658+ 21E8                                      next
 658+ 21E8 DD E9       >                jp      (ix)
 659+ 21EA              Enclose_NonSeparator:
 660+ 21EA 7E                               ld      a, (hl)
 661+ 21EB A7                               and     a
 662+ 21EC 20 F0                        jr      nz, Enclose_NextChar
 663+ 21EE
 664+ 21EE                              // case ii. separator & terminator
 665+ 21EE                              // pop     bc                  // restore Instruction Pointer
 666+ 21EE D5                           push    de
 667+ 21EF D5                           push    de
 668+ 21F0 D9                           exx
 669+ 21F1                              next
 669+ 21F1 DD E9       >                jp      (ix)
 670+ 21F3
 671+ 21F3              //  ______________________________________________________________________
 672+ 21F3              //
 673+ 21F3              // (map)        a2 a1 n c1 -- c2
 674+ 21F3              // translate character c1 using mapping string a2 and a2
 675+ 21F3              // if c1 is not present within string a1 then
 676+ 21F3              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 677+ 21F3                              New_Def C_MAP, "(MAP)", is_code, is_normal
 677+ 21F3             >
 677+ 21F3             >Dict_Ptr        defl    $
 677+ 21F3             >
 677+ 21F3             >//              ______________________________________________________________________
 677+ 21F3             >//              Heap part
 677+ 21F3             >
 677+ 21F3             >
 677+ 21F3             >                org     (Heap_Ptr & $1FFF) + $E000
 677+ E121             >
 677+ E121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 677+ E121             >Latest_Definition defl  Heap_Ptr
 677+ E121             >
 677+ E121             >                // dummy db directives used to calculate length of namec
 677+ E121 28 4D 41 50 >                db      "(MAP)"
 677+ E125 29          >
 677+ E126             >len_NFA         defl    $ - temp_NFA
 677+ E126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 677+ E121             >
 677+ E121 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 677+ E122 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 677+ E126 29          >
 677+ E127             >                org     $-1                 // alter last byte of Name just above to set
 677+ E126 A9          >                db      {b $} | END_BIT     // msb as name end
 677+ E127             >
 677+ E127 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 677+ E129             >Prev_Ptr        defl    Heap_Ptr
 677+ E129             >
 677+ E129             >mirror_Ptr      defl    $
 677+ E129             >
 677+ E129 F5 21       >                dw      Dict_Ptr + 2        // xt
 677+ E12B             >Heap_Ptr        defl    $ - $E000           // save current HP
 677+ E12B             >
 677+ E12B             >Current_HP      defl  $ - $E000             // used to set HP once!
 677+ E12B             >
 677+ E12B             >//              ______________________________________________________________________
 677+ E12B             >//              Dictionary part
 677+ E12B             >
 677+ E12B             >                org     Dict_Ptr
 677+ 21F3             >
 677+ 21F3 29 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 677+ 21F5             >
 677+ 21F5             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 677+ 21F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 677+ 21F5 ~           >
 677+ 21F5 ~           >
 677+ 21F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 677+ 21F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 677+ 21F5             >
 677+ 21F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 678+ 21F5 D9                           exx
 679+ 21F6 E1                           pop     hl
 680+ 21F7 7D                           ld      a, l
 681+ 21F8 C1                           pop     bc
 682+ 21F9 E1                           pop     hl
 683+ 21FA 50                           ld      d, b
 684+ 21FB 59                           ld      e, c
 685+ 21FC ED B1                        cpir
 686+ 21FE E1                           pop     hl
 687+ 21FF 20 05                        jr      nz, C_Map_Then
 687+ 2201
 688+ 2201 19                               add     hl, de
 689+ 2202 2B                               dec     hl
 690+ 2203 ED 42                            sbc     hl, bc
 691+ 2205 7E                               ld      a, (hl)
 692+ 2206              C_Map_Then:
 693+ 2206 6F                           ld      l, a
 694+ 2207 26 00                        ld      h, 0
 695+ 2209 E5                           push    hl
 696+ 220A D9                           exx
 697+ 220B                              next
 697+ 220B DD E9       >                jp      (ix)
 698+ 220D
 699+ 220D              //  ______________________________________________________________________
 700+ 220D              //
 701+ 220D              // (compare)    a1 a2 n -- b
 702+ 220D              // this word performs a lexicographic compare of n bytes of text at address a1
 703+ 220D              // with n bytes of text at address a2. It returns numeric a value:
 704+ 220D              //  0 : if strings are equal
 705+ 220D              // +1 : if string at a1 greater than string at a2
 706+ 220D              // -1 : if string at a1 less than string at a2
 707+ 220D              // strings can be 256 bytes in length at most.
 708+ 220D                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 708+ 220D             >
 708+ 220D             >Dict_Ptr        defl    $
 708+ 220D             >
 708+ 220D             >//              ______________________________________________________________________
 708+ 220D             >//              Heap part
 708+ 220D             >
 708+ 220D             >
 708+ 220D             >                org     (Heap_Ptr & $1FFF) + $E000
 708+ E12B             >
 708+ E12B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 708+ E12B             >Latest_Definition defl  Heap_Ptr
 708+ E12B             >
 708+ E12B             >                // dummy db directives used to calculate length of namec
 708+ E12B 28 43 4F 4D >                db      "(COMPARE)"
 708+ E12F 50 41 52 45 >
 708+ E133 29          >
 708+ E134             >len_NFA         defl    $ - temp_NFA
 708+ E134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 708+ E12B             >
 708+ E12B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 708+ E12C 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 708+ E130 50 41 52 45 >
 708+ E134 29          >
 708+ E135             >                org     $-1                 // alter last byte of Name just above to set
 708+ E134 A9          >                db      {b $} | END_BIT     // msb as name end
 708+ E135             >
 708+ E135 21 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 708+ E137             >Prev_Ptr        defl    Heap_Ptr
 708+ E137             >
 708+ E137             >mirror_Ptr      defl    $
 708+ E137             >
 708+ E137 0F 22       >                dw      Dict_Ptr + 2        // xt
 708+ E139             >Heap_Ptr        defl    $ - $E000           // save current HP
 708+ E139             >
 708+ E139             >Current_HP      defl  $ - $E000             // used to set HP once!
 708+ E139             >
 708+ E139             >//              ______________________________________________________________________
 708+ E139             >//              Dictionary part
 708+ E139             >
 708+ E139             >                org     Dict_Ptr
 708+ 220D             >
 708+ 220D 37 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 708+ 220F             >
 708+ 220F             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 708+ 220F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 708+ 220F ~           >
 708+ 220F ~           >
 708+ 220F             >                endif           ; ok        // for other definitions it "points" the correct handler
 708+ 220F             >                // Use of "; ok" to suppress "warning[fwdref]"
 708+ 220F             >
 708+ 220F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 709+ 220F D9                           exx
 710+ 2210 E1                           pop     hl                  // Number of bytes
 711+ 2211 7D                           ld      a, l
 712+ 2212 E1                           pop     hl                  // hl points string a2
 713+ 2213 D1                           pop     de                  // hl points string a1
 714+ 2214              //              push    bc                  // Instruction pointer on stack
 715+ 2214 47                           ld      b, a
 716+ 2215              C_Compare_Loop:
 717+ 2215 7E                               ld      a, (hl)
 718+ 2216 CD 12 21                         call    Case_Sensitive
 719+ 2219 4F                               ld      c, a
 720+ 221A 1A                               ld      a, (de)
 721+ 221B CD 12 21                         call    Case_Sensitive
 722+ 221E B9                               cp      c
 723+ 221F 13                               inc     de
 724+ 2220 23                               inc     hl
 725+ 2221 28 0E                            jr      z, C_Compare_Equal
 726+ 2223 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 727+ 2225 21 01 00                                 ld      hl, 1               // a1 gt a2
 728+ 2228 18 03                                jr      C_Compare_Then      // Else
 729+ 222A              C_Compare_NotLessThan:
 730+ 222A 21 FF FF                                 ld      hl, -1              // a1 lt a2
 731+ 222D              C_Compare_Then:                                 // Endif
 732+ 222D              //                      pop     bc              // restore Instruction Pointer
 733+ 222D E5                                   push    hl
 734+ 222E D9                                   exx
 735+ 222F
 736+ 222F                                      next
 736+ 222F DD E9       >                jp      (ix)
 737+ 2231
 738+ 2231              C_Compare_Equal:
 739+ 2231 10 E2                        djnz    C_Compare_Loop
 740+ 2233 21 00 00                     ld      hl, 0               // a1 eq a2
 741+ 2236              //              pop     bc                  // restore Instruction Pointer
 742+ 2236 E5                           push    hl
 743+ 2237 D9                           exx
 744+ 2238
 745+ 2238                              next
 745+ 2238 DD E9       >                jp      (ix)
 746+ 223A
 747+ 223A              //  ______________________________________________________________________
 748+ 223A              //
 749+ 223A              // emitc        c --
 750+ 223A              // low level emit, calls ROM routine at #10 to send a character to
 751+ 223A              // the the current channel (see SELECT to change stream-channel)
 752+ 223A                              New_Def EMITC, "EMITC", is_code, is_normal
 752+ 223A             >
 752+ 223A             >Dict_Ptr        defl    $
 752+ 223A             >
 752+ 223A             >//              ______________________________________________________________________
 752+ 223A             >//              Heap part
 752+ 223A             >
 752+ 223A             >
 752+ 223A             >                org     (Heap_Ptr & $1FFF) + $E000
 752+ E139             >
 752+ E139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ E139             >Latest_Definition defl  Heap_Ptr
 752+ E139             >
 752+ E139             >                // dummy db directives used to calculate length of namec
 752+ E139 45 4D 49 54 >                db      "EMITC"
 752+ E13D 43          >
 752+ E13E             >len_NFA         defl    $ - temp_NFA
 752+ E13E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ E139             >
 752+ E139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ E13A 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 752+ E13E 43          >
 752+ E13F             >                org     $-1                 // alter last byte of Name just above to set
 752+ E13E C3          >                db      {b $} | END_BIT     // msb as name end
 752+ E13F             >
 752+ E13F 2B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 752+ E141             >Prev_Ptr        defl    Heap_Ptr
 752+ E141             >
 752+ E141             >mirror_Ptr      defl    $
 752+ E141             >
 752+ E141 3C 22       >                dw      Dict_Ptr + 2        // xt
 752+ E143             >Heap_Ptr        defl    $ - $E000           // save current HP
 752+ E143             >
 752+ E143             >Current_HP      defl  $ - $E000             // used to set HP once!
 752+ E143             >
 752+ E143             >//              ______________________________________________________________________
 752+ E143             >//              Dictionary part
 752+ E143             >
 752+ E143             >                org     Dict_Ptr
 752+ 223A             >
 752+ 223A 41 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 752+ 223C             >
 752+ 223C             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 223C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 752+ 223C ~           >
 752+ 223C ~           >
 752+ 223C             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 223C             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 223C             >
 752+ 223C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 223C E1                           pop     hl
 754+ 223D 7D                           ld      a, l
 755+ 223E              Emitc_Ptr:
 756+ 223E C5                           push    bc
 757+ 223F D5                           push    de
 758+ 2240 DD E5                        push    ix
 759+ 2242 F3                           di
 760+ 2243 D7                           rst     $10
 761+ 2244 FB                           ei
 762+ 2245 DD E1                        pop     ix
 763+ 2247 D1                           pop     de
 764+ 2248 C1                           pop     bc
 765+ 2249              //              ld      a, -1            // max possible
 766+ 2249              //              ld      (SCR_CT), a
 767+ 2249                              next
 767+ 2249 DD E9       >                jp      (ix)
 768+ 224B
 769+ 224B              //  ______________________________________________________________________
 770+ 224B              //
 771+ 224B              // cr           --
 772+ 224B              // send a CR via EMITC
 773+ 224B                              Colon_Def CR, "CR", is_normal
 773+ 224B             >                New_Def  CR, "CR", Enter_Ptr, is_normal ; ok
 773+ 224B             >
 773+ 224B             >Dict_Ptr        defl    $
 773+ 224B             >
 773+ 224B             >//              ______________________________________________________________________
 773+ 224B             >//              Heap part
 773+ 224B             >
 773+ 224B             >
 773+ 224B             >                org     (Heap_Ptr & $1FFF) + $E000
 773+ E143             >
 773+ E143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ E143             >Latest_Definition defl  Heap_Ptr
 773+ E143             >
 773+ E143             >                // dummy db directives used to calculate length of namec
 773+ E143 43 52       >                db      "CR"
 773+ E145             >len_NFA         defl    $ - temp_NFA
 773+ E145             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ E143             >
 773+ E143 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ E144 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 773+ E146             >                org     $-1                 // alter last byte of Name just above to set
 773+ E145 D2          >                db      {b $} | END_BIT     // msb as name end
 773+ E146             >
 773+ E146 39 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 773+ E148             >Prev_Ptr        defl    Heap_Ptr
 773+ E148             >
 773+ E148             >mirror_Ptr      defl    $
 773+ E148             >
 773+ E148 4D 22       >                dw      Dict_Ptr + 2        // xt
 773+ E14A             >Heap_Ptr        defl    $ - $E000           // save current HP
 773+ E14A             >
 773+ E14A             >Current_HP      defl  $ - $E000             // used to set HP once!
 773+ E14A             >
 773+ E14A             >//              ______________________________________________________________________
 773+ E14A             >//              Dictionary part
 773+ E14A             >
 773+ E14A             >                org     Dict_Ptr
 773+ 224B             >
 773+ 224B 48 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 773+ 224D             >
 773+ 224D             >CR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 224D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 773+ 2250             >
 773+ 2250             >
 773+ 2250             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 2250             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 2250             >
 773+ 2250             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 2250 3D 20 1A 00                  dw      LIT, 26, EMITC
 774+ 2254 3C 22
 775+ 2256 4C 27 3C 22                  dw      ZERO, EMITC
 776+ 225A 3D 20 0D 00                  dw      LIT, 13, EMITC
 776+ 225E 3C 22
 777+ 2260 0D 25                        dw      EXIT
 778+ 2262
 779+ 2262              Emitc_Vec:
 780+ 2262 9B 22                        dw      C_Emit_Printable  // comma
 781+ 2264 A2 22                        dw      C_Emit_Bel        // bel
 782+ 2266 9B 22                        dw      C_Emit_Printable  // bs
 783+ 2268 BC 22                        dw      C_Emit_Tab        // tab
 784+ 226A 9B 22                        dw      C_Emit_Printable  // cr
 785+ 226C C0 22                        dw      C_Emit_NL         // lf (unix newline)
 786+ 226E 9B 22                        dw      C_Emit_Printable  // blank
 787+ 2270 9B 22                        dw      C_Emit_Printable  // blank
 788+ 2272
 789+ 2272              Emit_Selector_Start:
 790+ 2272 06                           db      $06                 // comma
 791+ 2273 07                           db      $07                 // bel
 792+ 2274 08                           db      $08                 // bs
 793+ 2275 09                           db      $09                 // tab
 794+ 2276 0D                           db      $0D                 // cr
 795+ 2277 0A                           db      $0A                 // lf (unix newline)
 796+ 2278 20                           db      $20
 797+ 2279              Emit_Selector_End:
 798+ 2279 20                           db      $20
 799+ 227A
 800+ 227A              //  ______________________________________________________________________
 801+ 227A              //
 802+ 227A              // (?emit)      c1 -- c2 | c1
 803+ 227A              // decode a character to be sent via EMIT
 804+ 227A              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 805+ 227A              // the routine should resolve anything and convert the character anyway.
 806+ 227A                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 806+ 227A             >
 806+ 227A             >Dict_Ptr        defl    $
 806+ 227A             >
 806+ 227A             >//              ______________________________________________________________________
 806+ 227A             >//              Heap part
 806+ 227A             >
 806+ 227A             >
 806+ 227A             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ E14A             >
 806+ E14A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ E14A             >Latest_Definition defl  Heap_Ptr
 806+ E14A             >
 806+ E14A             >                // dummy db directives used to calculate length of namec
 806+ E14A 28 3F 45 4D >                db      "(?EMIT)"
 806+ E14E 49 54 29    >
 806+ E151             >len_NFA         defl    $ - temp_NFA
 806+ E151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ E14A             >
 806+ E14A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ E14B 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 806+ E14F 49 54 29    >
 806+ E152             >                org     $-1                 // alter last byte of Name just above to set
 806+ E151 A9          >                db      {b $} | END_BIT     // msb as name end
 806+ E152             >
 806+ E152 43 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ E154             >Prev_Ptr        defl    Heap_Ptr
 806+ E154             >
 806+ E154             >mirror_Ptr      defl    $
 806+ E154             >
 806+ E154 7C 22       >                dw      Dict_Ptr + 2        // xt
 806+ E156             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ E156             >
 806+ E156             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ E156             >
 806+ E156             >//              ______________________________________________________________________
 806+ E156             >//              Dictionary part
 806+ E156             >
 806+ E156             >                org     Dict_Ptr
 806+ 227A             >
 806+ 227A 54 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 227C             >
 806+ 227C             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 227C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 806+ 227C ~           >
 806+ 227C ~           >
 806+ 227C             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 227C             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 227C             >
 806+ 227C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 227C D9                           exx
 808+ 227D D1                           pop     de
 809+ 227E 7B                           ld      a, e                //  de has c1
 810+ 227F E6 7F                        and     $7F                 // 7-bit ascii only
 811+ 2281                              // push    bc                  // save Instruction Pointer
 812+ 2281 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 813+ 2284 21 79 22                     ld      hl, Emit_Selector_End
 814+ 2287 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 815+ 2289 20 0A                        jr      nz, C_Emit_Not_Found
 816+ 228B                                  // Found then decode it
 817+ 228B 21 62 22                         ld      hl, Emitc_Vec
 818+ 228E 09                               add     hl, bc
 819+ 228F 09                               add     hl, bc
 820+ 2290 5E                               ld      e, (hl)
 821+ 2291 23                               inc     hl
 822+ 2292 56                               ld      d, (hl)
 823+ 2293 EB                               ex      de, hl
 824+ 2294                                  // pop     bc                  // restore Instruction Pointer
 825+ 2294 E9                               jp      (hl)                // one of the following labels
 826+ 2295              C_Emit_Not_Found:
 827+ 2295                              // pop     bc                  // restore Instruction Pointer
 828+ 2295 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 829+ 2297 30 02                        jr      nc, C_Emit_Printable
 830+ 2299 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 831+ 229B              C_Emit_Printable:
 832+ 229B 6F                           ld      l, a
 833+ 229C 26 00                        ld      h, 0
 834+ 229E E5                           push    hl
 835+ 229F D9                           exx
 836+ 22A0                              next
 836+ 22A0 DD E9       >                jp      (ix)
 837+ 22A2
 838+ 22A2              C_Emit_Bel:
 839+ 22A2 D9                            exx
 840+ 22A3 C5                           push    bc                  // save Instruction Pointer
 841+ 22A4 D5                           push    de
 842+ 22A5 11 00 01                     ld      de, $0100
 843+ 22A8 21 00 02                     ld      hl, $0200
 844+ 22AB DD E5                        push    ix                  // save Next Pointer
 845+ 22AD                              // call    $03B6               // bleep Standard-ROM routine
 846+ 22AD F3                           di
 847+ 22AE DF                           rst     $18
 848+ 22AF B6 03                        defw    $03B6
 849+ 22B1 FB                           ei
 850+ 22B2 DD E1                        pop     ix                  // restore Next Pointer
 851+ 22B4 D1                           pop     de
 852+ 22B5 C1                           pop     bc                  // restore Instruction Pointer
 853+ 22B6 21 00 00                     ld      hl, NUL_CHAR
 854+ 22B9 E5                           push    hl
 855+ 22BA                              next
 855+ 22BA DD E9       >                jp      (ix)
 856+ 22BC
 857+ 22BC 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 858+ 22BE 18 DB                        jr      C_Emit_Printable
 859+ 22C0                          //  push    hl
 860+ 22C0                          //  exx
 861+ 22C0                          //  next
 862+ 22C0
 863+ 22C0 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 864+ 22C2 18 D7                        jr      C_Emit_Printable
 865+ 22C4                          //  push    hl
 866+ 22C4                          //  exx
 867+ 22C4                          //  next
 868+ 22C4
 869+ 22C4              //  ______________________________________________________________________
 870+ 22C4
 871+ 22C4              Key_Table:
 872+ 22C4 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 873+ 22C5 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 874+ 22C6 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 875+ 22C7 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 876+ 22C8 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 877+ 22C9 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 878+ 22CA C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 879+ 22CB AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 880+ 22CC C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 881+ 22CD C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 882+ 22CE C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 883+ 22CF              Key_MapTo:
 884+ 22CF 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 885+ 22D0 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 886+ 22D1 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 887+ 22D2 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 888+ 22D3 5D                           db      $5D                 //  6: SYMBOL+U : ]
 889+ 22D4 5B                           db      $5B                 //  5: SYMBOL+Y : [
 890+ 22D5 7D                           db      $7D                 //  4: SYMBOL+G : }
 891+ 22D6 7B                           db      $7B                 //  3: SYMBOL+F : {
 892+ 22D7 5C                           db      $5C                 //  2: SYMBOl+D : //
 893+ 22D8 7C                           db      $7C                 //  1: SYMBOL+S : |
 894+ 22D9 7E                           db      $7E                 //  0: SYMBOL+A : ~
 895+ 22DA
 896+ 22DA              //  ______________________________________________________________________
 897+ 22DA              //
 898+ 22DA              // curs         -- c
 899+ 22DA              // wait for a keypress
 900+ 22DA              // This definition need Standard ROM Interrupt to be served
 901+ 22DA
 902+ 22DA                              New_Def CUR, "CURS", is_code, is_normal
 902+ 22DA             >
 902+ 22DA             >Dict_Ptr        defl    $
 902+ 22DA             >
 902+ 22DA             >//              ______________________________________________________________________
 902+ 22DA             >//              Heap part
 902+ 22DA             >
 902+ 22DA             >
 902+ 22DA             >                org     (Heap_Ptr & $1FFF) + $E000
 902+ E156             >
 902+ E156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ E156             >Latest_Definition defl  Heap_Ptr
 902+ E156             >
 902+ E156             >                // dummy db directives used to calculate length of namec
 902+ E156 43 55 52 53 >                db      "CURS"
 902+ E15A             >len_NFA         defl    $ - temp_NFA
 902+ E15A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ E156             >
 902+ E156 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ E157 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 902+ E15B             >                org     $-1                 // alter last byte of Name just above to set
 902+ E15A D3          >                db      {b $} | END_BIT     // msb as name end
 902+ E15B             >
 902+ E15B 4A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 902+ E15D             >Prev_Ptr        defl    Heap_Ptr
 902+ E15D             >
 902+ E15D             >mirror_Ptr      defl    $
 902+ E15D             >
 902+ E15D DC 22       >                dw      Dict_Ptr + 2        // xt
 902+ E15F             >Heap_Ptr        defl    $ - $E000           // save current HP
 902+ E15F             >
 902+ E15F             >Current_HP      defl  $ - $E000             // used to set HP once!
 902+ E15F             >
 902+ E15F             >//              ______________________________________________________________________
 902+ E15F             >//              Dictionary part
 902+ E15F             >
 902+ E15F             >                org     Dict_Ptr
 902+ 22DA             >
 902+ 22DA 5D 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 902+ 22DC             >
 902+ 22DC             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 22DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 902+ 22DC ~           >
 902+ 22DC ~           >
 902+ 22DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 22DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 22DC             >
 902+ 22DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 22DC
 904+ 22DC C5                           push    bc                  // save Instruction Pointer
 905+ 22DD D5                           push    de                  // save Return Stack Pointer
 906+ 22DE DD E5                        push    ix
 907+ 22E0 ED 73 2C 20                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 908+ 22E4                          //  ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 909+ 22E4 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
 910+ 22E7 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 911+ 22EB
 912+ 22EB              Cur_Wait:
 913+ 22EB 76                               halt
 914+ 22EC 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 915+ 22EE                              //  call    $1601               // SELECT Standard-ROM Routine
 916+ 22EE DF                               rst     $18
 917+ 22EF 01 16                            dw      $1601
 918+ 22F1                                  // software-flash: flips face every 320 ms
 919+ 22F1 3E 20                            ld      a, $20              // Timing based
 920+ 22F3 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 921+ 22F6
 922+ 22F6 3A 28 20                         ld      a, (Block_Face)     // see origin.asm
 923+ 22F9 20 0C                            jr      nz, Cur_Cursor
 924+ 22FB 3A 29 20                             ld      a, (Half_Face)      // see origin.asm
 925+ 22FE FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 926+ 2302 28 03                                jr      z, Cur_Cursor
 927+ 2304 3A 2A 20                                 ld      a, (Underscore_Face) // see origin
 928+ 2307              Cur_Cursor:
 929+ 2307 D7                               rst     $10
 930+ 2308 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 931+ 230A D7                               rst     $10
 932+ 230B FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 933+ 230F 28 DA                        jr      z, Cur_Wait
 934+ 2311
 935+ 2311 76                           halt    // this is to sync flashing cursor.
 936+ 2312
 937+ 2312 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 938+ 2314 D7                           rst     $10
 939+ 2315 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 940+ 2317 D7                           rst     $10
 941+ 2318
 942+ 2318 ED 7B 2C 20                  ld      sp, (SP_Saved)
 943+ 231C DD E1                        pop     ix
 944+ 231E D1                           pop     de                  // Restore Return Stack Pointer
 945+ 231F C1                           pop     bc                  // Restore Instruction Pointer
 946+ 2320                              next
 946+ 2320 DD E9       >                jp      (ix)
 947+ 2322
 948+ 2322
 949+ 2322              //  ______________________________________________________________________
 950+ 2322              //
 951+ 2322              // key          -- c
 952+ 2322              // This definition need Standard ROM Interrupt to be served
 953+ 2322
 954+ 2322                              New_Def KEY, "KEY", is_code, is_normal
 954+ 2322             >
 954+ 2322             >Dict_Ptr        defl    $
 954+ 2322             >
 954+ 2322             >//              ______________________________________________________________________
 954+ 2322             >//              Heap part
 954+ 2322             >
 954+ 2322             >
 954+ 2322             >                org     (Heap_Ptr & $1FFF) + $E000
 954+ E15F             >
 954+ E15F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ E15F             >Latest_Definition defl  Heap_Ptr
 954+ E15F             >
 954+ E15F             >                // dummy db directives used to calculate length of namec
 954+ E15F 4B 45 59    >                db      "KEY"
 954+ E162             >len_NFA         defl    $ - temp_NFA
 954+ E162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ E15F             >
 954+ E15F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ E160 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 954+ E163             >                org     $-1                 // alter last byte of Name just above to set
 954+ E162 D9          >                db      {b $} | END_BIT     // msb as name end
 954+ E163             >
 954+ E163 56 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 954+ E165             >Prev_Ptr        defl    Heap_Ptr
 954+ E165             >
 954+ E165             >mirror_Ptr      defl    $
 954+ E165             >
 954+ E165 24 23       >                dw      Dict_Ptr + 2        // xt
 954+ E167             >Heap_Ptr        defl    $ - $E000           // save current HP
 954+ E167             >
 954+ E167             >Current_HP      defl  $ - $E000             // used to set HP once!
 954+ E167             >
 954+ E167             >//              ______________________________________________________________________
 954+ E167             >//              Dictionary part
 954+ E167             >
 954+ E167             >                org     Dict_Ptr
 954+ 2322             >
 954+ 2322 65 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 954+ 2324             >
 954+ 2324             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 2324 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 954+ 2324 ~           >
 954+ 2324 ~           >
 954+ 2324             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 2324             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 2324             >
 954+ 2324             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 2324
 956+ 2324 C5                           push    bc                  // Save Instruction Pointer
 957+ 2325
 958+ 2325              Key_Wait:
 959+ 2325 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 960+ 2329 28 FA                        jr      z, Key_Wait
 961+ 232B
 962+ 232B 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 963+ 232E
 964+ 232E                              // decode character from above table
 965+ 232E 21 C4 22                     ld      hl, Key_Table
 966+ 2331 01 0B 00                     ld      bc, $000B
 967+ 2334 ED B1                        cpir
 968+ 2336 20 05                        jr      nz, Key_DontMap
 969+ 2338 21 CF 22                         ld      hl, Key_MapTo
 970+ 233B 09                               add     hl, bc
 971+ 233C 7E                               ld      a, (hl)
 972+ 233D FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 973+ 233F 20 09                        jr      nz, Key_NoCapsLock
 974+ 2341 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 975+ 2344 7E                               ld      a, (hl)
 976+ 2345 EE 08                            xor     $08
 977+ 2347 77                               ld      (hl), a
 978+ 2348 3E 00                            ld      a, NUL_CHAR
 979+ 234A 6F           Key_NoCapsLock: ld      l, a
 980+ 234B 26 00                        ld      h, 0                // Prepare TOS
 981+ 234D
 982+ 234D FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 983+ 2351
 984+ 2351 C1                           pop     bc                  // Restore Instruction Pointer
 985+ 2352
 986+ 2352                              psh1
 986+ 2352 E5          >                push    hl
 986+ 2353 DD E9       >                jp      (ix)
 987+ 2355
 988+ 2355
 989+ 2355              //  ______________________________________________________________________
 990+ 2355              //
 991+ 2355              // click        --
 992+ 2355              // This definition need Standard ROM Interrupt to be served
 993+ 2355              //
 994+ 2355              //              New_Def CLICK, "CLICK", is_code, is_normal
 995+ 2355              //
 996+ 2355              //                push    bc
 997+ 2355              //              ld      a, ($5C48)          // BORDCR system variable
 998+ 2355              //              rra
 999+ 2355              //              rra
1000+ 2355              //              rra
1001+ 2355              //              or      $18                 // quick'n'dirty click
1002+ 2355              //              out     ($fe), a
1003+ 2355              //              ld      b, 0
1004+ 2355              //              djnz    $                   // wait loop
1005+ 2355              //              xor     $18
1006+ 2355              //              out     ($fe), a
1007+ 2355              //                pop     bc
1008+ 2355
1009+ 2355              //              next
1010+ 2355
1011+ 2355              //  ______________________________________________________________________
1012+ 2355              //
1013+ 2355              // key?         -- f
1014+ 2355              // key available
1015+ 2355              //
1016+ 2355              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1017+ 2355              //
1018+ 2355              //              ld      hl, 0000
1019+ 2355              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1020+ 2355              //              jr      z, Key_Q
1021+ 2355              //                  dec     hl
1022+ 2355              // Key_Q:
1023+ 2355              //                psh1
1024+ 2355              //              next
1025+ 2355
1026+ 2355              //  ______________________________________________________________________
1027+ 2355              //
1028+ 2355              // ?terminal    -- FALSE | TRUE
1029+ 2355              // test for BREAK keypress
1030+ 2355                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1030+ 2355             >
1030+ 2355             >Dict_Ptr        defl    $
1030+ 2355             >
1030+ 2355             >//              ______________________________________________________________________
1030+ 2355             >//              Heap part
1030+ 2355             >
1030+ 2355             >
1030+ 2355             >                org     (Heap_Ptr & $1FFF) + $E000
1030+ E167             >
1030+ E167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1030+ E167             >Latest_Definition defl  Heap_Ptr
1030+ E167             >
1030+ E167             >                // dummy db directives used to calculate length of namec
1030+ E167 3F 54 45 52 >                db      "?TERMINAL"
1030+ E16B 4D 49 4E 41 >
1030+ E16F 4C          >
1030+ E170             >len_NFA         defl    $ - temp_NFA
1030+ E170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1030+ E167             >
1030+ E167 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1030+ E168 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1030+ E16C 4D 49 4E 41 >
1030+ E170 4C          >
1030+ E171             >                org     $-1                 // alter last byte of Name just above to set
1030+ E170 CC          >                db      {b $} | END_BIT     // msb as name end
1030+ E171             >
1030+ E171 5F 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1030+ E173             >Prev_Ptr        defl    Heap_Ptr
1030+ E173             >
1030+ E173             >mirror_Ptr      defl    $
1030+ E173             >
1030+ E173 57 23       >                dw      Dict_Ptr + 2        // xt
1030+ E175             >Heap_Ptr        defl    $ - $E000           // save current HP
1030+ E175             >
1030+ E175             >Current_HP      defl  $ - $E000             // used to set HP once!
1030+ E175             >
1030+ E175             >//              ______________________________________________________________________
1030+ E175             >//              Dictionary part
1030+ E175             >
1030+ E175             >                org     Dict_Ptr
1030+ 2355             >
1030+ 2355 73 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1030+ 2357             >
1030+ 2357             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1030+ 2357 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1030+ 2357 ~           >
1030+ 2357 ~           >
1030+ 2357             >                endif           ; ok        // for other definitions it "points" the correct handler
1030+ 2357             >                // Use of "; ok" to suppress "warning[fwdref]"
1030+ 2357             >
1030+ 2357             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1031+ 2357 D9                           exx
1032+ 2358 01 FE 7F                     ld      bc, $7ffe
1033+ 235B ED 50                        in      d, (c)
1034+ 235D 41                           ld      b, c
1035+ 235E ED 78                        in      a, (c)
1036+ 2360 B2                           or       d
1037+ 2361 1F                           rra
1038+ 2362 3F                           ccf
1039+ 2363 ED 62                        sbc     hl, hl
1040+ 2365 E5                           push    hl
1041+ 2366 D9                           exx
1042+ 2367                              next
1042+ 2367 DD E9       >                jp      (ix)
1043+ 2369
1044+ 2369
1045+ 2369              //  ______________________________________________________________________
1046+ 2369              //
1047+ 2369              // inkey        -- c | 0
1048+ 2369              // call ROM inkey$ routine, returns c or "zero".
1049+ 2369              //
1050+ 2369              //              New_Def INKEY, "INKEY", is_code, is_normal
1051+ 2369              //              push    bc
1052+ 2369              //              push    de
1053+ 2369              //              ld      (SP_Saved), sp
1054+ 2369              //              ld      sp, Cold_origin - 5
1055+ 2369              //              ld      sp, TSTACK           // Carefully balanced from startup
1056+ 2369              //              push    ix
1057+ 2369              //              di
1058+ 2369              //              call    $15E6                   // instead of 15E9
1059+ 2369              //              ei
1060+ 2369              //              pop     ix
1061+ 2369              //              ld      sp, (SP_Saved)
1062+ 2369              //              ld      l, a
1063+ 2369              //              ld      h, 0
1064+ 2369              //              pop     de
1065+ 2369              //              pop     bc
1066+ 2369              //              psh1
1067+ 2369
1068+ 2369              //  ______________________________________________________________________
1069+ 2369              //
1070+ 2369              // select      n --
1071+ 2369              // selects the given channel number
1072+ 2369
1073+ 2369                              New_Def SELECT, "SELECT", is_code, is_normal
1073+ 2369             >
1073+ 2369             >Dict_Ptr        defl    $
1073+ 2369             >
1073+ 2369             >//              ______________________________________________________________________
1073+ 2369             >//              Heap part
1073+ 2369             >
1073+ 2369             >
1073+ 2369             >                org     (Heap_Ptr & $1FFF) + $E000
1073+ E175             >
1073+ E175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1073+ E175             >Latest_Definition defl  Heap_Ptr
1073+ E175             >
1073+ E175             >                // dummy db directives used to calculate length of namec
1073+ E175 53 45 4C 45 >                db      "SELECT"
1073+ E179 43 54       >
1073+ E17B             >len_NFA         defl    $ - temp_NFA
1073+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1073+ E175             >
1073+ E175 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1073+ E176 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1073+ E17A 43 54       >
1073+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1073+ E17B D4          >                db      {b $} | END_BIT     // msb as name end
1073+ E17C             >
1073+ E17C 67 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1073+ E17E             >Prev_Ptr        defl    Heap_Ptr
1073+ E17E             >
1073+ E17E             >mirror_Ptr      defl    $
1073+ E17E             >
1073+ E17E 6B 23       >                dw      Dict_Ptr + 2        // xt
1073+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1073+ E180             >
1073+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1073+ E180             >
1073+ E180             >//              ______________________________________________________________________
1073+ E180             >//              Dictionary part
1073+ E180             >
1073+ E180             >                org     Dict_Ptr
1073+ 2369             >
1073+ 2369 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1073+ 236B             >
1073+ 236B             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1073+ 236B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1073+ 236B ~           >
1073+ 236B ~           >
1073+ 236B             >                endif           ; ok        // for other definitions it "points" the correct handler
1073+ 236B             >                // Use of "; ok" to suppress "warning[fwdref]"
1073+ 236B             >
1073+ 236B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1074+ 236B E1                           pop     hl
1075+ 236C C5                           push    bc
1076+ 236D D5                           push    de
1077+ 236E 7D                           ld      a, l
1078+ 236F ED 73 2C 20                  ld      (SP_Saved), sp
1079+ 2373                          //  ld      sp, Cold_origin - 5
1080+ 2373 31 00 5C                     ld      sp, TSTACK           // Carefully balanced from startup
1081+ 2376 DD E5                        push    ix
1082+ 2378                          //  call    $1601
1083+ 2378 F3                           di
1084+ 2379 DF                           rst     $18
1085+ 237A 01 16                        dw      $1601
1086+ 237C FB                           ei
1087+ 237D DD E1                        pop     ix
1088+ 237F ED 7B 2C 20                  ld      sp, (SP_Saved)
1089+ 2383 D1                           pop     de
1090+ 2384 C1                           pop     bc
1091+ 2385                              next
1091+ 2385 DD E9       >                jp      (ix)
1092+ 2387
1093+ 2387              //  ______________________________________________________________________
1094+ 2387              //
1095+ 2387              // ZX Spectrum Next - Low Level disk primitives.
1096+ 2387              // this include is "here" for backward compatibility
1097+ 2387
1098+ 2387                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
   1++2387              //  ______________________________________________________________________
   2++2387              //
   3++2387              //  next-opt.asm
   4++2387              //
   5++2387              //  ZX Spectrum Next - peculiar definitions
   6++2387              //  ______________________________________________________________________
   7++2387
   8++2387              //  ______________________________________________________________________
   9++2387              //
  10++2387              // f_seek       d u -- f
  11++2387              // Seek to position d in file-handle u.
  12++2387              // Return a false-flag 0 on success, True flag on error
  13++2387                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++2387             >
  13++2387             >Dict_Ptr        defl    $
  13++2387             >
  13++2387             >//              ______________________________________________________________________
  13++2387             >//              Heap part
  13++2387             >
  13++2387             >
  13++2387             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E180             >
  13++E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E180             >Latest_Definition defl  Heap_Ptr
  13++E180             >
  13++E180             >                // dummy db directives used to calculate length of namec
  13++E180 46 5F 53 45 >                db      "F_SEEK"
  13++E184 45 4B       >
  13++E186             >len_NFA         defl    $ - temp_NFA
  13++E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E180             >
  13++E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E181 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E185 45 4B       >
  13++E187             >                org     $-1                 // alter last byte of Name just above to set
  13++E186 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E187             >
  13++E187 75 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E189             >Prev_Ptr        defl    Heap_Ptr
  13++E189             >
  13++E189             >mirror_Ptr      defl    $
  13++E189             >
  13++E189 89 23       >                dw      Dict_Ptr + 2        // xt
  13++E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18B             >
  13++E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18B             >
  13++E18B             >//              ______________________________________________________________________
  13++E18B             >//              Dictionary part
  13++E18B             >
  13++E18B             >                org     Dict_Ptr
  13++2387             >
  13++2387 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++2389             >
  13++2389             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++2389 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++2389 ~           >
  13++2389 ~           >
  13++2389             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++2389             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++2389             >
  13++2389             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++2389 D9                            exx
  15++238A E1                            pop     hl                  // file-handle
  16++238B 7D                            ld      a, l
  17++238C C1                            pop     bc                  // bc has high-word of d
  18++238D D1                            pop     de
  19++238E D9                           exx
  20++238F DD E5                        push    ix
  21++2391 D5                           push    de
  22++2392 C5                           push    bc                  // save Instruction Pointer
  23++2393 D9                            exx
  24++2394 21 00 00                      ld      hl, 0 // ix, 0
  25++2397 F3                            di
  26++2398 CF                            rst     $08
  27++2399 9F                            db      $9F
  28++239A              F_Seek_Exit:
  29++239A FB                           ei
  30++239B C1                           pop     bc                  // restore Instruction Pointer
  31++239C D1                           pop     de
  32++239D DD E1                        pop     ix
  33++239F ED 62                        sbc     hl, hl              // to get 0 or -1
  34++23A1                              psh1
  34++23A1 E5          >                push    hl
  34++23A2 DD E9       >                jp      (ix)
  35++23A4
  36++23A4              //  ______________________________________________________________________
  37++23A4              //
  38++23A4              // f_close      u -- f
  39++23A4              // Close file-handle u.
  40++23A4              // Return 0 on success, True flag on error
  41++23A4
  42++23A4                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++23A4             >
  42++23A4             >Dict_Ptr        defl    $
  42++23A4             >
  42++23A4             >//              ______________________________________________________________________
  42++23A4             >//              Heap part
  42++23A4             >
  42++23A4             >
  42++23A4             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18B             >
  42++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18B             >Latest_Definition defl  Heap_Ptr
  42++E18B             >
  42++E18B             >                // dummy db directives used to calculate length of namec
  42++E18B 46 5F 43 4C >                db      "F_CLOSE"
  42++E18F 4F 53 45    >
  42++E192             >len_NFA         defl    $ - temp_NFA
  42++E192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18B             >
  42++E18B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18C 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E190 4F 53 45    >
  42++E193             >                org     $-1                 // alter last byte of Name just above to set
  42++E192 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E193             >
  42++E193 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E195             >Prev_Ptr        defl    Heap_Ptr
  42++E195             >
  42++E195             >mirror_Ptr      defl    $
  42++E195             >
  42++E195 A6 23       >                dw      Dict_Ptr + 2        // xt
  42++E197             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E197             >
  42++E197             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E197             >
  42++E197             >//              ______________________________________________________________________
  42++E197             >//              Dictionary part
  42++E197             >
  42++E197             >                org     Dict_Ptr
  42++23A4             >
  42++23A4 95 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++23A6             >
  42++23A6             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++23A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++23A6 ~           >
  42++23A6 ~           >
  42++23A6             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++23A6             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++23A6             >
  42++23A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++23A6
  44++23A6 E1                           pop     hl
  45++23A7 7D                           ld      a, l                // file-handle
  46++23A8 DD E5                        push    ix
  47++23AA D5                           push    de
  48++23AB C5                           push    bc                  // Save Instruction pointer
  49++23AC F3                           di
  50++23AD CF                           rst     $08
  51++23AE 9B                           db      $9B
  52++23AF 18 E9                        jr      F_Seek_Exit
  53++23B1              //              ei
  54++23B1              //              pop     de
  55++23B1              //              pop     bc
  56++23B1              //              pop     ix
  57++23B1              //              sbc     hl, hl
  58++23B1              //              psh1
  59++23B1
  60++23B1              //  ______________________________________________________________________
  61++23B1              //
  62++23B1              // f_sync      u -- f
  63++23B1              // Close file-handle u.
  64++23B1              // Return 0 on success, True flag on error
  65++23B1
  66++23B1                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++23B1             >
  66++23B1             >Dict_Ptr        defl    $
  66++23B1             >
  66++23B1             >//              ______________________________________________________________________
  66++23B1             >//              Heap part
  66++23B1             >
  66++23B1             >
  66++23B1             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E197             >
  66++E197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E197             >Latest_Definition defl  Heap_Ptr
  66++E197             >
  66++E197             >                // dummy db directives used to calculate length of namec
  66++E197 46 5F 53 59 >                db      "F_SYNC"
  66++E19B 4E 43       >
  66++E19D             >len_NFA         defl    $ - temp_NFA
  66++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E197             >
  66++E197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E198 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19C 4E 43       >
  66++E19E             >                org     $-1                 // alter last byte of Name just above to set
  66++E19D C3          >                db      {b $} | END_BIT     // msb as name end
  66++E19E             >
  66++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A0             >Prev_Ptr        defl    Heap_Ptr
  66++E1A0             >
  66++E1A0             >mirror_Ptr      defl    $
  66++E1A0             >
  66++E1A0 B3 23       >                dw      Dict_Ptr + 2        // xt
  66++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A2             >
  66++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A2             >
  66++E1A2             >//              ______________________________________________________________________
  66++E1A2             >//              Dictionary part
  66++E1A2             >
  66++E1A2             >                org     Dict_Ptr
  66++23B1             >
  66++23B1 A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++23B3             >
  66++23B3             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++23B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++23B3 ~           >
  66++23B3 ~           >
  66++23B3             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++23B3             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++23B3             >
  66++23B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++23B3 E1                           pop     hl
  68++23B4 7D                           ld      a, l                // file-handle
  69++23B5 DD E5                        push    ix
  70++23B7 D5                           push    de
  71++23B8 C5                           push    bc
  72++23B9 F3                           di
  73++23BA CF                           rst     $08
  74++23BB 9C                           db      $9C
  75++23BC 18 DC                        jr      F_Seek_Exit
  76++23BE              //              ei
  77++23BE              //              pop     de
  78++23BE              //              pop     bc
  79++23BE              //              pop     ix
  80++23BE              //              sbc     hl, hl
  81++23BE              //              psh1
  82++23BE
  83++23BE              //  ______________________________________________________________________
  84++23BE              //
  85++23BE              // f_fgetpos    u -- d f
  86++23BE              // Seek to position d in file-handle u.
  87++23BE              // Return a false-flag 0 on success, True flag on error
  88++23BE                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++23BE             >
  88++23BE             >Dict_Ptr        defl    $
  88++23BE             >
  88++23BE             >//              ______________________________________________________________________
  88++23BE             >//              Heap part
  88++23BE             >
  88++23BE             >
  88++23BE             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A2             >
  88++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A2             >Latest_Definition defl  Heap_Ptr
  88++E1A2             >
  88++E1A2             >                // dummy db directives used to calculate length of namec
  88++E1A2 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A6 45 54 50 4F >
  88++E1AA 53          >
  88++E1AB             >len_NFA         defl    $ - temp_NFA
  88++E1AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A2             >
  88++E1A2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A3 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1A7 45 54 50 4F >
  88++E1AB 53          >
  88++E1AC             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AB D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AC             >
  88++E1AC 97 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1AE             >Prev_Ptr        defl    Heap_Ptr
  88++E1AE             >
  88++E1AE             >mirror_Ptr      defl    $
  88++E1AE             >
  88++E1AE C0 23       >                dw      Dict_Ptr + 2        // xt
  88++E1B0             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B0             >
  88++E1B0             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B0             >
  88++E1B0             >//              ______________________________________________________________________
  88++E1B0             >//              Dictionary part
  88++E1B0             >
  88++E1B0             >                org     Dict_Ptr
  88++23BE             >
  88++23BE AE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++23C0             >
  88++23C0             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++23C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++23C0 ~           >
  88++23C0 ~           >
  88++23C0             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++23C0             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++23C0             >
  88++23C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++23C0 E1                            pop     hl
  90++23C1 7D                            ld      a, l                // file-handle
  91++23C2 DD E5                         push    ix
  92++23C4 D5                            push    de
  93++23C5 C5                            push    bc
  94++23C6 F3                            di
  95++23C7 CF                            rst     $08
  96++23C8 A0                            db      $A0
  97++23C9 FB                            ei
  98++23CA D9                           exx
  99++23CB C1                           pop     bc                  // IP
 100++23CC D1                           pop     de                  // Return Stack Pointer
 101++23CD DD E1                        pop     ix
 102++23CF D9                            exx
 103++23D0 D5                            push    de
 104++23D1 C5                            push    bc
 105++23D2 ED 62                         sbc     hl, hl
 106++23D4 E5                            push    hl
 107++23D5 D9                           exx
 108++23D6                              next
 108++23D6 DD E9       >                jp      (ix)
 109++23D8
 110++23D8              //  ______________________________________________________________________
 111++23D8              //
 112++23D8              // f_read       a n u -- n f
 113++23D8              // Read b bytes from file-handle u to address a
 114++23D8              // Return the actual number n of bytes read
 115++23D8              // Return 0 on success, True flag on error
 116++23D8                              New_Def F_READ, "F_READ", is_code, is_normal
 116++23D8             >
 116++23D8             >Dict_Ptr        defl    $
 116++23D8             >
 116++23D8             >//              ______________________________________________________________________
 116++23D8             >//              Heap part
 116++23D8             >
 116++23D8             >
 116++23D8             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B0             >
 116++E1B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B0             >Latest_Definition defl  Heap_Ptr
 116++E1B0             >
 116++E1B0             >                // dummy db directives used to calculate length of namec
 116++E1B0 46 5F 52 45 >                db      "F_READ"
 116++E1B4 41 44       >
 116++E1B6             >len_NFA         defl    $ - temp_NFA
 116++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B0             >
 116++E1B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B1 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B5 41 44       >
 116++E1B7             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B6 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1B7             >
 116++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1B9             >Prev_Ptr        defl    Heap_Ptr
 116++E1B9             >
 116++E1B9             >mirror_Ptr      defl    $
 116++E1B9             >
 116++E1B9 DA 23       >                dw      Dict_Ptr + 2        // xt
 116++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BB             >
 116++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BB             >
 116++E1BB             >//              ______________________________________________________________________
 116++E1BB             >//              Dictionary part
 116++E1BB             >
 116++E1BB             >                org     Dict_Ptr
 116++23D8             >
 116++23D8 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++23DA             >
 116++23DA             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++23DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++23DA ~           >
 116++23DA ~           >
 116++23DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++23DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++23DA             >
 116++23DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++23DA D9                            exx
 118++23DB E1                            pop     hl
 119++23DC 7D                            ld      a, l                // file-handle
 120++23DD C1                            pop     bc                  // bc has bytes to read
 121++23DE DD E3                         ex      (sp), ix            // ix has address
 122++23E0 DD E5                         push    ix
 123++23E2 E1                            pop     hl
 124++23E3 D9                           exx
 125++23E4 D5                           push    de                  // Save Return Stack pointer
 126++23E5 C5                           push    bc                  // Save Instruction pointer
 127++23E6 D9                            exx
 128++23E7 F3                            di
 129++23E8 CF                            rst     $08
 130++23E9 9D                            db      $9D
 131++23EA              F_Read_Exit:
 132++23EA FB                           ei
 133++23EB D9                           exx
 134++23EC C1                           pop     bc                  // Restore Instruction pointer
 135++23ED D1                           pop     de                  // Restore Return Stack pointer
 136++23EE DD E1                        pop     ix                  // Restore ix
 137++23F0 D9                            exx
 138++23F1 D5                            push    de                  // bytes involved in i/o operation
 139++23F2 ED 62                         sbc     hl, hl
 140++23F4 E5                            push    hl
 141++23F5 D9                           exx
 142++23F6                              next
 142++23F6 DD E9       >                jp      (ix)
 143++23F8
 144++23F8              //  ______________________________________________________________________
 145++23F8              //
 146++23F8              // f_write      a n u -- n f
 147++23F8              // Write bytes currently stored at address a to file-handle u.
 148++23F8              // Return the actual n bytes written and 0 on success, True flag on error.
 149++23F8                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 149++23F8             >
 149++23F8             >Dict_Ptr        defl    $
 149++23F8             >
 149++23F8             >//              ______________________________________________________________________
 149++23F8             >//              Heap part
 149++23F8             >
 149++23F8             >
 149++23F8             >                org     (Heap_Ptr & $1FFF) + $E000
 149++E1BB             >
 149++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149++E1BB             >Latest_Definition defl  Heap_Ptr
 149++E1BB             >
 149++E1BB             >                // dummy db directives used to calculate length of namec
 149++E1BB 46 5F 57 52 >                db      "F_WRITE"
 149++E1BF 49 54 45    >
 149++E1C2             >len_NFA         defl    $ - temp_NFA
 149++E1C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149++E1BB             >
 149++E1BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149++E1BC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 149++E1C0 49 54 45    >
 149++E1C3             >                org     $-1                 // alter last byte of Name just above to set
 149++E1C2 C5          >                db      {b $} | END_BIT     // msb as name end
 149++E1C3             >
 149++E1C3 B0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 149++E1C5             >Prev_Ptr        defl    Heap_Ptr
 149++E1C5             >
 149++E1C5             >mirror_Ptr      defl    $
 149++E1C5             >
 149++E1C5 FA 23       >                dw      Dict_Ptr + 2        // xt
 149++E1C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 149++E1C7             >
 149++E1C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 149++E1C7             >
 149++E1C7             >//              ______________________________________________________________________
 149++E1C7             >//              Dictionary part
 149++E1C7             >
 149++E1C7             >                org     Dict_Ptr
 149++23F8             >
 149++23F8 C5 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 149++23FA             >
 149++23FA             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 149++23FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 149++23FA ~           >
 149++23FA ~           >
 149++23FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 149++23FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 149++23FA             >
 149++23FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150++23FA D9                            exx
 151++23FB E1                            pop     hl
 152++23FC 7D                            ld      a, l                // file-handle
 153++23FD C1                            pop     bc                  // bc has bytes to read
 154++23FE DD E3                         ex      (sp), ix            // ix has address
 155++2400 DD E5                         push    ix
 156++2402 E1                            pop     hl
 157++2403 D9                           exx
 158++2404 D5                           push    de                  // Save Return Stack pointer
 159++2405 C5                           push    bc                  // Save Instruction pointer
 160++2406 D9                            exx
 161++2407 F3                            di
 162++2408 CF                            rst     $08
 163++2409 9E                            db      $9E
 164++240A 18 DE                         jr F_Read_Exit
 165++240C              //                ei
 166++240C              //                exx
 167++240C              //                pop     de                  // Restore Return Stack pointer
 168++240C              //                pop     bc                  // Restore Instruction pointer
 169++240C              //                pop     ix                  // Restore ix
 170++240C              //                 exx
 171++240C              //                 push    de                  // bytes involved in i/o operation
 172++240C              //                 sbc     hl, hl
 173++240C              //                 push    hl
 174++240C              //                exx
 175++240C              //                next
 176++240C
 177++240C              //  ______________________________________________________________________
 178++240C              //
 179++240C              // f_open       a1 a2 b -- u f
 180++240C              // open a file
 181++240C              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 182++240C              // a2 is address to an 8-byte header data used in some cases.
 183++240C              // b is access mode-byte, that is a combination of:
 184++240C              // any/all of:
 185++240C              //   esx_mode_read          $01 request read access
 186++240C              //   esx_mode_write         $02 request write access
 187++240C              //   esx_mode_use_header    $40 read/write +3DOS header
 188++240C              // plus one of:
 189++240C              //   esx_mode_open_exist    $00 only open existing file
 190++240C              //   esx_mode_open_creat    $08 open existing or create file
 191++240C              //   esx_mode_creat_noexist $04 create new file, error if exists
 192++240C              //   esx_mode_creat_trunc   $0c create new file, delete existing
 193++240C              // Return file-handle u and 0 on success, True flag on error
 194++240C                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 194++240C             >
 194++240C             >Dict_Ptr        defl    $
 194++240C             >
 194++240C             >//              ______________________________________________________________________
 194++240C             >//              Heap part
 194++240C             >
 194++240C             >
 194++240C             >                org     (Heap_Ptr & $1FFF) + $E000
 194++E1C7             >
 194++E1C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194++E1C7             >Latest_Definition defl  Heap_Ptr
 194++E1C7             >
 194++E1C7             >                // dummy db directives used to calculate length of namec
 194++E1C7 46 5F 4F 50 >                db      "F_OPEN"
 194++E1CB 45 4E       >
 194++E1CD             >len_NFA         defl    $ - temp_NFA
 194++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194++E1C7             >
 194++E1C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194++E1C8 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 194++E1CC 45 4E       >
 194++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 194++E1CD CE          >                db      {b $} | END_BIT     // msb as name end
 194++E1CE             >
 194++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 194++E1D0             >Prev_Ptr        defl    Heap_Ptr
 194++E1D0             >
 194++E1D0             >mirror_Ptr      defl    $
 194++E1D0             >
 194++E1D0 0E 24       >                dw      Dict_Ptr + 2        // xt
 194++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 194++E1D2             >
 194++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 194++E1D2             >
 194++E1D2             >//              ______________________________________________________________________
 194++E1D2             >//              Dictionary part
 194++E1D2             >
 194++E1D2             >                org     Dict_Ptr
 194++240C             >
 194++240C D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 194++240E             >
 194++240E             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 194++240E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 194++240E ~           >
 194++240E ~           >
 194++240E             >                endif           ; ok        // for other definitions it "points" the correct handler
 194++240E             >                // Use of "; ok" to suppress "warning[fwdref]"
 194++240E             >
 194++240E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195++240E D9                            exx
 196++240F C1                            pop     bc                  // file-mode
 197++2410 41                            ld      b, c                // file-mode
 198++2411 D1                            pop     de                  // 8-bytes buffer if any
 199++2412 DD E3                         ex      (sp), ix            // filespec nul-terminated
 200++2414 DD E5                         push    ix
 201++2416 E1                            pop     hl
 202++2417 D9                           exx
 203++2418 D5                           push    de                  // Save Return Stack pointer
 204++2419 C5                           push    bc                  // Save Instruction pointer
 205++241A D9                            exx
 206++241B 3E 2A                         ld      a, "*"
 207++241D F3                            di
 208++241E CF                            rst     $08
 209++241F 9A                            db      $9A
 210++2420              F_Open_Exit:
 211++2420 FB                            ei
 212++2421 5F                            ld      e, a                // return the handle-number
 213++2422 16 00                         ld      d, 0
 214++2424 18 C4                        jr F_Read_Exit
 215++2426
 216++2426              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 217++2426              //   \ FILENAME 1+ PAD 1 F_OPEN
 218++2426              //   \ DROP
 219++2426              //   \ F_CLOSE
 220++2426
 221++2426
 222++2426              //  ______________________________________________________________________
 223++2426              //
 224++2426              // f_opendir    a1 -- u f
 225++2426              // open a file
 226++2426                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 226++2426             >
 226++2426             >Dict_Ptr        defl    $
 226++2426             >
 226++2426             >//              ______________________________________________________________________
 226++2426             >//              Heap part
 226++2426             >
 226++2426             >
 226++2426             >                org     (Heap_Ptr & $1FFF) + $E000
 226++E1D2             >
 226++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226++E1D2             >Latest_Definition defl  Heap_Ptr
 226++E1D2             >
 226++E1D2             >                // dummy db directives used to calculate length of namec
 226++E1D2 46 5F 4F 50 >                db      "F_OPENDIR"
 226++E1D6 45 4E 44 49 >
 226++E1DA 52          >
 226++E1DB             >len_NFA         defl    $ - temp_NFA
 226++E1DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226++E1D2             >
 226++E1D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 226++E1D7 45 4E 44 49 >
 226++E1DB 52          >
 226++E1DC             >                org     $-1                 // alter last byte of Name just above to set
 226++E1DB D2          >                db      {b $} | END_BIT     // msb as name end
 226++E1DC             >
 226++E1DC C7 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 226++E1DE             >Prev_Ptr        defl    Heap_Ptr
 226++E1DE             >
 226++E1DE             >mirror_Ptr      defl    $
 226++E1DE             >
 226++E1DE 28 24       >                dw      Dict_Ptr + 2        // xt
 226++E1E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 226++E1E0             >
 226++E1E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 226++E1E0             >
 226++E1E0             >//              ______________________________________________________________________
 226++E1E0             >//              Dictionary part
 226++E1E0             >
 226++E1E0             >                org     Dict_Ptr
 226++2426             >
 226++2426 DE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 226++2428             >
 226++2428             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226++2428 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226++2428 ~           >
 226++2428 ~           >
 226++2428             >                endif           ; ok        // for other definitions it "points" the correct handler
 226++2428             >                // Use of "; ok" to suppress "warning[fwdref]"
 226++2428             >
 226++2428             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227++2428 DD E3                        ex      (sp), ix            // filespec nul-terminated
 228++242A DD E5                        push    ix
 229++242C E1                           pop     hl
 230++242D D5                           push    de                  // Save Return Stack pointer
 231++242E C5                           push    bc                  // Save Instruction pointer
 232++242F 06 10                        ld      b, $10              // file-mode
 233++2431 3E 43                        ld      a, "C"
 234++2433 F3                           di
 235++2434 CF                           rst     $08
 236++2435 A3                           db      $A3
 237++2436 18 E8                        jr      F_Open_Exit
 238++2438
 239++2438
 240++2438              //  ______________________________________________________________________
 241++2438              //
 242++2438              // f_readdir    a1 a2 b -- u f
 243++2438              // open a file
 244++2438                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 244++2438             >
 244++2438             >Dict_Ptr        defl    $
 244++2438             >
 244++2438             >//              ______________________________________________________________________
 244++2438             >//              Heap part
 244++2438             >
 244++2438             >
 244++2438             >                org     (Heap_Ptr & $1FFF) + $E000
 244++E1E0             >
 244++E1E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 244++E1E0             >Latest_Definition defl  Heap_Ptr
 244++E1E0             >
 244++E1E0             >                // dummy db directives used to calculate length of namec
 244++E1E0 46 5F 52 45 >                db      "F_READDIR"
 244++E1E4 41 44 44 49 >
 244++E1E8 52          >
 244++E1E9             >len_NFA         defl    $ - temp_NFA
 244++E1E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 244++E1E0             >
 244++E1E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 244++E1E1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 244++E1E5 41 44 44 49 >
 244++E1E9 52          >
 244++E1EA             >                org     $-1                 // alter last byte of Name just above to set
 244++E1E9 D2          >                db      {b $} | END_BIT     // msb as name end
 244++E1EA             >
 244++E1EA D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 244++E1EC             >Prev_Ptr        defl    Heap_Ptr
 244++E1EC             >
 244++E1EC             >mirror_Ptr      defl    $
 244++E1EC             >
 244++E1EC 3A 24       >                dw      Dict_Ptr + 2        // xt
 244++E1EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 244++E1EE             >
 244++E1EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 244++E1EE             >
 244++E1EE             >//              ______________________________________________________________________
 244++E1EE             >//              Dictionary part
 244++E1EE             >
 244++E1EE             >                org     Dict_Ptr
 244++2438             >
 244++2438 EC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 244++243A             >
 244++243A             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 244++243A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 244++243A ~           >
 244++243A ~           >
 244++243A             >                endif           ; ok        // for other definitions it "points" the correct handler
 244++243A             >                // Use of "; ok" to suppress "warning[fwdref]"
 244++243A             >
 244++243A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 245++243A D9                            exx
 246++243B E1                            pop     hl
 247++243C 7D                            ld      a, l
 248++243D D1                            pop     de
 249++243E DD E3                         ex      (sp), ix            // filespec nul-terminated
 250++2440 DD E5                         push    ix
 251++2442 E1                            pop     hl
 252++2443 D9                           exx
 253++2444 D5                           push    de                  // Save Return Stack pointer
 254++2445 C5                           push    bc                  // Save Instruction pointer
 255++2446 D9                            exx
 256++2447 F3                            di
 257++2448 CF                            rst     $08
 258++2449 A4                            db      $A4
 259++244A 18 D4                         jr      F_Open_Exit
 260++244C
 261++244C
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt0.asm
1099+ 244C
1100+ 244C
1101+ 244C              //  ______________________________________________________________________
1102+ 244C              //
1103+ 244C              // cmove    a1 a2 u --
1104+ 244C              // If u > 0, moves memory content starting at address a1 for n bytes long
1105+ 244C              // storing then starting at address addr2.
1106+ 244C              // The content of a1 is moved first. See CMOVE> also.
1107+ 244C                              New_Def CMOVE, "CMOVE", is_code, is_normal
1107+ 244C             >
1107+ 244C             >Dict_Ptr        defl    $
1107+ 244C             >
1107+ 244C             >//              ______________________________________________________________________
1107+ 244C             >//              Heap part
1107+ 244C             >
1107+ 244C             >
1107+ 244C             >                org     (Heap_Ptr & $1FFF) + $E000
1107+ E1EE             >
1107+ E1EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ E1EE             >Latest_Definition defl  Heap_Ptr
1107+ E1EE             >
1107+ E1EE             >                // dummy db directives used to calculate length of namec
1107+ E1EE 43 4D 4F 56 >                db      "CMOVE"
1107+ E1F2 45          >
1107+ E1F3             >len_NFA         defl    $ - temp_NFA
1107+ E1F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ E1EE             >
1107+ E1EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ E1EF 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1107+ E1F3 45          >
1107+ E1F4             >                org     $-1                 // alter last byte of Name just above to set
1107+ E1F3 C5          >                db      {b $} | END_BIT     // msb as name end
1107+ E1F4             >
1107+ E1F4 E0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1107+ E1F6             >Prev_Ptr        defl    Heap_Ptr
1107+ E1F6             >
1107+ E1F6             >mirror_Ptr      defl    $
1107+ E1F6             >
1107+ E1F6 4E 24       >                dw      Dict_Ptr + 2        // xt
1107+ E1F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1107+ E1F8             >
1107+ E1F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1107+ E1F8             >
1107+ E1F8             >//              ______________________________________________________________________
1107+ E1F8             >//              Dictionary part
1107+ E1F8             >
1107+ E1F8             >                org     Dict_Ptr
1107+ 244C             >
1107+ 244C F6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1107+ 244E             >
1107+ 244E             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 244E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1107+ 244E ~           >
1107+ 244E ~           >
1107+ 244E             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 244E             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 244E             >
1107+ 244E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 244E D9                           exx
1109+ 244F
1110+ 244F C1                           pop     bc                  // bc has counter
1111+ 2450 D1                           pop     de                  // de now has dest
1112+ 2451 E1                           pop     hl                 // hl has source, save Instruction Pointer
1113+ 2452 78                           ld      a, b
1114+ 2453 B1                           or      c
1115+ 2454 28 02                        jr      z, Cmove_NoMove
1116+ 2456 ED B0                            ldir
1117+ 2458              Cmove_NoMove:
1118+ 2458 D9                           exx
1119+ 2459
1120+ 2459                              next
1120+ 2459 DD E9       >                jp      (ix)
1121+ 245B
1122+ 245B              //  ______________________________________________________________________
1123+ 245B              //
1124+ 245B              // cmove>    a1 a2 u --
1125+ 245B              // If u > 0, moves memory content starting at address a1 for n bytes long
1126+ 245B              // storing then starting at address addr2.
1127+ 245B              // The content of a1 is moved last. See cmove.
1128+ 245B                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1128+ 245B             >
1128+ 245B             >Dict_Ptr        defl    $
1128+ 245B             >
1128+ 245B             >//              ______________________________________________________________________
1128+ 245B             >//              Heap part
1128+ 245B             >
1128+ 245B             >
1128+ 245B             >                org     (Heap_Ptr & $1FFF) + $E000
1128+ E1F8             >
1128+ E1F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1128+ E1F8             >Latest_Definition defl  Heap_Ptr
1128+ E1F8             >
1128+ E1F8             >                // dummy db directives used to calculate length of namec
1128+ E1F8 43 4D 4F 56 >                db      "CMOVE>"
1128+ E1FC 45 3E       >
1128+ E1FE             >len_NFA         defl    $ - temp_NFA
1128+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1128+ E1F8             >
1128+ E1F8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1128+ E1F9 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1128+ E1FD 45 3E       >
1128+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1128+ E1FE BE          >                db      {b $} | END_BIT     // msb as name end
1128+ E1FF             >
1128+ E1FF EE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1128+ E201             >Prev_Ptr        defl    Heap_Ptr
1128+ E201             >
1128+ E201             >mirror_Ptr      defl    $
1128+ E201             >
1128+ E201 5D 24       >                dw      Dict_Ptr + 2        // xt
1128+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1128+ E203             >
1128+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1128+ E203             >
1128+ E203             >//              ______________________________________________________________________
1128+ E203             >//              Dictionary part
1128+ E203             >
1128+ E203             >                org     Dict_Ptr
1128+ 245B             >
1128+ 245B 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1128+ 245D             >
1128+ 245D             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1128+ 245D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1128+ 245D ~           >
1128+ 245D ~           >
1128+ 245D             >                endif           ; ok        // for other definitions it "points" the correct handler
1128+ 245D             >                // Use of "; ok" to suppress "warning[fwdref]"
1128+ 245D             >
1128+ 245D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1129+ 245D D9                           exx
1130+ 245E
1131+ 245E C1                           pop     bc                  // bc has counter
1132+ 245F D1                           pop     de                  // de has dest
1133+ 2460 E1                           pop     hl                  // hl has source, save Instruction Pointer
1134+ 2461 78                           ld      a, b
1135+ 2462 B1                           or      c
1136+ 2463 28 08                        jr      z, CmoveV_NoMove
1137+ 2465 EB                               ex      de, hl              // compute address to
1138+ 2466 09                               add     hl, bc              // operate backward
1139+ 2467 2B                               dec     hl
1140+ 2468 EB                               ex      de, hl
1141+ 2469 09                               add     hl, bc
1142+ 246A 2B                               dec     hl
1143+ 246B ED B8                            lddr                        // backward
1144+ 246D              CmoveV_NoMove:
1145+ 246D D9                           exx
1146+ 246E
1147+ 246E                              next
1147+ 246E DD E9       >                jp      (ix)
1148+ 2470
1149+ 2470              //  ______________________________________________________________________
1150+ 2470              //
1151+ 2470              // um*      u1 u2 -- ud
1152+ 2470              // Unsigned multiplication
1153+ 2470              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1154+ 2470              // On the stack a double number is treated as two single numbers
1155+ 2470              // where DE is on the top of the stack and HL is the second from top,
1156+ 2470              // Instead, in 2VARIABLE a double number is stored as EDLH.
1157+ 2470              // this definition could use "MUL" Z80N new op-code.
1158+ 2470                              New_Def UM_MUL, "UM*", is_code, is_normal
1158+ 2470             >
1158+ 2470             >Dict_Ptr        defl    $
1158+ 2470             >
1158+ 2470             >//              ______________________________________________________________________
1158+ 2470             >//              Heap part
1158+ 2470             >
1158+ 2470             >
1158+ 2470             >                org     (Heap_Ptr & $1FFF) + $E000
1158+ E203             >
1158+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ E203             >Latest_Definition defl  Heap_Ptr
1158+ E203             >
1158+ E203             >                // dummy db directives used to calculate length of namec
1158+ E203 55 4D 2A    >                db      "UM*"
1158+ E206             >len_NFA         defl    $ - temp_NFA
1158+ E206             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ E203             >
1158+ E203 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ E204 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1158+ E207             >                org     $-1                 // alter last byte of Name just above to set
1158+ E206 AA          >                db      {b $} | END_BIT     // msb as name end
1158+ E207             >
1158+ E207 F8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1158+ E209             >Prev_Ptr        defl    Heap_Ptr
1158+ E209             >
1158+ E209             >mirror_Ptr      defl    $
1158+ E209             >
1158+ E209 72 24       >                dw      Dict_Ptr + 2        // xt
1158+ E20B             >Heap_Ptr        defl    $ - $E000           // save current HP
1158+ E20B             >
1158+ E20B             >Current_HP      defl  $ - $E000             // used to set HP once!
1158+ E20B             >
1158+ E20B             >//              ______________________________________________________________________
1158+ E20B             >//              Dictionary part
1158+ E20B             >
1158+ E20B             >                org     Dict_Ptr
1158+ 2470             >
1158+ 2470 09 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1158+ 2472             >
1158+ 2472             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 2472 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1158+ 2472 ~           >
1158+ 2472 ~           >
1158+ 2472             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 2472             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 2472             >
1158+ 2472             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 2472 D9                           exx
1160+ 2473 D1                           pop     de                    // de has u2 operand
1161+ 2474 E1                           pop     hl                    // hl has u1 operand
1162+ 2475 45                           ld      b, l
1163+ 2476 4B                           ld      c, e
1164+ 2477 5D                           ld      e, l
1165+ 2478 6A                           ld      l, d
1166+ 2479 E5                           push    hl
1167+ 247A 69                           ld      l, c
1168+ 247B ED 30                        mul
1169+ 247D EB                           ex      de, hl
1170+ 247E ED 30                        mul
1171+ 2480 AF                           xor     a
1172+ 2481 19                           add     hl, de
1173+ 2482 8F                           adc     a
1174+ 2483 59                           ld      e, c
1175+ 2484 50                           ld      d, b
1176+ 2485 ED 30                        mul
1177+ 2487 47                           ld      b, a
1178+ 2488 4C                           ld      c, h
1179+ 2489 7A                           ld      a, d
1180+ 248A 85                           add     l
1181+ 248B 67                           ld      h, a
1182+ 248C 6B                           ld      l, e
1183+ 248D D1                           pop     de
1184+ 248E ED 30                        mul
1185+ 2490 EB                           ex      de, hl
1186+ 2491 ED 4A                        adc     hl, bc
1187+ 2493 D5                           push    de
1188+ 2494 E5                           push    hl
1189+ 2495 D9                           exx
1190+ 2496                              next
1190+ 2496 DD E9       >                jp      (ix)
1191+ 2498
1192+ 2498              //  ______________________________________________________________________
1193+ 2498              //
1194+ 2498              // um/mod      ud u1 -- q r
1195+ 2498              // divides ud into u1 giving quotient q and remainder r
1196+ 2498              // algorithm takes 16 bit at a time starting from msb
1197+ 2498              // DE grows from lsb upward with quotient result
1198+ 2498              // HL keeps the remainder at each stage of division
1199+ 2498              // each loop 'lowers' the next binary digit to form the current dividend
1200+ 2498                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1200+ 2498             >
1200+ 2498             >Dict_Ptr        defl    $
1200+ 2498             >
1200+ 2498             >//              ______________________________________________________________________
1200+ 2498             >//              Heap part
1200+ 2498             >
1200+ 2498             >
1200+ 2498             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E20B             >
1200+ E20B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E20B             >Latest_Definition defl  Heap_Ptr
1200+ E20B             >
1200+ E20B             >                // dummy db directives used to calculate length of namec
1200+ E20B 55 4D 2F 4D >                db      "UM/MOD"
1200+ E20F 4F 44       >
1200+ E211             >len_NFA         defl    $ - temp_NFA
1200+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E20B             >
1200+ E20B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E20C 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1200+ E210 4F 44       >
1200+ E212             >                org     $-1                 // alter last byte of Name just above to set
1200+ E211 C4          >                db      {b $} | END_BIT     // msb as name end
1200+ E212             >
1200+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E214             >Prev_Ptr        defl    Heap_Ptr
1200+ E214             >
1200+ E214             >mirror_Ptr      defl    $
1200+ E214             >
1200+ E214 9A 24       >                dw      Dict_Ptr + 2        // xt
1200+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E216             >
1200+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E216             >
1200+ E216             >//              ______________________________________________________________________
1200+ E216             >//              Dictionary part
1200+ E216             >
1200+ E216             >                org     Dict_Ptr
1200+ 2498             >
1200+ 2498 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 249A             >
1200+ 249A             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 249A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1200+ 249A ~           >
1200+ 249A ~           >
1200+ 249A             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 249A             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 249A             >
1200+ 249A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 249A D9                           exx
1202+ 249B C1                           pop     bc                      // divisor
1203+ 249C
1204+ 249C E1                           pop     hl                      // < high part
1205+ 249D D1                           pop     de                      // < low part and
1206+ 249E
1207+ 249E 7D                           ld      a, l                    // check without changing arguments
1208+ 249F 91                           sub     c                       // if divisor is greater than high part
1209+ 24A0 7C                           ld      a, h                    // so quotient will be in range
1210+ 24A1 98                           sbc     a, b
1211+ 24A2 30 20                        jr      nc, Um_DivMod_OutOfRange
1212+ 24A4 3E 10                            ld      a, 16
1213+ 24A6              Um_DivMod_Loop:
1214+ 24A6 CB 23                                sla     e
1215+ 24A8 CB 12                                rl      d
1216+ 24AA ED 6A                                adc     hl, hl
1217+ 24AC 30 05                                jr      nc, Um_DivMod_Carry
1218+ 24AE A7                                       and     a
1219+ 24AF ED 42                                    sbc     hl, bc
1220+ 24B1 18 07                                jr      Um_DivMod_Endif    // else
1221+ 24B3              Um_DivMod_Carry:
1222+ 24B3 A7                                       and     a
1223+ 24B4 ED 42                                    sbc     hl, bc
1224+ 24B6 30 02                                    jr      nc, Um_DivMod_Endif
1225+ 24B8 09                                           add     hl, bc
1226+ 24B9 1B                                           dec     de
1227+ 24BA              Um_DivMod_Endif:                                   // endif
1228+ 24BA 13                                   inc     de
1229+ 24BB 3D                                   dec     a
1230+ 24BC 20 E8                            jr      nz, Um_DivMod_Loop
1231+ 24BE EB                               ex      de, hl
1232+ 24BF              Um_DivMod_Bailout:
1233+ 24BF D5                               push    de                  // de := remanider
1234+ 24C0 E5                               push    hl                  // hl := quotient
1235+ 24C1 D9                               exx
1236+ 24C2                                  next
1236+ 24C2 DD E9       >                jp      (ix)
1237+ 24C4
1238+ 24C4              Um_DivMod_OutOfRange:
1239+ 24C4 21 FF FF                     ld      hl, -1
1240+ 24C7 54                           ld      d, h
1241+ 24C8 5D                           ld      e, l
1242+ 24C9 18 F4                        jr      Um_DivMod_Bailout
1243+ 24CB
1244+ 24CB              //  ______________________________________________________________________
1245+ 24CB              //
1246+ 24CB              // and          n1 n2 -- n3
1247+ 24CB              // bit logical AND. Returns n3 as n1 & n2
1248+ 24CB                              New_Def AND_OP, "AND", is_code, is_normal
1248+ 24CB             >
1248+ 24CB             >Dict_Ptr        defl    $
1248+ 24CB             >
1248+ 24CB             >//              ______________________________________________________________________
1248+ 24CB             >//              Heap part
1248+ 24CB             >
1248+ 24CB             >
1248+ 24CB             >                org     (Heap_Ptr & $1FFF) + $E000
1248+ E216             >
1248+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ E216             >Latest_Definition defl  Heap_Ptr
1248+ E216             >
1248+ E216             >                // dummy db directives used to calculate length of namec
1248+ E216 41 4E 44    >                db      "AND"
1248+ E219             >len_NFA         defl    $ - temp_NFA
1248+ E219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ E216             >
1248+ E216 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ E217 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1248+ E21A             >                org     $-1                 // alter last byte of Name just above to set
1248+ E219 C4          >                db      {b $} | END_BIT     // msb as name end
1248+ E21A             >
1248+ E21A 0B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1248+ E21C             >Prev_Ptr        defl    Heap_Ptr
1248+ E21C             >
1248+ E21C             >mirror_Ptr      defl    $
1248+ E21C             >
1248+ E21C CD 24       >                dw      Dict_Ptr + 2        // xt
1248+ E21E             >Heap_Ptr        defl    $ - $E000           // save current HP
1248+ E21E             >
1248+ E21E             >Current_HP      defl  $ - $E000             // used to set HP once!
1248+ E21E             >
1248+ E21E             >//              ______________________________________________________________________
1248+ E21E             >//              Dictionary part
1248+ E21E             >
1248+ E21E             >                org     Dict_Ptr
1248+ 24CB             >
1248+ 24CB 1C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1248+ 24CD             >
1248+ 24CD             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 24CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1248+ 24CD ~           >
1248+ 24CD ~           >
1248+ 24CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 24CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 24CD             >
1248+ 24CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 24CD D9                           exx
1250+ 24CE D1                           pop     de
1251+ 24CF E1                           pop     hl
1252+ 24D0 7B                           ld      a, e
1253+ 24D1 A5                           and     l
1254+ 24D2 6F                           ld      l, a
1255+ 24D3 7A                           ld      a, d
1256+ 24D4 A4                           and     h
1257+ 24D5              Boolean_exit:
1258+ 24D5 67                           ld      h, a
1259+ 24D6 E5                           push    hl
1260+ 24D7 D9                           exx
1261+ 24D8                              next
1261+ 24D8 DD E9       >                jp      (ix)
1262+ 24DA
1263+ 24DA              //  ______________________________________________________________________
1264+ 24DA              //
1265+ 24DA              // or           n1 n2 -- n3
1266+ 24DA              // bit logical OR. Returns n3 as n1 | n2
1267+ 24DA                              New_Def OR_OP, "OR", is_code, is_normal
1267+ 24DA             >
1267+ 24DA             >Dict_Ptr        defl    $
1267+ 24DA             >
1267+ 24DA             >//              ______________________________________________________________________
1267+ 24DA             >//              Heap part
1267+ 24DA             >
1267+ 24DA             >
1267+ 24DA             >                org     (Heap_Ptr & $1FFF) + $E000
1267+ E21E             >
1267+ E21E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1267+ E21E             >Latest_Definition defl  Heap_Ptr
1267+ E21E             >
1267+ E21E             >                // dummy db directives used to calculate length of namec
1267+ E21E 4F 52       >                db      "OR"
1267+ E220             >len_NFA         defl    $ - temp_NFA
1267+ E220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1267+ E21E             >
1267+ E21E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1267+ E21F 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1267+ E221             >                org     $-1                 // alter last byte of Name just above to set
1267+ E220 D2          >                db      {b $} | END_BIT     // msb as name end
1267+ E221             >
1267+ E221 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1267+ E223             >Prev_Ptr        defl    Heap_Ptr
1267+ E223             >
1267+ E223             >mirror_Ptr      defl    $
1267+ E223             >
1267+ E223 DC 24       >                dw      Dict_Ptr + 2        // xt
1267+ E225             >Heap_Ptr        defl    $ - $E000           // save current HP
1267+ E225             >
1267+ E225             >Current_HP      defl  $ - $E000             // used to set HP once!
1267+ E225             >
1267+ E225             >//              ______________________________________________________________________
1267+ E225             >//              Dictionary part
1267+ E225             >
1267+ E225             >                org     Dict_Ptr
1267+ 24DA             >
1267+ 24DA 23 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1267+ 24DC             >
1267+ 24DC             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1267+ 24DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1267+ 24DC ~           >
1267+ 24DC ~           >
1267+ 24DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1267+ 24DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1267+ 24DC             >
1267+ 24DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1268+ 24DC D9                           exx
1269+ 24DD D1                           pop     de
1270+ 24DE E1                           pop     hl
1271+ 24DF 7B                           ld      a, e
1272+ 24E0 B5                           or      l
1273+ 24E1 6F                           ld      l, a
1274+ 24E2 7A                           ld      a, d
1275+ 24E3 B4                           or      h
1276+ 24E4 18 EF                        jr      Boolean_exit
1277+ 24E6                        //    ld      h, a
1278+ 24E6                        //    push    hl
1279+ 24E6                        //    exx
1280+ 24E6                        //    next
1281+ 24E6
1282+ 24E6              //  ______________________________________________________________________
1283+ 24E6              //
1284+ 24E6              // xor          n1 n2 -- n3
1285+ 24E6              // bit logical OR. Returns n3 as n1 ^ n2
1286+ 24E6                              New_Def XOR_OP, "XOR", is_code, is_normal
1286+ 24E6             >
1286+ 24E6             >Dict_Ptr        defl    $
1286+ 24E6             >
1286+ 24E6             >//              ______________________________________________________________________
1286+ 24E6             >//              Heap part
1286+ 24E6             >
1286+ 24E6             >
1286+ 24E6             >                org     (Heap_Ptr & $1FFF) + $E000
1286+ E225             >
1286+ E225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ E225             >Latest_Definition defl  Heap_Ptr
1286+ E225             >
1286+ E225             >                // dummy db directives used to calculate length of namec
1286+ E225 58 4F 52    >                db      "XOR"
1286+ E228             >len_NFA         defl    $ - temp_NFA
1286+ E228             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ E225             >
1286+ E225 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ E226 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1286+ E229             >                org     $-1                 // alter last byte of Name just above to set
1286+ E228 D2          >                db      {b $} | END_BIT     // msb as name end
1286+ E229             >
1286+ E229 1E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1286+ E22B             >Prev_Ptr        defl    Heap_Ptr
1286+ E22B             >
1286+ E22B             >mirror_Ptr      defl    $
1286+ E22B             >
1286+ E22B E8 24       >                dw      Dict_Ptr + 2        // xt
1286+ E22D             >Heap_Ptr        defl    $ - $E000           // save current HP
1286+ E22D             >
1286+ E22D             >Current_HP      defl  $ - $E000             // used to set HP once!
1286+ E22D             >
1286+ E22D             >//              ______________________________________________________________________
1286+ E22D             >//              Dictionary part
1286+ E22D             >
1286+ E22D             >                org     Dict_Ptr
1286+ 24E6             >
1286+ 24E6 2B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1286+ 24E8             >
1286+ 24E8             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 24E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1286+ 24E8 ~           >
1286+ 24E8 ~           >
1286+ 24E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 24E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 24E8             >
1286+ 24E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 24E8 D9                           exx
1288+ 24E9 D1                           pop     de
1289+ 24EA E1                           pop     hl
1290+ 24EB 7B                           ld      a, e
1291+ 24EC AD                           xor     l
1292+ 24ED 6F                           ld      l, a
1293+ 24EE 7A                           ld      a, d
1294+ 24EF AC                           xor     h
1295+ 24F0 18 E3                        jr      Boolean_exit
1296+ 24F2                        //    ld      h, a
1297+ 24F2                        //    push    hl
1298+ 24F2                        //    exx
1299+ 24F2                        //    next
1300+ 24F2
1301+ 24F2              //  ______________________________________________________________________
1302+ 24F2              //
1303+ 24F2              // sp@      -- a
1304+ 24F2              // returns on top of stack the value of SP before execution
1305+ 24F2                              New_Def SPFETCH, "SP@", is_code, is_normal
1305+ 24F2             >
1305+ 24F2             >Dict_Ptr        defl    $
1305+ 24F2             >
1305+ 24F2             >//              ______________________________________________________________________
1305+ 24F2             >//              Heap part
1305+ 24F2             >
1305+ 24F2             >
1305+ 24F2             >                org     (Heap_Ptr & $1FFF) + $E000
1305+ E22D             >
1305+ E22D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ E22D             >Latest_Definition defl  Heap_Ptr
1305+ E22D             >
1305+ E22D             >                // dummy db directives used to calculate length of namec
1305+ E22D 53 50 40    >                db      "SP@"
1305+ E230             >len_NFA         defl    $ - temp_NFA
1305+ E230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ E22D             >
1305+ E22D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ E22E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1305+ E231             >                org     $-1                 // alter last byte of Name just above to set
1305+ E230 C0          >                db      {b $} | END_BIT     // msb as name end
1305+ E231             >
1305+ E231 25 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1305+ E233             >Prev_Ptr        defl    Heap_Ptr
1305+ E233             >
1305+ E233             >mirror_Ptr      defl    $
1305+ E233             >
1305+ E233 F4 24       >                dw      Dict_Ptr + 2        // xt
1305+ E235             >Heap_Ptr        defl    $ - $E000           // save current HP
1305+ E235             >
1305+ E235             >Current_HP      defl  $ - $E000             // used to set HP once!
1305+ E235             >
1305+ E235             >//              ______________________________________________________________________
1305+ E235             >//              Dictionary part
1305+ E235             >
1305+ E235             >                org     Dict_Ptr
1305+ 24F2             >
1305+ 24F2 33 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1305+ 24F4             >
1305+ 24F4             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 24F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1305+ 24F4 ~           >
1305+ 24F4 ~           >
1305+ 24F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 24F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 24F4             >
1305+ 24F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 24F4
1307+ 24F4 21 00 00                     ld      hl, 0
1308+ 24F7 39                           add     hl, sp
1309+ 24F8
1310+ 24F8                              psh1
1310+ 24F8 E5          >                push    hl
1310+ 24F9 DD E9       >                jp      (ix)
1311+ 24FB
1312+ 24FB              //  ______________________________________________________________________
1313+ 24FB              //
1314+ 24FB              // sp!      a --
1315+ 24FB              // restore SP to the initial value passed
1316+ 24FB              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1317+ 24FB                              New_Def SPSTORE, "SP!", is_code, is_normal
1317+ 24FB             >
1317+ 24FB             >Dict_Ptr        defl    $
1317+ 24FB             >
1317+ 24FB             >//              ______________________________________________________________________
1317+ 24FB             >//              Heap part
1317+ 24FB             >
1317+ 24FB             >
1317+ 24FB             >                org     (Heap_Ptr & $1FFF) + $E000
1317+ E235             >
1317+ E235             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1317+ E235             >Latest_Definition defl  Heap_Ptr
1317+ E235             >
1317+ E235             >                // dummy db directives used to calculate length of namec
1317+ E235 53 50 21    >                db      "SP!"
1317+ E238             >len_NFA         defl    $ - temp_NFA
1317+ E238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1317+ E235             >
1317+ E235 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1317+ E236 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1317+ E239             >                org     $-1                 // alter last byte of Name just above to set
1317+ E238 A1          >                db      {b $} | END_BIT     // msb as name end
1317+ E239             >
1317+ E239 2D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1317+ E23B             >Prev_Ptr        defl    Heap_Ptr
1317+ E23B             >
1317+ E23B             >mirror_Ptr      defl    $
1317+ E23B             >
1317+ E23B FD 24       >                dw      Dict_Ptr + 2        // xt
1317+ E23D             >Heap_Ptr        defl    $ - $E000           // save current HP
1317+ E23D             >
1317+ E23D             >Current_HP      defl  $ - $E000             // used to set HP once!
1317+ E23D             >
1317+ E23D             >//              ______________________________________________________________________
1317+ E23D             >//              Dictionary part
1317+ E23D             >
1317+ E23D             >                org     Dict_Ptr
1317+ 24FB             >
1317+ 24FB 3B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1317+ 24FD             >
1317+ 24FD             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1317+ 24FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1317+ 24FD ~           >
1317+ 24FD ~           >
1317+ 24FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1317+ 24FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1317+ 24FD             >
1317+ 24FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1318+ 24FD E1                           pop     hl
1319+ 24FE F9                           ld      sp, hl
1320+ 24FF
1321+ 24FF                              next
1321+ 24FF DD E9       >                jp      (ix)
1322+ 2501
1323+ 2501              //  ______________________________________________________________________
1324+ 2501              //
1325+ 2501              // rp@      -- a
1326+ 2501              // returns on top of stack the value of Return-Pointer
1327+ 2501                              New_Def RPFETCH, "RP@", is_code, is_normal
1327+ 2501             >
1327+ 2501             >Dict_Ptr        defl    $
1327+ 2501             >
1327+ 2501             >//              ______________________________________________________________________
1327+ 2501             >//              Heap part
1327+ 2501             >
1327+ 2501             >
1327+ 2501             >                org     (Heap_Ptr & $1FFF) + $E000
1327+ E23D             >
1327+ E23D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1327+ E23D             >Latest_Definition defl  Heap_Ptr
1327+ E23D             >
1327+ E23D             >                // dummy db directives used to calculate length of namec
1327+ E23D 52 50 40    >                db      "RP@"
1327+ E240             >len_NFA         defl    $ - temp_NFA
1327+ E240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1327+ E23D             >
1327+ E23D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1327+ E23E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1327+ E241             >                org     $-1                 // alter last byte of Name just above to set
1327+ E240 C0          >                db      {b $} | END_BIT     // msb as name end
1327+ E241             >
1327+ E241 35 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1327+ E243             >Prev_Ptr        defl    Heap_Ptr
1327+ E243             >
1327+ E243             >mirror_Ptr      defl    $
1327+ E243             >
1327+ E243 03 25       >                dw      Dict_Ptr + 2        // xt
1327+ E245             >Heap_Ptr        defl    $ - $E000           // save current HP
1327+ E245             >
1327+ E245             >Current_HP      defl  $ - $E000             // used to set HP once!
1327+ E245             >
1327+ E245             >//              ______________________________________________________________________
1327+ E245             >//              Dictionary part
1327+ E245             >
1327+ E245             >                org     Dict_Ptr
1327+ 2501             >
1327+ 2501 43 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1327+ 2503             >
1327+ 2503             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1327+ 2503 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1327+ 2503 ~           >
1327+ 2503 ~           >
1327+ 2503             >                endif           ; ok        // for other definitions it "points" the correct handler
1327+ 2503             >                // Use of "; ok" to suppress "warning[fwdref]"
1327+ 2503             >
1327+ 2503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1328+ 2503
1329+ 2503                              // *** ldhlrp
1330+ 2503                              // *** ex      de, hl
1331+ 2503 D5                           push de
1332+ 2504
1333+ 2504                              next
1333+ 2504 DD E9       >                jp      (ix)
1334+ 2506
1335+ 2506              //  ______________________________________________________________________
1336+ 2506              //
1337+ 2506              // rp!      a --
1338+ 2506              // restore RP to the initial value passed
1339+ 2506              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1340+ 2506                              New_Def RPSTORE, "RP!", is_code, is_normal
1340+ 2506             >
1340+ 2506             >Dict_Ptr        defl    $
1340+ 2506             >
1340+ 2506             >//              ______________________________________________________________________
1340+ 2506             >//              Heap part
1340+ 2506             >
1340+ 2506             >
1340+ 2506             >                org     (Heap_Ptr & $1FFF) + $E000
1340+ E245             >
1340+ E245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ E245             >Latest_Definition defl  Heap_Ptr
1340+ E245             >
1340+ E245             >                // dummy db directives used to calculate length of namec
1340+ E245 52 50 21    >                db      "RP!"
1340+ E248             >len_NFA         defl    $ - temp_NFA
1340+ E248             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ E245             >
1340+ E245 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ E246 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1340+ E249             >                org     $-1                 // alter last byte of Name just above to set
1340+ E248 A1          >                db      {b $} | END_BIT     // msb as name end
1340+ E249             >
1340+ E249 3D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1340+ E24B             >Prev_Ptr        defl    Heap_Ptr
1340+ E24B             >
1340+ E24B             >mirror_Ptr      defl    $
1340+ E24B             >
1340+ E24B 08 25       >                dw      Dict_Ptr + 2        // xt
1340+ E24D             >Heap_Ptr        defl    $ - $E000           // save current HP
1340+ E24D             >
1340+ E24D             >Current_HP      defl  $ - $E000             // used to set HP once!
1340+ E24D             >
1340+ E24D             >//              ______________________________________________________________________
1340+ E24D             >//              Dictionary part
1340+ E24D             >
1340+ E24D             >                org     Dict_Ptr
1340+ 2506             >
1340+ 2506 4B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1340+ 2508             >
1340+ 2508             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 2508 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 2508 ~           >
1340+ 2508 ~           >
1340+ 2508             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 2508             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 2508             >
1340+ 2508             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 2508 D1                           pop     de
1342+ 2509                              // *** ex      de, hl
1343+ 2509                              // *** ldrphl
1344+ 2509
1345+ 2509                              next
1345+ 2509 DD E9       >                jp      (ix)
1346+ 250B
1347+ 250B              //  ______________________________________________________________________
1348+ 250B              //
1349+ 250B              // exit       --
1350+ 250B              // exits back to the caller word
1351+ 250B                              New_Def EXIT, "EXIT", is_code, is_normal
1351+ 250B             >
1351+ 250B             >Dict_Ptr        defl    $
1351+ 250B             >
1351+ 250B             >//              ______________________________________________________________________
1351+ 250B             >//              Heap part
1351+ 250B             >
1351+ 250B             >
1351+ 250B             >                org     (Heap_Ptr & $1FFF) + $E000
1351+ E24D             >
1351+ E24D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1351+ E24D             >Latest_Definition defl  Heap_Ptr
1351+ E24D             >
1351+ E24D             >                // dummy db directives used to calculate length of namec
1351+ E24D 45 58 49 54 >                db      "EXIT"
1351+ E251             >len_NFA         defl    $ - temp_NFA
1351+ E251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1351+ E24D             >
1351+ E24D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1351+ E24E 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1351+ E252             >                org     $-1                 // alter last byte of Name just above to set
1351+ E251 D4          >                db      {b $} | END_BIT     // msb as name end
1351+ E252             >
1351+ E252 45 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1351+ E254             >Prev_Ptr        defl    Heap_Ptr
1351+ E254             >
1351+ E254             >mirror_Ptr      defl    $
1351+ E254             >
1351+ E254 0D 25       >                dw      Dict_Ptr + 2        // xt
1351+ E256             >Heap_Ptr        defl    $ - $E000           // save current HP
1351+ E256             >
1351+ E256             >Current_HP      defl  $ - $E000             // used to set HP once!
1351+ E256             >
1351+ E256             >//              ______________________________________________________________________
1351+ E256             >//              Dictionary part
1351+ E256             >
1351+ E256             >                org     Dict_Ptr
1351+ 250B             >
1351+ 250B 54 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1351+ 250D             >
1351+ 250D             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1351+ 250D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1351+ 250D ~           >
1351+ 250D ~           >
1351+ 250D             >                endif           ; ok        // for other definitions it "points" the correct handler
1351+ 250D             >                // Use of "; ok" to suppress "warning[fwdref]"
1351+ 250D             >
1351+ 250D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1352+ 250D EB                           ex      de, hl
1353+ 250E                              // *** ldhlrp                      // Get Return Stack Pointer
1354+ 250E 4E                           ld      c, (hl)             // pop Instruction Pointer
1355+ 250F 23                           inc     hl                  // from Return Stack
1356+ 2510 46                           ld      b, (hl)
1357+ 2511 23                           inc     hl
1358+ 2512                              // *** ldrphl                      // Set Return Stack Pointer
1359+ 2512 EB                           ex      de, hl
1360+ 2513                              next
1360+ 2513 DD E9       >                jp      (ix)
1361+ 2515
1362+ 2515              //  ______________________________________________________________________
1363+ 2515              //
1364+ 2515              // lastl      --
1365+ 2515              // exits back to the caller word
1366+ 2515              //              New_Def EXIT, "LASTL", is_code, is_normal
1367+ 2515              //              push    de
1368+ 2515              //              ex      de, hl //**
1369+ 2515              //              // *** ldhlrp                      // Get Return Stack Pointer
1370+ 2515              //              ld      e, (hl)             // pop Instruction Pointer
1371+ 2515              //              inc     hl                  // from Return Stack
1372+ 2515              //              ld      d, (hl)
1373+ 2515              //              inc     hl
1374+ 2515              //              ld      (hl), e
1375+ 2515              //              inc     hl
1376+ 2515              //              ld      (hl), d
1377+ 2515              //              add     hl, -3
1378+ 2515              //              pop     de
1379+ 2515              //              next
1380+ 2515
1381+ 2515              //  ______________________________________________________________________
1382+ 2515              //
1383+ 2515              // >r      n --
1384+ 2515              // pop from calculator-stack and push into return-stack
1385+ 2515                              New_Def TO_R, ">R", is_code, is_normal
1385+ 2515             >
1385+ 2515             >Dict_Ptr        defl    $
1385+ 2515             >
1385+ 2515             >//              ______________________________________________________________________
1385+ 2515             >//              Heap part
1385+ 2515             >
1385+ 2515             >
1385+ 2515             >                org     (Heap_Ptr & $1FFF) + $E000
1385+ E256             >
1385+ E256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ E256             >Latest_Definition defl  Heap_Ptr
1385+ E256             >
1385+ E256             >                // dummy db directives used to calculate length of namec
1385+ E256 3E 52       >                db      ">R"
1385+ E258             >len_NFA         defl    $ - temp_NFA
1385+ E258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ E256             >
1385+ E256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ E257 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1385+ E259             >                org     $-1                 // alter last byte of Name just above to set
1385+ E258 D2          >                db      {b $} | END_BIT     // msb as name end
1385+ E259             >
1385+ E259 4D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1385+ E25B             >Prev_Ptr        defl    Heap_Ptr
1385+ E25B             >
1385+ E25B             >mirror_Ptr      defl    $
1385+ E25B             >
1385+ E25B 17 25       >                dw      Dict_Ptr + 2        // xt
1385+ E25D             >Heap_Ptr        defl    $ - $E000           // save current HP
1385+ E25D             >
1385+ E25D             >Current_HP      defl  $ - $E000             // used to set HP once!
1385+ E25D             >
1385+ E25D             >//              ______________________________________________________________________
1385+ E25D             >//              Dictionary part
1385+ E25D             >
1385+ E25D             >                org     Dict_Ptr
1385+ 2515             >
1385+ 2515 5B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1385+ 2517             >
1385+ 2517             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 2517 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 2517 ~           >
1385+ 2517 ~           >
1385+ 2517             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 2517             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 2517             >
1385+ 2517             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 2517 E1                           pop     hl
1387+ 2518 EB                           ex      de, hl //**
1388+ 2519                              // *** ldhlrp
1389+ 2519 2B                           dec     hl
1390+ 251A 72                           ld      (hl), d             // store current TOS
1391+ 251B 2B                           dec     hl                  // to Return Stack
1392+ 251C 73                           ld      (hl), e
1393+ 251D                              // *** ldrphl
1394+ 251D EB                           ex      de, hl //**
1395+ 251E                              next
1395+ 251E DD E9       >                jp      (ix)
1396+ 2520
1397+ 2520              //  ______________________________________________________________________
1398+ 2520              //
1399+ 2520              // r>      -- n
1400+ 2520              // pop from return-stack and push into calculator-stack
1401+ 2520                              New_Def R_TO, "R>", is_code, is_normal
1401+ 2520             >
1401+ 2520             >Dict_Ptr        defl    $
1401+ 2520             >
1401+ 2520             >//              ______________________________________________________________________
1401+ 2520             >//              Heap part
1401+ 2520             >
1401+ 2520             >
1401+ 2520             >                org     (Heap_Ptr & $1FFF) + $E000
1401+ E25D             >
1401+ E25D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1401+ E25D             >Latest_Definition defl  Heap_Ptr
1401+ E25D             >
1401+ E25D             >                // dummy db directives used to calculate length of namec
1401+ E25D 52 3E       >                db      "R>"
1401+ E25F             >len_NFA         defl    $ - temp_NFA
1401+ E25F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1401+ E25D             >
1401+ E25D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1401+ E25E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1401+ E260             >                org     $-1                 // alter last byte of Name just above to set
1401+ E25F BE          >                db      {b $} | END_BIT     // msb as name end
1401+ E260             >
1401+ E260 56 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1401+ E262             >Prev_Ptr        defl    Heap_Ptr
1401+ E262             >
1401+ E262             >mirror_Ptr      defl    $
1401+ E262             >
1401+ E262 22 25       >                dw      Dict_Ptr + 2        // xt
1401+ E264             >Heap_Ptr        defl    $ - $E000           // save current HP
1401+ E264             >
1401+ E264             >Current_HP      defl  $ - $E000             // used to set HP once!
1401+ E264             >
1401+ E264             >//              ______________________________________________________________________
1401+ E264             >//              Dictionary part
1401+ E264             >
1401+ E264             >                org     Dict_Ptr
1401+ 2520             >
1401+ 2520 62 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1401+ 2522             >
1401+ 2522             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1401+ 2522 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1401+ 2522 ~           >
1401+ 2522 ~           >
1401+ 2522             >                endif           ; ok        // for other definitions it "points" the correct handler
1401+ 2522             >                // Use of "; ok" to suppress "warning[fwdref]"
1401+ 2522             >
1401+ 2522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1402+ 2522
1403+ 2522 EB                           ex      de, hl //**
1404+ 2523                              // *** ldhlrp
1405+ 2523 5E                           ld      e, (hl)             // retrieve from Return Stack
1406+ 2524 23                           inc     hl
1407+ 2525 56                           ld      d, (hl)
1408+ 2526 23                           inc     hl
1409+ 2527                              // *** ldrphl
1410+ 2527 EB                           ex      de, hl //**
1411+ 2528 E5                           push    hl
1412+ 2529                              next
1412+ 2529 DD E9       >                jp      (ix)
1413+ 252B
1414+ 252B              //  ______________________________________________________________________
1415+ 252B              //
1416+ 252B              // r@           -- n
1417+ 252B              // return on top of stack the value of top of return-stack
1418+ 252B              // Since this is the same as I, we alter R's CFA to jump there
1419+ 252B                              New_Def R_OP, "R@", is_code, is_normal
1419+ 252B             >
1419+ 252B             >Dict_Ptr        defl    $
1419+ 252B             >
1419+ 252B             >//              ______________________________________________________________________
1419+ 252B             >//              Heap part
1419+ 252B             >
1419+ 252B             >
1419+ 252B             >                org     (Heap_Ptr & $1FFF) + $E000
1419+ E264             >
1419+ E264             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ E264             >Latest_Definition defl  Heap_Ptr
1419+ E264             >
1419+ E264             >                // dummy db directives used to calculate length of namec
1419+ E264 52 40       >                db      "R@"
1419+ E266             >len_NFA         defl    $ - temp_NFA
1419+ E266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ E264             >
1419+ E264 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ E265 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1419+ E267             >                org     $-1                 // alter last byte of Name just above to set
1419+ E266 C0          >                db      {b $} | END_BIT     // msb as name end
1419+ E267             >
1419+ E267 5D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1419+ E269             >Prev_Ptr        defl    Heap_Ptr
1419+ E269             >
1419+ E269             >mirror_Ptr      defl    $
1419+ E269             >
1419+ E269 2D 25       >                dw      Dict_Ptr + 2        // xt
1419+ E26B             >Heap_Ptr        defl    $ - $E000           // save current HP
1419+ E26B             >
1419+ E26B             >Current_HP      defl  $ - $E000             // used to set HP once!
1419+ E26B             >
1419+ E26B             >//              ______________________________________________________________________
1419+ E26B             >//              Dictionary part
1419+ E26B             >
1419+ E26B             >                org     Dict_Ptr
1419+ 252B             >
1419+ 252B 69 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1419+ 252D             >
1419+ 252D             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 252D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1419+ 252D ~           >
1419+ 252D ~           >
1419+ 252D             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 252D             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 252D             >
1419+ 252D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 252D                          //  Behave  I_Ptr
1421+ 252D C3 D4 20                     jp      I_Ptr
1422+ 2530
1423+ 2530              //  ______________________________________________________________________
1424+ 2530              //
1425+ 2530              // r            -- n
1426+ 2530              // return on top of stack the value of top of return-stack
1427+ 2530              // Since this is the same as I, we alter R's CFA to jump there
1428+ 2530              //              New_Def R_OLD, "R", is_code, is_normal
1429+ 2530              //              jp      I_Ptr
1430+ 2530
1431+ 2530              //  ______________________________________________________________________
1432+ 2530              //
1433+ 2530              // 0=           n -- f
1434+ 2530              // true (non zero) if n is zero, false (0) elsewere
1435+ 2530                              New_Def ZEQUAL, "0=", is_code, is_normal
1435+ 2530             >
1435+ 2530             >Dict_Ptr        defl    $
1435+ 2530             >
1435+ 2530             >//              ______________________________________________________________________
1435+ 2530             >//              Heap part
1435+ 2530             >
1435+ 2530             >
1435+ 2530             >                org     (Heap_Ptr & $1FFF) + $E000
1435+ E26B             >
1435+ E26B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1435+ E26B             >Latest_Definition defl  Heap_Ptr
1435+ E26B             >
1435+ E26B             >                // dummy db directives used to calculate length of namec
1435+ E26B 30 3D       >                db      "0="
1435+ E26D             >len_NFA         defl    $ - temp_NFA
1435+ E26D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1435+ E26B             >
1435+ E26B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1435+ E26C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1435+ E26E             >                org     $-1                 // alter last byte of Name just above to set
1435+ E26D BD          >                db      {b $} | END_BIT     // msb as name end
1435+ E26E             >
1435+ E26E 64 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1435+ E270             >Prev_Ptr        defl    Heap_Ptr
1435+ E270             >
1435+ E270             >mirror_Ptr      defl    $
1435+ E270             >
1435+ E270 32 25       >                dw      Dict_Ptr + 2        // xt
1435+ E272             >Heap_Ptr        defl    $ - $E000           // save current HP
1435+ E272             >
1435+ E272             >Current_HP      defl  $ - $E000             // used to set HP once!
1435+ E272             >
1435+ E272             >//              ______________________________________________________________________
1435+ E272             >//              Dictionary part
1435+ E272             >
1435+ E272             >                org     Dict_Ptr
1435+ 2530             >
1435+ 2530 70 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1435+ 2532             >
1435+ 2532             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1435+ 2532 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1435+ 2532 ~           >
1435+ 2532 ~           >
1435+ 2532             >                endif           ; ok        // for other definitions it "points" the correct handler
1435+ 2532             >                // Use of "; ok" to suppress "warning[fwdref]"
1435+ 2532             >
1435+ 2532             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1436+ 2532              Zero_Equal:
1437+ 2532 E1                           pop     hl
1438+ 2533 7D                           ld      a, l
1439+ 2534 B4                           or      h
1440+ 2535 21 00 00                     ld      hl, FALSE_FLAG
1441+ 2538 20 01                        jr      nz, ZEqual_Skip
1442+ 253A 2B                               dec     hl
1443+ 253B              ZEqual_Skip:
1444+ 253B                              psh1
1444+ 253B E5          >                push    hl
1444+ 253C DD E9       >                jp      (ix)
1445+ 253E
1446+ 253E              //  ______________________________________________________________________
1447+ 253E              //
1448+ 253E              // not         a1 -- a2
1449+ 253E              // increment by 2 top of stack
1450+ 253E                              New_Def NOT_OP, "NOT", is_code, is_normal
1450+ 253E             >
1450+ 253E             >Dict_Ptr        defl    $
1450+ 253E             >
1450+ 253E             >//              ______________________________________________________________________
1450+ 253E             >//              Heap part
1450+ 253E             >
1450+ 253E             >
1450+ 253E             >                org     (Heap_Ptr & $1FFF) + $E000
1450+ E272             >
1450+ E272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1450+ E272             >Latest_Definition defl  Heap_Ptr
1450+ E272             >
1450+ E272             >                // dummy db directives used to calculate length of namec
1450+ E272 4E 4F 54    >                db      "NOT"
1450+ E275             >len_NFA         defl    $ - temp_NFA
1450+ E275             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1450+ E272             >
1450+ E272 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1450+ E273 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1450+ E276             >                org     $-1                 // alter last byte of Name just above to set
1450+ E275 D4          >                db      {b $} | END_BIT     // msb as name end
1450+ E276             >
1450+ E276 6B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1450+ E278             >Prev_Ptr        defl    Heap_Ptr
1450+ E278             >
1450+ E278             >mirror_Ptr      defl    $
1450+ E278             >
1450+ E278 40 25       >                dw      Dict_Ptr + 2        // xt
1450+ E27A             >Heap_Ptr        defl    $ - $E000           // save current HP
1450+ E27A             >
1450+ E27A             >Current_HP      defl  $ - $E000             // used to set HP once!
1450+ E27A             >
1450+ E27A             >//              ______________________________________________________________________
1450+ E27A             >//              Dictionary part
1450+ E27A             >
1450+ E27A             >                org     Dict_Ptr
1450+ 253E             >
1450+ 253E 78 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1450+ 2540             >
1450+ 2540             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1450+ 2540 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1450+ 2540 ~           >
1450+ 2540 ~           >
1450+ 2540             >                endif           ; ok        // for other definitions it "points" the correct handler
1450+ 2540             >                // Use of "; ok" to suppress "warning[fwdref]"
1450+ 2540             >
1450+ 2540             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1451+ 2540                          //  Behave  Zero_Equal
1452+ 2540 18 F0                        jr      Zero_Equal
1453+ 2542
1454+ 2542              //  ______________________________________________________________________
1455+ 2542              //
1456+ 2542              // 0<           n -- f
1457+ 2542              // true (non zero) if n is less than zero, false (0) elsewere
1458+ 2542                              New_Def ZLESS, "0<", is_code, is_normal
1458+ 2542             >
1458+ 2542             >Dict_Ptr        defl    $
1458+ 2542             >
1458+ 2542             >//              ______________________________________________________________________
1458+ 2542             >//              Heap part
1458+ 2542             >
1458+ 2542             >
1458+ 2542             >                org     (Heap_Ptr & $1FFF) + $E000
1458+ E27A             >
1458+ E27A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1458+ E27A             >Latest_Definition defl  Heap_Ptr
1458+ E27A             >
1458+ E27A             >                // dummy db directives used to calculate length of namec
1458+ E27A 30 3C       >                db      "0<"
1458+ E27C             >len_NFA         defl    $ - temp_NFA
1458+ E27C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1458+ E27A             >
1458+ E27A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1458+ E27B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1458+ E27D             >                org     $-1                 // alter last byte of Name just above to set
1458+ E27C BC          >                db      {b $} | END_BIT     // msb as name end
1458+ E27D             >
1458+ E27D 72 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1458+ E27F             >Prev_Ptr        defl    Heap_Ptr
1458+ E27F             >
1458+ E27F             >mirror_Ptr      defl    $
1458+ E27F             >
1458+ E27F 44 25       >                dw      Dict_Ptr + 2        // xt
1458+ E281             >Heap_Ptr        defl    $ - $E000           // save current HP
1458+ E281             >
1458+ E281             >Current_HP      defl  $ - $E000             // used to set HP once!
1458+ E281             >
1458+ E281             >//              ______________________________________________________________________
1458+ E281             >//              Dictionary part
1458+ E281             >
1458+ E281             >                org     Dict_Ptr
1458+ 2542             >
1458+ 2542 7F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1458+ 2544             >
1458+ 2544             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1458+ 2544 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1458+ 2544 ~           >
1458+ 2544 ~           >
1458+ 2544             >                endif           ; ok        // for other definitions it "points" the correct handler
1458+ 2544             >                // Use of "; ok" to suppress "warning[fwdref]"
1458+ 2544             >
1458+ 2544             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1459+ 2544 E1                           pop     hl
1460+ 2545 29                           add     hl, hl
1461+ 2546 ED 62                        sbc     hl, hl
1462+ 2548                              psh1
1462+ 2548 E5          >                push    hl
1462+ 2549 DD E9       >                jp      (ix)
1463+ 254B
1464+ 254B              //  ______________________________________________________________________
1465+ 254B              //
1466+ 254B              // 0>           n -- f
1467+ 254B              // true (non zero) if n is less than zero, false (0) elsewere
1468+ 254B                              New_Def ZGREATER, "0>", is_code, is_normal
1468+ 254B             >
1468+ 254B             >Dict_Ptr        defl    $
1468+ 254B             >
1468+ 254B             >//              ______________________________________________________________________
1468+ 254B             >//              Heap part
1468+ 254B             >
1468+ 254B             >
1468+ 254B             >                org     (Heap_Ptr & $1FFF) + $E000
1468+ E281             >
1468+ E281             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1468+ E281             >Latest_Definition defl  Heap_Ptr
1468+ E281             >
1468+ E281             >                // dummy db directives used to calculate length of namec
1468+ E281 30 3E       >                db      "0>"
1468+ E283             >len_NFA         defl    $ - temp_NFA
1468+ E283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1468+ E281             >
1468+ E281 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1468+ E282 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1468+ E284             >                org     $-1                 // alter last byte of Name just above to set
1468+ E283 BE          >                db      {b $} | END_BIT     // msb as name end
1468+ E284             >
1468+ E284 7A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1468+ E286             >Prev_Ptr        defl    Heap_Ptr
1468+ E286             >
1468+ E286             >mirror_Ptr      defl    $
1468+ E286             >
1468+ E286 4D 25       >                dw      Dict_Ptr + 2        // xt
1468+ E288             >Heap_Ptr        defl    $ - $E000           // save current HP
1468+ E288             >
1468+ E288             >Current_HP      defl  $ - $E000             // used to set HP once!
1468+ E288             >
1468+ E288             >//              ______________________________________________________________________
1468+ E288             >//              Dictionary part
1468+ E288             >
1468+ E288             >                org     Dict_Ptr
1468+ 254B             >
1468+ 254B 86 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1468+ 254D             >
1468+ 254D             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1468+ 254D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1468+ 254D ~           >
1468+ 254D ~           >
1468+ 254D             >                endif           ; ok        // for other definitions it "points" the correct handler
1468+ 254D             >                // Use of "; ok" to suppress "warning[fwdref]"
1468+ 254D             >
1468+ 254D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1469+ 254D E1                           pop     hl
1470+ 254E 7D                           ld      a, l
1471+ 254F B4                           or      h
1472+ 2550 29                           add     hl, hl
1473+ 2551 21 00 00                     ld      hl, FALSE_FLAG
1474+ 2554 38 04                        jr      c, ZGreater_Skip
1475+ 2556 A7                               and     a
1476+ 2557 28 01                            jr      z, ZGreater_Skip
1477+ 2559 2B                                   dec     hl
1478+ 255A              ZGreater_Skip:
1479+ 255A                              psh1
1479+ 255A E5          >                push    hl
1479+ 255B DD E9       >                jp      (ix)
1480+ 255D
1481+ 255D              //  ______________________________________________________________________
1482+ 255D              //
1483+ 255D              // +            n1 n2 -- n3
1484+ 255D              // returns the unsigned sum of two top values
1485+ 255D                              New_Def PLUS, "+", is_code, is_normal
1485+ 255D             >
1485+ 255D             >Dict_Ptr        defl    $
1485+ 255D             >
1485+ 255D             >//              ______________________________________________________________________
1485+ 255D             >//              Heap part
1485+ 255D             >
1485+ 255D             >
1485+ 255D             >                org     (Heap_Ptr & $1FFF) + $E000
1485+ E288             >
1485+ E288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1485+ E288             >Latest_Definition defl  Heap_Ptr
1485+ E288             >
1485+ E288             >                // dummy db directives used to calculate length of namec
1485+ E288 2B          >                db      "+"
1485+ E289             >len_NFA         defl    $ - temp_NFA
1485+ E289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1485+ E288             >
1485+ E288 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1485+ E289 2B          >                db      "+"               // name string in 7-bit ascii, but
1485+ E28A             >                org     $-1                 // alter last byte of Name just above to set
1485+ E289 AB          >                db      {b $} | END_BIT     // msb as name end
1485+ E28A             >
1485+ E28A 81 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1485+ E28C             >Prev_Ptr        defl    Heap_Ptr
1485+ E28C             >
1485+ E28C             >mirror_Ptr      defl    $
1485+ E28C             >
1485+ E28C 5F 25       >                dw      Dict_Ptr + 2        // xt
1485+ E28E             >Heap_Ptr        defl    $ - $E000           // save current HP
1485+ E28E             >
1485+ E28E             >Current_HP      defl  $ - $E000             // used to set HP once!
1485+ E28E             >
1485+ E28E             >//              ______________________________________________________________________
1485+ E28E             >//              Dictionary part
1485+ E28E             >
1485+ E28E             >                org     Dict_Ptr
1485+ 255D             >
1485+ 255D 8C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1485+ 255F             >
1485+ 255F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1485+ 255F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1485+ 255F ~           >
1485+ 255F ~           >
1485+ 255F             >                endif           ; ok        // for other definitions it "points" the correct handler
1485+ 255F             >                // Use of "; ok" to suppress "warning[fwdref]"
1485+ 255F             >
1485+ 255F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1486+ 255F D9                           exx
1487+ 2560 E1                           pop     hl
1488+ 2561 D1                           pop     de
1489+ 2562 19                           add     hl, de
1490+ 2563 E5                           push    hl
1491+ 2564 D9                           exx
1492+ 2565                              next
1492+ 2565 DD E9       >                jp      (ix)
1493+ 2567
1494+ 2567
1495+ 2567              //  ______________________________________________________________________
1496+ 2567              //
1497+ 2567              // d+           d1 d2 -- d3
1498+ 2567              // returns the unsigned sum of two top double-numbers
1499+ 2567              //      d2  d1
1500+ 2567              //      h l h l
1501+ 2567              // SP   LHEDLHED
1502+ 2567              // SP  +01234567
1503+ 2567                              New_Def DPLUS, "D+", is_code, is_normal
1503+ 2567             >
1503+ 2567             >Dict_Ptr        defl    $
1503+ 2567             >
1503+ 2567             >//              ______________________________________________________________________
1503+ 2567             >//              Heap part
1503+ 2567             >
1503+ 2567             >
1503+ 2567             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E28E             >
1503+ E28E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E28E             >Latest_Definition defl  Heap_Ptr
1503+ E28E             >
1503+ E28E             >                // dummy db directives used to calculate length of namec
1503+ E28E 44 2B       >                db      "D+"
1503+ E290             >len_NFA         defl    $ - temp_NFA
1503+ E290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E28E             >
1503+ E28E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E28F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1503+ E291             >                org     $-1                 // alter last byte of Name just above to set
1503+ E290 AB          >                db      {b $} | END_BIT     // msb as name end
1503+ E291             >
1503+ E291 88 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E293             >Prev_Ptr        defl    Heap_Ptr
1503+ E293             >
1503+ E293             >mirror_Ptr      defl    $
1503+ E293             >
1503+ E293 69 25       >                dw      Dict_Ptr + 2        // xt
1503+ E295             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E295             >
1503+ E295             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E295             >
1503+ E295             >//              ______________________________________________________________________
1503+ E295             >//              Dictionary part
1503+ E295             >
1503+ E295             >                org     Dict_Ptr
1503+ 2567             >
1503+ 2567 93 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 2569             >
1503+ 2569             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 2569 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1503+ 2569 ~           >
1503+ 2569 ~           >
1503+ 2569             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 2569             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 2569             >
1503+ 2569             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 2569
1505+ 2569 D9                           exx
1506+ 256A C1                           pop     bc                  // bc := d2.H
1507+ 256B D1                           pop     de                  // hl := d2.L
1508+ 256C E1                           pop     hl                  // d1.H
1509+ 256D E3                           ex      (sp), hl            // d1.L
1510+ 256E 19                           add     hl, de              // hl := d2.L + d1.L
1511+ 256F E3                           ex      (sp), hl            // d1.H
1512+ 2570 ED 4A                        adc     hl, bc              // d1.H + d2.H
1513+ 2572 E5                           push    hl
1514+ 2573 D9                           exx
1515+ 2574                              next
1515+ 2574 DD E9       >                jp      (ix)
1516+ 2576
1517+ 2576              //  ______________________________________________________________________
1518+ 2576              //
1519+ 2576              // 1+           n1 -- n2
1520+ 2576              // increment by 1 top of stack
1521+ 2576                              New_Def ONE_PLUS, "1+", is_code, is_normal
1521+ 2576             >
1521+ 2576             >Dict_Ptr        defl    $
1521+ 2576             >
1521+ 2576             >//              ______________________________________________________________________
1521+ 2576             >//              Heap part
1521+ 2576             >
1521+ 2576             >
1521+ 2576             >                org     (Heap_Ptr & $1FFF) + $E000
1521+ E295             >
1521+ E295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1521+ E295             >Latest_Definition defl  Heap_Ptr
1521+ E295             >
1521+ E295             >                // dummy db directives used to calculate length of namec
1521+ E295 31 2B       >                db      "1+"
1521+ E297             >len_NFA         defl    $ - temp_NFA
1521+ E297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1521+ E295             >
1521+ E295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1521+ E296 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1521+ E298             >                org     $-1                 // alter last byte of Name just above to set
1521+ E297 AB          >                db      {b $} | END_BIT     // msb as name end
1521+ E298             >
1521+ E298 8E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1521+ E29A             >Prev_Ptr        defl    Heap_Ptr
1521+ E29A             >
1521+ E29A             >mirror_Ptr      defl    $
1521+ E29A             >
1521+ E29A 78 25       >                dw      Dict_Ptr + 2        // xt
1521+ E29C             >Heap_Ptr        defl    $ - $E000           // save current HP
1521+ E29C             >
1521+ E29C             >Current_HP      defl  $ - $E000             // used to set HP once!
1521+ E29C             >
1521+ E29C             >//              ______________________________________________________________________
1521+ E29C             >//              Dictionary part
1521+ E29C             >
1521+ E29C             >                org     Dict_Ptr
1521+ 2576             >
1521+ 2576 9A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1521+ 2578             >
1521+ 2578             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1521+ 2578 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1521+ 2578 ~           >
1521+ 2578 ~           >
1521+ 2578             >                endif           ; ok        // for other definitions it "points" the correct handler
1521+ 2578             >                // Use of "; ok" to suppress "warning[fwdref]"
1521+ 2578             >
1521+ 2578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1522+ 2578 E1                           pop     hl
1523+ 2579 23                           inc     hl
1524+ 257A
1525+ 257A                              psh1
1525+ 257A E5          >                push    hl
1525+ 257B DD E9       >                jp      (ix)
1526+ 257D
1527+ 257D              //  ______________________________________________________________________
1528+ 257D              //
1529+ 257D              // 1-           n1 -- n2
1530+ 257D              // decrement by 1 top of stack
1531+ 257D                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1531+ 257D             >
1531+ 257D             >Dict_Ptr        defl    $
1531+ 257D             >
1531+ 257D             >//              ______________________________________________________________________
1531+ 257D             >//              Heap part
1531+ 257D             >
1531+ 257D             >
1531+ 257D             >                org     (Heap_Ptr & $1FFF) + $E000
1531+ E29C             >
1531+ E29C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1531+ E29C             >Latest_Definition defl  Heap_Ptr
1531+ E29C             >
1531+ E29C             >                // dummy db directives used to calculate length of namec
1531+ E29C 31 2D       >                db      "1-"
1531+ E29E             >len_NFA         defl    $ - temp_NFA
1531+ E29E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1531+ E29C             >
1531+ E29C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1531+ E29D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1531+ E29F             >                org     $-1                 // alter last byte of Name just above to set
1531+ E29E AD          >                db      {b $} | END_BIT     // msb as name end
1531+ E29F             >
1531+ E29F 95 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1531+ E2A1             >Prev_Ptr        defl    Heap_Ptr
1531+ E2A1             >
1531+ E2A1             >mirror_Ptr      defl    $
1531+ E2A1             >
1531+ E2A1 7F 25       >                dw      Dict_Ptr + 2        // xt
1531+ E2A3             >Heap_Ptr        defl    $ - $E000           // save current HP
1531+ E2A3             >
1531+ E2A3             >Current_HP      defl  $ - $E000             // used to set HP once!
1531+ E2A3             >
1531+ E2A3             >//              ______________________________________________________________________
1531+ E2A3             >//              Dictionary part
1531+ E2A3             >
1531+ E2A3             >                org     Dict_Ptr
1531+ 257D             >
1531+ 257D A1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1531+ 257F             >
1531+ 257F             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1531+ 257F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1531+ 257F ~           >
1531+ 257F ~           >
1531+ 257F             >                endif           ; ok        // for other definitions it "points" the correct handler
1531+ 257F             >                // Use of "; ok" to suppress "warning[fwdref]"
1531+ 257F             >
1531+ 257F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1532+ 257F E1                           pop     hl
1533+ 2580 2B                           dec     hl
1534+ 2581
1535+ 2581                              psh1
1535+ 2581 E5          >                push    hl
1535+ 2582 DD E9       >                jp      (ix)
1536+ 2584
1537+ 2584              //  ______________________________________________________________________
1538+ 2584              //
1539+ 2584              // 2+           n1 -- n2
1540+ 2584              // increment by 2 top of stack
1541+ 2584                              New_Def TWO_PLUS, "2+", is_code, is_normal
1541+ 2584             >
1541+ 2584             >Dict_Ptr        defl    $
1541+ 2584             >
1541+ 2584             >//              ______________________________________________________________________
1541+ 2584             >//              Heap part
1541+ 2584             >
1541+ 2584             >
1541+ 2584             >                org     (Heap_Ptr & $1FFF) + $E000
1541+ E2A3             >
1541+ E2A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1541+ E2A3             >Latest_Definition defl  Heap_Ptr
1541+ E2A3             >
1541+ E2A3             >                // dummy db directives used to calculate length of namec
1541+ E2A3 32 2B       >                db      "2+"
1541+ E2A5             >len_NFA         defl    $ - temp_NFA
1541+ E2A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1541+ E2A3             >
1541+ E2A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1541+ E2A4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1541+ E2A6             >                org     $-1                 // alter last byte of Name just above to set
1541+ E2A5 AB          >                db      {b $} | END_BIT     // msb as name end
1541+ E2A6             >
1541+ E2A6 9C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1541+ E2A8             >Prev_Ptr        defl    Heap_Ptr
1541+ E2A8             >
1541+ E2A8             >mirror_Ptr      defl    $
1541+ E2A8             >
1541+ E2A8 86 25       >                dw      Dict_Ptr + 2        // xt
1541+ E2AA             >Heap_Ptr        defl    $ - $E000           // save current HP
1541+ E2AA             >
1541+ E2AA             >Current_HP      defl  $ - $E000             // used to set HP once!
1541+ E2AA             >
1541+ E2AA             >//              ______________________________________________________________________
1541+ E2AA             >//              Dictionary part
1541+ E2AA             >
1541+ E2AA             >                org     Dict_Ptr
1541+ 2584             >
1541+ 2584 A8 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1541+ 2586             >
1541+ 2586             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1541+ 2586 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1541+ 2586 ~           >
1541+ 2586 ~           >
1541+ 2586             >                endif           ; ok        // for other definitions it "points" the correct handler
1541+ 2586             >                // Use of "; ok" to suppress "warning[fwdref]"
1541+ 2586             >
1541+ 2586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1542+ 2586              Two_Plus:
1543+ 2586 E1                           pop     hl
1544+ 2587 23                           inc     hl
1545+ 2588 23                           inc     hl
1546+ 2589
1547+ 2589                              psh1
1547+ 2589 E5          >                push    hl
1547+ 258A DD E9       >                jp      (ix)
1548+ 258C
1549+ 258C              //  ______________________________________________________________________
1550+ 258C              //
1551+ 258C              // cell+        a1 -- a2
1552+ 258C              // increment by 2 top of stack
1553+ 258C                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1553+ 258C             >
1553+ 258C             >Dict_Ptr        defl    $
1553+ 258C             >
1553+ 258C             >//              ______________________________________________________________________
1553+ 258C             >//              Heap part
1553+ 258C             >
1553+ 258C             >
1553+ 258C             >                org     (Heap_Ptr & $1FFF) + $E000
1553+ E2AA             >
1553+ E2AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1553+ E2AA             >Latest_Definition defl  Heap_Ptr
1553+ E2AA             >
1553+ E2AA             >                // dummy db directives used to calculate length of namec
1553+ E2AA 43 45 4C 4C >                db      "CELL+"
1553+ E2AE 2B          >
1553+ E2AF             >len_NFA         defl    $ - temp_NFA
1553+ E2AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1553+ E2AA             >
1553+ E2AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1553+ E2AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1553+ E2AF 2B          >
1553+ E2B0             >                org     $-1                 // alter last byte of Name just above to set
1553+ E2AF AB          >                db      {b $} | END_BIT     // msb as name end
1553+ E2B0             >
1553+ E2B0 A3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1553+ E2B2             >Prev_Ptr        defl    Heap_Ptr
1553+ E2B2             >
1553+ E2B2             >mirror_Ptr      defl    $
1553+ E2B2             >
1553+ E2B2 8E 25       >                dw      Dict_Ptr + 2        // xt
1553+ E2B4             >Heap_Ptr        defl    $ - $E000           // save current HP
1553+ E2B4             >
1553+ E2B4             >Current_HP      defl  $ - $E000             // used to set HP once!
1553+ E2B4             >
1553+ E2B4             >//              ______________________________________________________________________
1553+ E2B4             >//              Dictionary part
1553+ E2B4             >
1553+ E2B4             >                org     Dict_Ptr
1553+ 258C             >
1553+ 258C B2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1553+ 258E             >
1553+ 258E             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1553+ 258E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1553+ 258E ~           >
1553+ 258E ~           >
1553+ 258E             >                endif           ; ok        // for other definitions it "points" the correct handler
1553+ 258E             >                // Use of "; ok" to suppress "warning[fwdref]"
1553+ 258E             >
1553+ 258E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1554+ 258E 18 F6                        jr      Two_Plus
1555+ 2590
1556+ 2590              //  ______________________________________________________________________
1557+ 2590              //
1558+ 2590              // align        a1 -- a2
1559+ 2590              // align memory : not used
1560+ 2590              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1561+ 2590              //            next
1562+ 2590
1563+ 2590              //  ______________________________________________________________________
1564+ 2590              //
1565+ 2590              // cell-        a1 -- a2
1566+ 2590              // decrement by 2 top of stack
1567+ 2590                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1567+ 2590             >
1567+ 2590             >Dict_Ptr        defl    $
1567+ 2590             >
1567+ 2590             >//              ______________________________________________________________________
1567+ 2590             >//              Heap part
1567+ 2590             >
1567+ 2590             >
1567+ 2590             >                org     (Heap_Ptr & $1FFF) + $E000
1567+ E2B4             >
1567+ E2B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1567+ E2B4             >Latest_Definition defl  Heap_Ptr
1567+ E2B4             >
1567+ E2B4             >                // dummy db directives used to calculate length of namec
1567+ E2B4 43 45 4C 4C >                db      "CELL-"
1567+ E2B8 2D          >
1567+ E2B9             >len_NFA         defl    $ - temp_NFA
1567+ E2B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1567+ E2B4             >
1567+ E2B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1567+ E2B5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1567+ E2B9 2D          >
1567+ E2BA             >                org     $-1                 // alter last byte of Name just above to set
1567+ E2B9 AD          >                db      {b $} | END_BIT     // msb as name end
1567+ E2BA             >
1567+ E2BA AA 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1567+ E2BC             >Prev_Ptr        defl    Heap_Ptr
1567+ E2BC             >
1567+ E2BC             >mirror_Ptr      defl    $
1567+ E2BC             >
1567+ E2BC 92 25       >                dw      Dict_Ptr + 2        // xt
1567+ E2BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1567+ E2BE             >
1567+ E2BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1567+ E2BE             >
1567+ E2BE             >//              ______________________________________________________________________
1567+ E2BE             >//              Dictionary part
1567+ E2BE             >
1567+ E2BE             >                org     Dict_Ptr
1567+ 2590             >
1567+ 2590 BC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1567+ 2592             >
1567+ 2592             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1567+ 2592 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1567+ 2592 ~           >
1567+ 2592 ~           >
1567+ 2592             >                endif           ; ok        // for other definitions it "points" the correct handler
1567+ 2592             >                // Use of "; ok" to suppress "warning[fwdref]"
1567+ 2592             >
1567+ 2592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1568+ 2592              CellMinus:
1569+ 2592 E1                           pop     hl
1570+ 2593 2B                           dec     hl
1571+ 2594 2B                           dec     hl
1572+ 2595
1573+ 2595                              psh1
1573+ 2595 E5          >                push    hl
1573+ 2596 DD E9       >                jp      (ix)
1574+ 2598
1575+ 2598              //  ______________________________________________________________________
1576+ 2598              //
1577+ 2598              // 2-           a1 -- a2
1578+ 2598              // decrement by 2 top of stack
1579+ 2598                              New_Def TWO_MINUS, "2-", is_code, is_normal
1579+ 2598             >
1579+ 2598             >Dict_Ptr        defl    $
1579+ 2598             >
1579+ 2598             >//              ______________________________________________________________________
1579+ 2598             >//              Heap part
1579+ 2598             >
1579+ 2598             >
1579+ 2598             >                org     (Heap_Ptr & $1FFF) + $E000
1579+ E2BE             >
1579+ E2BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1579+ E2BE             >Latest_Definition defl  Heap_Ptr
1579+ E2BE             >
1579+ E2BE             >                // dummy db directives used to calculate length of namec
1579+ E2BE 32 2D       >                db      "2-"
1579+ E2C0             >len_NFA         defl    $ - temp_NFA
1579+ E2C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1579+ E2BE             >
1579+ E2BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1579+ E2BF 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1579+ E2C1             >                org     $-1                 // alter last byte of Name just above to set
1579+ E2C0 AD          >                db      {b $} | END_BIT     // msb as name end
1579+ E2C1             >
1579+ E2C1 B4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1579+ E2C3             >Prev_Ptr        defl    Heap_Ptr
1579+ E2C3             >
1579+ E2C3             >mirror_Ptr      defl    $
1579+ E2C3             >
1579+ E2C3 9A 25       >                dw      Dict_Ptr + 2        // xt
1579+ E2C5             >Heap_Ptr        defl    $ - $E000           // save current HP
1579+ E2C5             >
1579+ E2C5             >Current_HP      defl  $ - $E000             // used to set HP once!
1579+ E2C5             >
1579+ E2C5             >//              ______________________________________________________________________
1579+ E2C5             >//              Dictionary part
1579+ E2C5             >
1579+ E2C5             >                org     Dict_Ptr
1579+ 2598             >
1579+ 2598 C3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1579+ 259A             >
1579+ 259A             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1579+ 259A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1579+ 259A ~           >
1579+ 259A ~           >
1579+ 259A             >                endif           ; ok        // for other definitions it "points" the correct handler
1579+ 259A             >                // Use of "; ok" to suppress "warning[fwdref]"
1579+ 259A             >
1579+ 259A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1580+ 259A C3 92 25                     jp      CellMinus
1581+ 259D
1582+ 259D              //  ______________________________________________________________________
1583+ 259D              //
1584+ 259D              // negate       n1 -- n2
1585+ 259D              // change the sign of number
1586+ 259D                              New_Def MINUS, "NEGATE", is_code, is_normal
1586+ 259D             >
1586+ 259D             >Dict_Ptr        defl    $
1586+ 259D             >
1586+ 259D             >//              ______________________________________________________________________
1586+ 259D             >//              Heap part
1586+ 259D             >
1586+ 259D             >
1586+ 259D             >                org     (Heap_Ptr & $1FFF) + $E000
1586+ E2C5             >
1586+ E2C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ E2C5             >Latest_Definition defl  Heap_Ptr
1586+ E2C5             >
1586+ E2C5             >                // dummy db directives used to calculate length of namec
1586+ E2C5 4E 45 47 41 >                db      "NEGATE"
1586+ E2C9 54 45       >
1586+ E2CB             >len_NFA         defl    $ - temp_NFA
1586+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ E2C5             >
1586+ E2C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ E2C6 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1586+ E2CA 54 45       >
1586+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1586+ E2CB C5          >                db      {b $} | END_BIT     // msb as name end
1586+ E2CC             >
1586+ E2CC BE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1586+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1586+ E2CE             >
1586+ E2CE             >mirror_Ptr      defl    $
1586+ E2CE             >
1586+ E2CE 9F 25       >                dw      Dict_Ptr + 2        // xt
1586+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1586+ E2D0             >
1586+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1586+ E2D0             >
1586+ E2D0             >//              ______________________________________________________________________
1586+ E2D0             >//              Dictionary part
1586+ E2D0             >
1586+ E2D0             >                org     Dict_Ptr
1586+ 259D             >
1586+ 259D CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1586+ 259F             >
1586+ 259F             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 259F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1586+ 259F ~           >
1586+ 259F ~           >
1586+ 259F             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 259F             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 259F             >
1586+ 259F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 259F D9                           exx
1588+ 25A0 21 00 00                     ld      hl, 0               // subtract from 0
1589+ 25A3 D1                           pop     de
1590+ 25A4 B7                           or      a
1591+ 25A5 ED 52                        sbc     hl, de
1592+ 25A7 E5                           push    hl
1593+ 25A8 D9                           exx
1594+ 25A9                              next
1594+ 25A9 DD E9       >                jp      (ix)
1595+ 25AB
1596+ 25AB              //  ______________________________________________________________________
1597+ 25AB              //
1598+ 25AB              // dnegate      d1 -- d2
1599+ 25AB              // change the sign of a double number
1600+ 25AB                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1600+ 25AB             >
1600+ 25AB             >Dict_Ptr        defl    $
1600+ 25AB             >
1600+ 25AB             >//              ______________________________________________________________________
1600+ 25AB             >//              Heap part
1600+ 25AB             >
1600+ 25AB             >
1600+ 25AB             >                org     (Heap_Ptr & $1FFF) + $E000
1600+ E2D0             >
1600+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1600+ E2D0             >Latest_Definition defl  Heap_Ptr
1600+ E2D0             >
1600+ E2D0             >                // dummy db directives used to calculate length of namec
1600+ E2D0 44 4E 45 47 >                db      "DNEGATE"
1600+ E2D4 41 54 45    >
1600+ E2D7             >len_NFA         defl    $ - temp_NFA
1600+ E2D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1600+ E2D0             >
1600+ E2D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1600+ E2D1 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1600+ E2D5 41 54 45    >
1600+ E2D8             >                org     $-1                 // alter last byte of Name just above to set
1600+ E2D7 C5          >                db      {b $} | END_BIT     // msb as name end
1600+ E2D8             >
1600+ E2D8 C5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1600+ E2DA             >Prev_Ptr        defl    Heap_Ptr
1600+ E2DA             >
1600+ E2DA             >mirror_Ptr      defl    $
1600+ E2DA             >
1600+ E2DA AD 25       >                dw      Dict_Ptr + 2        // xt
1600+ E2DC             >Heap_Ptr        defl    $ - $E000           // save current HP
1600+ E2DC             >
1600+ E2DC             >Current_HP      defl  $ - $E000             // used to set HP once!
1600+ E2DC             >
1600+ E2DC             >//              ______________________________________________________________________
1600+ E2DC             >//              Dictionary part
1600+ E2DC             >
1600+ E2DC             >                org     Dict_Ptr
1600+ 25AB             >
1600+ 25AB DA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1600+ 25AD             >
1600+ 25AD             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1600+ 25AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1600+ 25AD ~           >
1600+ 25AD ~           >
1600+ 25AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1600+ 25AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1600+ 25AD             >
1600+ 25AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1601+ 25AD D9                           exx
1602+ 25AE C1                           pop     bc                  // d1.H
1603+ 25AF D1                           pop     de                  // d1.L
1604+ 25B0 AF                           xor     a
1605+ 25B1 67                           ld      h, a
1606+ 25B2 6F                           ld      l, a
1607+ 25B3 ED 52                        sbc     hl, de              // subtact from zero
1608+ 25B5 E5                           push    hl                  // > d2-L
1609+ 25B6 67                           ld      h, a
1610+ 25B7 6F                           ld      l, a
1611+ 25B8 ED 42                        sbc     hl, bc              // subtract from zero with carry
1612+ 25BA                                                          // > d2-H
1613+ 25BA E5                           push    hl
1614+ 25BB D9                           exx
1615+ 25BC                              next
1615+ 25BC DD E9       >                jp      (ix)
1616+ 25BE
1617+ 25BE              //  ______________________________________________________________________
1618+ 25BE              //
1619+ 25BE              // over         n1 n2 -- n1 n2 n1
1620+ 25BE              // copy the second value of stack and put it on top.
1621+ 25BE                              New_Def OVER, "OVER", is_code, is_normal
1621+ 25BE             >
1621+ 25BE             >Dict_Ptr        defl    $
1621+ 25BE             >
1621+ 25BE             >//              ______________________________________________________________________
1621+ 25BE             >//              Heap part
1621+ 25BE             >
1621+ 25BE             >
1621+ 25BE             >                org     (Heap_Ptr & $1FFF) + $E000
1621+ E2DC             >
1621+ E2DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1621+ E2DC             >Latest_Definition defl  Heap_Ptr
1621+ E2DC             >
1621+ E2DC             >                // dummy db directives used to calculate length of namec
1621+ E2DC 4F 56 45 52 >                db      "OVER"
1621+ E2E0             >len_NFA         defl    $ - temp_NFA
1621+ E2E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1621+ E2DC             >
1621+ E2DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1621+ E2DD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1621+ E2E1             >                org     $-1                 // alter last byte of Name just above to set
1621+ E2E0 D2          >                db      {b $} | END_BIT     // msb as name end
1621+ E2E1             >
1621+ E2E1 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1621+ E2E3             >Prev_Ptr        defl    Heap_Ptr
1621+ E2E3             >
1621+ E2E3             >mirror_Ptr      defl    $
1621+ E2E3             >
1621+ E2E3 C0 25       >                dw      Dict_Ptr + 2        // xt
1621+ E2E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1621+ E2E5             >
1621+ E2E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1621+ E2E5             >
1621+ E2E5             >//              ______________________________________________________________________
1621+ E2E5             >//              Dictionary part
1621+ E2E5             >
1621+ E2E5             >                org     Dict_Ptr
1621+ 25BE             >
1621+ 25BE E3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1621+ 25C0             >
1621+ 25C0             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1621+ 25C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1621+ 25C0 ~           >
1621+ 25C0 ~           >
1621+ 25C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1621+ 25C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1621+ 25C0             >
1621+ 25C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1622+ 25C0                              // exx     // we can use af instead OPTIMIZATION possible
1623+ 25C0 F1                           pop     af                  //   n2
1624+ 25C1 E1                           pop     hl                  // < n1
1625+ 25C2 E5                           push    hl                  // > n1
1626+ 25C3 F5                           push    af                  // > n2
1627+ 25C4 E5                           push    hl                  // > n1
1628+ 25C5                              // exx
1629+ 25C5                              next
1629+ 25C5 DD E9       >                jp      (ix)
1630+ 25C7
1631+ 25C7              //  ______________________________________________________________________
1632+ 25C7              //
1633+ 25C7              // drop         n1 --
1634+ 25C7              // drops the top of stack
1635+ 25C7                              New_Def DROP, "DROP", is_code, is_normal
1635+ 25C7             >
1635+ 25C7             >Dict_Ptr        defl    $
1635+ 25C7             >
1635+ 25C7             >//              ______________________________________________________________________
1635+ 25C7             >//              Heap part
1635+ 25C7             >
1635+ 25C7             >
1635+ 25C7             >                org     (Heap_Ptr & $1FFF) + $E000
1635+ E2E5             >
1635+ E2E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1635+ E2E5             >Latest_Definition defl  Heap_Ptr
1635+ E2E5             >
1635+ E2E5             >                // dummy db directives used to calculate length of namec
1635+ E2E5 44 52 4F 50 >                db      "DROP"
1635+ E2E9             >len_NFA         defl    $ - temp_NFA
1635+ E2E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1635+ E2E5             >
1635+ E2E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1635+ E2E6 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1635+ E2EA             >                org     $-1                 // alter last byte of Name just above to set
1635+ E2E9 D0          >                db      {b $} | END_BIT     // msb as name end
1635+ E2EA             >
1635+ E2EA DC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1635+ E2EC             >Prev_Ptr        defl    Heap_Ptr
1635+ E2EC             >
1635+ E2EC             >mirror_Ptr      defl    $
1635+ E2EC             >
1635+ E2EC C9 25       >                dw      Dict_Ptr + 2        // xt
1635+ E2EE             >Heap_Ptr        defl    $ - $E000           // save current HP
1635+ E2EE             >
1635+ E2EE             >Current_HP      defl  $ - $E000             // used to set HP once!
1635+ E2EE             >
1635+ E2EE             >//              ______________________________________________________________________
1635+ E2EE             >//              Dictionary part
1635+ E2EE             >
1635+ E2EE             >                org     Dict_Ptr
1635+ 25C7             >
1635+ 25C7 EC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1635+ 25C9             >
1635+ 25C9             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1635+ 25C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1635+ 25C9 ~           >
1635+ 25C9 ~           >
1635+ 25C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1635+ 25C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1635+ 25C9             >
1635+ 25C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1636+ 25C9 E1                           pop     hl                  // < n1 and discard previous TOS
1637+ 25CA                              next
1637+ 25CA DD E9       >                jp      (ix)
1638+ 25CC
1639+ 25CC              //  ______________________________________________________________________
1640+ 25CC              //
1641+ 25CC              // nip          n1 n2 -- n2
1642+ 25CC              // drops the second elemento on the stack
1643+ 25CC                              New_Def NIP, "NIP", is_code, is_normal
1643+ 25CC             >
1643+ 25CC             >Dict_Ptr        defl    $
1643+ 25CC             >
1643+ 25CC             >//              ______________________________________________________________________
1643+ 25CC             >//              Heap part
1643+ 25CC             >
1643+ 25CC             >
1643+ 25CC             >                org     (Heap_Ptr & $1FFF) + $E000
1643+ E2EE             >
1643+ E2EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1643+ E2EE             >Latest_Definition defl  Heap_Ptr
1643+ E2EE             >
1643+ E2EE             >                // dummy db directives used to calculate length of namec
1643+ E2EE 4E 49 50    >                db      "NIP"
1643+ E2F1             >len_NFA         defl    $ - temp_NFA
1643+ E2F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1643+ E2EE             >
1643+ E2EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1643+ E2EF 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1643+ E2F2             >                org     $-1                 // alter last byte of Name just above to set
1643+ E2F1 D0          >                db      {b $} | END_BIT     // msb as name end
1643+ E2F2             >
1643+ E2F2 E5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1643+ E2F4             >Prev_Ptr        defl    Heap_Ptr
1643+ E2F4             >
1643+ E2F4             >mirror_Ptr      defl    $
1643+ E2F4             >
1643+ E2F4 CE 25       >                dw      Dict_Ptr + 2        // xt
1643+ E2F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1643+ E2F6             >
1643+ E2F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1643+ E2F6             >
1643+ E2F6             >//              ______________________________________________________________________
1643+ E2F6             >//              Dictionary part
1643+ E2F6             >
1643+ E2F6             >                org     Dict_Ptr
1643+ 25CC             >
1643+ 25CC F4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1643+ 25CE             >
1643+ 25CE             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1643+ 25CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1643+ 25CE ~           >
1643+ 25CE ~           >
1643+ 25CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1643+ 25CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1643+ 25CE             >
1643+ 25CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1644+ 25CE
1645+ 25CE E1                           pop     hl                  // < n1 discarded
1646+ 25CF E3                           ex      (sp), hl
1647+ 25D0                              next
1647+ 25D0 DD E9       >                jp      (ix)
1648+ 25D2
1649+ 25D2              //  ______________________________________________________________________
1650+ 25D2              //
1651+ 25D2              // tuck         n1 n2 -- n2 n1 n2
1652+ 25D2              // copy the top element after the second.
1653+ 25D2                              New_Def TUCK, "TUCK", is_code, is_normal
1653+ 25D2             >
1653+ 25D2             >Dict_Ptr        defl    $
1653+ 25D2             >
1653+ 25D2             >//              ______________________________________________________________________
1653+ 25D2             >//              Heap part
1653+ 25D2             >
1653+ 25D2             >
1653+ 25D2             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E2F6             >
1653+ E2F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E2F6             >Latest_Definition defl  Heap_Ptr
1653+ E2F6             >
1653+ E2F6             >                // dummy db directives used to calculate length of namec
1653+ E2F6 54 55 43 4B >                db      "TUCK"
1653+ E2FA             >len_NFA         defl    $ - temp_NFA
1653+ E2FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E2F6             >
1653+ E2F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E2F7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1653+ E2FB             >                org     $-1                 // alter last byte of Name just above to set
1653+ E2FA CB          >                db      {b $} | END_BIT     // msb as name end
1653+ E2FB             >
1653+ E2FB EE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E2FD             >Prev_Ptr        defl    Heap_Ptr
1653+ E2FD             >
1653+ E2FD             >mirror_Ptr      defl    $
1653+ E2FD             >
1653+ E2FD D4 25       >                dw      Dict_Ptr + 2        // xt
1653+ E2FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E2FF             >
1653+ E2FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E2FF             >
1653+ E2FF             >//              ______________________________________________________________________
1653+ E2FF             >//              Dictionary part
1653+ E2FF             >
1653+ E2FF             >                org     Dict_Ptr
1653+ 25D2             >
1653+ 25D2 FD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 25D4             >
1653+ 25D4             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 25D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1653+ 25D4 ~           >
1653+ 25D4 ~           >
1653+ 25D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 25D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 25D4             >
1653+ 25D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 25D4 E1                           pop     hl
1655+ 25D5 F1                           pop     af                  // < n1
1656+ 25D6 E5                           push    hl                  // > n2  and TOS
1657+ 25D7 F5                           push    af                  // > n1
1658+ 25D8 E5                           push    hl
1659+ 25D9                              next
1659+ 25D9 DD E9       >                jp      (ix)
1660+ 25DB
1661+ 25DB              //  ______________________________________________________________________
1662+ 25DB              //
1663+ 25DB              // swap         n1 n2 -- n2 n1
1664+ 25DB              // swaps the two values on top of stack
1665+ 25DB                              New_Def SWAP, "SWAP", is_code, is_normal
1665+ 25DB             >
1665+ 25DB             >Dict_Ptr        defl    $
1665+ 25DB             >
1665+ 25DB             >//              ______________________________________________________________________
1665+ 25DB             >//              Heap part
1665+ 25DB             >
1665+ 25DB             >
1665+ 25DB             >                org     (Heap_Ptr & $1FFF) + $E000
1665+ E2FF             >
1665+ E2FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1665+ E2FF             >Latest_Definition defl  Heap_Ptr
1665+ E2FF             >
1665+ E2FF             >                // dummy db directives used to calculate length of namec
1665+ E2FF 53 57 41 50 >                db      "SWAP"
1665+ E303             >len_NFA         defl    $ - temp_NFA
1665+ E303             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1665+ E2FF             >
1665+ E2FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1665+ E300 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1665+ E304             >                org     $-1                 // alter last byte of Name just above to set
1665+ E303 D0          >                db      {b $} | END_BIT     // msb as name end
1665+ E304             >
1665+ E304 F6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1665+ E306             >Prev_Ptr        defl    Heap_Ptr
1665+ E306             >
1665+ E306             >mirror_Ptr      defl    $
1665+ E306             >
1665+ E306 DD 25       >                dw      Dict_Ptr + 2        // xt
1665+ E308             >Heap_Ptr        defl    $ - $E000           // save current HP
1665+ E308             >
1665+ E308             >Current_HP      defl  $ - $E000             // used to set HP once!
1665+ E308             >
1665+ E308             >//              ______________________________________________________________________
1665+ E308             >//              Dictionary part
1665+ E308             >
1665+ E308             >                org     Dict_Ptr
1665+ 25DB             >
1665+ 25DB 06 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1665+ 25DD             >
1665+ 25DD             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1665+ 25DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1665+ 25DD ~           >
1665+ 25DD ~           >
1665+ 25DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1665+ 25DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1665+ 25DD             >
1665+ 25DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1666+ 25DD E1                           pop     hl                  // < n1
1667+ 25DE E3                           ex      (sp),hl             // > n2
1668+ 25DF E5                           push    hl                  // copy n1 to TOS
1669+ 25E0                              next
1669+ 25E0 DD E9       >                jp      (ix)
1670+ 25E2
1671+ 25E2              //  ______________________________________________________________________
1672+ 25E2              //
1673+ 25E2              // dup         n -- n n
1674+ 25E2              // duplicates the top value of stack
1675+ 25E2                              New_Def DUP, "DUP", is_code, is_normal
1675+ 25E2             >
1675+ 25E2             >Dict_Ptr        defl    $
1675+ 25E2             >
1675+ 25E2             >//              ______________________________________________________________________
1675+ 25E2             >//              Heap part
1675+ 25E2             >
1675+ 25E2             >
1675+ 25E2             >                org     (Heap_Ptr & $1FFF) + $E000
1675+ E308             >
1675+ E308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1675+ E308             >Latest_Definition defl  Heap_Ptr
1675+ E308             >
1675+ E308             >                // dummy db directives used to calculate length of namec
1675+ E308 44 55 50    >                db      "DUP"
1675+ E30B             >len_NFA         defl    $ - temp_NFA
1675+ E30B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1675+ E308             >
1675+ E308 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1675+ E309 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1675+ E30C             >                org     $-1                 // alter last byte of Name just above to set
1675+ E30B D0          >                db      {b $} | END_BIT     // msb as name end
1675+ E30C             >
1675+ E30C FF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1675+ E30E             >Prev_Ptr        defl    Heap_Ptr
1675+ E30E             >
1675+ E30E             >mirror_Ptr      defl    $
1675+ E30E             >
1675+ E30E E4 25       >                dw      Dict_Ptr + 2        // xt
1675+ E310             >Heap_Ptr        defl    $ - $E000           // save current HP
1675+ E310             >
1675+ E310             >Current_HP      defl  $ - $E000             // used to set HP once!
1675+ E310             >
1675+ E310             >//              ______________________________________________________________________
1675+ E310             >//              Dictionary part
1675+ E310             >
1675+ E310             >                org     Dict_Ptr
1675+ 25E2             >
1675+ 25E2 0E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1675+ 25E4             >
1675+ 25E4             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1675+ 25E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1675+ 25E4 ~           >
1675+ 25E4 ~           >
1675+ 25E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1675+ 25E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1675+ 25E4             >
1675+ 25E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1676+ 25E4 E1                           pop     hl
1677+ 25E5 E5                           push    hl                  // > n duplicate TOS
1678+ 25E6 E5                           push    hl
1679+ 25E7                              next
1679+ 25E7 DD E9       >                jp      (ix)
1680+ 25E9
1681+ 25E9              //  ______________________________________________________________________
1682+ 25E9              //
1683+ 25E9              // rot         n1 n2 n3 -- n2 n3 n1
1684+ 25E9              // Rotates the 3 top values of stack by picking the 3rd in access-order
1685+ 25E9              // and putting it on top. The other two are shifted down one place.
1686+ 25E9                              New_Def ROT, "ROT", is_code, is_normal
1686+ 25E9             >
1686+ 25E9             >Dict_Ptr        defl    $
1686+ 25E9             >
1686+ 25E9             >//              ______________________________________________________________________
1686+ 25E9             >//              Heap part
1686+ 25E9             >
1686+ 25E9             >
1686+ 25E9             >                org     (Heap_Ptr & $1FFF) + $E000
1686+ E310             >
1686+ E310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1686+ E310             >Latest_Definition defl  Heap_Ptr
1686+ E310             >
1686+ E310             >                // dummy db directives used to calculate length of namec
1686+ E310 52 4F 54    >                db      "ROT"
1686+ E313             >len_NFA         defl    $ - temp_NFA
1686+ E313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1686+ E310             >
1686+ E310 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1686+ E311 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1686+ E314             >                org     $-1                 // alter last byte of Name just above to set
1686+ E313 D4          >                db      {b $} | END_BIT     // msb as name end
1686+ E314             >
1686+ E314 08 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1686+ E316             >Prev_Ptr        defl    Heap_Ptr
1686+ E316             >
1686+ E316             >mirror_Ptr      defl    $
1686+ E316             >
1686+ E316 EB 25       >                dw      Dict_Ptr + 2        // xt
1686+ E318             >Heap_Ptr        defl    $ - $E000           // save current HP
1686+ E318             >
1686+ E318             >Current_HP      defl  $ - $E000             // used to set HP once!
1686+ E318             >
1686+ E318             >//              ______________________________________________________________________
1686+ E318             >//              Dictionary part
1686+ E318             >
1686+ E318             >                org     Dict_Ptr
1686+ 25E9             >
1686+ 25E9 16 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1686+ 25EB             >
1686+ 25EB             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1686+ 25EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1686+ 25EB ~           >
1686+ 25EB ~           >
1686+ 25EB             >                endif           ; ok        // for other definitions it "points" the correct handler
1686+ 25EB             >                // Use of "; ok" to suppress "warning[fwdref]"
1686+ 25EB             >
1686+ 25EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1687+ 25EB D9                           exx
1688+ 25EC D1                           pop     de                  // < n3
1689+ 25ED E1                           pop     hl                  // < n2
1690+ 25EE E3                           ex      (sp),hl             // > n2 < n1
1691+ 25EF D5                           push    de                  // > n3
1692+ 25F0 E5                           push    hl                  // copy n1 to TOS
1693+ 25F1 D9                           exx
1694+ 25F2                              next
1694+ 25F2 DD E9       >                jp      (ix)
1695+ 25F4
1696+ 25F4              //  ______________________________________________________________________
1697+ 25F4              //
1698+ 25F4              // -rot         n1 n2 n3 -- n3 n1 n2
1699+ 25F4              // Rotates the 3 top values of stack by picking the 1st in access-order
1700+ 25F4              // and putting back to 3rd place. The other two are shifted down one place.
1701+ 25F4                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1701+ 25F4             >
1701+ 25F4             >Dict_Ptr        defl    $
1701+ 25F4             >
1701+ 25F4             >//              ______________________________________________________________________
1701+ 25F4             >//              Heap part
1701+ 25F4             >
1701+ 25F4             >
1701+ 25F4             >                org     (Heap_Ptr & $1FFF) + $E000
1701+ E318             >
1701+ E318             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1701+ E318             >Latest_Definition defl  Heap_Ptr
1701+ E318             >
1701+ E318             >                // dummy db directives used to calculate length of namec
1701+ E318 2D 52 4F 54 >                db      "-ROT"
1701+ E31C             >len_NFA         defl    $ - temp_NFA
1701+ E31C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1701+ E318             >
1701+ E318 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1701+ E319 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1701+ E31D             >                org     $-1                 // alter last byte of Name just above to set
1701+ E31C D4          >                db      {b $} | END_BIT     // msb as name end
1701+ E31D             >
1701+ E31D 10 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1701+ E31F             >Prev_Ptr        defl    Heap_Ptr
1701+ E31F             >
1701+ E31F             >mirror_Ptr      defl    $
1701+ E31F             >
1701+ E31F F6 25       >                dw      Dict_Ptr + 2        // xt
1701+ E321             >Heap_Ptr        defl    $ - $E000           // save current HP
1701+ E321             >
1701+ E321             >Current_HP      defl  $ - $E000             // used to set HP once!
1701+ E321             >
1701+ E321             >//              ______________________________________________________________________
1701+ E321             >//              Dictionary part
1701+ E321             >
1701+ E321             >                org     Dict_Ptr
1701+ 25F4             >
1701+ 25F4 1F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1701+ 25F6             >
1701+ 25F6             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1701+ 25F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1701+ 25F6 ~           >
1701+ 25F6 ~           >
1701+ 25F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1701+ 25F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1701+ 25F6             >
1701+ 25F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1702+ 25F6 D9                           exx
1703+ 25F7 E1                           pop     hl                  // < n3
1704+ 25F8 D1                           pop     de                  // < n2
1705+ 25F9 E3                           ex      (sp),hl             // > n3 < n1
1706+ 25FA E5                           push    hl                  // > n1
1707+ 25FB D5                           push    de                  // copy n3 to TOS
1708+ 25FC D9                           exx
1709+ 25FD                              next
1709+ 25FD DD E9       >                jp      (ix)
1710+ 25FF
1711+ 25FF              //  ______________________________________________________________________
1712+ 25FF              //
1713+ 25FF              // pick        n1 -- nx
1714+ 25FF              // picks the nth element from TOS
1715+ 25FF                              New_Def PICK, "PICK", is_code, is_normal
1715+ 25FF             >
1715+ 25FF             >Dict_Ptr        defl    $
1715+ 25FF             >
1715+ 25FF             >//              ______________________________________________________________________
1715+ 25FF             >//              Heap part
1715+ 25FF             >
1715+ 25FF             >
1715+ 25FF             >                org     (Heap_Ptr & $1FFF) + $E000
1715+ E321             >
1715+ E321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1715+ E321             >Latest_Definition defl  Heap_Ptr
1715+ E321             >
1715+ E321             >                // dummy db directives used to calculate length of namec
1715+ E321 50 49 43 4B >                db      "PICK"
1715+ E325             >len_NFA         defl    $ - temp_NFA
1715+ E325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1715+ E321             >
1715+ E321 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1715+ E322 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1715+ E326             >                org     $-1                 // alter last byte of Name just above to set
1715+ E325 CB          >                db      {b $} | END_BIT     // msb as name end
1715+ E326             >
1715+ E326 18 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1715+ E328             >Prev_Ptr        defl    Heap_Ptr
1715+ E328             >
1715+ E328             >mirror_Ptr      defl    $
1715+ E328             >
1715+ E328 01 26       >                dw      Dict_Ptr + 2        // xt
1715+ E32A             >Heap_Ptr        defl    $ - $E000           // save current HP
1715+ E32A             >
1715+ E32A             >Current_HP      defl  $ - $E000             // used to set HP once!
1715+ E32A             >
1715+ E32A             >//              ______________________________________________________________________
1715+ E32A             >//              Dictionary part
1715+ E32A             >
1715+ E32A             >                org     Dict_Ptr
1715+ 25FF             >
1715+ 25FF 28 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1715+ 2601             >
1715+ 2601             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1715+ 2601 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1715+ 2601 ~           >
1715+ 2601 ~           >
1715+ 2601             >                endif           ; ok        // for other definitions it "points" the correct handler
1715+ 2601             >                // Use of "; ok" to suppress "warning[fwdref]"
1715+ 2601             >
1715+ 2601             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1716+ 2601 E1                           pop     hl                  // take TOS as index
1717+ 2602 29                           add     hl, hl              // as cells
1718+ 2603 39                           add     hl, sp              // from Stack Pointer
1719+ 2604 7E                           ld      a, (hl)             // replace TOS
1720+ 2605 23                           inc     hl
1721+ 2606 66                           ld      h, (hl)
1722+ 2607 6F                           ld      l, a
1723+ 2608 E5                           push    hl
1724+ 2609                              next
1724+ 2609 DD E9       >                jp      (ix)
1725+ 260B
1726+ 260B
1727+ 260B              //  ______________________________________________________________________
1728+ 260B              //
1729+ 260B              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1730+ 260B              // picks the nth element from TOS
1731+ 260B              //              New_Def ROLL, "ROLL", is_code, is_normal
1732+ 260B              //              exx                     // we need all registers free
1733+ 260B              //              pop     hl              // number of cells to roll
1734+ 260B              //              ld      a, h
1735+ 260B              //              or       l
1736+ 260B              //              jr      z, Roll_Zero
1737+ 260B              //                  add     hl, hl              // number of bytes to move
1738+ 260B              //                  ld      b, h
1739+ 260B              //                  ld      c, l
1740+ 260B              //                  add     hl, sp          // address of n1
1741+ 260B              //                  ld      a, (hl)         // take n1 into a and a,
1742+ 260B              //                  inc     hl
1743+ 260B              //                  ex      af, af'
1744+ 260B              //                  ld      a, (hl)         // take n1 into a and a,
1745+ 260B              //                  ld      d, h
1746+ 260B              //                  ld      e, l
1747+ 260B              //                  dec     hl
1748+ 260B              //                  dec     hl
1749+ 260B              //                  lddr
1750+ 260B              //                  ex      de, hl
1751+ 260B              //                  ld      (hl), a
1752+ 260B              //                  dec     hl
1753+ 260B              //                  ex      af, af'
1754+ 260B              //                  ld      (hl), a
1755+ 260B              //Roll_Zero:
1756+ 260B              //              exx
1757+ 260B              //              next
1758+ 260B
1759+ 260B
1760+ 260B              //  ______________________________________________________________________
1761+ 260B              //
1762+ 260B              // 2over        d1 d2 -- d1 d2 d1
1763+ 260B              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1764+ 260B              // copy the second double of stack and put on top.
1765+ 260B                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1765+ 260B             >
1765+ 260B             >Dict_Ptr        defl    $
1765+ 260B             >
1765+ 260B             >//              ______________________________________________________________________
1765+ 260B             >//              Heap part
1765+ 260B             >
1765+ 260B             >
1765+ 260B             >                org     (Heap_Ptr & $1FFF) + $E000
1765+ E32A             >
1765+ E32A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1765+ E32A             >Latest_Definition defl  Heap_Ptr
1765+ E32A             >
1765+ E32A             >                // dummy db directives used to calculate length of namec
1765+ E32A 32 4F 56 45 >                db      "2OVER"
1765+ E32E 52          >
1765+ E32F             >len_NFA         defl    $ - temp_NFA
1765+ E32F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1765+ E32A             >
1765+ E32A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1765+ E32B 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1765+ E32F 52          >
1765+ E330             >                org     $-1                 // alter last byte of Name just above to set
1765+ E32F D2          >                db      {b $} | END_BIT     // msb as name end
1765+ E330             >
1765+ E330 21 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1765+ E332             >Prev_Ptr        defl    Heap_Ptr
1765+ E332             >
1765+ E332             >mirror_Ptr      defl    $
1765+ E332             >
1765+ E332 0D 26       >                dw      Dict_Ptr + 2        // xt
1765+ E334             >Heap_Ptr        defl    $ - $E000           // save current HP
1765+ E334             >
1765+ E334             >Current_HP      defl  $ - $E000             // used to set HP once!
1765+ E334             >
1765+ E334             >//              ______________________________________________________________________
1765+ E334             >//              Dictionary part
1765+ E334             >
1765+ E334             >                org     Dict_Ptr
1765+ 260B             >
1765+ 260B 32 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1765+ 260D             >
1765+ 260D             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1765+ 260D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1765+ 260D ~           >
1765+ 260D ~           >
1765+ 260D             >                endif           ; ok        // for other definitions it "points" the correct handler
1765+ 260D             >                // Use of "; ok" to suppress "warning[fwdref]"
1765+ 260D             >
1765+ 260D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1766+ 260D D9                           exx
1767+ 260E 21 07 00                     ld      hl, 7
1768+ 2611 39                           add     hl, sp
1769+ 2612 56                           ld      d, (hl)
1770+ 2613 2B                           dec     hl
1771+ 2614 5E                           ld      e, (hl)             // d1-L
1772+ 2615 D5                           push    de
1773+ 2616 2B                           dec     hl
1774+ 2617 56                           ld      d, (hl)
1775+ 2618 2B                           dec     hl
1776+ 2619 5E                           ld      e, (hl)             // d1-H
1777+ 261A D5                           push    de
1778+ 261B D9                           exx
1779+ 261C                              next
1779+ 261C DD E9       >                jp      (ix)
1780+ 261E
1781+ 261E              //  ______________________________________________________________________
1782+ 261E              //
1783+ 261E              // 2drop        d --
1784+ 261E              //              n1 n2 --
1785+ 261E              // drops the top double from stack
1786+ 261E                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1786+ 261E             >
1786+ 261E             >Dict_Ptr        defl    $
1786+ 261E             >
1786+ 261E             >//              ______________________________________________________________________
1786+ 261E             >//              Heap part
1786+ 261E             >
1786+ 261E             >
1786+ 261E             >                org     (Heap_Ptr & $1FFF) + $E000
1786+ E334             >
1786+ E334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1786+ E334             >Latest_Definition defl  Heap_Ptr
1786+ E334             >
1786+ E334             >                // dummy db directives used to calculate length of namec
1786+ E334 32 44 52 4F >                db      "2DROP"
1786+ E338 50          >
1786+ E339             >len_NFA         defl    $ - temp_NFA
1786+ E339             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1786+ E334             >
1786+ E334 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1786+ E335 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1786+ E339 50          >
1786+ E33A             >                org     $-1                 // alter last byte of Name just above to set
1786+ E339 D0          >                db      {b $} | END_BIT     // msb as name end
1786+ E33A             >
1786+ E33A 2A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1786+ E33C             >Prev_Ptr        defl    Heap_Ptr
1786+ E33C             >
1786+ E33C             >mirror_Ptr      defl    $
1786+ E33C             >
1786+ E33C 20 26       >                dw      Dict_Ptr + 2        // xt
1786+ E33E             >Heap_Ptr        defl    $ - $E000           // save current HP
1786+ E33E             >
1786+ E33E             >Current_HP      defl  $ - $E000             // used to set HP once!
1786+ E33E             >
1786+ E33E             >//              ______________________________________________________________________
1786+ E33E             >//              Dictionary part
1786+ E33E             >
1786+ E33E             >                org     Dict_Ptr
1786+ 261E             >
1786+ 261E 3C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1786+ 2620             >
1786+ 2620             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1786+ 2620 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1786+ 2620 ~           >
1786+ 2620 ~           >
1786+ 2620             >                endif           ; ok        // for other definitions it "points" the correct handler
1786+ 2620             >                // Use of "; ok" to suppress "warning[fwdref]"
1786+ 2620             >
1786+ 2620             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1787+ 2620 E1                           pop     hl
1788+ 2621 E1                           pop     hl
1789+ 2622                              next
1789+ 2622 DD E9       >                jp      (ix)
1790+ 2624
1791+ 2624              //  ______________________________________________________________________
1792+ 2624              //
1793+ 2624              // 2nip         d1 d2 -- d2
1794+ 2624              //              n1 n2 n3 n4 -- n3 n4
1795+ 2624              // drops the second double on the stack
1796+ 2624              //              New_Def TWO_NIP, 4, "2nip"
1797+ 2624              //              ...
1798+ 2624
1799+ 2624              //  ______________________________________________________________________
1800+ 2624              //
1801+ 2624              // 2tuck         d1 d2 -- d2 d1 d2
1802+ 2624              // copy the top element after the second.
1803+ 2624              //              New_Def TWO_TUCK, 5, "2tuck"
1804+ 2624              //              ...
1805+ 2624
1806+ 2624              //  ______________________________________________________________________
1807+ 2624              //
1808+ 2624              // 2swap         d1 d2 -- d2 d1
1809+ 2624              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1810+ 2624              // swaps the two doubles on top of stack
1811+ 2624                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1811+ 2624             >
1811+ 2624             >Dict_Ptr        defl    $
1811+ 2624             >
1811+ 2624             >//              ______________________________________________________________________
1811+ 2624             >//              Heap part
1811+ 2624             >
1811+ 2624             >
1811+ 2624             >                org     (Heap_Ptr & $1FFF) + $E000
1811+ E33E             >
1811+ E33E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1811+ E33E             >Latest_Definition defl  Heap_Ptr
1811+ E33E             >
1811+ E33E             >                // dummy db directives used to calculate length of namec
1811+ E33E 32 53 57 41 >                db      "2SWAP"
1811+ E342 50          >
1811+ E343             >len_NFA         defl    $ - temp_NFA
1811+ E343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1811+ E33E             >
1811+ E33E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1811+ E33F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1811+ E343 50          >
1811+ E344             >                org     $-1                 // alter last byte of Name just above to set
1811+ E343 D0          >                db      {b $} | END_BIT     // msb as name end
1811+ E344             >
1811+ E344 34 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1811+ E346             >Prev_Ptr        defl    Heap_Ptr
1811+ E346             >
1811+ E346             >mirror_Ptr      defl    $
1811+ E346             >
1811+ E346 26 26       >                dw      Dict_Ptr + 2        // xt
1811+ E348             >Heap_Ptr        defl    $ - $E000           // save current HP
1811+ E348             >
1811+ E348             >Current_HP      defl  $ - $E000             // used to set HP once!
1811+ E348             >
1811+ E348             >//              ______________________________________________________________________
1811+ E348             >//              Dictionary part
1811+ E348             >
1811+ E348             >                org     Dict_Ptr
1811+ 2624             >
1811+ 2624 46 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1811+ 2626             >
1811+ 2626             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1811+ 2626 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1811+ 2626 ~           >
1811+ 2626 ~           >
1811+ 2626             >                endif           ; ok        // for other definitions it "points" the correct handler
1811+ 2626             >                // Use of "; ok" to suppress "warning[fwdref]"
1811+ 2626             >
1811+ 2626             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1812+ 2626 D9                           exx
1813+ 2627 F1                           pop     af                  //   d2-H
1814+ 2628 E1                           pop     hl                  // < d2-L
1815+ 2629 D1                           pop     de                  // < d1-H
1816+ 262A E3                           ex      (sp), hl            // < d1-L > d2-L
1817+ 262B F5                           push    af                  // > d2-H
1818+ 262C E5                           push    hl                  // > d1-L
1819+ 262D D5                           push    de
1820+ 262E D9                           exx
1821+ 262F                              next
1821+ 262F DD E9       >                jp      (ix)
1822+ 2631
1823+ 2631              //  ______________________________________________________________________
1824+ 2631              //
1825+ 2631              // 2dup         d -- d d
1826+ 2631              //              n1 n2 -- n1 n2 n1 n2
1827+ 2631              // duplicates the top double of stack
1828+ 2631                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1828+ 2631             >
1828+ 2631             >Dict_Ptr        defl    $
1828+ 2631             >
1828+ 2631             >//              ______________________________________________________________________
1828+ 2631             >//              Heap part
1828+ 2631             >
1828+ 2631             >
1828+ 2631             >                org     (Heap_Ptr & $1FFF) + $E000
1828+ E348             >
1828+ E348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1828+ E348             >Latest_Definition defl  Heap_Ptr
1828+ E348             >
1828+ E348             >                // dummy db directives used to calculate length of namec
1828+ E348 32 44 55 50 >                db      "2DUP"
1828+ E34C             >len_NFA         defl    $ - temp_NFA
1828+ E34C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1828+ E348             >
1828+ E348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1828+ E349 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1828+ E34D             >                org     $-1                 // alter last byte of Name just above to set
1828+ E34C D0          >                db      {b $} | END_BIT     // msb as name end
1828+ E34D             >
1828+ E34D 3E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1828+ E34F             >Prev_Ptr        defl    Heap_Ptr
1828+ E34F             >
1828+ E34F             >mirror_Ptr      defl    $
1828+ E34F             >
1828+ E34F 33 26       >                dw      Dict_Ptr + 2        // xt
1828+ E351             >Heap_Ptr        defl    $ - $E000           // save current HP
1828+ E351             >
1828+ E351             >Current_HP      defl  $ - $E000             // used to set HP once!
1828+ E351             >
1828+ E351             >//              ______________________________________________________________________
1828+ E351             >//              Dictionary part
1828+ E351             >
1828+ E351             >                org     Dict_Ptr
1828+ 2631             >
1828+ 2631 4F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1828+ 2633             >
1828+ 2633             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1828+ 2633 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1828+ 2633 ~           >
1828+ 2633 ~           >
1828+ 2633             >                endif           ; ok        // for other definitions it "points" the correct handler
1828+ 2633             >                // Use of "; ok" to suppress "warning[fwdref]"
1828+ 2633             >
1828+ 2633             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1829+ 2633 E1                           pop     hl                  // < d-H
1830+ 2634 F1                           pop     af                  // < d-L
1831+ 2635 F5                           push    af                  // < d-L
1832+ 2636 E5                           push    hl                  // > d-H
1833+ 2637 F5                           push    af                  // > d-L
1834+ 2638 E5                           push    hl                  // > d-H
1835+ 2639                              next
1835+ 2639 DD E9       >                jp      (ix)
1836+ 263B
1837+ 263B              //  ______________________________________________________________________
1838+ 263B              //
1839+ 263B              // 2rot         d1 d2 d3 -- d2 d3 d1
1840+ 263B              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1841+ 263B              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1842+ 263B              // and putting it on top. The other two are shifted down one place.
1843+ 263B              //              New_Def TWO?ROT, 4, "2rot"
1844+ 263B              //              ...
1845+ 263B              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1846+ 263B              //
1847+ 263B              //      d3  |d2  |d1  |
1848+ 263B              //      h l |h l |h l |
1849+ 263B              // SP   LHED|LHED|LHED|
1850+ 263B              // SP  +0123|4567|89ab|
1851+ 263B              //              ld      hl, $000B
1852+ 263B              //              add     hl, sp
1853+ 263B              //              ld      d, (hl)
1854+ 263B              //              dec     hl
1855+ 263B              //              ld      e, (hl)
1856+ 263B              //              dec     hl
1857+ 263B              //              push    de
1858+ 263B              //              ld      d, (hl)
1859+ 263B              //              dec     hl
1860+ 263B              //              ld      e, (hl)
1861+ 263B              //              dec     hl
1862+ 263B              //              push    de
1863+ 263B
1864+ 263B              //      d1  |d3  |d2  |d1  |
1865+ 263B              //      h l |h l |h l |h l |
1866+ 263B              // SP   LHED|LHED|LHED|LHED|
1867+ 263B              // SP       +0123|4567|89ab|
1868+ 263B
1869+ 263B              //              ld      d, h
1870+ 263B              //              ld      e, l
1871+ 263B              //              inc     de
1872+ 263B              //              inc     de
1873+ 263B              //              inc     de
1874+ 263B              //              inc     de
1875+ 263B              //              push    bc
1876+ 263B              //              ld      bc, $000C
1877+ 263B              //              lddr
1878+ 263B              //              pop     bc
1879+ 263B              //              pop     de
1880+ 263B              //              pop     de
1881+ 263B              //
1882+ 263B              //              next
1883+ 263B
1884+ 263B
1885+ 263B              //  ______________________________________________________________________
1886+ 263B              //
1887+ 263B              // +!           n a --
1888+ 263B              // Sums to the content of address a the number n.
1889+ 263B              // It is the same of  a @ n + a !
1890+ 263B                              New_Def PLUSSTORE, "+!", is_code, is_normal
1890+ 263B             >
1890+ 263B             >Dict_Ptr        defl    $
1890+ 263B             >
1890+ 263B             >//              ______________________________________________________________________
1890+ 263B             >//              Heap part
1890+ 263B             >
1890+ 263B             >
1890+ 263B             >                org     (Heap_Ptr & $1FFF) + $E000
1890+ E351             >
1890+ E351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ E351             >Latest_Definition defl  Heap_Ptr
1890+ E351             >
1890+ E351             >                // dummy db directives used to calculate length of namec
1890+ E351 2B 21       >                db      "+!"
1890+ E353             >len_NFA         defl    $ - temp_NFA
1890+ E353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ E351             >
1890+ E351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ E352 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1890+ E354             >                org     $-1                 // alter last byte of Name just above to set
1890+ E353 A1          >                db      {b $} | END_BIT     // msb as name end
1890+ E354             >
1890+ E354 48 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1890+ E356             >Prev_Ptr        defl    Heap_Ptr
1890+ E356             >
1890+ E356             >mirror_Ptr      defl    $
1890+ E356             >
1890+ E356 3D 26       >                dw      Dict_Ptr + 2        // xt
1890+ E358             >Heap_Ptr        defl    $ - $E000           // save current HP
1890+ E358             >
1890+ E358             >Current_HP      defl  $ - $E000             // used to set HP once!
1890+ E358             >
1890+ E358             >//              ______________________________________________________________________
1890+ E358             >//              Dictionary part
1890+ E358             >
1890+ E358             >                org     Dict_Ptr
1890+ 263B             >
1890+ 263B 56 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1890+ 263D             >
1890+ 263D             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 263D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1890+ 263D ~           >
1890+ 263D ~           >
1890+ 263D             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 263D             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 263D             >
1890+ 263D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 263D D9                           exx
1892+ 263E E1                           pop     hl                  // hl is the address
1893+ 263F D1                           pop     de                  // de is the number
1894+ 2640 7E                           ld      a, (hl)
1895+ 2641 83                           add     e
1896+ 2642 77                           ld      (hl), a
1897+ 2643 23                           inc     hl
1898+ 2644 7E                           ld      a, (hl)
1899+ 2645 8A                           adc     d
1900+ 2646 77                           ld      (hl), a
1901+ 2647 D9                           exx
1902+ 2648                              next
1902+ 2648 DD E9       >                jp      (ix)
1903+ 264A
1904+ 264A              //  ______________________________________________________________________
1905+ 264A              //
1906+ 264A              // toggle       a n --
1907+ 264A              // Complements (xor) the byte at addrress  a  with the model n.
1908+ 264A                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1908+ 264A             >
1908+ 264A             >Dict_Ptr        defl    $
1908+ 264A             >
1908+ 264A             >//              ______________________________________________________________________
1908+ 264A             >//              Heap part
1908+ 264A             >
1908+ 264A             >
1908+ 264A             >                org     (Heap_Ptr & $1FFF) + $E000
1908+ E358             >
1908+ E358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1908+ E358             >Latest_Definition defl  Heap_Ptr
1908+ E358             >
1908+ E358             >                // dummy db directives used to calculate length of namec
1908+ E358 54 4F 47 47 >                db      "TOGGLE"
1908+ E35C 4C 45       >
1908+ E35E             >len_NFA         defl    $ - temp_NFA
1908+ E35E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1908+ E358             >
1908+ E358 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1908+ E359 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1908+ E35D 4C 45       >
1908+ E35F             >                org     $-1                 // alter last byte of Name just above to set
1908+ E35E C5          >                db      {b $} | END_BIT     // msb as name end
1908+ E35F             >
1908+ E35F 51 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1908+ E361             >Prev_Ptr        defl    Heap_Ptr
1908+ E361             >
1908+ E361             >mirror_Ptr      defl    $
1908+ E361             >
1908+ E361 4C 26       >                dw      Dict_Ptr + 2        // xt
1908+ E363             >Heap_Ptr        defl    $ - $E000           // save current HP
1908+ E363             >
1908+ E363             >Current_HP      defl  $ - $E000             // used to set HP once!
1908+ E363             >
1908+ E363             >//              ______________________________________________________________________
1908+ E363             >//              Dictionary part
1908+ E363             >
1908+ E363             >                org     Dict_Ptr
1908+ 264A             >
1908+ 264A 61 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1908+ 264C             >
1908+ 264C             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1908+ 264C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1908+ 264C ~           >
1908+ 264C ~           >
1908+ 264C             >                endif           ; ok        // for other definitions it "points" the correct handler
1908+ 264C             >                // Use of "; ok" to suppress "warning[fwdref]"
1908+ 264C             >
1908+ 264C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1909+ 264C E1                           pop     hl
1910+ 264D 7D                           ld      a, l
1911+ 264E E1                           pop     hl
1912+ 264F AE                           xor     (hl)
1913+ 2650 77                           ld      (hl), a
1914+ 2651
1915+ 2651                              next
1915+ 2651 DD E9       >                jp      (ix)
1916+ 2653
1917+ 2653              //  ______________________________________________________________________
1918+ 2653              //
1919+ 2653              // @            a -- n
1920+ 2653              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1921+ 2653                              New_Def FETCH, "@", is_code, is_normal
1921+ 2653             >
1921+ 2653             >Dict_Ptr        defl    $
1921+ 2653             >
1921+ 2653             >//              ______________________________________________________________________
1921+ 2653             >//              Heap part
1921+ 2653             >
1921+ 2653             >
1921+ 2653             >                org     (Heap_Ptr & $1FFF) + $E000
1921+ E363             >
1921+ E363             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1921+ E363             >Latest_Definition defl  Heap_Ptr
1921+ E363             >
1921+ E363             >                // dummy db directives used to calculate length of namec
1921+ E363 40          >                db      "@"
1921+ E364             >len_NFA         defl    $ - temp_NFA
1921+ E364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1921+ E363             >
1921+ E363 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1921+ E364 40          >                db      "@"               // name string in 7-bit ascii, but
1921+ E365             >                org     $-1                 // alter last byte of Name just above to set
1921+ E364 C0          >                db      {b $} | END_BIT     // msb as name end
1921+ E365             >
1921+ E365 58 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1921+ E367             >Prev_Ptr        defl    Heap_Ptr
1921+ E367             >
1921+ E367             >mirror_Ptr      defl    $
1921+ E367             >
1921+ E367 55 26       >                dw      Dict_Ptr + 2        // xt
1921+ E369             >Heap_Ptr        defl    $ - $E000           // save current HP
1921+ E369             >
1921+ E369             >Current_HP      defl  $ - $E000             // used to set HP once!
1921+ E369             >
1921+ E369             >//              ______________________________________________________________________
1921+ E369             >//              Dictionary part
1921+ E369             >
1921+ E369             >                org     Dict_Ptr
1921+ 2653             >
1921+ 2653 67 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1921+ 2655             >
1921+ 2655             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1921+ 2655 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1921+ 2655 ~           >
1921+ 2655 ~           >
1921+ 2655             >                endif           ; ok        // for other definitions it "points" the correct handler
1921+ 2655             >                // Use of "; ok" to suppress "warning[fwdref]"
1921+ 2655             >
1921+ 2655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1922+ 2655 E1                           pop     hl
1923+ 2656 7E                           ld      a, (hl)             // low-byte
1924+ 2657 23                           inc     hl
1925+ 2658 66                           ld      h, (hl)             // high-byte
1926+ 2659 6F                           ld      l, a
1927+ 265A E5                           push    hl
1928+ 265B                              next
1928+ 265B DD E9       >                jp      (ix)
1929+ 265D
1930+ 265D              //  ______________________________________________________________________
1931+ 265D              //
1932+ 265D              // !            n a --
1933+ 265D              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1934+ 265D                              New_Def STORE, "!", is_code, is_normal
1934+ 265D             >
1934+ 265D             >Dict_Ptr        defl    $
1934+ 265D             >
1934+ 265D             >//              ______________________________________________________________________
1934+ 265D             >//              Heap part
1934+ 265D             >
1934+ 265D             >
1934+ 265D             >                org     (Heap_Ptr & $1FFF) + $E000
1934+ E369             >
1934+ E369             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1934+ E369             >Latest_Definition defl  Heap_Ptr
1934+ E369             >
1934+ E369             >                // dummy db directives used to calculate length of namec
1934+ E369 21          >                db      "!"
1934+ E36A             >len_NFA         defl    $ - temp_NFA
1934+ E36A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1934+ E369             >
1934+ E369 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1934+ E36A 21          >                db      "!"               // name string in 7-bit ascii, but
1934+ E36B             >                org     $-1                 // alter last byte of Name just above to set
1934+ E36A A1          >                db      {b $} | END_BIT     // msb as name end
1934+ E36B             >
1934+ E36B 63 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1934+ E36D             >Prev_Ptr        defl    Heap_Ptr
1934+ E36D             >
1934+ E36D             >mirror_Ptr      defl    $
1934+ E36D             >
1934+ E36D 5F 26       >                dw      Dict_Ptr + 2        // xt
1934+ E36F             >Heap_Ptr        defl    $ - $E000           // save current HP
1934+ E36F             >
1934+ E36F             >Current_HP      defl  $ - $E000             // used to set HP once!
1934+ E36F             >
1934+ E36F             >//              ______________________________________________________________________
1934+ E36F             >//              Dictionary part
1934+ E36F             >
1934+ E36F             >                org     Dict_Ptr
1934+ 265D             >
1934+ 265D 6D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1934+ 265F             >
1934+ 265F             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1934+ 265F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1934+ 265F ~           >
1934+ 265F ~           >
1934+ 265F             >                endif           ; ok        // for other definitions it "points" the correct handler
1934+ 265F             >                // Use of "; ok" to suppress "warning[fwdref]"
1934+ 265F             >
1934+ 265F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1935+ 265F D9                           exx
1936+ 2660 E1                           pop     hl                  // address
1937+ 2661 D1                           pop     de                  // < n
1938+ 2662 73                           ld      (hl), e             // low-byte
1939+ 2663 23                           inc     hl
1940+ 2664 72                           ld      (hl), d             // high-byte
1941+ 2665 D9                           exx
1942+ 2666                              next
1942+ 2666 DD E9       >                jp      (ix)
1943+ 2668
1944+ 2668              //  ______________________________________________________________________
1945+ 2668              //
1946+ 2668              // c@           a -- c
1947+ 2668              // fetch a character n from address a
1948+ 2668                              New_Def CFETCH, "C@", is_code, is_normal
1948+ 2668             >
1948+ 2668             >Dict_Ptr        defl    $
1948+ 2668             >
1948+ 2668             >//              ______________________________________________________________________
1948+ 2668             >//              Heap part
1948+ 2668             >
1948+ 2668             >
1948+ 2668             >                org     (Heap_Ptr & $1FFF) + $E000
1948+ E36F             >
1948+ E36F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1948+ E36F             >Latest_Definition defl  Heap_Ptr
1948+ E36F             >
1948+ E36F             >                // dummy db directives used to calculate length of namec
1948+ E36F 43 40       >                db      "C@"
1948+ E371             >len_NFA         defl    $ - temp_NFA
1948+ E371             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1948+ E36F             >
1948+ E36F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1948+ E370 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1948+ E372             >                org     $-1                 // alter last byte of Name just above to set
1948+ E371 C0          >                db      {b $} | END_BIT     // msb as name end
1948+ E372             >
1948+ E372 69 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1948+ E374             >Prev_Ptr        defl    Heap_Ptr
1948+ E374             >
1948+ E374             >mirror_Ptr      defl    $
1948+ E374             >
1948+ E374 6A 26       >                dw      Dict_Ptr + 2        // xt
1948+ E376             >Heap_Ptr        defl    $ - $E000           // save current HP
1948+ E376             >
1948+ E376             >Current_HP      defl  $ - $E000             // used to set HP once!
1948+ E376             >
1948+ E376             >//              ______________________________________________________________________
1948+ E376             >//              Dictionary part
1948+ E376             >
1948+ E376             >                org     Dict_Ptr
1948+ 2668             >
1948+ 2668 74 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1948+ 266A             >
1948+ 266A             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1948+ 266A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1948+ 266A ~           >
1948+ 266A ~           >
1948+ 266A             >                endif           ; ok        // for other definitions it "points" the correct handler
1948+ 266A             >                // Use of "; ok" to suppress "warning[fwdref]"
1948+ 266A             >
1948+ 266A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1949+ 266A E1                           pop     hl
1950+ 266B 6E                           ld      l, (hl)             // low-byte
1951+ 266C 26 00                        ld      h, 0
1952+ 266E
1953+ 266E                              psh1
1953+ 266E E5          >                push    hl
1953+ 266F DD E9       >                jp      (ix)
1954+ 2671
1955+ 2671              //  ______________________________________________________________________
1956+ 2671              //
1957+ 2671              // c!           c a --
1958+ 2671              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1959+ 2671                              New_Def CSTORE, "C!", is_code, is_normal
1959+ 2671             >
1959+ 2671             >Dict_Ptr        defl    $
1959+ 2671             >
1959+ 2671             >//              ______________________________________________________________________
1959+ 2671             >//              Heap part
1959+ 2671             >
1959+ 2671             >
1959+ 2671             >                org     (Heap_Ptr & $1FFF) + $E000
1959+ E376             >
1959+ E376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1959+ E376             >Latest_Definition defl  Heap_Ptr
1959+ E376             >
1959+ E376             >                // dummy db directives used to calculate length of namec
1959+ E376 43 21       >                db      "C!"
1959+ E378             >len_NFA         defl    $ - temp_NFA
1959+ E378             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1959+ E376             >
1959+ E376 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1959+ E377 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1959+ E379             >                org     $-1                 // alter last byte of Name just above to set
1959+ E378 A1          >                db      {b $} | END_BIT     // msb as name end
1959+ E379             >
1959+ E379 6F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1959+ E37B             >Prev_Ptr        defl    Heap_Ptr
1959+ E37B             >
1959+ E37B             >mirror_Ptr      defl    $
1959+ E37B             >
1959+ E37B 73 26       >                dw      Dict_Ptr + 2        // xt
1959+ E37D             >Heap_Ptr        defl    $ - $E000           // save current HP
1959+ E37D             >
1959+ E37D             >Current_HP      defl  $ - $E000             // used to set HP once!
1959+ E37D             >
1959+ E37D             >//              ______________________________________________________________________
1959+ E37D             >//              Dictionary part
1959+ E37D             >
1959+ E37D             >                org     Dict_Ptr
1959+ 2671             >
1959+ 2671 7B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1959+ 2673             >
1959+ 2673             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1959+ 2673 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1959+ 2673 ~           >
1959+ 2673 ~           >
1959+ 2673             >                endif           ; ok        // for other definitions it "points" the correct handler
1959+ 2673             >                // Use of "; ok" to suppress "warning[fwdref]"
1959+ 2673             >
1959+ 2673             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1960+ 2673 D9                           exx
1961+ 2674 E1                           pop     hl                  // < address
1962+ 2675 D1                           pop     de
1963+ 2676 73                           ld      (hl), e             // low-byte
1964+ 2677 D9                           exx
1965+ 2678                              next
1965+ 2678 DD E9       >                jp      (ix)
1966+ 267A
1967+ 267A              //  ______________________________________________________________________
1968+ 267A              //
1969+ 267A              // 2@           a -- d
1970+ 267A              // fetch a 32 bits number d from address a and leaves it on top of the
1971+ 267A              // stack as two single numbers, high part as top of the stack.
1972+ 267A              // A double number is normally kept in CPU registers as HLDE.
1973+ 267A              // On stack a double number is treated as two single numbers
1974+ 267A              // where BC is on the top of the stack and HL is the second from top,
1975+ 267A              // so the sign of the number can be checked on top of stack
1976+ 267A              // and in the stack memory it appears as LHED.
1977+ 267A                              New_Def TWO_FETCH, "2@", is_code, is_normal
1977+ 267A             >
1977+ 267A             >Dict_Ptr        defl    $
1977+ 267A             >
1977+ 267A             >//              ______________________________________________________________________
1977+ 267A             >//              Heap part
1977+ 267A             >
1977+ 267A             >
1977+ 267A             >                org     (Heap_Ptr & $1FFF) + $E000
1977+ E37D             >
1977+ E37D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1977+ E37D             >Latest_Definition defl  Heap_Ptr
1977+ E37D             >
1977+ E37D             >                // dummy db directives used to calculate length of namec
1977+ E37D 32 40       >                db      "2@"
1977+ E37F             >len_NFA         defl    $ - temp_NFA
1977+ E37F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1977+ E37D             >
1977+ E37D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1977+ E37E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1977+ E380             >                org     $-1                 // alter last byte of Name just above to set
1977+ E37F C0          >                db      {b $} | END_BIT     // msb as name end
1977+ E380             >
1977+ E380 76 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1977+ E382             >Prev_Ptr        defl    Heap_Ptr
1977+ E382             >
1977+ E382             >mirror_Ptr      defl    $
1977+ E382             >
1977+ E382 7C 26       >                dw      Dict_Ptr + 2        // xt
1977+ E384             >Heap_Ptr        defl    $ - $E000           // save current HP
1977+ E384             >
1977+ E384             >Current_HP      defl  $ - $E000             // used to set HP once!
1977+ E384             >
1977+ E384             >//              ______________________________________________________________________
1977+ E384             >//              Dictionary part
1977+ E384             >
1977+ E384             >                org     Dict_Ptr
1977+ 267A             >
1977+ 267A 82 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1977+ 267C             >
1977+ 267C             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1977+ 267C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1977+ 267C ~           >
1977+ 267C ~           >
1977+ 267C             >                endif           ; ok        // for other definitions it "points" the correct handler
1977+ 267C             >                // Use of "; ok" to suppress "warning[fwdref]"
1977+ 267C             >
1977+ 267C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1978+ 267C D9                           exx
1979+ 267D E1                           pop     hl                  // address
1980+ 267E 5E                           ld      e, (hl)             // low-byte
1981+ 267F 23                           inc     hl
1982+ 2680 56                           ld      d, (hl)             // high-byte
1983+ 2681 23                           inc     hl
1984+ 2682 7E                           ld      a, (hl)             // low-byte
1985+ 2683 23                           inc     hl
1986+ 2684 66                           ld      h, (hl)             // high-byte
1987+ 2685 6F                           ld      l, a
1988+ 2686 E5                           push    hl
1989+ 2687 D5                           push    de
1990+ 2688 D9                           exx
1991+ 2689                              next
1991+ 2689 DD E9       >                jp      (ix)
1992+ 268B
1993+ 268B              //  ______________________________________________________________________
1994+ 268B              //
1995+ 268B              // 2!           d a --
1996+ 268B              // stores a 32 bits number d from address a and leaves it on top of the
1997+ 268B              // stack as two single numbers, high part as top of the stack.
1998+ 268B              // A double number is normally kept in CPU registers as HLDE.
1999+ 268B              // On stack a double number is treated as two single numbers
2000+ 268B              // where BC is on the top of the stack and HL is the second from top,
2001+ 268B              // so the sign of the number can be checked on top of stack
2002+ 268B              // and in the stack memory it appears as LHED.
2003+ 268B                              New_Def TWO_STORE, "2!", is_code, is_normal
2003+ 268B             >
2003+ 268B             >Dict_Ptr        defl    $
2003+ 268B             >
2003+ 268B             >//              ______________________________________________________________________
2003+ 268B             >//              Heap part
2003+ 268B             >
2003+ 268B             >
2003+ 268B             >                org     (Heap_Ptr & $1FFF) + $E000
2003+ E384             >
2003+ E384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2003+ E384             >Latest_Definition defl  Heap_Ptr
2003+ E384             >
2003+ E384             >                // dummy db directives used to calculate length of namec
2003+ E384 32 21       >                db      "2!"
2003+ E386             >len_NFA         defl    $ - temp_NFA
2003+ E386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2003+ E384             >
2003+ E384 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2003+ E385 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2003+ E387             >                org     $-1                 // alter last byte of Name just above to set
2003+ E386 A1          >                db      {b $} | END_BIT     // msb as name end
2003+ E387             >
2003+ E387 7D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2003+ E389             >Prev_Ptr        defl    Heap_Ptr
2003+ E389             >
2003+ E389             >mirror_Ptr      defl    $
2003+ E389             >
2003+ E389 8D 26       >                dw      Dict_Ptr + 2        // xt
2003+ E38B             >Heap_Ptr        defl    $ - $E000           // save current HP
2003+ E38B             >
2003+ E38B             >Current_HP      defl  $ - $E000             // used to set HP once!
2003+ E38B             >
2003+ E38B             >//              ______________________________________________________________________
2003+ E38B             >//              Dictionary part
2003+ E38B             >
2003+ E38B             >                org     Dict_Ptr
2003+ 268B             >
2003+ 268B 89 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2003+ 268D             >
2003+ 268D             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2003+ 268D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2003+ 268D ~           >
2003+ 268D ~           >
2003+ 268D             >                endif           ; ok        // for other definitions it "points" the correct handler
2003+ 268D             >                // Use of "; ok" to suppress "warning[fwdref]"
2003+ 268D             >
2003+ 268D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2004+ 268D D9                           exx
2005+ 268E E1                           pop     hl                  // address
2006+ 268F C1                           pop     bc                  // < high-part
2007+ 2690 D1                           pop     de                  // < low-part > Instruction Pointer
2008+ 2691 71                           ld      (hl), c
2009+ 2692 23                           inc     hl
2010+ 2693 70                           ld      (hl), b
2011+ 2694 23                           inc     hl
2012+ 2695 73                           ld      (hl), e
2013+ 2696 23                           inc     hl
2014+ 2697 72                           ld      (hl), d
2015+ 2698 D9                           exx
2016+ 2699                              next
2016+ 2699 DD E9       >                jp      (ix)
2017+ 269B
2018+ 269B              //  ______________________________________________________________________
2019+ 269B              //
2020+ 269B              // p@           a -- c
2021+ 269B              // Read one byte from port a and leave the result on top of stack
2022+ 269B                              New_Def PFETCH, "P@", is_code, is_normal
2022+ 269B             >
2022+ 269B             >Dict_Ptr        defl    $
2022+ 269B             >
2022+ 269B             >//              ______________________________________________________________________
2022+ 269B             >//              Heap part
2022+ 269B             >
2022+ 269B             >
2022+ 269B             >                org     (Heap_Ptr & $1FFF) + $E000
2022+ E38B             >
2022+ E38B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2022+ E38B             >Latest_Definition defl  Heap_Ptr
2022+ E38B             >
2022+ E38B             >                // dummy db directives used to calculate length of namec
2022+ E38B 50 40       >                db      "P@"
2022+ E38D             >len_NFA         defl    $ - temp_NFA
2022+ E38D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2022+ E38B             >
2022+ E38B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2022+ E38C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2022+ E38E             >                org     $-1                 // alter last byte of Name just above to set
2022+ E38D C0          >                db      {b $} | END_BIT     // msb as name end
2022+ E38E             >
2022+ E38E 84 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2022+ E390             >Prev_Ptr        defl    Heap_Ptr
2022+ E390             >
2022+ E390             >mirror_Ptr      defl    $
2022+ E390             >
2022+ E390 9D 26       >                dw      Dict_Ptr + 2        // xt
2022+ E392             >Heap_Ptr        defl    $ - $E000           // save current HP
2022+ E392             >
2022+ E392             >Current_HP      defl  $ - $E000             // used to set HP once!
2022+ E392             >
2022+ E392             >//              ______________________________________________________________________
2022+ E392             >//              Dictionary part
2022+ E392             >
2022+ E392             >                org     Dict_Ptr
2022+ 269B             >
2022+ 269B 90 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2022+ 269D             >
2022+ 269D             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2022+ 269D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2022+ 269D ~           >
2022+ 269D ~           >
2022+ 269D             >                endif           ; ok        // for other definitions it "points" the correct handler
2022+ 269D             >                // Use of "; ok" to suppress "warning[fwdref]"
2022+ 269D             >
2022+ 269D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2023+ 269D D9                           exx
2024+ 269E C1                           pop     bc
2025+ 269F 26 00                        ld      h, 0
2026+ 26A1 ED 68                        in      l, (c)
2027+ 26A3 E5                           push    hl
2028+ 26A4 D9                           exx
2029+ 26A5                              next
2029+ 26A5 DD E9       >                jp      (ix)
2030+ 26A7
2031+ 26A7              //  ______________________________________________________________________
2032+ 26A7              //
2033+ 26A7              // p!           c a --
2034+ 26A7              // Send one byte (top of stack) to port a
2035+ 26A7                              New_Def PSTORE, "P!", is_code, is_normal
2035+ 26A7             >
2035+ 26A7             >Dict_Ptr        defl    $
2035+ 26A7             >
2035+ 26A7             >//              ______________________________________________________________________
2035+ 26A7             >//              Heap part
2035+ 26A7             >
2035+ 26A7             >
2035+ 26A7             >                org     (Heap_Ptr & $1FFF) + $E000
2035+ E392             >
2035+ E392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2035+ E392             >Latest_Definition defl  Heap_Ptr
2035+ E392             >
2035+ E392             >                // dummy db directives used to calculate length of namec
2035+ E392 50 21       >                db      "P!"
2035+ E394             >len_NFA         defl    $ - temp_NFA
2035+ E394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2035+ E392             >
2035+ E392 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2035+ E393 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2035+ E395             >                org     $-1                 // alter last byte of Name just above to set
2035+ E394 A1          >                db      {b $} | END_BIT     // msb as name end
2035+ E395             >
2035+ E395 8B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2035+ E397             >Prev_Ptr        defl    Heap_Ptr
2035+ E397             >
2035+ E397             >mirror_Ptr      defl    $
2035+ E397             >
2035+ E397 A9 26       >                dw      Dict_Ptr + 2        // xt
2035+ E399             >Heap_Ptr        defl    $ - $E000           // save current HP
2035+ E399             >
2035+ E399             >Current_HP      defl  $ - $E000             // used to set HP once!
2035+ E399             >
2035+ E399             >//              ______________________________________________________________________
2035+ E399             >//              Dictionary part
2035+ E399             >
2035+ E399             >                org     Dict_Ptr
2035+ 26A7             >
2035+ 26A7 97 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2035+ 26A9             >
2035+ 26A9             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2035+ 26A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2035+ 26A9 ~           >
2035+ 26A9 ~           >
2035+ 26A9             >                endif           ; ok        // for other definitions it "points" the correct handler
2035+ 26A9             >                // Use of "; ok" to suppress "warning[fwdref]"
2035+ 26A9             >
2035+ 26A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2036+ 26A9 D9                           exx
2037+ 26AA C1                           pop     bc
2038+ 26AB E1                           pop     hl                  // < c
2039+ 26AC ED 69                        out     (c), l              // low-byte
2040+ 26AE D9                           exx
2041+ 26AF                              next
2041+ 26AF DD E9       >                jp      (ix)
2042+ 26B1
2043+ 26B1
2044+ 26B1              //  ______________________________________________________________________
2045+ 26B1              //
2046+ 26B1              // 2*           n1 -- n2
2047+ 26B1              // doubles the number at top of stack
2048+ 26B1                              New_Def TWO_MUL, "2*", is_code, is_normal
2048+ 26B1             >
2048+ 26B1             >Dict_Ptr        defl    $
2048+ 26B1             >
2048+ 26B1             >//              ______________________________________________________________________
2048+ 26B1             >//              Heap part
2048+ 26B1             >
2048+ 26B1             >
2048+ 26B1             >                org     (Heap_Ptr & $1FFF) + $E000
2048+ E399             >
2048+ E399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2048+ E399             >Latest_Definition defl  Heap_Ptr
2048+ E399             >
2048+ E399             >                // dummy db directives used to calculate length of namec
2048+ E399 32 2A       >                db      "2*"
2048+ E39B             >len_NFA         defl    $ - temp_NFA
2048+ E39B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2048+ E399             >
2048+ E399 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2048+ E39A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2048+ E39C             >                org     $-1                 // alter last byte of Name just above to set
2048+ E39B AA          >                db      {b $} | END_BIT     // msb as name end
2048+ E39C             >
2048+ E39C 92 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2048+ E39E             >Prev_Ptr        defl    Heap_Ptr
2048+ E39E             >
2048+ E39E             >mirror_Ptr      defl    $
2048+ E39E             >
2048+ E39E B3 26       >                dw      Dict_Ptr + 2        // xt
2048+ E3A0             >Heap_Ptr        defl    $ - $E000           // save current HP
2048+ E3A0             >
2048+ E3A0             >Current_HP      defl  $ - $E000             // used to set HP once!
2048+ E3A0             >
2048+ E3A0             >//              ______________________________________________________________________
2048+ E3A0             >//              Dictionary part
2048+ E3A0             >
2048+ E3A0             >                org     Dict_Ptr
2048+ 26B1             >
2048+ 26B1 9E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2048+ 26B3             >
2048+ 26B3             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2048+ 26B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2048+ 26B3 ~           >
2048+ 26B3 ~           >
2048+ 26B3             >                endif           ; ok        // for other definitions it "points" the correct handler
2048+ 26B3             >                // Use of "; ok" to suppress "warning[fwdref]"
2048+ 26B3             >
2048+ 26B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2049+ 26B3              Two_Mul_Ptr:
2050+ 26B3 E1                           pop     hl
2051+ 26B4 29                           add     hl, hl
2052+ 26B5
2053+ 26B5                              psh1
2053+ 26B5 E5          >                push    hl
2053+ 26B6 DD E9       >                jp      (ix)
2054+ 26B8
2055+ 26B8              //  ______________________________________________________________________
2056+ 26B8              //
2057+ 26B8              // 2/           n1 -- n2
2058+ 26B8              // halves the top of stack, sign is unchanged
2059+ 26B8                              New_Def TWO_DIV, "2/", is_code, is_normal
2059+ 26B8             >
2059+ 26B8             >Dict_Ptr        defl    $
2059+ 26B8             >
2059+ 26B8             >//              ______________________________________________________________________
2059+ 26B8             >//              Heap part
2059+ 26B8             >
2059+ 26B8             >
2059+ 26B8             >                org     (Heap_Ptr & $1FFF) + $E000
2059+ E3A0             >
2059+ E3A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2059+ E3A0             >Latest_Definition defl  Heap_Ptr
2059+ E3A0             >
2059+ E3A0             >                // dummy db directives used to calculate length of namec
2059+ E3A0 32 2F       >                db      "2/"
2059+ E3A2             >len_NFA         defl    $ - temp_NFA
2059+ E3A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2059+ E3A0             >
2059+ E3A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2059+ E3A1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2059+ E3A3             >                org     $-1                 // alter last byte of Name just above to set
2059+ E3A2 AF          >                db      {b $} | END_BIT     // msb as name end
2059+ E3A3             >
2059+ E3A3 99 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2059+ E3A5             >Prev_Ptr        defl    Heap_Ptr
2059+ E3A5             >
2059+ E3A5             >mirror_Ptr      defl    $
2059+ E3A5             >
2059+ E3A5 BA 26       >                dw      Dict_Ptr + 2        // xt
2059+ E3A7             >Heap_Ptr        defl    $ - $E000           // save current HP
2059+ E3A7             >
2059+ E3A7             >Current_HP      defl  $ - $E000             // used to set HP once!
2059+ E3A7             >
2059+ E3A7             >//              ______________________________________________________________________
2059+ E3A7             >//              Dictionary part
2059+ E3A7             >
2059+ E3A7             >                org     Dict_Ptr
2059+ 26B8             >
2059+ 26B8 A5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2059+ 26BA             >
2059+ 26BA             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2059+ 26BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2059+ 26BA ~           >
2059+ 26BA ~           >
2059+ 26BA             >                endif           ; ok        // for other definitions it "points" the correct handler
2059+ 26BA             >                // Use of "; ok" to suppress "warning[fwdref]"
2059+ 26BA             >
2059+ 26BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2060+ 26BA E1                           pop     hl
2061+ 26BB CB 2C                        sra     h
2062+ 26BD CB 1D                        rr      l
2063+ 26BF
2064+ 26BF                              psh1
2064+ 26BF E5          >                push    hl
2064+ 26C0 DD E9       >                jp      (ix)
2065+ 26C2
2066+ 26C2              //  ______________________________________________________________________
2067+ 26C2              //
2068+ 26C2              // lshift       n1 u -- n2
2069+ 26C2              // bit left shift of u bits
2070+ 26C2                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2070+ 26C2             >
2070+ 26C2             >Dict_Ptr        defl    $
2070+ 26C2             >
2070+ 26C2             >//              ______________________________________________________________________
2070+ 26C2             >//              Heap part
2070+ 26C2             >
2070+ 26C2             >
2070+ 26C2             >                org     (Heap_Ptr & $1FFF) + $E000
2070+ E3A7             >
2070+ E3A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2070+ E3A7             >Latest_Definition defl  Heap_Ptr
2070+ E3A7             >
2070+ E3A7             >                // dummy db directives used to calculate length of namec
2070+ E3A7 4C 53 48 49 >                db      "LSHIFT"
2070+ E3AB 46 54       >
2070+ E3AD             >len_NFA         defl    $ - temp_NFA
2070+ E3AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2070+ E3A7             >
2070+ E3A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2070+ E3A8 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2070+ E3AC 46 54       >
2070+ E3AE             >                org     $-1                 // alter last byte of Name just above to set
2070+ E3AD D4          >                db      {b $} | END_BIT     // msb as name end
2070+ E3AE             >
2070+ E3AE A0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2070+ E3B0             >Prev_Ptr        defl    Heap_Ptr
2070+ E3B0             >
2070+ E3B0             >mirror_Ptr      defl    $
2070+ E3B0             >
2070+ E3B0 C4 26       >                dw      Dict_Ptr + 2        // xt
2070+ E3B2             >Heap_Ptr        defl    $ - $E000           // save current HP
2070+ E3B2             >
2070+ E3B2             >Current_HP      defl  $ - $E000             // used to set HP once!
2070+ E3B2             >
2070+ E3B2             >//              ______________________________________________________________________
2070+ E3B2             >//              Dictionary part
2070+ E3B2             >
2070+ E3B2             >                org     Dict_Ptr
2070+ 26C2             >
2070+ 26C2 B0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2070+ 26C4             >
2070+ 26C4             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2070+ 26C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2070+ 26C4 ~           >
2070+ 26C4 ~           >
2070+ 26C4             >                endif           ; ok        // for other definitions it "points" the correct handler
2070+ 26C4             >                // Use of "; ok" to suppress "warning[fwdref]"
2070+ 26C4             >
2070+ 26C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2071+ 26C4 D9                           exx
2072+ 26C5 C1                           pop     bc
2073+ 26C6 41                           ld      b, c
2074+ 26C7 D1                           pop     de
2075+ 26C8 ED 28                        bsla    de, b
2076+ 26CA D5                           push    de
2077+ 26CB D9                           exx
2078+ 26CC                              next
2078+ 26CC DD E9       >                jp      (ix)
2079+ 26CE
2080+ 26CE              //  ______________________________________________________________________
2081+ 26CE              //
2082+ 26CE              // rshift       n1 u -- n2
2083+ 26CE              // bit right shift of u bits
2084+ 26CE                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2084+ 26CE             >
2084+ 26CE             >Dict_Ptr        defl    $
2084+ 26CE             >
2084+ 26CE             >//              ______________________________________________________________________
2084+ 26CE             >//              Heap part
2084+ 26CE             >
2084+ 26CE             >
2084+ 26CE             >                org     (Heap_Ptr & $1FFF) + $E000
2084+ E3B2             >
2084+ E3B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2084+ E3B2             >Latest_Definition defl  Heap_Ptr
2084+ E3B2             >
2084+ E3B2             >                // dummy db directives used to calculate length of namec
2084+ E3B2 52 53 48 49 >                db      "RSHIFT"
2084+ E3B6 46 54       >
2084+ E3B8             >len_NFA         defl    $ - temp_NFA
2084+ E3B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2084+ E3B2             >
2084+ E3B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2084+ E3B3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2084+ E3B7 46 54       >
2084+ E3B9             >                org     $-1                 // alter last byte of Name just above to set
2084+ E3B8 D4          >                db      {b $} | END_BIT     // msb as name end
2084+ E3B9             >
2084+ E3B9 A7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2084+ E3BB             >Prev_Ptr        defl    Heap_Ptr
2084+ E3BB             >
2084+ E3BB             >mirror_Ptr      defl    $
2084+ E3BB             >
2084+ E3BB D0 26       >                dw      Dict_Ptr + 2        // xt
2084+ E3BD             >Heap_Ptr        defl    $ - $E000           // save current HP
2084+ E3BD             >
2084+ E3BD             >Current_HP      defl  $ - $E000             // used to set HP once!
2084+ E3BD             >
2084+ E3BD             >//              ______________________________________________________________________
2084+ E3BD             >//              Dictionary part
2084+ E3BD             >
2084+ E3BD             >                org     Dict_Ptr
2084+ 26CE             >
2084+ 26CE BB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2084+ 26D0             >
2084+ 26D0             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2084+ 26D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2084+ 26D0 ~           >
2084+ 26D0 ~           >
2084+ 26D0             >                endif           ; ok        // for other definitions it "points" the correct handler
2084+ 26D0             >                // Use of "; ok" to suppress "warning[fwdref]"
2084+ 26D0             >
2084+ 26D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2085+ 26D0 D9                           exx
2086+ 26D1 C1                           pop     bc
2087+ 26D2 41                           ld      b, c
2088+ 26D3 D1                           pop     de
2089+ 26D4 ED 2A                        bsrl    de, b
2090+ 26D6 D5                           push    de
2091+ 26D7 D9                           exx
2092+ 26D8                              next
2092+ 26D8 DD E9       >                jp      (ix)
2093+ 26DA
2094+ 26DA              //  ______________________________________________________________________
2095+ 26DA              //
2096+ 26DA              // cells        n1 -- n2
2097+ 26DA              // decrement by 2 top of stack
2098+ 26DA                              New_Def CELLS, "CELLS", is_code, is_normal
2098+ 26DA             >
2098+ 26DA             >Dict_Ptr        defl    $
2098+ 26DA             >
2098+ 26DA             >//              ______________________________________________________________________
2098+ 26DA             >//              Heap part
2098+ 26DA             >
2098+ 26DA             >
2098+ 26DA             >                org     (Heap_Ptr & $1FFF) + $E000
2098+ E3BD             >
2098+ E3BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2098+ E3BD             >Latest_Definition defl  Heap_Ptr
2098+ E3BD             >
2098+ E3BD             >                // dummy db directives used to calculate length of namec
2098+ E3BD 43 45 4C 4C >                db      "CELLS"
2098+ E3C1 53          >
2098+ E3C2             >len_NFA         defl    $ - temp_NFA
2098+ E3C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2098+ E3BD             >
2098+ E3BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2098+ E3BE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2098+ E3C2 53          >
2098+ E3C3             >                org     $-1                 // alter last byte of Name just above to set
2098+ E3C2 D3          >                db      {b $} | END_BIT     // msb as name end
2098+ E3C3             >
2098+ E3C3 B2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2098+ E3C5             >Prev_Ptr        defl    Heap_Ptr
2098+ E3C5             >
2098+ E3C5             >mirror_Ptr      defl    $
2098+ E3C5             >
2098+ E3C5 DC 26       >                dw      Dict_Ptr + 2        // xt
2098+ E3C7             >Heap_Ptr        defl    $ - $E000           // save current HP
2098+ E3C7             >
2098+ E3C7             >Current_HP      defl  $ - $E000             // used to set HP once!
2098+ E3C7             >
2098+ E3C7             >//              ______________________________________________________________________
2098+ E3C7             >//              Dictionary part
2098+ E3C7             >
2098+ E3C7             >                org     Dict_Ptr
2098+ 26DA             >
2098+ 26DA C5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2098+ 26DC             >
2098+ 26DC             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2098+ 26DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
2098+ 26DC ~           >
2098+ 26DC ~           >
2098+ 26DC             >                endif           ; ok        // for other definitions it "points" the correct handler
2098+ 26DC             >                // Use of "; ok" to suppress "warning[fwdref]"
2098+ 26DC             >
2098+ 26DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2099+ 26DC 18 D5                        jr      Two_Mul_Ptr
2100+ 26DE
2101+ 26DE
2102+ 26DE              //  ______________________________________________________________________
2103+ 26DE
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L0.asm
 122  26DE                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
   1+ 26DE              //  ______________________________________________________________________
   2+ 26DE              //
   3+ 26DE              //  L1.asm
   4+ 26DE              //
   5+ 26DE              //  Level-1 definitions and derivate
   6+ 26DE              //  ______________________________________________________________________
   7+ 26DE
   8+ 26DE              //  ______________________________________________________________________
   9+ 26DE              //
  10+ 26DE              // :            -- cccc     ( compile time )
  11+ 26DE              //              i*x -- j*x  ( run time )
  12+ 26DE              // Colon Definition
  13+ 26DE                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 26DE             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 26DE             >
  13+ 26DE             >Dict_Ptr        defl    $
  13+ 26DE             >
  13+ 26DE             >//              ______________________________________________________________________
  13+ 26DE             >//              Heap part
  13+ 26DE             >
  13+ 26DE             >
  13+ 26DE             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C7             >
  13+ E3C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C7             >Latest_Definition defl  Heap_Ptr
  13+ E3C7             >
  13+ E3C7             >                // dummy db directives used to calculate length of namec
  13+ E3C7 3A          >                db      ":"
  13+ E3C8             >len_NFA         defl    $ - temp_NFA
  13+ E3C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C7             >
  13+ E3C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C8 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3C9             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C8 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3C9             >
  13+ E3C9 BD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CB             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CB             >
  13+ E3CB             >mirror_Ptr      defl    $
  13+ E3CB             >
  13+ E3CB E0 26       >                dw      Dict_Ptr + 2        // xt
  13+ E3CD             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CD             >
  13+ E3CD             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CD             >
  13+ E3CD             >//              ______________________________________________________________________
  13+ E3CD             >//              Dictionary part
  13+ E3CD             >
  13+ E3CD             >                org     Dict_Ptr
  13+ 26DE             >
  13+ 26DE CB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 26E0             >
  13+ 26E0             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 26E0 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 26E3             >
  13+ 26E3             >
  13+ 26E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 26E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 26E3             >
  13+ 26E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 26E3
  15+ 26E3 D5 2A                        dw      QEXEC                   // ?exec
  16+ 26E5 A0 2A                        dw      STORE_CSP               // !csp
  17+ 26E7 11 28 55 26                  dw      CURRENT, FETCH          // current @
  18+ 26EB 0B 28 5F 26                  dw      CONTEXT, STORE          // context !
  19+ 26EF C1 30                        dw      CREATE                  // create  ( forward )
  20+ 26F1 59 2B                        dw      SMUDGE                  // dmudge
  21+ 26F3 4A 2B                        dw      SQUARED_CLOSE           // ]
  22+ 26F5 95 2B                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 26F7                                                              // ... immediate
  24+ 26F7              Enter_Ptr:
  25+ 26F7                              // via call coded in CFA
  26+ 26F7 EB                           ex      de, hl //**
  27+ 26F8                              // *** ldhlrp
  28+ 26F8 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 26F9 70                           ld      (hl), b
  30+ 26FA 2B                           dec     hl
  31+ 26FB 71                           ld      (hl), c
  32+ 26FC                              // *** ldrphl
  33+ 26FC EB                           ex      de, hl //**
  34+ 26FD
  35+ 26FD
  36+ 26FD C1                           pop     bc                  // points to PFA of "this" word
  37+ 26FE                              next
  37+ 26FE DD E9       >                jp      (ix)
  38+ 2700
  39+ 2700              //  ______________________________________________________________________
  40+ 2700              //
  41+ 2700              // ;            --
  42+ 2700              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 2700                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 2700             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 2700             >
  43+ 2700             >Dict_Ptr        defl    $
  43+ 2700             >
  43+ 2700             >//              ______________________________________________________________________
  43+ 2700             >//              Heap part
  43+ 2700             >
  43+ 2700             >
  43+ 2700             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CD             >
  43+ E3CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CD             >Latest_Definition defl  Heap_Ptr
  43+ E3CD             >
  43+ E3CD             >                // dummy db directives used to calculate length of namec
  43+ E3CD 3B          >                db      ";"
  43+ E3CE             >len_NFA         defl    $ - temp_NFA
  43+ E3CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CD             >
  43+ E3CD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CE 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3CF             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CE BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3CF             >
  43+ E3CF C7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D1             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D1             >
  43+ E3D1             >mirror_Ptr      defl    $
  43+ E3D1             >
  43+ E3D1 02 27       >                dw      Dict_Ptr + 2        // xt
  43+ E3D3             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D3             >
  43+ E3D3             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D3             >
  43+ E3D3             >//              ______________________________________________________________________
  43+ E3D3             >//              Dictionary part
  43+ E3D3             >
  43+ E3D3             >                org     Dict_Ptr
  43+ 2700             >
  43+ 2700 D1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 2702             >
  43+ 2702             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 2702 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 2705             >
  43+ 2705             >
  43+ 2705             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 2705             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 2705             >
  43+ 2705             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 2705
  45+ 2705 F5 2A                        dw      QCSP                    // ?csp
  46+ 2707 1D 2B 0D 25                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 270B 59 2B                        dw      SMUDGE                  // smudge
  48+ 270D 3D 2B                        dw      SQUARED_OPEN            // [
  49+ 270F 0D 25                        dw      EXIT                    // ; immediate
  50+ 2711
  51+ 2711              //  ______________________________________________________________________
  52+ 2711              //
  53+ 2711              // noop         --
  54+ 2711
  55+ 2711                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 2711             >
  55+ 2711             >Dict_Ptr        defl    $
  55+ 2711             >
  55+ 2711             >//              ______________________________________________________________________
  55+ 2711             >//              Heap part
  55+ 2711             >
  55+ 2711             >
  55+ 2711             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D3             >
  55+ E3D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D3             >Latest_Definition defl  Heap_Ptr
  55+ E3D3             >
  55+ E3D3             >                // dummy db directives used to calculate length of namec
  55+ E3D3 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D7             >len_NFA         defl    $ - temp_NFA
  55+ E3D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D3             >
  55+ E3D3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D8             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D7 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D8             >
  55+ E3D8 CD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DA             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DA             >
  55+ E3DA             >mirror_Ptr      defl    $
  55+ E3DA             >
  55+ E3DA 13 27       >                dw      Dict_Ptr + 2        // xt
  55+ E3DC             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DC             >
  55+ E3DC             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DC             >
  55+ E3DC             >//              ______________________________________________________________________
  55+ E3DC             >//              Dictionary part
  55+ E3DC             >
  55+ E3DC             >                org     Dict_Ptr
  55+ 2711             >
  55+ 2711 DA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 2713             >
  55+ 2713             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 2713 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 2713 ~           >
  55+ 2713 ~           >
  55+ 2713             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 2713             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 2713             >
  55+ 2713             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 2713                              next
  56+ 2713 DD E9       >                jp      (ix)
  57+ 2715
  58+ 2715              //  ______________________________________________________________________
  59+ 2715              //
  60+ 2715              // constant     n -- cccc     ( compile time )
  61+ 2715              //              -- n          ( run time )
  62+ 2715              // Constant definition.
  63+ 2715                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 2715             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 2715             >
  63+ 2715             >Dict_Ptr        defl    $
  63+ 2715             >
  63+ 2715             >//              ______________________________________________________________________
  63+ 2715             >//              Heap part
  63+ 2715             >
  63+ 2715             >
  63+ 2715             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DC             >
  63+ E3DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DC             >Latest_Definition defl  Heap_Ptr
  63+ E3DC             >
  63+ E3DC             >                // dummy db directives used to calculate length of namec
  63+ E3DC 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E0 54 41 4E 54 >
  63+ E3E4             >len_NFA         defl    $ - temp_NFA
  63+ E3E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DC             >
  63+ E3DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E4 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E5             >
  63+ E3E5 D3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E7             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E7             >
  63+ E3E7             >mirror_Ptr      defl    $
  63+ E3E7             >
  63+ E3E7 17 27       >                dw      Dict_Ptr + 2        // xt
  63+ E3E9             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3E9             >
  63+ E3E9             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3E9             >
  63+ E3E9             >//              ______________________________________________________________________
  63+ E3E9             >//              Dictionary part
  63+ E3E9             >
  63+ E3E9             >                org     Dict_Ptr
  63+ 2715             >
  63+ 2715 E7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 2717             >
  63+ 2717             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 2717 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 271A             >
  63+ 271A             >
  63+ 271A             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 271A             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 271A             >
  63+ 271A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 271A C1 30                        dw      CREATE                  // create
  65+ 271C 87 28                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 271E 95 2B                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 2720              Constant_Ptr:
  68+ 2720
  69+ 2720
  70+ 2720 E1                           pop     hl
  71+ 2721
  72+ 2721 7E                           ld      a, (hl)
  73+ 2722 23                           inc     hl
  74+ 2723 66                           ld      h, (hl)
  75+ 2724 6F                           ld      l, a
  76+ 2725 E5                           push    hl
  77+ 2726                              next
  77+ 2726 DD E9       >                jp      (ix)
  78+ 2728
  79+ 2728              //  ______________________________________________________________________
  80+ 2728              //
  81+ 2728              // variable     n -- cccc     ( compile time )
  82+ 2728              //              -- a          ( run time )
  83+ 2728              // Variable definition, n is the initial value.
  84+ 2728                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 2728             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 2728             >
  84+ 2728             >Dict_Ptr        defl    $
  84+ 2728             >
  84+ 2728             >//              ______________________________________________________________________
  84+ 2728             >//              Heap part
  84+ 2728             >
  84+ 2728             >
  84+ 2728             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3E9             >
  84+ E3E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3E9             >Latest_Definition defl  Heap_Ptr
  84+ E3E9             >
  84+ E3E9             >                // dummy db directives used to calculate length of namec
  84+ E3E9 56 41 52 49 >                db      "VARIABLE"
  84+ E3ED 41 42 4C 45 >
  84+ E3F1             >len_NFA         defl    $ - temp_NFA
  84+ E3F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3E9             >
  84+ E3E9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F1 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F2             >
  84+ E3F2 DC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F4             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F4             >
  84+ E3F4             >mirror_Ptr      defl    $
  84+ E3F4             >
  84+ E3F4 2A 27       >                dw      Dict_Ptr + 2        // xt
  84+ E3F6             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F6             >
  84+ E3F6             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F6             >
  84+ E3F6             >//              ______________________________________________________________________
  84+ E3F6             >//              Dictionary part
  84+ E3F6             >
  84+ E3F6             >                org     Dict_Ptr
  84+ 2728             >
  84+ 2728 F4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 272A             >
  84+ 272A             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 272A CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 272D             >
  84+ 272D             >
  84+ 272D             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 272D             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 272D             >
  84+ 272D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 272D
  86+ 272D 4C 27                        dw      ZERO
  87+ 272F 17 27                        dw      CONSTANT                // constant
  88+ 2731 95 2B                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 2733              Variable_Ptr:
  90+ 2733
  91+ 2733
  92+ 2733
  93+ 2733
  94+ 2733                              next
  94+ 2733 DD E9       >                jp      (ix)
  95+ 2735
  96+ 2735              //  ______________________________________________________________________
  97+ 2735              //
  98+ 2735              // user         b -- cccc     ( compile time )
  99+ 2735              //              -- a          ( run time )
 100+ 2735              // User variable definition
 101+ 2735                              Colon_Def USER, "USER", is_normal
 101+ 2735             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 2735             >
 101+ 2735             >Dict_Ptr        defl    $
 101+ 2735             >
 101+ 2735             >//              ______________________________________________________________________
 101+ 2735             >//              Heap part
 101+ 2735             >
 101+ 2735             >
 101+ 2735             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F6             >
 101+ E3F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F6             >Latest_Definition defl  Heap_Ptr
 101+ E3F6             >
 101+ E3F6             >                // dummy db directives used to calculate length of namec
 101+ E3F6 55 53 45 52 >                db      "USER"
 101+ E3FA             >len_NFA         defl    $ - temp_NFA
 101+ E3FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F6             >
 101+ E3F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FB             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FA D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FB             >
 101+ E3FB E9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FD             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FD             >
 101+ E3FD             >mirror_Ptr      defl    $
 101+ E3FD             >
 101+ E3FD 37 27       >                dw      Dict_Ptr + 2        // xt
 101+ E3FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E3FF             >
 101+ E3FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E3FF             >
 101+ E3FF             >//              ______________________________________________________________________
 101+ E3FF             >//              Dictionary part
 101+ E3FF             >
 101+ E3FF             >                org     Dict_Ptr
 101+ 2735             >
 101+ 2735 FD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 2737             >
 101+ 2737             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 2737 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 273A             >
 101+ 273A             >
 101+ 273A             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 273A             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 273A             >
 101+ 273A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 273A
 103+ 273A C1 30                        dw      CREATE                  // create
 104+ 273C 96 28                        dw      CCOMMA                  // c,
 105+ 273E 95 2B                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 2740
 107+ 2740
 108+ 2740              User_Ptr:
 109+ 2740                              // via call coded in CFA
 110+ 2740 E1                           pop     hl
 111+ 2741
 112+ 2741 7E                           ld      a, (hl)
 113+ 2742 2A 2E 20                     ld      hl, (USER_Pointer)
 114+ 2745 ED 31                        add     hl, a
 115+ 2747 E5                           push    hl
 116+ 2748                              next
 116+ 2748 DD E9       >                jp      (ix)
 117+ 274A
 118+ 274A              //  ______________________________________________________________________
 119+ 274A              //
 120+ 274A                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 274A             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 274A             >
 120+ 274A             >Dict_Ptr        defl    $
 120+ 274A             >
 120+ 274A             >//              ______________________________________________________________________
 120+ 274A             >//              Heap part
 120+ 274A             >
 120+ 274A             >
 120+ 274A             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E3FF             >
 120+ E3FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E3FF             >Latest_Definition defl  Heap_Ptr
 120+ E3FF             >
 120+ E3FF             >                // dummy db directives used to calculate length of namec
 120+ E3FF 30          >                db      "0"
 120+ E400             >len_NFA         defl    $ - temp_NFA
 120+ E400             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E3FF             >
 120+ E3FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E400 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E401             >                org     $-1                 // alter last byte of Name just above to set
 120+ E400 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E401             >
 120+ E401 F6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E403             >Prev_Ptr        defl    Heap_Ptr
 120+ E403             >
 120+ E403             >mirror_Ptr      defl    $
 120+ E403             >
 120+ E403 4C 27       >                dw      Dict_Ptr + 2        // xt
 120+ E405             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E405             >
 120+ E405             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E405             >
 120+ E405             >//              ______________________________________________________________________
 120+ E405             >//              Dictionary part
 120+ E405             >
 120+ E405             >                org     Dict_Ptr
 120+ 274A             >
 120+ 274A 03 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 274C             >
 120+ 274C             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 274C CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 274F             >
 120+ 274F             >
 120+ 274F             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 274F             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 274F             >
 120+ 274F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 274F 00 00       >                dw      0
 121+ 2751                              Constant_Def ONE        ,   "1"     ,   1
 121+ 2751             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 2751             >
 121+ 2751             >Dict_Ptr        defl    $
 121+ 2751             >
 121+ 2751             >//              ______________________________________________________________________
 121+ 2751             >//              Heap part
 121+ 2751             >
 121+ 2751             >
 121+ 2751             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E405             >
 121+ E405             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E405             >Latest_Definition defl  Heap_Ptr
 121+ E405             >
 121+ E405             >                // dummy db directives used to calculate length of namec
 121+ E405 31          >                db      "1"
 121+ E406             >len_NFA         defl    $ - temp_NFA
 121+ E406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E405             >
 121+ E405 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E406 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E407             >                org     $-1                 // alter last byte of Name just above to set
 121+ E406 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E407             >
 121+ E407 FF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E409             >Prev_Ptr        defl    Heap_Ptr
 121+ E409             >
 121+ E409             >mirror_Ptr      defl    $
 121+ E409             >
 121+ E409 53 27       >                dw      Dict_Ptr + 2        // xt
 121+ E40B             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40B             >
 121+ E40B             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40B             >
 121+ E40B             >//              ______________________________________________________________________
 121+ E40B             >//              Dictionary part
 121+ E40B             >
 121+ E40B             >                org     Dict_Ptr
 121+ 2751             >
 121+ 2751 09 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 2753             >
 121+ 2753             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 2753 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 2756             >
 121+ 2756             >
 121+ 2756             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 2756             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 2756             >
 121+ 2756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 2756 01 00       >                dw      1
 122+ 2758                              Constant_Def TWO        ,   "2"     ,   2
 122+ 2758             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 2758             >
 122+ 2758             >Dict_Ptr        defl    $
 122+ 2758             >
 122+ 2758             >//              ______________________________________________________________________
 122+ 2758             >//              Heap part
 122+ 2758             >
 122+ 2758             >
 122+ 2758             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40B             >
 122+ E40B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40B             >Latest_Definition defl  Heap_Ptr
 122+ E40B             >
 122+ E40B             >                // dummy db directives used to calculate length of namec
 122+ E40B 32          >                db      "2"
 122+ E40C             >len_NFA         defl    $ - temp_NFA
 122+ E40C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40B             >
 122+ E40B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40C 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40D             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40C B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40D             >
 122+ E40D 05 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E40F             >Prev_Ptr        defl    Heap_Ptr
 122+ E40F             >
 122+ E40F             >mirror_Ptr      defl    $
 122+ E40F             >
 122+ E40F 5A 27       >                dw      Dict_Ptr + 2        // xt
 122+ E411             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E411             >
 122+ E411             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E411             >
 122+ E411             >//              ______________________________________________________________________
 122+ E411             >//              Dictionary part
 122+ E411             >
 122+ E411             >                org     Dict_Ptr
 122+ 2758             >
 122+ 2758 0F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 275A             >
 122+ 275A             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 275A CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 275D             >
 122+ 275D             >
 122+ 275D             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 275D             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 275D             >
 122+ 275D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 275D 02 00       >                dw      2
 123+ 275F                              Constant_Def THREE      ,   "3"     ,   3
 123+ 275F             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 275F             >
 123+ 275F             >Dict_Ptr        defl    $
 123+ 275F             >
 123+ 275F             >//              ______________________________________________________________________
 123+ 275F             >//              Heap part
 123+ 275F             >
 123+ 275F             >
 123+ 275F             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E411             >
 123+ E411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E411             >Latest_Definition defl  Heap_Ptr
 123+ E411             >
 123+ E411             >                // dummy db directives used to calculate length of namec
 123+ E411 33          >                db      "3"
 123+ E412             >len_NFA         defl    $ - temp_NFA
 123+ E412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E411             >
 123+ E411 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E412 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E413             >                org     $-1                 // alter last byte of Name just above to set
 123+ E412 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E413             >
 123+ E413 0B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E415             >Prev_Ptr        defl    Heap_Ptr
 123+ E415             >
 123+ E415             >mirror_Ptr      defl    $
 123+ E415             >
 123+ E415 61 27       >                dw      Dict_Ptr + 2        // xt
 123+ E417             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E417             >
 123+ E417             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E417             >
 123+ E417             >//              ______________________________________________________________________
 123+ E417             >//              Dictionary part
 123+ E417             >
 123+ E417             >                org     Dict_Ptr
 123+ 275F             >
 123+ 275F 15 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 2761             >
 123+ 2761             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 2761 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 2764             >
 123+ 2764             >
 123+ 2764             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 2764             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 2764             >
 123+ 2764             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 2764 03 00       >                dw      3
 124+ 2766                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 2766             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 2766             >
 124+ 2766             >Dict_Ptr        defl    $
 124+ 2766             >
 124+ 2766             >//              ______________________________________________________________________
 124+ 2766             >//              Heap part
 124+ 2766             >
 124+ 2766             >
 124+ 2766             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E417             >
 124+ E417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E417             >Latest_Definition defl  Heap_Ptr
 124+ E417             >
 124+ E417             >                // dummy db directives used to calculate length of namec
 124+ E417 2D 31       >                db      "-1"
 124+ E419             >len_NFA         defl    $ - temp_NFA
 124+ E419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E417             >
 124+ E417 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E418 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41A             >                org     $-1                 // alter last byte of Name just above to set
 124+ E419 B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41A             >
 124+ E41A 11 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41C             >Prev_Ptr        defl    Heap_Ptr
 124+ E41C             >
 124+ E41C             >mirror_Ptr      defl    $
 124+ E41C             >
 124+ E41C 68 27       >                dw      Dict_Ptr + 2        // xt
 124+ E41E             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41E             >
 124+ E41E             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41E             >
 124+ E41E             >//              ______________________________________________________________________
 124+ E41E             >//              Dictionary part
 124+ E41E             >
 124+ E41E             >                org     Dict_Ptr
 124+ 2766             >
 124+ 2766 1C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 2768             >
 124+ 2768             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 2768 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 276B             >
 124+ 276B             >
 124+ 276B             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 276B             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 276B             >
 124+ 276B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 276B FF FF       >                dw      -1
 125+ 276D                              Constant_Def BL         ,   "BL"    , $20
 125+ 276D             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 276D             >
 125+ 276D             >Dict_Ptr        defl    $
 125+ 276D             >
 125+ 276D             >//              ______________________________________________________________________
 125+ 276D             >//              Heap part
 125+ 276D             >
 125+ 276D             >
 125+ 276D             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41E             >
 125+ E41E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41E             >Latest_Definition defl  Heap_Ptr
 125+ E41E             >
 125+ E41E             >                // dummy db directives used to calculate length of namec
 125+ E41E 42 4C       >                db      "BL"
 125+ E420             >len_NFA         defl    $ - temp_NFA
 125+ E420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41E             >
 125+ E41E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E41F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E421             >                org     $-1                 // alter last byte of Name just above to set
 125+ E420 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E421             >
 125+ E421 17 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E423             >Prev_Ptr        defl    Heap_Ptr
 125+ E423             >
 125+ E423             >mirror_Ptr      defl    $
 125+ E423             >
 125+ E423 6F 27       >                dw      Dict_Ptr + 2        // xt
 125+ E425             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E425             >
 125+ E425             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E425             >
 125+ E425             >//              ______________________________________________________________________
 125+ E425             >//              Dictionary part
 125+ E425             >
 125+ E425             >                org     Dict_Ptr
 125+ 276D             >
 125+ 276D 23 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 276F             >
 125+ 276F             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 276F CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 2772             >
 125+ 2772             >
 125+ 2772             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 2772             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 2772             >
 125+ 2772             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 2772 20 00       >                dw      $20
 126+ 2774                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 2774             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 2774             >
 126+ 2774             >Dict_Ptr        defl    $
 126+ 2774             >
 126+ 2774             >//              ______________________________________________________________________
 126+ 2774             >//              Heap part
 126+ 2774             >
 126+ 2774             >
 126+ 2774             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E425             >
 126+ E425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E425             >Latest_Definition defl  Heap_Ptr
 126+ E425             >
 126+ E425             >                // dummy db directives used to calculate length of namec
 126+ E425 43 2F 4C    >                db      "C/L"
 126+ E428             >len_NFA         defl    $ - temp_NFA
 126+ E428             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E425             >
 126+ E425 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E426 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E429             >                org     $-1                 // alter last byte of Name just above to set
 126+ E428 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E429             >
 126+ E429 1E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42B             >Prev_Ptr        defl    Heap_Ptr
 126+ E42B             >
 126+ E42B             >mirror_Ptr      defl    $
 126+ E42B             >
 126+ E42B 76 27       >                dw      Dict_Ptr + 2        // xt
 126+ E42D             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42D             >
 126+ E42D             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42D             >
 126+ E42D             >//              ______________________________________________________________________
 126+ E42D             >//              Dictionary part
 126+ E42D             >
 126+ E42D             >                org     Dict_Ptr
 126+ 2774             >
 126+ 2774 2B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 2776             >
 126+ 2776             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 2776 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 2779             >
 126+ 2779             >
 126+ 2779             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 2779             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 2779             >
 126+ 2779             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 2779 40 00       >                dw      64
 127+ 277B                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 277B             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 277B             >
 127+ 277B             >Dict_Ptr        defl    $
 127+ 277B             >
 127+ 277B             >//              ______________________________________________________________________
 127+ 277B             >//              Heap part
 127+ 277B             >
 127+ 277B             >
 127+ 277B             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42D             >
 127+ E42D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42D             >Latest_Definition defl  Heap_Ptr
 127+ E42D             >
 127+ E42D             >                // dummy db directives used to calculate length of namec
 127+ E42D 42 2F 42 55 >                db      "B/BUF"
 127+ E431 46          >
 127+ E432             >len_NFA         defl    $ - temp_NFA
 127+ E432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42D             >
 127+ E42D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E432 46          >
 127+ E433             >                org     $-1                 // alter last byte of Name just above to set
 127+ E432 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E433             >
 127+ E433 25 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E435             >Prev_Ptr        defl    Heap_Ptr
 127+ E435             >
 127+ E435             >mirror_Ptr      defl    $
 127+ E435             >
 127+ E435 7D 27       >                dw      Dict_Ptr + 2        // xt
 127+ E437             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E437             >
 127+ E437             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E437             >
 127+ E437             >//              ______________________________________________________________________
 127+ E437             >//              Dictionary part
 127+ E437             >
 127+ E437             >                org     Dict_Ptr
 127+ 277B             >
 127+ 277B 35 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 277D             >
 127+ 277D             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 277D CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 2780             >
 127+ 2780             >
 127+ 2780             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 2780             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 2780             >
 127+ 2780             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 2780 00 02       >                dw      512
 128+ 2782                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 2782             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 2782             >
 128+ 2782             >Dict_Ptr        defl    $
 128+ 2782             >
 128+ 2782             >//              ______________________________________________________________________
 128+ 2782             >//              Heap part
 128+ 2782             >
 128+ 2782             >
 128+ 2782             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E437             >
 128+ E437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E437             >Latest_Definition defl  Heap_Ptr
 128+ E437             >
 128+ E437             >                // dummy db directives used to calculate length of namec
 128+ E437 42 2F 53 43 >                db      "B/SCR"
 128+ E43B 52          >
 128+ E43C             >len_NFA         defl    $ - temp_NFA
 128+ E43C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E437             >
 128+ E437 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E438 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43C 52          >
 128+ E43D             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43C D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43D             >
 128+ E43D 2D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E43F             >Prev_Ptr        defl    Heap_Ptr
 128+ E43F             >
 128+ E43F             >mirror_Ptr      defl    $
 128+ E43F             >
 128+ E43F 84 27       >                dw      Dict_Ptr + 2        // xt
 128+ E441             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E441             >
 128+ E441             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E441             >
 128+ E441             >//              ______________________________________________________________________
 128+ E441             >//              Dictionary part
 128+ E441             >
 128+ E441             >                org     Dict_Ptr
 128+ 2782             >
 128+ 2782 3F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 2784             >
 128+ 2784             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 2784 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 2787             >
 128+ 2787             >
 128+ 2787             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 2787             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 2787             >
 128+ 2787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 2787 02 00       >                dw      2
 129+ 2789                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 2789             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 2789             >
 129+ 2789             >Dict_Ptr        defl    $
 129+ 2789             >
 129+ 2789             >//              ______________________________________________________________________
 129+ 2789             >//              Heap part
 129+ 2789             >
 129+ 2789             >
 129+ 2789             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E441             >
 129+ E441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E441             >Latest_Definition defl  Heap_Ptr
 129+ E441             >
 129+ E441             >                // dummy db directives used to calculate length of namec
 129+ E441 4C 2F 53 43 >                db      "L/SCR"
 129+ E445 52          >
 129+ E446             >len_NFA         defl    $ - temp_NFA
 129+ E446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E441             >
 129+ E441 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E442 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E446 52          >
 129+ E447             >                org     $-1                 // alter last byte of Name just above to set
 129+ E446 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E447             >
 129+ E447 37 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E449             >Prev_Ptr        defl    Heap_Ptr
 129+ E449             >
 129+ E449             >mirror_Ptr      defl    $
 129+ E449             >
 129+ E449 8B 27       >                dw      Dict_Ptr + 2        // xt
 129+ E44B             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44B             >
 129+ E44B             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44B             >
 129+ E44B             >//              ______________________________________________________________________
 129+ E44B             >//              Dictionary part
 129+ E44B             >
 129+ E44B             >                org     Dict_Ptr
 129+ 2789             >
 129+ 2789 49 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 278B             >
 129+ 278B             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 278B CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 278E             >
 129+ 278E             >
 129+ 278E             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 278E             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 278E             >
 129+ 278E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 278E 10 00       >                dw      16
 130+ 2790
 131+ 2790              //  ______________________________________________________________________
 132+ 2790              //
 133+ 2790              // +origin         --
 134+ 2790              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 2790              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 2790              //              dw      PLUS                    // +
 137+ 2790              //              dw      EXIT                    // ;
 138+ 2790                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 2790             >
 138+ 2790             >Dict_Ptr        defl    $
 138+ 2790             >
 138+ 2790             >//              ______________________________________________________________________
 138+ 2790             >//              Heap part
 138+ 2790             >
 138+ 2790             >
 138+ 2790             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44B             >
 138+ E44B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44B             >Latest_Definition defl  Heap_Ptr
 138+ E44B             >
 138+ E44B             >                // dummy db directives used to calculate length of namec
 138+ E44B 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E44F 47 49 4E    >
 138+ E452             >len_NFA         defl    $ - temp_NFA
 138+ E452             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44B             >
 138+ E44B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E450 47 49 4E    >
 138+ E453             >                org     $-1                 // alter last byte of Name just above to set
 138+ E452 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E453             >
 138+ E453 41 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E455             >Prev_Ptr        defl    Heap_Ptr
 138+ E455             >
 138+ E455             >mirror_Ptr      defl    $
 138+ E455             >
 138+ E455 92 27       >                dw      Dict_Ptr + 2        // xt
 138+ E457             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E457             >
 138+ E457             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E457             >
 138+ E457             >//              ______________________________________________________________________
 138+ E457             >//              Dictionary part
 138+ E457             >
 138+ E457             >                org     Dict_Ptr
 138+ 2790             >
 138+ 2790 55 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 2792             >
 138+ 2792             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 2792 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 2792 ~           >
 138+ 2792 ~           >
 138+ 2792             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 2792             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 2792             >
 138+ 2792             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 2792 D9                           exx
 140+ 2793 E1                           pop     hl
 141+ 2794 11 00 20                     ld      de, Cold_origin
 142+ 2797 19                           add     hl, de
 143+ 2798 E5                           push    hl
 144+ 2799 D9                           exx
 145+ 279A                              next
 145+ 279A DD E9       >                jp      (ix)
 146+ 279C
 147+ 279C
 148+ 279C              //  ______________________________________________________________________
 149+ 279C              //
 150+ 279C                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 279C             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 279C             >
 150+ 279C             >Dict_Ptr        defl    $
 150+ 279C             >
 150+ 279C             >//              ______________________________________________________________________
 150+ 279C             >//              Heap part
 150+ 279C             >
 150+ 279C             >
 150+ 279C             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E457             >
 150+ E457             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E457             >Latest_Definition defl  Heap_Ptr
 150+ E457             >
 150+ E457             >                // dummy db directives used to calculate length of namec
 150+ E457 28 4E 45 58 >                db      "(NEXT)"
 150+ E45B 54 29       >
 150+ E45D             >len_NFA         defl    $ - temp_NFA
 150+ E45D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E457             >
 150+ E457 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E458 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45C 54 29       >
 150+ E45E             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45D A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45E             >
 150+ E45E 4B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E460             >Prev_Ptr        defl    Heap_Ptr
 150+ E460             >
 150+ E460             >mirror_Ptr      defl    $
 150+ E460             >
 150+ E460 9E 27       >                dw      Dict_Ptr + 2        // xt
 150+ E462             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E462             >
 150+ E462             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E462             >
 150+ E462             >//              ______________________________________________________________________
 150+ E462             >//              Dictionary part
 150+ E462             >
 150+ E462             >                org     Dict_Ptr
 150+ 279C             >
 150+ 279C 60 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 279E             >
 150+ 279E             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 279E CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 27A1             >
 150+ 27A1             >
 150+ 27A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 27A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 27A1             >
 150+ 27A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 27A1 34 20       >                dw      Next_Ptr
 151+ 27A3
 152+ 27A3              //  ______________________________________________________________________
 153+ 27A3              //
 154+ 27A3
 155+ 27A3                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 27A3             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 27A3             >
 155+ 27A3             >Dict_Ptr        defl    $
 155+ 27A3             >
 155+ 27A3             >//              ______________________________________________________________________
 155+ 27A3             >//              Heap part
 155+ 27A3             >
 155+ 27A3             >
 155+ 27A3             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E462             >
 155+ E462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E462             >Latest_Definition defl  Heap_Ptr
 155+ E462             >
 155+ E462             >                // dummy db directives used to calculate length of namec
 155+ E462 53 30       >                db      "S0"
 155+ E464             >len_NFA         defl    $ - temp_NFA
 155+ E464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E462             >
 155+ E462 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E463 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E465             >                org     $-1                 // alter last byte of Name just above to set
 155+ E464 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E465             >
 155+ E465 57 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E467             >Prev_Ptr        defl    Heap_Ptr
 155+ E467             >
 155+ E467             >mirror_Ptr      defl    $
 155+ E467             >
 155+ E467 A5 27       >                dw      Dict_Ptr + 2        // xt
 155+ E469             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E469             >
 155+ E469             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E469             >
 155+ E469             >//              ______________________________________________________________________
 155+ E469             >//              Dictionary part
 155+ E469             >
 155+ E469             >                org     Dict_Ptr
 155+ 27A3             >
 155+ 27A3 67 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 27A5             >
 155+ 27A5             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 27A5 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 27A8             >
 155+ 27A8             >
 155+ 27A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 27A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 27A8             >
 155+ 27A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 27A8 06          >                db      06
 156+ 27A9                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 27A9             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 27A9             >
 156+ 27A9             >Dict_Ptr        defl    $
 156+ 27A9             >
 156+ 27A9             >//              ______________________________________________________________________
 156+ 27A9             >//              Heap part
 156+ 27A9             >
 156+ 27A9             >
 156+ 27A9             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E469             >
 156+ E469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E469             >Latest_Definition defl  Heap_Ptr
 156+ E469             >
 156+ E469             >                // dummy db directives used to calculate length of namec
 156+ E469 52 30       >                db      "R0"
 156+ E46B             >len_NFA         defl    $ - temp_NFA
 156+ E46B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E469             >
 156+ E469 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46C             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46B B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46C             >
 156+ E46C 62 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46E             >Prev_Ptr        defl    Heap_Ptr
 156+ E46E             >
 156+ E46E             >mirror_Ptr      defl    $
 156+ E46E             >
 156+ E46E AB 27       >                dw      Dict_Ptr + 2        // xt
 156+ E470             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E470             >
 156+ E470             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E470             >
 156+ E470             >//              ______________________________________________________________________
 156+ E470             >//              Dictionary part
 156+ E470             >
 156+ E470             >                org     Dict_Ptr
 156+ 27A9             >
 156+ 27A9 6E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 27AB             >
 156+ 27AB             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 27AB CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 27AE             >
 156+ 27AE             >
 156+ 27AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 27AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 27AE             >
 156+ 27AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 27AE 08          >                db      08
 157+ 27AF                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 27AF             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 27AF             >
 157+ 27AF             >Dict_Ptr        defl    $
 157+ 27AF             >
 157+ 27AF             >//              ______________________________________________________________________
 157+ 27AF             >//              Heap part
 157+ 27AF             >
 157+ 27AF             >
 157+ 27AF             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E470             >
 157+ E470             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E470             >Latest_Definition defl  Heap_Ptr
 157+ E470             >
 157+ E470             >                // dummy db directives used to calculate length of namec
 157+ E470 54 49 42    >                db      "TIB"
 157+ E473             >len_NFA         defl    $ - temp_NFA
 157+ E473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E470             >
 157+ E470 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E471 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E474             >                org     $-1                 // alter last byte of Name just above to set
 157+ E473 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E474             >
 157+ E474 69 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E476             >Prev_Ptr        defl    Heap_Ptr
 157+ E476             >
 157+ E476             >mirror_Ptr      defl    $
 157+ E476             >
 157+ E476 B1 27       >                dw      Dict_Ptr + 2        // xt
 157+ E478             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E478             >
 157+ E478             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E478             >
 157+ E478             >//              ______________________________________________________________________
 157+ E478             >//              Dictionary part
 157+ E478             >
 157+ E478             >                org     Dict_Ptr
 157+ 27AF             >
 157+ 27AF 76 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 27B1             >
 157+ 27B1             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 27B1 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 27B4             >
 157+ 27B4             >
 157+ 27B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 27B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 27B4             >
 157+ 27B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 27B4 0A          >                db      10
 158+ 27B5                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 27B5             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 27B5             >
 158+ 27B5             >Dict_Ptr        defl    $
 158+ 27B5             >
 158+ 27B5             >//              ______________________________________________________________________
 158+ 27B5             >//              Heap part
 158+ 27B5             >
 158+ 27B5             >
 158+ 27B5             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E478             >
 158+ E478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E478             >Latest_Definition defl  Heap_Ptr
 158+ E478             >
 158+ E478             >                // dummy db directives used to calculate length of namec
 158+ E478 57 49 44 54 >                db      "WIDTH"
 158+ E47C 48          >
 158+ E47D             >len_NFA         defl    $ - temp_NFA
 158+ E47D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E478             >
 158+ E478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E479 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47D 48          >
 158+ E47E             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47D C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47E             >
 158+ E47E 70 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E480             >Prev_Ptr        defl    Heap_Ptr
 158+ E480             >
 158+ E480             >mirror_Ptr      defl    $
 158+ E480             >
 158+ E480 B7 27       >                dw      Dict_Ptr + 2        // xt
 158+ E482             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E482             >
 158+ E482             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E482             >
 158+ E482             >//              ______________________________________________________________________
 158+ E482             >//              Dictionary part
 158+ E482             >
 158+ E482             >                org     Dict_Ptr
 158+ 27B5             >
 158+ 27B5 80 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 27B7             >
 158+ 27B7             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 27B7 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 27BA             >
 158+ 27BA             >
 158+ 27BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 27BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 27BA             >
 158+ 27BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 27BA 0C          >                db      12
 159+ 27BB                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 27BB             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 27BB             >
 159+ 27BB             >Dict_Ptr        defl    $
 159+ 27BB             >
 159+ 27BB             >//              ______________________________________________________________________
 159+ 27BB             >//              Heap part
 159+ 27BB             >
 159+ 27BB             >
 159+ 27BB             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E482             >
 159+ E482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E482             >Latest_Definition defl  Heap_Ptr
 159+ E482             >
 159+ E482             >                // dummy db directives used to calculate length of namec
 159+ E482 57 41 52 4E >                db      "WARNING"
 159+ E486 49 4E 47    >
 159+ E489             >len_NFA         defl    $ - temp_NFA
 159+ E489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E482             >
 159+ E482 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E483 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E487 49 4E 47    >
 159+ E48A             >                org     $-1                 // alter last byte of Name just above to set
 159+ E489 C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48A             >
 159+ E48A 78 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48C             >Prev_Ptr        defl    Heap_Ptr
 159+ E48C             >
 159+ E48C             >mirror_Ptr      defl    $
 159+ E48C             >
 159+ E48C BD 27       >                dw      Dict_Ptr + 2        // xt
 159+ E48E             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48E             >
 159+ E48E             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48E             >
 159+ E48E             >//              ______________________________________________________________________
 159+ E48E             >//              Dictionary part
 159+ E48E             >
 159+ E48E             >                org     Dict_Ptr
 159+ 27BB             >
 159+ 27BB 8C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 27BD             >
 159+ 27BD             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 27BD CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 27C0             >
 159+ 27C0             >
 159+ 27C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 27C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 27C0             >
 159+ 27C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 27C0 0E          >                db      14
 160+ 27C1                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 27C1             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 27C1             >
 160+ 27C1             >Dict_Ptr        defl    $
 160+ 27C1             >
 160+ 27C1             >//              ______________________________________________________________________
 160+ 27C1             >//              Heap part
 160+ 27C1             >
 160+ 27C1             >
 160+ 27C1             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48E             >
 160+ E48E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48E             >Latest_Definition defl  Heap_Ptr
 160+ E48E             >
 160+ E48E             >                // dummy db directives used to calculate length of namec
 160+ E48E 46 45 4E 43 >                db      "FENCE"
 160+ E492 45          >
 160+ E493             >len_NFA         defl    $ - temp_NFA
 160+ E493             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48E             >
 160+ E48E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E48F 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E493 45          >
 160+ E494             >                org     $-1                 // alter last byte of Name just above to set
 160+ E493 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E494             >
 160+ E494 82 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E496             >Prev_Ptr        defl    Heap_Ptr
 160+ E496             >
 160+ E496             >mirror_Ptr      defl    $
 160+ E496             >
 160+ E496 C3 27       >                dw      Dict_Ptr + 2        // xt
 160+ E498             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E498             >
 160+ E498             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E498             >
 160+ E498             >//              ______________________________________________________________________
 160+ E498             >//              Dictionary part
 160+ E498             >
 160+ E498             >                org     Dict_Ptr
 160+ 27C1             >
 160+ 27C1 96 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 27C3             >
 160+ 27C3             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 27C3 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 27C6             >
 160+ 27C6             >
 160+ 27C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 27C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 27C6             >
 160+ 27C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 27C6 10          >                db      16
 161+ 27C7                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 27C7             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 27C7             >
 161+ 27C7             >Dict_Ptr        defl    $
 161+ 27C7             >
 161+ 27C7             >//              ______________________________________________________________________
 161+ 27C7             >//              Heap part
 161+ 27C7             >
 161+ 27C7             >
 161+ 27C7             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E498             >
 161+ E498             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E498             >Latest_Definition defl  Heap_Ptr
 161+ E498             >
 161+ E498             >                // dummy db directives used to calculate length of namec
 161+ E498 44 50       >                db      "DP"
 161+ E49A             >len_NFA         defl    $ - temp_NFA
 161+ E49A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E498             >
 161+ E498 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E499 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49B             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49B             >
 161+ E49B 8E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49D             >Prev_Ptr        defl    Heap_Ptr
 161+ E49D             >
 161+ E49D             >mirror_Ptr      defl    $
 161+ E49D             >
 161+ E49D C9 27       >                dw      Dict_Ptr + 2        // xt
 161+ E49F             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E49F             >
 161+ E49F             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E49F             >
 161+ E49F             >//              ______________________________________________________________________
 161+ E49F             >//              Dictionary part
 161+ E49F             >
 161+ E49F             >                org     Dict_Ptr
 161+ 27C7             >
 161+ 27C7 9D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 27C9             >
 161+ 27C9             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 27C9 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 27CC             >
 161+ 27CC             >
 161+ 27CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 27CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 27CC             >
 161+ 27CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 27CC 12          >                db      18
 162+ 27CD                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 27CD             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 27CD             >
 162+ 27CD             >Dict_Ptr        defl    $
 162+ 27CD             >
 162+ 27CD             >//              ______________________________________________________________________
 162+ 27CD             >//              Heap part
 162+ 27CD             >
 162+ 27CD             >
 162+ 27CD             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E49F             >
 162+ E49F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E49F             >Latest_Definition defl  Heap_Ptr
 162+ E49F             >
 162+ E49F             >                // dummy db directives used to calculate length of namec
 162+ E49F 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A3 4C 49 4E 4B >
 162+ E4A7             >len_NFA         defl    $ - temp_NFA
 162+ E4A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E49F             >
 162+ E49F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A7 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A8             >
 162+ E4A8 98 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AA             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AA             >
 162+ E4AA             >mirror_Ptr      defl    $
 162+ E4AA             >
 162+ E4AA CF 27       >                dw      Dict_Ptr + 2        // xt
 162+ E4AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AC             >
 162+ E4AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AC             >
 162+ E4AC             >//              ______________________________________________________________________
 162+ E4AC             >//              Dictionary part
 162+ E4AC             >
 162+ E4AC             >                org     Dict_Ptr
 162+ 27CD             >
 162+ 27CD AA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 27CF             >
 162+ 27CF             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 27CF CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 27D2             >
 162+ 27D2             >
 162+ 27D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 27D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 27D2             >
 162+ 27D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 27D2 14          >                db      20
 163+ 27D3                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 27D3             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 27D3             >
 163+ 27D3             >Dict_Ptr        defl    $
 163+ 27D3             >
 163+ 27D3             >//              ______________________________________________________________________
 163+ 27D3             >//              Heap part
 163+ 27D3             >
 163+ 27D3             >
 163+ 27D3             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AC             >
 163+ E4AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AC             >Latest_Definition defl  Heap_Ptr
 163+ E4AC             >
 163+ E4AC             >                // dummy db directives used to calculate length of namec
 163+ E4AC 46 49 52 53 >                db      "FIRST"
 163+ E4B0 54          >
 163+ E4B1             >len_NFA         defl    $ - temp_NFA
 163+ E4B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AC             >
 163+ E4AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AD 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B1 54          >
 163+ E4B2             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B1 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B2             >
 163+ E4B2 9F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B4             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B4             >
 163+ E4B4             >mirror_Ptr      defl    $
 163+ E4B4             >
 163+ E4B4 D5 27       >                dw      Dict_Ptr + 2        // xt
 163+ E4B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B6             >
 163+ E4B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B6             >
 163+ E4B6             >//              ______________________________________________________________________
 163+ E4B6             >//              Dictionary part
 163+ E4B6             >
 163+ E4B6             >                org     Dict_Ptr
 163+ 27D3             >
 163+ 27D3 B4 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 27D5             >
 163+ 27D5             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 27D5 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 27D8             >
 163+ 27D8             >
 163+ 27D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 27D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 27D8             >
 163+ 27D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 27D8 16          >                db      22
 164+ 27D9                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 27D9             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 27D9             >
 164+ 27D9             >Dict_Ptr        defl    $
 164+ 27D9             >
 164+ 27D9             >//              ______________________________________________________________________
 164+ 27D9             >//              Heap part
 164+ 27D9             >
 164+ 27D9             >
 164+ 27D9             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B6             >
 164+ E4B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B6             >Latest_Definition defl  Heap_Ptr
 164+ E4B6             >
 164+ E4B6             >                // dummy db directives used to calculate length of namec
 164+ E4B6 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BA 54          >
 164+ E4BB             >len_NFA         defl    $ - temp_NFA
 164+ E4BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B6             >
 164+ E4B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BB 54          >
 164+ E4BC             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BB D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BC             >
 164+ E4BC AC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BE             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BE             >
 164+ E4BE             >mirror_Ptr      defl    $
 164+ E4BE             >
 164+ E4BE DB 27       >                dw      Dict_Ptr + 2        // xt
 164+ E4C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C0             >
 164+ E4C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C0             >
 164+ E4C0             >//              ______________________________________________________________________
 164+ E4C0             >//              Dictionary part
 164+ E4C0             >
 164+ E4C0             >                org     Dict_Ptr
 164+ 27D9             >
 164+ 27D9 BE 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 27DB             >
 164+ 27DB             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 27DB CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 27DE             >
 164+ 27DE             >
 164+ 27DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 27DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 27DE             >
 164+ 27DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 27DE 18          >                db      24
 165+ 27DF                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 27DF             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 27DF             >
 165+ 27DF             >Dict_Ptr        defl    $
 165+ 27DF             >
 165+ 27DF             >//              ______________________________________________________________________
 165+ 27DF             >//              Heap part
 165+ 27DF             >
 165+ 27DF             >
 165+ 27DF             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C0             >
 165+ E4C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C0             >Latest_Definition defl  Heap_Ptr
 165+ E4C0             >
 165+ E4C0             >                // dummy db directives used to calculate length of namec
 165+ E4C0 48 50       >                db      "HP"
 165+ E4C2             >len_NFA         defl    $ - temp_NFA
 165+ E4C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C0             >
 165+ E4C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C1 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C3             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C2 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C3             >
 165+ E4C3 B6 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C5             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C5             >
 165+ E4C5             >mirror_Ptr      defl    $
 165+ E4C5             >
 165+ E4C5 E1 27       >                dw      Dict_Ptr + 2        // xt
 165+ E4C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C7             >
 165+ E4C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C7             >
 165+ E4C7             >//              ______________________________________________________________________
 165+ E4C7             >//              Dictionary part
 165+ E4C7             >
 165+ E4C7             >                org     Dict_Ptr
 165+ 27DF             >
 165+ 27DF C5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 27E1             >
 165+ 27E1             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 27E1 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 27E4             >
 165+ 27E4             >
 165+ 27E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 27E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 27E4             >
 165+ 27E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 27E4 1A          >                db      26
 166+ 27E5                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 27E5             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 27E5             >
 166+ 27E5             >Dict_Ptr        defl    $
 166+ 27E5             >
 166+ 27E5             >//              ______________________________________________________________________
 166+ 27E5             >//              Heap part
 166+ 27E5             >
 166+ 27E5             >
 166+ 27E5             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C7             >
 166+ E4C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C7             >Latest_Definition defl  Heap_Ptr
 166+ E4C7             >
 166+ E4C7             >                // dummy db directives used to calculate length of namec
 166+ E4C7 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CB 45          >
 166+ E4CC             >len_NFA         defl    $ - temp_NFA
 166+ E4CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C7             >
 166+ E4C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CC 45          >
 166+ E4CD             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CC C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CD             >
 166+ E4CD C0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4CF             >Prev_Ptr        defl    Heap_Ptr
 166+ E4CF             >
 166+ E4CF             >mirror_Ptr      defl    $
 166+ E4CF             >
 166+ E4CF E7 27       >                dw      Dict_Ptr + 2        // xt
 166+ E4D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D1             >
 166+ E4D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D1             >
 166+ E4D1             >//              ______________________________________________________________________
 166+ E4D1             >//              Dictionary part
 166+ E4D1             >
 166+ E4D1             >                org     Dict_Ptr
 166+ 27E5             >
 166+ 27E5 CF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 27E7             >
 166+ 27E7             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 27E7 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 27EA             >
 166+ 27EA             >
 166+ 27EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 27EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 27EA             >
 166+ 27EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 27EA 1C          >                db      28
 167+ 27EB                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 27EB             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 27EB             >
 167+ 27EB             >Dict_Ptr        defl    $
 167+ 27EB             >
 167+ 27EB             >//              ______________________________________________________________________
 167+ 27EB             >//              Heap part
 167+ 27EB             >
 167+ 27EB             >
 167+ 27EB             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D1             >
 167+ E4D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D1             >Latest_Definition defl  Heap_Ptr
 167+ E4D1             >
 167+ E4D1             >                // dummy db directives used to calculate length of namec
 167+ E4D1 42 4C 4B    >                db      "BLK"
 167+ E4D4             >len_NFA         defl    $ - temp_NFA
 167+ E4D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D1             >
 167+ E4D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D2 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D5             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D4 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D5             >
 167+ E4D5 C7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D7             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D7             >
 167+ E4D7             >mirror_Ptr      defl    $
 167+ E4D7             >
 167+ E4D7 ED 27       >                dw      Dict_Ptr + 2        // xt
 167+ E4D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4D9             >
 167+ E4D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4D9             >
 167+ E4D9             >//              ______________________________________________________________________
 167+ E4D9             >//              Dictionary part
 167+ E4D9             >
 167+ E4D9             >                org     Dict_Ptr
 167+ 27EB             >
 167+ 27EB D7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 27ED             >
 167+ 27ED             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 27ED CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 27F0             >
 167+ 27F0             >
 167+ 27F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 27F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 27F0             >
 167+ 27F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 27F0 1E          >                db      30
 168+ 27F1                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 27F1             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 27F1             >
 168+ 27F1             >Dict_Ptr        defl    $
 168+ 27F1             >
 168+ 27F1             >//              ______________________________________________________________________
 168+ 27F1             >//              Heap part
 168+ 27F1             >
 168+ 27F1             >
 168+ 27F1             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4D9             >
 168+ E4D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4D9             >Latest_Definition defl  Heap_Ptr
 168+ E4D9             >
 168+ E4D9             >                // dummy db directives used to calculate length of namec
 168+ E4D9 3E 49 4E    >                db      ">IN"
 168+ E4DC             >len_NFA         defl    $ - temp_NFA
 168+ E4DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4D9             >
 168+ E4D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DA 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DD             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DC CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DD             >
 168+ E4DD D1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4DF             >Prev_Ptr        defl    Heap_Ptr
 168+ E4DF             >
 168+ E4DF             >mirror_Ptr      defl    $
 168+ E4DF             >
 168+ E4DF F3 27       >                dw      Dict_Ptr + 2        // xt
 168+ E4E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E1             >
 168+ E4E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E1             >
 168+ E4E1             >//              ______________________________________________________________________
 168+ E4E1             >//              Dictionary part
 168+ E4E1             >
 168+ E4E1             >                org     Dict_Ptr
 168+ 27F1             >
 168+ 27F1 DF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 27F3             >
 168+ 27F3             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 27F3 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 27F6             >
 168+ 27F6             >
 168+ 27F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 27F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 27F6             >
 168+ 27F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 27F6 20          >                db      32
 169+ 27F7                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 27F7             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 27F7             >
 169+ 27F7             >Dict_Ptr        defl    $
 169+ 27F7             >
 169+ 27F7             >//              ______________________________________________________________________
 169+ 27F7             >//              Heap part
 169+ 27F7             >
 169+ 27F7             >
 169+ 27F7             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E1             >
 169+ E4E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E1             >Latest_Definition defl  Heap_Ptr
 169+ E4E1             >
 169+ E4E1             >                // dummy db directives used to calculate length of namec
 169+ E4E1 4F 55 54    >                db      "OUT"
 169+ E4E4             >len_NFA         defl    $ - temp_NFA
 169+ E4E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E1             >
 169+ E4E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E5             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E5             >
 169+ E4E5 D9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E7             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E7             >
 169+ E4E7             >mirror_Ptr      defl    $
 169+ E4E7             >
 169+ E4E7 F9 27       >                dw      Dict_Ptr + 2        // xt
 169+ E4E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4E9             >
 169+ E4E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4E9             >
 169+ E4E9             >//              ______________________________________________________________________
 169+ E4E9             >//              Dictionary part
 169+ E4E9             >
 169+ E4E9             >                org     Dict_Ptr
 169+ 27F7             >
 169+ 27F7 E7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 27F9             >
 169+ 27F9             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 27F9 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 27FC             >
 169+ 27FC             >
 169+ 27FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 27FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 27FC             >
 169+ 27FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 27FC 22          >                db      34
 170+ 27FD                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 27FD             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 27FD             >
 170+ 27FD             >Dict_Ptr        defl    $
 170+ 27FD             >
 170+ 27FD             >//              ______________________________________________________________________
 170+ 27FD             >//              Heap part
 170+ 27FD             >
 170+ 27FD             >
 170+ 27FD             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4E9             >
 170+ E4E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4E9             >Latest_Definition defl  Heap_Ptr
 170+ E4E9             >
 170+ E4E9             >                // dummy db directives used to calculate length of namec
 170+ E4E9 53 43 52    >                db      "SCR"
 170+ E4EC             >len_NFA         defl    $ - temp_NFA
 170+ E4EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4E9             >
 170+ E4E9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EA 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4ED             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EC D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4ED             >
 170+ E4ED E1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4EF             >Prev_Ptr        defl    Heap_Ptr
 170+ E4EF             >
 170+ E4EF             >mirror_Ptr      defl    $
 170+ E4EF             >
 170+ E4EF FF 27       >                dw      Dict_Ptr + 2        // xt
 170+ E4F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F1             >
 170+ E4F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F1             >
 170+ E4F1             >//              ______________________________________________________________________
 170+ E4F1             >//              Dictionary part
 170+ E4F1             >
 170+ E4F1             >                org     Dict_Ptr
 170+ 27FD             >
 170+ 27FD EF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 27FF             >
 170+ 27FF             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 27FF CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 2802             >
 170+ 2802             >
 170+ 2802             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 2802             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 2802             >
 170+ 2802             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 2802 24          >                db      36
 171+ 2803                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 2803             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 2803             >
 171+ 2803             >Dict_Ptr        defl    $
 171+ 2803             >
 171+ 2803             >//              ______________________________________________________________________
 171+ 2803             >//              Heap part
 171+ 2803             >
 171+ 2803             >
 171+ 2803             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F1             >
 171+ E4F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F1             >Latest_Definition defl  Heap_Ptr
 171+ E4F1             >
 171+ E4F1             >                // dummy db directives used to calculate length of namec
 171+ E4F1 4F 46 46 53 >                db      "OFFSET"
 171+ E4F5 45 54       >
 171+ E4F7             >len_NFA         defl    $ - temp_NFA
 171+ E4F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F1             >
 171+ E4F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F6 45 54       >
 171+ E4F8             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F7 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F8             >
 171+ E4F8 E9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FA             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FA             >
 171+ E4FA             >mirror_Ptr      defl    $
 171+ E4FA             >
 171+ E4FA 05 28       >                dw      Dict_Ptr + 2        // xt
 171+ E4FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FC             >
 171+ E4FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FC             >
 171+ E4FC             >//              ______________________________________________________________________
 171+ E4FC             >//              Dictionary part
 171+ E4FC             >
 171+ E4FC             >                org     Dict_Ptr
 171+ 2803             >
 171+ 2803 FA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 2805             >
 171+ 2805             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 2805 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 2808             >
 171+ 2808             >
 171+ 2808             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 2808             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 2808             >
 171+ 2808             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 2808 26          >                db      38
 172+ 2809                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 2809             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 2809             >
 172+ 2809             >Dict_Ptr        defl    $
 172+ 2809             >
 172+ 2809             >//              ______________________________________________________________________
 172+ 2809             >//              Heap part
 172+ 2809             >
 172+ 2809             >
 172+ 2809             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FC             >
 172+ E4FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FC             >Latest_Definition defl  Heap_Ptr
 172+ E4FC             >
 172+ E4FC             >                // dummy db directives used to calculate length of namec
 172+ E4FC 43 4F 4E 54 >                db      "CONTEXT"
 172+ E500 45 58 54    >
 172+ E503             >len_NFA         defl    $ - temp_NFA
 172+ E503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FC             >
 172+ E4FC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E501 45 58 54    >
 172+ E504             >                org     $-1                 // alter last byte of Name just above to set
 172+ E503 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E504             >
 172+ E504 F1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E506             >Prev_Ptr        defl    Heap_Ptr
 172+ E506             >
 172+ E506             >mirror_Ptr      defl    $
 172+ E506             >
 172+ E506 0B 28       >                dw      Dict_Ptr + 2        // xt
 172+ E508             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E508             >
 172+ E508             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E508             >
 172+ E508             >//              ______________________________________________________________________
 172+ E508             >//              Dictionary part
 172+ E508             >
 172+ E508             >                org     Dict_Ptr
 172+ 2809             >
 172+ 2809 06 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 280B             >
 172+ 280B             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 280B CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 280E             >
 172+ 280E             >
 172+ 280E             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 280E             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 280E             >
 172+ 280E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 280E 28          >                db      40
 173+ 280F                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 280F             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 280F             >
 173+ 280F             >Dict_Ptr        defl    $
 173+ 280F             >
 173+ 280F             >//              ______________________________________________________________________
 173+ 280F             >//              Heap part
 173+ 280F             >
 173+ 280F             >
 173+ 280F             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E508             >
 173+ E508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E508             >Latest_Definition defl  Heap_Ptr
 173+ E508             >
 173+ E508             >                // dummy db directives used to calculate length of namec
 173+ E508 43 55 52 52 >                db      "CURRENT"
 173+ E50C 45 4E 54    >
 173+ E50F             >len_NFA         defl    $ - temp_NFA
 173+ E50F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E508             >
 173+ E508 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E509 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50D 45 4E 54    >
 173+ E510             >                org     $-1                 // alter last byte of Name just above to set
 173+ E50F D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E510             >
 173+ E510 FC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E512             >Prev_Ptr        defl    Heap_Ptr
 173+ E512             >
 173+ E512             >mirror_Ptr      defl    $
 173+ E512             >
 173+ E512 11 28       >                dw      Dict_Ptr + 2        // xt
 173+ E514             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E514             >
 173+ E514             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E514             >
 173+ E514             >//              ______________________________________________________________________
 173+ E514             >//              Dictionary part
 173+ E514             >
 173+ E514             >                org     Dict_Ptr
 173+ 280F             >
 173+ 280F 12 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 2811             >
 173+ 2811             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 2811 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 2814             >
 173+ 2814             >
 173+ 2814             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 2814             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 2814             >
 173+ 2814             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 2814 2A          >                db      42
 174+ 2815                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 2815             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 2815             >
 174+ 2815             >Dict_Ptr        defl    $
 174+ 2815             >
 174+ 2815             >//              ______________________________________________________________________
 174+ 2815             >//              Heap part
 174+ 2815             >
 174+ 2815             >
 174+ 2815             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E514             >
 174+ E514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E514             >Latest_Definition defl  Heap_Ptr
 174+ E514             >
 174+ E514             >                // dummy db directives used to calculate length of namec
 174+ E514 53 54 41 54 >                db      "STATE"
 174+ E518 45          >
 174+ E519             >len_NFA         defl    $ - temp_NFA
 174+ E519             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E514             >
 174+ E514 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E515 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E519 45          >
 174+ E51A             >                org     $-1                 // alter last byte of Name just above to set
 174+ E519 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51A             >
 174+ E51A 08 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51C             >Prev_Ptr        defl    Heap_Ptr
 174+ E51C             >
 174+ E51C             >mirror_Ptr      defl    $
 174+ E51C             >
 174+ E51C 17 28       >                dw      Dict_Ptr + 2        // xt
 174+ E51E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51E             >
 174+ E51E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51E             >
 174+ E51E             >//              ______________________________________________________________________
 174+ E51E             >//              Dictionary part
 174+ E51E             >
 174+ E51E             >                org     Dict_Ptr
 174+ 2815             >
 174+ 2815 1C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 2817             >
 174+ 2817             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 2817 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 281A             >
 174+ 281A             >
 174+ 281A             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 281A             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 281A             >
 174+ 281A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 281A 2C          >                db      44
 175+ 281B                              User_Def BASE       , "BASE"      , 46 //
 175+ 281B             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 281B             >
 175+ 281B             >Dict_Ptr        defl    $
 175+ 281B             >
 175+ 281B             >//              ______________________________________________________________________
 175+ 281B             >//              Heap part
 175+ 281B             >
 175+ 281B             >
 175+ 281B             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51E             >
 175+ E51E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51E             >Latest_Definition defl  Heap_Ptr
 175+ E51E             >
 175+ E51E             >                // dummy db directives used to calculate length of namec
 175+ E51E 42 41 53 45 >                db      "BASE"
 175+ E522             >len_NFA         defl    $ - temp_NFA
 175+ E522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51E             >
 175+ E51E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E51F 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E523             >                org     $-1                 // alter last byte of Name just above to set
 175+ E522 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E523             >
 175+ E523 14 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E525             >Prev_Ptr        defl    Heap_Ptr
 175+ E525             >
 175+ E525             >mirror_Ptr      defl    $
 175+ E525             >
 175+ E525 1D 28       >                dw      Dict_Ptr + 2        // xt
 175+ E527             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E527             >
 175+ E527             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E527             >
 175+ E527             >//              ______________________________________________________________________
 175+ E527             >//              Dictionary part
 175+ E527             >
 175+ E527             >                org     Dict_Ptr
 175+ 281B             >
 175+ 281B 25 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 281D             >
 175+ 281D             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 281D CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 2820             >
 175+ 2820             >
 175+ 2820             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 2820             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 2820             >
 175+ 2820             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 2820 2E          >                db      46
 176+ 2821                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 2821             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 2821             >
 176+ 2821             >Dict_Ptr        defl    $
 176+ 2821             >
 176+ 2821             >//              ______________________________________________________________________
 176+ 2821             >//              Heap part
 176+ 2821             >
 176+ 2821             >
 176+ 2821             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E527             >
 176+ E527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E527             >Latest_Definition defl  Heap_Ptr
 176+ E527             >
 176+ E527             >                // dummy db directives used to calculate length of namec
 176+ E527 44 50 4C    >                db      "DPL"
 176+ E52A             >len_NFA         defl    $ - temp_NFA
 176+ E52A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E527             >
 176+ E527 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E528 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52B             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52A CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52B             >
 176+ E52B 1E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52D             >Prev_Ptr        defl    Heap_Ptr
 176+ E52D             >
 176+ E52D             >mirror_Ptr      defl    $
 176+ E52D             >
 176+ E52D 23 28       >                dw      Dict_Ptr + 2        // xt
 176+ E52F             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E52F             >
 176+ E52F             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E52F             >
 176+ E52F             >//              ______________________________________________________________________
 176+ E52F             >//              Dictionary part
 176+ E52F             >
 176+ E52F             >                org     Dict_Ptr
 176+ 2821             >
 176+ 2821 2D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 2823             >
 176+ 2823             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 2823 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 2826             >
 176+ 2826             >
 176+ 2826             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 2826             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 2826             >
 176+ 2826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 2826 30          >                db      48
 177+ 2827                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 2827             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 2827             >
 177+ 2827             >Dict_Ptr        defl    $
 177+ 2827             >
 177+ 2827             >//              ______________________________________________________________________
 177+ 2827             >//              Heap part
 177+ 2827             >
 177+ 2827             >
 177+ 2827             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E52F             >
 177+ E52F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E52F             >Latest_Definition defl  Heap_Ptr
 177+ E52F             >
 177+ E52F             >                // dummy db directives used to calculate length of namec
 177+ E52F 46 4C 44    >                db      "FLD"
 177+ E532             >len_NFA         defl    $ - temp_NFA
 177+ E532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E52F             >
 177+ E52F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E530 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E533             >                org     $-1                 // alter last byte of Name just above to set
 177+ E532 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E533             >
 177+ E533 27 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E535             >Prev_Ptr        defl    Heap_Ptr
 177+ E535             >
 177+ E535             >mirror_Ptr      defl    $
 177+ E535             >
 177+ E535 29 28       >                dw      Dict_Ptr + 2        // xt
 177+ E537             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E537             >
 177+ E537             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E537             >
 177+ E537             >//              ______________________________________________________________________
 177+ E537             >//              Dictionary part
 177+ E537             >
 177+ E537             >                org     Dict_Ptr
 177+ 2827             >
 177+ 2827 35 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 2829             >
 177+ 2829             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 2829 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 282C             >
 177+ 282C             >
 177+ 282C             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 282C             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 282C             >
 177+ 282C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 282C 32          >                db      50
 178+ 282D                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 282D             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 282D             >
 178+ 282D             >Dict_Ptr        defl    $
 178+ 282D             >
 178+ 282D             >//              ______________________________________________________________________
 178+ 282D             >//              Heap part
 178+ 282D             >
 178+ 282D             >
 178+ 282D             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E537             >
 178+ E537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E537             >Latest_Definition defl  Heap_Ptr
 178+ E537             >
 178+ E537             >                // dummy db directives used to calculate length of namec
 178+ E537 43 53 50    >                db      "CSP"
 178+ E53A             >len_NFA         defl    $ - temp_NFA
 178+ E53A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E537             >
 178+ E537 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E538 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53B             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53A D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53B             >
 178+ E53B 2F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53D             >Prev_Ptr        defl    Heap_Ptr
 178+ E53D             >
 178+ E53D             >mirror_Ptr      defl    $
 178+ E53D             >
 178+ E53D 2F 28       >                dw      Dict_Ptr + 2        // xt
 178+ E53F             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E53F             >
 178+ E53F             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E53F             >
 178+ E53F             >//              ______________________________________________________________________
 178+ E53F             >//              Dictionary part
 178+ E53F             >
 178+ E53F             >                org     Dict_Ptr
 178+ 282D             >
 178+ 282D 3D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 282F             >
 178+ 282F             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 282F CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 2832             >
 178+ 2832             >
 178+ 2832             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 2832             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 2832             >
 178+ 2832             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 2832 34          >                db      52
 179+ 2833                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 2833             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 2833             >
 179+ 2833             >Dict_Ptr        defl    $
 179+ 2833             >
 179+ 2833             >//              ______________________________________________________________________
 179+ 2833             >//              Heap part
 179+ 2833             >
 179+ 2833             >
 179+ 2833             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E53F             >
 179+ E53F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E53F             >Latest_Definition defl  Heap_Ptr
 179+ E53F             >
 179+ E53F             >                // dummy db directives used to calculate length of namec
 179+ E53F 52 23       >                db      "R#"
 179+ E541             >len_NFA         defl    $ - temp_NFA
 179+ E541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E53F             >
 179+ E53F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E540 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E542             >                org     $-1                 // alter last byte of Name just above to set
 179+ E541 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E542             >
 179+ E542 37 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E544             >Prev_Ptr        defl    Heap_Ptr
 179+ E544             >
 179+ E544             >mirror_Ptr      defl    $
 179+ E544             >
 179+ E544 35 28       >                dw      Dict_Ptr + 2        // xt
 179+ E546             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E546             >
 179+ E546             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E546             >
 179+ E546             >//              ______________________________________________________________________
 179+ E546             >//              Dictionary part
 179+ E546             >
 179+ E546             >                org     Dict_Ptr
 179+ 2833             >
 179+ 2833 44 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 2835             >
 179+ 2835             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 2835 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 2838             >
 179+ 2838             >
 179+ 2838             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 2838             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 2838             >
 179+ 2838             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 2838 36          >                db      54
 180+ 2839                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 2839             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 2839             >
 180+ 2839             >Dict_Ptr        defl    $
 180+ 2839             >
 180+ 2839             >//              ______________________________________________________________________
 180+ 2839             >//              Heap part
 180+ 2839             >
 180+ 2839             >
 180+ 2839             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E546             >
 180+ E546             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E546             >Latest_Definition defl  Heap_Ptr
 180+ E546             >
 180+ E546             >                // dummy db directives used to calculate length of namec
 180+ E546 48 4C 44    >                db      "HLD"
 180+ E549             >len_NFA         defl    $ - temp_NFA
 180+ E549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E546             >
 180+ E546 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E547 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54A             >                org     $-1                 // alter last byte of Name just above to set
 180+ E549 C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54A             >
 180+ E54A 3F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54C             >Prev_Ptr        defl    Heap_Ptr
 180+ E54C             >
 180+ E54C             >mirror_Ptr      defl    $
 180+ E54C             >
 180+ E54C 3B 28       >                dw      Dict_Ptr + 2        // xt
 180+ E54E             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54E             >
 180+ E54E             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54E             >
 180+ E54E             >//              ______________________________________________________________________
 180+ E54E             >//              Dictionary part
 180+ E54E             >
 180+ E54E             >                org     Dict_Ptr
 180+ 2839             >
 180+ 2839 4C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 283B             >
 180+ 283B             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 283B CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 283E             >
 180+ 283E             >
 180+ 283E             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 283E             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 283E             >
 180+ 283E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 283E 38          >                db      56
 181+ 283F                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 283F             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 283F             >
 181+ 283F             >Dict_Ptr        defl    $
 181+ 283F             >
 181+ 283F             >//              ______________________________________________________________________
 181+ 283F             >//              Heap part
 181+ 283F             >
 181+ 283F             >
 181+ 283F             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54E             >
 181+ E54E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54E             >Latest_Definition defl  Heap_Ptr
 181+ E54E             >
 181+ E54E             >                // dummy db directives used to calculate length of namec
 181+ E54E 55 53 45 44 >                db      "USED"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54E             >
 181+ E54E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E54F 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 46 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 41 28       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 283F             >
 181+ 283F 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 2841             >
 181+ 2841             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 2841 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 2844             >
 181+ 2844             >
 181+ 2844             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 2844             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 2844             >
 181+ 2844             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 2844 3A          >                db      58
 182+ 2845                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 2845             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 2845             >
 182+ 2845             >Dict_Ptr        defl    $
 182+ 2845             >
 182+ 2845             >//              ______________________________________________________________________
 182+ 2845             >//              Heap part
 182+ 2845             >
 182+ 2845             >
 182+ 2845             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 47 28       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 2845             >
 182+ 2845 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 2847             >
 182+ 2847             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 2847 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 284A             >
 182+ 284A             >
 182+ 284A             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 284A             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 284A             >
 182+ 284A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 284A 3C          >                db      60
 183+ 284B                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 284B             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 284B             >
 183+ 284B             >Dict_Ptr        defl    $
 183+ 284B             >
 183+ 284B             >//              ______________________________________________________________________
 183+ 284B             >//              Heap part
 183+ 284B             >
 183+ 284B             >
 183+ 284B             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 4D 28       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 284B             >
 183+ 284B 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 284D             >
 183+ 284D             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 284D CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 2850             >
 183+ 2850             >
 183+ 2850             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 2850             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 2850             >
 183+ 2850             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 2850 3E          >                db      62
 184+ 2851                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 2851             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 2851             >
 184+ 2851             >Dict_Ptr        defl    $
 184+ 2851             >
 184+ 2851             >//              ______________________________________________________________________
 184+ 2851             >//              Heap part
 184+ 2851             >
 184+ 2851             >
 184+ 2851             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 53 28       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 2851             >
 184+ 2851 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 2853             >
 184+ 2853             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 2853 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 2856             >
 184+ 2856             >
 184+ 2856             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 2856             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 2856             >
 184+ 2856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 2856 40          >                db      64
 185+ 2857                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 2857             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 2857             >
 185+ 2857             >Dict_Ptr        defl    $
 185+ 2857             >
 185+ 2857             >//              ______________________________________________________________________
 185+ 2857             >//              Heap part
 185+ 2857             >
 185+ 2857             >
 185+ 2857             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 59 28       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 2857             >
 185+ 2857 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 2859             >
 185+ 2859             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 2859 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 285C             >
 185+ 285C             >
 185+ 285C             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 285C             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 285C             >
 185+ 285C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 285C 42          >                db      66
 186+ 285D                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 285D             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 285D             >
 186+ 285D             >Dict_Ptr        defl    $
 186+ 285D             >
 186+ 285D             >//              ______________________________________________________________________
 186+ 285D             >//              Heap part
 186+ 285D             >
 186+ 285D             >
 186+ 285D             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 5F 28       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 285D             >
 186+ 285D 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 285F             >
 186+ 285F             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 285F CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 2862             >
 186+ 2862             >
 186+ 2862             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 2862             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 2862             >
 186+ 2862             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 2862 44          >                db      68
 187+ 2863                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 2863             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 2863             >
 187+ 2863             >Dict_Ptr        defl    $
 187+ 2863             >
 187+ 2863             >//              ______________________________________________________________________
 187+ 2863             >//              Heap part
 187+ 2863             >
 187+ 2863             >
 187+ 2863             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 65 28       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 2863             >
 187+ 2863 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 2865             >
 187+ 2865             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 2865 CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 2868             >
 187+ 2868             >
 187+ 2868             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 2868             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 2868             >
 187+ 2868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 2868 46          >                db      70
 188+ 2869                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 2869             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 2869             >
 188+ 2869             >Dict_Ptr        defl    $
 188+ 2869             >
 188+ 2869             >//              ______________________________________________________________________
 188+ 2869             >//              Heap part
 188+ 2869             >
 188+ 2869             >
 188+ 2869             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A 6B 28       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 2869             >
 188+ 2869 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 286B             >
 188+ 286B             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 286B CD 40 27    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 286E             >
 188+ 286E             >
 188+ 286E             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 286E             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 286E             >
 188+ 286E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 286E 48          >                db      72
 189+ 286F
 190+ 286F              //  ______________________________________________________________________
 191+ 286F              //
 192+ 286F              // here         -- a
 193+ 286F                              Colon_Def HERE, "HERE", is_normal
 193+ 286F             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 286F             >
 193+ 286F             >Dict_Ptr        defl    $
 193+ 286F             >
 193+ 286F             >//              ______________________________________________________________________
 193+ 286F             >//              Heap part
 193+ 286F             >
 193+ 286F             >
 193+ 286F             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 71 28       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 286F             >
 193+ 286F A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 2871             >
 193+ 2871             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 2871 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 2874             >
 193+ 2874             >
 193+ 2874             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 2874             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 2874             >
 193+ 2874             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 2874 C9 27 55 26                  dw      DP, FETCH               // dp @
 195+ 2878 0D 25                        dw      EXIT                    // ;
 196+ 287A
 197+ 287A              //  ______________________________________________________________________
 198+ 287A              //
 199+ 287A              // allot        n --
 200+ 287A                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 287A             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 287A             >
 200+ 287A             >Dict_Ptr        defl    $
 200+ 287A             >
 200+ 287A             >//              ______________________________________________________________________
 200+ 287A             >//              Heap part
 200+ 287A             >
 200+ 287A             >
 200+ 287A             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD 7C 28       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 287A             >
 200+ 287A AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 287C             >
 200+ 287C             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 287C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 287F             >
 200+ 287F             >
 200+ 287F             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 287F             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 287F             >
 200+ 287F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 287F C9 27 3D 26                  dw      DP,  PLUSSTORE          // dp +!
 202+ 2883 0D 25                        dw      EXIT                    // ;
 203+ 2885
 204+ 2885              //  ______________________________________________________________________
 205+ 2885              //
 206+ 2885              // comma        n --
 207+ 2885                              Colon_Def COMMA, ",", is_normal
 207+ 2885             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 2885             >
 207+ 2885             >Dict_Ptr        defl    $
 207+ 2885             >
 207+ 2885             >//              ______________________________________________________________________
 207+ 2885             >//              Heap part
 207+ 2885             >
 207+ 2885             >
 207+ 2885             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 87 28       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 2885             >
 207+ 2885 B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 2887             >
 207+ 2887             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 2887 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 288A             >
 207+ 288A             >
 207+ 288A             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 288A             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 288A             >
 207+ 288A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 288A 71 28 5F 26                  dw      HERE, STORE             // here !
 209+ 288E 5A 27 7C 28                  dw      TWO, ALLOT              // 2 allot
 210+ 2892 0D 25                        dw      EXIT                    // ;
 211+ 2894
 212+ 2894              //  ______________________________________________________________________
 213+ 2894              //
 214+ 2894              // ccomma       c --
 215+ 2894                              Colon_Def CCOMMA, "C,", is_normal
 215+ 2894             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 2894             >
 215+ 2894             >Dict_Ptr        defl    $
 215+ 2894             >
 215+ 2894             >//              ______________________________________________________________________
 215+ 2894             >//              Heap part
 215+ 2894             >
 215+ 2894             >
 215+ 2894             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA 96 28       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 2894             >
 215+ 2894 BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 2896             >
 215+ 2896             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 2896 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 2899             >
 215+ 2899             >
 215+ 2899             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 2899             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 2899             >
 215+ 2899             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 2899 71 28 73 26                  dw      HERE, CSTORE            // here c!
 217+ 289D 53 27 7C 28                  dw      ONE, ALLOT              // 1 allot
 218+ 28A1 0D 25                        dw      EXIT                    // ;
 219+ 28A3
 220+ 28A3              //  ______________________________________________________________________
 221+ 28A3              //
 222+ 28A3              // hpcomma      n --
 223+ 28A3              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 28A3              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 28A3              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 28A3              //              dw      EXIT                    // ;
 227+ 28A3
 228+ 28A3              //  ______________________________________________________________________
 229+ 28A3              //
 230+ 28A3              // s>d          n -- d
 231+ 28A3              // converts a single precision integer in a double precision
 232+ 28A3                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 28A3             >
 232+ 28A3             >Dict_Ptr        defl    $
 232+ 28A3             >
 232+ 28A3             >//              ______________________________________________________________________
 232+ 28A3             >//              Heap part
 232+ 28A3             >
 232+ 28A3             >
 232+ 28A3             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BC             >
 232+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BC             >Latest_Definition defl  Heap_Ptr
 232+ E5BC             >
 232+ E5BC             >                // dummy db directives used to calculate length of namec
 232+ E5BC 53 3E 44    >                db      "S>D"
 232+ E5BF             >len_NFA         defl    $ - temp_NFA
 232+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BC             >
 232+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C0             >
 232+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C2             >
 232+ E5C2             >mirror_Ptr      defl    $
 232+ E5C2             >
 232+ E5C2 A5 28       >                dw      Dict_Ptr + 2        // xt
 232+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C4             >
 232+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C4             >
 232+ E5C4             >//              ______________________________________________________________________
 232+ E5C4             >//              Dictionary part
 232+ E5C4             >
 232+ E5C4             >                org     Dict_Ptr
 232+ 28A3             >
 232+ 28A3 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 28A5             >
 232+ 28A5             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 28A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 28A5 ~           >
 232+ 28A5 ~           >
 232+ 28A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 28A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 28A5             >
 232+ 28A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 28A5 E1                           pop     hl
 234+ 28A6 7C                           ld      a, h
 235+ 28A7 E5                           push    hl
 236+ 28A8 17                           rla
 237+ 28A9 ED 62                        sbc     hl, hl
 238+ 28AB E5                           push    hl
 239+ 28AC                              next
 239+ 28AC DD E9       >                jp      (ix)
 240+ 28AE
 241+ 28AE              //  ______________________________________________________________________
 242+ 28AE              //
 243+ 28AE              // -            n1 n2 -- n3
 244+ 28AE              // subtraction
 245+ 28AE                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 28AE             >
 245+ 28AE             >Dict_Ptr        defl    $
 245+ 28AE             >
 245+ 28AE             >//              ______________________________________________________________________
 245+ 28AE             >//              Heap part
 245+ 28AE             >
 245+ 28AE             >
 245+ 28AE             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C4             >
 245+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C4             >Latest_Definition defl  Heap_Ptr
 245+ E5C4             >
 245+ E5C4             >                // dummy db directives used to calculate length of namec
 245+ E5C4 2D          >                db      "-"
 245+ E5C5             >len_NFA         defl    $ - temp_NFA
 245+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C4             >
 245+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C6             >
 245+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C8             >
 245+ E5C8             >mirror_Ptr      defl    $
 245+ E5C8             >
 245+ E5C8 B0 28       >                dw      Dict_Ptr + 2        // xt
 245+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CA             >
 245+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CA             >
 245+ E5CA             >//              ______________________________________________________________________
 245+ E5CA             >//              Dictionary part
 245+ E5CA             >
 245+ E5CA             >                org     Dict_Ptr
 245+ 28AE             >
 245+ 28AE C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 28B0             >
 245+ 28B0             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 28B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 28B0 ~           >
 245+ 28B0 ~           >
 245+ 28B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 28B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 28B0             >
 245+ 28B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 28B0 D9                           exx
 247+ 28B1 D1                           pop     de
 248+ 28B2 E1                           pop     hl
 249+ 28B3 A7                           and     a
 250+ 28B4 ED 52                        sbc     hl, de
 251+ 28B6 E5                           push    hl
 252+ 28B7 D9                           exx
 253+ 28B8                              next
 253+ 28B8 DD E9       >                jp      (ix)
 254+ 28BA
 255+ 28BA
 256+ 28BA              //  ______________________________________________________________________
 257+ 28BA              //
 258+ 28BA              // =            n1 n2 -- n3
 259+ 28BA              // equals
 260+ 28BA                              Colon_Def EQUALS, "=", is_normal
 260+ 28BA             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 28BA             >
 260+ 28BA             >Dict_Ptr        defl    $
 260+ 28BA             >
 260+ 28BA             >//              ______________________________________________________________________
 260+ 28BA             >//              Heap part
 260+ 28BA             >
 260+ 28BA             >
 260+ 28BA             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CA             >
 260+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CA             >Latest_Definition defl  Heap_Ptr
 260+ E5CA             >
 260+ E5CA             >                // dummy db directives used to calculate length of namec
 260+ E5CA 3D          >                db      "="
 260+ E5CB             >len_NFA         defl    $ - temp_NFA
 260+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CA             >
 260+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CC             >
 260+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CE             >
 260+ E5CE             >mirror_Ptr      defl    $
 260+ E5CE             >
 260+ E5CE BC 28       >                dw      Dict_Ptr + 2        // xt
 260+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D0             >
 260+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D0             >
 260+ E5D0             >//              ______________________________________________________________________
 260+ E5D0             >//              Dictionary part
 260+ E5D0             >
 260+ E5D0             >                org     Dict_Ptr
 260+ 28BA             >
 260+ 28BA CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 28BC             >
 260+ 28BC             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 28BC CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 28BF             >
 260+ 28BF             >
 260+ 28BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 28BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 28BF             >
 260+ 28BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 28BF B0 28 32 25                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 28C3 0D 25                        dw      EXIT                    // ;
 263+ 28C5
 264+ 28C5              //  ______________________________________________________________________
 265+ 28C5              //
 266+ 28C5              // u<           u1 u2 -- u3
 267+ 28C5              // unsigned less-than
 268+ 28C5                              New_Def ULESS, "U<", is_code, is_normal
 268+ 28C5             >
 268+ 28C5             >Dict_Ptr        defl    $
 268+ 28C5             >
 268+ 28C5             >//              ______________________________________________________________________
 268+ 28C5             >//              Heap part
 268+ 28C5             >
 268+ 28C5             >
 268+ 28C5             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D0             >
 268+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D0             >Latest_Definition defl  Heap_Ptr
 268+ E5D0             >
 268+ E5D0             >                // dummy db directives used to calculate length of namec
 268+ E5D0 55 3C       >                db      "U<"
 268+ E5D2             >len_NFA         defl    $ - temp_NFA
 268+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D0             >
 268+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D3             >
 268+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D5             >
 268+ E5D5             >mirror_Ptr      defl    $
 268+ E5D5             >
 268+ E5D5 C7 28       >                dw      Dict_Ptr + 2        // xt
 268+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D7             >
 268+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D7             >
 268+ E5D7             >//              ______________________________________________________________________
 268+ E5D7             >//              Dictionary part
 268+ E5D7             >
 268+ E5D7             >                org     Dict_Ptr
 268+ 28C5             >
 268+ 28C5 D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 28C7             >
 268+ 28C7             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 28C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 28C7 ~           >
 268+ 28C7 ~           >
 268+ 28C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 28C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 28C7             >
 268+ 28C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 28C7 D9                           exx
 270+ 28C8 D1                           pop     de
 271+ 28C9 E1                           pop     hl
 272+ 28CA A7                           and     a
 273+ 28CB ED 52                        sbc     hl, de
 274+ 28CD ED 62                        sbc     hl, hl
 275+ 28CF E5                           push    hl
 276+ 28D0 D9                           exx
 277+ 28D1                              next
 277+ 28D1 DD E9       >                jp      (ix)
 278+ 28D3
 279+ 28D3              //  ______________________________________________________________________
 280+ 28D3              //
 281+ 28D3              // <           n1 n2 -- n3
 282+ 28D3              // less-than
 283+ 28D3                              New_Def LESS, "<", is_code, is_normal
 283+ 28D3             >
 283+ 28D3             >Dict_Ptr        defl    $
 283+ 28D3             >
 283+ 28D3             >//              ______________________________________________________________________
 283+ 28D3             >//              Heap part
 283+ 28D3             >
 283+ 28D3             >
 283+ 28D3             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5D7             >
 283+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5D7             >Latest_Definition defl  Heap_Ptr
 283+ E5D7             >
 283+ E5D7             >                // dummy db directives used to calculate length of namec
 283+ E5D7 3C          >                db      "<"
 283+ E5D8             >len_NFA         defl    $ - temp_NFA
 283+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5D7             >
 283+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5D9             >
 283+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DB             >
 283+ E5DB             >mirror_Ptr      defl    $
 283+ E5DB             >
 283+ E5DB D5 28       >                dw      Dict_Ptr + 2        // xt
 283+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5DD             >
 283+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5DD             >
 283+ E5DD             >//              ______________________________________________________________________
 283+ E5DD             >//              Dictionary part
 283+ E5DD             >
 283+ E5DD             >                org     Dict_Ptr
 283+ 28D3             >
 283+ 28D3 DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 28D5             >
 283+ 28D5             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 28D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 28D5 ~           >
 283+ 28D5 ~           >
 283+ 28D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 28D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 28D5             >
 283+ 28D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 28D5 D9                           exx
 285+ 28D6 D1                           pop     de
 286+ 28D7 E1                           pop     hl
 287+ 28D8 7C                           ld      a, h
 288+ 28D9 EE 80                        xor     $80
 289+ 28DB 67                           ld      h, a
 290+ 28DC 7A                           ld      a, d
 291+ 28DD EE 80                        xor     $80
 292+ 28DF 57                           ld      d, a
 293+ 28E0              //              and     a
 294+ 28E0 ED 52                        sbc     hl, de
 295+ 28E2 ED 62                        sbc     hl, hl
 296+ 28E4 E5                           push    hl
 297+ 28E5 D9                           exx
 298+ 28E6                              next
 298+ 28E6 DD E9       >                jp      (ix)
 299+ 28E8
 300+ 28E8              //  ______________________________________________________________________
 301+ 28E8              //
 302+ 28E8              // >            n1 n2 -- n3
 303+ 28E8              // greater than
 304+ 28E8                              Colon_Def GREATER, ">", is_normal
 304+ 28E8             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 28E8             >
 304+ 28E8             >Dict_Ptr        defl    $
 304+ 28E8             >
 304+ 28E8             >//              ______________________________________________________________________
 304+ 28E8             >//              Heap part
 304+ 28E8             >
 304+ 28E8             >
 304+ 28E8             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DD             >
 304+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DD             >Latest_Definition defl  Heap_Ptr
 304+ E5DD             >
 304+ E5DD             >                // dummy db directives used to calculate length of namec
 304+ E5DD 3E          >                db      ">"
 304+ E5DE             >len_NFA         defl    $ - temp_NFA
 304+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DD             >
 304+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5DF             >
 304+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E1             >
 304+ E5E1             >mirror_Ptr      defl    $
 304+ E5E1             >
 304+ E5E1 EA 28       >                dw      Dict_Ptr + 2        // xt
 304+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E3             >
 304+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E3             >
 304+ E5E3             >//              ______________________________________________________________________
 304+ E5E3             >//              Dictionary part
 304+ E5E3             >
 304+ E5E3             >                org     Dict_Ptr
 304+ 28E8             >
 304+ 28E8 E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 28EA             >
 304+ 28EA             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 28EA CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 28ED             >
 304+ 28ED             >
 304+ 28ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 28ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 28ED             >
 304+ 28ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 28ED DD 25 D5 28                  dw      SWAP, LESS              // swap <
 306+ 28F1 0D 25                        dw      EXIT                    // ;
 307+ 28F3              //  ______________________________________________________________________
 308+ 28F3              //
 309+ 28F3              // min          n1 n2 -- n3
 310+ 28F3              // minimum between n1 and n2
 311+ 28F3                              Colon_Def MIN, "MIN" , is_normal
 311+ 28F3             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 28F3             >
 311+ 28F3             >Dict_Ptr        defl    $
 311+ 28F3             >
 311+ 28F3             >//              ______________________________________________________________________
 311+ 28F3             >//              Heap part
 311+ 28F3             >
 311+ 28F3             >
 311+ 28F3             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E3             >
 311+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E3             >Latest_Definition defl  Heap_Ptr
 311+ E5E3             >
 311+ E5E3             >                // dummy db directives used to calculate length of namec
 311+ E5E3 4D 49 4E    >                db      "MIN"
 311+ E5E6             >len_NFA         defl    $ - temp_NFA
 311+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E3             >
 311+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E7             >
 311+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 311+ E5E9             >
 311+ E5E9             >mirror_Ptr      defl    $
 311+ E5E9             >
 311+ E5E9 F5 28       >                dw      Dict_Ptr + 2        // xt
 311+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EB             >
 311+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EB             >
 311+ E5EB             >//              ______________________________________________________________________
 311+ E5EB             >//              Dictionary part
 311+ E5EB             >
 311+ E5EB             >                org     Dict_Ptr
 311+ 28F3             >
 311+ 28F3 E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 28F5             >
 311+ 28F5             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 28F5 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 28F8             >
 311+ 28F8             >
 311+ 28F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 28F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 28F8             >
 311+ 28F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 28F8 33 26                        dw      TWO_DUP                 // 2dup
 313+ 28FA EA 28                        dw      GREATER                 // >
 314+ 28FC 8F 20                        dw      ZBRANCH
 315+ 28FE 04 00                        dw      Min_Skip - $   // if
 316+ 2900 DD 25                        dw          SWAP                //      swap
 317+ 2902              Min_Skip:                                       // endif
 318+ 2902 C9 25                        dw      DROP                    // drop
 319+ 2904 0D 25                        dw      EXIT                    // ;
 320+ 2906
 321+ 2906              //  ______________________________________________________________________
 322+ 2906              //
 323+ 2906              // max          n1 n2 -- n3
 324+ 2906              // maximum between n1 and n2
 325+ 2906                              Colon_Def MAX, "MAX", is_normal
 325+ 2906             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 2906             >
 325+ 2906             >Dict_Ptr        defl    $
 325+ 2906             >
 325+ 2906             >//              ______________________________________________________________________
 325+ 2906             >//              Heap part
 325+ 2906             >
 325+ 2906             >
 325+ 2906             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EB             >
 325+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EB             >Latest_Definition defl  Heap_Ptr
 325+ E5EB             >
 325+ E5EB             >                // dummy db directives used to calculate length of namec
 325+ E5EB 4D 41 58    >                db      "MAX"
 325+ E5EE             >len_NFA         defl    $ - temp_NFA
 325+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EB             >
 325+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5EF             >
 325+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F1             >
 325+ E5F1             >mirror_Ptr      defl    $
 325+ E5F1             >
 325+ E5F1 08 29       >                dw      Dict_Ptr + 2        // xt
 325+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F3             >
 325+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F3             >
 325+ E5F3             >//              ______________________________________________________________________
 325+ E5F3             >//              Dictionary part
 325+ E5F3             >
 325+ E5F3             >                org     Dict_Ptr
 325+ 2906             >
 325+ 2906 F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 2908             >
 325+ 2908             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 2908 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 290B             >
 325+ 290B             >
 325+ 290B             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 290B             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 290B             >
 325+ 290B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 290B 33 26                        dw      TWO_DUP                 // 2dup
 327+ 290D D5 28                        dw      LESS                    // <
 328+ 290F 8F 20                        dw      ZBRANCH
 329+ 2911 04 00                        dw      Max_Skip - $   // if
 330+ 2913 DD 25                        dw          SWAP                //      swap
 331+ 2915              Max_Skip:                                       // endif
 332+ 2915 C9 25                        dw      DROP                    // drop
 333+ 2917 0D 25                        dw      EXIT                    // ;
 334+ 2919
 335+ 2919              //  ______________________________________________________________________
 336+ 2919              //
 337+ 2919              // ?dup         n -- 0 | n n
 338+ 2919              // duplicate if not zero
 339+ 2919                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 2919             >
 339+ 2919             >Dict_Ptr        defl    $
 339+ 2919             >
 339+ 2919             >//              ______________________________________________________________________
 339+ 2919             >//              Heap part
 339+ 2919             >
 339+ 2919             >
 339+ 2919             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F3             >
 339+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F3             >Latest_Definition defl  Heap_Ptr
 339+ E5F3             >
 339+ E5F3             >                // dummy db directives used to calculate length of namec
 339+ E5F3 3F 44 55 50 >                db      "?DUP"
 339+ E5F7             >len_NFA         defl    $ - temp_NFA
 339+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F3             >
 339+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F8             >
 339+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FA             >
 339+ E5FA             >mirror_Ptr      defl    $
 339+ E5FA             >
 339+ E5FA 1B 29       >                dw      Dict_Ptr + 2        // xt
 339+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FC             >
 339+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FC             >
 339+ E5FC             >//              ______________________________________________________________________
 339+ E5FC             >//              Dictionary part
 339+ E5FC             >
 339+ E5FC             >                org     Dict_Ptr
 339+ 2919             >
 339+ 2919 FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 291B             >
 339+ 291B             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 291B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 291B ~           >
 339+ 291B ~           >
 339+ 291B             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 291B             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 291B             >
 339+ 291B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 291B              QDup_Ptr:
 341+ 291B E1                           pop     hl
 342+ 291C 7C                           ld      a, h
 343+ 291D B5                           or      l
 344+ 291E 28 01                        jr      z, QDup_Skip
 345+ 2920 E5                               push    hl
 346+ 2921              QDup_Skip:
 347+ 2921                              psh1
 347+ 2921 E5          >                push    hl
 347+ 2922 DD E9       >                jp      (ix)
 348+ 2924
 349+ 2924              //  ______________________________________________________________________
 350+ 2924              //
 351+ 2924              // -dup         n -- 0 | n n
 352+ 2924              // duplicate if not zero
 353+ 2924                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 2924             >
 353+ 2924             >Dict_Ptr        defl    $
 353+ 2924             >
 353+ 2924             >//              ______________________________________________________________________
 353+ 2924             >//              Heap part
 353+ 2924             >
 353+ 2924             >
 353+ 2924             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FC             >
 353+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FC             >Latest_Definition defl  Heap_Ptr
 353+ E5FC             >
 353+ E5FC             >                // dummy db directives used to calculate length of namec
 353+ E5FC 2D 44 55 50 >                db      "-DUP"
 353+ E600             >len_NFA         defl    $ - temp_NFA
 353+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FC             >
 353+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E601             >                org     $-1                 // alter last byte of Name just above to set
 353+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E601             >
 353+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E603             >Prev_Ptr        defl    Heap_Ptr
 353+ E603             >
 353+ E603             >mirror_Ptr      defl    $
 353+ E603             >
 353+ E603 26 29       >                dw      Dict_Ptr + 2        // xt
 353+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E605             >
 353+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E605             >
 353+ E605             >//              ______________________________________________________________________
 353+ E605             >//              Dictionary part
 353+ E605             >
 353+ E605             >                org     Dict_Ptr
 353+ 2924             >
 353+ 2924 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 2926             >
 353+ 2926             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 2926 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 2926 ~           >
 353+ 2926 ~           >
 353+ 2926             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 2926             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 2926             >
 353+ 2926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 2926 C3 1B 29                     jp      QDup_Ptr
 355+ 2929
 356+ 2929              //  ______________________________________________________________________
 357+ 2929              //
 358+ 2929              // emit         c --
 359+ 2929                              Colon_Def EMIT, "EMIT", is_normal
 359+ 2929             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 2929             >
 359+ 2929             >Dict_Ptr        defl    $
 359+ 2929             >
 359+ 2929             >//              ______________________________________________________________________
 359+ 2929             >//              Heap part
 359+ 2929             >
 359+ 2929             >
 359+ 2929             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E605             >
 359+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E605             >Latest_Definition defl  Heap_Ptr
 359+ E605             >
 359+ E605             >                // dummy db directives used to calculate length of namec
 359+ E605 45 4D 49 54 >                db      "EMIT"
 359+ E609             >len_NFA         defl    $ - temp_NFA
 359+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E605             >
 359+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 359+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60A             >
 359+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60C             >Prev_Ptr        defl    Heap_Ptr
 359+ E60C             >
 359+ E60C             >mirror_Ptr      defl    $
 359+ E60C             >
 359+ E60C 2B 29       >                dw      Dict_Ptr + 2        // xt
 359+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60E             >
 359+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60E             >
 359+ E60E             >//              ______________________________________________________________________
 359+ E60E             >//              Dictionary part
 359+ E60E             >
 359+ E60E             >                org     Dict_Ptr
 359+ 2929             >
 359+ 2929 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 292B             >
 359+ 292B             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 292B CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 292E             >
 359+ 292E             >
 359+ 292E             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 292E             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 292E             >
 359+ 292E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 292E 7C 22                        dw      C_EMIT                      // (?emit)
 361+ 2930 1B 29                        dw      QDUP                        // ?dup
 362+ 2932                                                                  // if
 363+ 2932 8F 20                        dw      ZBRANCH
 364+ 2934 0A 00                        dw      Emit_Skip - $
 365+ 2936 3C 22                        dw          EMITC                   //      emitc
 366+ 2938 53 27                        dw          ONE                     //      1
 367+ 293A F9 27 3D 26                  dw          OUT, PLUSSTORE        //      out +!
 368+ 293E              Emit_Skip:                                          // endif
 369+ 293E 0D 25                        dw      EXIT                        // ;
 370+ 2940
 371+ 2940              //  ______________________________________________________________________
 372+ 2940              //
 373+ 2940              // space        --
 374+ 2940                              Colon_Def SPACE, "SPACE", is_normal
 374+ 2940             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 2940             >
 374+ 2940             >Dict_Ptr        defl    $
 374+ 2940             >
 374+ 2940             >//              ______________________________________________________________________
 374+ 2940             >//              Heap part
 374+ 2940             >
 374+ 2940             >
 374+ 2940             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60E             >
 374+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60E             >Latest_Definition defl  Heap_Ptr
 374+ E60E             >
 374+ E60E             >                // dummy db directives used to calculate length of namec
 374+ E60E 53 50 41 43 >                db      "SPACE"
 374+ E612 45          >
 374+ E613             >len_NFA         defl    $ - temp_NFA
 374+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60E             >
 374+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E613 45          >
 374+ E614             >                org     $-1                 // alter last byte of Name just above to set
 374+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E614             >
 374+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E616             >Prev_Ptr        defl    Heap_Ptr
 374+ E616             >
 374+ E616             >mirror_Ptr      defl    $
 374+ E616             >
 374+ E616 42 29       >                dw      Dict_Ptr + 2        // xt
 374+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E618             >
 374+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E618             >
 374+ E618             >//              ______________________________________________________________________
 374+ E618             >//              Dictionary part
 374+ E618             >
 374+ E618             >                org     Dict_Ptr
 374+ 2940             >
 374+ 2940 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 2942             >
 374+ 2942             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 2942 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 2945             >
 374+ 2945             >
 374+ 2945             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 2945             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 2945             >
 374+ 2945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 2945 6F 27 2B 29                  dw      BL, EMIT                // bl emit
 376+ 2949 0D 25                        dw      EXIT                    // ;
 377+ 294B
 378+ 294B              //  ______________________________________________________________________
 379+ 294B              //
 380+ 294B              // traverse     a n -- a
 381+ 294B              // A dictionary entry is structured as follows
 382+ 294B              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 294B              //      +1   word name, last character is toggled with $80
 384+ 294B              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 294B              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 294B              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 294B              //
 388+ 294B                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 294B             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 294B             >
 388+ 294B             >Dict_Ptr        defl    $
 388+ 294B             >
 388+ 294B             >//              ______________________________________________________________________
 388+ 294B             >//              Heap part
 388+ 294B             >
 388+ 294B             >
 388+ 294B             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E618             >
 388+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E618             >Latest_Definition defl  Heap_Ptr
 388+ E618             >
 388+ E618             >                // dummy db directives used to calculate length of namec
 388+ E618 54 52 41 56 >                db      "TRAVERSE"
 388+ E61C 45 52 53 45 >
 388+ E620             >len_NFA         defl    $ - temp_NFA
 388+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E618             >
 388+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61D 45 52 53 45 >
 388+ E621             >                org     $-1                 // alter last byte of Name just above to set
 388+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E621             >
 388+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E623             >Prev_Ptr        defl    Heap_Ptr
 388+ E623             >
 388+ E623             >mirror_Ptr      defl    $
 388+ E623             >
 388+ E623 4D 29       >                dw      Dict_Ptr + 2        // xt
 388+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E625             >
 388+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E625             >
 388+ E625             >//              ______________________________________________________________________
 388+ E625             >//              Dictionary part
 388+ E625             >
 388+ E625             >                org     Dict_Ptr
 388+ 294B             >
 388+ 294B 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 294D             >
 388+ 294D             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 294D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 2950             >
 388+ 2950             >
 388+ 2950             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 2950             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 2950             >
 388+ 2950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 2950 DD 25                        dw      SWAP                    // swap
 390+ 2952              Traverse_Begin:                                 // begin
 391+ 2952 C0 25 5F 25                  dw          OVER, PLUS          //      over +
 392+ 2956 3D 20 7F 00                  dw          LIT, 127            //      127
 393+ 295A C0 25 6A 26                  dw          OVER, CFETCH        //      over @
 394+ 295E D5 28                        dw          LESS                //      <
 395+ 2960                                                              // until
 396+ 2960 8F 20                        dw      ZBRANCH
 397+ 2962 F0 FF                        dw      Traverse_Begin - $
 398+ 2964 CE 25                        dw      NIP                     //  nip
 399+ 2966 0D 25                        dw      EXIT                    //  ;
 400+ 2968
 401+ 2968              //  ______________________________________________________________________
 402+ 2968              //
 403+ 2968              // mmu7@        -- n
 404+ 2968              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 2968
 406+ 2968                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 2968             >
 406+ 2968             >Dict_Ptr        defl    $
 406+ 2968             >
 406+ 2968             >//              ______________________________________________________________________
 406+ 2968             >//              Heap part
 406+ 2968             >
 406+ 2968             >
 406+ 2968             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E625             >
 406+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E625             >Latest_Definition defl  Heap_Ptr
 406+ E625             >
 406+ E625             >                // dummy db directives used to calculate length of namec
 406+ E625 4D 4D 55 37 >                db      "MMU7@"
 406+ E629 40          >
 406+ E62A             >len_NFA         defl    $ - temp_NFA
 406+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E625             >
 406+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62A 40          >
 406+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62B             >
 406+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62D             >Prev_Ptr        defl    Heap_Ptr
 406+ E62D             >
 406+ E62D             >mirror_Ptr      defl    $
 406+ E62D             >
 406+ E62D 6A 29       >                dw      Dict_Ptr + 2        // xt
 406+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E62F             >
 406+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E62F             >
 406+ E62F             >//              ______________________________________________________________________
 406+ E62F             >//              Dictionary part
 406+ E62F             >
 406+ E62F             >                org     Dict_Ptr
 406+ 2968             >
 406+ 2968 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 296A             >
 406+ 296A             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 296A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 296A ~           >
 406+ 296A ~           >
 406+ 296A             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 296A             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 296A             >
 406+ 296A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 296A D9                           exx
 408+ 296B CD 39 21                     call    MMU7_read
 409+ 296E D9                           exx
 410+ 296F 6F                           ld      l, a
 411+ 2970 26 00                        ld      h, 0
 412+ 2972 E5                           push    hl
 413+ 2973                              next
 413+ 2973 DD E9       >                jp      (ix)
 414+ 2975
 415+ 2975              //  ______________________________________________________________________
 416+ 2975              //
 417+ 2975              // mmu7!        n --
 418+ 2975              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 2975              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 2975
 421+ 2975                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 2975             >
 421+ 2975             >Dict_Ptr        defl    $
 421+ 2975             >
 421+ 2975             >//              ______________________________________________________________________
 421+ 2975             >//              Heap part
 421+ 2975             >
 421+ 2975             >
 421+ 2975             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E62F             >
 421+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E62F             >Latest_Definition defl  Heap_Ptr
 421+ E62F             >
 421+ E62F             >                // dummy db directives used to calculate length of namec
 421+ E62F 4D 4D 55 37 >                db      "MMU7!"
 421+ E633 21          >
 421+ E634             >len_NFA         defl    $ - temp_NFA
 421+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E62F             >
 421+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E634 21          >
 421+ E635             >                org     $-1                 // alter last byte of Name just above to set
 421+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E635             >
 421+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E637             >Prev_Ptr        defl    Heap_Ptr
 421+ E637             >
 421+ E637             >mirror_Ptr      defl    $
 421+ E637             >
 421+ E637 77 29       >                dw      Dict_Ptr + 2        // xt
 421+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E639             >
 421+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E639             >
 421+ E639             >//              ______________________________________________________________________
 421+ E639             >//              Dictionary part
 421+ E639             >
 421+ E639             >                org     Dict_Ptr
 421+ 2975             >
 421+ 2975 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 2977             >
 421+ 2977             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 2977 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 2977 ~           >
 421+ 2977 ~           >
 421+ 2977             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 2977             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 2977             >
 421+ 2977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 2977 E1                           pop     hl
 423+ 2978 7D                           ld      a, l
 424+ 2979 ED 92 57                     nextreg 87, a
 425+ 297C
 426+ 297C                              next
 426+ 297C DD E9       >                jp      (ix)
 427+ 297E
 428+ 297E              //  ______________________________________________________________________
 429+ 297E              //
 430+ 297E              // >far         ha -- a n
 431+ 297E              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 297E              // take lower bits of H and L as an offset from E000h
 433+ 297E              // then return address  a  between E000h-FFFFh
 434+ 297E              // and page number n  between 64-71 (40h-47h)
 435+ 297E              // For example, in hex:
 436+ 297E              //   0000 >FAR  gives  40.E000
 437+ 297E              //   1FFF >FAR  gives  40.FFFF
 438+ 297E              //   2000 >FAR  gives  41.E000
 439+ 297E              //   3FFF >FAR  gives  41.FFFF
 440+ 297E              //   EFFF >FAR  gives  47.EFFF
 441+ 297E              //   FFFF >FAR  gives  47.FFFF
 442+ 297E                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 297E             >
 442+ 297E             >Dict_Ptr        defl    $
 442+ 297E             >
 442+ 297E             >//              ______________________________________________________________________
 442+ 297E             >//              Heap part
 442+ 297E             >
 442+ 297E             >
 442+ 297E             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E639             >
 442+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E639             >Latest_Definition defl  Heap_Ptr
 442+ E639             >
 442+ E639             >                // dummy db directives used to calculate length of namec
 442+ E639 3E 46 41 52 >                db      ">FAR"
 442+ E63D             >len_NFA         defl    $ - temp_NFA
 442+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E639             >
 442+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63E             >
 442+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E640             >Prev_Ptr        defl    Heap_Ptr
 442+ E640             >
 442+ E640             >mirror_Ptr      defl    $
 442+ E640             >
 442+ E640 80 29       >                dw      Dict_Ptr + 2        // xt
 442+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E642             >
 442+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E642             >
 442+ E642             >//              ______________________________________________________________________
 442+ E642             >//              Dictionary part
 442+ E642             >
 442+ E642             >                org     Dict_Ptr
 442+ 297E             >
 442+ 297E 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 2980             >
 442+ 2980             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 2980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 2980 ~           >
 442+ 2980 ~           >
 442+ 2980             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 2980             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 2980             >
 442+ 2980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 2980 E1                           pop     hl
 444+ 2981 CD 44 21                     call    TO_FAR_rout
 445+ 2984 E5                           push    hl
 446+ 2985 6F                           ld      l, a
 447+ 2986 26 00                        ld      h, 0
 448+ 2988 E5                           push    hl
 449+ 2989                              next
 449+ 2989 DD E9       >                jp      (ix)
 450+ 298B
 451+ 298B              //  ______________________________________________________________________
 452+ 298B              //
 453+ 298B              // <far         a n  -- ha
 454+ 298B              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 298B              // reverse of >FAR: encodes a FAR address compressing
 456+ 298B              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 298B                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 298B             >
 457+ 298B             >Dict_Ptr        defl    $
 457+ 298B             >
 457+ 298B             >//              ______________________________________________________________________
 457+ 298B             >//              Heap part
 457+ 298B             >
 457+ 298B             >
 457+ 298B             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E642             >
 457+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E642             >Latest_Definition defl  Heap_Ptr
 457+ E642             >
 457+ E642             >                // dummy db directives used to calculate length of namec
 457+ E642 3C 46 41 52 >                db      "<FAR"
 457+ E646             >len_NFA         defl    $ - temp_NFA
 457+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E642             >
 457+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E647             >                org     $-1                 // alter last byte of Name just above to set
 457+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E647             >
 457+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E649             >Prev_Ptr        defl    Heap_Ptr
 457+ E649             >
 457+ E649             >mirror_Ptr      defl    $
 457+ E649             >
 457+ E649 8D 29       >                dw      Dict_Ptr + 2        // xt
 457+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64B             >
 457+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64B             >
 457+ E64B             >//              ______________________________________________________________________
 457+ E64B             >//              Dictionary part
 457+ E64B             >
 457+ E64B             >                org     Dict_Ptr
 457+ 298B             >
 457+ 298B 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 298D             >
 457+ 298D             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 298D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 298D ~           >
 457+ 298D ~           >
 457+ 298D             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 298D             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 298D             >
 457+ 298D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 298D E1                           pop     hl                  // page number in e
 459+ 298E 7D                           ld      a, l
 460+ 298F E6 07                        and     07
 461+ 2991 0F                           rrca
 462+ 2992 0F                           rrca
 463+ 2993 0F                           rrca
 464+ 2994 08                           ex      af, af
 465+ 2995 E1                           pop     hl                  // address in hl
 466+ 2996 7C                           ld      a, h
 467+ 2997 E6 1F                        and     $1F
 468+ 2999 67                           ld      h, a
 469+ 299A 08                           ex      af, af
 470+ 299B B4                           or      h
 471+ 299C 67                           ld      h, a
 472+ 299D                              psh1
 472+ 299D E5          >                push    hl
 472+ 299E DD E9       >                jp      (ix)
 473+ 29A0
 474+ 29A0              //  ______________________________________________________________________
 475+ 29A0              //
 476+ 29A0              // ?IN_MMU7        a -- f
 477+ 29A0              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 29A0                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 29A0             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 29A0             >
 478+ 29A0             >Dict_Ptr        defl    $
 478+ 29A0             >
 478+ 29A0             >//              ______________________________________________________________________
 478+ 29A0             >//              Heap part
 478+ 29A0             >
 478+ 29A0             >
 478+ 29A0             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64B             >
 478+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64B             >Latest_Definition defl  Heap_Ptr
 478+ E64B             >
 478+ E64B             >                // dummy db directives used to calculate length of namec
 478+ E64B 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E64F 4D 4D 55 37 >
 478+ E653             >len_NFA         defl    $ - temp_NFA
 478+ E653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64B             >
 478+ E64B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E650 4D 4D 55 37 >
 478+ E654             >                org     $-1                 // alter last byte of Name just above to set
 478+ E653 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E654             >
 478+ E654 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E656             >Prev_Ptr        defl    Heap_Ptr
 478+ E656             >
 478+ E656             >mirror_Ptr      defl    $
 478+ E656             >
 478+ E656 A2 29       >                dw      Dict_Ptr + 2        // xt
 478+ E658             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E658             >
 478+ E658             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E658             >
 478+ E658             >//              ______________________________________________________________________
 478+ E658             >//              Dictionary part
 478+ E658             >
 478+ E658             >                org     Dict_Ptr
 478+ 29A0             >
 478+ 29A0 56 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 29A2             >
 478+ 29A2             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 29A2 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 29A5             >
 478+ 29A5             >
 478+ 29A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 29A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 29A5             >
 478+ 29A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 29A5 E4 25                        dw      DUP
 480+ 29A7 3D 20 00 E0                  dw      LIT, $E000
 481+ 29AB C7 28                        dw      ULESS
 482+ 29AD 40 25                        dw      NOT_OP
 483+ 29AF 0D 25                        dw      EXIT
 484+ 29B1
 485+ 29B1              //  ______________________________________________________________________
 486+ 29B1              //
 487+ 29B1              // far          hp -- ha
 488+ 29B1              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 29B1                              Colon_Def FAR, "FAR", is_normal
 489+ 29B1             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 29B1             >
 489+ 29B1             >Dict_Ptr        defl    $
 489+ 29B1             >
 489+ 29B1             >//              ______________________________________________________________________
 489+ 29B1             >//              Heap part
 489+ 29B1             >
 489+ 29B1             >
 489+ 29B1             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E658             >
 489+ E658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E658             >Latest_Definition defl  Heap_Ptr
 489+ E658             >
 489+ E658             >                // dummy db directives used to calculate length of namec
 489+ E658 46 41 52    >                db      "FAR"
 489+ E65B             >len_NFA         defl    $ - temp_NFA
 489+ E65B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E658             >
 489+ E658 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E659 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65C             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65B D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65C             >
 489+ E65C 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E65E             >Prev_Ptr        defl    Heap_Ptr
 489+ E65E             >
 489+ E65E             >mirror_Ptr      defl    $
 489+ E65E             >
 489+ E65E B3 29       >                dw      Dict_Ptr + 2        // xt
 489+ E660             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E660             >
 489+ E660             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E660             >
 489+ E660             >//              ______________________________________________________________________
 489+ E660             >//              Dictionary part
 489+ E660             >
 489+ E660             >                org     Dict_Ptr
 489+ 29B1             >
 489+ 29B1 5E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 29B3             >
 489+ 29B3             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 29B3 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 29B6             >
 489+ 29B6             >
 489+ 29B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 29B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 29B6             >
 489+ 29B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 29B6 80 29                        dw      TO_FAR
 491+ 29B8 77 29                        dw      MMU7_STORE
 492+ 29BA 0D 25                        dw      EXIT
 493+ 29BC
 494+ 29BC              //  ______________________________________________________________________
 495+ 29BC              //
 496+ 29BC              // ?HEAP_PTR       n -- n f
 497+ 29BC              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 29BC                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 29BC             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 29BC             >
 498+ 29BC             >Dict_Ptr        defl    $
 498+ 29BC             >
 498+ 29BC             >//              ______________________________________________________________________
 498+ 29BC             >//              Heap part
 498+ 29BC             >
 498+ 29BC             >
 498+ 29BC             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E660             >
 498+ E660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E660             >Latest_Definition defl  Heap_Ptr
 498+ E660             >
 498+ E660             >                // dummy db directives used to calculate length of namec
 498+ E660 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E664 50 5F 50 54 >
 498+ E668 52          >
 498+ E669             >len_NFA         defl    $ - temp_NFA
 498+ E669             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E660             >
 498+ E660 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E661 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E665 50 5F 50 54 >
 498+ E669 52          >
 498+ E66A             >                org     $-1                 // alter last byte of Name just above to set
 498+ E669 D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66A             >
 498+ E66A 58 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66C             >Prev_Ptr        defl    Heap_Ptr
 498+ E66C             >
 498+ E66C             >mirror_Ptr      defl    $
 498+ E66C             >
 498+ E66C BE 29       >                dw      Dict_Ptr + 2        // xt
 498+ E66E             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E66E             >
 498+ E66E             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E66E             >
 498+ E66E             >//              ______________________________________________________________________
 498+ E66E             >//              Dictionary part
 498+ E66E             >
 498+ E66E             >                org     Dict_Ptr
 498+ 29BC             >
 498+ 29BC 6C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 29BE             >
 498+ 29BE             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 29BE CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 29C1             >
 498+ 29C1             >
 498+ 29C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 29C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 29C1             >
 498+ 29C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 29C1 E4 25                        dw      DUP
 500+ 29C3 8F 20                        dw      ZBRANCH
 501+ 29C5 08 00                        dw      QHeap_Skip - $
 502+ 29C7 3D 20 00 60                  dw          LIT, $6000
 503+ 29CB C7 28                        dw          ULESS
 504+ 29CD              QHeap_Skip:                                          // endif
 505+ 29CD 0D 25                        dw      EXIT                        // ;
 506+ 29CF
 507+ 29CF              //  ______________________________________________________________________
 508+ 29CF              //
 509+ 29CF              // ?>heap       n1 -- n2
 510+ 29CF              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 29CF                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 29CF             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 29CF             >
 511+ 29CF             >Dict_Ptr        defl    $
 511+ 29CF             >
 511+ 29CF             >//              ______________________________________________________________________
 511+ 29CF             >//              Heap part
 511+ 29CF             >
 511+ 29CF             >
 511+ 29CF             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E66E             >
 511+ E66E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E66E             >Latest_Definition defl  Heap_Ptr
 511+ E66E             >
 511+ E66E             >                // dummy db directives used to calculate length of namec
 511+ E66E 3F 3E 48 45 >                db      "?>HEAP"
 511+ E672 41 50       >
 511+ E674             >len_NFA         defl    $ - temp_NFA
 511+ E674             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E66E             >
 511+ E66E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E66F 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E673 41 50       >
 511+ E675             >                org     $-1                 // alter last byte of Name just above to set
 511+ E674 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E675             >
 511+ E675 60 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E677             >Prev_Ptr        defl    Heap_Ptr
 511+ E677             >
 511+ E677             >mirror_Ptr      defl    $
 511+ E677             >
 511+ E677 D1 29       >                dw      Dict_Ptr + 2        // xt
 511+ E679             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E679             >
 511+ E679             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E679             >
 511+ E679             >//              ______________________________________________________________________
 511+ E679             >//              Dictionary part
 511+ E679             >
 511+ E679             >                org     Dict_Ptr
 511+ 29CF             >
 511+ 29CF 77 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 29D1             >
 511+ 29D1             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 29D1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 29D4             >
 511+ 29D4             >
 511+ 29D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 29D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 29D4             >
 511+ 29D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 29D4 E4 25                        dw      DUP
 513+ 29D6 BE 29                        dw      QHEAPP
 514+ 29D8 8F 20                        dw      ZBRANCH
 515+ 29DA 04 00                        dw      Q2Heap_Skip - $
 516+ 29DC B3 29                        dw          FAR
 517+ 29DE              Q2Heap_Skip:                                          // endif
 518+ 29DE 0D 25                        dw      EXIT                        // ;
 519+ 29E0
 520+ 29E0              //  ______________________________________________________________________
 521+ 29E0              //
 522+ 29E0              // hp_fetch     -- a
 523+ 29E0                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 29E0             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 29E0             >
 523+ 29E0             >Dict_Ptr        defl    $
 523+ 29E0             >
 523+ 29E0             >//              ______________________________________________________________________
 523+ 29E0             >//              Heap part
 523+ 29E0             >
 523+ 29E0             >
 523+ 29E0             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E679             >
 523+ E679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E679             >Latest_Definition defl  Heap_Ptr
 523+ E679             >
 523+ E679             >                // dummy db directives used to calculate length of namec
 523+ E679 48 50 40    >                db      "HP@"
 523+ E67C             >len_NFA         defl    $ - temp_NFA
 523+ E67C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E679             >
 523+ E679 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67A 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67D             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67C C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67D             >
 523+ E67D 6E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E67F             >Prev_Ptr        defl    Heap_Ptr
 523+ E67F             >
 523+ E67F             >mirror_Ptr      defl    $
 523+ E67F             >
 523+ E67F E2 29       >                dw      Dict_Ptr + 2        // xt
 523+ E681             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E681             >
 523+ E681             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E681             >
 523+ E681             >//              ______________________________________________________________________
 523+ E681             >//              Dictionary part
 523+ E681             >
 523+ E681             >                org     Dict_Ptr
 523+ 29E0             >
 523+ 29E0 7F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 29E2             >
 523+ 29E2             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 29E2 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 29E5             >
 523+ 29E5             >
 523+ 29E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 29E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 29E5             >
 523+ 29E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 29E5 E1 27 55 26                  dw      HP, FETCH               // hp @
 525+ 29E9 0D 25                        dw      EXIT                    // ;
 526+ 29EB
 527+ 29EB              //  ______________________________________________________________________
 528+ 29EB              //
 529+ 29EB              // page-watermark   -- n
 530+ 29EB              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 29EB                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 29EB             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 29EB             >
 531+ 29EB             >Dict_Ptr        defl    $
 531+ 29EB             >
 531+ 29EB             >//              ______________________________________________________________________
 531+ 29EB             >//              Heap part
 531+ 29EB             >
 531+ 29EB             >
 531+ 29EB             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E681             >
 531+ E681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E681             >Latest_Definition defl  Heap_Ptr
 531+ E681             >
 531+ E681             >                // dummy db directives used to calculate length of namec
 531+ E681 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E685 2D 57 41 54 >
 531+ E689 45 52 4D 41 >
 531+ E68D 52 4B       >
 531+ E68F             >len_NFA         defl    $ - temp_NFA
 531+ E68F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E681             >
 531+ E681 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E686 2D 57 41 54 >
 531+ E68A 45 52 4D 41 >
 531+ E68E 52 4B       >
 531+ E690             >                org     $-1                 // alter last byte of Name just above to set
 531+ E68F CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E690             >
 531+ E690 79 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E692             >Prev_Ptr        defl    Heap_Ptr
 531+ E692             >
 531+ E692             >mirror_Ptr      defl    $
 531+ E692             >
 531+ E692 ED 29       >                dw      Dict_Ptr + 2        // xt
 531+ E694             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E694             >
 531+ E694             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E694             >
 531+ E694             >//              ______________________________________________________________________
 531+ E694             >//              Dictionary part
 531+ E694             >
 531+ E694             >                org     Dict_Ptr
 531+ 29EB             >
 531+ 29EB 92 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 29ED             >
 531+ 29ED             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 29ED CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 29F0             >
 531+ 29F0             >
 531+ 29F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 29F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 29F0             >
 531+ 29F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 29F0 80 1F       >                dw      $1F80
 532+ 29F2
 533+ 29F2              //  ______________________________________________________________________
 534+ 29F2              //
 535+ 29F2              // skip-hp-page ha -- a
 536+ 29F2                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 29F2             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 29F2             >
 536+ 29F2             >Dict_Ptr        defl    $
 536+ 29F2             >
 536+ 29F2             >//              ______________________________________________________________________
 536+ 29F2             >//              Heap part
 536+ 29F2             >
 536+ 29F2             >
 536+ 29F2             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E694             >
 536+ E694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E694             >Latest_Definition defl  Heap_Ptr
 536+ E694             >
 536+ E694             >                // dummy db directives used to calculate length of namec
 536+ E694 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E698 2D 48 50 2D >
 536+ E69C 50 41 47 45 >
 536+ E6A0             >len_NFA         defl    $ - temp_NFA
 536+ E6A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E694             >
 536+ E694 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E699 2D 48 50 2D >
 536+ E69D 50 41 47 45 >
 536+ E6A1             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A0 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A1             >
 536+ E6A1 81 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A3             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A3             >
 536+ E6A3             >mirror_Ptr      defl    $
 536+ E6A3             >
 536+ E6A3 F4 29       >                dw      Dict_Ptr + 2        // xt
 536+ E6A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A5             >
 536+ E6A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A5             >
 536+ E6A5             >//              ______________________________________________________________________
 536+ E6A5             >//              Dictionary part
 536+ E6A5             >
 536+ E6A5             >                org     Dict_Ptr
 536+ 29F2             >
 536+ 29F2 A3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 29F4             >
 536+ 29F4             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 29F4 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 29F7             >
 536+ 29F7             >
 536+ 29F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 29F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 29F7             >
 536+ 29F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 29F7 E2 29                        dw      HP_FETCH                // hp@
 538+ 29F9 3D 20 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 29FD CD 24
 539+ 29FF 5F 25                        dw      PLUS
 540+ 2A01 ED 29                        dw      PAGE_WATERMARK
 541+ 2A03 EA 28                        dw      GREATER
 542+ 2A05 8F 20                        dw      ZBRANCH
 543+ 2A07 12 00                        dw      Skip_Skip - $   // if
 544+ 2A09 E2 29                        dw      HP_FETCH
 545+ 2A0B 3D 20 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 2A0F DC 24
 546+ 2A11 78 25 86 25                  dw      ONE_PLUS, TWO_PLUS
 547+ 2A15 E1 27 5F 26                  dw      HP, STORE
 548+ 2A19              Skip_Skip:
 549+ 2A19 0D 25                        dw      EXIT                    // ;
 550+ 2A1B              //  ______________________________________________________________________
 551+ 2A1B              //
 552+ 2A1B              // latest       -- nfa
 553+ 2A1B                              Colon_Def LATEST, "LATEST", is_normal
 553+ 2A1B             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 2A1B             >
 553+ 2A1B             >Dict_Ptr        defl    $
 553+ 2A1B             >
 553+ 2A1B             >//              ______________________________________________________________________
 553+ 2A1B             >//              Heap part
 553+ 2A1B             >
 553+ 2A1B             >
 553+ 2A1B             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A5             >
 553+ E6A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A5             >Latest_Definition defl  Heap_Ptr
 553+ E6A5             >
 553+ E6A5             >                // dummy db directives used to calculate length of namec
 553+ E6A5 4C 41 54 45 >                db      "LATEST"
 553+ E6A9 53 54       >
 553+ E6AB             >len_NFA         defl    $ - temp_NFA
 553+ E6AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A5             >
 553+ E6A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A6 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AA 53 54       >
 553+ E6AC             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AB D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AC             >
 553+ E6AC 94 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6AE             >Prev_Ptr        defl    Heap_Ptr
 553+ E6AE             >
 553+ E6AE             >mirror_Ptr      defl    $
 553+ E6AE             >
 553+ E6AE 1D 2A       >                dw      Dict_Ptr + 2        // xt
 553+ E6B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B0             >
 553+ E6B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B0             >
 553+ E6B0             >//              ______________________________________________________________________
 553+ E6B0             >//              Dictionary part
 553+ E6B0             >
 553+ E6B0             >                org     Dict_Ptr
 553+ 2A1B             >
 553+ 2A1B AE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 2A1D             >
 553+ 2A1D             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 2A1D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 2A20             >
 553+ 2A20             >
 553+ 2A20             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 2A20             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 2A20             >
 553+ 2A20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 2A20 11 28                        dw      CURRENT                 // current
 555+ 2A22 55 26 55 26                  dw      FETCH, FETCH            // @ @
 556+ 2A26 B3 29                        dw      FAR // Q TO HEAP
 557+ 2A28 0D 25                        dw      EXIT                    // ;
 558+ 2A2A
 559+ 2A2A              //  ______________________________________________________________________
 560+ 2A2A              //
 561+ 2A2A              // >body        cfa -- pfa
 562+ 2A2A                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 2A2A             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 2A2A             >
 562+ 2A2A             >Dict_Ptr        defl    $
 562+ 2A2A             >
 562+ 2A2A             >//              ______________________________________________________________________
 562+ 2A2A             >//              Heap part
 562+ 2A2A             >
 562+ 2A2A             >
 562+ 2A2A             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B0             >
 562+ E6B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B0             >Latest_Definition defl  Heap_Ptr
 562+ E6B0             >
 562+ E6B0             >                // dummy db directives used to calculate length of namec
 562+ E6B0 3E 42 4F 44 >                db      ">BODY"
 562+ E6B4 59          >
 562+ E6B5             >len_NFA         defl    $ - temp_NFA
 562+ E6B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B0             >
 562+ E6B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B5 59          >
 562+ E6B6             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B5 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B6             >
 562+ E6B6 A5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6B8             >Prev_Ptr        defl    Heap_Ptr
 562+ E6B8             >
 562+ E6B8             >mirror_Ptr      defl    $
 562+ E6B8             >
 562+ E6B8 2C 2A       >                dw      Dict_Ptr + 2        // xt
 562+ E6BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BA             >
 562+ E6BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BA             >
 562+ E6BA             >//              ______________________________________________________________________
 562+ E6BA             >//              Dictionary part
 562+ E6BA             >
 562+ E6BA             >                org     Dict_Ptr
 562+ 2A2A             >
 562+ 2A2A B8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 2A2C             >
 562+ 2A2C             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 2A2C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 2A2F             >
 562+ 2A2F             >
 562+ 2A2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 2A2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 2A2F             >
 562+ 2A2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 2A2F 61 27 5F 25                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 2A33 0D 25                        dw      EXIT                    // ;
 565+ 2A35
 566+ 2A35              //  ______________________________________________________________________
 567+ 2A35              //
 568+ 2A35              // <name        cfa -- nfa
 569+ 2A35                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 2A35             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 2A35             >
 569+ 2A35             >Dict_Ptr        defl    $
 569+ 2A35             >
 569+ 2A35             >//              ______________________________________________________________________
 569+ 2A35             >//              Heap part
 569+ 2A35             >
 569+ 2A35             >
 569+ 2A35             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BA             >
 569+ E6BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BA             >Latest_Definition defl  Heap_Ptr
 569+ E6BA             >
 569+ E6BA             >                // dummy db directives used to calculate length of namec
 569+ E6BA 3C 4E 41 4D >                db      "<NAME"
 569+ E6BE 45          >
 569+ E6BF             >len_NFA         defl    $ - temp_NFA
 569+ E6BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BA             >
 569+ E6BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6BF 45          >
 569+ E6C0             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6BF C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C0             >
 569+ E6C0 B0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C2             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C2             >
 569+ E6C2             >mirror_Ptr      defl    $
 569+ E6C2             >
 569+ E6C2 37 2A       >                dw      Dict_Ptr + 2        // xt
 569+ E6C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C4             >
 569+ E6C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C4             >
 569+ E6C4             >//              ______________________________________________________________________
 569+ E6C4             >//              Dictionary part
 569+ E6C4             >
 569+ E6C4             >                org     Dict_Ptr
 569+ 2A35             >
 569+ 2A35 C2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 2A37             >
 569+ 2A37             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 2A37 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 2A3A             >
 569+ 2A3A             >
 569+ 2A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 2A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 2A3A             >
 569+ 2A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 2A3A 92 25                        dw      CELL_MINUS              // cell-
 571+ 2A3C E4 25 55 26                  dw      DUP, FETCH
 572+ 2A40 BE 29                        dw      QHEAPP
 573+ 2A42 8F 20                        dw      ZBRANCH
 574+ 2A44 08 00                        dw      ToName_Skip - $
 575+ 2A46 55 26 B3 29                  dw          FETCH, FAR
 576+ 2A4A 92 25                        dw          CELL_MINUS
 577+ 2A4C              ToName_Skip:                                    // endif
 578+ 2A4C
 579+ 2A4C 7F 25                        dw      ONE_SUBTRACT            // 1-
 580+ 2A4E 68 27                        dw      NEG_ONE                 // -1
 581+ 2A50 4D 29                        dw      TRAVERSE                // traverse
 582+ 2A52 0D 25                        dw      EXIT                    // ;
 583+ 2A54
 584+ 2A54              //  ______________________________________________________________________
 585+ 2A54              //
 586+ 2A54              // cfa          pfa -- cfa
 587+ 2A54                              Colon_Def CFA, "CFA", is_normal
 587+ 2A54             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 2A54             >
 587+ 2A54             >Dict_Ptr        defl    $
 587+ 2A54             >
 587+ 2A54             >//              ______________________________________________________________________
 587+ 2A54             >//              Heap part
 587+ 2A54             >
 587+ 2A54             >
 587+ 2A54             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C4             >
 587+ E6C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C4             >Latest_Definition defl  Heap_Ptr
 587+ E6C4             >
 587+ E6C4             >                // dummy db directives used to calculate length of namec
 587+ E6C4 43 46 41    >                db      "CFA"
 587+ E6C7             >len_NFA         defl    $ - temp_NFA
 587+ E6C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C4             >
 587+ E6C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C5 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6C8             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C7 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6C8             >
 587+ E6C8 BA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CA             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CA             >
 587+ E6CA             >mirror_Ptr      defl    $
 587+ E6CA             >
 587+ E6CA 56 2A       >                dw      Dict_Ptr + 2        // xt
 587+ E6CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CC             >
 587+ E6CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CC             >
 587+ E6CC             >//              ______________________________________________________________________
 587+ E6CC             >//              Dictionary part
 587+ E6CC             >
 587+ E6CC             >                org     Dict_Ptr
 587+ 2A54             >
 587+ 2A54 CA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 2A56             >
 587+ 2A56             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 2A56 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 2A59             >
 587+ 2A59             >
 587+ 2A59             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 2A59             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 2A59             >
 587+ 2A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 2A59 61 27 B0 28                  dw      THREE, SUBTRACT         // 3 -
 589+ 2A5D 0D 25                        dw      EXIT                    // ;
 590+ 2A5F
 591+ 2A5F              //  ______________________________________________________________________
 592+ 2A5F              //
 593+ 2A5F              // nfa          pfa -- nfa
 594+ 2A5F                              Colon_Def NFA, "NFA", is_normal
 594+ 2A5F             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 2A5F             >
 594+ 2A5F             >Dict_Ptr        defl    $
 594+ 2A5F             >
 594+ 2A5F             >//              ______________________________________________________________________
 594+ 2A5F             >//              Heap part
 594+ 2A5F             >
 594+ 2A5F             >
 594+ 2A5F             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CC             >
 594+ E6CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CC             >Latest_Definition defl  Heap_Ptr
 594+ E6CC             >
 594+ E6CC             >                // dummy db directives used to calculate length of namec
 594+ E6CC 4E 46 41    >                db      "NFA"
 594+ E6CF             >len_NFA         defl    $ - temp_NFA
 594+ E6CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CC             >
 594+ E6CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CD 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D0             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6CF C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D0             >
 594+ E6D0 C4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D2             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D2             >
 594+ E6D2             >mirror_Ptr      defl    $
 594+ E6D2             >
 594+ E6D2 61 2A       >                dw      Dict_Ptr + 2        // xt
 594+ E6D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D4             >
 594+ E6D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D4             >
 594+ E6D4             >//              ______________________________________________________________________
 594+ E6D4             >//              Dictionary part
 594+ E6D4             >
 594+ E6D4             >                org     Dict_Ptr
 594+ 2A5F             >
 594+ 2A5F D2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 2A61             >
 594+ 2A61             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 2A61 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 2A64             >
 594+ 2A64             >
 594+ 2A64             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 2A64             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 2A64             >
 594+ 2A64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 2A64 56 2A                        dw      CFA                     // cfa
 596+ 2A66 37 2A                        dw      TO_NAME                 // traverse
 597+ 2A68 0D 25                        dw      EXIT                    // ;
 598+ 2A6A
 599+ 2A6A              //  ______________________________________________________________________
 600+ 2A6A              //
 601+ 2A6A              // lfa          pfa -- lfa
 602+ 2A6A                              Colon_Def LFA, "LFA", is_normal
 602+ 2A6A             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 2A6A             >
 602+ 2A6A             >Dict_Ptr        defl    $
 602+ 2A6A             >
 602+ 2A6A             >//              ______________________________________________________________________
 602+ 2A6A             >//              Heap part
 602+ 2A6A             >
 602+ 2A6A             >
 602+ 2A6A             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D4             >
 602+ E6D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D4             >Latest_Definition defl  Heap_Ptr
 602+ E6D4             >
 602+ E6D4             >                // dummy db directives used to calculate length of namec
 602+ E6D4 4C 46 41    >                db      "LFA"
 602+ E6D7             >len_NFA         defl    $ - temp_NFA
 602+ E6D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D4             >
 602+ E6D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D5 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6D8             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D7 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6D8             >
 602+ E6D8 CC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DA             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DA             >
 602+ E6DA             >mirror_Ptr      defl    $
 602+ E6DA             >
 602+ E6DA 6C 2A       >                dw      Dict_Ptr + 2        // xt
 602+ E6DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DC             >
 602+ E6DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DC             >
 602+ E6DC             >//              ______________________________________________________________________
 602+ E6DC             >//              Dictionary part
 602+ E6DC             >
 602+ E6DC             >                org     Dict_Ptr
 602+ 2A6A             >
 602+ 2A6A DA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 2A6C             >
 602+ 2A6C             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 2A6C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 2A6F             >
 602+ 2A6F             >
 602+ 2A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 2A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 2A6F             >
 602+ 2A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 2A6F 61 2A                        dw      NFA                     // nfa
 604+ 2A71 53 27                        dw      ONE                     // 1
 605+ 2A73 4D 29                        dw      TRAVERSE                // traverse
 606+ 2A75 78 25                        dw      ONE_PLUS                // 1+
 607+ 2A77 0D 25                        dw      EXIT                    // ;
 608+ 2A79
 609+ 2A79              //  ______________________________________________________________________
 610+ 2A79              //
 611+ 2A79              // pfa          nfa -- pfa
 612+ 2A79                              Colon_Def PFA, "PFA", is_normal
 612+ 2A79             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 2A79             >
 612+ 2A79             >Dict_Ptr        defl    $
 612+ 2A79             >
 612+ 2A79             >//              ______________________________________________________________________
 612+ 2A79             >//              Heap part
 612+ 2A79             >
 612+ 2A79             >
 612+ 2A79             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DC             >
 612+ E6DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DC             >Latest_Definition defl  Heap_Ptr
 612+ E6DC             >
 612+ E6DC             >                // dummy db directives used to calculate length of namec
 612+ E6DC 50 46 41    >                db      "PFA"
 612+ E6DF             >len_NFA         defl    $ - temp_NFA
 612+ E6DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DC             >
 612+ E6DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E0             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6DF C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E0             >
 612+ E6E0 D4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E2             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E2             >
 612+ E6E2             >mirror_Ptr      defl    $
 612+ E6E2             >
 612+ E6E2 7B 2A       >                dw      Dict_Ptr + 2        // xt
 612+ E6E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E4             >
 612+ E6E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E4             >
 612+ E6E4             >//              ______________________________________________________________________
 612+ E6E4             >//              Dictionary part
 612+ E6E4             >
 612+ E6E4             >                org     Dict_Ptr
 612+ 2A79             >
 612+ 2A79 E2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 2A7B             >
 612+ 2A7B             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 2A7B CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 2A7E             >
 612+ 2A7E             >
 612+ 2A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 2A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 2A7E             >
 612+ 2A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 2A7E D1 29                        dw      QTOHEAP
 614+ 2A80 53 27                        dw      ONE                     // 1
 615+ 2A82 4D 29                        dw      TRAVERSE                // traverse
 616+ 2A84 78 25                        dw      ONE_PLUS                // 1+
 617+ 2A86 8E 25                        dw      CELL_PLUS               // cell+
 618+ 2A88 A2 29                        dw      QMMU7
 619+ 2A8A 8F 20                        dw      ZBRANCH
 620+ 2A8C 0E 00                        dw      PFA_Skip - $
 621+ 2A8E 6A 29                        dw          MMU7_FETCH
 622+ 2A90 53 27 B0 28                  dw          ONE, SUBTRACT
 623+ 2A94 8F 20                        dw          ZBRANCH
 624+ 2A96 04 00                        dw          PFA_Skip - $
 625+ 2A98 55 26                        dw              FETCH
 626+ 2A9A              PFA_Skip:                                    // endif
 627+ 2A9A 2C 2A                        dw      TO_BODY                 // >body
 628+ 2A9C 0D 25                        dw      EXIT                    // ;
 629+ 2A9E
 630+ 2A9E              //  ______________________________________________________________________
 631+ 2A9E              //
 632+ 2A9E              // !csp         --
 633+ 2A9E              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 2A9E                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 2A9E             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 2A9E             >
 634+ 2A9E             >Dict_Ptr        defl    $
 634+ 2A9E             >
 634+ 2A9E             >//              ______________________________________________________________________
 634+ 2A9E             >//              Heap part
 634+ 2A9E             >
 634+ 2A9E             >
 634+ 2A9E             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E4             >
 634+ E6E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E4             >Latest_Definition defl  Heap_Ptr
 634+ E6E4             >
 634+ E6E4             >                // dummy db directives used to calculate length of namec
 634+ E6E4 21 43 53 50 >                db      "!CSP"
 634+ E6E8             >len_NFA         defl    $ - temp_NFA
 634+ E6E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E4             >
 634+ E6E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E5 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6E9             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6E8 D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6E9             >
 634+ E6E9 DC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6EB             >Prev_Ptr        defl    Heap_Ptr
 634+ E6EB             >
 634+ E6EB             >mirror_Ptr      defl    $
 634+ E6EB             >
 634+ E6EB A0 2A       >                dw      Dict_Ptr + 2        // xt
 634+ E6ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6ED             >
 634+ E6ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6ED             >
 634+ E6ED             >//              ______________________________________________________________________
 634+ E6ED             >//              Dictionary part
 634+ E6ED             >
 634+ E6ED             >                org     Dict_Ptr
 634+ 2A9E             >
 634+ 2A9E EB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 2AA0             >
 634+ 2AA0             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 2AA0 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 2AA3             >
 634+ 2AA3             >
 634+ 2AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 2AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 2AA3             >
 634+ 2AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 2AA3 F4 24                        dw      SPFETCH                 // sp@
 636+ 2AA5 2F 28 5F 26                  dw      CSP, STORE              // csp !
 637+ 2AA9 0D 25                        dw      EXIT                    // ;
 638+ 2AAB
 639+ 2AAB              //  ______________________________________________________________________
 640+ 2AAB              //
 641+ 2AAB              // ?error       f n --
 642+ 2AAB              // rase error n if flag f it true
 643+ 2AAB                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 2AAB             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 2AAB             >
 643+ 2AAB             >Dict_Ptr        defl    $
 643+ 2AAB             >
 643+ 2AAB             >//              ______________________________________________________________________
 643+ 2AAB             >//              Heap part
 643+ 2AAB             >
 643+ 2AAB             >
 643+ 2AAB             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6ED             >
 643+ E6ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6ED             >Latest_Definition defl  Heap_Ptr
 643+ E6ED             >
 643+ E6ED             >                // dummy db directives used to calculate length of namec
 643+ E6ED 3F 45 52 52 >                db      "?ERROR"
 643+ E6F1 4F 52       >
 643+ E6F3             >len_NFA         defl    $ - temp_NFA
 643+ E6F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6ED             >
 643+ E6ED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6EE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F2 4F 52       >
 643+ E6F4             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F3 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F4             >
 643+ E6F4 E4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F6             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F6             >
 643+ E6F6             >mirror_Ptr      defl    $
 643+ E6F6             >
 643+ E6F6 AD 2A       >                dw      Dict_Ptr + 2        // xt
 643+ E6F8             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6F8             >
 643+ E6F8             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6F8             >
 643+ E6F8             >//              ______________________________________________________________________
 643+ E6F8             >//              Dictionary part
 643+ E6F8             >
 643+ E6F8             >                org     Dict_Ptr
 643+ 2AAB             >
 643+ 2AAB F6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 2AAD             >
 643+ 2AAD             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 2AAD CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 2AB0             >
 643+ 2AB0             >
 643+ 2AB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 2AB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 2AB0             >
 643+ 2AB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 2AB0 DD 25                        dw      SWAP                    // swap
 645+ 2AB2                                                              // if
 646+ 2AB2 8F 20                        dw      ZBRANCH
 647+ 2AB4 08 00                        dw      QError_Else - $
 648+ 2AB6 E5 2F                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 2AB8                                                              // else
 650+ 2AB8 82 20                        dw      BRANCH
 651+ 2ABA 04 00                        dw      QError_Endif - $
 652+ 2ABC              QError_Else:
 653+ 2ABC C9 25                        dw          DROP                //      drop
 654+ 2ABE              QError_Endif:                                   // endif
 655+ 2ABE 0D 25                        dw      EXIT                    // ;
 656+ 2AC0
 657+ 2AC0              //  ______________________________________________________________________
 658+ 2AC0              //
 659+ 2AC0              // ?comp       --
 660+ 2AC0              // raise msg #17 if not compiling
 661+ 2AC0                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 2AC0             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 2AC0             >
 661+ 2AC0             >Dict_Ptr        defl    $
 661+ 2AC0             >
 661+ 2AC0             >//              ______________________________________________________________________
 661+ 2AC0             >//              Heap part
 661+ 2AC0             >
 661+ 2AC0             >
 661+ 2AC0             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6F8             >
 661+ E6F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6F8             >Latest_Definition defl  Heap_Ptr
 661+ E6F8             >
 661+ E6F8             >                // dummy db directives used to calculate length of namec
 661+ E6F8 3F 43 4F 4D >                db      "?COMP"
 661+ E6FC 50          >
 661+ E6FD             >len_NFA         defl    $ - temp_NFA
 661+ E6FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6F8             >
 661+ E6F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FD 50          >
 661+ E6FE             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FD D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E6FE             >
 661+ E6FE ED 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E700             >Prev_Ptr        defl    Heap_Ptr
 661+ E700             >
 661+ E700             >mirror_Ptr      defl    $
 661+ E700             >
 661+ E700 C2 2A       >                dw      Dict_Ptr + 2        // xt
 661+ E702             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E702             >
 661+ E702             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E702             >
 661+ E702             >//              ______________________________________________________________________
 661+ E702             >//              Dictionary part
 661+ E702             >
 661+ E702             >                org     Dict_Ptr
 661+ 2AC0             >
 661+ 2AC0 00 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 2AC2             >
 661+ 2AC2             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 2AC2 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 2AC5             >
 661+ 2AC5             >
 661+ 2AC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 2AC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 2AC5             >
 661+ 2AC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 2AC5 17 28 55 26                  dw      STATE, FETCH            // state @
 663+ 2AC9 32 25                        dw      ZEQUAL                  // 0=
 664+ 2ACB 3D 20 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 2ACF AD 2A                        dw      QERROR                  // ?error
 666+ 2AD1 0D 25                        dw      EXIT                    // ;
 667+ 2AD3
 668+ 2AD3              //  ______________________________________________________________________
 669+ 2AD3              //
 670+ 2AD3              // ?exec       --
 671+ 2AD3              // raise msg #18 if compiling
 672+ 2AD3                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 2AD3             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 2AD3             >
 672+ 2AD3             >Dict_Ptr        defl    $
 672+ 2AD3             >
 672+ 2AD3             >//              ______________________________________________________________________
 672+ 2AD3             >//              Heap part
 672+ 2AD3             >
 672+ 2AD3             >
 672+ 2AD3             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E702             >
 672+ E702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E702             >Latest_Definition defl  Heap_Ptr
 672+ E702             >
 672+ E702             >                // dummy db directives used to calculate length of namec
 672+ E702 3F 45 58 45 >                db      "?EXEC"
 672+ E706 43          >
 672+ E707             >len_NFA         defl    $ - temp_NFA
 672+ E707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E702             >
 672+ E702 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E703 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E707 43          >
 672+ E708             >                org     $-1                 // alter last byte of Name just above to set
 672+ E707 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E708             >
 672+ E708 F8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70A             >Prev_Ptr        defl    Heap_Ptr
 672+ E70A             >
 672+ E70A             >mirror_Ptr      defl    $
 672+ E70A             >
 672+ E70A D5 2A       >                dw      Dict_Ptr + 2        // xt
 672+ E70C             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70C             >
 672+ E70C             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70C             >
 672+ E70C             >//              ______________________________________________________________________
 672+ E70C             >//              Dictionary part
 672+ E70C             >
 672+ E70C             >                org     Dict_Ptr
 672+ 2AD3             >
 672+ 2AD3 0A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 2AD5             >
 672+ 2AD5             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 2AD5 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 2AD8             >
 672+ 2AD8             >
 672+ 2AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 2AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 2AD8             >
 672+ 2AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 2AD8 17 28 55 26                  dw      STATE, FETCH            // state @
 674+ 2ADC 3D 20 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 2AE0 AD 2A                        dw      QERROR                  // ?error
 676+ 2AE2 0D 25                        dw      EXIT                    // ;
 677+ 2AE4
 678+ 2AE4              //  ______________________________________________________________________
 679+ 2AE4              //
 680+ 2AE4              // ?pairs       n1 n2 --
 681+ 2AE4              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 2AE4                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 2AE4             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 2AE4             >
 682+ 2AE4             >Dict_Ptr        defl    $
 682+ 2AE4             >
 682+ 2AE4             >//              ______________________________________________________________________
 682+ 2AE4             >//              Heap part
 682+ 2AE4             >
 682+ 2AE4             >
 682+ 2AE4             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70C             >
 682+ E70C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70C             >Latest_Definition defl  Heap_Ptr
 682+ E70C             >
 682+ E70C             >                // dummy db directives used to calculate length of namec
 682+ E70C 3F 50 41 49 >                db      "?PAIRS"
 682+ E710 52 53       >
 682+ E712             >len_NFA         defl    $ - temp_NFA
 682+ E712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70C             >
 682+ E70C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E711 52 53       >
 682+ E713             >                org     $-1                 // alter last byte of Name just above to set
 682+ E712 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E713             >
 682+ E713 02 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E715             >Prev_Ptr        defl    Heap_Ptr
 682+ E715             >
 682+ E715             >mirror_Ptr      defl    $
 682+ E715             >
 682+ E715 E6 2A       >                dw      Dict_Ptr + 2        // xt
 682+ E717             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E717             >
 682+ E717             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E717             >
 682+ E717             >//              ______________________________________________________________________
 682+ E717             >//              Dictionary part
 682+ E717             >
 682+ E717             >                org     Dict_Ptr
 682+ 2AE4             >
 682+ 2AE4 15 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 2AE6             >
 682+ 2AE6             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 2AE6 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 2AE9             >
 682+ 2AE9             >
 682+ 2AE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 2AE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 2AE9             >
 682+ 2AE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 2AE9 B0 28                        dw      SUBTRACT                // -
 684+ 2AEB 3D 20 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 2AEF AD 2A                        dw      QERROR                  // ?error
 686+ 2AF1 0D 25                        dw      EXIT                    // ;
 687+ 2AF3
 688+ 2AF3              //  ______________________________________________________________________
 689+ 2AF3              //
 690+ 2AF3              // ?csp       --
 691+ 2AF3              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 2AF3              // Compiler relies on that for  syntax checking of structures
 693+ 2AF3                              Colon_Def QCSP, "?CSP", is_normal
 693+ 2AF3             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 2AF3             >
 693+ 2AF3             >Dict_Ptr        defl    $
 693+ 2AF3             >
 693+ 2AF3             >//              ______________________________________________________________________
 693+ 2AF3             >//              Heap part
 693+ 2AF3             >
 693+ 2AF3             >
 693+ 2AF3             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E717             >
 693+ E717             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E717             >Latest_Definition defl  Heap_Ptr
 693+ E717             >
 693+ E717             >                // dummy db directives used to calculate length of namec
 693+ E717 3F 43 53 50 >                db      "?CSP"
 693+ E71B             >len_NFA         defl    $ - temp_NFA
 693+ E71B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E717             >
 693+ E717 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E718 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71C             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71B D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71C             >
 693+ E71C 0C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E71E             >Prev_Ptr        defl    Heap_Ptr
 693+ E71E             >
 693+ E71E             >mirror_Ptr      defl    $
 693+ E71E             >
 693+ E71E F5 2A       >                dw      Dict_Ptr + 2        // xt
 693+ E720             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E720             >
 693+ E720             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E720             >
 693+ E720             >//              ______________________________________________________________________
 693+ E720             >//              Dictionary part
 693+ E720             >
 693+ E720             >                org     Dict_Ptr
 693+ 2AF3             >
 693+ 2AF3 1E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 2AF5             >
 693+ 2AF5             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 2AF5 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 2AF8             >
 693+ 2AF8             >
 693+ 2AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 2AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 2AF8             >
 693+ 2AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 2AF8 F4 24                        dw      SPFETCH                 // sp@
 695+ 2AFA 2F 28 55 26                  dw      CSP, FETCH              // csp @
 696+ 2AFE B0 28                        dw      SUBTRACT                // -
 697+ 2B00 3D 20 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 2B04 AD 2A                        dw      QERROR                  // ?error
 699+ 2B06 0D 25                        dw      EXIT                    // ;
 700+ 2B08
 701+ 2B08              //  ______________________________________________________________________
 702+ 2B08              //
 703+ 2B08              // ?loading      --
 704+ 2B08              // raise msg #22 if not loading
 705+ 2B08                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 2B08             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 2B08             >
 705+ 2B08             >Dict_Ptr        defl    $
 705+ 2B08             >
 705+ 2B08             >//              ______________________________________________________________________
 705+ 2B08             >//              Heap part
 705+ 2B08             >
 705+ 2B08             >
 705+ 2B08             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E720             >
 705+ E720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E720             >Latest_Definition defl  Heap_Ptr
 705+ E720             >
 705+ E720             >                // dummy db directives used to calculate length of namec
 705+ E720 3F 4C 4F 41 >                db      "?LOADING"
 705+ E724 44 49 4E 47 >
 705+ E728             >len_NFA         defl    $ - temp_NFA
 705+ E728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E720             >
 705+ E720 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E721 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E725 44 49 4E 47 >
 705+ E729             >                org     $-1                 // alter last byte of Name just above to set
 705+ E728 C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E729             >
 705+ E729 17 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72B             >Prev_Ptr        defl    Heap_Ptr
 705+ E72B             >
 705+ E72B             >mirror_Ptr      defl    $
 705+ E72B             >
 705+ E72B 0A 2B       >                dw      Dict_Ptr + 2        // xt
 705+ E72D             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72D             >
 705+ E72D             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72D             >
 705+ E72D             >//              ______________________________________________________________________
 705+ E72D             >//              Dictionary part
 705+ E72D             >
 705+ E72D             >                org     Dict_Ptr
 705+ 2B08             >
 705+ 2B08 2B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 2B0A             >
 705+ 2B0A             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 2B0A CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 2B0D             >
 705+ 2B0D             >
 705+ 2B0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 2B0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 2B0D             >
 705+ 2B0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 2B0D ED 27 55 26                  dw      BLK, FETCH              // blk @
 707+ 2B11 32 25                        dw      ZEQUAL                  // 0=
 708+ 2B13 3D 20 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 2B17 AD 2A                        dw      QERROR                  // ?error
 710+ 2B19 0D 25                        dw      EXIT                    // ;
 711+ 2B1B
 712+ 2B1B              //  ______________________________________________________________________
 713+ 2B1B              //
 714+ 2B1B              // compile      --
 715+ 2B1B              // compiles the following word
 716+ 2B1B                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 2B1B             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 2B1B             >
 716+ 2B1B             >Dict_Ptr        defl    $
 716+ 2B1B             >
 716+ 2B1B             >//              ______________________________________________________________________
 716+ 2B1B             >//              Heap part
 716+ 2B1B             >
 716+ 2B1B             >
 716+ 2B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72D             >
 716+ E72D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72D             >Latest_Definition defl  Heap_Ptr
 716+ E72D             >
 716+ E72D             >                // dummy db directives used to calculate length of namec
 716+ E72D 43 4F 4D 50 >                db      "COMPILE"
 716+ E731 49 4C 45    >
 716+ E734             >len_NFA         defl    $ - temp_NFA
 716+ E734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72D             >
 716+ E72D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E72E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E732 49 4C 45    >
 716+ E735             >                org     $-1                 // alter last byte of Name just above to set
 716+ E734 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E735             >
 716+ E735 20 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E737             >Prev_Ptr        defl    Heap_Ptr
 716+ E737             >
 716+ E737             >mirror_Ptr      defl    $
 716+ E737             >
 716+ E737 1D 2B       >                dw      Dict_Ptr + 2        // xt
 716+ E739             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E739             >
 716+ E739             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E739             >
 716+ E739             >//              ______________________________________________________________________
 716+ E739             >//              Dictionary part
 716+ E739             >
 716+ E739             >                org     Dict_Ptr
 716+ 2B1B             >
 716+ 2B1B 37 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 2B1D             >
 716+ 2B1D             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 2B1D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 2B20             >
 716+ 2B20             >
 716+ 2B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 2B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 2B20             >
 716+ 2B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 2B20 C2 2A                        dw      QCOMP                   // ?comp
 718+ 2B22 22 25                        dw      R_TO                    // r>
 719+ 2B24 E4 25 8E 25                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 2B28 17 25                        dw      TO_R                    // >r
 721+ 2B2A 55 26 87 28                  dw      FETCH, COMMA            // @ ,
 722+ 2B2E 0D 25                        dw      EXIT                    // ;
 723+ 2B30
 724+ 2B30              //  ______________________________________________________________________
 725+ 2B30              //
 726+ 2B30              // compile,     --
 727+ 2B30              // compiles the following word
 728+ 2B30                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 2B30             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 2B30             >
 728+ 2B30             >Dict_Ptr        defl    $
 728+ 2B30             >
 728+ 2B30             >//              ______________________________________________________________________
 728+ 2B30             >//              Heap part
 728+ 2B30             >
 728+ 2B30             >
 728+ 2B30             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E739             >
 728+ E739             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E739             >Latest_Definition defl  Heap_Ptr
 728+ E739             >
 728+ E739             >                // dummy db directives used to calculate length of namec
 728+ E739 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73D 49 4C 45 2C >
 728+ E741             >len_NFA         defl    $ - temp_NFA
 728+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E739             >
 728+ E739 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73A 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E73E 49 4C 45 2C >
 728+ E742             >                org     $-1                 // alter last byte of Name just above to set
 728+ E741 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E742             >
 728+ E742 2D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E744             >Prev_Ptr        defl    Heap_Ptr
 728+ E744             >
 728+ E744             >mirror_Ptr      defl    $
 728+ E744             >
 728+ E744 32 2B       >                dw      Dict_Ptr + 2        // xt
 728+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E746             >
 728+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E746             >
 728+ E746             >//              ______________________________________________________________________
 728+ E746             >//              Dictionary part
 728+ E746             >
 728+ E746             >                org     Dict_Ptr
 728+ 2B30             >
 728+ 2B30 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 2B32             >
 728+ 2B32             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 2B32 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 2B35             >
 728+ 2B35             >
 728+ 2B35             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 2B35             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 2B35             >
 728+ 2B35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 2B35 C2 2A                        dw      QCOMP                   // ?comp
 730+ 2B37 87 28                        dw      COMMA                   // ,
 731+ 2B39 0D 25                        dw      EXIT                    // ;
 732+ 2B3B
 733+ 2B3B              //  ______________________________________________________________________
 734+ 2B3B              //
 735+ 2B3B              // [            --
 736+ 2B3B              // stop compilation
 737+ 2B3B                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 2B3B             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 2B3B             >
 737+ 2B3B             >Dict_Ptr        defl    $
 737+ 2B3B             >
 737+ 2B3B             >//              ______________________________________________________________________
 737+ 2B3B             >//              Heap part
 737+ 2B3B             >
 737+ 2B3B             >
 737+ 2B3B             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E746             >
 737+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E746             >Latest_Definition defl  Heap_Ptr
 737+ E746             >
 737+ E746             >                // dummy db directives used to calculate length of namec
 737+ E746 5B          >                db      "["
 737+ E747             >len_NFA         defl    $ - temp_NFA
 737+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E746             >
 737+ E746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E747 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E748             >                org     $-1                 // alter last byte of Name just above to set
 737+ E747 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E748             >
 737+ E748 39 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74A             >Prev_Ptr        defl    Heap_Ptr
 737+ E74A             >
 737+ E74A             >mirror_Ptr      defl    $
 737+ E74A             >
 737+ E74A 3D 2B       >                dw      Dict_Ptr + 2        // xt
 737+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74C             >
 737+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74C             >
 737+ E74C             >//              ______________________________________________________________________
 737+ E74C             >//              Dictionary part
 737+ E74C             >
 737+ E74C             >                org     Dict_Ptr
 737+ 2B3B             >
 737+ 2B3B 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 2B3D             >
 737+ 2B3D             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 2B3D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 2B40             >
 737+ 2B40             >
 737+ 2B40             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 2B40             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 2B40             >
 737+ 2B40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 2B40 4C 27                        dw      ZERO                    // 0
 739+ 2B42 17 28 5F 26                  dw      STATE, STORE            // state !
 740+ 2B46 0D 25                        dw      EXIT                    // ; immediate
 741+ 2B48
 742+ 2B48              //  ______________________________________________________________________
 743+ 2B48              //
 744+ 2B48              // ]            --
 745+ 2B48              // start compilation
 746+ 2B48                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 2B48             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 2B48             >
 746+ 2B48             >Dict_Ptr        defl    $
 746+ 2B48             >
 746+ 2B48             >//              ______________________________________________________________________
 746+ 2B48             >//              Heap part
 746+ 2B48             >
 746+ 2B48             >
 746+ 2B48             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74C             >
 746+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74C             >Latest_Definition defl  Heap_Ptr
 746+ E74C             >
 746+ E74C             >                // dummy db directives used to calculate length of namec
 746+ E74C 5D          >                db      "]"
 746+ E74D             >len_NFA         defl    $ - temp_NFA
 746+ E74D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74C             >
 746+ E74C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74D 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E74E             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74D DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E74E             >
 746+ E74E 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E750             >Prev_Ptr        defl    Heap_Ptr
 746+ E750             >
 746+ E750             >mirror_Ptr      defl    $
 746+ E750             >
 746+ E750 4A 2B       >                dw      Dict_Ptr + 2        // xt
 746+ E752             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E752             >
 746+ E752             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E752             >
 746+ E752             >//              ______________________________________________________________________
 746+ E752             >//              Dictionary part
 746+ E752             >
 746+ E752             >                org     Dict_Ptr
 746+ 2B48             >
 746+ 2B48 50 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 2B4A             >
 746+ 2B4A             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 2B4A CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 2B4D             >
 746+ 2B4D             >
 746+ 2B4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 2B4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 2B4D             >
 746+ 2B4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 2B4D 3D 20 C0 00                  dw      LIT, $C0                // 192
 748+ 2B51 17 28 5F 26                  dw      STATE, STORE            // state !
 749+ 2B55 0D 25                        dw      EXIT                    // ;
 750+ 2B57
 751+ 2B57              //  ______________________________________________________________________
 752+ 2B57              //
 753+ 2B57              // smudge       --
 754+ 2B57              // toggle smudge bit of latest definition
 755+ 2B57                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 2B57             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 2B57             >
 755+ 2B57             >Dict_Ptr        defl    $
 755+ 2B57             >
 755+ 2B57             >//              ______________________________________________________________________
 755+ 2B57             >//              Heap part
 755+ 2B57             >
 755+ 2B57             >
 755+ 2B57             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E752             >
 755+ E752             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E752             >Latest_Definition defl  Heap_Ptr
 755+ E752             >
 755+ E752             >                // dummy db directives used to calculate length of namec
 755+ E752 53 4D 55 44 >                db      "SMUDGE"
 755+ E756 47 45       >
 755+ E758             >len_NFA         defl    $ - temp_NFA
 755+ E758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E752             >
 755+ E752 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E753 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E757 47 45       >
 755+ E759             >                org     $-1                 // alter last byte of Name just above to set
 755+ E758 C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E759             >
 755+ E759 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75B             >Prev_Ptr        defl    Heap_Ptr
 755+ E75B             >
 755+ E75B             >mirror_Ptr      defl    $
 755+ E75B             >
 755+ E75B 59 2B       >                dw      Dict_Ptr + 2        // xt
 755+ E75D             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75D             >
 755+ E75D             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75D             >
 755+ E75D             >//              ______________________________________________________________________
 755+ E75D             >//              Dictionary part
 755+ E75D             >
 755+ E75D             >                org     Dict_Ptr
 755+ 2B57             >
 755+ 2B57 5B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 2B59             >
 755+ 2B59             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 2B59 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 2B5C             >
 755+ 2B5C             >
 755+ 2B5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 2B5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 2B5C             >
 755+ 2B5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 2B5C 1D 2A                        dw      LATEST                  // latest
 757+ 2B5E 3D 20 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 2B62 4C 26                        dw      TOGGLE                  // toggle
 759+ 2B64 0D 25                        dw      EXIT                    // ;
 760+ 2B66
 761+ 2B66              //  ______________________________________________________________________
 762+ 2B66              //
 763+ 2B66              // immediate    --
 764+ 2B66              // make immediate the latest definition
 765+ 2B66                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 2B66             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 2B66             >
 765+ 2B66             >Dict_Ptr        defl    $
 765+ 2B66             >
 765+ 2B66             >//              ______________________________________________________________________
 765+ 2B66             >//              Heap part
 765+ 2B66             >
 765+ 2B66             >
 765+ 2B66             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75D             >
 765+ E75D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75D             >Latest_Definition defl  Heap_Ptr
 765+ E75D             >
 765+ E75D             >                // dummy db directives used to calculate length of namec
 765+ E75D 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E761 44 49 41 54 >
 765+ E765 45          >
 765+ E766             >len_NFA         defl    $ - temp_NFA
 765+ E766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75D             >
 765+ E75D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E762 44 49 41 54 >
 765+ E766 45          >
 765+ E767             >                org     $-1                 // alter last byte of Name just above to set
 765+ E766 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E767             >
 765+ E767 52 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E769             >Prev_Ptr        defl    Heap_Ptr
 765+ E769             >
 765+ E769             >mirror_Ptr      defl    $
 765+ E769             >
 765+ E769 68 2B       >                dw      Dict_Ptr + 2        // xt
 765+ E76B             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76B             >
 765+ E76B             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76B             >
 765+ E76B             >//              ______________________________________________________________________
 765+ E76B             >//              Dictionary part
 765+ E76B             >
 765+ E76B             >                org     Dict_Ptr
 765+ 2B66             >
 765+ 2B66 69 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 2B68             >
 765+ 2B68             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 2B68 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 2B6B             >
 765+ 2B6B             >
 765+ 2B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 2B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 2B6B             >
 765+ 2B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 2B6B 1D 2A                        dw      LATEST                  // latest
 767+ 2B6D 3D 20 40 00                  dw      LIT, $40                // 64
 768+ 2B71 4C 26                        dw      TOGGLE                  // toggle
 769+ 2B73 0D 25                        dw      EXIT                    // ;
 770+ 2B75
 771+ 2B75              //  ______________________________________________________________________
 772+ 2B75              //
 773+ 2B75              // hex          --
 774+ 2B75              // change numeration base
 775+ 2B75                              Colon_Def HEX, "HEX", is_normal
 775+ 2B75             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 2B75             >
 775+ 2B75             >Dict_Ptr        defl    $
 775+ 2B75             >
 775+ 2B75             >//              ______________________________________________________________________
 775+ 2B75             >//              Heap part
 775+ 2B75             >
 775+ 2B75             >
 775+ 2B75             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76B             >
 775+ E76B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76B             >Latest_Definition defl  Heap_Ptr
 775+ E76B             >
 775+ E76B             >                // dummy db directives used to calculate length of namec
 775+ E76B 48 45 58    >                db      "HEX"
 775+ E76E             >len_NFA         defl    $ - temp_NFA
 775+ E76E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76B             >
 775+ E76B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E76F             >                org     $-1                 // alter last byte of Name just above to set
 775+ E76E D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E76F             >
 775+ E76F 5D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E771             >Prev_Ptr        defl    Heap_Ptr
 775+ E771             >
 775+ E771             >mirror_Ptr      defl    $
 775+ E771             >
 775+ E771 77 2B       >                dw      Dict_Ptr + 2        // xt
 775+ E773             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E773             >
 775+ E773             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E773             >
 775+ E773             >//              ______________________________________________________________________
 775+ E773             >//              Dictionary part
 775+ E773             >
 775+ E773             >                org     Dict_Ptr
 775+ 2B75             >
 775+ 2B75 71 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 2B77             >
 775+ 2B77             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 2B77 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 2B7A             >
 775+ 2B7A             >
 775+ 2B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 2B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 2B7A             >
 775+ 2B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 2B7A 3D 20 10 00                  dw      LIT, 16                 // 16
 777+ 2B7E 1D 28 5F 26                  dw      BASE, STORE             // base !
 778+ 2B82 0D 25                        dw      EXIT                    // ;
 779+ 2B84
 780+ 2B84              //  ______________________________________________________________________
 781+ 2B84              //
 782+ 2B84              // decimal      --
 783+ 2B84              // change numeration base
 784+ 2B84                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 2B84             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 2B84             >
 784+ 2B84             >Dict_Ptr        defl    $
 784+ 2B84             >
 784+ 2B84             >//              ______________________________________________________________________
 784+ 2B84             >//              Heap part
 784+ 2B84             >
 784+ 2B84             >
 784+ 2B84             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E773             >
 784+ E773             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E773             >Latest_Definition defl  Heap_Ptr
 784+ E773             >
 784+ E773             >                // dummy db directives used to calculate length of namec
 784+ E773 44 45 43 49 >                db      "DECIMAL"
 784+ E777 4D 41 4C    >
 784+ E77A             >len_NFA         defl    $ - temp_NFA
 784+ E77A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E773             >
 784+ E773 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E774 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E778 4D 41 4C    >
 784+ E77B             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77A CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77B             >
 784+ E77B 6B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77D             >Prev_Ptr        defl    Heap_Ptr
 784+ E77D             >
 784+ E77D             >mirror_Ptr      defl    $
 784+ E77D             >
 784+ E77D 86 2B       >                dw      Dict_Ptr + 2        // xt
 784+ E77F             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E77F             >
 784+ E77F             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E77F             >
 784+ E77F             >//              ______________________________________________________________________
 784+ E77F             >//              Dictionary part
 784+ E77F             >
 784+ E77F             >                org     Dict_Ptr
 784+ 2B84             >
 784+ 2B84 7D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 2B86             >
 784+ 2B86             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 2B86 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 2B89             >
 784+ 2B89             >
 784+ 2B89             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 2B89             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 2B89             >
 784+ 2B89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 2B89 3D 20 0A 00                  dw      LIT, 10                 // 10
 786+ 2B8D 1D 28 5F 26                  dw      BASE, STORE             // base !
 787+ 2B91 0D 25                        dw      EXIT                    // ;
 788+ 2B93
 789+ 2B93              //  ______________________________________________________________________
 790+ 2B93              //
 791+ 2B93              // (;code)       --
 792+ 2B93              // patch to CFA to call/jump to the "following code"
 793+ 2B93                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 2B93             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 2B93             >
 793+ 2B93             >Dict_Ptr        defl    $
 793+ 2B93             >
 793+ 2B93             >//              ______________________________________________________________________
 793+ 2B93             >//              Heap part
 793+ 2B93             >
 793+ 2B93             >
 793+ 2B93             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E77F             >
 793+ E77F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E77F             >Latest_Definition defl  Heap_Ptr
 793+ E77F             >
 793+ E77F             >                // dummy db directives used to calculate length of namec
 793+ E77F 28 3B 43 4F >                db      "(;CODE)"
 793+ E783 44 45 29    >
 793+ E786             >len_NFA         defl    $ - temp_NFA
 793+ E786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E77F             >
 793+ E77F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E780 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E784 44 45 29    >
 793+ E787             >                org     $-1                 // alter last byte of Name just above to set
 793+ E786 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E787             >
 793+ E787 73 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E789             >Prev_Ptr        defl    Heap_Ptr
 793+ E789             >
 793+ E789             >mirror_Ptr      defl    $
 793+ E789             >
 793+ E789 95 2B       >                dw      Dict_Ptr + 2        // xt
 793+ E78B             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78B             >
 793+ E78B             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78B             >
 793+ E78B             >//              ______________________________________________________________________
 793+ E78B             >//              Dictionary part
 793+ E78B             >
 793+ E78B             >                org     Dict_Ptr
 793+ 2B93             >
 793+ 2B93 89 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 2B95             >
 793+ 2B95             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 2B95 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 2B98             >
 793+ 2B98             >
 793+ 2B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 2B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 2B98             >
 793+ 2B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 2B98 22 25                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 2B9A 1D 2A                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 2B9C 7B 2A 56 2A                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 2BA0
 798+ 2BA0 3D 20 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 2BA4 C0 25 73 26                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 2BA8 78 25                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 2BAA
 802+ 2BAA 5F 26                        dw      STORE                   // !
 803+ 2BAC 0D 25                        dw      EXIT                    // ;
 804+ 2BAE
 805+ 2BAE              //  ______________________________________________________________________
 806+ 2BAE              //
 807+ 2BAE              // ;code        --
 808+ 2BAE                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 2BAE             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 2BAE             >
 808+ 2BAE             >Dict_Ptr        defl    $
 808+ 2BAE             >
 808+ 2BAE             >//              ______________________________________________________________________
 808+ 2BAE             >//              Heap part
 808+ 2BAE             >
 808+ 2BAE             >
 808+ 2BAE             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78B             >
 808+ E78B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78B             >Latest_Definition defl  Heap_Ptr
 808+ E78B             >
 808+ E78B             >                // dummy db directives used to calculate length of namec
 808+ E78B 3B 43 4F 44 >                db      ";CODE"
 808+ E78F 45          >
 808+ E790             >len_NFA         defl    $ - temp_NFA
 808+ E790             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78B             >
 808+ E78B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E790 45          >
 808+ E791             >                org     $-1                 // alter last byte of Name just above to set
 808+ E790 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E791             >
 808+ E791 7F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E793             >Prev_Ptr        defl    Heap_Ptr
 808+ E793             >
 808+ E793             >mirror_Ptr      defl    $
 808+ E793             >
 808+ E793 B0 2B       >                dw      Dict_Ptr + 2        // xt
 808+ E795             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E795             >
 808+ E795             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E795             >
 808+ E795             >//              ______________________________________________________________________
 808+ E795             >//              Dictionary part
 808+ E795             >
 808+ E795             >                org     Dict_Ptr
 808+ 2BAE             >
 808+ 2BAE 93 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 2BB0             >
 808+ 2BB0             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 2BB0 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 2BB3             >
 808+ 2BB3             >
 808+ 2BB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 2BB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 2BB3             >
 808+ 2BB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 2BB3 F5 2A                        dw      QCSP                    // ?csp
 810+ 2BB5 1D 2B                        dw      COMPILE                 // compile
 811+ 2BB7 95 2B                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 2BB9 3D 2B                        dw      SQUARED_OPEN            // [
 813+ 2BBB 13 27                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 2BBD 0D 25                        dw      EXIT                    // ; immediate
 815+ 2BBF
 816+ 2BBF              //  ______________________________________________________________________
 817+ 2BBF              //
 818+ 2BBF              // <builds      --
 819+ 2BBF                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 2BBF             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 2BBF             >
 819+ 2BBF             >Dict_Ptr        defl    $
 819+ 2BBF             >
 819+ 2BBF             >//              ______________________________________________________________________
 819+ 2BBF             >//              Heap part
 819+ 2BBF             >
 819+ 2BBF             >
 819+ 2BBF             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E795             >
 819+ E795             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E795             >Latest_Definition defl  Heap_Ptr
 819+ E795             >
 819+ E795             >                // dummy db directives used to calculate length of namec
 819+ E795 3C 42 55 49 >                db      "<BUILDS"
 819+ E799 4C 44 53    >
 819+ E79C             >len_NFA         defl    $ - temp_NFA
 819+ E79C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E795             >
 819+ E795 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E796 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79A 4C 44 53    >
 819+ E79D             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79C D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79D             >
 819+ E79D 8B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E79F             >Prev_Ptr        defl    Heap_Ptr
 819+ E79F             >
 819+ E79F             >mirror_Ptr      defl    $
 819+ E79F             >
 819+ E79F C1 2B       >                dw      Dict_Ptr + 2        // xt
 819+ E7A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A1             >
 819+ E7A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A1             >
 819+ E7A1             >//              ______________________________________________________________________
 819+ E7A1             >//              Dictionary part
 819+ E7A1             >
 819+ E7A1             >                org     Dict_Ptr
 819+ 2BBF             >
 819+ 2BBF 9F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 2BC1             >
 819+ 2BC1             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 2BC1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 2BC4             >
 819+ 2BC4             >
 819+ 2BC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 2BC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 2BC4             >
 819+ 2BC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 2BC4 4C 27                        dw      ZERO                    // 0
 821+ 2BC6 17 27                        dw      CONSTANT                // constant
 822+ 2BC8 0D 25                        dw      EXIT                    // ;
 823+ 2BCA
 824+ 2BCA              //  ______________________________________________________________________
 825+ 2BCA              //
 826+ 2BCA              // recurse      --
 827+ 2BCA              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 2BCA              //              dw      QCOMP                   // ?comp
 829+ 2BCA              //              dw      LATEST                  // latest
 830+ 2BCA              //              dw      PFA, CFA                // pfa cfa
 831+ 2BCA              //              dw      COMMA                   // ,
 832+ 2BCA              //              dw      EXIT                    // ; immediate
 833+ 2BCA
 834+ 2BCA              //  ______________________________________________________________________
 835+ 2BCA              //
 836+ 2BCA              // does>     --
 837+ 2BCA                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 2BCA             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 2BCA             >
 837+ 2BCA             >Dict_Ptr        defl    $
 837+ 2BCA             >
 837+ 2BCA             >//              ______________________________________________________________________
 837+ 2BCA             >//              Heap part
 837+ 2BCA             >
 837+ 2BCA             >
 837+ 2BCA             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A1             >
 837+ E7A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A1             >Latest_Definition defl  Heap_Ptr
 837+ E7A1             >
 837+ E7A1             >                // dummy db directives used to calculate length of namec
 837+ E7A1 44 4F 45 53 >                db      "DOES>"
 837+ E7A5 3E          >
 837+ E7A6             >len_NFA         defl    $ - temp_NFA
 837+ E7A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A1             >
 837+ E7A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A2 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A6 3E          >
 837+ E7A7             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A6 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A7             >
 837+ E7A7 95 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7A9             >Prev_Ptr        defl    Heap_Ptr
 837+ E7A9             >
 837+ E7A9             >mirror_Ptr      defl    $
 837+ E7A9             >
 837+ E7A9 CC 2B       >                dw      Dict_Ptr + 2        // xt
 837+ E7AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AB             >
 837+ E7AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AB             >
 837+ E7AB             >//              ______________________________________________________________________
 837+ E7AB             >//              Dictionary part
 837+ E7AB             >
 837+ E7AB             >                org     Dict_Ptr
 837+ 2BCA             >
 837+ 2BCA A9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 2BCC             >
 837+ 2BCC             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 2BCC CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 2BCF             >
 837+ 2BCF             >
 837+ 2BCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 2BCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 2BCF             >
 837+ 2BCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 2BCF 22 25                        dw      R_TO                    // r>
 839+ 2BD1 1D 2A                        dw      LATEST                  // latest
 840+ 2BD3 7B 2A                        dw      PFA                     // pfa
 841+ 2BD5 5F 26                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 2BD7              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 2BD7 95 2B                        dw      C_SEMICOLON_CODE        // ;code
 844+ 2BD9              Does_Ptr:
 845+ 2BD9                              // via call coded in CFA
 846+ 2BD9 EB                           ex      de, hl //**
 847+ 2BDA                              // *** ldhlrp
 848+ 2BDA 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 2BDB 70                           ld      (hl), b
 850+ 2BDC 2B                           dec     hl
 851+ 2BDD 71                           ld      (hl), c
 852+ 2BDE                              // *** ldrphl
 853+ 2BDE EB                           ex      de, hl //**
 854+ 2BDF E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 2BE0
 856+ 2BE0 4E                           ld      c, (hl)
 857+ 2BE1 23                           inc     hl
 858+ 2BE2 46                           ld      b, (hl)
 859+ 2BE3 23                           inc     hl
 860+ 2BE4
 861+ 2BE4                              psh1
 861+ 2BE4 E5          >                push    hl
 861+ 2BE5 DD E9       >                jp      (ix)
 862+ 2BE7                              // SMUDGE !
 863+ 2BE7
 864+ 2BE7              //  ______________________________________________________________________
 865+ 2BE7              //
 866+ 2BE7              // count        a -- a2 n
 867+ 2BE7              // expects a counted string at address a, returns string address and counter
 868+ 2BE7                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 2BE7             >
 868+ 2BE7             >Dict_Ptr        defl    $
 868+ 2BE7             >
 868+ 2BE7             >//              ______________________________________________________________________
 868+ 2BE7             >//              Heap part
 868+ 2BE7             >
 868+ 2BE7             >
 868+ 2BE7             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AB             >
 868+ E7AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AB             >Latest_Definition defl  Heap_Ptr
 868+ E7AB             >
 868+ E7AB             >                // dummy db directives used to calculate length of namec
 868+ E7AB 43 4F 55 4E >                db      "COUNT"
 868+ E7AF 54          >
 868+ E7B0             >len_NFA         defl    $ - temp_NFA
 868+ E7B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AB             >
 868+ E7AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B0 54          >
 868+ E7B1             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B0 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B1             >
 868+ E7B1 A1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B3             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B3             >
 868+ E7B3             >mirror_Ptr      defl    $
 868+ E7B3             >
 868+ E7B3 E9 2B       >                dw      Dict_Ptr + 2        // xt
 868+ E7B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B5             >
 868+ E7B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B5             >
 868+ E7B5             >//              ______________________________________________________________________
 868+ E7B5             >//              Dictionary part
 868+ E7B5             >
 868+ E7B5             >                org     Dict_Ptr
 868+ 2BE7             >
 868+ 2BE7 B3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 2BE9             >
 868+ 2BE9             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 2BE9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 2BE9 ~           >
 868+ 2BE9 ~           >
 868+ 2BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 2BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 2BE9             >
 868+ 2BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 2BE9 D9                           exx
 870+ 2BEA E1                           pop     hl
 871+ 2BEB 5E                           ld      e, (hl)
 872+ 2BEC 16 00                        ld      d, 0
 873+ 2BEE 23                           inc     hl
 874+ 2BEF              Count_Here:
 875+ 2BEF E5                           push    hl
 876+ 2BF0 D5                           push    de
 877+ 2BF1 D9                           exx
 878+ 2BF2                              next
 878+ 2BF2 DD E9       >                jp      (ix)
 879+ 2BF4              //                pop     hl
 880+ 2BF4              //                ld      a, (hl)
 881+ 2BF4              //                inc     hl
 882+ 2BF4              //                push    hl
 883+ 2BF4              //                ld      h, 0
 884+ 2BF4              //                ld      l, a
 885+ 2BF4              //                push    hl
 886+ 2BF4              //                next
 887+ 2BF4
 888+ 2BF4              //  ______________________________________________________________________
 889+ 2BF4              //
 890+ 2BF4              // bounds       a n -- a+n n
 891+ 2BF4              // given an address and a length ( a n ) calculate the bound addresses
 892+ 2BF4              // suitable for DO-LOOP
 893+ 2BF4                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 2BF4             >
 893+ 2BF4             >Dict_Ptr        defl    $
 893+ 2BF4             >
 893+ 2BF4             >//              ______________________________________________________________________
 893+ 2BF4             >//              Heap part
 893+ 2BF4             >
 893+ 2BF4             >
 893+ 2BF4             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B5             >
 893+ E7B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B5             >Latest_Definition defl  Heap_Ptr
 893+ E7B5             >
 893+ E7B5             >                // dummy db directives used to calculate length of namec
 893+ E7B5 42 4F 55 4E >                db      "BOUNDS"
 893+ E7B9 44 53       >
 893+ E7BB             >len_NFA         defl    $ - temp_NFA
 893+ E7BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B5             >
 893+ E7B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B6 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BA 44 53       >
 893+ E7BC             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BB D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BC             >
 893+ E7BC AB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7BE             >Prev_Ptr        defl    Heap_Ptr
 893+ E7BE             >
 893+ E7BE             >mirror_Ptr      defl    $
 893+ E7BE             >
 893+ E7BE F6 2B       >                dw      Dict_Ptr + 2        // xt
 893+ E7C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C0             >
 893+ E7C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C0             >
 893+ E7C0             >//              ______________________________________________________________________
 893+ E7C0             >//              Dictionary part
 893+ E7C0             >
 893+ E7C0             >                org     Dict_Ptr
 893+ 2BF4             >
 893+ 2BF4 BE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 2BF6             >
 893+ 2BF6             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 2BF6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 2BF6 ~           >
 893+ 2BF6 ~           >
 893+ 2BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 2BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 2BF6             >
 893+ 2BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 2BF6 D9                           exx
 895+ 2BF7 E1                           pop     hl
 896+ 2BF8 D1                           pop     de
 897+ 2BF9 19                           add     hl, de
 898+ 2BFA 18 F3                        jr      Count_Here
 899+ 2BFC                              // push    hl
 900+ 2BFC                              // push    de
 901+ 2BFC                              // exx
 902+ 2BFC                              // next
 903+ 2BFC
 904+ 2BFC              //  ______________________________________________________________________
 905+ 2BFC              //
 906+ 2BFC              // leave        --
 907+ 2BFC              // Compile (leave) to leave current LOOP and jump just after it
 908+ 2BFC                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 2BFC             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 2BFC             >
 908+ 2BFC             >Dict_Ptr        defl    $
 908+ 2BFC             >
 908+ 2BFC             >//              ______________________________________________________________________
 908+ 2BFC             >//              Heap part
 908+ 2BFC             >
 908+ 2BFC             >
 908+ 2BFC             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C0             >
 908+ E7C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C0             >Latest_Definition defl  Heap_Ptr
 908+ E7C0             >
 908+ E7C0             >                // dummy db directives used to calculate length of namec
 908+ E7C0 4C 45 41 56 >                db      "LEAVE"
 908+ E7C4 45          >
 908+ E7C5             >len_NFA         defl    $ - temp_NFA
 908+ E7C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C0             >
 908+ E7C0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C1 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C5 45          >
 908+ E7C6             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C5 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C6             >
 908+ E7C6 B5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7C8             >Prev_Ptr        defl    Heap_Ptr
 908+ E7C8             >
 908+ E7C8             >mirror_Ptr      defl    $
 908+ E7C8             >
 908+ E7C8 FE 2B       >                dw      Dict_Ptr + 2        // xt
 908+ E7CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CA             >
 908+ E7CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CA             >
 908+ E7CA             >//              ______________________________________________________________________
 908+ E7CA             >//              Dictionary part
 908+ E7CA             >
 908+ E7CA             >                org     Dict_Ptr
 908+ 2BFC             >
 908+ 2BFC C8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 2BFE             >
 908+ 2BFE             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 2BFE CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 2C01             >
 908+ 2C01             >
 908+ 2C01             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 2C01             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 2C01             >
 908+ 2C01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 2C01 1D 2B 9A 20                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 2C05 71 28 17 25                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 2C09 4C 27 87 28
 911+ 2C0D 4C 27 4C 27                  dw      ZERO, ZERO
 912+ 2C11 F4 24 E4 25                  dw      SPFETCH, DUP
 913+ 2C15 8E 25 8E 25                  dw      CELL_PLUS, CELL_PLUS
 914+ 2C19 D4 25                        dw      TUCK
 915+ 2C1B 2F 28 55 26                  dw      CSP, FETCH
 916+ 2C1F DD 25 B0 28                  dw      SWAP, SUBTRACT
 917+ 2C23 4E 24                        dw      CMOVE
 918+ 2C25 2F 28 55 26                  dw      CSP, FETCH, CELL_MINUS
 918+ 2C29 92 25
 919+ 2C2B 22 25 C0 25                  dw      R_TO, OVER, STORE
 919+ 2C2F 5F 26
 920+ 2C31 92 25 4C 27                  dw      CELL_MINUS, ZERO
 921+ 2C35 DD 25 5F 26                  dw      SWAP, STORE
 922+ 2C39 0D 25                        dw      EXIT                    // ;
 923+ 2C3B
 924+ 2C3B              //  ______________________________________________________________________
 925+ 2C3B              //
 926+ 2C3B              // type         a n --
 927+ 2C3B              // Sends to current output channel n characters starting at address a.
 928+ 2C3B                              Colon_Def TYPE, "TYPE", is_normal
 928+ 2C3B             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 2C3B             >
 928+ 2C3B             >Dict_Ptr        defl    $
 928+ 2C3B             >
 928+ 2C3B             >//              ______________________________________________________________________
 928+ 2C3B             >//              Heap part
 928+ 2C3B             >
 928+ 2C3B             >
 928+ 2C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CA             >
 928+ E7CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CA             >Latest_Definition defl  Heap_Ptr
 928+ E7CA             >
 928+ E7CA             >                // dummy db directives used to calculate length of namec
 928+ E7CA 54 59 50 45 >                db      "TYPE"
 928+ E7CE             >len_NFA         defl    $ - temp_NFA
 928+ E7CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CA             >
 928+ E7CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CB 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7CF             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7CE C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7CF             >
 928+ E7CF C0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D1             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D1             >
 928+ E7D1             >mirror_Ptr      defl    $
 928+ E7D1             >
 928+ E7D1 3D 2C       >                dw      Dict_Ptr + 2        // xt
 928+ E7D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D3             >
 928+ E7D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D3             >
 928+ E7D3             >//              ______________________________________________________________________
 928+ E7D3             >//              Dictionary part
 928+ E7D3             >
 928+ E7D3             >                org     Dict_Ptr
 928+ 2C3B             >
 928+ 2C3B D1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 2C3D             >
 928+ 2C3D             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 2C3D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 2C40             >
 928+ 2C40             >
 928+ 2C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 2C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 2C40             >
 928+ 2C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 2C40 F6 2B                        dw      BOUNDS                  // bounds
 930+ 2C42 A6 20                        dw      C_Q_DO                  // ?do
 931+ 2C44 0C 00                        dw      Type_Skip - $
 932+ 2C46              Type_Loop:
 933+ 2C46 D4 20 6A 26                  dw          I, CFETCH           //      i c@
 934+ 2C4A 2B 29                        dw          EMIT                //      emit
 935+ 2C4C 7A 20                        dw      C_LOOP                  // loop
 936+ 2C4E F8 FF                        dw      Type_Loop - $
 937+ 2C50              Type_Skip:
 938+ 2C50 0D 25                        dw      EXIT                    // ;
 939+ 2C52
 940+ 2C52              //  ______________________________________________________________________
 941+ 2C52              //
 942+ 2C52              // -trailing    a n1 -- a n2
 943+ 2C52              // Assumes that an n1 bytes-long string is stored at address a
 944+ 2C52              // and the string contains a space delimited word,
 945+ 2C52              // Finds n2 as the position of the first character after the word.
 946+ 2C52                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 2C52             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 2C52             >
 946+ 2C52             >Dict_Ptr        defl    $
 946+ 2C52             >
 946+ 2C52             >//              ______________________________________________________________________
 946+ 2C52             >//              Heap part
 946+ 2C52             >
 946+ 2C52             >
 946+ 2C52             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D3             >
 946+ E7D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D3             >Latest_Definition defl  Heap_Ptr
 946+ E7D3             >
 946+ E7D3             >                // dummy db directives used to calculate length of namec
 946+ E7D3 2D 54 52 41 >                db      "-TRAILING"
 946+ E7D7 49 4C 49 4E >
 946+ E7DB 47          >
 946+ E7DC             >len_NFA         defl    $ - temp_NFA
 946+ E7DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D3             >
 946+ E7D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7D8 49 4C 49 4E >
 946+ E7DC 47          >
 946+ E7DD             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DC C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7DD             >
 946+ E7DD CA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7DF             >Prev_Ptr        defl    Heap_Ptr
 946+ E7DF             >
 946+ E7DF             >mirror_Ptr      defl    $
 946+ E7DF             >
 946+ E7DF 54 2C       >                dw      Dict_Ptr + 2        // xt
 946+ E7E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E1             >
 946+ E7E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E1             >
 946+ E7E1             >//              ______________________________________________________________________
 946+ E7E1             >//              Dictionary part
 946+ E7E1             >
 946+ E7E1             >                org     Dict_Ptr
 946+ 2C52             >
 946+ 2C52 DF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 2C54             >
 946+ 2C54             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 2C54 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 2C57             >
 946+ 2C57             >
 946+ 2C57             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 2C57             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 2C57             >
 946+ 2C57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 2C57 E4 25 4C 27                  dw      DUP, ZERO               // dup 0
 948+ 2C5B                                                              // do
 949+ 2C5B A6 20                        dw      C_Q_DO
 950+ 2C5D 20 00                        dw      LTrailing_Leave - $
 951+ 2C5F              LTrailing_Loop:
 952+ 2C5F 33 26 5F 25                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 2C63 7F 25                        dw          ONE_SUBTRACT        //      1-
 954+ 2C65 6A 26                        dw          CFETCH              //      c@
 955+ 2C67 6F 27 B0 28                  dw          BL, SUBTRACT        //      bl -
 956+ 2C6B                                                              //      if
 957+ 2C6B 8F 20                        dw          ZBRANCH
 958+ 2C6D 0A 00                        dw          LTrailing_Else - $
 959+ 2C6F 9A 20                        dw              C_LEAVE         //          leave
 960+ 2C71 0C 00                        dw              LTrailing_Leave - $
 961+ 2C73 82 20                        dw          BRANCH              //      else
 962+ 2C75 04 00                        dw          LTrailing_Endif - $
 963+ 2C77              LTrailing_Else:
 964+ 2C77 7F 25                        dw              ONE_SUBTRACT    //          1-
 965+ 2C79              LTrailing_Endif:                                //      endif
 966+ 2C79                                                              // loop
 967+ 2C79 7A 20                        dw      C_LOOP
 968+ 2C7B E4 FF                        dw      LTrailing_Loop - $
 969+ 2C7D              LTrailing_Leave:
 970+ 2C7D 0D 25                        dw      EXIT                    // ;
 971+ 2C7F
 972+ 2C7F              //  ______________________________________________________________________
 973+ 2C7F              //
 974+ 2C7F              // accept       a n1 -- n2
 975+ 2C7F              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 2C7F              // CR stops input. A 'nul' is added as trailer.
 977+ 2C7F              // n2 is the string length. n2 is kept in span user variable also.
 978+ 2C7F                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 2C7F             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 2C7F             >
 978+ 2C7F             >Dict_Ptr        defl    $
 978+ 2C7F             >
 978+ 2C7F             >//              ______________________________________________________________________
 978+ 2C7F             >//              Heap part
 978+ 2C7F             >
 978+ 2C7F             >
 978+ 2C7F             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E1             >
 978+ E7E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E1             >Latest_Definition defl  Heap_Ptr
 978+ E7E1             >
 978+ E7E1             >                // dummy db directives used to calculate length of namec
 978+ E7E1 41 43 43 45 >                db      "ACCEPT"
 978+ E7E5 50 54       >
 978+ E7E7             >len_NFA         defl    $ - temp_NFA
 978+ E7E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E1             >
 978+ E7E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E6 50 54       >
 978+ E7E8             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7E7 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7E8             >
 978+ E7E8 D3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7EA             >Prev_Ptr        defl    Heap_Ptr
 978+ E7EA             >
 978+ E7EA             >mirror_Ptr      defl    $
 978+ E7EA             >
 978+ E7EA 81 2C       >                dw      Dict_Ptr + 2        // xt
 978+ E7EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EC             >
 978+ E7EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EC             >
 978+ E7EC             >//              ______________________________________________________________________
 978+ E7EC             >//              Dictionary part
 978+ E7EC             >
 978+ E7EC             >                org     Dict_Ptr
 978+ 2C7F             >
 978+ 2C7F EA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 2C81             >
 978+ 2C81             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 2C81 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 2C84             >
 978+ 2C84             >
 978+ 2C84             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 2C84             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 2C84             >
 978+ 2C84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 2C84 C0 25 5F 25                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 2C88 C0 25
 980+ 2C8A 4C 27 F6 25                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 2C8E                                                              // do
 982+ 2C8E A6 20                        dw      C_Q_DO
 983+ 2C90 8C 00                        dw      Accept_Leave - $
 984+ 2C92              Accept_Loop:
 985+ 2C92 DC 22                        dw          CUR
 986+ 2C94 C9 25 24 23                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 2C98 E4 25                        dw          DUP                 //      dup             ( a  c  c )
 988+ 2C9A 3D 20 0E 00                  dw          LIT, $0E            //      0E
 989+ 2C9E 92 27                        dw          PLUS_ORIGIN         //      +origin
 990+ 2CA0 55 26                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 2CA2 BC 28                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 2CA4                                                              //      if
 993+ 2CA4 8F 20                        dw          ZBRANCH
 994+ 2CA6 2C 00                        dw          Accept_Else_0 - $
 995+ 2CA8 C9 25                        dw              DROP            //          drop        ( a  )
 996+ 2CAA E4 25 D4 20                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 2CAE BC 28
 997+ 2CB0 53 27 CD 24                  dw              ONE, AND_OP     //          1 and
 998+ 2CB4 E4 25                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 2CB6 22 25                        dw              R_TO            //          r> 2 - + r>
1000+ 2CB8 9A 25 5F 25                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 2CBC 17 25                        dw              TO_R            //
1002+ 2CBE                                                              //          if
1003+ 2CBE 8F 20                        dw              ZBRANCH
1004+ 2CC0 0A 00                        dw              Accept_Else_1 - $
1005+ 2CC2 3D 20 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 2CC6                                                              //          else
1007+ 2CC6 82 20                        dw              BRANCH
1008+ 2CC8 06 00                        dw              Accept_Endif_1 - $
1009+ 2CCA              Accept_Else_1:
1010+ 2CCA 3D 20 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 2CCE              Accept_Endif_1:                                 //          endif
1012+ 2CCE 82 20                        dw          BRANCH
1013+ 2CD0 2E 00                        dw          Accept_Endif_0 - $
1014+ 2CD2              Accept_Else_0:                                  //      else
1015+ 2CD2 E4 25                        dw              DUP             //          dup         ( a  c  c )
1016+ 2CD4 3D 20 0D 00                  dw              LIT, 13         //          13
1017+ 2CD8 BC 28                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 2CDA                                                              //          if
1019+ 2CDA 8F 20                        dw              ZBRANCH
1020+ 2CDC 0C 00                        dw              Accept_Else_2 - $
1021+ 2CDE C9 25 6F 27                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 2CE2 4C 27                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 2CE4                                                              //          else
1024+ 2CE4 82 20                        dw              BRANCH
1025+ 2CE6 04 00                        dw              Accept_Endif_2 - $
1026+ 2CE8              Accept_Else_2:
1027+ 2CE8 E4 25                        dw                  DUP         //              dup     ( a  c  c )
1028+ 2CEA                                                              //          endif
1029+ 2CEA              Accept_Endif_2:
1030+ 2CEA D4 20 73 26                  dw              I, CSTORE       //          i           ( a  c )
1031+ 2CEE E4 25 6F 27                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 2CF2 D5 28
1032+ 2CF4                                                              //          if
1033+ 2CF4 8F 20                        dw              ZBRANCH
1034+ 2CF6 08 00                        dw              Accept_Endif_3 - $
1035+ 2CF8 22 25                        dw                  R_TO        //              r>
1036+ 2CFA 7F 25                        dw                  ONE_SUBTRACT//              1-
1037+ 2CFC 17 25                        dw                  TO_R        //              >r
1038+ 2CFE                                                              //          endif
1039+ 2CFE              Accept_Endif_3:
1040+ 2CFE              Accept_Endif_0:                                 //      endif
1041+ 2CFE 2B 29                        dw          EMIT                //      emit
1042+ 2D00
1043+ 2D00 4C 27 D4 20                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 2D04 78 25
1044+ 2D06 5F 26                        dw          STORE               //          ( zero pad )
1045+ 2D08 D4 20                        dw          I                   //      i
1046+ 2D0A D4 20 6A 26                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 2D0E 32 25
1047+ 2D10 8F 20                        dw          ZBRANCH             //
1048+ 2D12 06 00                        dw              Accept_Endif_4 - $
1049+ 2D14 9A 20                        dw                  C_LEAVE     //              leave
1050+ 2D16 06 00                        dw                  Accept_Leave - $
1051+ 2D18              Accept_Endif_4:                                 //      endif
1052+ 2D18                                                              // loop
1053+ 2D18 7A 20                        dw      C_LOOP
1054+ 2D1A 78 FF                        dw      Accept_Loop - $
1055+ 2D1C              Accept_Leave:
1056+ 2D1C DD 25 B0 28                  dw      SWAP, SUBTRACT          // swap -
1057+ 2D20 78 25                        dw      ONE_PLUS                // 1+
1058+ 2D22 E4 25 5F 28                  dw      DUP, SPAN, STORE        // dup span !
1058+ 2D26 5F 26
1059+ 2D28 0D 25                        dw      EXIT                    // ;
1060+ 2D2A
1061+ 2D2A              //  ______________________________________________________________________
1062+ 2D2A              //
1063+ 2D2A              // expect      a n --
1064+ 2D2A              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 2D2A              // CR stops input. A 'nul' is added as trailer.
1066+ 2D2A              // n2 is the string length. n2 is kept in span user variable also.
1067+ 2D2A              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 2D2A              //              dw      ACCEPT, DROP            // accept drop
1069+ 2D2A              //              dw      EXIT                    // ;
1070+ 2D2A
1071+ 2D2A              //  ______________________________________________________________________
1072+ 2D2A              //
1073+ 2D2A              // query        --
1074+ 2D2A              // Accept at most 80 character from console. CR stops.
1075+ 2D2A              // Text is stored in TIB. Variable IN is zeroed.
1076+ 2D2A                              Colon_Def QUERY, "QUERY", is_normal
1076+ 2D2A             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 2D2A             >
1076+ 2D2A             >Dict_Ptr        defl    $
1076+ 2D2A             >
1076+ 2D2A             >//              ______________________________________________________________________
1076+ 2D2A             >//              Heap part
1076+ 2D2A             >
1076+ 2D2A             >
1076+ 2D2A             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EC             >
1076+ E7EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EC             >Latest_Definition defl  Heap_Ptr
1076+ E7EC             >
1076+ E7EC             >                // dummy db directives used to calculate length of namec
1076+ E7EC 51 55 45 52 >                db      "QUERY"
1076+ E7F0 59          >
1076+ E7F1             >len_NFA         defl    $ - temp_NFA
1076+ E7F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EC             >
1076+ E7EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7ED 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F1 59          >
1076+ E7F2             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F1 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F2             >
1076+ E7F2 E1 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F4             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F4             >
1076+ E7F4             >mirror_Ptr      defl    $
1076+ E7F4             >
1076+ E7F4 2C 2D       >                dw      Dict_Ptr + 2        // xt
1076+ E7F6             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F6             >
1076+ E7F6             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F6             >
1076+ E7F6             >//              ______________________________________________________________________
1076+ E7F6             >//              Dictionary part
1076+ E7F6             >
1076+ E7F6             >                org     Dict_Ptr
1076+ 2D2A             >
1076+ 2D2A F4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 2D2C             >
1076+ 2D2C             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 2D2C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 2D2F             >
1076+ 2D2F             >
1076+ 2D2F             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 2D2F             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 2D2F             >
1076+ 2D2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 2D2F B1 27 55 26                  dw      TIB, FETCH              // tib @
1078+ 2D33 3D 20 50 00                  dw      LIT, 80                 // 80
1079+ 2D37 81 2C C9 25                  dw      ACCEPT, DROP            // accept drop
1080+ 2D3B 4C 27 F3 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 2D3F 5F 26
1081+ 2D41 0D 25                        dw      EXIT                    // ;
1082+ 2D43
1083+ 2D43              //  ______________________________________________________________________
1084+ 2D43              //
1085+ 2D43              // fill        a n c --
1086+ 2D43              // If n > 0, fills n locations starting from address a with the value c.
1087+ 2D43                              New_Def FILL, "FILL", is_code, is_normal
1087+ 2D43             >
1087+ 2D43             >Dict_Ptr        defl    $
1087+ 2D43             >
1087+ 2D43             >//              ______________________________________________________________________
1087+ 2D43             >//              Heap part
1087+ 2D43             >
1087+ 2D43             >
1087+ 2D43             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F6             >
1087+ E7F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F6             >Latest_Definition defl  Heap_Ptr
1087+ E7F6             >
1087+ E7F6             >                // dummy db directives used to calculate length of namec
1087+ E7F6 46 49 4C 4C >                db      "FILL"
1087+ E7FA             >len_NFA         defl    $ - temp_NFA
1087+ E7FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F6             >
1087+ E7F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7F7 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FB             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FA CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FB             >
1087+ E7FB EC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E7FD             >Prev_Ptr        defl    Heap_Ptr
1087+ E7FD             >
1087+ E7FD             >mirror_Ptr      defl    $
1087+ E7FD             >
1087+ E7FD 45 2D       >                dw      Dict_Ptr + 2        // xt
1087+ E7FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E7FF             >
1087+ E7FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E7FF             >
1087+ E7FF             >//              ______________________________________________________________________
1087+ E7FF             >//              Dictionary part
1087+ E7FF             >
1087+ E7FF             >                org     Dict_Ptr
1087+ 2D43             >
1087+ 2D43 FD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 2D45             >
1087+ 2D45             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 2D45 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 2D45 ~           >
1087+ 2D45 ~           >
1087+ 2D45             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 2D45             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 2D45             >
1087+ 2D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 2D45 D9                           exx
1089+ 2D46 D1                           pop     de                  // de has character
1090+ 2D47 C1                           pop     bc                  // bc has counter
1091+ 2D48 E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 2D49              Fill_Loop:
1093+ 2D49 78                               ld      a, b
1094+ 2D4A B1                               or      c
1095+ 2D4B 28 05                        jr      z, Fill_While_End
1096+ 2D4D 73                               ld      (hl), e
1097+ 2D4E 0B                               dec     bc
1098+ 2D4F 23                               inc     hl
1099+ 2D50 18 F7                        jr      Fill_Loop
1100+ 2D52              Fill_While_End:
1101+ 2D52 D9                           exx
1102+ 2D53                              next
1102+ 2D53 DD E9       >                jp      (ix)
1103+ 2D55
1104+ 2D55              //  ______________________________________________________________________
1105+ 2D55              //
1106+ 2D55              // erase        a n --
1107+ 2D55              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 2D55                              Colon_Def ERASE, "ERASE", is_normal
1108+ 2D55             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 2D55             >
1108+ 2D55             >Dict_Ptr        defl    $
1108+ 2D55             >
1108+ 2D55             >//              ______________________________________________________________________
1108+ 2D55             >//              Heap part
1108+ 2D55             >
1108+ 2D55             >
1108+ 2D55             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E7FF             >
1108+ E7FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E7FF             >Latest_Definition defl  Heap_Ptr
1108+ E7FF             >
1108+ E7FF             >                // dummy db directives used to calculate length of namec
1108+ E7FF 45 52 41 53 >                db      "ERASE"
1108+ E803 45          >
1108+ E804             >len_NFA         defl    $ - temp_NFA
1108+ E804             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E7FF             >
1108+ E7FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E800 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E804 45          >
1108+ E805             >                org     $-1                 // alter last byte of Name just above to set
1108+ E804 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E805             >
1108+ E805 F6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E807             >Prev_Ptr        defl    Heap_Ptr
1108+ E807             >
1108+ E807             >mirror_Ptr      defl    $
1108+ E807             >
1108+ E807 57 2D       >                dw      Dict_Ptr + 2        // xt
1108+ E809             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E809             >
1108+ E809             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E809             >
1108+ E809             >//              ______________________________________________________________________
1108+ E809             >//              Dictionary part
1108+ E809             >
1108+ E809             >                org     Dict_Ptr
1108+ 2D55             >
1108+ 2D55 07 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 2D57             >
1108+ 2D57             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 2D57 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 2D5A             >
1108+ 2D5A             >
1108+ 2D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 2D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 2D5A             >
1108+ 2D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 2D5A 4C 27 45 2D                  dw      ZERO, FILL              // 0 fill
1110+ 2D5E 0D 25                        dw      EXIT                    // ;
1111+ 2D60
1112+ 2D60              //  ______________________________________________________________________
1113+ 2D60              //
1114+ 2D60              // blank        a n --
1115+ 2D60              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 2D60                              Colon_Def BLANK, "BLANK", is_normal
1116+ 2D60             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 2D60             >
1116+ 2D60             >Dict_Ptr        defl    $
1116+ 2D60             >
1116+ 2D60             >//              ______________________________________________________________________
1116+ 2D60             >//              Heap part
1116+ 2D60             >
1116+ 2D60             >
1116+ 2D60             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E809             >
1116+ E809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E809             >Latest_Definition defl  Heap_Ptr
1116+ E809             >
1116+ E809             >                // dummy db directives used to calculate length of namec
1116+ E809 42 4C 41 4E >                db      "BLANK"
1116+ E80D 4B          >
1116+ E80E             >len_NFA         defl    $ - temp_NFA
1116+ E80E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E809             >
1116+ E809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80A 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E80E 4B          >
1116+ E80F             >                org     $-1                 // alter last byte of Name just above to set
1116+ E80E CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E80F             >
1116+ E80F FF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E811             >Prev_Ptr        defl    Heap_Ptr
1116+ E811             >
1116+ E811             >mirror_Ptr      defl    $
1116+ E811             >
1116+ E811 62 2D       >                dw      Dict_Ptr + 2        // xt
1116+ E813             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E813             >
1116+ E813             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E813             >
1116+ E813             >//              ______________________________________________________________________
1116+ E813             >//              Dictionary part
1116+ E813             >
1116+ E813             >                org     Dict_Ptr
1116+ 2D60             >
1116+ 2D60 11 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 2D62             >
1116+ 2D62             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 2D62 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 2D65             >
1116+ 2D65             >
1116+ 2D65             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 2D65             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 2D65             >
1116+ 2D65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 2D65 6F 27 45 2D                  dw      BL, FILL                // bl fill
1118+ 2D69 0D 25                        dw      EXIT                    // ;
1119+ 2D6B
1120+ 2D6B              //  ______________________________________________________________________
1121+ 2D6B              //
1122+ 2D6B              // hold         c --
1123+ 2D6B              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 2D6B                              Colon_Def HOLD, "HOLD", is_normal
1124+ 2D6B             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 2D6B             >
1124+ 2D6B             >Dict_Ptr        defl    $
1124+ 2D6B             >
1124+ 2D6B             >//              ______________________________________________________________________
1124+ 2D6B             >//              Heap part
1124+ 2D6B             >
1124+ 2D6B             >
1124+ 2D6B             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E813             >
1124+ E813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E813             >Latest_Definition defl  Heap_Ptr
1124+ E813             >
1124+ E813             >                // dummy db directives used to calculate length of namec
1124+ E813 48 4F 4C 44 >                db      "HOLD"
1124+ E817             >len_NFA         defl    $ - temp_NFA
1124+ E817             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E813             >
1124+ E813 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E814 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E818             >                org     $-1                 // alter last byte of Name just above to set
1124+ E817 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E818             >
1124+ E818 09 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81A             >Prev_Ptr        defl    Heap_Ptr
1124+ E81A             >
1124+ E81A             >mirror_Ptr      defl    $
1124+ E81A             >
1124+ E81A 6D 2D       >                dw      Dict_Ptr + 2        // xt
1124+ E81C             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81C             >
1124+ E81C             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81C             >
1124+ E81C             >//              ______________________________________________________________________
1124+ E81C             >//              Dictionary part
1124+ E81C             >
1124+ E81C             >                org     Dict_Ptr
1124+ 2D6B             >
1124+ 2D6B 1A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 2D6D             >
1124+ 2D6D             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 2D6D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 2D70             >
1124+ 2D70             >
1124+ 2D70             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 2D70             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 2D70             >
1124+ 2D70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 2D70 68 27                        dw      NEG_ONE                 // -1
1126+ 2D72 3B 28 3D 26                  dw      HLD, PLUSSTORE          // hld +!
1127+ 2D76 3B 28 55 26                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 2D7A 73 26
1128+ 2D7C 0D 25                        dw      EXIT                    // ;
1129+ 2D7E
1130+ 2D7E              //  ______________________________________________________________________
1131+ 2D7E              //
1132+ 2D7E              // pad         -- a
1133+ 2D7E              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 2D7E                              Colon_Def PAD, "PAD", is_normal
1134+ 2D7E             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 2D7E             >
1134+ 2D7E             >Dict_Ptr        defl    $
1134+ 2D7E             >
1134+ 2D7E             >//              ______________________________________________________________________
1134+ 2D7E             >//              Heap part
1134+ 2D7E             >
1134+ 2D7E             >
1134+ 2D7E             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81C             >
1134+ E81C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81C             >Latest_Definition defl  Heap_Ptr
1134+ E81C             >
1134+ E81C             >                // dummy db directives used to calculate length of namec
1134+ E81C 50 41 44    >                db      "PAD"
1134+ E81F             >len_NFA         defl    $ - temp_NFA
1134+ E81F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81C             >
1134+ E81C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E81D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E820             >                org     $-1                 // alter last byte of Name just above to set
1134+ E81F C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E820             >
1134+ E820 13 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E822             >Prev_Ptr        defl    Heap_Ptr
1134+ E822             >
1134+ E822             >mirror_Ptr      defl    $
1134+ E822             >
1134+ E822 80 2D       >                dw      Dict_Ptr + 2        // xt
1134+ E824             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E824             >
1134+ E824             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E824             >
1134+ E824             >//              ______________________________________________________________________
1134+ E824             >//              Dictionary part
1134+ E824             >
1134+ E824             >                org     Dict_Ptr
1134+ 2D7E             >
1134+ 2D7E 22 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 2D80             >
1134+ 2D80             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 2D80 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 2D83             >
1134+ 2D83             >
1134+ 2D83             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 2D83             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 2D83             >
1134+ 2D83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 2D83 71 28                        dw      HERE                    // here
1136+ 2D85 3D 20 44 00                  dw      LIT, 68                 // 68
1137+ 2D89 5F 25                        dw      PLUS                    // +
1138+ 2D8B 0D 25                        dw      EXIT                    // ;
1139+ 2D8D
1140+ 2D8D              //  ______________________________________________________________________
1141+ 2D8D              //
1142+ 2D8D              // word         c -- a
1143+ 2D8D              // reads characters from input streams until it encouners a c delimiter.
1144+ 2D8D              // Stores that packet so it starts from HERE
1145+ 2D8D              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 2D8D              // Other occurrences of c are ignored.
1147+ 2D8D              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 2D8D              // Otherwise text is taken from the disk-block given by BLK.
1149+ 2D8D              // "in" variable is incremented of the number of character read.
1150+ 2D8D              // The number of characters read is given by ENCLOSE.
1151+ 2D8D                              Colon_Def WORD, "WORD", is_normal
1151+ 2D8D             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 2D8D             >
1151+ 2D8D             >Dict_Ptr        defl    $
1151+ 2D8D             >
1151+ 2D8D             >//              ______________________________________________________________________
1151+ 2D8D             >//              Heap part
1151+ 2D8D             >
1151+ 2D8D             >
1151+ 2D8D             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E824             >
1151+ E824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E824             >Latest_Definition defl  Heap_Ptr
1151+ E824             >
1151+ E824             >                // dummy db directives used to calculate length of namec
1151+ E824 57 4F 52 44 >                db      "WORD"
1151+ E828             >len_NFA         defl    $ - temp_NFA
1151+ E828             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E824             >
1151+ E824 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E825 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E829             >                org     $-1                 // alter last byte of Name just above to set
1151+ E828 C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E829             >
1151+ E829 1C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82B             >Prev_Ptr        defl    Heap_Ptr
1151+ E82B             >
1151+ E82B             >mirror_Ptr      defl    $
1151+ E82B             >
1151+ E82B 8F 2D       >                dw      Dict_Ptr + 2        // xt
1151+ E82D             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E82D             >
1151+ E82D             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E82D             >
1151+ E82D             >//              ______________________________________________________________________
1151+ E82D             >//              Dictionary part
1151+ E82D             >
1151+ E82D             >                org     Dict_Ptr
1151+ 2D8D             >
1151+ 2D8D 2B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 2D8F             >
1151+ 2D8F             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 2D8F CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 2D92             >
1151+ 2D92             >
1151+ 2D92             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 2D92             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 2D92             >
1151+ 2D92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 2D92 ED 27 55 26                  dw      BLK, FETCH              // blk @
1153+ 2D96                                                              // if
1154+ 2D96 8F 20                        dw      ZBRANCH
1155+ 2D98 0C 00                        dw      Word_Else - $
1156+ 2D9A ED 27 55 26                  dw          BLK, FETCH          //      blk @
1157+ 2D9E 60 37                        dw          BLOCK               //      block ( forward )
1158+ 2DA0                                                              // else
1159+ 2DA0 82 20                        dw      BRANCH
1160+ 2DA2 06 00                        dw      Word_Endif - $
1161+ 2DA4              Word_Else:
1162+ 2DA4 B1 27 55 26                  dw         TIB, FETCH           //      tib @
1163+ 2DA8              Word_Endif:                                     // endif
1164+ 2DA8 F3 27 55 26                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 2DAC 5F 25
1165+ 2DAE DD 25 C3 21                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 2DB2 71 28 3D 20                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 2DB6 22 00 62 2D
1167+ 2DBA F3 27 3D 26                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 2DBE C0 25 B0 28                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 2DC2 17 25
1169+ 2DC4 2D 25 71 28                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 2DC8 73 26
1170+ 2DCA 5F 25                        dw      PLUS                    // +
1171+ 2DCC 71 28 78 25                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 2DD0 22 25
1172+ 2DD2 4E 24                        dw      CMOVE                   // cmove
1173+ 2DD4 71 28                        dw      HERE                    // here
1174+ 2DD6 0D 25                        dw      EXIT                    // ;
1175+ 2DD8
1176+ 2DD8              //  ______________________________________________________________________
1177+ 2DD8              //
1178+ 2DD8              // (.")         --
1179+ 2DD8              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 2DD8                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 2DD8             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 2DD8             >
1180+ 2DD8             >Dict_Ptr        defl    $
1180+ 2DD8             >
1180+ 2DD8             >//              ______________________________________________________________________
1180+ 2DD8             >//              Heap part
1180+ 2DD8             >
1180+ 2DD8             >
1180+ 2DD8             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E82D             >
1180+ E82D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E82D             >Latest_Definition defl  Heap_Ptr
1180+ E82D             >
1180+ E82D             >                // dummy db directives used to calculate length of namec
1180+ E82D 28 2E 22 29 >                db      '(.")'
1180+ E831             >len_NFA         defl    $ - temp_NFA
1180+ E831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E82D             >
1180+ E82D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E82E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E832             >                org     $-1                 // alter last byte of Name just above to set
1180+ E831 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E832             >
1180+ E832 24 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E834             >Prev_Ptr        defl    Heap_Ptr
1180+ E834             >
1180+ E834             >mirror_Ptr      defl    $
1180+ E834             >
1180+ E834 DA 2D       >                dw      Dict_Ptr + 2        // xt
1180+ E836             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E836             >
1180+ E836             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E836             >
1180+ E836             >//              ______________________________________________________________________
1180+ E836             >//              Dictionary part
1180+ E836             >
1180+ E836             >                org     Dict_Ptr
1180+ 2DD8             >
1180+ 2DD8 34 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 2DDA             >
1180+ 2DDA             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 2DDA CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 2DDD             >
1180+ 2DDD             >
1180+ 2DDD             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 2DDD             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 2DDD             >
1180+ 2DDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 2DDD 2D 25 E9 2B                  dw      R_OP, COUNT             // r count
1182+ 2DE1 E4 25 78 25                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 2DE5 22 25 5F 25                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 2DE9 17 25
1184+ 2DEB 3D 2C                        dw      TYPE                    // type
1185+ 2DED 0D 25                        dw      EXIT                    // ;
1186+ 2DEF
1187+ 2DEF              //  ______________________________________________________________________
1188+ 2DEF              //
1189+ 2DEF              // char         -- c
1190+ 2DEF              // get first character from next input word
1191+ 2DEF                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 2DEF             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 2DEF             >
1191+ 2DEF             >Dict_Ptr        defl    $
1191+ 2DEF             >
1191+ 2DEF             >//              ______________________________________________________________________
1191+ 2DEF             >//              Heap part
1191+ 2DEF             >
1191+ 2DEF             >
1191+ 2DEF             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E836             >
1191+ E836             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E836             >Latest_Definition defl  Heap_Ptr
1191+ E836             >
1191+ E836             >                // dummy db directives used to calculate length of namec
1191+ E836 43 48 41 52 >                db      "CHAR"
1191+ E83A             >len_NFA         defl    $ - temp_NFA
1191+ E83A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E836             >
1191+ E836 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E837 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83B             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83A D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83B             >
1191+ E83B 2D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83D             >Prev_Ptr        defl    Heap_Ptr
1191+ E83D             >
1191+ E83D             >mirror_Ptr      defl    $
1191+ E83D             >
1191+ E83D F1 2D       >                dw      Dict_Ptr + 2        // xt
1191+ E83F             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E83F             >
1191+ E83F             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E83F             >
1191+ E83F             >//              ______________________________________________________________________
1191+ E83F             >//              Dictionary part
1191+ E83F             >
1191+ E83F             >                org     Dict_Ptr
1191+ 2DEF             >
1191+ 2DEF 3D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 2DF1             >
1191+ 2DF1             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 2DF1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 2DF4             >
1191+ 2DF4             >
1191+ 2DF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 2DF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 2DF4             >
1191+ 2DF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 2DF4 6F 27 8F 2D                  dw      BL, WORD                // bl word
1193+ 2DF8 78 25 6A 26                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 2DFC 0D 25                        dw      EXIT                    // ;
1195+ 2DFE
1196+ 2DFE              //  ______________________________________________________________________
1197+ 2DFE              //
1198+ 2DFE              // ,"           --
1199+ 2DFE              // compiles a string terminated by " as a counted string from next input stream
1200+ 2DFE                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 2DFE             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 2DFE             >
1200+ 2DFE             >Dict_Ptr        defl    $
1200+ 2DFE             >
1200+ 2DFE             >//              ______________________________________________________________________
1200+ 2DFE             >//              Heap part
1200+ 2DFE             >
1200+ 2DFE             >
1200+ 2DFE             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E83F             >
1200+ E83F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E83F             >Latest_Definition defl  Heap_Ptr
1200+ E83F             >
1200+ E83F             >                // dummy db directives used to calculate length of namec
1200+ E83F 2C 22       >                db      ',"'
1200+ E841             >len_NFA         defl    $ - temp_NFA
1200+ E841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E83F             >
1200+ E83F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E840 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E842             >                org     $-1                 // alter last byte of Name just above to set
1200+ E841 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E842             >
1200+ E842 36 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E844             >Prev_Ptr        defl    Heap_Ptr
1200+ E844             >
1200+ E844             >mirror_Ptr      defl    $
1200+ E844             >
1200+ E844 00 2E       >                dw      Dict_Ptr + 2        // xt
1200+ E846             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E846             >
1200+ E846             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E846             >
1200+ E846             >//              ______________________________________________________________________
1200+ E846             >//              Dictionary part
1200+ E846             >
1200+ E846             >                org     Dict_Ptr
1200+ 2DFE             >
1200+ 2DFE 44 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 2E00             >
1200+ 2E00             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 2E00 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 2E03             >
1200+ 2E03             >
1200+ 2E03             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 2E03             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 2E03             >
1200+ 2E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 2E03 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 2E07 8F 2D                        dw      WORD                    // word
1203+ 2E09 6A 26 78 25                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 2E0D 7C 28                        dw      ALLOT                   // allot
1205+ 2E0F 4C 27 96 28                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 2E13 0D 25                        dw      EXIT
1207+ 2E15
1208+ 2E15              //  ______________________________________________________________________
1209+ 2E15              //
1210+ 2E15              // .c           c --
1211+ 2E15              // intermediate general purpose string builder, used by ." and .(
1212+ 2E15                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 2E15             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 2E15             >
1212+ 2E15             >Dict_Ptr        defl    $
1212+ 2E15             >
1212+ 2E15             >//              ______________________________________________________________________
1212+ 2E15             >//              Heap part
1212+ 2E15             >
1212+ 2E15             >
1212+ 2E15             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E846             >
1212+ E846             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E846             >Latest_Definition defl  Heap_Ptr
1212+ E846             >
1212+ E846             >                // dummy db directives used to calculate length of namec
1212+ E846 2E 43       >                db      ".C"
1212+ E848             >len_NFA         defl    $ - temp_NFA
1212+ E848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E846             >
1212+ E846 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E847 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E849             >                org     $-1                 // alter last byte of Name just above to set
1212+ E848 C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E849             >
1212+ E849 3F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84B             >Prev_Ptr        defl    Heap_Ptr
1212+ E84B             >
1212+ E84B             >mirror_Ptr      defl    $
1212+ E84B             >
1212+ E84B 17 2E       >                dw      Dict_Ptr + 2        // xt
1212+ E84D             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E84D             >
1212+ E84D             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E84D             >
1212+ E84D             >//              ______________________________________________________________________
1212+ E84D             >//              Dictionary part
1212+ E84D             >
1212+ E84D             >                org     Dict_Ptr
1212+ 2E15             >
1212+ 2E15 4B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 2E17             >
1212+ 2E17             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 2E17 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 2E1A             >
1212+ 2E1A             >
1212+ 2E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 2E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 2E1A             >
1212+ 2E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 2E1A 17 28 55 26                  dw      STATE, FETCH            // state @
1214+ 2E1E                                                              // if
1215+ 2E1E 8F 20                        dw      ZBRANCH
1216+ 2E20 12 00                        dw      Dot_C_Else - $
1217+ 2E22 1D 2B DA 2D                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 2E26 8F 2D 6A 26                  dw          WORD, CFETCH        //      word c@
1219+ 2E2A 78 25 7C 28                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 2E2E                                                              // else
1221+ 2E2E 82 20                        dw      BRANCH
1222+ 2E30 08 00                        dw      Dot_C_Endif - $
1223+ 2E32              Dot_C_Else:
1224+ 2E32 8F 2D E9 2B                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 2E36 3D 2C
1225+ 2E38              Dot_C_Endif:                                    // endif
1226+ 2E38 0D 25                        dw      EXIT                    ;
1227+ 2E3A
1228+ 2E3A              //  ______________________________________________________________________
1229+ 2E3A              //
1230+ 2E3A              // ."           c --
1231+ 2E3A                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 2E3A             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 2E3A             >
1231+ 2E3A             >Dict_Ptr        defl    $
1231+ 2E3A             >
1231+ 2E3A             >//              ______________________________________________________________________
1231+ 2E3A             >//              Heap part
1231+ 2E3A             >
1231+ 2E3A             >
1231+ 2E3A             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E84D             >
1231+ E84D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E84D             >Latest_Definition defl  Heap_Ptr
1231+ E84D             >
1231+ E84D             >                // dummy db directives used to calculate length of namec
1231+ E84D 2E 22       >                db      '."'
1231+ E84F             >len_NFA         defl    $ - temp_NFA
1231+ E84F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E84D             >
1231+ E84D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E84E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E850             >                org     $-1                 // alter last byte of Name just above to set
1231+ E84F A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E850             >
1231+ E850 46 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E852             >Prev_Ptr        defl    Heap_Ptr
1231+ E852             >
1231+ E852             >mirror_Ptr      defl    $
1231+ E852             >
1231+ E852 3C 2E       >                dw      Dict_Ptr + 2        // xt
1231+ E854             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E854             >
1231+ E854             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E854             >
1231+ E854             >//              ______________________________________________________________________
1231+ E854             >//              Dictionary part
1231+ E854             >
1231+ E854             >                org     Dict_Ptr
1231+ 2E3A             >
1231+ 2E3A 52 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 2E3C             >
1231+ 2E3C             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 2E3C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 2E3F             >
1231+ 2E3F             >
1231+ 2E3F             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 2E3F             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 2E3F             >
1231+ 2E3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 2E3F 3D 20 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 2E43 17 2E                        dw      DOT_C                   // [compile] .c
1234+ 2E45 0D 25                        dw      EXIT                    // ; immediate
1235+ 2E47
1236+ 2E47              //  ______________________________________________________________________
1237+ 2E47              //
1238+ 2E47              // .(           c --
1239+ 2E47                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 2E47             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 2E47             >
1239+ 2E47             >Dict_Ptr        defl    $
1239+ 2E47             >
1239+ 2E47             >//              ______________________________________________________________________
1239+ 2E47             >//              Heap part
1239+ 2E47             >
1239+ 2E47             >
1239+ 2E47             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E854             >
1239+ E854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E854             >Latest_Definition defl  Heap_Ptr
1239+ E854             >
1239+ E854             >                // dummy db directives used to calculate length of namec
1239+ E854 2E 28       >                db      ".("
1239+ E856             >len_NFA         defl    $ - temp_NFA
1239+ E856             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E854             >
1239+ E854 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E855 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E857             >                org     $-1                 // alter last byte of Name just above to set
1239+ E856 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E857             >
1239+ E857 4D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E859             >Prev_Ptr        defl    Heap_Ptr
1239+ E859             >
1239+ E859             >mirror_Ptr      defl    $
1239+ E859             >
1239+ E859 49 2E       >                dw      Dict_Ptr + 2        // xt
1239+ E85B             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85B             >
1239+ E85B             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85B             >
1239+ E85B             >//              ______________________________________________________________________
1239+ E85B             >//              Dictionary part
1239+ E85B             >
1239+ E85B             >                org     Dict_Ptr
1239+ 2E47             >
1239+ 2E47 59 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 2E49             >
1239+ 2E49             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 2E49 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 2E4C             >
1239+ 2E4C             >
1239+ 2E4C             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 2E4C             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 2E4C             >
1239+ 2E4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 2E4C 3D 20 29 00                  dw      LIT, ")"                // [char] )
1241+ 2E50 17 2E                        dw      DOT_C                   // [compile] .c
1242+ 2E52 0D 25                        dw      EXIT                    // ; immediate
1243+ 2E54
1244+ 2E54              //  ______________________________________________________________________
1245+ 2E54              //
1246+ 2E54              // (sgn)        a -- a f
1247+ 2E54              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 2E54              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 2E54              // called by NUMBER and (EXP)
1250+ 2E54                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 2E54             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 2E54             >
1250+ 2E54             >Dict_Ptr        defl    $
1250+ 2E54             >
1250+ 2E54             >//              ______________________________________________________________________
1250+ 2E54             >//              Heap part
1250+ 2E54             >
1250+ 2E54             >
1250+ 2E54             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85B             >
1250+ E85B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85B             >Latest_Definition defl  Heap_Ptr
1250+ E85B             >
1250+ E85B             >                // dummy db directives used to calculate length of namec
1250+ E85B 28 53 47 4E >                db      "(SGN)"
1250+ E85F 29          >
1250+ E860             >len_NFA         defl    $ - temp_NFA
1250+ E860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85B             >
1250+ E85B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E860 29          >
1250+ E861             >                org     $-1                 // alter last byte of Name just above to set
1250+ E860 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E861             >
1250+ E861 54 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E863             >Prev_Ptr        defl    Heap_Ptr
1250+ E863             >
1250+ E863             >mirror_Ptr      defl    $
1250+ E863             >
1250+ E863 56 2E       >                dw      Dict_Ptr + 2        // xt
1250+ E865             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E865             >
1250+ E865             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E865             >
1250+ E865             >//              ______________________________________________________________________
1250+ E865             >//              Dictionary part
1250+ E865             >
1250+ E865             >                org     Dict_Ptr
1250+ 2E54             >
1250+ 2E54 63 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 2E56             >
1250+ 2E56             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 2E56 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 2E59             >
1250+ 2E59             >
1250+ 2E59             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 2E59             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 2E59             >
1250+ 2E59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 2E59 E4 25 78 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 2E5D 6A 26
1252+ 2E5F E4 25 3D 20                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 2E63 2D 00 BC 28
1253+ 2E67                                                              // if
1254+ 2E67 8F 20                        dw      ZBRANCH
1255+ 2E69 12 00                        dw      CSgn_Else_0 - $
1256+ 2E6B C9 25                        dw          DROP                //      drop
1257+ 2E6D 78 25                        dw          ONE_PLUS            //      1+
1258+ 2E6F 53 27 23 28                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 2E73 3D 26
1259+ 2E75 53 27                        dw          ONE                 //      1
1260+ 2E77                                                              // else
1261+ 2E77 82 20                        dw      BRANCH
1262+ 2E79 16 00                        dw      CSgn_Endif_0 - $
1263+ 2E7B              CSgn_Else_0:
1264+ 2E7B 3D 20 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 2E7F BC 28
1265+ 2E81                                                              //      if
1266+ 2E81 8F 20                        dw          ZBRANCH
1267+ 2E83 0A 00                        dw          CSgn_Endif_1 - $
1268+ 2E85 78 25                        dw              ONE_PLUS        //          1+
1269+ 2E87 53 27 23 28                  dw              ONE, DPL        //          1 dpl
1270+ 2E8B 3D 26                        dw              PLUSSTORE       //          +!
1271+ 2E8D              CSgn_Endif_1                                    //      endif
1272+ 2E8D 4C 27                        dw          ZERO                //      0
1273+ 2E8F              CSgn_Endif_0:                                   // endif
1274+ 2E8F 0D 25                        dw      EXIT
1275+ 2E91
1276+ 2E91              //  ______________________________________________________________________
1277+ 2E91              //
1278+ 2E91              // (number)     d a -- d1 a1
1279+ 2E91              // using the current BASE parse characters stored in address a
1280+ 2E91              // accumulating a double precision integer d
1281+ 2E91              // the process stops at the first not-convertible character
1282+ 2E91              // A double-number is kept in CPU registers as HLDE.
1283+ 2E91              // On the stack a double number is treated as two single numbers
1284+ 2E91              // where HL is on the top of the stack and DE is the second from top,
1285+ 2E91              // so in the stack memory it appears as LHED.
1286+ 2E91              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 2E91                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 2E91             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 2E91             >
1287+ 2E91             >Dict_Ptr        defl    $
1287+ 2E91             >
1287+ 2E91             >//              ______________________________________________________________________
1287+ 2E91             >//              Heap part
1287+ 2E91             >
1287+ 2E91             >
1287+ 2E91             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E865             >
1287+ E865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E865             >Latest_Definition defl  Heap_Ptr
1287+ E865             >
1287+ E865             >                // dummy db directives used to calculate length of namec
1287+ E865 28 4E 55 4D >                db      "(NUMBER)"
1287+ E869 42 45 52 29 >
1287+ E86D             >len_NFA         defl    $ - temp_NFA
1287+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E865             >
1287+ E865 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E866 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86A 42 45 52 29 >
1287+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1287+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E86E             >
1287+ E86E 5B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E870             >Prev_Ptr        defl    Heap_Ptr
1287+ E870             >
1287+ E870             >mirror_Ptr      defl    $
1287+ E870             >
1287+ E870 93 2E       >                dw      Dict_Ptr + 2        // xt
1287+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E872             >
1287+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E872             >
1287+ E872             >//              ______________________________________________________________________
1287+ E872             >//              Dictionary part
1287+ E872             >
1287+ E872             >                org     Dict_Ptr
1287+ 2E91             >
1287+ 2E91 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 2E93             >
1287+ 2E93             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 2E93 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 2E96             >
1287+ 2E96             >
1287+ 2E96             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 2E96             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 2E96             >
1287+ 2E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 2E96                                                              // begin
1289+ 2E96              CNumber_Begin:
1290+ 2E96 78 25                        dw          ONE_PLUS            //      1+
1291+ 2E98 E4 25 17 25                  dw          DUP, TO_R           //      dup >r
1292+ 2E9C 6A 26                        dw          CFETCH              //      @
1293+ 2E9E 1D 28 55 26                  dw          BASE, FETCH         //      base @
1294+ 2EA2 E7 20                        dw          DIGIT               //      digit
1295+ 2EA4                                                              // while
1296+ 2EA4 8F 20                        dw      ZBRANCH
1297+ 2EA6 2C 00                        dw      CNumber_While_end - $
1298+ 2EA8 DD 25                        dw          SWAP                //      swap
1299+ 2EAA 1D 28 55 26                  dw          BASE, FETCH         //      base @
1300+ 2EAE 72 24                        dw          UM_MUL              //      um*
1301+ 2EB0 C9 25 EB 25                  dw          DROP, ROT           //      drop rot
1302+ 2EB4 1D 28 55 26                  dw          BASE, FETCH         //      base @
1303+ 2EB8 72 24                        dw          UM_MUL              //      um*
1304+ 2EBA 69 25                        dw          DPLUS               //      d+
1305+ 2EBC 23 28 55 26                  dw          DPL, FETCH          //      dpl @
1306+ 2EC0 78 25                        dw          ONE_PLUS            //      1+
1307+ 2EC2                                                              //      if
1308+ 2EC2 8F 20                        dw          ZBRANCH
1309+ 2EC4 08 00                        dw          CNumber_Endif - $
1310+ 2EC6 53 27 23 28                  dw              ONE, DPL        //          1 dpl
1311+ 2ECA 3D 26                        dw              PLUSSTORE       //          +!
1312+ 2ECC              CNumber_Endif:                                  //      endif
1313+ 2ECC 22 25                        dw             R_TO             //      r>  ( balance rp )
1314+ 2ECE 82 20                        dw      BRANCH
1315+ 2ED0 C6 FF                        dw      CNumber_Begin - $
1316+ 2ED2              CNumber_While_end:                              // repeat
1317+ 2ED2 22 25                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 2ED4 0D 25                        dw      EXIT                    // ;
1319+ 2ED6
1320+ 2ED6              //  ______________________________________________________________________
1321+ 2ED6              //
1322+ 2ED6              // (prefix)
1323+ 2ED6                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 2ED6             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 2ED6             >
1323+ 2ED6             >Dict_Ptr        defl    $
1323+ 2ED6             >
1323+ 2ED6             >//              ______________________________________________________________________
1323+ 2ED6             >//              Heap part
1323+ 2ED6             >
1323+ 2ED6             >
1323+ 2ED6             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E872             >
1323+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E872             >Latest_Definition defl  Heap_Ptr
1323+ E872             >
1323+ E872             >                // dummy db directives used to calculate length of namec
1323+ E872 28 50 52 45 >                db      "(PREFIX)"
1323+ E876 46 49 58 29 >
1323+ E87A             >len_NFA         defl    $ - temp_NFA
1323+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E872             >
1323+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E873 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E877 46 49 58 29 >
1323+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87B             >
1323+ E87B 65 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E87D             >Prev_Ptr        defl    Heap_Ptr
1323+ E87D             >
1323+ E87D             >mirror_Ptr      defl    $
1323+ E87D             >
1323+ E87D D8 2E       >                dw      Dict_Ptr + 2        // xt
1323+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E87F             >
1323+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E87F             >
1323+ E87F             >//              ______________________________________________________________________
1323+ E87F             >//              Dictionary part
1323+ E87F             >
1323+ E87F             >                org     Dict_Ptr
1323+ 2ED6             >
1323+ 2ED6 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 2ED8             >
1323+ 2ED8             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 2ED8 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 2EDB             >
1323+ 2EDB             >
1323+ 2EDB             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 2EDB             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 2EDB             >
1323+ 2EDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 2EDB E4 25 78 25                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 2EDF 6A 26
1325+ 2EE1 E4 25 17 25                  dw      DUP, TO_R               // dup >r
1326+ 2EE5 3D 20 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 2EE9 BC 28
1327+ 2EEB                                                              // if
1328+ 2EEB 8F 20                        dw      ZBRANCH
1329+ 2EED 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 2EEF 78 25                        dw          ONE_PLUS            //      1+
1331+ 2EF1 3D 20 10 00                  dw          LIT, 16
1332+ 2EF5 1D 28 5F 26                  dw          BASE, STORE         //      16 base !
1333+ 2EF9              CPrefix_Endif_0:                                // endif
1334+ 2EF9 22 25                        dw      R_TO                    // r>
1335+ 2EFB 3D 20 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 2EFF BC 28
1336+ 2F01                                                              // if
1337+ 2F01 8F 20                        dw      ZBRANCH
1338+ 2F03 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 2F05 78 25                        dw          ONE_PLUS            //      1+
1340+ 2F07 5A 27                        dw          TWO
1341+ 2F09 1D 28 5F 26                  dw          BASE, STORE         //      2 base !
1342+ 2F0D              CPrefix_Endif_1:                                // endif
1343+ 2F0D 0D 25                        dw      EXIT
1344+ 2F0F
1345+ 2F0F              //  ______________________________________________________________________
1346+ 2F0F
1347+ 2F0F                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 2F0F             >
1347+ 2F0F             >Dict_Ptr        defl    $
1347+ 2F0F             >
1347+ 2F0F             >//              ______________________________________________________________________
1347+ 2F0F             >//              Heap part
1347+ 2F0F             >
1347+ 2F0F             >
1347+ 2F0F             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E87F             >
1347+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E87F             >Latest_Definition defl  Heap_Ptr
1347+ E87F             >
1347+ E87F             >                // dummy db directives used to calculate length of namec
1347+ E87F 50 44 4F 4D >                db      "PDOM"
1347+ E883             >len_NFA         defl    $ - temp_NFA
1347+ E883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E87F             >
1347+ E87F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E880 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E884             >                org     $-1                 // alter last byte of Name just above to set
1347+ E883 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E884             >
1347+ E884 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E886             >Prev_Ptr        defl    Heap_Ptr
1347+ E886             >
1347+ E886             >mirror_Ptr      defl    $
1347+ E886             >
1347+ E886 11 2F       >                dw      Dict_Ptr + 2        // xt
1347+ E888             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E888             >
1347+ E888             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E888             >
1347+ E888             >//              ______________________________________________________________________
1347+ E888             >//              Dictionary part
1347+ E888             >
1347+ E888             >                org     Dict_Ptr
1347+ 2F0F             >
1347+ 2F0F 86 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 2F11             >
1347+ 2F11             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 2F11 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 2F14             >
1347+ 2F14             >
1347+ 2F14             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 2F14             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 2F14             >
1347+ 2F14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 2F14 2C 2F 2D 3A                  db ',/-:'
1349+ 2F18
1350+ 2F18                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 2F18             >
1350+ 2F18             >Dict_Ptr        defl    $
1350+ 2F18             >
1350+ 2F18             >//              ______________________________________________________________________
1350+ 2F18             >//              Heap part
1350+ 2F18             >
1350+ 2F18             >
1350+ 2F18             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E888             >
1350+ E888             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E888             >Latest_Definition defl  Heap_Ptr
1350+ E888             >
1350+ E888             >                // dummy db directives used to calculate length of namec
1350+ E888 50 43 44 4D >                db      "PCDM"
1350+ E88C             >len_NFA         defl    $ - temp_NFA
1350+ E88C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E888             >
1350+ E888 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E889 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E88D             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88C CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E88D             >
1350+ E88D 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E88F             >Prev_Ptr        defl    Heap_Ptr
1350+ E88F             >
1350+ E88F             >mirror_Ptr      defl    $
1350+ E88F             >
1350+ E88F 1A 2F       >                dw      Dict_Ptr + 2        // xt
1350+ E891             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E891             >
1350+ E891             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E891             >
1350+ E891             >//              ______________________________________________________________________
1350+ E891             >//              Dictionary part
1350+ E891             >
1350+ E891             >                org     Dict_Ptr
1350+ 2F18             >
1350+ 2F18 8F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 2F1A             >
1350+ 2F1A             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 2F1A CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 2F1D             >
1350+ 2F1D             >
1350+ 2F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 2F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 2F1D             >
1350+ 2F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 2F1D 2E 2E 2E 2E                  db '....'
1352+ 2F21
1353+ 2F21              //  ______________________________________________________________________
1354+ 2F21              //
1355+ 2F21              // number       a -- d
1356+ 2F21                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 2F21             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 2F21             >
1356+ 2F21             >Dict_Ptr        defl    $
1356+ 2F21             >
1356+ 2F21             >//              ______________________________________________________________________
1356+ 2F21             >//              Heap part
1356+ 2F21             >
1356+ 2F21             >
1356+ 2F21             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E891             >
1356+ E891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E891             >Latest_Definition defl  Heap_Ptr
1356+ E891             >
1356+ E891             >                // dummy db directives used to calculate length of namec
1356+ E891 4E 55 4D 42 >                db      "NUMBER"
1356+ E895 45 52       >
1356+ E897             >len_NFA         defl    $ - temp_NFA
1356+ E897             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E891             >
1356+ E891 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E892 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E896 45 52       >
1356+ E898             >                org     $-1                 // alter last byte of Name just above to set
1356+ E897 D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E898             >
1356+ E898 88 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89A             >Prev_Ptr        defl    Heap_Ptr
1356+ E89A             >
1356+ E89A             >mirror_Ptr      defl    $
1356+ E89A             >
1356+ E89A 23 2F       >                dw      Dict_Ptr + 2        // xt
1356+ E89C             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89C             >
1356+ E89C             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89C             >
1356+ E89C             >//              ______________________________________________________________________
1356+ E89C             >//              Dictionary part
1356+ E89C             >
1356+ E89C             >                org     Dict_Ptr
1356+ 2F21             >
1356+ 2F21 9A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 2F23             >
1356+ 2F23             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 2F23 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 2F26             >
1356+ 2F26             >
1356+ 2F26             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 2F26             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 2F26             >
1356+ 2F26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 2F26 4C 27 4C 27                  dw      ZERO, ZERO              // 0 0
1358+ 2F2A EB 25                        dw      ROT                     // rot
1359+ 2F2C 56 2E 17 25                  dw      CSGN, TO_R              // (sgn) >r
1360+ 2F30 1D 28 55 26                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 2F34 17 25
1361+ 2F36 D8 2E                        dw      CPREFIX                 // (prefix)   // ***
1362+ 2F38 68 27 23 28                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 2F3C 5F 26
1363+ 2F3E 93 2E                        dw      CNUMBER                 // (number)
1364+ 2F40              Number_Begin:                                   // begin
1365+ 2F40 E4 25 6A 26                  dw        DUP, CFETCH             // dup c@
1366+ 2F44 17 25                        dw        TO_R                    // >r
1367+ 2F46 1A 2F 11 2F                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 2F4A 3D 20 04 00
1368+ 2F4E 22 25                        dw        R_TO                    // r>
1369+ 2F50 F5 21                        dw        C_MAP                   // (map)
1370+ 2F52 4C 27 DD 25                  dw        ZERO, SWAP              // 0 swap
1371+ 2F56 3D 20 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 2F5A BC 28
1372+ 2F5C
1373+ 2F5C 8F 20                        dw        ZBRANCH                 // if
1374+ 2F5E 0A 00                        dw        Number_Endif_1 - $
1375+ 2F60 4C 27 23 28                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 2F64 5F 26
1376+ 2F66 78 25                        dw          ONE_PLUS                //      1+
1377+ 2F68              Number_Endif_1:                                   // endif
1378+ 2F68
1379+ 2F68 8F 20                        dw      ZBRANCH                // while
1380+ 2F6A 08 00                        dw      Number_While_end - $
1381+ 2F6C 93 2E                        dw        CNUMBER                 // (number)
1382+ 2F6E 82 20                        dw      BRANCH
1383+ 2F70 D0 FF                        dw      Number_Begin - $
1384+ 2F72              Number_While_end:                               // repeat
1385+ 2F72
1386+ 2F72 6A 26 6F 27                  dw      CFETCH, BL              // c@ bl
1387+ 2F76 B0 28 4C 27                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 2F7A AD 2A
1388+ 2F7C 22 25 1D 28                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 2F80 5F 26
1389+ 2F82 22 25                        dw      R_TO                    // r>
1390+ 2F84                                                              // if
1391+ 2F84 8F 20                        dw      ZBRANCH
1392+ 2F86 04 00                        dw      Number_Endif_2 - $
1393+ 2F88 AD 25                        dw          DMINUS              //      dminus
1394+ 2F8A              Number_Endif_2:                                 // endif
1395+ 2F8A 0D 25                        dw      EXIT                    // ;
1396+ 2F8C
1397+ 2F8C              //  ______________________________________________________________________
1398+ 2F8C              //
1399+ 2F8C              // twofind      a -- d
1400+ 2F8C                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 2F8C             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 2F8C             >
1400+ 2F8C             >Dict_Ptr        defl    $
1400+ 2F8C             >
1400+ 2F8C             >//              ______________________________________________________________________
1400+ 2F8C             >//              Heap part
1400+ 2F8C             >
1400+ 2F8C             >
1400+ 2F8C             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89C             >
1400+ E89C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89C             >Latest_Definition defl  Heap_Ptr
1400+ E89C             >
1400+ E89C             >                // dummy db directives used to calculate length of namec
1400+ E89C 32 46 49 4E >                db      "2FIND"
1400+ E8A0 44          >
1400+ E8A1             >len_NFA         defl    $ - temp_NFA
1400+ E8A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89C             >
1400+ E89C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E89D 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A1 44          >
1400+ E8A2             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A1 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A2             >
1400+ E8A2 91 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A4             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A4             >
1400+ E8A4             >mirror_Ptr      defl    $
1400+ E8A4             >
1400+ E8A4 8E 2F       >                dw      Dict_Ptr + 2        // xt
1400+ E8A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A6             >
1400+ E8A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A6             >
1400+ E8A6             >//              ______________________________________________________________________
1400+ E8A6             >//              Dictionary part
1400+ E8A6             >
1400+ E8A6             >                org     Dict_Ptr
1400+ 2F8C             >
1400+ 2F8C A4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 2F8E             >
1400+ 2F8E             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 2F8E CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 2F91             >
1400+ 2F91             >
1400+ 2F91             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 2F91             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 2F91             >
1400+ 2F91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 2F91 17 25 2D 25                  dw      TO_R, R_OP              // >r r@
1402+ 2F95 0B 28 55 26                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 2F99 55 26
1403+ 2F9B 55 21                        dw      C_FIND                  // (find)
1404+ 2F9D 1B 29                        dw      QDUP                    // ?dup
1405+ 2F9F 32 25                        dw      ZEQUAL                  // 0=
1406+ 2FA1                                                              // if
1407+ 2FA1 8F 20                        dw      ZBRANCH
1408+ 2FA3 24 00                        dw      LFind_Endif - $
1409+ 2FA5 2D 25                        dw          R_OP                //      r@
1410+ 2FA7                              // dw          LATEST               //      latest
1411+ 2FA7 11 28 55 26                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 2FAB 55 26
1412+ 2FAD 55 21                        dw          C_FIND              //      (find)
1413+ 2FAF
1414+ 2FAF 1B 29                            dw      QDUP                    // ?dup
1415+ 2FB1 32 25                            dw      ZEQUAL                  // 0=
1416+ 2FB3                                                                  // if
1417+ 2FB3 8F 20                            dw      ZBRANCH
1418+ 2FB5 12 00                            dw      LFind_Endif2 - $
1419+ 2FB7 2D 25                            dw          R_OP                //      r@
1420+ 2FB9 3D 20 08 32                      dw          LIT, FORTH, TO_BODY
1420+ 2FBD 2C 2A
1421+ 2FBF 8E 25 8E 25                      dw          CELL_PLUS, CELL_PLUS
1422+ 2FC3 55 26                            dw          FETCH
1423+ 2FC5 55 21                            dw          C_FIND              //      (find)
1424+ 2FC7              LFind_Endif2:                                    // endif
1425+ 2FC7
1426+ 2FC7
1427+ 2FC7              LFind_Endif:                                    // endif
1428+ 2FC7 22 25 C9 25                  dw      R_TO, DROP              // r> drop
1429+ 2FCB 0D 25                        dw      EXIT                    // ;
1430+ 2FCD
1431+ 2FCD              //  ______________________________________________________________________
1432+ 2FCD              //
1433+ 2FCD              // -find        a -- d
1434+ 2FCD                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 2FCD             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 2FCD             >
1434+ 2FCD             >Dict_Ptr        defl    $
1434+ 2FCD             >
1434+ 2FCD             >//              ______________________________________________________________________
1434+ 2FCD             >//              Heap part
1434+ 2FCD             >
1434+ 2FCD             >
1434+ 2FCD             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A6             >
1434+ E8A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A6             >Latest_Definition defl  Heap_Ptr
1434+ E8A6             >
1434+ E8A6             >                // dummy db directives used to calculate length of namec
1434+ E8A6 2D 46 49 4E >                db      "-FIND"
1434+ E8AA 44          >
1434+ E8AB             >len_NFA         defl    $ - temp_NFA
1434+ E8AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A6             >
1434+ E8A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8A7 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AB 44          >
1434+ E8AC             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AB C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AC             >
1434+ E8AC 9C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8AE             >Prev_Ptr        defl    Heap_Ptr
1434+ E8AE             >
1434+ E8AE             >mirror_Ptr      defl    $
1434+ E8AE             >
1434+ E8AE CF 2F       >                dw      Dict_Ptr + 2        // xt
1434+ E8B0             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B0             >
1434+ E8B0             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B0             >
1434+ E8B0             >//              ______________________________________________________________________
1434+ E8B0             >//              Dictionary part
1434+ E8B0             >
1434+ E8B0             >                org     Dict_Ptr
1434+ 2FCD             >
1434+ 2FCD AE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 2FCF             >
1434+ 2FCF             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 2FCF CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 2FD2             >
1434+ 2FD2             >
1434+ 2FD2             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 2FD2             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 2FD2             >
1434+ 2FD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 2FD2 6F 27 8F 2D                  dw      BL, WORD                // bl word
1436+ 2FD6 8E 2F                        dw      TWOFIND                 // 2find
1437+ 2FD8 0D 25                        dw      EXIT                    // ;
1438+ 2FDA
1439+ 2FDA              //  ______________________________________________________________________
1440+ 2FDA              //
1441+ 2FDA              // (abort)      --
1442+ 2FDA                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 2FDA             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 2FDA             >
1442+ 2FDA             >Dict_Ptr        defl    $
1442+ 2FDA             >
1442+ 2FDA             >//              ______________________________________________________________________
1442+ 2FDA             >//              Heap part
1442+ 2FDA             >
1442+ 2FDA             >
1442+ 2FDA             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B0             >
1442+ E8B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B0             >Latest_Definition defl  Heap_Ptr
1442+ E8B0             >
1442+ E8B0             >                // dummy db directives used to calculate length of namec
1442+ E8B0 28 41 42 4F >                db      "(ABORT)"
1442+ E8B4 52 54 29    >
1442+ E8B7             >len_NFA         defl    $ - temp_NFA
1442+ E8B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B0             >
1442+ E8B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B1 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B5 52 54 29    >
1442+ E8B8             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8B7 A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8B8             >
1442+ E8B8 A6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BA             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BA             >
1442+ E8BA             >mirror_Ptr      defl    $
1442+ E8BA             >
1442+ E8BA DC 2F       >                dw      Dict_Ptr + 2        // xt
1442+ E8BC             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BC             >
1442+ E8BC             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BC             >
1442+ E8BC             >//              ______________________________________________________________________
1442+ E8BC             >//              Dictionary part
1442+ E8BC             >
1442+ E8BC             >                org     Dict_Ptr
1442+ 2FDA             >
1442+ 2FDA BA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 2FDC             >
1442+ 2FDC             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 2FDC CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 2FDF             >
1442+ 2FDF             >
1442+ 2FDF             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 2FDF             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 2FDF             >
1442+ 2FDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 2FDF 6F 32                        dw      ABORT                   // abort
1444+ 2FE1 0D 25                        dw      EXIT                    // ;
1445+ 2FE3
1446+ 2FE3              //  ______________________________________________________________________
1447+ 2FE3              //
1448+ 2FE3              // error        n --
1449+ 2FE3              // raise an error
1450+ 2FE3              // if WARNING is 0, prints "MSG#n".
1451+ 2FE3              // if WARNING is 1, prints line n of screen 4.
1452+ 2FE3              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 2FE3              // value can be negative or beyond block 4.
1454+ 2FE3                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 2FE3             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 2FE3             >
1454+ 2FE3             >Dict_Ptr        defl    $
1454+ 2FE3             >
1454+ 2FE3             >//              ______________________________________________________________________
1454+ 2FE3             >//              Heap part
1454+ 2FE3             >
1454+ 2FE3             >
1454+ 2FE3             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BC             >
1454+ E8BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BC             >Latest_Definition defl  Heap_Ptr
1454+ E8BC             >
1454+ E8BC             >                // dummy db directives used to calculate length of namec
1454+ E8BC 45 52 52 4F >                db      "ERROR"
1454+ E8C0 52          >
1454+ E8C1             >len_NFA         defl    $ - temp_NFA
1454+ E8C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BC             >
1454+ E8BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8BD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C1 52          >
1454+ E8C2             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C1 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C2             >
1454+ E8C2 B0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C4             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C4             >
1454+ E8C4             >mirror_Ptr      defl    $
1454+ E8C4             >
1454+ E8C4 E5 2F       >                dw      Dict_Ptr + 2        // xt
1454+ E8C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C6             >
1454+ E8C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C6             >
1454+ E8C6             >//              ______________________________________________________________________
1454+ E8C6             >//              Dictionary part
1454+ E8C6             >
1454+ E8C6             >                org     Dict_Ptr
1454+ 2FE3             >
1454+ 2FE3 C4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 2FE5             >
1454+ 2FE5             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 2FE5 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 2FE8             >
1454+ 2FE8             >
1454+ 2FE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 2FE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 2FE8             >
1454+ 2FE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 2FE8 BD 27 55 26                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 2FEC 44 25
1456+ 2FEE                                                              // if
1457+ 2FEE 8F 20                        dw      ZBRANCH
1458+ 2FF0 04 00                        dw      Error_Endif_1 - $
1459+ 2FF2 DC 2F                        dw          CABORT              //      (abort)
1460+ 2FF4              Error_Endif_1:                                  // endif
1461+ 2FF4 71 28 E9 2B                  dw      HERE, COUNT, TYPE       // here count type
1461+ 2FF8 3D 2C
1462+ 2FFA DA 2D                        dw      C_DOT_QUOTE             // .( ? )
1463+ 2FFC 02 3F 20                     db      2, "? "
1464+ 2FFF A1 35                        dw      MESSAGE                 // message  ( forward )
1465+ 3001 A5 27 55 26                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 3005 FD 24
1466+ 3007 ED 27 55 26                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 300B 1B 29
1467+ 300D                                                              // if
1468+ 300D 8F 20                        dw      ZBRANCH
1469+ 300F 08 00                        dw      Error_Endif_2 - $
1470+ 3011 F3 27 55 26                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 3015 DD 25
1471+ 3017              Error_Endif_2:                                  // endif
1472+ 3017 33 32                        dw      QUIT                    // quit ( forward )
1473+ 3019 0D 25                        dw      EXIT                    // ;
1474+ 301B              //  ______________________________________________________________________
1475+ 301B              //
1476+ 301B              // id.          nfa --
1477+ 301B                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 301B             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 301B             >
1477+ 301B             >Dict_Ptr        defl    $
1477+ 301B             >
1477+ 301B             >//              ______________________________________________________________________
1477+ 301B             >//              Heap part
1477+ 301B             >
1477+ 301B             >
1477+ 301B             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C6             >
1477+ E8C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C6             >Latest_Definition defl  Heap_Ptr
1477+ E8C6             >
1477+ E8C6             >                // dummy db directives used to calculate length of namec
1477+ E8C6 49 44 2E    >                db      "ID."
1477+ E8C9             >len_NFA         defl    $ - temp_NFA
1477+ E8C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C6             >
1477+ E8C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8C7 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CA             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8C9 AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CA             >
1477+ E8CA BC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CC             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CC             >
1477+ E8CC             >mirror_Ptr      defl    $
1477+ E8CC             >
1477+ E8CC 1D 30       >                dw      Dict_Ptr + 2        // xt
1477+ E8CE             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8CE             >
1477+ E8CE             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8CE             >
1477+ E8CE             >//              ______________________________________________________________________
1477+ E8CE             >//              Dictionary part
1477+ E8CE             >
1477+ E8CE             >                org     Dict_Ptr
1477+ 301B             >
1477+ 301B CC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 301D             >
1477+ 301D             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 301D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 3020             >
1477+ 3020             >
1477+ 3020             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 3020             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 3020             >
1477+ 3020             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 3020 D1 29                        dw      QTOHEAP
1479+ 3022 E4 25 53 27                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 3026 4D 29
1480+ 3028 78 25                        dw      ONE_PLUS                // 1+
1481+ 302A C0 25 B0 28                  dw      OVER, SUBTRACT          // over -
1482+ 302E E4 25 17 25                  dw      DUP, TO_R               // >r
1483+ 3032 80 2D DD 25                  dw      PAD, SWAP               // pad swap
1484+ 3036 4E 24                        dw      CMOVE                   // cmove
1485+ 3038 80 2D 78 25                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 303C 22 25 7F 25                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 3040 3D 2C 42 29                  dw      TYPE, SPACE             // type
1488+ 3044 0D 25                        dw      EXIT                    // ;
1489+ 3046
1490+ 3046              //  ______________________________________________________________________
1491+ 3046              //
1492+ 3046              // code         -- cccc
1493+ 3046                              Colon_Def CODE,  "CODE", is_normal
1493+ 3046             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 3046             >
1493+ 3046             >Dict_Ptr        defl    $
1493+ 3046             >
1493+ 3046             >//              ______________________________________________________________________
1493+ 3046             >//              Heap part
1493+ 3046             >
1493+ 3046             >
1493+ 3046             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8CE             >
1493+ E8CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8CE             >Latest_Definition defl  Heap_Ptr
1493+ E8CE             >
1493+ E8CE             >                // dummy db directives used to calculate length of namec
1493+ E8CE 43 4F 44 45 >                db      "CODE"
1493+ E8D2             >len_NFA         defl    $ - temp_NFA
1493+ E8D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8CE             >
1493+ E8CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8CF 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D3             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D2 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D3             >
1493+ E8D3 C6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D5             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D5             >
1493+ E8D5             >mirror_Ptr      defl    $
1493+ E8D5             >
1493+ E8D5 48 30       >                dw      Dict_Ptr + 2        // xt
1493+ E8D7             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8D7             >
1493+ E8D7             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8D7             >
1493+ E8D7             >//              ______________________________________________________________________
1493+ E8D7             >//              Dictionary part
1493+ E8D7             >
1493+ E8D7             >                org     Dict_Ptr
1493+ 3046             >
1493+ 3046 D5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 3048             >
1493+ 3048             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 3048 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 304B             >
1493+ 304B             >
1493+ 304B             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 304B             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 304B             >
1493+ 304B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 304B CF 2F                        dw      LFIND                   // -find
1495+ 304D                                                              // if
1496+ 304D 8F 20                        dw      ZBRANCH
1497+ 304F 10 00                        dw      Code_Endif - $
1498+ 3051 C9 25                        dw          DROP                //      drop
1499+ 3053 37 2A 1D 30                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 3057 3D 20 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 305B A1 35
1501+ 305D 42 29                        dw          SPACE               //      space
1502+ 305F              Code_Endif:                                     // endif
1503+ 305F 71 28                        dw      HERE                    // here
1504+ 3061                                                              // ( ---- here begins NFA ---- )
1505+ 3061 E4 25 6A 26                  dw      DUP, CFETCH             // dup c@
1506+ 3065 B7 27 55 26                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 3069 F5 28
1507+ 306B 78 25                        dw      ONE_PLUS                // 1+
1508+ 306D E4 25 7C 28                  dw      DUP, ALLOT              // dup allot
1509+ 3071 8E 25 8E 25                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 3075 17 25                        dw      TO_R                    // >r
1511+ 3077 E4 25                        dw      DUP                     // dup
1512+ 3079 3D 20                        dw      LIT
1513+ 307B A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 307D 4C 26                        dw      TOGGLE                  // toggle
1515+ 307F 71 28 7F 25                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 3083 3D 20 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 3087 4C 26
1517+ 3089                                                              // ( ---- here is LFA ---- )
1518+ 3089 11 28 55 26                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 308D 55 26
1519+ 308F 87 28                        dw      COMMA
1520+ 3091 E4 25 8E 25                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 3095 87 28
1521+ 3097 E2 29                        dw      HP_FETCH                // hp@
1522+ 3099 11 28 55 26                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 309D 5F 26
1523+ 309F E2 29 B3 29                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 30A3 2D 25 4E 24                  dw      R_OP, CMOVE
1525+ 30A7 2D 25 9F 25                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 30AB 7C 28
1526+ 30AD 22 25 E1 27                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 30B1 3D 26
1527+ 30B3 E2 29 92 25                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 30B7 87 28                        dw      COMMA
1529+ 30B9 4C 27 F4 29                  dw      ZERO, SKIP_HP_PAGE
1530+ 30BD                                                              // ( ---- here is LFA ---- )
1531+ 30BD 0D 25                        dw      EXIT                    // ;
1532+ 30BF
1533+ 30BF              //  ______________________________________________________________________
1534+ 30BF              //
1535+ 30BF              // create       -- cccc     ( compile time )
1536+ 30BF              //              -- a        ( run time )
1537+ 30BF                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 30BF             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 30BF             >
1537+ 30BF             >Dict_Ptr        defl    $
1537+ 30BF             >
1537+ 30BF             >//              ______________________________________________________________________
1537+ 30BF             >//              Heap part
1537+ 30BF             >
1537+ 30BF             >
1537+ 30BF             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8D7             >
1537+ E8D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8D7             >Latest_Definition defl  Heap_Ptr
1537+ E8D7             >
1537+ E8D7             >                // dummy db directives used to calculate length of namec
1537+ E8D7 43 52 45 41 >                db      "CREATE"
1537+ E8DB 54 45       >
1537+ E8DD             >len_NFA         defl    $ - temp_NFA
1537+ E8DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8D7             >
1537+ E8D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8D8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DC 54 45       >
1537+ E8DE             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8DD C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8DE             >
1537+ E8DE CE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E0             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E0             >
1537+ E8E0             >mirror_Ptr      defl    $
1537+ E8E0             >
1537+ E8E0 C1 30       >                dw      Dict_Ptr + 2        // xt
1537+ E8E2             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E2             >
1537+ E8E2             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E2             >
1537+ E8E2             >//              ______________________________________________________________________
1537+ E8E2             >//              Dictionary part
1537+ E8E2             >
1537+ E8E2             >                org     Dict_Ptr
1537+ 30BF             >
1537+ 30BF E0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 30C1             >
1537+ 30C1             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 30C1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 30C4             >
1537+ 30C4             >
1537+ 30C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 30C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 30C4             >
1537+ 30C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 30C4 48 30 59 2B                  dw      CODE, SMUDGE            // code smudge
1539+ 30C8 3D 20 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 30CC 96 28
1540+ 30CE 3D 20 33 27                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 30D2 87 28
1541+ 30D4 95 2B                        dw      C_SEMICOLON_CODE
1542+ 30D6                              // this routine is called from the call coded in CFA
1543+ 30D6              Create_Ptr:
1544+ 30D6
1545+ 30D6
1546+ 30D6
1547+ 30D6                              next
1547+ 30D6 DD E9       >                jp      (ix)
1548+ 30D8
1549+ 30D8              //  ______________________________________________________________________
1550+ 30D8              //
1551+ 30D8              // [compile]    -- cccc     ( compile time )
1552+ 30D8                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 30D8             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 30D8             >
1552+ 30D8             >Dict_Ptr        defl    $
1552+ 30D8             >
1552+ 30D8             >//              ______________________________________________________________________
1552+ 30D8             >//              Heap part
1552+ 30D8             >
1552+ 30D8             >
1552+ 30D8             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E2             >
1552+ E8E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E2             >Latest_Definition defl  Heap_Ptr
1552+ E8E2             >
1552+ E8E2             >                // dummy db directives used to calculate length of namec
1552+ E8E2 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E6 50 49 4C 45 >
1552+ E8EA 5D          >
1552+ E8EB             >len_NFA         defl    $ - temp_NFA
1552+ E8EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E2             >
1552+ E8E2 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E3 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8E7 50 49 4C 45 >
1552+ E8EB 5D          >
1552+ E8EC             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8EB DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EC             >
1552+ E8EC D7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8EE             >Prev_Ptr        defl    Heap_Ptr
1552+ E8EE             >
1552+ E8EE             >mirror_Ptr      defl    $
1552+ E8EE             >
1552+ E8EE DA 30       >                dw      Dict_Ptr + 2        // xt
1552+ E8F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F0             >
1552+ E8F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F0             >
1552+ E8F0             >//              ______________________________________________________________________
1552+ E8F0             >//              Dictionary part
1552+ E8F0             >
1552+ E8F0             >                org     Dict_Ptr
1552+ 30D8             >
1552+ 30D8 EE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 30DA             >
1552+ 30DA             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 30DA CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 30DD             >
1552+ 30DD             >
1552+ 30DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 30DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 30DD             >
1552+ 30DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 30DD CF 2F                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 30DF 32 25                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 30E1 4C 27 AD 2A                  dw      ZERO, QERROR            // 0 ?error
1556+ 30E5 C9 25                        dw      DROP                    // drop       (  cfa  )
1557+ 30E7 87 28                        dw      COMMA                   // ,
1558+ 30E9 0D 25                        dw      EXIT                    // ; immediate
1559+ 30EB
1560+ 30EB              //  ______________________________________________________________________
1561+ 30EB              //
1562+ 30EB              // literal      n --      ( compile time )
1563+ 30EB                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 30EB             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 30EB             >
1563+ 30EB             >Dict_Ptr        defl    $
1563+ 30EB             >
1563+ 30EB             >//              ______________________________________________________________________
1563+ 30EB             >//              Heap part
1563+ 30EB             >
1563+ 30EB             >
1563+ 30EB             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F0             >
1563+ E8F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F0             >Latest_Definition defl  Heap_Ptr
1563+ E8F0             >
1563+ E8F0             >                // dummy db directives used to calculate length of namec
1563+ E8F0 4C 49 54 45 >                db      "LITERAL"
1563+ E8F4 52 41 4C    >
1563+ E8F7             >len_NFA         defl    $ - temp_NFA
1563+ E8F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F0             >
1563+ E8F0 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F1 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F5 52 41 4C    >
1563+ E8F8             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8F7 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8F8             >
1563+ E8F8 E2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FA             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FA             >
1563+ E8FA             >mirror_Ptr      defl    $
1563+ E8FA             >
1563+ E8FA ED 30       >                dw      Dict_Ptr + 2        // xt
1563+ E8FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FC             >
1563+ E8FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FC             >
1563+ E8FC             >//              ______________________________________________________________________
1563+ E8FC             >//              Dictionary part
1563+ E8FC             >
1563+ E8FC             >                org     Dict_Ptr
1563+ 30EB             >
1563+ 30EB FA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 30ED             >
1563+ 30ED             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 30ED CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 30F0             >
1563+ 30F0             >
1563+ 30F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 30F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 30F0             >
1563+ 30F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 30F0 17 28 55 26                  dw      STATE, FETCH            // state @
1565+ 30F4                                                              // if
1566+ 30F4 8F 20                        dw      ZBRANCH
1567+ 30F6 08 00                        dw      Literal_Endif - $
1568+ 30F8 1D 2B 3D 20                  dw          COMPILE, LIT        //      compile lit
1569+ 30FC 87 28                        dw          COMMA               //      ,
1570+ 30FE              Literal_Endif:                                  // endif
1571+ 30FE 0D 25                        dw      EXIT                    // ; immediate
1572+ 3100
1573+ 3100              //  ______________________________________________________________________
1574+ 3100              //
1575+ 3100              // dliteral     n --      ( compile time )
1576+ 3100                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 3100             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 3100             >
1576+ 3100             >Dict_Ptr        defl    $
1576+ 3100             >
1576+ 3100             >//              ______________________________________________________________________
1576+ 3100             >//              Heap part
1576+ 3100             >
1576+ 3100             >
1576+ 3100             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FC             >
1576+ E8FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FC             >Latest_Definition defl  Heap_Ptr
1576+ E8FC             >
1576+ E8FC             >                // dummy db directives used to calculate length of namec
1576+ E8FC 44 4C 49 54 >                db      "DLITERAL"
1576+ E900 45 52 41 4C >
1576+ E904             >len_NFA         defl    $ - temp_NFA
1576+ E904             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FC             >
1576+ E8FC C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E8FD 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E901 45 52 41 4C >
1576+ E905             >                org     $-1                 // alter last byte of Name just above to set
1576+ E904 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E905             >
1576+ E905 F0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E907             >Prev_Ptr        defl    Heap_Ptr
1576+ E907             >
1576+ E907             >mirror_Ptr      defl    $
1576+ E907             >
1576+ E907 02 31       >                dw      Dict_Ptr + 2        // xt
1576+ E909             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E909             >
1576+ E909             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E909             >
1576+ E909             >//              ______________________________________________________________________
1576+ E909             >//              Dictionary part
1576+ E909             >
1576+ E909             >                org     Dict_Ptr
1576+ 3100             >
1576+ 3100 07 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 3102             >
1576+ 3102             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 3102 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 3105             >
1576+ 3105             >
1576+ 3105             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 3105             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 3105             >
1576+ 3105             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 3105 17 28 55 26                  dw      STATE, FETCH            // state @
1578+ 3109                                                              // if
1579+ 3109 8F 20                        dw      ZBRANCH
1580+ 310B 08 00                        dw      DLiteral_Endif - $
1581+ 310D DD 25                        dw          SWAP                //      swap
1582+ 310F ED 30 ED 30                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 3113              DLiteral_Endif:                                 // endif
1584+ 3113 0D 25                        dw      EXIT                    // ; immediate
1585+ 3115
1586+ 3115              //  ______________________________________________________________________
1587+ 3115              //
1588+ 3115              // [char]       n --      ( compile time )
1589+ 3115              // inside colon definition, gets first character from next input word
1590+ 3115              // and compiles it as literal.
1591+ 3115                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 3115             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 3115             >
1591+ 3115             >Dict_Ptr        defl    $
1591+ 3115             >
1591+ 3115             >//              ______________________________________________________________________
1591+ 3115             >//              Heap part
1591+ 3115             >
1591+ 3115             >
1591+ 3115             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E909             >
1591+ E909             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E909             >Latest_Definition defl  Heap_Ptr
1591+ E909             >
1591+ E909             >                // dummy db directives used to calculate length of namec
1591+ E909 5B 43 48 41 >                db      "[CHAR]"
1591+ E90D 52 5D       >
1591+ E90F             >len_NFA         defl    $ - temp_NFA
1591+ E90F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E909             >
1591+ E909 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90A 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E90E 52 5D       >
1591+ E910             >                org     $-1                 // alter last byte of Name just above to set
1591+ E90F DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E910             >
1591+ E910 FC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E912             >Prev_Ptr        defl    Heap_Ptr
1591+ E912             >
1591+ E912             >mirror_Ptr      defl    $
1591+ E912             >
1591+ E912 17 31       >                dw      Dict_Ptr + 2        // xt
1591+ E914             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E914             >
1591+ E914             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E914             >
1591+ E914             >//              ______________________________________________________________________
1591+ E914             >//              Dictionary part
1591+ E914             >
1591+ E914             >                org     Dict_Ptr
1591+ 3115             >
1591+ 3115 12 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 3117             >
1591+ 3117             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 3117 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 311A             >
1591+ 311A             >
1591+ 311A             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 311A             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 311A             >
1591+ 311A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 311A F1 2D ED 30                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 311E 0D 25                        dw      EXIT                    // ; immediate
1594+ 3120
1595+ 3120              //  ______________________________________________________________________
1596+ 3120              //
1597+ 3120              // 0x00         n --      ( compile time )
1598+ 3120                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 3120             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 3120             >
1598+ 3120             >Dict_Ptr        defl    $
1598+ 3120             >
1598+ 3120             >//              ______________________________________________________________________
1598+ 3120             >//              Heap part
1598+ 3120             >
1598+ 3120             >
1598+ 3120             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E914             >
1598+ E914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E914             >Latest_Definition defl  Heap_Ptr
1598+ E914             >
1598+ E914             >                // dummy db directives used to calculate length of namec
1598+ E914 00          >                db      $00
1598+ E915             >len_NFA         defl    $ - temp_NFA
1598+ E915             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E914             >
1598+ E914 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E915 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E916             >                org     $-1                 // alter last byte of Name just above to set
1598+ E915 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E916             >
1598+ E916 09 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E918             >Prev_Ptr        defl    Heap_Ptr
1598+ E918             >
1598+ E918             >mirror_Ptr      defl    $
1598+ E918             >
1598+ E918 22 31       >                dw      Dict_Ptr + 2        // xt
1598+ E91A             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91A             >
1598+ E91A             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91A             >
1598+ E91A             >//              ______________________________________________________________________
1598+ E91A             >//              Dictionary part
1598+ E91A             >
1598+ E91A             >                org     Dict_Ptr
1598+ 3120             >
1598+ 3120 18 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 3122             >
1598+ 3122             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 3122 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 3125             >
1598+ 3125             >
1598+ 3125             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 3125             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 3125             >
1598+ 3125             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 3125 ED 27 55 26                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 3129 53 27
1600+ 312B EA 28                        dw      GREATER                 // > if
1601+ 312D                                                              // if
1602+ 312D 8F 20                        dw      ZBRANCH
1603+ 312F 28 00                        dw      Nul_Else_1 - $
1604+ 3131 53 27 ED 27                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 3135 3D 26
1605+ 3137 4C 27 F3 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 313B 5F 26
1606+ 313D ED 27 55 26                  dw          BLK, FETCH          //      blk @
1607+ 3141 84 27                        dw          BSCR                //      b/scr
1608+ 3143 7F 25                        dw          ONE_SUBTRACT        //      1 -
1609+ 3145 CD 24                        dw          AND_OP              //      and  ( this is tricky )
1610+ 3147 32 25                        dw          ZEQUAL              //      0=
1611+ 3149                                                              //      if
1612+ 3149 8F 20                        dw          ZBRANCH
1613+ 314B 08 00                        dw          Nul_Endif_2 - $
1614+ 314D D5 2A                        dw              QEXEC           //          ?exec
1615+ 314F 22 25 C9 25                  dw              R_TO, DROP      //          r> drop
1616+ 3153              Nul_Endif_2:                                    //      endif
1617+ 3153 82 20                        dw      BRANCH
1618+ 3155 06 00                        dw      Nul_Endif_1 - $
1619+ 3157              Nul_Else_1:                                     // else
1620+ 3157 22 25 C9 25                  dw          R_TO, DROP          //      r> drop
1621+ 315B              Nul_Endif_1:                                    // endif
1622+ 315B 0D 25                        dw      EXIT                    // ;
1623+ 315D
1624+ 315D              //  ______________________________________________________________________
1625+ 315D              //
1626+ 315D              // ?stack       --
1627+ 315D              // Raise error #1 if stack is empty and you pop it
1628+ 315D              // Raise error #7 if stack is full.
1629+ 315D              // This means SP must always stay between HERE and FFFF
1630+ 315D              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 315D              // for Next 8K MMU paging this is $DOE8
1632+ 315D                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 315D             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 315D             >
1632+ 315D             >Dict_Ptr        defl    $
1632+ 315D             >
1632+ 315D             >//              ______________________________________________________________________
1632+ 315D             >//              Heap part
1632+ 315D             >
1632+ 315D             >
1632+ 315D             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91A             >
1632+ E91A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91A             >Latest_Definition defl  Heap_Ptr
1632+ E91A             >
1632+ E91A             >                // dummy db directives used to calculate length of namec
1632+ E91A 3F 53 54 41 >                db      "?STACK"
1632+ E91E 43 4B       >
1632+ E920             >len_NFA         defl    $ - temp_NFA
1632+ E920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91A             >
1632+ E91A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91B 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E91F 43 4B       >
1632+ E921             >                org     $-1                 // alter last byte of Name just above to set
1632+ E920 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E921             >
1632+ E921 14 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E923             >Prev_Ptr        defl    Heap_Ptr
1632+ E923             >
1632+ E923             >mirror_Ptr      defl    $
1632+ E923             >
1632+ E923 5F 31       >                dw      Dict_Ptr + 2        // xt
1632+ E925             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E925             >
1632+ E925             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E925             >
1632+ E925             >//              ______________________________________________________________________
1632+ E925             >//              Dictionary part
1632+ E925             >
1632+ E925             >                org     Dict_Ptr
1632+ 315D             >
1632+ 315D 23 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 315F             >
1632+ 315F             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 315F CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 3162             >
1632+ 3162             >
1632+ 3162             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 3162             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 3162             >
1632+ 3162             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 3162 F4 24                        dw      SPFETCH                 // sp@
1634+ 3164 A5 27 55 26                  dw      S0, FETCH               // s0 @
1635+ 3168 DD 25 C7 28                  dw      SWAP, ULESS             // swap u<
1636+ 316C 53 27 AD 2A                  dw      ONE, QERROR             // 1 ?error
1637+ 3170 71 28                        dw      HERE                    // here
1638+ 3172 A5 27 55 26                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 3176 D5 28
1639+ 3178                                                              // if
1640+ 3178 8F 20                        dw      ZBRANCH
1641+ 317A 14 00                        dw      QStack_Endif - $
1642+ 317C F4 24                        dw          SPFETCH             //      sp@
1643+ 317E 71 28 3D 20                  dw          HERE, LIT, 128      //      here 128
1643+ 3182 80 00
1644+ 3184 5F 25 C7 28                  dw          PLUS, ULESS         //      plus u<
1645+ 3188 3D 20 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 318C AD 2A
1646+ 318E              QStack_Endif:                                   // endif
1647+ 318E 0D 25                        dw      EXIT                    // ;
1648+ 3190
1649+ 3190
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L1.asm
 123  3190                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
   1+ 3190              //  ______________________________________________________________________
   2+ 3190              //
   3+ 3190              //  L2.asm
   4+ 3190              //
   5+ 3190              //  Level-2 3dos
   6+ 3190              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 3190              //  ______________________________________________________________________
   8+ 3190
   9+ 3190
  10+ 3190              //  ______________________________________________________________________
  11+ 3190              //
  12+ 3190              // interpret    --
  13+ 3190              // This is the text interpreter.
  14+ 3190              // It executes or compiles, depending on STATE, the text coming from
  15+ 3190              // current input stream.
  16+ 3190              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 3190              // the word is interpreted as numeric and converted, using current BASE,
  18+ 3190              // leaving on top of stack a single or double precision number, depending
  19+ 3190              // on the presence of a decimal point.
  20+ 3190              // If the number conversion fails, the terminal is notified with ? followed
  21+ 3190              // by the offending word.
  22+ 3190                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 3190             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 3190             >
  22+ 3190             >Dict_Ptr        defl    $
  22+ 3190             >
  22+ 3190             >//              ______________________________________________________________________
  22+ 3190             >//              Heap part
  22+ 3190             >
  22+ 3190             >
  22+ 3190             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E925             >
  22+ E925             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E925             >Latest_Definition defl  Heap_Ptr
  22+ E925             >
  22+ E925             >                // dummy db directives used to calculate length of namec
  22+ E925 49 4E 54 45 >                db      "INTERPRET"
  22+ E929 52 50 52 45 >
  22+ E92D 54          >
  22+ E92E             >len_NFA         defl    $ - temp_NFA
  22+ E92E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E925             >
  22+ E925 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E926 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92A 52 50 52 45 >
  22+ E92E 54          >
  22+ E92F             >                org     $-1                 // alter last byte of Name just above to set
  22+ E92E D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E92F             >
  22+ E92F 1A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E931             >Prev_Ptr        defl    Heap_Ptr
  22+ E931             >
  22+ E931             >mirror_Ptr      defl    $
  22+ E931             >
  22+ E931 92 31       >                dw      Dict_Ptr + 2        // xt
  22+ E933             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E933             >
  22+ E933             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E933             >
  22+ E933             >//              ______________________________________________________________________
  22+ E933             >//              Dictionary part
  22+ E933             >
  22+ E933             >                org     Dict_Ptr
  22+ 3190             >
  22+ 3190 31 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 3192             >
  22+ 3192             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 3192 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 3195             >
  22+ 3195             >
  22+ 3195             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 3195             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 3195             >
  22+ 3195             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 3195
  24+ 3195              Interpret_Begin:                                        // begin
  25+ 3195 CF 2F                        dw          LFIND                       //      -find
  26+ 3197                                                                      //      if
  27+ 3197 8F 20                        dw          ZBRANCH
  28+ 3199 1A 00                        dw          Interpret_Else_1 - $
  29+ 319B 17 28 55 26                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 319F D5 28
  30+ 31A1                                                                      //          if
  31+ 31A1 8F 20                        dw              ZBRANCH
  32+ 31A3 08 00                        dw              Interpret_Else_2 - $
  33+ 31A5 32 2B                        dw                  COMPILE_XT          //              compile,
  34+ 31A7                                                                      //          else
  35+ 31A7 82 20                        dw              BRANCH
  36+ 31A9 06 00                        dw              Interpret_Endif_2 - $
  37+ 31AB              Interpret_Else_2:
  38+ 31AB 48 20 13 27                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 31AF              Interpret_Endif_2:                                      //          endif
  40+ 31AF                                                                      //      else
  41+ 31AF 82 20                        dw          BRANCH
  42+ 31B1 1A 00                        dw          Interpret_Endif_1 - $
  43+ 31B3              Interpret_Else_1:
  44+ 31B3 71 28 23 2F                  dw              HERE, NUMBER            //          here number
  45+ 31B7 23 28 55 26                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 31BB 78 25
  46+ 31BD                                                                      //          if
  47+ 31BD 8F 20                        dw              ZBRANCH
  48+ 31BF 08 00                        dw              Interpret_Else_3 - $
  49+ 31C1              //              dw                  NMODE, FETCH        //              nmode @
  50+ 31C1              //                                                      //              if
  51+ 31C1              //              dw                  ZBRANCH
  52+ 31C1              //              dw                  Interpret_Endif_4 - $
  53+ 31C1              //              dw                      ONE, ZERO       //                  1 0
  54+ 31C1              //              dw                      TWO_DROP        //                  2drop
  55+ 31C1              //Interpret_Endif_4:                                      //              endif
  56+ 31C1 02 31                        dw                  DLITERAL            //              [compile] dliteral
  57+ 31C3                                                                      //          else
  58+ 31C3 82 20                        dw              BRANCH
  59+ 31C5 06 00                        dw              Interpret_Endif_3 - $
  60+ 31C7              Interpret_Else_3:
  61+ 31C7 C9 25                        dw                  DROP                //              drop
  62+ 31C9 ED 30                        dw                  LITERAL             //              [compile]  literal
  63+ 31CB              Interpret_Endif_3:                                      //          endif
  64+ 31CB              Interpret_Endif_1:                                      //      endif
  65+ 31CB 5F 31                        dw          QSTACK                      //      ?stack
  66+ 31CD 57 23                        dw          QTERMINAL                   //      ?terminal
  67+ 31CF                                                                      //      if
  68+ 31CF 8F 20                        dw          ZBRANCH
  69+ 31D1 04 00                        dw          Interpret_Endif_5 - $
  70+ 31D3 33 32                        dw              QUIT                    //          quit
  71+ 31D5              Interpret_Endif_5:                                      //      endif
  72+ 31D5 82 20                        dw      BRANCH
  73+ 31D7 BE FF                        dw      Interpret_Begin - $
  74+ 31D9 0D 25                        dw      EXIT                            // ;
  75+ 31DB
  76+ 31DB              //  ______________________________________________________________________
  77+ 31DB              //
  78+ 31DB              // vocabulary   -- cccc     ( compile time )
  79+ 31DB              // Defining word used in the form   VOCABULARY cccc
  80+ 31DB              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 31DB              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 31DB              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 31DB              // so new definitions can be inserted in that vocabulary.
  84+ 31DB                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 31DB             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 31DB             >
  84+ 31DB             >Dict_Ptr        defl    $
  84+ 31DB             >
  84+ 31DB             >//              ______________________________________________________________________
  84+ 31DB             >//              Heap part
  84+ 31DB             >
  84+ 31DB             >
  84+ 31DB             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E933             >
  84+ E933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E933             >Latest_Definition defl  Heap_Ptr
  84+ E933             >
  84+ E933             >                // dummy db directives used to calculate length of namec
  84+ E933 56 4F 43 41 >                db      "VOCABULARY"
  84+ E937 42 55 4C 41 >
  84+ E93B 52 59       >
  84+ E93D             >len_NFA         defl    $ - temp_NFA
  84+ E93D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E933             >
  84+ E933 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E934 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E938 42 55 4C 41 >
  84+ E93C 52 59       >
  84+ E93E             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93D D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E93E             >
  84+ E93E 25 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E940             >Prev_Ptr        defl    Heap_Ptr
  84+ E940             >
  84+ E940             >mirror_Ptr      defl    $
  84+ E940             >
  84+ E940 DD 31       >                dw      Dict_Ptr + 2        // xt
  84+ E942             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E942             >
  84+ E942             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E942             >
  84+ E942             >//              ______________________________________________________________________
  84+ E942             >//              Dictionary part
  84+ E942             >
  84+ E942             >                org     Dict_Ptr
  84+ 31DB             >
  84+ 31DB 40 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 31DD             >
  84+ 31DD             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 31DD CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 31E0             >
  84+ 31E0             >
  84+ 31E0             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 31E0             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 31E0             >
  84+ 31E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 31E0
  86+ 31E0 C1 2B                        dw      CBUILDS
  87+ 31E2
  88+ 31E2                              // dummy word + link part
  89+ 31E2 3D 20 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 31E6 87 28
  90+ 31E8 11 28 55 26                  dw      CURRENT, FETCH          // current @
  91+ 31EC 55 26                        dw      FETCH                   // @
  92+ 31EE                          //  dw      CELL_MINUS              // cell-
  93+ 31EE 87 28                        dw      COMMA                   // ,
  94+ 31F0
  95+ 31F0                              // voc-link part
  96+ 31F0 71 28                        dw      HERE                    // here
  97+ 31F2 CF 27 55 26                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 31F6 87 28                        dw      COMMA                   // ,
  99+ 31F8 CF 27 5F 26                  dw      VOC_LINK, STORE         // voc-link !
 100+ 31FC                              // DOES part
 101+ 31FC CC 2B                        dw      DOES_TO                 // does>
 102+ 31FE              Vocabulary_Does:
 103+ 31FE 8E 25                        dw      CELL_PLUS               // cell+
 104+ 3200 0B 28 5F 26                  dw      CONTEXT, STORE          // context !
 105+ 3204 0D 25                        dw      EXIT                    // ;
 106+ 3206
 107+ 3206              //  ______________________________________________________________________
 108+ 3206              //
 109+ 3206              // forth        --
 110+ 3206              // Name of the first vocabulary.
 111+ 3206              // It makes FORTH the CONTEXT vocabulary.
 112+ 3206              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 3206              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 3206              // of a colon definition to be able to select the vocabulary.
 115+ 3206
 116+ 3206                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 3206             >
 116+ 3206             >Dict_Ptr        defl    $
 116+ 3206             >
 116+ 3206             >//              ______________________________________________________________________
 116+ 3206             >//              Heap part
 116+ 3206             >
 116+ 3206             >
 116+ 3206             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E942             >
 116+ E942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E942             >Latest_Definition defl  Heap_Ptr
 116+ E942             >
 116+ E942             >                // dummy db directives used to calculate length of namec
 116+ E942 46 4F 52 54 >                db      "FORTH"
 116+ E946 48          >
 116+ E947             >len_NFA         defl    $ - temp_NFA
 116+ E947             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E942             >
 116+ E942 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E943 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E947 48          >
 116+ E948             >                org     $-1                 // alter last byte of Name just above to set
 116+ E947 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E948             >
 116+ E948 33 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94A             >Prev_Ptr        defl    Heap_Ptr
 116+ E94A             >
 116+ E94A             >mirror_Ptr      defl    $
 116+ E94A             >
 116+ E94A 08 32       >                dw      Dict_Ptr + 2        // xt
 116+ E94C             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94C             >
 116+ E94C             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94C             >
 116+ E94C             >//              ______________________________________________________________________
 116+ E94C             >//              Dictionary part
 116+ E94C             >
 116+ E94C             >                org     Dict_Ptr
 116+ 3206             >
 116+ 3206 4A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 3208             >
 116+ 3208             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 3208 CD D9 2B    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 320B             >
 116+ 320B             >
 116+ 320B             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 320B             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 320B             >
 116+ 320B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 320B FE 31                        dw      Vocabulary_Does
 118+ 320D
 119+ 320D 81 A0                        db      $81, $A0
 120+ 320F              Forth_Latest_Ptr:
 121+ 320F 42 09                        dw      Latest_Definition
 122+ 3211              Voclink_Ptr:
 123+ 3211 00 00                        dw      0
 124+ 3213
 125+ 3213              // ____
 126+ 3213              // temp_VOC        defl    $                   // save this address
 127+ 3213              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 3213              //              db      $81, $A0
 129+ 3213              // Forth_Latest_Ptr_HEAP:
 130+ 3213              //                 dw      Latest_Definition
 131+ 3213              // Voclink_Ptr_HEAP:
 132+ 3213              //                 dw      0
 133+ 3213              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 3213              //                 org     temp_VOC
 135+ 3213              // ____
 136+ 3213
 137+ 3213              // Any new vocabulary is structured as follow:
 138+ 3213              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 3213              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 3213              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 3213              //       at creations it points to the null-word of its parent vocabulary
 142+ 3213              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 3213              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 3213              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 3213              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 3213              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 3213              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 3213
 149+ 3213              //  ______________________________________________________________________
 150+ 3213              //
 151+ 3213              // definitions  --
 152+ 3213              // Used in the form  cccc DEFINITIONS
 153+ 3213              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 3213              // vocabulary cccc.
 155+ 3213                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 3213             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 3213             >
 155+ 3213             >Dict_Ptr        defl    $
 155+ 3213             >
 155+ 3213             >//              ______________________________________________________________________
 155+ 3213             >//              Heap part
 155+ 3213             >
 155+ 3213             >
 155+ 3213             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94C             >
 155+ E94C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94C             >Latest_Definition defl  Heap_Ptr
 155+ E94C             >
 155+ E94C             >                // dummy db directives used to calculate length of namec
 155+ E94C 44 45 46 49 >                db      "DEFINITIONS"
 155+ E950 4E 49 54 49 >
 155+ E954 4F 4E 53    >
 155+ E957             >len_NFA         defl    $ - temp_NFA
 155+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94C             >
 155+ E94C 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E94D 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E951 4E 49 54 49 >
 155+ E955 4F 4E 53    >
 155+ E958             >                org     $-1                 // alter last byte of Name just above to set
 155+ E957 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E958             >
 155+ E958 42 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95A             >Prev_Ptr        defl    Heap_Ptr
 155+ E95A             >
 155+ E95A             >mirror_Ptr      defl    $
 155+ E95A             >
 155+ E95A 15 32       >                dw      Dict_Ptr + 2        // xt
 155+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95C             >
 155+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95C             >
 155+ E95C             >//              ______________________________________________________________________
 155+ E95C             >//              Dictionary part
 155+ E95C             >
 155+ E95C             >                org     Dict_Ptr
 155+ 3213             >
 155+ 3213 5A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 3215             >
 155+ 3215             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 3215 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3218             >
 155+ 3218             >
 155+ 3218             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3218             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3218             >
 155+ 3218             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3218 0B 28 55 26                  dw      CONTEXT, FETCH          // context @
 157+ 321C 11 28 5F 26                  dw      CURRENT, STORE          // current !
 158+ 3220 0D 25                        dw      EXIT                    // ;
 159+ 3222
 160+ 3222              //  ______________________________________________________________________
 161+ 3222              //
 162+ 3222              // (            -- cccc )
 163+ 3222              // the following text is interpreted as a comment until a closing )
 164+ 3222                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 3222             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 3222             >
 164+ 3222             >Dict_Ptr        defl    $
 164+ 3222             >
 164+ 3222             >//              ______________________________________________________________________
 164+ 3222             >//              Heap part
 164+ 3222             >
 164+ 3222             >
 164+ 3222             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95C             >
 164+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95C             >Latest_Definition defl  Heap_Ptr
 164+ E95C             >
 164+ E95C             >                // dummy db directives used to calculate length of namec
 164+ E95C 28          >                db      "("
 164+ E95D             >len_NFA         defl    $ - temp_NFA
 164+ E95D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95C             >
 164+ E95C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E95D 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E95E             >                org     $-1                 // alter last byte of Name just above to set
 164+ E95D A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E95E             >
 164+ E95E 4C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E960             >Prev_Ptr        defl    Heap_Ptr
 164+ E960             >
 164+ E960             >mirror_Ptr      defl    $
 164+ E960             >
 164+ E960 24 32       >                dw      Dict_Ptr + 2        // xt
 164+ E962             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E962             >
 164+ E962             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E962             >
 164+ E962             >//              ______________________________________________________________________
 164+ E962             >//              Dictionary part
 164+ E962             >
 164+ E962             >                org     Dict_Ptr
 164+ 3222             >
 164+ 3222 60 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 3224             >
 164+ 3224             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 3224 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 3227             >
 164+ 3227             >
 164+ 3227             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 3227             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 3227             >
 164+ 3227             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 3227 3D 20 29 00                  dw      LIT, ")"                // [char] )
 166+ 322B 8F 2D C9 25                  dw      WORD, DROP              // word drop
 167+ 322F 0D 25                        dw      EXIT                    // ;
 168+ 3231
 169+ 3231              //  ______________________________________________________________________
 170+ 3231              //
 171+ 3231              // quit         --
 172+ 3231              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 3231                              Colon_Def QUIT, "QUIT", is_normal
 173+ 3231             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 3231             >
 173+ 3231             >Dict_Ptr        defl    $
 173+ 3231             >
 173+ 3231             >//              ______________________________________________________________________
 173+ 3231             >//              Heap part
 173+ 3231             >
 173+ 3231             >
 173+ 3231             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E962             >
 173+ E962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E962             >Latest_Definition defl  Heap_Ptr
 173+ E962             >
 173+ E962             >                // dummy db directives used to calculate length of namec
 173+ E962 51 55 49 54 >                db      "QUIT"
 173+ E966             >len_NFA         defl    $ - temp_NFA
 173+ E966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E962             >
 173+ E962 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E963 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E967             >                org     $-1                 // alter last byte of Name just above to set
 173+ E966 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E967             >
 173+ E967 5C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E969             >Prev_Ptr        defl    Heap_Ptr
 173+ E969             >
 173+ E969             >mirror_Ptr      defl    $
 173+ E969             >
 173+ E969 33 32       >                dw      Dict_Ptr + 2        // xt
 173+ E96B             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96B             >
 173+ E96B             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96B             >
 173+ E96B             >//              ______________________________________________________________________
 173+ E96B             >//              Dictionary part
 173+ E96B             >
 173+ E96B             >                org     Dict_Ptr
 173+ 3231             >
 173+ 3231 69 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 3233             >
 173+ 3233             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 3233 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 3236             >
 173+ 3236             >
 173+ 3236             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 3236             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 3236             >
 173+ 3236             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 3236
 175+ 3236 59 28 55 26                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 323A A6 23 C9 25                  dw      F_CLOSE, DROP           // f_close drop
 177+ 323E 4C 27 59 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 3242 5F 26
 178+ 3244 4C 27 ED 27                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 3248 5F 26
 179+ 324A 3D 2B                        dw      SQUARED_OPEN            // [compile] [
 180+ 324C                                                              // begin
 181+ 324C              Quit_Begin:
 182+ 324C AB 27 55 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 3250 08 25
 183+ 3252 4D 22                        dw      CR                      //      cr
 184+ 3254 2C 2D                        dw      QUERY                   //      query
 185+ 3256              Next_Breakpoint_1:
 186+ 3256 92 31                        dw      INTERPRET               //      interpret
 187+ 3258 17 28 55 26                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 325C 32 25
 188+ 325E                                                              //      if
 189+ 325E 8F 20                        dw      ZBRANCH
 190+ 3260 07 00                        dw      Quit_Endif - $
 191+ 3262 DA 2D                        dw          C_DOT_QUOTE
 192+ 3264 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 3267              Quit_Endif:                                     //      else
 194+ 3267                                                              // again
 195+ 3267 82 20                        dw      BRANCH
 196+ 3269 E3 FF                        dw      Quit_Begin - $
 197+ 326B 0D 25                        dw      EXIT                    // ;
 198+ 326D
 199+ 326D              //  ______________________________________________________________________
 200+ 326D              //
 201+ 326D              // abort        --
 202+ 326D                              Colon_Def ABORT, "ABORT", is_normal
 202+ 326D             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 326D             >
 202+ 326D             >Dict_Ptr        defl    $
 202+ 326D             >
 202+ 326D             >//              ______________________________________________________________________
 202+ 326D             >//              Heap part
 202+ 326D             >
 202+ 326D             >
 202+ 326D             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96B             >
 202+ E96B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96B             >Latest_Definition defl  Heap_Ptr
 202+ E96B             >
 202+ E96B             >                // dummy db directives used to calculate length of namec
 202+ E96B 41 42 4F 52 >                db      "ABORT"
 202+ E96F 54          >
 202+ E970             >len_NFA         defl    $ - temp_NFA
 202+ E970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96B             >
 202+ E96B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96C 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E970 54          >
 202+ E971             >                org     $-1                 // alter last byte of Name just above to set
 202+ E970 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E971             >
 202+ E971 62 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E973             >Prev_Ptr        defl    Heap_Ptr
 202+ E973             >
 202+ E973             >mirror_Ptr      defl    $
 202+ E973             >
 202+ E973 6F 32       >                dw      Dict_Ptr + 2        // xt
 202+ E975             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E975             >
 202+ E975             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E975             >
 202+ E975             >//              ______________________________________________________________________
 202+ E975             >//              Dictionary part
 202+ E975             >
 202+ E975             >                org     Dict_Ptr
 202+ 326D             >
 202+ 326D 73 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 326F             >
 202+ 326F             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 326F CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 3272             >
 202+ 3272             >
 202+ 3272             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 3272             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 3272             >
 202+ 3272             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 3272 A5 27 55 26                  dw      S0, FETCH               // s0 @
 204+ 3276 6F 27                        dw      BL                      // bl
 205+ 3278 C0 25 5F 26                  dw      OVER, STORE             // over !
 206+ 327C FD 24                        dw      SPSTORE                 // sp!
 207+ 327E 86 2B                        dw      DECIMAL                 // decimal
 208+ 3280 08 32                        dw      FORTH                   // [compile] forth
 209+ 3282 15 32                        dw      DEFINITIONS             // definitions
 210+ 3284
 211+ 3284 3D 2B                        dw      SQUARED_OPEN            // [compile] [
 212+ 3286 AB 27 55 26                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 328A 08 25
 213+ 328C
 214+ 328C              Autoexec_Ptr:
 215+ 328C C8 3D                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 328E                          //  dw      NOOP
 217+ 328E 33 32                        dw      QUIT                   // quit
 218+ 3290 0D 25                        dw      EXIT                    // ;
 219+ 3292
 220+ 3292              //  ______________________________________________________________________
 221+ 3292              //
 222+ 3292              // warm         --
 223+ 3292                              Colon_Def WARM, "WARM", is_normal
 223+ 3292             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 223+ 3292             >
 223+ 3292             >Dict_Ptr        defl    $
 223+ 3292             >
 223+ 3292             >//              ______________________________________________________________________
 223+ 3292             >//              Heap part
 223+ 3292             >
 223+ 3292             >
 223+ 3292             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E975             >
 223+ E975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E975             >Latest_Definition defl  Heap_Ptr
 223+ E975             >
 223+ E975             >                // dummy db directives used to calculate length of namec
 223+ E975 57 41 52 4D >                db      "WARM"
 223+ E979             >len_NFA         defl    $ - temp_NFA
 223+ E979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E975             >
 223+ E975 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E976 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 223+ E97A             >                org     $-1                 // alter last byte of Name just above to set
 223+ E979 CD          >                db      {b $} | END_BIT     // msb as name end
 223+ E97A             >
 223+ E97A 6B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E97C             >Prev_Ptr        defl    Heap_Ptr
 223+ E97C             >
 223+ E97C             >mirror_Ptr      defl    $
 223+ E97C             >
 223+ E97C 94 32       >                dw      Dict_Ptr + 2        // xt
 223+ E97E             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E97E             >
 223+ E97E             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E97E             >
 223+ E97E             >//              ______________________________________________________________________
 223+ E97E             >//              Dictionary part
 223+ E97E             >
 223+ E97E             >                org     Dict_Ptr
 223+ 3292             >
 223+ 3292 7C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 3294             >
 223+ 3294             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 3294 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 3297             >
 223+ 3297             >
 223+ 3297             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 3297             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 3297             >
 223+ 3297             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 3297 67 36                        dw      BLK_INIT                // blk-init
 225+ 3299 A4 3D                        dw      SPLASH                  // splash
 226+ 329B                          //  dw      LIT, 7, EMIT            // 7 emit
 227+ 329B 6F 32                        dw      ABORT                   // abort
 228+ 329D 0D 25                        dw      EXIT                    // exit
 229+ 329F
 230+ 329F              //  ______________________________________________________________________
 231+ 329F              //
 232+ 329F              // cold         --
 233+ 329F                              Colon_Def COLD, "COLD", is_normal
 233+ 329F             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 233+ 329F             >
 233+ 329F             >Dict_Ptr        defl    $
 233+ 329F             >
 233+ 329F             >//              ______________________________________________________________________
 233+ 329F             >//              Heap part
 233+ 329F             >
 233+ 329F             >
 233+ 329F             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E97E             >
 233+ E97E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E97E             >Latest_Definition defl  Heap_Ptr
 233+ E97E             >
 233+ E97E             >                // dummy db directives used to calculate length of namec
 233+ E97E 43 4F 4C 44 >                db      "COLD"
 233+ E982             >len_NFA         defl    $ - temp_NFA
 233+ E982             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E97E             >
 233+ E97E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E97F 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 233+ E983             >                org     $-1                 // alter last byte of Name just above to set
 233+ E982 C4          >                db      {b $} | END_BIT     // msb as name end
 233+ E983             >
 233+ E983 75 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E985             >Prev_Ptr        defl    Heap_Ptr
 233+ E985             >
 233+ E985             >mirror_Ptr      defl    $
 233+ E985             >
 233+ E985 A1 32       >                dw      Dict_Ptr + 2        // xt
 233+ E987             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E987             >
 233+ E987             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E987             >
 233+ E987             >//              ______________________________________________________________________
 233+ E987             >//              Dictionary part
 233+ E987             >
 233+ E987             >                org     Dict_Ptr
 233+ 329F             >
 233+ 329F 85 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 32A1             >
 233+ 32A1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 32A1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 233+ 32A4             >
 233+ 32A4             >
 233+ 32A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 32A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 32A4             >
 233+ 32A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 32A4 13 27 13 27                  dw      NOOP, NOOP
 235+ 32A8 3D 20 12 20                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 236+ 32AC 3D 20 2E 20                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 237+ 32B0 55 26                        dw      FETCH                   // @
 238+ 32B2 3D 20 06 00                  dw      LIT, 6, PLUS            // 6 +
 238+ 32B6 5F 25
 239+ 32B8 3D 20 16 00                  dw      LIT, 22                 // 22
 240+ 32BC 4E 24                        dw      CMOVE
 241+ 32BE 3D 20 0C 20                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 242+ 32C2 55 26                        dw      FETCH                   // @
 243+ 32C4 3D 20 0F 32                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 244+ 32C8 5F 26                        dw      STORE                   // !
 245+ 32CA 4C 27 E7 27                  dw      ZERO, NMODE, STORE      // 0 nmode !
 245+ 32CE 5F 26
 246+ 32D0 D5 27 55 26                  dw      FIRST, FETCH, DUP       // first @ dup
 246+ 32D4 E4 25
 247+ 32D6 41 28 5F 26                  dw      USED, STORE             // used !
 248+ 32DA 47 28 5F 26                  dw      PREV, STORE             // prev !
 249+ 32DE 3D 20 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 249+ 32E2 53 28 5F 26
 250+ 32E6              //              dw      LIT, 8
 251+ 32E6              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 252+ 32E6 08 37                        dw      EMPTY_BUFFERS
 253+ 32E8 4C 27 ED 27                  dw      ZERO, BLK, STORE
 253+ 32EC 5F 26
 254+ 32EE 4C 27 59 28                  dw      ZERO, SOURCE_ID, STORE
 254+ 32F2 5F 26
 255+ 32F4
 256+ 32F4 94 32        Warm_Start:     dw      WARM
 257+ 32F6 A1 32        Cold_Start:     dw      COLD
 258+ 32F8 0D 25                        dw      EXIT
 259+ 32FA
 260+ 32FA
 261+ 32FA              //  ______________________________________________________________________
 262+ 32FA
 263+ 32FA              Tools_vForth_Directory
 264+ 32FA 43 3A 2F 74                  db      "C:/tools/vForth/", $FF
 264+ 32FE 6F 6F 6C 73
 264+ 3302 2F 76 46 6F
 264+ 3306 72 74 68 2F
 264+ 330A FF
 265+ 330B 43 3A 2F 64  Filename_Ram7:  db      "C:/dot/vforth.bin",0
 265+ 330F 6F 74 2F 76
 265+ 3313 66 6F 72 74
 265+ 3317 68 2E 62 69
 265+ 331B 6E 00
 266+ 331D
 267+ 331D              Saved_Speed:
 268+ 331D 00                           db      0
 269+ 331E 02 03 04 05  Saved_MMU       db      2,3,4,5,6,7   // MMU2-MMU7
 269+ 3322 06 07
 270+ 3324
 271+ 3324              Saved_Layer:
 272+ 3324 00                           db      0           // graphics current mode
 273+ 3325
 274+ 3325              //  ______________________________________________________________________
 275+ 3325              WarmRoutine:
 276+ 3325              ColdRoutine:
 277+ 3325              //  ______________________________________________________________________
 278+ 3325              // 0.
 279+ 3325 D1                           pop     de                      // retrieve return to basic address
 280+ 3326 ED 73 08 20                  ld      (SP_Basic), sp
 281+ 332A 31 00 40                     ld      sp, $4000               // safe area
 282+ 332D D5                           push    de                      // save return to basic address
 283+ 332E D9                           exx
 284+ 332F E5                           push    hl                      // save Basic's h'l' return address
 285+ 3330 D9                           exx
 286+ 3331
 287+ 3331              //  ______________________________________________________________________
 288+ 3331              // 1.
 289+ 3331              // Accepts one parameter from Basic as the filename to USE for blocks.
 290+ 3331 7C                           ld      a, h
 291+ 3332 B5                           or      l
 292+ 3333 28 1E                        jr      z, Skip_Parameter
 293+ 3335
 294+ 3335 11 76 3F                     ld      de, Blk_filename
 295+ 3338 01 00 00                     ld      bc, 0
 296+ 333B              Parameter_Loop:
 297+ 333B 7E                           ld      a, (hl)
 298+ 333C FE 3A                        cp      ':'
 299+ 333E 28 08                        jr      z, End_Parameter
 300+ 3340 FE 0D                        cp      $0D
 301+ 3342 28 04                        jr      z, End_Parameter
 302+ 3344 ED A0                        ldi
 303+ 3346 18 F3                        jr      Parameter_Loop
 304+ 3348              End_Parameter:
 305+ 3348 AF                           xor     a
 306+ 3349 12                           ld      (de), a
 307+ 334A 21 00 00                     ld      hl, 0
 308+ 334D ED 42                        sbc     hl, bc
 309+ 334F 7D                           ld      a, l
 310+ 3350 32 75 3F                     ld      (Len_Filename), a
 311+ 3353              Skip_Parameter:
 312+ 3353
 313+ 3353              //  ______________________________________________________________________
 314+ 3353              // 2. prepare save-area address and hw register port
 315+ 3353 21 1D 33                     ld      hl, Saved_Speed     // save-area
 316+ 3356              //              ld      bc, $243B               // hw-register port
 317+ 3356              //  ______________________________________________________________________
 318+ 3356              // 2.1
 319+ 3356              // ask / read speed and MMU status
 320+ 3356 3E 07                        ld      a ,$07                  // read current speed
 321+ 3358 CD 16 34                     call    Get_MMU_status
 322+ 335B 16 03                        ld      d, 3                    // set top speed
 323+ 335D B2                           or      d                       // reuse data just read
 324+ 335E ED 92 07                     nextreg 07, a
 325+ 3361
 326+ 3361 1E 06                        ld      e, 6                    // loop limit
 327+ 3363              MMU_read_loop:
 328+ 3363 3E 58                        ld      a, $58                  // MMU2-MMU7 ($52-$57)
 329+ 3365 93                           sub     e
 330+ 3366 CD 16 34                     call    Get_MMU_status
 331+ 3369 1D                           dec     e
 332+ 336A 20 F7                        jr      nz, MMU_read_loop
 333+ 336C              //  ______________________________________________________________________
 334+ 336C              // 2.2
 335+ 336C              // save current LAYER status
 336+ 336C
 337+ 336C 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 338+ 336F 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 339+ 3371 3E 00                        ld      a, 0        // query current status
 340+ 3373 CF                           rst     8
 341+ 3374 94                           db      $94 // carry flag set on success
 342+ 3375
 343+ 3375 32 24 33                     ld      (Saved_Layer), a     // store after MMUs
 344+ 3378              //  ______________________________________________________________________
 345+ 3378              // 2.3
 346+ 3378 21 00 60                     ld      hl, $6000
 347+ 337B 11 00 40                     ld      de, $4000
 348+ 337E CD D0 33                     call    Backup_Restore_MMU
 349+ 3381
 350+ 3381              //  ______________________________________________________________________
 351+ 3381              // 5.
 352+ 3381              // set LAYER 1,2
 353+ 3381 D9                           exx
 354+ 3382 01 02 01                     ld      bc, $0102
 355+ 3385 CD 1C 34                     call    Set_Layer
 356+ 3388
 357+ 3388              //  ______________________________________________________________________
 358+ 3388              // 6.
 359+ 3388              // Set current drive/directory
 360+ 3388
 361+ 3388              //              ld      a, $00
 362+ 3388              //              rst     8
 363+ 3388              //              defb    $89     ; m_getsetdrv
 364+ 3388              //              rst     8
 365+ 3388              //              defb    $89     ; m_getsetdrv
 366+ 3388
 367+ 3388 CD B6 33                     call    Set_Cur_Dir
 368+ 338B
 369+ 338B              //  ______________________________________________________________________
 370+ 338B              // 2.2
 371+ 338B              // Reserve pages from OS.
 372+ 338B
 373+ 338B CD F1 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 374+ 338E CD E0 33                     call    Set_forth_MMU
 375+ 3391
 376+ 3391              //  ______________________________________________________________________
 377+ 3391              // 7.
 378+ 3391              // Get current handle via M_GETHANDLE and load ram
 379+ 3391 CF                           rst     8
 380+ 3392 8D                           DEFB    $8d             ; M_GETHANDLE
 381+ 3393
 382+ 3393              //  ______________________________________________________________________
 383+ 3393              // 8.
 384+ 3393              // set MMU3-MMU7 to $20-$1C abd load ram7.bin
 385+ 3393
 386+ 3393              //              ld      hl, Filename_Ram7   ; because we are within a dot command
 387+ 3393              //              ld      b, $01          ; $01 request read access
 388+ 3393              //              ld      a, $2A          ; '*'
 389+ 3393              //              rst     8
 390+ 3393              //              DEFB    $9A             ; f_open
 391+ 3393
 392+ 3393 F5                           push    af
 393+ 3394 21 00 E0                     ld      hl, $E000
 394+ 3397 01 FF 1F                     ld      bc, $1FFF
 395+ 339A CF                           rst     8
 396+ 339B 9D                           DEFB    $9D             ; f_read
 397+ 339C F1                           pop     af
 398+ 339D CF                           rst     8
 399+ 339E 9B                           DEFB    $9B             ; f_close
 400+ 339F
 401+ 339F              //  ______________________________________________________________________
 402+ 339F              // 9.
 403+ 339F              // pre-set the four main 16-bit registers
 404+ 339F ED 7B 12 20                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 405+ 33A3 DD 21 34 20                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 406+ 33A7 ED 5B 14 20                  ld      de, (R0_origin)         // Return Stack Pointer
 407+ 33AB 01 F6 32                     ld      bc, Cold_Start          // Instruction Pointer
 408+ 33AE
 409+ 33AE                              // never stop scrolling: print chr$26;chr$0
 410+ 33AE 3E 1A                        ld      a, 26
 411+ 33B0 D7                           rst     $10
 412+ 33B1 AF                           xor     a
 413+ 33B2 D7                           rst     $10
 414+ 33B3
 415+ 33B3 FB                           ei
 416+ 33B4
 417+ 33B4                          //  push    ix
 418+ 33B4                          //  pop     hl
 419+ 33B4                          //  rst     $20
 420+ 33B4                              next
 420+ 33B4 DD E9       >                jp      (ix)
 421+ 33B6
 422+ 33B6
 423+ 33B6              //  ______________________________________________________________________
 424+ 33B6              // Routine
 425+ 33B6              // set current directory  /tools/vForth
 426+ 33B6              Set_Cur_Dir:
 427+ 33B6 21 FA 32                     ld      hl, Tools_vForth_Directory
 428+ 33B9 11 00 40                     ld      de, $4000 // use some temporary safe zone
 429+ 33BC 01 11 00                     ld      bc, 17    // length of Tools_vForth_Directory
 430+ 33BF ED B0                        ldir
 431+ 33C1 D9                           exx
 432+ 33C2 21 00 40                     ld      hl, $4000
 433+ 33C5                          //  ld      hl, Tools_vForth_Directory
 434+ 33C5 D9                           exx
 435+ 33C6 11 B1 01                     ld      de, $01B1
 436+ 33C9 0E 07                        ld      c, 7
 437+ 33CB 3E 00                        ld      a, 0
 438+ 33CD CF                           rst     8
 439+ 33CE 94                           db      $94 // carry flag set on success !
 440+ 33CF
 441+ 33CF C9                           ret
 442+ 33D0
 443+ 33D0              //  ______________________________________________________________________
 444+ 33D0              // Routine, safe backup
 445+ 33D0              // INput: hl:$6000, de:$E000 for backup or viceversa for restore.
 446+ 33D0              Backup_Restore_MMU:
 447+ 33D0 ED 91 52 28                  nextreg $52, $28        ;   MMU2  = $6000
 448+ 33D4 01 00 20                     ld      bc, $2000
 449+ 33D7 ED B0                        ldir
 450+ 33D9 3A 1E 33                     ld      a, (Saved_MMU)
 451+ 33DC ED 92 52                     nextreg $52, a
 452+ 33DF C9                           ret
 453+ 33E0
 454+ 33E0              //  ______________________________________________________________________
 455+ 33E0              // Routine
 456+ 33E0              // set MMU7 to $20 and laod ram7.bin
 457+ 33E0              Set_forth_MMU:
 458+ 33E0                      ////    nextreg $53, $28         ;   MMU3  = 24576
 459+ 33E0 ED 91 54 1D                  nextreg $54, $1D         ;   MMU4  = $8000
 460+ 33E4 ED 91 55 1E                  nextreg $55, $1E         ;   MMU5
 461+ 33E8 ED 91 56 1F                  nextreg $56, $1F         ;   MMU6
 462+ 33EC ED 91 57 20                  nextreg $57, $20         ;   MMU7
 463+ 33F0 C9                           ret
 464+ 33F1
 465+ 33F1              //  ______________________________________________________________________
 466+ 33F1              // Routine:
 467+ 33F1              // reserve MMU pages
 468+ 33F1              Restore_Reserve_MMU:
 469+ 33F1 2E 1D                        ld      l, $1D      // first page
 470+ 33F3 26 0C                        ld      h, 8+3+1    // 8 HEAP, 3 MAIN, 1 BACKUP
 471+ 33F5              Reserve_MMU_Loop:
 472+ 33F5 7D                           ld      a, l            // pass page through a
 473+ 33F6 D9                           exx
 474+ 33F7                               // parameters:
 475+ 33F7              Deallocate_MMU:
 476+ 33F7 21 02 00                      ld      hl, $0002      // L=2:reserve E', =3:deallocate, H=0:normal 8k page
 477+ 33FA 5F                            ld      e, a           // E' is bank-id
 478+ 33FB D9                           exx
 479+ 33FC E5                           push    hl
 480+ 33FD
 481+ 33FD 0E 07                        ld      c, 07           // page 7 for M_P3DOS
 482+ 33FF 3E 01                        ld      a, 1
 483+ 3401 11 BD 01                     ld      de, $01BD  // IDE_BANK
 484+ 3404 CF                           rst     8
 485+ 3405 94                           db      $94     // M_P3DOS
 486+ 3406
 487+ 3406 E1                           pop     hl
 488+ 3407 2C                           inc     l       // next page number
 489+ 3408 25                           dec     h       // decrease counter.
 490+ 3409 20 EA                        jr      nz, Reserve_MMU_Loop
 491+ 340B C9                           ret
 492+ 340C
 493+ 340C              //  ______________________________________________________________________
 494+ 340C              // Routine
 495+ 340C              // Input:  bc=$243B, a=reg, hl=array
 496+ 340C              // Operation: set  hardware register  a  to value at  (hl)
 497+ 340C              // Output: bc=$243B, a=a+1, hl=hl+1
 498+ 340C              Put_MMU_status:
 499+ 340C 56                           ld      d, (hl)
 500+ 340D ED 79                        out     (c), a
 501+ 340F 04                           inc     b        // 253Bh
 502+ 3410 ED 51                        out     (c), d
 503+ 3412 05                           dec     b        // 243Bh
 504+ 3413 23                           inc     hl
 505+ 3414 3C                           inc     a
 506+ 3415 C9                           ret
 507+ 3416
 508+ 3416              //  ______________________________________________________________________
 509+ 3416              // Routine
 510+ 3416              // Input:  bc=$243B, a=reg, hl=array
 511+ 3416              // Operation: get current value of hardware register  a  and store at (hl)
 512+ 3416              // Output: bc=$243B, a=a+1, hl=hl+1
 513+ 3416              Get_MMU_status:
 514+ 3416              //              out     (c), a
 515+ 3416              //              inc     b        // 253Bh
 516+ 3416              //              in      d ,(c)
 517+ 3416              //              dec     b        // 243Bh
 518+ 3416 CD 3B 21                     call    NEXTREG_read
 519+ 3419 77                           ld      (hl), a
 520+ 341A 23                           inc     hl
 521+ 341B C9                           ret
 522+ 341C
 523+ 341C              //  ______________________________________________________________________
 524+ 341C              // Routine
 525+ 341C              // set LAYER B,C
 526+ 341C              // Input: bc=$0102 for Layer 1,2
 527+ 341C              Set_Layer:
 528+ 341C D9                           exx
 529+ 341D 11 D5 01                     ld      de, $01D5
 530+ 3420 0E 07                        ld      c, 7
 531+ 3422 3E 01                        ld      a, 1
 532+ 3424 CF                           rst     8
 533+ 3425 94                           db      $94
 534+ 3426 C9                           ret
 535+ 3427
 536+ 3427              //  ______________________________________________________________________
 537+ 3427              //
 538+ 3427              // basic        --
 539+ 3427                              New_Def BASIC, "BASIC", is_code, is_normal
 539+ 3427             >
 539+ 3427             >Dict_Ptr        defl    $
 539+ 3427             >
 539+ 3427             >//              ______________________________________________________________________
 539+ 3427             >//              Heap part
 539+ 3427             >
 539+ 3427             >
 539+ 3427             >                org     (Heap_Ptr & $1FFF) + $E000
 539+ E987             >
 539+ E987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ E987             >Latest_Definition defl  Heap_Ptr
 539+ E987             >
 539+ E987             >                // dummy db directives used to calculate length of namec
 539+ E987 42 41 53 49 >                db      "BASIC"
 539+ E98B 43          >
 539+ E98C             >len_NFA         defl    $ - temp_NFA
 539+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ E987             >
 539+ E987 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ E988 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 539+ E98C 43          >
 539+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 539+ E98C C3          >                db      {b $} | END_BIT     // msb as name end
 539+ E98D             >
 539+ E98D 7E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 539+ E98F             >Prev_Ptr        defl    Heap_Ptr
 539+ E98F             >
 539+ E98F             >mirror_Ptr      defl    $
 539+ E98F             >
 539+ E98F 29 34       >                dw      Dict_Ptr + 2        // xt
 539+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 539+ E991             >
 539+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 539+ E991             >
 539+ E991             >//              ______________________________________________________________________
 539+ E991             >//              Dictionary part
 539+ E991             >
 539+ E991             >                org     Dict_Ptr
 539+ 3427             >
 539+ 3427 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 539+ 3429             >
 539+ 3429             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 3429 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 539+ 3429 ~           >
 539+ 3429 ~           >
 539+ 3429             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 3429             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 3429             >
 539+ 3429             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 3429
 541+ 3429              // using dot-command, no more needs to return bc
 542+ 3429              //              pop     bc                      // return  TOS  value to Basic
 543+ 3429
 544+ 3429 F3                           di
 545+ 342A
 546+ 342A 31 FC 3F                     ld      sp, $4000 - 4           // Carefully balanced from startup
 547+ 342D
 548+ 342D                              // address
 549+ 342D 21 1D 33                     ld      hl, Saved_Speed
 550+ 3430 01 3B 24                     ld      bc , $243B
 551+ 3433
 552+ 3433                              // set speed
 553+ 3433 3E 07                        ld      a, $07
 554+ 3435 CD 0C 34                     call    Put_MMU_status
 555+ 3438
 556+ 3438                        //    inc     hl
 557+ 3438                        //    inc     hl
 558+ 3438                              // set MMU pages
 559+ 3438 3E 52                        ld      a, $52
 560+ 343A 1E 06                        ld      e, 6
 561+ 343C              MMU_put_loop:
 562+ 343C CD 0C 34                     call    Put_MMU_status
 563+ 343F 1D                           dec     e
 564+ 3440 20 FA                        jr      nz, MMU_put_loop
 565+ 3442              //  ______________________________________________________________________
 566+ 3442                              // restore layer ide mode
 567+ 3442 7E                           ld      a, (hl)
 568+ 3443
 569+ 3443 D9                           exx
 570+ 3444 47                           ld      b, a
 571+ 3445 0F                           rrca
 572+ 3446 0F                           rrca
 573+ 3447 E6 03                        and     3
 574+ 3449 4F                           ld      c, a
 575+ 344A 78                           ld      a, b
 576+ 344B E6 03                        and     3
 577+ 344D 47                           ld      b, a
 578+ 344E CD 1C 34                     call    Set_Layer
 579+ 3451
 580+ 3451              //  ______________________________________________________________________
 581+ 3451              //
 582+ 3451 21 00 40                     ld      hl, $4000
 583+ 3454 11 00 60                     ld      de, $6000
 584+ 3457 CD D0 33                     call    Backup_Restore_MMU
 585+ 345A              //  ______________________________________________________________________
 586+ 345A              //
 587+ 345A                              // free 8k pages
 588+ 345A 3E 03                        ld      a, 3
 589+ 345C 32 F8 33                     ld      (Deallocate_MMU+1), a
 590+ 345F CD F1 33                     call    Restore_Reserve_MMU     // multiple IDE_BANK  !
 591+ 3462              //  ______________________________________________________________________
 592+ 3462
 593+ 3462                              // restore basic pointers
 594+ 3462 E1                           pop     hl                      // restore h'l'
 595+ 3463 D9                           exx
 596+ 3464 E1                           pop     hl
 597+ 3465 ED 7B 08 20                  ld      sp, (SP_Basic)          // restore Basic's SP
 598+ 3469 E5                           push    hl
 599+ 346A FB                           ei
 600+ 346B              Exit_with_error:
 601+ 346B AF                           xor     a
 602+ 346C 76                           halt
 603+ 346D C9                           ret                             // to where USR Basic was left
 604+ 346E
 605+ 346E              //  ______________________________________________________________________
 606+ 346E              //
 607+ 346E              // +-           n1 n2 -- n3
 608+ 346E              // leaves n1 with the sign of n2 as n3.
 609+ 346E                              Colon_Def PLUS_MINUS, "+-", is_normal
 609+ 346E             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 609+ 346E             >
 609+ 346E             >Dict_Ptr        defl    $
 609+ 346E             >
 609+ 346E             >//              ______________________________________________________________________
 609+ 346E             >//              Heap part
 609+ 346E             >
 609+ 346E             >
 609+ 346E             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E991             >
 609+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E991             >Latest_Definition defl  Heap_Ptr
 609+ E991             >
 609+ E991             >                // dummy db directives used to calculate length of namec
 609+ E991 2B 2D       >                db      "+-"
 609+ E993             >len_NFA         defl    $ - temp_NFA
 609+ E993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E991             >
 609+ E991 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E992 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 609+ E994             >                org     $-1                 // alter last byte of Name just above to set
 609+ E993 AD          >                db      {b $} | END_BIT     // msb as name end
 609+ E994             >
 609+ E994 87 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E996             >Prev_Ptr        defl    Heap_Ptr
 609+ E996             >
 609+ E996             >mirror_Ptr      defl    $
 609+ E996             >
 609+ E996 70 34       >                dw      Dict_Ptr + 2        // xt
 609+ E998             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E998             >
 609+ E998             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E998             >
 609+ E998             >//              ______________________________________________________________________
 609+ E998             >//              Dictionary part
 609+ E998             >
 609+ E998             >                org     Dict_Ptr
 609+ 346E             >
 609+ 346E 96 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 3470             >
 609+ 3470             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 3470 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 3473             >
 609+ 3473             >
 609+ 3473             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 3473             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 3473             >
 609+ 3473             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 3473 44 25                        dw      ZLESS                   // 0<
 611+ 3475                                                              // if
 612+ 3475 8F 20                        dw      ZBRANCH
 613+ 3477 04 00                        dw      Plus_Minus_Endif - $
 614+ 3479 9F 25                        dw          MINUS               //      minus
 615+ 347B              Plus_Minus_Endif:                               // endif
 616+ 347B 0D 25                        dw      EXIT                    // ;
 617+ 347D
 618+ 347D              //  ______________________________________________________________________
 619+ 347D              //
 620+ 347D              // d+-          d1 n -- d2
 621+ 347D              // leaves d1 with the sign of n as d2.
 622+ 347D                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 622+ 347D             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 622+ 347D             >
 622+ 347D             >Dict_Ptr        defl    $
 622+ 347D             >
 622+ 347D             >//              ______________________________________________________________________
 622+ 347D             >//              Heap part
 622+ 347D             >
 622+ 347D             >
 622+ 347D             >                org     (Heap_Ptr & $1FFF) + $E000
 622+ E998             >
 622+ E998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ E998             >Latest_Definition defl  Heap_Ptr
 622+ E998             >
 622+ E998             >                // dummy db directives used to calculate length of namec
 622+ E998 44 2B 2D    >                db      "D+-"
 622+ E99B             >len_NFA         defl    $ - temp_NFA
 622+ E99B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ E998             >
 622+ E998 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ E999 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 622+ E99C             >                org     $-1                 // alter last byte of Name just above to set
 622+ E99B AD          >                db      {b $} | END_BIT     // msb as name end
 622+ E99C             >
 622+ E99C 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 622+ E99E             >Prev_Ptr        defl    Heap_Ptr
 622+ E99E             >
 622+ E99E             >mirror_Ptr      defl    $
 622+ E99E             >
 622+ E99E 7F 34       >                dw      Dict_Ptr + 2        // xt
 622+ E9A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 622+ E9A0             >
 622+ E9A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 622+ E9A0             >
 622+ E9A0             >//              ______________________________________________________________________
 622+ E9A0             >//              Dictionary part
 622+ E9A0             >
 622+ E9A0             >                org     Dict_Ptr
 622+ 347D             >
 622+ 347D 9E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 622+ 347F             >
 622+ 347F             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 347F CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 3482             >
 622+ 3482             >
 622+ 3482             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 3482             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 3482             >
 622+ 3482             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 3482 44 25                        dw      ZLESS                   // 0<
 624+ 3484                                                              // if
 625+ 3484 8F 20                        dw      ZBRANCH
 626+ 3486 04 00                        dw      DPlus_Minus_Endif - $
 627+ 3488 AD 25                        dw          DMINUS              //      dminus
 628+ 348A              DPlus_Minus_Endif:                              // endif
 629+ 348A 0D 25                        dw      EXIT                    // ;
 630+ 348C
 631+ 348C              //  ______________________________________________________________________
 632+ 348C              //
 633+ 348C              // abs          n1 -- n2
 634+ 348C                              Colon_Def ABS_OP, "ABS", is_normal
 634+ 348C             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 634+ 348C             >
 634+ 348C             >Dict_Ptr        defl    $
 634+ 348C             >
 634+ 348C             >//              ______________________________________________________________________
 634+ 348C             >//              Heap part
 634+ 348C             >
 634+ 348C             >
 634+ 348C             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E9A0             >
 634+ E9A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E9A0             >Latest_Definition defl  Heap_Ptr
 634+ E9A0             >
 634+ E9A0             >                // dummy db directives used to calculate length of namec
 634+ E9A0 41 42 53    >                db      "ABS"
 634+ E9A3             >len_NFA         defl    $ - temp_NFA
 634+ E9A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E9A0             >
 634+ E9A0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E9A1 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 634+ E9A4             >                org     $-1                 // alter last byte of Name just above to set
 634+ E9A3 D3          >                db      {b $} | END_BIT     // msb as name end
 634+ E9A4             >
 634+ E9A4 98 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E9A6             >Prev_Ptr        defl    Heap_Ptr
 634+ E9A6             >
 634+ E9A6             >mirror_Ptr      defl    $
 634+ E9A6             >
 634+ E9A6 8E 34       >                dw      Dict_Ptr + 2        // xt
 634+ E9A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E9A8             >
 634+ E9A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E9A8             >
 634+ E9A8             >//              ______________________________________________________________________
 634+ E9A8             >//              Dictionary part
 634+ E9A8             >
 634+ E9A8             >                org     Dict_Ptr
 634+ 348C             >
 634+ 348C A6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 348E             >
 634+ 348E             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 348E CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 3491             >
 634+ 3491             >
 634+ 3491             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 3491             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 3491             >
 634+ 3491             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 3491 E4 25                        dw      DUP                     // dup
 636+ 3493 70 34                        dw      PLUS_MINUS              // +-
 637+ 3495 0D 25                        dw      EXIT                    // ;
 638+ 3497
 639+ 3497              //  ______________________________________________________________________
 640+ 3497              //
 641+ 3497              // dabs         d1 -- d2
 642+ 3497                              Colon_Def DABS, "DABS", is_normal
 642+ 3497             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 642+ 3497             >
 642+ 3497             >Dict_Ptr        defl    $
 642+ 3497             >
 642+ 3497             >//              ______________________________________________________________________
 642+ 3497             >//              Heap part
 642+ 3497             >
 642+ 3497             >
 642+ 3497             >                org     (Heap_Ptr & $1FFF) + $E000
 642+ E9A8             >
 642+ E9A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 642+ E9A8             >Latest_Definition defl  Heap_Ptr
 642+ E9A8             >
 642+ E9A8             >                // dummy db directives used to calculate length of namec
 642+ E9A8 44 41 42 53 >                db      "DABS"
 642+ E9AC             >len_NFA         defl    $ - temp_NFA
 642+ E9AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 642+ E9A8             >
 642+ E9A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 642+ E9A9 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 642+ E9AD             >                org     $-1                 // alter last byte of Name just above to set
 642+ E9AC D3          >                db      {b $} | END_BIT     // msb as name end
 642+ E9AD             >
 642+ E9AD A0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 642+ E9AF             >Prev_Ptr        defl    Heap_Ptr
 642+ E9AF             >
 642+ E9AF             >mirror_Ptr      defl    $
 642+ E9AF             >
 642+ E9AF 99 34       >                dw      Dict_Ptr + 2        // xt
 642+ E9B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 642+ E9B1             >
 642+ E9B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 642+ E9B1             >
 642+ E9B1             >//              ______________________________________________________________________
 642+ E9B1             >//              Dictionary part
 642+ E9B1             >
 642+ E9B1             >                org     Dict_Ptr
 642+ 3497             >
 642+ 3497 AF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 642+ 3499             >
 642+ 3499             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 642+ 3499 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 642+ 349C             >
 642+ 349C             >
 642+ 349C             >                endif           ; ok        // for other definitions it "points" the correct handler
 642+ 349C             >                // Use of "; ok" to suppress "warning[fwdref]"
 642+ 349C             >
 642+ 349C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 643+ 349C E4 25                        dw      DUP                     // dup
 644+ 349E 7F 34                        dw      DPLUS_MINUS             // d+-
 645+ 34A0 0D 25                        dw      EXIT                    // ;
 646+ 34A2
 647+ 34A2              //  ______________________________________________________________________
 648+ 34A2              //
 649+ 34A2              // m*           n1 n2 -- d
 650+ 34A2              // multiply two integer giving a double
 651+ 34A2                              Colon_Def MMUL, "M*", is_normal
 651+ 34A2             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 651+ 34A2             >
 651+ 34A2             >Dict_Ptr        defl    $
 651+ 34A2             >
 651+ 34A2             >//              ______________________________________________________________________
 651+ 34A2             >//              Heap part
 651+ 34A2             >
 651+ 34A2             >
 651+ 34A2             >                org     (Heap_Ptr & $1FFF) + $E000
 651+ E9B1             >
 651+ E9B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ E9B1             >Latest_Definition defl  Heap_Ptr
 651+ E9B1             >
 651+ E9B1             >                // dummy db directives used to calculate length of namec
 651+ E9B1 4D 2A       >                db      "M*"
 651+ E9B3             >len_NFA         defl    $ - temp_NFA
 651+ E9B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ E9B1             >
 651+ E9B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ E9B2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 651+ E9B4             >                org     $-1                 // alter last byte of Name just above to set
 651+ E9B3 AA          >                db      {b $} | END_BIT     // msb as name end
 651+ E9B4             >
 651+ E9B4 A8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 651+ E9B6             >Prev_Ptr        defl    Heap_Ptr
 651+ E9B6             >
 651+ E9B6             >mirror_Ptr      defl    $
 651+ E9B6             >
 651+ E9B6 A4 34       >                dw      Dict_Ptr + 2        // xt
 651+ E9B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 651+ E9B8             >
 651+ E9B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 651+ E9B8             >
 651+ E9B8             >//              ______________________________________________________________________
 651+ E9B8             >//              Dictionary part
 651+ E9B8             >
 651+ E9B8             >                org     Dict_Ptr
 651+ 34A2             >
 651+ 34A2 B6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 651+ 34A4             >
 651+ 34A4             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 34A4 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 34A7             >
 651+ 34A7             >
 651+ 34A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 34A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 34A7             >
 651+ 34A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 34A7 33 26 E8 24                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 652+ 34AB 17 25
 653+ 34AD 8E 34 DD 25                  dw      ABS_OP, SWAP            // abs swap
 654+ 34B1 8E 34 72 24                  dw      ABS_OP, UM_MUL          // abs um*
 655+ 34B5 22 25 7F 34                  dw      R_TO, DPLUS_MINUS       // r> d+-
 656+ 34B9 0D 25                        dw      EXIT                    // ;
 657+ 34BB
 658+ 34BB              //  ______________________________________________________________________
 659+ 34BB              //
 660+ 34BB              // sm/rem       d n -- q r
 661+ 34BB              // Symmetric division: divides a double into n giving quotient q and remainder r
 662+ 34BB              // the remainder has the sign of d.
 663+ 34BB                              Colon_Def SMDIVM, "SM/REM", is_normal
 663+ 34BB             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 663+ 34BB             >
 663+ 34BB             >Dict_Ptr        defl    $
 663+ 34BB             >
 663+ 34BB             >//              ______________________________________________________________________
 663+ 34BB             >//              Heap part
 663+ 34BB             >
 663+ 34BB             >
 663+ 34BB             >                org     (Heap_Ptr & $1FFF) + $E000
 663+ E9B8             >
 663+ E9B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ E9B8             >Latest_Definition defl  Heap_Ptr
 663+ E9B8             >
 663+ E9B8             >                // dummy db directives used to calculate length of namec
 663+ E9B8 53 4D 2F 52 >                db      "SM/REM"
 663+ E9BC 45 4D       >
 663+ E9BE             >len_NFA         defl    $ - temp_NFA
 663+ E9BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ E9B8             >
 663+ E9B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ E9B9 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 663+ E9BD 45 4D       >
 663+ E9BF             >                org     $-1                 // alter last byte of Name just above to set
 663+ E9BE CD          >                db      {b $} | END_BIT     // msb as name end
 663+ E9BF             >
 663+ E9BF B1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 663+ E9C1             >Prev_Ptr        defl    Heap_Ptr
 663+ E9C1             >
 663+ E9C1             >mirror_Ptr      defl    $
 663+ E9C1             >
 663+ E9C1 BD 34       >                dw      Dict_Ptr + 2        // xt
 663+ E9C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 663+ E9C3             >
 663+ E9C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 663+ E9C3             >
 663+ E9C3             >//              ______________________________________________________________________
 663+ E9C3             >//              Dictionary part
 663+ E9C3             >
 663+ E9C3             >                org     Dict_Ptr
 663+ 34BB             >
 663+ 34BB C1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 663+ 34BD             >
 663+ 34BD             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 34BD CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 663+ 34C0             >
 663+ 34C0             >
 663+ 34C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 34C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 34C0             >
 663+ 34C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 34C0 C0 25 17 25                  dw      OVER, TO_R, TO_R        // over >r >r
 664+ 34C4 17 25
 665+ 34C6 99 34 2D 25                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 665+ 34CA 8E 34
 666+ 34CC 9A 24                        dw      UMDIVMOD                // um/mod
 667+ 34CE 22 25                        dw      R_TO                    // r>
 668+ 34D0 2D 25 E8 24                  dw      R_OP, XOR_OP            // r xor
 669+ 34D4 70 34 DD 25                  dw      PLUS_MINUS, SWAP        // +- swap
 670+ 34D8 22 25                        dw      R_TO                    // r>
 671+ 34DA 70 34 DD 25                  dw      PLUS_MINUS, SWAP        // +- swap
 672+ 34DE 0D 25                        dw      EXIT                    // ;
 673+ 34E0
 674+ 34E0              //  ______________________________________________________________________
 675+ 34E0              //
 676+ 34E0              // fm/mod       d n -- q r
 677+ 34E0              // Floored division: divides a double into n giving quotient q and remainder r
 678+ 34E0              // the remainder has the sign of d.
 679+ 34E0                              Colon_Def FMDIVM, "FM/MOD", is_normal
 679+ 34E0             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 679+ 34E0             >
 679+ 34E0             >Dict_Ptr        defl    $
 679+ 34E0             >
 679+ 34E0             >//              ______________________________________________________________________
 679+ 34E0             >//              Heap part
 679+ 34E0             >
 679+ 34E0             >
 679+ 34E0             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E9C3             >
 679+ E9C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E9C3             >Latest_Definition defl  Heap_Ptr
 679+ E9C3             >
 679+ E9C3             >                // dummy db directives used to calculate length of namec
 679+ E9C3 46 4D 2F 4D >                db      "FM/MOD"
 679+ E9C7 4F 44       >
 679+ E9C9             >len_NFA         defl    $ - temp_NFA
 679+ E9C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E9C3             >
 679+ E9C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E9C4 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 679+ E9C8 4F 44       >
 679+ E9CA             >                org     $-1                 // alter last byte of Name just above to set
 679+ E9C9 C4          >                db      {b $} | END_BIT     // msb as name end
 679+ E9CA             >
 679+ E9CA B8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E9CC             >Prev_Ptr        defl    Heap_Ptr
 679+ E9CC             >
 679+ E9CC             >mirror_Ptr      defl    $
 679+ E9CC             >
 679+ E9CC E2 34       >                dw      Dict_Ptr + 2        // xt
 679+ E9CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E9CE             >
 679+ E9CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E9CE             >
 679+ E9CE             >//              ______________________________________________________________________
 679+ E9CE             >//              Dictionary part
 679+ E9CE             >
 679+ E9CE             >                org     Dict_Ptr
 679+ 34E0             >
 679+ 34E0 CC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 34E2             >
 679+ 34E2             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 34E2 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 34E5             >
 679+ 34E5             >
 679+ 34E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 34E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 34E5             >
 679+ 34E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 34E5 E4 25 17 25                  dw      DUP, TO_R               // dup >r
 681+ 34E9 BD 34                        dw      SMDIVM
 682+ 34EB C0 25 E4 25                  dw      OVER, DUP
 683+ 34EF 32 25 32 25                  dw      ZEQUAL, ZEQUAL
 684+ 34F3 DD 25 44 25                  dw      SWAP, ZLESS
 685+ 34F7 2D 25 44 25                  dw      R_OP, ZLESS
 686+ 34FB E8 24 CD 24                  dw      XOR_OP, AND_OP
 687+ 34FF 8F 20                        dw      ZBRANCH
 688+ 3501 10 00                        dw      Fm_Mod_Else - $
 689+ 3503 7F 25                        dw          ONE_SUBTRACT
 690+ 3505 DD 25 22 25                  dw          SWAP, R_TO
 691+ 3509 5F 25 DD 25                  dw          PLUS, SWAP
 692+ 350D 82 20                        dw      BRANCH
 693+ 350F 06 00                        dw      Fm_Mod_Endif - $
 694+ 3511              Fm_Mod_Else:
 695+ 3511 22 25 C9 25                  dw          R_TO, DROP
 696+ 3515              Fm_Mod_Endif:
 697+ 3515 0D 25                        dw      EXIT
 698+ 3517              //              dw      TWO_DUP                 // 2dup
 699+ 3517              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 700+ 3517              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 701+ 3517              //              dw      UMDIVMOD                // um/mod
 702+ 3517              //              dw      SWAP                    // swap
 703+ 3517              //              dw      II, ZLESS               // i'
 704+ 3517              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 705+ 3517              //              dw      R_TO                    // r>
 706+ 3517              //              dw      PLUS_MINUS, SWAP        // +- swap
 707+ 3517              //              dw      R_OP                    // r@
 708+ 3517              //              dw      ZLESS                   // i'
 709+ 3517              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 710+ 3517              //              dw      R_TO                    // r>
 711+ 3517              //              dw      PLUS_MINUS              // +- swap
 712+ 3517              //              dw      EXIT                    // ;
 713+ 3517
 714+ 3517              //  ______________________________________________________________________
 715+ 3517              //
 716+ 3517              // m/mod        d n -- q r
 717+ 3517              // multiply two integer giving a double
 718+ 3517                              Colon_Def MDIVM, "M/MOD", is_normal
 718+ 3517             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 718+ 3517             >
 718+ 3517             >Dict_Ptr        defl    $
 718+ 3517             >
 718+ 3517             >//              ______________________________________________________________________
 718+ 3517             >//              Heap part
 718+ 3517             >
 718+ 3517             >
 718+ 3517             >                org     (Heap_Ptr & $1FFF) + $E000
 718+ E9CE             >
 718+ E9CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ E9CE             >Latest_Definition defl  Heap_Ptr
 718+ E9CE             >
 718+ E9CE             >                // dummy db directives used to calculate length of namec
 718+ E9CE 4D 2F 4D 4F >                db      "M/MOD"
 718+ E9D2 44          >
 718+ E9D3             >len_NFA         defl    $ - temp_NFA
 718+ E9D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ E9CE             >
 718+ E9CE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ E9CF 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 718+ E9D3 44          >
 718+ E9D4             >                org     $-1                 // alter last byte of Name just above to set
 718+ E9D3 C4          >                db      {b $} | END_BIT     // msb as name end
 718+ E9D4             >
 718+ E9D4 C3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 718+ E9D6             >Prev_Ptr        defl    Heap_Ptr
 718+ E9D6             >
 718+ E9D6             >mirror_Ptr      defl    $
 718+ E9D6             >
 718+ E9D6 19 35       >                dw      Dict_Ptr + 2        // xt
 718+ E9D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 718+ E9D8             >
 718+ E9D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 718+ E9D8             >
 718+ E9D8             >//              ______________________________________________________________________
 718+ E9D8             >//              Dictionary part
 718+ E9D8             >
 718+ E9D8             >                org     Dict_Ptr
 718+ 3517             >
 718+ 3517 D6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 718+ 3519             >
 718+ 3519             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 3519 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 351C             >
 718+ 351C             >
 718+ 351C             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 351C             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 351C             >
 718+ 351C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 351C BD 34                        dw      SMDIVM
 720+ 351E 0D 25                        dw      EXIT                    // ;
 721+ 3520
 722+ 3520              //  ______________________________________________________________________
 723+ 3520              //
 724+ 3520              // m/           d n -- q
 725+ 3520              // multiply two integer giving a double
 726+ 3520                              Colon_Def MDIV, "M/", is_normal
 726+ 3520             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 726+ 3520             >
 726+ 3520             >Dict_Ptr        defl    $
 726+ 3520             >
 726+ 3520             >//              ______________________________________________________________________
 726+ 3520             >//              Heap part
 726+ 3520             >
 726+ 3520             >
 726+ 3520             >                org     (Heap_Ptr & $1FFF) + $E000
 726+ E9D8             >
 726+ E9D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 726+ E9D8             >Latest_Definition defl  Heap_Ptr
 726+ E9D8             >
 726+ E9D8             >                // dummy db directives used to calculate length of namec
 726+ E9D8 4D 2F       >                db      "M/"
 726+ E9DA             >len_NFA         defl    $ - temp_NFA
 726+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 726+ E9D8             >
 726+ E9D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 726+ E9D9 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 726+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 726+ E9DA AF          >                db      {b $} | END_BIT     // msb as name end
 726+ E9DB             >
 726+ E9DB CE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 726+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 726+ E9DD             >
 726+ E9DD             >mirror_Ptr      defl    $
 726+ E9DD             >
 726+ E9DD 22 35       >                dw      Dict_Ptr + 2        // xt
 726+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 726+ E9DF             >
 726+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 726+ E9DF             >
 726+ E9DF             >//              ______________________________________________________________________
 726+ E9DF             >//              Dictionary part
 726+ E9DF             >
 726+ E9DF             >                org     Dict_Ptr
 726+ 3520             >
 726+ 3520 DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 726+ 3522             >
 726+ 3522             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 726+ 3522 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 726+ 3525             >
 726+ 3525             >
 726+ 3525             >                endif           ; ok        // for other definitions it "points" the correct handler
 726+ 3525             >                // Use of "; ok" to suppress "warning[fwdref]"
 726+ 3525             >
 726+ 3525             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 727+ 3525 19 35 CE 25                  dw      MDIVM, NIP
 728+ 3529 0D 25                        dw      EXIT                    // ;
 729+ 352B
 730+ 352B              //  ______________________________________________________________________
 731+ 352B              //
 732+ 352B              // *            n1 n2 -- n3
 733+ 352B              // multiply two integer
 734+ 352B                              Colon_Def MUL, "*", is_normal
 734+ 352B             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 734+ 352B             >
 734+ 352B             >Dict_Ptr        defl    $
 734+ 352B             >
 734+ 352B             >//              ______________________________________________________________________
 734+ 352B             >//              Heap part
 734+ 352B             >
 734+ 352B             >
 734+ 352B             >                org     (Heap_Ptr & $1FFF) + $E000
 734+ E9DF             >
 734+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 734+ E9DF             >Latest_Definition defl  Heap_Ptr
 734+ E9DF             >
 734+ E9DF             >                // dummy db directives used to calculate length of namec
 734+ E9DF 2A          >                db      "*"
 734+ E9E0             >len_NFA         defl    $ - temp_NFA
 734+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 734+ E9DF             >
 734+ E9DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 734+ E9E0 2A          >                db      "*"               // name string in 7-bit ascii, but
 734+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 734+ E9E0 AA          >                db      {b $} | END_BIT     // msb as name end
 734+ E9E1             >
 734+ E9E1 D8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 734+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 734+ E9E3             >
 734+ E9E3             >mirror_Ptr      defl    $
 734+ E9E3             >
 734+ E9E3 2D 35       >                dw      Dict_Ptr + 2        // xt
 734+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 734+ E9E5             >
 734+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 734+ E9E5             >
 734+ E9E5             >//              ______________________________________________________________________
 734+ E9E5             >//              Dictionary part
 734+ E9E5             >
 734+ E9E5             >                org     Dict_Ptr
 734+ 352B             >
 734+ 352B E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 734+ 352D             >
 734+ 352D             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 734+ 352D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 734+ 3530             >
 734+ 3530             >
 734+ 3530             >                endif           ; ok        // for other definitions it "points" the correct handler
 734+ 3530             >                // Use of "; ok" to suppress "warning[fwdref]"
 734+ 3530             >
 734+ 3530             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 735+ 3530 A4 34 C9 25                  dw      MMUL, DROP              // m* drop
 736+ 3534 0D 25                        dw      EXIT                    // ;
 737+ 3536
 738+ 3536              //  ______________________________________________________________________
 739+ 3536              //
 740+ 3536              // /mod         n1 n2 -- n3 n4
 741+ 3536              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 742+ 3536              // The remainder has the sign of n1
 743+ 3536                              Colon_Def DIVMOD, "/MOD", is_normal
 743+ 3536             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 743+ 3536             >
 743+ 3536             >Dict_Ptr        defl    $
 743+ 3536             >
 743+ 3536             >//              ______________________________________________________________________
 743+ 3536             >//              Heap part
 743+ 3536             >
 743+ 3536             >
 743+ 3536             >                org     (Heap_Ptr & $1FFF) + $E000
 743+ E9E5             >
 743+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ E9E5             >Latest_Definition defl  Heap_Ptr
 743+ E9E5             >
 743+ E9E5             >                // dummy db directives used to calculate length of namec
 743+ E9E5 2F 4D 4F 44 >                db      "/MOD"
 743+ E9E9             >len_NFA         defl    $ - temp_NFA
 743+ E9E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ E9E5             >
 743+ E9E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ E9E6 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 743+ E9EA             >                org     $-1                 // alter last byte of Name just above to set
 743+ E9E9 C4          >                db      {b $} | END_BIT     // msb as name end
 743+ E9EA             >
 743+ E9EA DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 743+ E9EC             >Prev_Ptr        defl    Heap_Ptr
 743+ E9EC             >
 743+ E9EC             >mirror_Ptr      defl    $
 743+ E9EC             >
 743+ E9EC 38 35       >                dw      Dict_Ptr + 2        // xt
 743+ E9EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 743+ E9EE             >
 743+ E9EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 743+ E9EE             >
 743+ E9EE             >//              ______________________________________________________________________
 743+ E9EE             >//              Dictionary part
 743+ E9EE             >
 743+ E9EE             >                org     Dict_Ptr
 743+ 3536             >
 743+ 3536 EC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 743+ 3538             >
 743+ 3538             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 3538 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 353B             >
 743+ 353B             >
 743+ 353B             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 353B             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 353B             >
 743+ 353B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 353B 17 25 A5 28                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 744+ 353F 22 25
 745+ 3541 19 35                        dw      MDIVM                   // m/mod
 746+ 3543 0D 25                        dw      EXIT                    // ;
 747+ 3545
 748+ 3545              //  ______________________________________________________________________
 749+ 3545              //
 750+ 3545              // /            n1 n2 -- n3
 751+ 3545              // division
 752+ 3545                              Colon_Def DIV, "/", is_normal
 752+ 3545             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 752+ 3545             >
 752+ 3545             >Dict_Ptr        defl    $
 752+ 3545             >
 752+ 3545             >//              ______________________________________________________________________
 752+ 3545             >//              Heap part
 752+ 3545             >
 752+ 3545             >
 752+ 3545             >                org     (Heap_Ptr & $1FFF) + $E000
 752+ E9EE             >
 752+ E9EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ E9EE             >Latest_Definition defl  Heap_Ptr
 752+ E9EE             >
 752+ E9EE             >                // dummy db directives used to calculate length of namec
 752+ E9EE 2F          >                db      "/"
 752+ E9EF             >len_NFA         defl    $ - temp_NFA
 752+ E9EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ E9EE             >
 752+ E9EE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ E9EF 2F          >                db      "/"               // name string in 7-bit ascii, but
 752+ E9F0             >                org     $-1                 // alter last byte of Name just above to set
 752+ E9EF AF          >                db      {b $} | END_BIT     // msb as name end
 752+ E9F0             >
 752+ E9F0 E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 752+ E9F2             >Prev_Ptr        defl    Heap_Ptr
 752+ E9F2             >
 752+ E9F2             >mirror_Ptr      defl    $
 752+ E9F2             >
 752+ E9F2 47 35       >                dw      Dict_Ptr + 2        // xt
 752+ E9F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 752+ E9F4             >
 752+ E9F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 752+ E9F4             >
 752+ E9F4             >//              ______________________________________________________________________
 752+ E9F4             >//              Dictionary part
 752+ E9F4             >
 752+ E9F4             >                org     Dict_Ptr
 752+ 3545             >
 752+ 3545 F2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 752+ 3547             >
 752+ 3547             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 3547 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 752+ 354A             >
 752+ 354A             >
 752+ 354A             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 354A             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 354A             >
 752+ 354A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 354A 38 35 CE 25                  dw      DIVMOD, NIP             // /mod nip
 754+ 354E 0D 25                        dw      EXIT                    // ;
 755+ 3550
 756+ 3550              //  ______________________________________________________________________
 757+ 3550              //
 758+ 3550              // mod          n1 n2 -- n3
 759+ 3550                              Colon_Def MOD, "MOD", is_normal
 759+ 3550             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 759+ 3550             >
 759+ 3550             >Dict_Ptr        defl    $
 759+ 3550             >
 759+ 3550             >//              ______________________________________________________________________
 759+ 3550             >//              Heap part
 759+ 3550             >
 759+ 3550             >
 759+ 3550             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ E9F4             >
 759+ E9F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ E9F4             >Latest_Definition defl  Heap_Ptr
 759+ E9F4             >
 759+ E9F4             >                // dummy db directives used to calculate length of namec
 759+ E9F4 4D 4F 44    >                db      "MOD"
 759+ E9F7             >len_NFA         defl    $ - temp_NFA
 759+ E9F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ E9F4             >
 759+ E9F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ E9F5 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 759+ E9F8             >                org     $-1                 // alter last byte of Name just above to set
 759+ E9F7 C4          >                db      {b $} | END_BIT     // msb as name end
 759+ E9F8             >
 759+ E9F8 EE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ E9FA             >Prev_Ptr        defl    Heap_Ptr
 759+ E9FA             >
 759+ E9FA             >mirror_Ptr      defl    $
 759+ E9FA             >
 759+ E9FA 52 35       >                dw      Dict_Ptr + 2        // xt
 759+ E9FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ E9FC             >
 759+ E9FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ E9FC             >
 759+ E9FC             >//              ______________________________________________________________________
 759+ E9FC             >//              Dictionary part
 759+ E9FC             >
 759+ E9FC             >                org     Dict_Ptr
 759+ 3550             >
 759+ 3550 FA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 3552             >
 759+ 3552             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 3552 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 3555             >
 759+ 3555             >
 759+ 3555             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 3555             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 3555             >
 759+ 3555             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 3555 38 35 C9 25                  dw      DIVMOD, DROP            // /mod drop
 761+ 3559 0D 25                        dw      EXIT                    // ;
 762+ 355B
 763+ 355B              //  ______________________________________________________________________
 764+ 355B              //
 765+ 355B              // */mod        n1 n2 n3 -- n4 n5
 766+ 355B              // leaves the quotient n5 and the remainder n4 of the operation
 767+ 355B              // (n1 * n2) / n3. The intermediate passage through a double number
 768+ 355B              // avoids loss of precision
 769+ 355B                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 769+ 355B             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 769+ 355B             >
 769+ 355B             >Dict_Ptr        defl    $
 769+ 355B             >
 769+ 355B             >//              ______________________________________________________________________
 769+ 355B             >//              Heap part
 769+ 355B             >
 769+ 355B             >
 769+ 355B             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ E9FC             >
 769+ E9FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ E9FC             >Latest_Definition defl  Heap_Ptr
 769+ E9FC             >
 769+ E9FC             >                // dummy db directives used to calculate length of namec
 769+ E9FC 2A 2F 4D 4F >                db      "*/MOD"
 769+ EA00 44          >
 769+ EA01             >len_NFA         defl    $ - temp_NFA
 769+ EA01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ E9FC             >
 769+ E9FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ E9FD 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 769+ EA01 44          >
 769+ EA02             >                org     $-1                 // alter last byte of Name just above to set
 769+ EA01 C4          >                db      {b $} | END_BIT     // msb as name end
 769+ EA02             >
 769+ EA02 F4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EA04             >Prev_Ptr        defl    Heap_Ptr
 769+ EA04             >
 769+ EA04             >mirror_Ptr      defl    $
 769+ EA04             >
 769+ EA04 5D 35       >                dw      Dict_Ptr + 2        // xt
 769+ EA06             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EA06             >
 769+ EA06             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EA06             >
 769+ EA06             >//              ______________________________________________________________________
 769+ EA06             >//              Dictionary part
 769+ EA06             >
 769+ EA06             >                org     Dict_Ptr
 769+ 355B             >
 769+ 355B 04 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 355D             >
 769+ 355D             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 355D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 3560             >
 769+ 3560             >
 769+ 3560             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 3560             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 3560             >
 769+ 3560             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 3560 17 25 A4 34                  dw      TO_R, MMUL              // >r  m*
 771+ 3564 22 25 19 35                  dw      R_TO, MDIVM             // r>  m/mod
 772+ 3568 0D 25                        dw      EXIT                    // ;
 773+ 356A
 774+ 356A              //  ______________________________________________________________________
 775+ 356A              //
 776+ 356A              // */          n1 n2 n3 -- n4
 777+ 356A              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 778+ 356A                              Colon_Def MUL_DIV, "*/", is_normal
 778+ 356A             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 778+ 356A             >
 778+ 356A             >Dict_Ptr        defl    $
 778+ 356A             >
 778+ 356A             >//              ______________________________________________________________________
 778+ 356A             >//              Heap part
 778+ 356A             >
 778+ 356A             >
 778+ 356A             >                org     (Heap_Ptr & $1FFF) + $E000
 778+ EA06             >
 778+ EA06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ EA06             >Latest_Definition defl  Heap_Ptr
 778+ EA06             >
 778+ EA06             >                // dummy db directives used to calculate length of namec
 778+ EA06 2A 2F       >                db      "*/"
 778+ EA08             >len_NFA         defl    $ - temp_NFA
 778+ EA08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ EA06             >
 778+ EA06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ EA07 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 778+ EA09             >                org     $-1                 // alter last byte of Name just above to set
 778+ EA08 AF          >                db      {b $} | END_BIT     // msb as name end
 778+ EA09             >
 778+ EA09 FC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 778+ EA0B             >Prev_Ptr        defl    Heap_Ptr
 778+ EA0B             >
 778+ EA0B             >mirror_Ptr      defl    $
 778+ EA0B             >
 778+ EA0B 6C 35       >                dw      Dict_Ptr + 2        // xt
 778+ EA0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 778+ EA0D             >
 778+ EA0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 778+ EA0D             >
 778+ EA0D             >//              ______________________________________________________________________
 778+ EA0D             >//              Dictionary part
 778+ EA0D             >
 778+ EA0D             >                org     Dict_Ptr
 778+ 356A             >
 778+ 356A 0B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 778+ 356C             >
 778+ 356C             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 356C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 778+ 356F             >
 778+ 356F             >
 778+ 356F             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 356F             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 356F             >
 778+ 356F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 356F 5D 35                        dw     MUL_DIV_MOD              // */mod
 780+ 3571 CE 25                        dw     NIP                      // nip
 781+ 3573 0D 25                        dw     EXIT                     // ;
 782+ 3575
 783+ 3575
 784+ 3575              //  ______________________________________________________________________
 785+ 3575              //
 786+ 3575              // m/mod        ud1 u2 -- u3 ud4
 787+ 3575              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 788+ 3575              // All terms are unsigned.
 789+ 3575              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 790+ 3575              //              dw      TO_R                    // >r           ( ud1 )
 791+ 3575              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 792+ 3575              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 793+ 3575              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 794+ 3575              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 795+ 3575              //              dw      EXIT                    // ;
 796+ 3575
 797+ 3575              //  ______________________________________________________________________
 798+ 3575              //
 799+ 3575              // (line)       n1 n2 -- a b
 800+ 3575              // sends the line n1 of block n2 to the disk buffer.
 801+ 3575              // it returns the address a and ca counter b = C/L meaning a whole line.
 802+ 3575                              Colon_Def CLINE, "(LINE)", is_normal
 802+ 3575             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 802+ 3575             >
 802+ 3575             >Dict_Ptr        defl    $
 802+ 3575             >
 802+ 3575             >//              ______________________________________________________________________
 802+ 3575             >//              Heap part
 802+ 3575             >
 802+ 3575             >
 802+ 3575             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ EA0D             >
 802+ EA0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ EA0D             >Latest_Definition defl  Heap_Ptr
 802+ EA0D             >
 802+ EA0D             >                // dummy db directives used to calculate length of namec
 802+ EA0D 28 4C 49 4E >                db      "(LINE)"
 802+ EA11 45 29       >
 802+ EA13             >len_NFA         defl    $ - temp_NFA
 802+ EA13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ EA0D             >
 802+ EA0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ EA0E 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 802+ EA12 45 29       >
 802+ EA14             >                org     $-1                 // alter last byte of Name just above to set
 802+ EA13 A9          >                db      {b $} | END_BIT     // msb as name end
 802+ EA14             >
 802+ EA14 06 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ EA16             >Prev_Ptr        defl    Heap_Ptr
 802+ EA16             >
 802+ EA16             >mirror_Ptr      defl    $
 802+ EA16             >
 802+ EA16 77 35       >                dw      Dict_Ptr + 2        // xt
 802+ EA18             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ EA18             >
 802+ EA18             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ EA18             >
 802+ EA18             >//              ______________________________________________________________________
 802+ EA18             >//              Dictionary part
 802+ EA18             >
 802+ EA18             >                org     Dict_Ptr
 802+ 3575             >
 802+ 3575 16 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 3577             >
 802+ 3577             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 3577 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 802+ 357A             >
 802+ 357A             >
 802+ 357A             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 357A             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 357A             >
 802+ 357A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 357A 17 25                        dw      TO_R                    // >r
 804+ 357C 76 27                        dw      CL                      // c/l
 805+ 357E 7D 27 5D 35                  dw      BBUF, MUL_DIV_MOD       // */mod
 806+ 3582 22 25                        dw      R_TO                    // r>
 807+ 3584 84 27 2D 35                  dw      BSCR, MUL, PLUS         // b/scr * +
 807+ 3588 5F 25
 808+ 358A 60 37                        dw      BLOCK                   // block   ( forward )
 809+ 358C 5F 25                        dw      PLUS                    // +
 810+ 358E 76 27                        dw      CL                      // c/l
 811+ 3590 0D 25                        dw      EXIT                    // ;
 812+ 3592
 813+ 3592              //  ______________________________________________________________________
 814+ 3592              //
 815+ 3592              // .line        n1 n2 --
 816+ 3592              // Sends to output line  n1  of screen n2.
 817+ 3592                              Colon_Def DOT_LINE, ".LINE", is_normal
 817+ 3592             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 817+ 3592             >
 817+ 3592             >Dict_Ptr        defl    $
 817+ 3592             >
 817+ 3592             >//              ______________________________________________________________________
 817+ 3592             >//              Heap part
 817+ 3592             >
 817+ 3592             >
 817+ 3592             >                org     (Heap_Ptr & $1FFF) + $E000
 817+ EA18             >
 817+ EA18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ EA18             >Latest_Definition defl  Heap_Ptr
 817+ EA18             >
 817+ EA18             >                // dummy db directives used to calculate length of namec
 817+ EA18 2E 4C 49 4E >                db      ".LINE"
 817+ EA1C 45          >
 817+ EA1D             >len_NFA         defl    $ - temp_NFA
 817+ EA1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ EA18             >
 817+ EA18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ EA19 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 817+ EA1D 45          >
 817+ EA1E             >                org     $-1                 // alter last byte of Name just above to set
 817+ EA1D C5          >                db      {b $} | END_BIT     // msb as name end
 817+ EA1E             >
 817+ EA1E 0D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 817+ EA20             >Prev_Ptr        defl    Heap_Ptr
 817+ EA20             >
 817+ EA20             >mirror_Ptr      defl    $
 817+ EA20             >
 817+ EA20 94 35       >                dw      Dict_Ptr + 2        // xt
 817+ EA22             >Heap_Ptr        defl    $ - $E000           // save current HP
 817+ EA22             >
 817+ EA22             >Current_HP      defl  $ - $E000             // used to set HP once!
 817+ EA22             >
 817+ EA22             >//              ______________________________________________________________________
 817+ EA22             >//              Dictionary part
 817+ EA22             >
 817+ EA22             >                org     Dict_Ptr
 817+ 3592             >
 817+ 3592 20 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 817+ 3594             >
 817+ 3594             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 3594 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 3597             >
 817+ 3597             >
 817+ 3597             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 3597             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 3597             >
 817+ 3597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 3597 77 35 54 2C                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 818+ 359B 3D 2C
 819+ 359D 0D 25                        dw      EXIT                    // ;
 820+ 359F
 821+ 359F              //  ______________________________________________________________________
 822+ 359F              //
 823+ 359F              // message       n1 n2 --
 824+ 359F              // prints error message to current channel.
 825+ 359F              // if WARNING is 0, prints "MSG#n".
 826+ 359F              // if WARNING is 1, prints line n of screen 4.
 827+ 359F              // if WARNING is -1, see ERROR
 828+ 359F              // value can be negative or beyond block 4.
 829+ 359F                              Colon_Def MESSAGE, "MESSAGE", is_normal
 829+ 359F             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 829+ 359F             >
 829+ 359F             >Dict_Ptr        defl    $
 829+ 359F             >
 829+ 359F             >//              ______________________________________________________________________
 829+ 359F             >//              Heap part
 829+ 359F             >
 829+ 359F             >
 829+ 359F             >                org     (Heap_Ptr & $1FFF) + $E000
 829+ EA22             >
 829+ EA22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 829+ EA22             >Latest_Definition defl  Heap_Ptr
 829+ EA22             >
 829+ EA22             >                // dummy db directives used to calculate length of namec
 829+ EA22 4D 45 53 53 >                db      "MESSAGE"
 829+ EA26 41 47 45    >
 829+ EA29             >len_NFA         defl    $ - temp_NFA
 829+ EA29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 829+ EA22             >
 829+ EA22 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 829+ EA23 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 829+ EA27 41 47 45    >
 829+ EA2A             >                org     $-1                 // alter last byte of Name just above to set
 829+ EA29 C5          >                db      {b $} | END_BIT     // msb as name end
 829+ EA2A             >
 829+ EA2A 18 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 829+ EA2C             >Prev_Ptr        defl    Heap_Ptr
 829+ EA2C             >
 829+ EA2C             >mirror_Ptr      defl    $
 829+ EA2C             >
 829+ EA2C A1 35       >                dw      Dict_Ptr + 2        // xt
 829+ EA2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 829+ EA2E             >
 829+ EA2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 829+ EA2E             >
 829+ EA2E             >//              ______________________________________________________________________
 829+ EA2E             >//              Dictionary part
 829+ EA2E             >
 829+ EA2E             >                org     Dict_Ptr
 829+ 359F             >
 829+ 359F 2C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 829+ 35A1             >
 829+ 35A1             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 829+ 35A1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 829+ 35A4             >
 829+ 35A4             >
 829+ 35A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 829+ 35A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 829+ 35A4             >
 829+ 35A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 830+ 35A4 BD 27 55 26                  dw      WARNING, FETCH          // warning @
 831+ 35A8                                                              // if
 832+ 35A8 8F 20                        dw      ZBRANCH
 833+ 35AA 12 00                        dw      Message_Else - $
 834+ 35AC 3D 20 20 00                  dw          LIT, 32, PLUS       //      32 +
 834+ 35B0 5F 25
 835+ 35B2 5A 27                        dw          TWO                 //      2
 836+ 35B4 94 35                        dw          DOT_LINE            //      .line
 837+ 35B6 42 29                        dw          SPACE               //      space
 838+ 35B8                                                              // else
 839+ 35B8
 840+ 35B8 82 20                        dw      BRANCH
 841+ 35BA 0B 00                        dw      Message_ENdif - $
 842+ 35BC              Message_Else:
 843+ 35BC DA 2D                        dw          C_DOT_QUOTE         //      .( msg#)
 844+ 35BE 04 6D 73 67                  db          4, "msg#"
 844+ 35C2 23
 845+ 35C3 B3 3C                        dw          DOT                 //      .  ( forward )
 846+ 35C5              Message_ENdif:                                  // endif
 847+ 35C5 0D 25                        dw      EXIT                    // ;
 848+ 35C7
 849+ 35C7
 850+ 35C7              //  ______________________________________________________________________
 851+ 35C7              //
 852+ 35C7              // device
 853+ 35C7                              Variable_Def DEVICE,   "DEVICE",   2
 853+ 35C7             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 853+ 35C7             >
 853+ 35C7             >Dict_Ptr        defl    $
 853+ 35C7             >
 853+ 35C7             >//              ______________________________________________________________________
 853+ 35C7             >//              Heap part
 853+ 35C7             >
 853+ 35C7             >
 853+ 35C7             >                org     (Heap_Ptr & $1FFF) + $E000
 853+ EA2E             >
 853+ EA2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 853+ EA2E             >Latest_Definition defl  Heap_Ptr
 853+ EA2E             >
 853+ EA2E             >                // dummy db directives used to calculate length of namec
 853+ EA2E 44 45 56 49 >                db      "DEVICE"
 853+ EA32 43 45       >
 853+ EA34             >len_NFA         defl    $ - temp_NFA
 853+ EA34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 853+ EA2E             >
 853+ EA2E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 853+ EA2F 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 853+ EA33 43 45       >
 853+ EA35             >                org     $-1                 // alter last byte of Name just above to set
 853+ EA34 C5          >                db      {b $} | END_BIT     // msb as name end
 853+ EA35             >
 853+ EA35 22 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 853+ EA37             >Prev_Ptr        defl    Heap_Ptr
 853+ EA37             >
 853+ EA37             >mirror_Ptr      defl    $
 853+ EA37             >
 853+ EA37 C9 35       >                dw      Dict_Ptr + 2        // xt
 853+ EA39             >Heap_Ptr        defl    $ - $E000           // save current HP
 853+ EA39             >
 853+ EA39             >Current_HP      defl  $ - $E000             // used to set HP once!
 853+ EA39             >
 853+ EA39             >//              ______________________________________________________________________
 853+ EA39             >//              Dictionary part
 853+ EA39             >
 853+ EA39             >                org     Dict_Ptr
 853+ 35C7             >
 853+ 35C7 37 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 853+ 35C9             >
 853+ 35C9             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 853+ 35C9 CD 33 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 853+ 35CC             >
 853+ 35CC             >
 853+ 35CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 853+ 35CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 853+ 35CC             >
 853+ 35CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 35CC 02 00       >                dw      2
 854+ 35CE
 855+ 35CE              //  ______________________________________________________________________
 856+ 35CE
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L2.asm
 124  35CE                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
   1+ 35CE              //  ______________________________________________________________________
   2+ 35CE              //
   3+ 35CE              //  next-opt.asm
   4+ 35CE              //
   5+ 35CE              //  ZX Spectrum Next - peculiar definitions
   6+ 35CE              //  ______________________________________________________________________
   7+ 35CE
   8+ 35CE              //  ______________________________________________________________________
   9+ 35CE              //
  10+ 35CE              // reg@         n -- b
  11+ 35CE              // read Next REGister n giving byte b
  12+ 35CE              //
  13+ 35CE              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 35CE              //              dw      LIT, $243B
  15+ 35CE              //              dw      PSTORE
  16+ 35CE              //              dw      LIT, $253B
  17+ 35CE              //              dw      PFETCH
  18+ 35CE              //              dw      EXIT
  19+ 35CE                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 35CE             >
  19+ 35CE             >Dict_Ptr        defl    $
  19+ 35CE             >
  19+ 35CE             >//              ______________________________________________________________________
  19+ 35CE             >//              Heap part
  19+ 35CE             >
  19+ 35CE             >
  19+ 35CE             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA39             >
  19+ EA39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA39             >Latest_Definition defl  Heap_Ptr
  19+ EA39             >
  19+ EA39             >                // dummy db directives used to calculate length of namec
  19+ EA39 52 45 47 40 >                db      "REG@"
  19+ EA3D             >len_NFA         defl    $ - temp_NFA
  19+ EA3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA39             >
  19+ EA39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3A 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA3E             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3D C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA3E             >
  19+ EA3E 2E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA40             >Prev_Ptr        defl    Heap_Ptr
  19+ EA40             >
  19+ EA40             >mirror_Ptr      defl    $
  19+ EA40             >
  19+ EA40 D0 35       >                dw      Dict_Ptr + 2        // xt
  19+ EA42             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA42             >
  19+ EA42             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA42             >
  19+ EA42             >//              ______________________________________________________________________
  19+ EA42             >//              Dictionary part
  19+ EA42             >
  19+ EA42             >                org     Dict_Ptr
  19+ 35CE             >
  19+ 35CE 40 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 35D0             >
  19+ 35D0             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 35D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 35D0 ~           >
  19+ 35D0 ~           >
  19+ 35D0             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 35D0             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 35D0             >
  19+ 35D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 35D0 D9                           exx
  21+ 35D1 01 3B 24                     ld      bc, $243B
  22+ 35D4 E1                           pop     hl
  23+ 35D5 ED 69                        out     (c), l
  24+ 35D7 04                           inc     b
  25+ 35D8 ED 68                        in      l, (c)
  26+ 35DA E5                           push    hl
  27+ 35DB D9                           exx
  28+ 35DC                              next
  28+ 35DC DD E9       >                jp      (ix)
  29+ 35DE
  30+ 35DE
  31+ 35DE              //  ______________________________________________________________________
  32+ 35DE              //
  33+ 35DE              // reg!         b n --
  34+ 35DE              // write value b to Next REGister n
  35+ 35DE              //
  36+ 35DE              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 35DE              //              dw      LIT, $243B
  38+ 35DE              //              dw      PSTORE
  39+ 35DE              //              dw      LIT, $253B
  40+ 35DE              //              dw      PSTORE
  41+ 35DE              //              dw      EXIT
  42+ 35DE                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 35DE             >
  42+ 35DE             >Dict_Ptr        defl    $
  42+ 35DE             >
  42+ 35DE             >//              ______________________________________________________________________
  42+ 35DE             >//              Heap part
  42+ 35DE             >
  42+ 35DE             >
  42+ 35DE             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA42             >
  42+ EA42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA42             >Latest_Definition defl  Heap_Ptr
  42+ EA42             >
  42+ EA42             >                // dummy db directives used to calculate length of namec
  42+ EA42 52 45 47 21 >                db      "REG!"
  42+ EA46             >len_NFA         defl    $ - temp_NFA
  42+ EA46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA42             >
  42+ EA42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA43 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA47             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA46 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA47             >
  42+ EA47 39 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA49             >Prev_Ptr        defl    Heap_Ptr
  42+ EA49             >
  42+ EA49             >mirror_Ptr      defl    $
  42+ EA49             >
  42+ EA49 E0 35       >                dw      Dict_Ptr + 2        // xt
  42+ EA4B             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4B             >
  42+ EA4B             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4B             >
  42+ EA4B             >//              ______________________________________________________________________
  42+ EA4B             >//              Dictionary part
  42+ EA4B             >
  42+ EA4B             >                org     Dict_Ptr
  42+ 35DE             >
  42+ 35DE 49 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 35E0             >
  42+ 35E0             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 35E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 35E0 ~           >
  42+ 35E0 ~           >
  42+ 35E0             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 35E0             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 35E0             >
  42+ 35E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 35E0 D9                           exx
  44+ 35E1 01 3B 24                     ld      bc, $243B
  45+ 35E4 E1                           pop     hl
  46+ 35E5 ED 69                        out     (c), l
  47+ 35E7 04                           inc     b
  48+ 35E8 E1                           pop     hl
  49+ 35E9 ED 69                        out     (c), l
  50+ 35EB D9                           exx
  51+ 35EC                              next
  51+ 35EC DD E9       >                jp      (ix)
  52+ 35EE
  53+ 35EE
  54+ 35EE              //  ______________________________________________________________________
  55+ 35EE              //
  56+ 35EE              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 35EE              // NextZXOS call wrapper.
  58+ 35EE              //  n1 = hl register parameter value
  59+ 35EE              //  n2 = de register parameter value
  60+ 35EE              //  n3 = bc register parameter value
  61+ 35EE              //  n4 =  a register parameter value
  62+ 35EE              //   a = routine address in ROM 3
  63+ 35EE              // ----
  64+ 35EE              //  n5 = hl returned value
  65+ 35EE              //  n6 = de returned value
  66+ 35EE              //  n7 = bc returned value
  67+ 35EE              //  n8 =  a returned value
  68+ 35EE              //   f
  69+ 35EE                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 35EE             >
  69+ 35EE             >Dict_Ptr        defl    $
  69+ 35EE             >
  69+ 35EE             >//              ______________________________________________________________________
  69+ 35EE             >//              Heap part
  69+ 35EE             >
  69+ 35EE             >
  69+ 35EE             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4B             >
  69+ EA4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4B             >Latest_Definition defl  Heap_Ptr
  69+ EA4B             >
  69+ EA4B             >                // dummy db directives used to calculate length of namec
  69+ EA4B 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA4F 44 4F 53    >
  69+ EA52             >len_NFA         defl    $ - temp_NFA
  69+ EA52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4B             >
  69+ EA4B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4C 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA50 44 4F 53    >
  69+ EA53             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA52 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA53             >
  69+ EA53 42 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA55             >Prev_Ptr        defl    Heap_Ptr
  69+ EA55             >
  69+ EA55             >mirror_Ptr      defl    $
  69+ EA55             >
  69+ EA55 F0 35       >                dw      Dict_Ptr + 2        // xt
  69+ EA57             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA57             >
  69+ EA57             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA57             >
  69+ EA57             >//              ______________________________________________________________________
  69+ EA57             >//              Dictionary part
  69+ EA57             >
  69+ EA57             >                org     Dict_Ptr
  69+ 35EE             >
  69+ 35EE 55 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 35F0             >
  69+ 35F0             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 35F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 35F0 ~           >
  69+ 35F0 ~           >
  69+ 35F0             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 35F0             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 35F0             >
  69+ 35F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 35F0 D9                            exx
  71+ 35F1 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 35F2 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 35F3 7B                            ld      a, e
  74+ 35F4 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 35F5 D1                            pop     de                  // de' argument              //  n1
  76+ 35F6 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 35F7 D9                           exx
  78+ 35F8 E1                           pop     hl                  // entry address a
  79+ 35F9 DD E5                        push    ix
  80+ 35FB D5                           push    de
  81+ 35FC C5                           push    bc
  82+ 35FD EB                           ex      de, hl              // de is entry address
  83+ 35FE              //              ld      (SP_Saved), sp
  84+ 35FE              //              ld      sp, Cold_origin - 5
  85+ 35FE              //              ld      sp, TSTACK          // Carefully balanced from startup
  86+ 35FE 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 3600 F3                           di
  88+ 3601 CF                           rst     08
  89+ 3602 94                           db      $94
  90+ 3603 FB                           ei
  91+ 3604                      ////    ld      a, (Saved_MMU + 1)
  92+ 3604                      ////    nextreg $53, a            // some calls reset MMU3 to $11 !
  93+ 3604
  94+ 3604              //              ld      sp, (SP_Saved)
  95+ 3604              //              push    ix
  96+ 3604              //              pop     hl
  97+ 3604              //              ld      (IX_Echo), hl
  98+ 3604 DD 22 32 20                  ld      (IX_Echo), ix
  99+ 3608
 100+ 3608 D9                           exx
 101+ 3609 C1                           pop     bc
 102+ 360A D1                           pop     de
 103+ 360B DD E1                        pop     ix
 104+ 360D D9                            exx
 105+ 360E E5                            push    hl
 106+ 360F D5                            push    de
 107+ 3610 C5                            push    bc
 108+ 3611 26 00                         ld      h, 0
 109+ 3613 6F                            ld      l, a
 110+ 3614 E5                            push    hl
 111+ 3615 D9                           exx
 112+ 3616 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 3618 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 3619 E5                           push    hl
 115+ 361A                              next
 115+ 361A DD E9       >                jp      (ix)
 116+ 361C
 117+ 361C              //  ______________________________________________________________________
 118+ 361C              //
 119+ 361C              // blk-fh
 120+ 361C              //              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 361C              //
 122+ 361C              //              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 361C              // Len_Filename:   db      30
 124+ 361C              // Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
 125+ 361C              //                 ds      32
 126+ 361C
 127+ 361C              //  ______________________________________________________________________
 128+ 361C              //
 129+ 361C              // blk-seek     n --
 130+ 361C              // seek block n  within blocks!.bin  file
 131+ 361C                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 131+ 361C             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 131+ 361C             >
 131+ 361C             >Dict_Ptr        defl    $
 131+ 361C             >
 131+ 361C             >//              ______________________________________________________________________
 131+ 361C             >//              Heap part
 131+ 361C             >
 131+ 361C             >
 131+ 361C             >                org     (Heap_Ptr & $1FFF) + $E000
 131+ EA57             >
 131+ EA57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 131+ EA57             >Latest_Definition defl  Heap_Ptr
 131+ EA57             >
 131+ EA57             >                // dummy db directives used to calculate length of namec
 131+ EA57 42 4C 4B 2D >                db      "BLK-SEEK"
 131+ EA5B 53 45 45 4B >
 131+ EA5F             >len_NFA         defl    $ - temp_NFA
 131+ EA5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 131+ EA57             >
 131+ EA57 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 131+ EA58 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 131+ EA5C 53 45 45 4B >
 131+ EA60             >                org     $-1                 // alter last byte of Name just above to set
 131+ EA5F CB          >                db      {b $} | END_BIT     // msb as name end
 131+ EA60             >
 131+ EA60 4B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 131+ EA62             >Prev_Ptr        defl    Heap_Ptr
 131+ EA62             >
 131+ EA62             >mirror_Ptr      defl    $
 131+ EA62             >
 131+ EA62 1E 36       >                dw      Dict_Ptr + 2        // xt
 131+ EA64             >Heap_Ptr        defl    $ - $E000           // save current HP
 131+ EA64             >
 131+ EA64             >Current_HP      defl  $ - $E000             // used to set HP once!
 131+ EA64             >
 131+ EA64             >//              ______________________________________________________________________
 131+ EA64             >//              Dictionary part
 131+ EA64             >
 131+ EA64             >                org     Dict_Ptr
 131+ 361C             >
 131+ 361C 62 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 131+ 361E             >
 131+ 361E             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 131+ 361E CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 131+ 3621             >
 131+ 3621             >
 131+ 3621             >                endif           ; ok        // for other definitions it "points" the correct handler
 131+ 3621             >                // Use of "; ok" to suppress "warning[fwdref]"
 131+ 3621             >
 131+ 3621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 132+ 3621 7D 27 A4 34                  dw  BBUF, MMUL
 133+ 3625 6B 3F 55 26                  dw  BLK_FH, FETCH
 134+ 3629 89 23                        dw  F_SEEK
 135+ 362B 3D 20 2D 00                  dw  LIT, $2D, QERROR
 135+ 362F AD 2A
 136+ 3631 0D 25                        dw  EXIT
 137+ 3633
 138+ 3633              //  ______________________________________________________________________
 139+ 3633              //
 140+ 3633              // blk-read     n --
 141+ 3633              // seek block n  within blocks!.bin  file
 142+ 3633                              Colon_Def BLK_READ, "BLK-READ", is_normal
 142+ 3633             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 142+ 3633             >
 142+ 3633             >Dict_Ptr        defl    $
 142+ 3633             >
 142+ 3633             >//              ______________________________________________________________________
 142+ 3633             >//              Heap part
 142+ 3633             >
 142+ 3633             >
 142+ 3633             >                org     (Heap_Ptr & $1FFF) + $E000
 142+ EA64             >
 142+ EA64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 142+ EA64             >Latest_Definition defl  Heap_Ptr
 142+ EA64             >
 142+ EA64             >                // dummy db directives used to calculate length of namec
 142+ EA64 42 4C 4B 2D >                db      "BLK-READ"
 142+ EA68 52 45 41 44 >
 142+ EA6C             >len_NFA         defl    $ - temp_NFA
 142+ EA6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 142+ EA64             >
 142+ EA64 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ EA65 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 142+ EA69 52 45 41 44 >
 142+ EA6D             >                org     $-1                 // alter last byte of Name just above to set
 142+ EA6C C4          >                db      {b $} | END_BIT     // msb as name end
 142+ EA6D             >
 142+ EA6D 57 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 142+ EA6F             >Prev_Ptr        defl    Heap_Ptr
 142+ EA6F             >
 142+ EA6F             >mirror_Ptr      defl    $
 142+ EA6F             >
 142+ EA6F 35 36       >                dw      Dict_Ptr + 2        // xt
 142+ EA71             >Heap_Ptr        defl    $ - $E000           // save current HP
 142+ EA71             >
 142+ EA71             >Current_HP      defl  $ - $E000             // used to set HP once!
 142+ EA71             >
 142+ EA71             >//              ______________________________________________________________________
 142+ EA71             >//              Dictionary part
 142+ EA71             >
 142+ EA71             >                org     Dict_Ptr
 142+ 3633             >
 142+ 3633 6F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 142+ 3635             >
 142+ 3635             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 142+ 3635 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 142+ 3638             >
 142+ 3638             >
 142+ 3638             >                endif           ; ok        // for other definitions it "points" the correct handler
 142+ 3638             >                // Use of "; ok" to suppress "warning[fwdref]"
 142+ 3638             >
 142+ 3638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 143+ 3638 1E 36                        dw  BLK_SEEK
 144+ 363A 7D 27                        dw  BBUF
 145+ 363C 6B 3F 55 26                  dw  BLK_FH, FETCH
 146+ 3640 DA 23                        dw  F_READ
 147+ 3642 3D 20 2E 00                  dw  LIT, $2E, QERROR
 147+ 3646 AD 2A
 148+ 3648 C9 25                        dw  DROP
 149+ 364A 0D 25                        dw  EXIT
 150+ 364C
 151+ 364C              //  ______________________________________________________________________
 152+ 364C              //
 153+ 364C              // blk-write     n --
 154+ 364C              // seek block n  within blocks!.bin  file
 155+ 364C                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 155+ 364C             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 155+ 364C             >
 155+ 364C             >Dict_Ptr        defl    $
 155+ 364C             >
 155+ 364C             >//              ______________________________________________________________________
 155+ 364C             >//              Heap part
 155+ 364C             >
 155+ 364C             >
 155+ 364C             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ EA71             >
 155+ EA71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ EA71             >Latest_Definition defl  Heap_Ptr
 155+ EA71             >
 155+ EA71             >                // dummy db directives used to calculate length of namec
 155+ EA71 42 4C 4B 2D >                db      "BLK-WRITE"
 155+ EA75 57 52 49 54 >
 155+ EA79 45          >
 155+ EA7A             >len_NFA         defl    $ - temp_NFA
 155+ EA7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ EA71             >
 155+ EA71 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ EA72 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 155+ EA76 57 52 49 54 >
 155+ EA7A 45          >
 155+ EA7B             >                org     $-1                 // alter last byte of Name just above to set
 155+ EA7A C5          >                db      {b $} | END_BIT     // msb as name end
 155+ EA7B             >
 155+ EA7B 64 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ EA7D             >Prev_Ptr        defl    Heap_Ptr
 155+ EA7D             >
 155+ EA7D             >mirror_Ptr      defl    $
 155+ EA7D             >
 155+ EA7D 4E 36       >                dw      Dict_Ptr + 2        // xt
 155+ EA7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ EA7F             >
 155+ EA7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ EA7F             >
 155+ EA7F             >//              ______________________________________________________________________
 155+ EA7F             >//              Dictionary part
 155+ EA7F             >
 155+ EA7F             >                org     Dict_Ptr
 155+ 364C             >
 155+ 364C 7D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 364E             >
 155+ 364E             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 364E CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 3651             >
 155+ 3651             >
 155+ 3651             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 3651             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 3651             >
 155+ 3651             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 3651 1E 36                        dw  BLK_SEEK
 157+ 3653 7D 27                        dw  BBUF
 158+ 3655 6B 3F 55 26                  dw  BLK_FH, FETCH
 159+ 3659 FA 23                        dw  F_WRITE
 160+ 365B 3D 20 2F 00                  dw  LIT, $2F, QERROR
 160+ 365F AD 2A
 161+ 3661 C9 25                        dw  DROP
 162+ 3663 0D 25                        dw  EXIT
 163+ 3665
 164+ 3665              //  ______________________________________________________________________
 165+ 3665              //
 166+ 3665              // blk-init     n --
 167+ 3665              // seek block n  within blocks!.bin  file
 168+ 3665                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 168+ 3665             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 168+ 3665             >
 168+ 3665             >Dict_Ptr        defl    $
 168+ 3665             >
 168+ 3665             >//              ______________________________________________________________________
 168+ 3665             >//              Heap part
 168+ 3665             >
 168+ 3665             >
 168+ 3665             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ EA7F             >
 168+ EA7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ EA7F             >Latest_Definition defl  Heap_Ptr
 168+ EA7F             >
 168+ EA7F             >                // dummy db directives used to calculate length of namec
 168+ EA7F 42 4C 4B 2D >                db      "BLK-INIT"
 168+ EA83 49 4E 49 54 >
 168+ EA87             >len_NFA         defl    $ - temp_NFA
 168+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ EA7F             >
 168+ EA7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ EA80 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 168+ EA84 49 4E 49 54 >
 168+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 168+ EA87 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ EA88             >
 168+ EA88 71 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 168+ EA8A             >
 168+ EA8A             >mirror_Ptr      defl    $
 168+ EA8A             >
 168+ EA8A 67 36       >                dw      Dict_Ptr + 2        // xt
 168+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ EA8C             >
 168+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ EA8C             >
 168+ EA8C             >//              ______________________________________________________________________
 168+ EA8C             >//              Dictionary part
 168+ EA8C             >
 168+ EA8C             >                org     Dict_Ptr
 168+ 3665             >
 168+ 3665 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 3667             >
 168+ 3667             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 3667 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 168+ 366A             >
 168+ 366A             >
 168+ 366A             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 366A             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 366A             >
 168+ 366A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 366A 6B 3F 55 26                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 169+ 366E A6 23 C9 25
 170+ 3672 72 3F 78 25                  dw  BLK_FNAME, ONE_PLUS
 171+ 3676 71 28 61 27                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 171+ 367A 0E 24
 172+ 367C                          //    dw  LIT, $2C, QERROR
 173+ 367C
 174+ 367C 8F 20                        dw  ZBRANCH
 175+ 367E 0E 00                        dw  Blk_Init_Endif - $
 176+ 3680
 177+ 3680 3D 20 CF FF                  dw  LIT, $FFCF
 178+ 3684 3D 20 6B 34                  dw  LIT, Exit_with_error
 179+ 3688 5F 26                        dw  STORE
 180+ 368A
 181+ 368A 29 34                        dw  BASIC
 182+ 368C              Blk_Init_Endif:
 183+ 368C
 184+ 368C 6B 3F 5F 26                  dw  BLK_FH, STORE
 185+ 3690 0D 25                        dw  EXIT
 186+ 3692
 187+ 3692              //  ______________________________________________________________________
 188+ 3692              //
 189+ 3692              // #sec
 190+ 3692              // number of 512-Byte "sectors" available on thie sysstem.
 191+ 3692              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 192+ 3692
 193+ 3692                              Constant_Def NSEC , "#SEC", 32767
 193+ 3692             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 193+ 3692             >
 193+ 3692             >Dict_Ptr        defl    $
 193+ 3692             >
 193+ 3692             >//              ______________________________________________________________________
 193+ 3692             >//              Heap part
 193+ 3692             >
 193+ 3692             >
 193+ 3692             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ EA8C             >
 193+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ EA8C             >Latest_Definition defl  Heap_Ptr
 193+ EA8C             >
 193+ EA8C             >                // dummy db directives used to calculate length of namec
 193+ EA8C 23 53 45 43 >                db      "#SEC"
 193+ EA90             >len_NFA         defl    $ - temp_NFA
 193+ EA90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ EA8C             >
 193+ EA8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ EA8D 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 193+ EA91             >                org     $-1                 // alter last byte of Name just above to set
 193+ EA90 C3          >                db      {b $} | END_BIT     // msb as name end
 193+ EA91             >
 193+ EA91 7F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ EA93             >Prev_Ptr        defl    Heap_Ptr
 193+ EA93             >
 193+ EA93             >mirror_Ptr      defl    $
 193+ EA93             >
 193+ EA93 94 36       >                dw      Dict_Ptr + 2        // xt
 193+ EA95             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ EA95             >
 193+ EA95             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ EA95             >
 193+ EA95             >//              ______________________________________________________________________
 193+ EA95             >//              Dictionary part
 193+ EA95             >
 193+ EA95             >                org     Dict_Ptr
 193+ 3692             >
 193+ 3692 93 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 3694             >
 193+ 3694             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 3694 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 193+ 3697             >
 193+ 3697             >
 193+ 3697             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 3697             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 3697             >
 193+ 3697             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 193+ 3697 FF 7F       >                dw      32767
 194+ 3699
 195+ 3699              //  ______________________________________________________________________
 196+ 3699
 197+ 3699
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/next-opt1.asm
 125  3699                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
   1+ 3699              //  ______________________________________________________________________
   2+ 3699              //
   3+ 3699              //  L3.asm
   4+ 3699              //
   5+ 3699              //  Continuation of L2.asm
   6+ 3699              //  I/O Block definitions
   7+ 3699              //  ______________________________________________________________________
   8+ 3699
   9+ 3699
  10+ 3699              //  ______________________________________________________________________
  11+ 3699              //
  12+ 3699              // r/w          a n f --
  13+ 3699              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 3699                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 3699             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 3699             >
  14+ 3699             >Dict_Ptr        defl    $
  14+ 3699             >
  14+ 3699             >//              ______________________________________________________________________
  14+ 3699             >//              Heap part
  14+ 3699             >
  14+ 3699             >
  14+ 3699             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA95             >
  14+ EA95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA95             >Latest_Definition defl  Heap_Ptr
  14+ EA95             >
  14+ EA95             >                // dummy db directives used to calculate length of namec
  14+ EA95 52 2F 57    >                db      "R/W"
  14+ EA98             >len_NFA         defl    $ - temp_NFA
  14+ EA98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA95             >
  14+ EA95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA96 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA99             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA98 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA99             >
  14+ EA99 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA9B             >Prev_Ptr        defl    Heap_Ptr
  14+ EA9B             >
  14+ EA9B             >mirror_Ptr      defl    $
  14+ EA9B             >
  14+ EA9B 9B 36       >                dw      Dict_Ptr + 2        // xt
  14+ EA9D             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA9D             >
  14+ EA9D             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA9D             >
  14+ EA9D             >//              ______________________________________________________________________
  14+ EA9D             >//              Dictionary part
  14+ EA9D             >
  14+ EA9D             >                org     Dict_Ptr
  14+ 3699             >
  14+ 3699 9B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 369B             >
  14+ 369B             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 369B CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 369E             >
  14+ 369E             >
  14+ 369E             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 369E             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 369E             >
  14+ 369E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 369E 17 25                        dw      TO_R                    // >r
  16+ 36A0 7F 25                        dw      ONE_SUBTRACT            // 1-
  17+ 36A2 E4 25 44 25                  dw      DUP, ZLESS              // dup 0<
  18+ 36A6 C0 25 94 36                  dw      OVER, NSEC              // over #sec
  19+ 36AA 7F 25 EA 28                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 36AE DC 24                        dw      OR_OP                   // or
  21+ 36B0 3D 20 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 36B4 AD 2A
  22+ 36B6 22 25                        dw      R_TO                    // r>
  23+ 36B8                                                              // if
  24+ 36B8 8F 20                        dw      ZBRANCH
  25+ 36BA 08 00                        dw      Read_Write_Else - $
  26+ 36BC 35 36                        dw          BLK_READ            //      blk-read
  27+ 36BE 82 20                        dw      BRANCH
  28+ 36C0 04 00                        dw      Read_Write_Endif - $
  29+ 36C2              Read_Write_Else:                                // else
  30+ 36C2 4E 36                        dw          BLK_WRITE           //      blk-write
  31+ 36C4              Read_Write_Endif:                               // endif
  32+ 36C4 0D 25                        dw      EXIT                    // ;
  33+ 36C6
  34+ 36C6
  35+ 36C6              //  ______________________________________________________________________
  36+ 36C6              //
  37+ 36C6              // +buf        a1 -- a2 f
  38+ 36C6              // advences to next buffer, cyclically rotating along them
  39+ 36C6                              Colon_Def PBUF, "+BUF", is_normal
  39+ 36C6             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 36C6             >
  39+ 36C6             >Dict_Ptr        defl    $
  39+ 36C6             >
  39+ 36C6             >//              ______________________________________________________________________
  39+ 36C6             >//              Heap part
  39+ 36C6             >
  39+ 36C6             >
  39+ 36C6             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA9D             >
  39+ EA9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA9D             >Latest_Definition defl  Heap_Ptr
  39+ EA9D             >
  39+ EA9D             >                // dummy db directives used to calculate length of namec
  39+ EA9D 2B 42 55 46 >                db      "+BUF"
  39+ EAA1             >len_NFA         defl    $ - temp_NFA
  39+ EAA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA9D             >
  39+ EA9D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA9E 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAA2             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAA1 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAA2             >
  39+ EAA2 95 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAA4             >Prev_Ptr        defl    Heap_Ptr
  39+ EAA4             >
  39+ EAA4             >mirror_Ptr      defl    $
  39+ EAA4             >
  39+ EAA4 C8 36       >                dw      Dict_Ptr + 2        // xt
  39+ EAA6             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAA6             >
  39+ EAA6             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAA6             >
  39+ EAA6             >//              ______________________________________________________________________
  39+ EAA6             >//              Dictionary part
  39+ EAA6             >
  39+ EAA6             >                org     Dict_Ptr
  39+ 36C6             >
  39+ 36C6 A4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 36C8             >
  39+ 36C8             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 36C8 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 36CB             >
  39+ 36CB             >
  39+ 36CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 36CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 36CB             >
  39+ 36CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 36CB 3D 20 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 36CF 5F 25
  41+ 36D1 E4 25 DB 27                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 36D5 55 26
  42+ 36D7 BC 28                        dw      EQUALS                  // =
  43+ 36D9                                                              // if
  44+ 36D9 8F 20                        dw      ZBRANCH
  45+ 36DB 08 00                        dw      PBuf_Endif - $
  46+ 36DD C9 25                        dw          DROP                //      drop
  47+ 36DF D5 27 55 26                  dw          FIRST, FETCH        //      first @
  48+ 36E3              PBuf_Endif:                                     // endif
  49+ 36E3 E4 25 47 28                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 36E7 55 26
  50+ 36E9 B0 28                        dw      SUBTRACT                // -
  51+ 36EB 0D 25                        dw      EXIT                    // ;
  52+ 36ED
  53+ 36ED              //  ______________________________________________________________________
  54+ 36ED              //
  55+ 36ED              // update       --
  56+ 36ED              // mark the last used block to be written to disk
  57+ 36ED                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 36ED             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 36ED             >
  57+ 36ED             >Dict_Ptr        defl    $
  57+ 36ED             >
  57+ 36ED             >//              ______________________________________________________________________
  57+ 36ED             >//              Heap part
  57+ 36ED             >
  57+ 36ED             >
  57+ 36ED             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAA6             >
  57+ EAA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAA6             >Latest_Definition defl  Heap_Ptr
  57+ EAA6             >
  57+ EAA6             >                // dummy db directives used to calculate length of namec
  57+ EAA6 55 50 44 41 >                db      "UPDATE"
  57+ EAAA 54 45       >
  57+ EAAC             >len_NFA         defl    $ - temp_NFA
  57+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAA6             >
  57+ EAA6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAA7 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAAB 54 45       >
  57+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAAC C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAAD             >
  57+ EAAD 9D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  57+ EAAF             >
  57+ EAAF             >mirror_Ptr      defl    $
  57+ EAAF             >
  57+ EAAF EF 36       >                dw      Dict_Ptr + 2        // xt
  57+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAB1             >
  57+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAB1             >
  57+ EAB1             >//              ______________________________________________________________________
  57+ EAB1             >//              Dictionary part
  57+ EAB1             >
  57+ EAB1             >                org     Dict_Ptr
  57+ 36ED             >
  57+ 36ED AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 36EF             >
  57+ 36EF             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 36EF CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 36F2             >
  57+ 36F2             >
  57+ 36F2             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 36F2             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 36F2             >
  57+ 36F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 36F2 47 28 55 26                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 36F6 55 26
  59+ 36F8 3D 20 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 36FC DC 24
  60+ 36FE 47 28 55 26                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 3702 5F 26
  61+ 3704 0D 25                        dw      EXIT                    // ;
  62+ 3706
  63+ 3706
  64+ 3706              //  ______________________________________________________________________
  65+ 3706              //
  66+ 3706              // empty-buffers --
  67+ 3706                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 3706             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 3706             >
  67+ 3706             >Dict_Ptr        defl    $
  67+ 3706             >
  67+ 3706             >//              ______________________________________________________________________
  67+ 3706             >//              Heap part
  67+ 3706             >
  67+ 3706             >
  67+ 3706             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAB1             >
  67+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAB1             >Latest_Definition defl  Heap_Ptr
  67+ EAB1             >
  67+ EAB1             >                // dummy db directives used to calculate length of namec
  67+ EAB1 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAB5 59 2D 42 55 >
  67+ EAB9 46 46 45 52 >
  67+ EABD 53          >
  67+ EABE             >len_NFA         defl    $ - temp_NFA
  67+ EABE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAB1             >
  67+ EAB1 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAB2 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAB6 59 2D 42 55 >
  67+ EABA 46 46 45 52 >
  67+ EABE 53          >
  67+ EABF             >                org     $-1                 // alter last byte of Name just above to set
  67+ EABE D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EABF             >
  67+ EABF A6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAC1             >Prev_Ptr        defl    Heap_Ptr
  67+ EAC1             >
  67+ EAC1             >mirror_Ptr      defl    $
  67+ EAC1             >
  67+ EAC1 08 37       >                dw      Dict_Ptr + 2        // xt
  67+ EAC3             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAC3             >
  67+ EAC3             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAC3             >
  67+ EAC3             >//              ______________________________________________________________________
  67+ EAC3             >//              Dictionary part
  67+ EAC3             >
  67+ EAC3             >                org     Dict_Ptr
  67+ 3706             >
  67+ 3706 C1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 3708             >
  67+ 3708             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 3708 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 370B             >
  67+ 370B             >
  67+ 370B             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 370B             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 370B             >
  67+ 370B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 370B D5 27 55 26                  dw      FIRST, FETCH            // first @
  69+ 370F DB 27 55 26                  dw      LIMIT, FETCH            // limit @
  70+ 3713 C0 25 B0 28                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 3717 57 2D
  71+ 3719 0D 25                        dw      EXIT                    // ;
  72+ 371B
  73+ 371B              //  ______________________________________________________________________
  74+ 371B              //
  75+ 371B              // buffer       n -- a
  76+ 371B              // read block n and gives the address to a buffer
  77+ 371B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 371B              // disk before reading the block n.
  79+ 371B
  80+ 371B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 371B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 371B             >
  80+ 371B             >Dict_Ptr        defl    $
  80+ 371B             >
  80+ 371B             >//              ______________________________________________________________________
  80+ 371B             >//              Heap part
  80+ 371B             >
  80+ 371B             >
  80+ 371B             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAC3             >
  80+ EAC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAC3             >Latest_Definition defl  Heap_Ptr
  80+ EAC3             >
  80+ EAC3             >                // dummy db directives used to calculate length of namec
  80+ EAC3 42 55 46 46 >                db      "BUFFER"
  80+ EAC7 45 52       >
  80+ EAC9             >len_NFA         defl    $ - temp_NFA
  80+ EAC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAC3             >
  80+ EAC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAC4 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAC8 45 52       >
  80+ EACA             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAC9 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EACA             >
  80+ EACA B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EACC             >Prev_Ptr        defl    Heap_Ptr
  80+ EACC             >
  80+ EACC             >mirror_Ptr      defl    $
  80+ EACC             >
  80+ EACC 1D 37       >                dw      Dict_Ptr + 2        // xt
  80+ EACE             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EACE             >
  80+ EACE             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EACE             >
  80+ EACE             >//              ______________________________________________________________________
  80+ EACE             >//              Dictionary part
  80+ EACE             >
  80+ EACE             >                org     Dict_Ptr
  80+ 371B             >
  80+ 371B CC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 371D             >
  80+ 371D             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 371D CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 3720             >
  80+ 3720             >
  80+ 3720             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 3720             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 3720             >
  80+ 3720             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 3720 41 28 55 26                  dw      USED, FETCH             // used @
  82+ 3724 E4 25 17 25                  dw      DUP, TO_R               // dup >r
  83+ 3728                                                              // begin
  84+ 3728              Buffer_Begin:
  85+ 3728 C8 36                        dw          PBUF                //      +buf
  86+ 372A                                                              // until
  87+ 372A 8F 20                        dw      ZBRANCH
  88+ 372C FC FF                        dw      Buffer_Begin - $
  89+ 372E 41 28 5F 26                  dw      USED, STORE             // used !
  90+ 3732 2D 25 55 26                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 3736 44 25
  91+ 3738                                                              // if
  92+ 3738 8F 20                        dw      ZBRANCH
  93+ 373A 14 00                        dw      Buffer_Endif - $
  94+ 373C 2D 25 8E 25                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 3740 2D 25 55 26                  dw          R_OP, FETCH         //      r fetch
  96+ 3744 3D 20 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 3748 CD 24                        dw          AND_OP              //      and
  98+ 374A 4C 27 9B 36                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 374E              Buffer_Endif:                                   // endif
 100+ 374E 2D 25 5F 26                  dw      R_OP, STORE             // r !
 101+ 3752 2D 25 47 28                  dw      R_OP, PREV, STORE       // r prev !
 101+ 3756 5F 26
 102+ 3758 22 25 8E 25                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 375C 0D 25                        dw      EXIT                    // ;
 104+ 375E
 105+ 375E              //  ______________________________________________________________________
 106+ 375E              //
 107+ 375E              // block        n -- a
 108+ 375E              // Leaves the buffer address that contains the block n.
 109+ 375E              // If the block is not already present, it will be loaded from disk
 110+ 375E              // The block previously inside the buffer, if modified, is rewritten to
 111+ 375E              // disk before reading the block n.
 112+ 375E              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 375E
 114+ 375E                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 375E             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 375E             >
 114+ 375E             >Dict_Ptr        defl    $
 114+ 375E             >
 114+ 375E             >//              ______________________________________________________________________
 114+ 375E             >//              Heap part
 114+ 375E             >
 114+ 375E             >
 114+ 375E             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EACE             >
 114+ EACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EACE             >Latest_Definition defl  Heap_Ptr
 114+ EACE             >
 114+ EACE             >                // dummy db directives used to calculate length of namec
 114+ EACE 42 4C 4F 43 >                db      "BLOCK"
 114+ EAD2 4B          >
 114+ EAD3             >len_NFA         defl    $ - temp_NFA
 114+ EAD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EACE             >
 114+ EACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EACF 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAD3 4B          >
 114+ EAD4             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAD3 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAD4             >
 114+ EAD4 C3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAD6             >Prev_Ptr        defl    Heap_Ptr
 114+ EAD6             >
 114+ EAD6             >mirror_Ptr      defl    $
 114+ EAD6             >
 114+ EAD6 60 37       >                dw      Dict_Ptr + 2        // xt
 114+ EAD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAD8             >
 114+ EAD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAD8             >
 114+ EAD8             >//              ______________________________________________________________________
 114+ EAD8             >//              Dictionary part
 114+ EAD8             >
 114+ EAD8             >                org     Dict_Ptr
 114+ 375E             >
 114+ 375E D6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 3760             >
 114+ 3760             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 3760 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 3763             >
 114+ 3763             >
 114+ 3763             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 3763             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 3763             >
 114+ 3763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 3763                          //  dw      OFFSET, FETCH           // offset @
 116+ 3763                          //  dw      PLUS
 117+ 3763 17 25                        dw      TO_R                    // + >r
 118+ 3765 47 28 55 26                  dw      PREV, FETCH             // prev @
 119+ 3769 E4 25 55 26                  dw      DUP, FETCH              // dup @
 120+ 376D 2D 25 B0 28                  dw      R_OP, SUBTRACT          // r -
 121+ 3771 E4 25 5F 25                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 3775                                                              // if
 123+ 3775 8F 20                        dw        ZBRANCH
 124+ 3777 32 00                        dw        Block_Endif_1 - $
 125+ 3779              Block_Begin:                                    //      begin
 126+ 3779 C8 36 32 25                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 377D                                                              //          if
 128+ 377D 8F 20                        dw          ZBRANCH
 129+ 377F 12 00                        dw          Block_Endif_2 - $
 130+ 3781 C9 25                        dw              DROP            //              drop
 131+ 3783 2D 25 1D 37                  dw              R_OP, BUFFER    //              r buffer
 132+ 3787 E4 25                        dw              DUP             //              dup
 133+ 3789 2D 25 53 27                  dw              R_OP, ONE       //              r 1
 134+ 378D 9B 36                        dw              READ_WRITE      //              r/w
 135+ 378F 9A 25                        dw              TWO_MINUS       //              2-
 136+ 3791              Block_Endif_2:                                  //          endif
 137+ 3791 E4 25 55 26                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 3795 2D 25
 138+ 3797 B0 28 E4 25                  dw          SUBTRACT, DUP       //          - dup
 139+ 379B 5F 25 32 25                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 379F                                                              //      until
 141+ 379F 8F 20                        dw        ZBRANCH
 142+ 37A1 D8 FF                        dw        Block_Begin - $
 143+ 37A3 E4 25 47 28                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 37A7 5F 26
 144+ 37A9              Block_Endif_1:                                  // endif
 145+ 37A9 22 25 C9 25                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 37AD 8E 25
 146+ 37AF 0D 25                        dw      EXIT                    // ;
 147+ 37B1
 148+ 37B1              //  ______________________________________________________________________
 149+ 37B1              //
 150+ 37B1              // #buff        -- n
 151+ 37B1              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 37B1                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 37B1             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 37B1             >
 152+ 37B1             >Dict_Ptr        defl    $
 152+ 37B1             >
 152+ 37B1             >//              ______________________________________________________________________
 152+ 37B1             >//              Heap part
 152+ 37B1             >
 152+ 37B1             >
 152+ 37B1             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAD8             >
 152+ EAD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAD8             >Latest_Definition defl  Heap_Ptr
 152+ EAD8             >
 152+ EAD8             >                // dummy db directives used to calculate length of namec
 152+ EAD8 23 42 55 46 >                db      "#BUFF"
 152+ EADC 46          >
 152+ EADD             >len_NFA         defl    $ - temp_NFA
 152+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAD8             >
 152+ EAD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAD9 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EADD 46          >
 152+ EADE             >                org     $-1                 // alter last byte of Name just above to set
 152+ EADD C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EADE             >
 152+ EADE CE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAE0             >Prev_Ptr        defl    Heap_Ptr
 152+ EAE0             >
 152+ EAE0             >mirror_Ptr      defl    $
 152+ EAE0             >
 152+ EAE0 B3 37       >                dw      Dict_Ptr + 2        // xt
 152+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAE2             >
 152+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAE2             >
 152+ EAE2             >//              ______________________________________________________________________
 152+ EAE2             >//              Dictionary part
 152+ EAE2             >
 152+ EAE2             >                org     Dict_Ptr
 152+ 37B1             >
 152+ 37B1 E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 37B3             >
 152+ 37B3             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 37B3 CD 20 27    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 37B6             >
 152+ 37B6             >
 152+ 37B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 37B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 37B6             >
 152+ 37B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 37B6 07 00       >                dw      7
 153+ 37B8
 154+ 37B8              //  ______________________________________________________________________
 155+ 37B8              //
 156+ 37B8              // flush        --
 157+ 37B8                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 37B8             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 37B8             >
 157+ 37B8             >Dict_Ptr        defl    $
 157+ 37B8             >
 157+ 37B8             >//              ______________________________________________________________________
 157+ 37B8             >//              Heap part
 157+ 37B8             >
 157+ 37B8             >
 157+ 37B8             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAE2             >
 157+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAE2             >Latest_Definition defl  Heap_Ptr
 157+ EAE2             >
 157+ EAE2             >                // dummy db directives used to calculate length of namec
 157+ EAE2 46 4C 55 53 >                db      "FLUSH"
 157+ EAE6 48          >
 157+ EAE7             >len_NFA         defl    $ - temp_NFA
 157+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAE2             >
 157+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAE3 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAE7 48          >
 157+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAE7 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAE8             >
 157+ EAE8 D8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 157+ EAEA             >
 157+ EAEA             >mirror_Ptr      defl    $
 157+ EAEA             >
 157+ EAEA BA 37       >                dw      Dict_Ptr + 2        // xt
 157+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAEC             >
 157+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAEC             >
 157+ EAEC             >//              ______________________________________________________________________
 157+ EAEC             >//              Dictionary part
 157+ EAEC             >
 157+ EAEC             >                org     Dict_Ptr
 157+ 37B8             >
 157+ 37B8 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 37BA             >
 157+ 37BA             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 37BA CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 37BD             >
 157+ 37BD             >
 157+ 37BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 37BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 37BD             >
 157+ 37BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 37BD B3 37 78 25                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 37C1 4C 27
 159+ 37C3              Flush_Do:                                       // do
 160+ 37C3 CE 20                        dw      C_DO
 161+ 37C5 4C 27 1D 37                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 37C9 C9 25
 162+ 37CB                                                              // loop
 163+ 37CB 7A 20 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 37CF 6B 3F 55 26                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 37D3 B3 23 C9 25                  dw      F_SYNC, DROP            // f_sync drop
 166+ 37D7 0D 25                        dw      EXIT                    // exit
 167+ 37D9
 168+ 37D9              //  ______________________________________________________________________
 169+ 37D9              //
 170+ 37D9              // f_getline    a m fh -- n
 171+ 37D9              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 37D9              // Address a is left for subsequent processing
 173+ 37D9              // and n as the actual number of byte read, that is the length of line
 174+ 37D9                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 37D9             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 37D9             >
 174+ 37D9             >Dict_Ptr        defl    $
 174+ 37D9             >
 174+ 37D9             >//              ______________________________________________________________________
 174+ 37D9             >//              Heap part
 174+ 37D9             >
 174+ 37D9             >
 174+ 37D9             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAEC             >
 174+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAEC             >Latest_Definition defl  Heap_Ptr
 174+ EAEC             >
 174+ EAEC             >                // dummy db directives used to calculate length of namec
 174+ EAEC 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAF0 54 4C 49 4E >
 174+ EAF4 45          >
 174+ EAF5             >len_NFA         defl    $ - temp_NFA
 174+ EAF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAEC             >
 174+ EAEC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAED 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAF1 54 4C 49 4E >
 174+ EAF5 45          >
 174+ EAF6             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAF5 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EAF6             >
 174+ EAF6 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EAF8             >Prev_Ptr        defl    Heap_Ptr
 174+ EAF8             >
 174+ EAF8             >mirror_Ptr      defl    $
 174+ EAF8             >
 174+ EAF8 DB 37       >                dw      Dict_Ptr + 2        // xt
 174+ EAFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EAFA             >
 174+ EAFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EAFA             >
 174+ EAFA             >//              ______________________________________________________________________
 174+ EAFA             >//              Dictionary part
 174+ EAFA             >
 174+ EAFA             >                org     Dict_Ptr
 174+ 37D9             >
 174+ 37D9 F8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 37DB             >
 174+ 37DB             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 37DB CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 37DE             >
 174+ 37DE             >
 174+ 37DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 37DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 37DE             >
 174+ 37DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 37DE 17 25                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 37E0 D4 25                        dw      TUCK                    // tuck             ( m a m )
 177+ 37E2 2D 25 C0 23                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 37E6 3D 20 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 37EA AD 2A
 179+ 37EC
 180+ 37EC 26 26 C0 25                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 37F0 78 25 DD 25                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 37F4
 183+ 37F4 2D 25 DA 23                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 37F8 3D 20 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 37FC AD 2A
 185+ 37FE                                                              // if ( at least 1 chr was read )  \  fh
 186+ 37FE 8F 20                        dw      ZBRANCH
 187+ 3800 3C 00                        dw      FGetline_Else - $
 188+ 3802 3D 20 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 3806 C3 21
 189+ 3808 C9 25 CE 25                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 380C DD 25                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 380E 3D 20 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 3812 C3 21
 192+ 3814 C9 25 CE 25                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 3818 EB 25 F5 28                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 381C E4 25 5F 28                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 3820 5F 26
 195+ 3822 E4 25 17 25                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 3826 26 26 22 25                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 382A 4C 27 69 25                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 382E 22 25 89 23                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 3832 3D 20 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 3836 AD 2A
 200+ 3838                                                              // else
 201+ 3838 82 20                        dw      BRANCH
 202+ 383A 0C 00                        dw      FGetline_Endif - $
 203+ 383C              FGetline_Else:
 204+ 383C 22 25                        dw          R_TO                //      r>              ( m d a fh )
 205+ 383E 26 26 20 26                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 3842 C9 25 4C 27                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 3846              FGetline_Endif:                                 // endif
 208+ 3846 17 25 E4 25                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 384A E4 25
 209+ 384C 78 25 DD 25                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 3850 2D 25 4E 24                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 3854 33 26 5F 25                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 3858 4C 27 DD 25                  dw      ZERO, SWAP              // 0 swap
 213+ 385C 92 25 5F 26                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 3860 2D 25 5F 25                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 3864 7F 25
 215+ 3866 DD 25 2D 25                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 386A B0 28
 216+ 386C 62 2D                        dw      BLANK                   // blank
 217+ 386E 22 25                        dw      R_TO                    // r>                   ( n )
 218+ 3870 0D 25                        dw      EXIT                    // ;
 219+ 3872
 220+ 3872              //  ______________________________________________________________________
 221+ 3872              //
 222+ 3872              // f_include    fh --
 223+ 3872              // Given a filehandle includes the source from file
 224+ 3872                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 3872             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 3872             >
 224+ 3872             >Dict_Ptr        defl    $
 224+ 3872             >
 224+ 3872             >//              ______________________________________________________________________
 224+ 3872             >//              Heap part
 224+ 3872             >
 224+ 3872             >
 224+ 3872             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EAFA             >
 224+ EAFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EAFA             >Latest_Definition defl  Heap_Ptr
 224+ EAFA             >
 224+ EAFA             >                // dummy db directives used to calculate length of namec
 224+ EAFA 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EAFE 43 4C 55 44 >
 224+ EB02 45          >
 224+ EB03             >len_NFA         defl    $ - temp_NFA
 224+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EAFA             >
 224+ EAFA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EAFB 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EAFF 43 4C 55 44 >
 224+ EB03 45          >
 224+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB03 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB04             >
 224+ EB04 EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB06             >Prev_Ptr        defl    Heap_Ptr
 224+ EB06             >
 224+ EB06             >mirror_Ptr      defl    $
 224+ EB06             >
 224+ EB06 74 38       >                dw      Dict_Ptr + 2        // xt
 224+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB08             >
 224+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB08             >
 224+ EB08             >//              ______________________________________________________________________
 224+ EB08             >//              Dictionary part
 224+ EB08             >
 224+ EB08             >                org     Dict_Ptr
 224+ 3872             >
 224+ 3872 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 3874             >
 224+ 3874             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 3874 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 3877             >
 224+ 3877             >
 224+ 3877             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 3877             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 3877             >
 224+ 3877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 3877 ED 27 55 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 387B 17 25
 226+ 387D F3 27 55 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 3881 17 25
 227+ 3883 59 28 55 26                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 3887 17 25
 228+ 3889 2D 25                        dw      R_OP                    // r
 229+ 388B                                                              // if
 230+ 388B 8F 20                        dw      ZBRANCH
 231+ 388D 20 00                        dw      FInclude_Else_1 - $
 232+ 388F 2D 25 C0 23                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 3893 3D 20 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 3897 AD 2A
 234+ 3899 F3 27 55 26                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 389D 9A 25                        dw          TWO_MINUS
 236+ 389F 5F 28 55 26                  dw          SPAN, FETCH         //      span @ -
 237+ 38A3 B0 28                        dw          SUBTRACT
 238+ 38A5 A5 28 69 25                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 38A9                                                              // else
 240+ 38A9 82 20                        dw      BRANCH
 241+ 38AB 06 00                        dw      FInclude_Endif_1 - $
 242+ 38AD              FInclude_Else_1:
 243+ 38AD 4C 27 4C 27                  dw          ZERO, ZERO          //      0 0
 244+ 38B1                                                              // endif
 245+ 38B1              FInclude_Endif_1:
 246+ 38B1 17 25 17 25                  dw      TO_R, TO_R              // >r >r
 247+ 38B5 59 28 5F 26                  dw      SOURCE_ID, STORE        // source-id !
 248+ 38B9              FInclude_Begin:                                 // begin
 249+ 38B9 53 27 60 37                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 38BD 7D 27
 250+ 38BF 33 26 62 2D                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 38C3 DD 25 78 25                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 38C7 DD 25 92 25                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 38CB 59 28 55 26                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 38CF DB 37                        dw          F_GETLINE           //      f_getline
 255+ 38D1                                                              // while
 256+ 38D1 8F 20                        dw      ZBRANCH
 257+ 38D3 14 00                        dw      FInclude_Repeat - $
 258+ 38D5 53 27 ED 27                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 38D9 5F 26
 259+ 38DB 4C 27 F3 27                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 38DF 5F 26
 260+ 38E1 92 31                        dw          INTERPRET           //      interpret
 261+ 38E3 82 20                        dw      BRANCH
 262+ 38E5 D4 FF                        dw      FInclude_Begin - $
 263+ 38E7              FInclude_Repeat:                                // repeat
 264+ 38E7 59 28 55 26                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 38EB 4C 27 59 28                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 38EF 5F 26
 266+ 38F1 A6 23                        dw      F_CLOSE                 // f_close
 267+ 38F3 3D 20 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 38F7 AD 2A
 268+ 38F9 22 25 22 25                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 38FD 22 25
 269+ 38FF E4 25 59 28                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 3903 5F 26
 270+ 3905                                                              // if
 271+ 3905 8F 20                        dw      ZBRANCH
 272+ 3907 12 00                        dw      FInclude_Else_2 - $
 273+ 3909 59 28 55 26                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 390D 89 23                        dw          F_SEEK              //      f_seek
 275+ 390F 3D 20 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 3913 AD 2A
 276+ 3915                                                              // else
 277+ 3915 82 20                        dw      BRANCH
 278+ 3917 04 00                        dw      FInclude_Endif_2 - $
 279+ 3919              FInclude_Else_2:
 280+ 3919 20 26                        dw          TWO_DROP            //      2drop
 281+ 391B              FInclude_Endif_2:                               // endif
 282+ 391B 22 25 F3 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 391F 5F 26
 283+ 3921 22 25 ED 27                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 3925 5F 26
 284+ 3927 0D 25                        dw      EXIT                    // ;
 285+ 3929
 286+ 3929              //  ______________________________________________________________________
 287+ 3929              //
 288+ 3929              // open<         -- fh
 289+ 3929              // Open the following filename and return it file-handle
 290+ 3929              // Used in the form OPEN CCCC
 291+ 3929                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 3929             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 3929             >
 291+ 3929             >Dict_Ptr        defl    $
 291+ 3929             >
 291+ 3929             >//              ______________________________________________________________________
 291+ 3929             >//              Heap part
 291+ 3929             >
 291+ 3929             >
 291+ 3929             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB08             >
 291+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB08             >Latest_Definition defl  Heap_Ptr
 291+ EB08             >
 291+ EB08             >                // dummy db directives used to calculate length of namec
 291+ EB08 4F 50 45 4E >                db      "OPEN<"
 291+ EB0C 3C          >
 291+ EB0D             >len_NFA         defl    $ - temp_NFA
 291+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB08             >
 291+ EB08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB09 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB0D 3C          >
 291+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB0D BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB0E             >
 291+ EB0E FA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB10             >Prev_Ptr        defl    Heap_Ptr
 291+ EB10             >
 291+ EB10             >mirror_Ptr      defl    $
 291+ EB10             >
 291+ EB10 2B 39       >                dw      Dict_Ptr + 2        // xt
 291+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB12             >
 291+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB12             >
 291+ EB12             >//              ______________________________________________________________________
 291+ EB12             >//              Dictionary part
 291+ EB12             >
 291+ EB12             >                org     Dict_Ptr
 291+ 3929             >
 291+ 3929 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 392B             >
 291+ 392B             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 392B CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 392E             >
 291+ 392E             >
 291+ 392E             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 392E             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 392E             >
 291+ 392E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 392E 6F 27                        dw      BL
 293+ 3930 8F 2D E9 2B                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 3934 C0 25
 294+ 3936 5F 25 4C 27                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 393A DD 25 5F 26
 295+ 393E 80 2D 53 27                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 3942 0E 24
 296+ 3944 3D 20 2B 00                  dw      LIT, 43                 // 43
 297+ 3948 AD 2A                        dw      QERROR                  // ?error
 298+ 394A 0D 25                        dw      EXIT                    // ;
 299+ 394C
 300+ 394C              //  ______________________________________________________________________
 301+ 394C              //
 302+ 394C              // use          -- cccc
 303+ 394C              // Include the following filename
 304+ 394C                              Colon_Def USE, "USE", is_normal
 304+ 394C             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 394C             >
 304+ 394C             >Dict_Ptr        defl    $
 304+ 394C             >
 304+ 394C             >//              ______________________________________________________________________
 304+ 394C             >//              Heap part
 304+ 394C             >
 304+ 394C             >
 304+ 394C             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB12             >
 304+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB12             >Latest_Definition defl  Heap_Ptr
 304+ EB12             >
 304+ EB12             >                // dummy db directives used to calculate length of namec
 304+ EB12 55 53 45    >                db      "USE"
 304+ EB15             >len_NFA         defl    $ - temp_NFA
 304+ EB15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB12             >
 304+ EB12 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB13 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB16             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB15 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB16             >
 304+ EB16 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB18             >Prev_Ptr        defl    Heap_Ptr
 304+ EB18             >
 304+ EB18             >mirror_Ptr      defl    $
 304+ EB18             >
 304+ EB18 4E 39       >                dw      Dict_Ptr + 2        // xt
 304+ EB1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB1A             >
 304+ EB1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB1A             >
 304+ EB1A             >//              ______________________________________________________________________
 304+ EB1A             >//              Dictionary part
 304+ EB1A             >
 304+ EB1A             >                org     Dict_Ptr
 304+ 394C             >
 304+ 394C 18 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 394E             >
 304+ 394E             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 394E CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 3951             >
 304+ 3951             >
 304+ 3951             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 3951             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 3951             >
 304+ 3951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 3951 2B 39                        dw      OPEN_FH                 // open<
 306+ 3953 6B 3F 55 26                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 3957 A6 23 C9 25                  dw      F_CLOSE, DROP           // f_close drop
 308+ 395B 6B 3F 5F 26                  dw      BLK_FH, STORE           // blk-fh !
 309+ 395F 0D 25                        dw      EXIT                    // ;
 310+ 3961
 311+ 3961              //  ______________________________________________________________________
 312+ 3961              //
 313+ 3961              // include      -- cccc
 314+ 3961              // Include the following filename
 315+ 3961                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 3961             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 3961             >
 315+ 3961             >Dict_Ptr        defl    $
 315+ 3961             >
 315+ 3961             >//              ______________________________________________________________________
 315+ 3961             >//              Heap part
 315+ 3961             >
 315+ 3961             >
 315+ 3961             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB1A             >
 315+ EB1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB1A             >Latest_Definition defl  Heap_Ptr
 315+ EB1A             >
 315+ EB1A             >                // dummy db directives used to calculate length of namec
 315+ EB1A 49 4E 43 4C >                db      "INCLUDE"
 315+ EB1E 55 44 45    >
 315+ EB21             >len_NFA         defl    $ - temp_NFA
 315+ EB21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB1A             >
 315+ EB1A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB1B 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB1F 55 44 45    >
 315+ EB22             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB21 C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB22             >
 315+ EB22 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB24             >Prev_Ptr        defl    Heap_Ptr
 315+ EB24             >
 315+ EB24             >mirror_Ptr      defl    $
 315+ EB24             >
 315+ EB24 63 39       >                dw      Dict_Ptr + 2        // xt
 315+ EB26             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB26             >
 315+ EB26             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB26             >
 315+ EB26             >//              ______________________________________________________________________
 315+ EB26             >//              Dictionary part
 315+ EB26             >
 315+ EB26             >                org     Dict_Ptr
 315+ 3961             >
 315+ 3961 24 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 3963             >
 315+ 3963             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 3963 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 3966             >
 315+ 3966             >
 315+ 3966             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 3966             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 3966             >
 315+ 3966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 3966 2B 39                        dw      OPEN_FH                 // open
 317+ 3968 E4 25 74 38                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 396C A6 23 C9 25                  dw      F_CLOSE, DROP           // f_close drop
 319+ 3970 0D 25                        dw      EXIT                    // ;
 320+ 3972
 321+ 3972              //  ______________________________________________________________________
 322+ 3972              //
 323+ 3972              // needs
 324+ 3972              // check for cccc exists in vocabulary
 325+ 3972              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 3972
 327+ 3972              // temp filename cccc.f as counted string zero-padded
 328+ 3972                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 3972             >
 328+ 3972             >Dict_Ptr        defl    $
 328+ 3972             >
 328+ 3972             >//              ______________________________________________________________________
 328+ 3972             >//              Heap part
 328+ 3972             >
 328+ 3972             >
 328+ 3972             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB26             >
 328+ EB26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB26             >Latest_Definition defl  Heap_Ptr
 328+ EB26             >
 328+ EB26             >                // dummy db directives used to calculate length of namec
 328+ EB26 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB2A 53 2D 57    >
 328+ EB2D             >len_NFA         defl    $ - temp_NFA
 328+ EB2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB26             >
 328+ EB26 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB27 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB2B 53 2D 57    >
 328+ EB2E             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB2D D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB2E             >
 328+ EB2E 1A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB30             >Prev_Ptr        defl    Heap_Ptr
 328+ EB30             >
 328+ EB30             >mirror_Ptr      defl    $
 328+ EB30             >
 328+ EB30 74 39       >                dw      Dict_Ptr + 2        // xt
 328+ EB32             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB32             >
 328+ EB32             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB32             >
 328+ EB32             >//              ______________________________________________________________________
 328+ EB32             >//              Dictionary part
 328+ EB32             >
 328+ EB32             >                org     Dict_Ptr
 328+ 3972             >
 328+ 3972 30 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 3974             >
 328+ 3974             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 3974 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 3977             >
 328+ 3977             >
 328+ 3977             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 3977             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 3977             >
 328+ 3977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 3977 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 399A              // temp complete path+filename
 331+ 399A                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 399A             >
 331+ 399A             >Dict_Ptr        defl    $
 331+ 399A             >
 331+ 399A             >//              ______________________________________________________________________
 331+ 399A             >//              Heap part
 331+ 399A             >
 331+ 399A             >
 331+ 399A             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB32             >
 331+ EB32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB32             >Latest_Definition defl  Heap_Ptr
 331+ EB32             >
 331+ EB32             >                // dummy db directives used to calculate length of namec
 331+ EB32 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB36 53 2D 46 4E >
 331+ EB3A             >len_NFA         defl    $ - temp_NFA
 331+ EB3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB32             >
 331+ EB32 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB33 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB37 53 2D 46 4E >
 331+ EB3B             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB3A CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB3B             >
 331+ EB3B 26 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB3D             >Prev_Ptr        defl    Heap_Ptr
 331+ EB3D             >
 331+ EB3D             >mirror_Ptr      defl    $
 331+ EB3D             >
 331+ EB3D 9C 39       >                dw      Dict_Ptr + 2        // xt
 331+ EB3F             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB3F             >
 331+ EB3F             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB3F             >
 331+ EB3F             >//              ______________________________________________________________________
 331+ EB3F             >//              Dictionary part
 331+ EB3F             >
 331+ EB3F             >                org     Dict_Ptr
 331+ 399A             >
 331+ 399A 3D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 399C             >
 331+ 399C             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 399C CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 399F             >
 331+ 399F             >
 331+ 399F             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 399F             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 399F             >
 331+ 399F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 399F 00 00 00...                  ds      40
 333+ 39C7              // constant path
 334+ 39C7                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 39C7             >
 334+ 39C7             >Dict_Ptr        defl    $
 334+ 39C7             >
 334+ 39C7             >//              ______________________________________________________________________
 334+ 39C7             >//              Heap part
 334+ 39C7             >
 334+ 39C7             >
 334+ 39C7             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB3F             >
 334+ EB3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB3F             >Latest_Definition defl  Heap_Ptr
 334+ EB3F             >
 334+ EB3F             >                // dummy db directives used to calculate length of namec
 334+ EB3F 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB43 53 2D 49 4E >
 334+ EB47 43          >
 334+ EB48             >len_NFA         defl    $ - temp_NFA
 334+ EB48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB3F             >
 334+ EB3F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB40 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB44 53 2D 49 4E >
 334+ EB48 43          >
 334+ EB49             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB48 C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB49             >
 334+ EB49 32 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB4B             >Prev_Ptr        defl    Heap_Ptr
 334+ EB4B             >
 334+ EB4B             >mirror_Ptr      defl    $
 334+ EB4B             >
 334+ EB4B C9 39       >                dw      Dict_Ptr + 2        // xt
 334+ EB4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB4D             >
 334+ EB4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB4D             >
 334+ EB4D             >//              ______________________________________________________________________
 334+ EB4D             >//              Dictionary part
 334+ EB4D             >
 334+ EB4D             >                org     Dict_Ptr
 334+ 39C7             >
 334+ 39C7 4B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 39C9             >
 334+ 39C9             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 39C9 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 39CC             >
 334+ 39CC             >
 334+ 39CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 39CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 39CC             >
 334+ 39CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 39CC 04 69 6E 63                  db      4, "inc/", 0
 335+ 39D0 2F 00
 336+ 39D2                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 39D2             >
 336+ 39D2             >Dict_Ptr        defl    $
 336+ 39D2             >
 336+ 39D2             >//              ______________________________________________________________________
 336+ 39D2             >//              Heap part
 336+ 39D2             >
 336+ 39D2             >
 336+ 39D2             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB4D             >
 336+ EB4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB4D             >Latest_Definition defl  Heap_Ptr
 336+ EB4D             >
 336+ EB4D             >                // dummy db directives used to calculate length of namec
 336+ EB4D 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB51 53 2D 4C 49 >
 336+ EB55 42          >
 336+ EB56             >len_NFA         defl    $ - temp_NFA
 336+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB4D             >
 336+ EB4D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB4E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB52 53 2D 4C 49 >
 336+ EB56 42          >
 336+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB56 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB57             >
 336+ EB57 3F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB59             >Prev_Ptr        defl    Heap_Ptr
 336+ EB59             >
 336+ EB59             >mirror_Ptr      defl    $
 336+ EB59             >
 336+ EB59 D4 39       >                dw      Dict_Ptr + 2        // xt
 336+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB5B             >
 336+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB5B             >
 336+ EB5B             >//              ______________________________________________________________________
 336+ EB5B             >//              Dictionary part
 336+ EB5B             >
 336+ EB5B             >                org     Dict_Ptr
 336+ 39D2             >
 336+ 39D2 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 39D4             >
 336+ 39D4             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 39D4 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 39D7             >
 336+ 39D7             >
 336+ 39D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 39D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 39D7             >
 336+ 39D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 39D7 04 6C 69 62                  db      4, "lib/", 0
 337+ 39DB 2F 00
 338+ 39DD
 339+ 39DD              // Concatenate path at a and filename and include it
 340+ 39DD              // No error is issued if filename doesn't exist.
 341+ 39DD                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 39DD             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 39DD             >
 341+ 39DD             >Dict_Ptr        defl    $
 341+ 39DD             >
 341+ 39DD             >//              ______________________________________________________________________
 341+ 39DD             >//              Heap part
 341+ 39DD             >
 341+ 39DD             >
 341+ 39DD             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB5B             >
 341+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB5B             >Latest_Definition defl  Heap_Ptr
 341+ EB5B             >
 341+ EB5B             >                // dummy db directives used to calculate length of namec
 341+ EB5B 4E 45 45 44 >                db      "NEEDS/"
 341+ EB5F 53 2F       >
 341+ EB61             >len_NFA         defl    $ - temp_NFA
 341+ EB61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB5B             >
 341+ EB5B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB5C 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB60 53 2F       >
 341+ EB62             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB61 AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB62             >
 341+ EB62 4D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB64             >Prev_Ptr        defl    Heap_Ptr
 341+ EB64             >
 341+ EB64             >mirror_Ptr      defl    $
 341+ EB64             >
 341+ EB64 DF 39       >                dw      Dict_Ptr + 2        // xt
 341+ EB66             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB66             >
 341+ EB66             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB66             >
 341+ EB66             >//              ______________________________________________________________________
 341+ EB66             >//              Dictionary part
 341+ EB66             >
 341+ EB66             >                org     Dict_Ptr
 341+ 39DD             >
 341+ 39DD 64 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 39DF             >
 341+ 39DF             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 39DF CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 39E2             >
 341+ 39E2             >
 341+ 39E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 39E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 39E2             >
 341+ 39E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 39E2 E9 2B D4 25                  dw      COUNT, TUCK             // n a n
 343+ 39E6 9C 39 DD 25                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 39EA 4E 24
 344+ 39EC 9C 39 5F 25                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 39F0 74 39 78 25                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 39F4 DD 25
 346+ 39F6 3D 20 23 00                  dw      LIT, 35
 347+ 39FA 4E 24                        dw      CMOVE
 348+ 39FC 9C 39                        dw      NEEDS_FN
 349+ 39FE 80 2D 53 27                  dw      PAD, ONE, F_OPEN
 349+ 3A02 0E 24
 350+ 3A04 32 25                        dw      ZEQUAL
 351+ 3A06 8F 20                        dw      ZBRANCH
 352+ 3A08 08 00                        dw      Needs_1 - $
 353+ 3A0A 74 38                        dw          F_INCLUDE
 354+ 3A0C 82 20                        dw      BRANCH
 355+ 3A0E 04 00                        dw      Needs_2 - $
 356+ 3A10              Needs_1:
 357+ 3A10              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 3A10              //              dw          LIT, 43, MESSAGE
 359+ 3A10 C9 25                        dw          DROP
 360+ 3A12              Needs_2:
 361+ 3A12 0D 25                        dw      EXIT                    // ;
 362+ 3A14
 363+ 3A14
 364+ 3A14                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 3A14             >
 364+ 3A14             >Dict_Ptr        defl    $
 364+ 3A14             >
 364+ 3A14             >//              ______________________________________________________________________
 364+ 3A14             >//              Heap part
 364+ 3A14             >
 364+ 3A14             >
 364+ 3A14             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB66             >
 364+ EB66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB66             >Latest_Definition defl  Heap_Ptr
 364+ EB66             >
 364+ EB66             >                // dummy db directives used to calculate length of namec
 364+ EB66 4E 44 4F 4D >                db      "NDOM"
 364+ EB6A             >len_NFA         defl    $ - temp_NFA
 364+ EB6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB66             >
 364+ EB66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB67 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB6B             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB6A CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB6B             >
 364+ EB6B 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB6D             >Prev_Ptr        defl    Heap_Ptr
 364+ EB6D             >
 364+ EB6D             >mirror_Ptr      defl    $
 364+ EB6D             >
 364+ EB6D 16 3A       >                dw      Dict_Ptr + 2        // xt
 364+ EB6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB6F             >
 364+ EB6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB6F             >
 364+ EB6F             >//              ______________________________________________________________________
 364+ EB6F             >//              Dictionary part
 364+ EB6F             >
 364+ EB6F             >                org     Dict_Ptr
 364+ 3A14             >
 364+ 3A14 6D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 3A16             >
 364+ 3A16             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 3A16 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 3A19             >
 364+ 3A19             >
 364+ 3A19             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 3A19             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 3A19             >
 364+ 3A19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 3A19              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 3A19 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 3A1D 7C 5C 3C 3E
 366+ 3A21 22
 367+ 3A22 00                           db 0
 368+ 3A23
 369+ 3A23                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 3A23             >
 369+ 3A23             >Dict_Ptr        defl    $
 369+ 3A23             >
 369+ 3A23             >//              ______________________________________________________________________
 369+ 3A23             >//              Heap part
 369+ 3A23             >
 369+ 3A23             >
 369+ 3A23             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB6F             >
 369+ EB6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB6F             >Latest_Definition defl  Heap_Ptr
 369+ EB6F             >
 369+ EB6F             >                // dummy db directives used to calculate length of namec
 369+ EB6F 4E 43 44 4D >                db      "NCDM"
 369+ EB73             >len_NFA         defl    $ - temp_NFA
 369+ EB73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB6F             >
 369+ EB6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB70 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB74             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB73 CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB74             >
 369+ EB74 66 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB76             >Prev_Ptr        defl    Heap_Ptr
 369+ EB76             >
 369+ EB76             >mirror_Ptr      defl    $
 369+ EB76             >
 369+ EB76 25 3A       >                dw      Dict_Ptr + 2        // xt
 369+ EB78             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB78             >
 369+ EB78             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB78             >
 369+ EB78             >//              ______________________________________________________________________
 369+ EB78             >//              Dictionary part
 369+ EB78             >
 369+ EB78             >                org     Dict_Ptr
 369+ 3A23             >
 369+ 3A23 76 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 3A25             >
 369+ 3A25             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 3A25 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 3A28             >
 369+ 3A28             >
 369+ 3A28             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 3A28             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 3A28             >
 369+ 3A28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 3A28              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 3A28 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 3A2C 24 5F 7B 7D
 371+ 3A30 7E
 372+ 3A31 00                           db 0
 373+ 3A32
 374+ 3A32              // Replace illegal character in filename using the map here above
 375+ 3A32              // at the moment we need only  "
 376+ 3A32                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 3A32             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 3A32             >
 376+ 3A32             >Dict_Ptr        defl    $
 376+ 3A32             >
 376+ 3A32             >//              ______________________________________________________________________
 376+ 3A32             >//              Heap part
 376+ 3A32             >
 376+ 3A32             >
 376+ 3A32             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB78             >
 376+ EB78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB78             >Latest_Definition defl  Heap_Ptr
 376+ EB78             >
 376+ EB78             >                // dummy db directives used to calculate length of namec
 376+ EB78 4D 41 50 2D >                db      "MAP-FN"
 376+ EB7C 46 4E       >
 376+ EB7E             >len_NFA         defl    $ - temp_NFA
 376+ EB7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB78             >
 376+ EB78 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB79 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB7D 46 4E       >
 376+ EB7F             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB7E CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB7F             >
 376+ EB7F 6F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB81             >Prev_Ptr        defl    Heap_Ptr
 376+ EB81             >
 376+ EB81             >mirror_Ptr      defl    $
 376+ EB81             >
 376+ EB81 34 3A       >                dw      Dict_Ptr + 2        // xt
 376+ EB83             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB83             >
 376+ EB83             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB83             >
 376+ EB83             >//              ______________________________________________________________________
 376+ EB83             >//              Dictionary part
 376+ EB83             >
 376+ EB83             >                org     Dict_Ptr
 376+ 3A32             >
 376+ 3A32 81 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 3A34             >
 376+ 3A34             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 3A34 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 3A37             >
 376+ 3A37             >
 376+ 3A37             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 3A37             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 3A37             >
 376+ 3A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 3A37 E9 2B F6 2B                  dw      COUNT, BOUNDS
 378+ 3A3B CE 20                        dw      C_DO
 379+ 3A3D              Needs_3:
 380+ 3A3D 25 3A 16 3A                  dw          NCDM, NDOM, LIT, 10
 380+ 3A41 3D 20 0A 00
 381+ 3A45 D4 20 6A 26                  dw          I, CFETCH
 382+ 3A49 F5 21                        dw          C_MAP
 383+ 3A4B D4 20 73 26                  dw          I, CSTORE
 384+ 3A4F              Needs_4:
 385+ 3A4F 7A 20                        dw      C_LOOP
 386+ 3A51 EC FF                        dw      Needs_3 - $
 387+ 3A53 0D 25                        dw      EXIT
 388+ 3A55
 389+ 3A55
 390+ 3A55              // include  "path/cccc.f" if cccc is not defined
 391+ 3A55              // filename cccc.f is temporary stored at NEEDS-W
 392+ 3A55                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 3A55             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 3A55             >
 392+ 3A55             >Dict_Ptr        defl    $
 392+ 3A55             >
 392+ 3A55             >//              ______________________________________________________________________
 392+ 3A55             >//              Heap part
 392+ 3A55             >
 392+ 3A55             >
 392+ 3A55             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB83             >
 392+ EB83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB83             >Latest_Definition defl  Heap_Ptr
 392+ EB83             >
 392+ EB83             >                // dummy db directives used to calculate length of namec
 392+ EB83 4E 45 45 44 >                db      "NEEDS-F"
 392+ EB87 53 2D 46    >
 392+ EB8A             >len_NFA         defl    $ - temp_NFA
 392+ EB8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB83             >
 392+ EB83 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EB84 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EB88 53 2D 46    >
 392+ EB8B             >                org     $-1                 // alter last byte of Name just above to set
 392+ EB8A C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EB8B             >
 392+ EB8B 78 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EB8D             >Prev_Ptr        defl    Heap_Ptr
 392+ EB8D             >
 392+ EB8D             >mirror_Ptr      defl    $
 392+ EB8D             >
 392+ EB8D 57 3A       >                dw      Dict_Ptr + 2        // xt
 392+ EB8F             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EB8F             >
 392+ EB8F             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EB8F             >
 392+ EB8F             >//              ______________________________________________________________________
 392+ EB8F             >//              Dictionary part
 392+ EB8F             >
 392+ EB8F             >                org     Dict_Ptr
 392+ 3A55             >
 392+ 3A55 8D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 3A57             >
 392+ 3A57             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 3A57 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 3A5A             >
 392+ 3A5A             >
 392+ 3A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 3A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 3A5A             >
 392+ 3A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 3A5A CF 2F                        dw      LFIND
 394+ 3A5C 8F 20                        dw      ZBRANCH
 395+ 3A5E 0A 00                        dw      Needs_5 - $
 396+ 3A60
 397+ 3A60 C9 25 20 26                  dw          DROP, TWO_DROP
 398+ 3A64 82 20                        dw      BRANCH
 399+ 3A66 2C 00                        dw      Needs_6 - $
 400+ 3A68              Needs_5:
 401+ 3A68 74 39                        dw          NEEDS_W
 402+ 3A6A 3D 20 23 00                  dw          LIT, 35
 403+ 3A6E 57 2D                        dw          ERASE                   // a
 404+ 3A70 71 28 6A 26                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 3A74 78 25
 405+ 3A76 71 28 C0 25                  dw          HERE, OVER              // a n here n
 406+ 3A7A 74 39 DD 25                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 3A7E 4E 24
 407+ 3A80 74 39 34 3A                  dw          NEEDS_W, NEEDS_CHECK
 408+ 3A84 74 39 5F 25                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 3A88 3D 20 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 3A8C DD 25 5F 26                  dw          SWAP, STORE             // a
 411+ 3A90 DF 39                        dw          NEEDS_SLASH
 412+ 3A92              Needs_6:
 413+ 3A92 0D 25                        dw      EXIT
 414+ 3A94
 415+ 3A94
 416+ 3A94              // check for cccc exists in vocabulary
 417+ 3A94              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 3A94              // search in inc subdirectory
 419+ 3A94                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 3A94             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 3A94             >
 419+ 3A94             >Dict_Ptr        defl    $
 419+ 3A94             >
 419+ 3A94             >//              ______________________________________________________________________
 419+ 3A94             >//              Heap part
 419+ 3A94             >
 419+ 3A94             >
 419+ 3A94             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EB8F             >
 419+ EB8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EB8F             >Latest_Definition defl  Heap_Ptr
 419+ EB8F             >
 419+ EB8F             >                // dummy db directives used to calculate length of namec
 419+ EB8F 4E 45 45 44 >                db      "NEEDS"
 419+ EB93 53          >
 419+ EB94             >len_NFA         defl    $ - temp_NFA
 419+ EB94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EB8F             >
 419+ EB8F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EB90 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EB94 53          >
 419+ EB95             >                org     $-1                 // alter last byte of Name just above to set
 419+ EB94 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EB95             >
 419+ EB95 83 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EB97             >Prev_Ptr        defl    Heap_Ptr
 419+ EB97             >
 419+ EB97             >mirror_Ptr      defl    $
 419+ EB97             >
 419+ EB97 96 3A       >                dw      Dict_Ptr + 2        // xt
 419+ EB99             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EB99             >
 419+ EB99             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EB99             >
 419+ EB99             >//              ______________________________________________________________________
 419+ EB99             >//              Dictionary part
 419+ EB99             >
 419+ EB99             >                org     Dict_Ptr
 419+ 3A94             >
 419+ 3A94 97 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 3A96             >
 419+ 3A96             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 3A96 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 3A99             >
 419+ 3A99             >
 419+ 3A99             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 3A99             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 3A99             >
 419+ 3A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 3A99 F3 27 55 26                  dw      TO_IN, FETCH
 421+ 3A9D E4 25                        dw      DUP
 422+ 3A9F C9 39 57 3A                  dw      NEEDS_INC, NEEDS_PATH
 423+ 3AA3 F3 27 5F 26                  dw      TO_IN, STORE
 424+ 3AA7 D4 39 57 3A                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 3AAB F3 27 5F 26                  dw      TO_IN, STORE
 426+ 3AAF CF 2F                        dw      LFIND
 427+ 3AB1 8F 20                        dw      ZBRANCH
 428+ 3AB3 08 00                        dw      Needs_10 - $
 429+ 3AB5 20 26                        dw          TWO_DROP
 430+ 3AB7 82 20                        dw      BRANCH
 431+ 3AB9 10 00                        dw      Needs_11 - $
 432+ 3ABB              Needs_10:
 433+ 3ABB 74 39 E9 2B                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 3ABF 3D 2C 42 29
 434+ 3AC3 3D 20 2B 00                  dw      LIT, 43, MESSAGE
 434+ 3AC7 A1 35
 435+ 3AC9              Needs_11:
 436+ 3AC9 0D 25                        dw      EXIT
 437+ 3ACB
 438+ 3ACB
 439+ 3ACB              //  ______________________________________________________________________
 440+ 3ACB              //
 441+ 3ACB              // load         n --
 442+ 3ACB                              Colon_Def LOAD, "LOAD", is_normal
 442+ 3ACB             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 3ACB             >
 442+ 3ACB             >Dict_Ptr        defl    $
 442+ 3ACB             >
 442+ 3ACB             >//              ______________________________________________________________________
 442+ 3ACB             >//              Heap part
 442+ 3ACB             >
 442+ 3ACB             >
 442+ 3ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EB99             >
 442+ EB99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EB99             >Latest_Definition defl  Heap_Ptr
 442+ EB99             >
 442+ EB99             >                // dummy db directives used to calculate length of namec
 442+ EB99 4C 4F 41 44 >                db      "LOAD"
 442+ EB9D             >len_NFA         defl    $ - temp_NFA
 442+ EB9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EB99             >
 442+ EB99 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EB9A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EB9E             >                org     $-1                 // alter last byte of Name just above to set
 442+ EB9D C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EB9E             >
 442+ EB9E 8F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBA0             >Prev_Ptr        defl    Heap_Ptr
 442+ EBA0             >
 442+ EBA0             >mirror_Ptr      defl    $
 442+ EBA0             >
 442+ EBA0 CD 3A       >                dw      Dict_Ptr + 2        // xt
 442+ EBA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBA2             >
 442+ EBA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBA2             >
 442+ EBA2             >//              ______________________________________________________________________
 442+ EBA2             >//              Dictionary part
 442+ EBA2             >
 442+ EBA2             >                org     Dict_Ptr
 442+ 3ACB             >
 442+ 3ACB A0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 3ACD             >
 442+ 3ACD             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 3ACD CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 3AD0             >
 442+ 3AD0             >
 442+ 3AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 3AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 3AD0             >
 442+ 3AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 3AD0 ED 27 55 26                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 3AD4 17 25
 444+ 3AD6 F3 27 55 26                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 3ADA 17 25
 445+ 3ADC
 446+ 3ADC 4C 27 F3 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 3AE0 5F 26
 447+ 3AE2 84 27 2D 35                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 3AE6 ED 27 5F 26
 448+ 3AEA 92 31                        dw      INTERPRET               // interpret
 449+ 3AEC
 450+ 3AEC 22 25 F3 27                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 3AF0 5F 26
 451+ 3AF2 22 25 ED 27                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 3AF6 5F 26
 452+ 3AF8 0D 25                        dw      EXIT                    // ;
 453+ 3AFA
 454+ 3AFA              //  ______________________________________________________________________
 455+ 3AFA              //
 456+ 3AFA              // -->          --
 457+ 3AFA                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 3AFA             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 3AFA             >
 457+ 3AFA             >Dict_Ptr        defl    $
 457+ 3AFA             >
 457+ 3AFA             >//              ______________________________________________________________________
 457+ 3AFA             >//              Heap part
 457+ 3AFA             >
 457+ 3AFA             >
 457+ 3AFA             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBA2             >
 457+ EBA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBA2             >Latest_Definition defl  Heap_Ptr
 457+ EBA2             >
 457+ EBA2             >                // dummy db directives used to calculate length of namec
 457+ EBA2 2D 2D 3E    >                db      "-->"
 457+ EBA5             >len_NFA         defl    $ - temp_NFA
 457+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBA2             >
 457+ EBA2 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBA3 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBA5 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBA6             >
 457+ EBA6 99 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 457+ EBA8             >
 457+ EBA8             >mirror_Ptr      defl    $
 457+ EBA8             >
 457+ EBA8 FC 3A       >                dw      Dict_Ptr + 2        // xt
 457+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBAA             >
 457+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBAA             >
 457+ EBAA             >//              ______________________________________________________________________
 457+ EBAA             >//              Dictionary part
 457+ EBAA             >
 457+ EBAA             >                org     Dict_Ptr
 457+ 3AFA             >
 457+ 3AFA A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 3AFC             >
 457+ 3AFC             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 3AFC CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 3AFF             >
 457+ 3AFF             >
 457+ 3AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 3AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 3AFF             >
 457+ 3AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 3AFF 0A 2B                        dw      QLOADING                // ?loading
 459+ 3B01 4C 27 F3 27                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 3B05 5F 26
 460+ 3B07 84 27                        dw      BSCR                    // b/scr
 461+ 3B09 ED 27 55 26                  dw      BLK, FETCH              // blk @
 462+ 3B0D C0 25                        dw      OVER                    // over
 463+ 3B0F 52 35                        dw      MOD                     // mod
 464+ 3B11 B0 28                        dw      SUBTRACT                // -
 465+ 3B13 ED 27 3D 26                  dw      BLK, PLUSSTORE          // +!
 466+ 3B17 0D 25                        dw      EXIT                    // ;
 467+ 3B19
 468+ 3B19              //  ______________________________________________________________________
 469+ 3B19              //
 470+ 3B19              // '            -- xt
 471+ 3B19                              Colon_Def TICK, "'", is_normal
 471+ 3B19             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 3B19             >
 471+ 3B19             >Dict_Ptr        defl    $
 471+ 3B19             >
 471+ 3B19             >//              ______________________________________________________________________
 471+ 3B19             >//              Heap part
 471+ 3B19             >
 471+ 3B19             >
 471+ 3B19             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBAA             >
 471+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBAA             >Latest_Definition defl  Heap_Ptr
 471+ EBAA             >
 471+ EBAA             >                // dummy db directives used to calculate length of namec
 471+ EBAA 27          >                db      "'"
 471+ EBAB             >len_NFA         defl    $ - temp_NFA
 471+ EBAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBAA             >
 471+ EBAA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBAB 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBAC             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBAB A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBAC             >
 471+ EBAC A2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBAE             >Prev_Ptr        defl    Heap_Ptr
 471+ EBAE             >
 471+ EBAE             >mirror_Ptr      defl    $
 471+ EBAE             >
 471+ EBAE 1B 3B       >                dw      Dict_Ptr + 2        // xt
 471+ EBB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBB0             >
 471+ EBB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBB0             >
 471+ EBB0             >//              ______________________________________________________________________
 471+ EBB0             >//              Dictionary part
 471+ EBB0             >
 471+ EBB0             >                org     Dict_Ptr
 471+ 3B19             >
 471+ 3B19 AE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 3B1B             >
 471+ 3B1B             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 3B1B CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 3B1E             >
 471+ 3B1E             >
 471+ 3B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 3B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 3B1E             >
 471+ 3B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 3B1E CF 2F                        dw      LFIND                   // -find
 473+ 3B20 32 25                        dw      ZEQUAL                  // 0=
 474+ 3B22 4C 27 AD 2A                  dw      ZERO, QERROR            // 0 ?error
 475+ 3B26 C9 25                        dw      DROP                    // drop
 476+ 3B28 0D 25                        dw      EXIT                    // ;
 477+ 3B2A
 478+ 3B2A              //  ______________________________________________________________________
 479+ 3B2A              //
 480+ 3B2A              // forget       -- cccc
 481+ 3B2A                              Colon_Def FORGET, "FORGET", is_normal
 481+ 3B2A             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 3B2A             >
 481+ 3B2A             >Dict_Ptr        defl    $
 481+ 3B2A             >
 481+ 3B2A             >//              ______________________________________________________________________
 481+ 3B2A             >//              Heap part
 481+ 3B2A             >
 481+ 3B2A             >
 481+ 3B2A             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBB0             >
 481+ EBB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBB0             >Latest_Definition defl  Heap_Ptr
 481+ EBB0             >
 481+ EBB0             >                // dummy db directives used to calculate length of namec
 481+ EBB0 46 4F 52 47 >                db      "FORGET"
 481+ EBB4 45 54       >
 481+ EBB6             >len_NFA         defl    $ - temp_NFA
 481+ EBB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBB0             >
 481+ EBB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBB1 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBB5 45 54       >
 481+ EBB7             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBB6 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBB7             >
 481+ EBB7 AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBB9             >Prev_Ptr        defl    Heap_Ptr
 481+ EBB9             >
 481+ EBB9             >mirror_Ptr      defl    $
 481+ EBB9             >
 481+ EBB9 2C 3B       >                dw      Dict_Ptr + 2        // xt
 481+ EBBB             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBBB             >
 481+ EBBB             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBBB             >
 481+ EBBB             >//              ______________________________________________________________________
 481+ EBBB             >//              Dictionary part
 481+ EBBB             >
 481+ EBBB             >                org     Dict_Ptr
 481+ 3B2A             >
 481+ 3B2A B9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 3B2C             >
 481+ 3B2C             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 3B2C CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 3B2F             >
 481+ 3B2F             >
 481+ 3B2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 3B2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 3B2F             >
 481+ 3B2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 3B2F 11 28 55 26                  dw      CURRENT, FETCH          // current @
 483+ 3B33 0B 28 55 26                  dw      CONTEXT, FETCH          // context @
 484+ 3B37 B0 28 3D 20                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 3B3B 17 00 AD 2A
 485+ 3B3F 1B 3B 2C 2A                  dw      TICK, TO_BODY           // ' >body
 486+ 3B43 E4 25 C3 27                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 3B47 55 26
 487+ 3B49 C7 28 3D 20                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 3B4D 15 00 AD 2A
 488+ 3B51 E4 25 61 2A                  dw      DUP, NFA                // dup nfa
 489+ 3B55
 490+ 3B55                          //  dw      DUP
 491+ 3B55                          //  dw      LIT, $E000, LESS
 492+ 3B55                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 3B55                          //  dw      OR_OP, NOT_OP
 494+ 3B55                          //  dw      ZBRANCH
 495+ 3B55                          //  dw      Forget_then - $
 496+ 3B55
 497+ 3B55 6A 29 8D 29                  dw      MMU7_FETCH, FROM_FAR
 498+ 3B59 E1 27 5F 26                  dw      HP, STORE
 499+ 3B5D E4 25 56 2A                  dw      DUP, CFA, CELL_MINUS
 499+ 3B61 92 25
 500+ 3B63              // Forget_then:
 501+ 3B63 C9 27 5F 26                  dw      DP, STORE               // dp !
 502+ 3B67 6C 2A 55 26                  dw      LFA, FETCH              // lfa @
 503+ 3B6B 0B 28 55 26                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 3B6F 5F 26
 504+ 3B71 0D 25                        dw      EXIT                    // ;
 505+ 3B73
 506+ 3B73              //  ______________________________________________________________________
 507+ 3B73              //
 508+ 3B73              // marker       -- cccc
 509+ 3B73                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 3B73             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 3B73             >
 509+ 3B73             >Dict_Ptr        defl    $
 509+ 3B73             >
 509+ 3B73             >//              ______________________________________________________________________
 509+ 3B73             >//              Heap part
 509+ 3B73             >
 509+ 3B73             >
 509+ 3B73             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBBB             >
 509+ EBBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBBB             >Latest_Definition defl  Heap_Ptr
 509+ EBBB             >
 509+ EBBB             >                // dummy db directives used to calculate length of namec
 509+ EBBB 4D 41 52 4B >                db      "MARKER"
 509+ EBBF 45 52       >
 509+ EBC1             >len_NFA         defl    $ - temp_NFA
 509+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBBB             >
 509+ EBBB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBBC 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBC0 45 52       >
 509+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBC1 D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBC2             >
 509+ EBC2 B0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 509+ EBC4             >
 509+ EBC4             >mirror_Ptr      defl    $
 509+ EBC4             >
 509+ EBC4 75 3B       >                dw      Dict_Ptr + 2        // xt
 509+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBC6             >
 509+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBC6             >
 509+ EBC6             >//              ______________________________________________________________________
 509+ EBC6             >//              Dictionary part
 509+ EBC6             >
 509+ EBC6             >                org     Dict_Ptr
 509+ 3B73             >
 509+ 3B73 C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 3B75             >
 509+ 3B75             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 3B75 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 3B78             >
 509+ 3B78             >
 509+ 3B78             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 3B78             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 3B78             >
 509+ 3B78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 3B78 C1 2B                        dw      CBUILDS
 511+ 3B7A CF 27 55 26                  dw      VOC_LINK, FETCH, COMMA
 511+ 3B7E 87 28
 512+ 3B80 11 28 55 26                  dw      CURRENT, FETCH, COMMA
 512+ 3B84 87 28
 513+ 3B86 0B 28 55 26                  dw      CONTEXT, FETCH, COMMA
 513+ 3B8A 87 28
 514+ 3B8C 11 28 55 26                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 3B90 55 26 87 28
 515+ 3B94 1D 2A 7B 2A                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 3B98 6C 2A 55 26
 515+ 3B9C 87 28
 516+ 3B9E CC 2B                        dw      DOES_TO
 517+ 3BA0 E4 25 55 26                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 3BA4 CF 27 5F 26
 517+ 3BA8 8E 25
 518+ 3BAA E4 25 55 26                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 3BAE 11 28 5F 26
 518+ 3BB2 8E 25
 519+ 3BB4 E4 25 55 26                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 3BB8 0B 28 5F 26
 519+ 3BBC 8E 25
 520+ 3BBE E4 25 55 26                  dw      DUP, FETCH
 521+ 3BC2                          //  dw      DUP, QHEAPP
 522+ 3BC2                          //  dw      ZBRANCH
 523+ 3BC2                          //  dw      Marker_then - $
 524+ 3BC2 E4 25 E1 27                  dw          DUP, HP, STORE
 524+ 3BC6 5F 26
 525+ 3BC8 7B 2A 56 2A                  dw          PFA, CFA, CELL_MINUS
 525+ 3BCC 92 25
 526+ 3BCE              // Marker_then:
 527+ 3BCE C9 27 5F 26                  dw      DP, STORE, CELL_PLUS
 527+ 3BD2 8E 25
 528+ 3BD4 55 26 11 28                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 3BD8 55 26 5F 26
 529+ 3BDC 0D 25                        dw      EXIT
 530+ 3BDE
 531+ 3BDE              //  ______________________________________________________________________
 532+ 3BDE              //
 533+ 3BDE              // spaces       n --
 534+ 3BDE                              Colon_Def SPACES, "SPACES", is_normal
 534+ 3BDE             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 3BDE             >
 534+ 3BDE             >Dict_Ptr        defl    $
 534+ 3BDE             >
 534+ 3BDE             >//              ______________________________________________________________________
 534+ 3BDE             >//              Heap part
 534+ 3BDE             >
 534+ 3BDE             >
 534+ 3BDE             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBC6             >
 534+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBC6             >Latest_Definition defl  Heap_Ptr
 534+ EBC6             >
 534+ EBC6             >                // dummy db directives used to calculate length of namec
 534+ EBC6 53 50 41 43 >                db      "SPACES"
 534+ EBCA 45 53       >
 534+ EBCC             >len_NFA         defl    $ - temp_NFA
 534+ EBCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBC6             >
 534+ EBC6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBC7 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBCB 45 53       >
 534+ EBCD             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBCC D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBCD             >
 534+ EBCD BB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBCF             >Prev_Ptr        defl    Heap_Ptr
 534+ EBCF             >
 534+ EBCF             >mirror_Ptr      defl    $
 534+ EBCF             >
 534+ EBCF E0 3B       >                dw      Dict_Ptr + 2        // xt
 534+ EBD1             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBD1             >
 534+ EBD1             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBD1             >
 534+ EBD1             >//              ______________________________________________________________________
 534+ EBD1             >//              Dictionary part
 534+ EBD1             >
 534+ EBD1             >                org     Dict_Ptr
 534+ 3BDE             >
 534+ 3BDE CF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 3BE0             >
 534+ 3BE0             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 3BE0 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 3BE3             >
 534+ 3BE3             >
 534+ 3BE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 3BE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 3BE3             >
 534+ 3BE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 3BE3 4C 27 08 29                  dw      ZERO, MAX
 536+ 3BE7 4C 27 A6 20                  dw      ZERO, C_Q_DO
 537+ 3BEB 08 00                        dw      Spaces_Leave - $
 538+ 3BED              Spaces_Loop:
 539+ 3BED 42 29                        dw          SPACE
 540+ 3BEF 7A 20                        dw      C_LOOP
 541+ 3BF1 FC FF                        dw      Spaces_Loop - $
 542+ 3BF3              Spaces_Leave:
 543+ 3BF3 0D 25                        dw      EXIT                    // ;
 544+ 3BF5
 545+ 3BF5              //  ______________________________________________________________________
 546+ 3BF5              //
 547+ 3BF5              // <#           --
 548+ 3BF5                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 3BF5             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 3BF5             >
 548+ 3BF5             >Dict_Ptr        defl    $
 548+ 3BF5             >
 548+ 3BF5             >//              ______________________________________________________________________
 548+ 3BF5             >//              Heap part
 548+ 3BF5             >
 548+ 3BF5             >
 548+ 3BF5             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBD1             >
 548+ EBD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBD1             >Latest_Definition defl  Heap_Ptr
 548+ EBD1             >
 548+ EBD1             >                // dummy db directives used to calculate length of namec
 548+ EBD1 3C 23       >                db      "<#"
 548+ EBD3             >len_NFA         defl    $ - temp_NFA
 548+ EBD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBD1             >
 548+ EBD1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBD2 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBD4             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBD3 A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBD4             >
 548+ EBD4 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBD6             >Prev_Ptr        defl    Heap_Ptr
 548+ EBD6             >
 548+ EBD6             >mirror_Ptr      defl    $
 548+ EBD6             >
 548+ EBD6 F7 3B       >                dw      Dict_Ptr + 2        // xt
 548+ EBD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBD8             >
 548+ EBD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBD8             >
 548+ EBD8             >//              ______________________________________________________________________
 548+ EBD8             >//              Dictionary part
 548+ EBD8             >
 548+ EBD8             >                org     Dict_Ptr
 548+ 3BF5             >
 548+ 3BF5 D6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 3BF7             >
 548+ 3BF7             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 3BF7 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 3BFA             >
 548+ 3BFA             >
 548+ 3BFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 3BFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 3BFA             >
 548+ 3BFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 3BFA 80 2D 3B 28                  dw      PAD, HLD, STORE
 549+ 3BFE 5F 26
 550+ 3C00 0D 25                        dw      EXIT
 551+ 3C02
 552+ 3C02              //  ______________________________________________________________________
 553+ 3C02              //
 554+ 3C02              // #>           --
 555+ 3C02                              Colon_Def DASH_END, "#>", is_normal
 555+ 3C02             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 3C02             >
 555+ 3C02             >Dict_Ptr        defl    $
 555+ 3C02             >
 555+ 3C02             >//              ______________________________________________________________________
 555+ 3C02             >//              Heap part
 555+ 3C02             >
 555+ 3C02             >
 555+ 3C02             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBD8             >
 555+ EBD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBD8             >Latest_Definition defl  Heap_Ptr
 555+ EBD8             >
 555+ EBD8             >                // dummy db directives used to calculate length of namec
 555+ EBD8 23 3E       >                db      "#>"
 555+ EBDA             >len_NFA         defl    $ - temp_NFA
 555+ EBDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBD8             >
 555+ EBD8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBD9 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBDB             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBDA BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBDB             >
 555+ EBDB D1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBDD             >Prev_Ptr        defl    Heap_Ptr
 555+ EBDD             >
 555+ EBDD             >mirror_Ptr      defl    $
 555+ EBDD             >
 555+ EBDD 04 3C       >                dw      Dict_Ptr + 2        // xt
 555+ EBDF             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBDF             >
 555+ EBDF             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBDF             >
 555+ EBDF             >//              ______________________________________________________________________
 555+ EBDF             >//              Dictionary part
 555+ EBDF             >
 555+ EBDF             >                org     Dict_Ptr
 555+ 3C02             >
 555+ 3C02 DD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 3C04             >
 555+ 3C04             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 3C04 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 3C07             >
 555+ 3C07             >
 555+ 3C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 3C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 3C07             >
 555+ 3C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 3C07 20 26                        dw      TWO_DROP
 557+ 3C09 3B 28 55 26                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 3C0D 80 2D C0 25
 557+ 3C11 B0 28
 558+ 3C13 0D 25                        dw      EXIT
 559+ 3C15
 560+ 3C15              //  ______________________________________________________________________
 561+ 3C15              //
 562+ 3C15              // sign         n d -- d
 563+ 3C15                              Colon_Def SIGN, "SIGN", is_normal
 563+ 3C15             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 3C15             >
 563+ 3C15             >Dict_Ptr        defl    $
 563+ 3C15             >
 563+ 3C15             >//              ______________________________________________________________________
 563+ 3C15             >//              Heap part
 563+ 3C15             >
 563+ 3C15             >
 563+ 3C15             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBDF             >
 563+ EBDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBDF             >Latest_Definition defl  Heap_Ptr
 563+ EBDF             >
 563+ EBDF             >                // dummy db directives used to calculate length of namec
 563+ EBDF 53 49 47 4E >                db      "SIGN"
 563+ EBE3             >len_NFA         defl    $ - temp_NFA
 563+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBDF             >
 563+ EBDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBE0 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBE3 CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EBE4             >
 563+ EBE4 D8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 563+ EBE6             >
 563+ EBE6             >mirror_Ptr      defl    $
 563+ EBE6             >
 563+ EBE6 17 3C       >                dw      Dict_Ptr + 2        // xt
 563+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EBE8             >
 563+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EBE8             >
 563+ EBE8             >//              ______________________________________________________________________
 563+ EBE8             >//              Dictionary part
 563+ EBE8             >
 563+ EBE8             >                org     Dict_Ptr
 563+ 3C15             >
 563+ 3C15 E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 3C17             >
 563+ 3C17             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 3C17 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 3C1A             >
 563+ 3C1A             >
 563+ 3C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 3C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 3C1A             >
 563+ 3C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 3C1A 44 25                        dw      ZLESS
 565+ 3C1C 8F 20                        dw      ZBRANCH
 566+ 3C1E 08 00                        dw      Sign_Endif - $
 567+ 3C20 3D 20 2D 00                  dw          LIT, 45, HOLD
 567+ 3C24 6D 2D
 568+ 3C26              Sign_Endif:
 569+ 3C26 0D 25                        dw      EXIT
 570+ 3C28
 571+ 3C28              //  ______________________________________________________________________
 572+ 3C28              //
 573+ 3C28              // #           d1 -- d2
 574+ 3C28                              Colon_Def DASH, "#", is_normal
 574+ 3C28             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 3C28             >
 574+ 3C28             >Dict_Ptr        defl    $
 574+ 3C28             >
 574+ 3C28             >//              ______________________________________________________________________
 574+ 3C28             >//              Heap part
 574+ 3C28             >
 574+ 3C28             >
 574+ 3C28             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EBE8             >
 574+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EBE8             >Latest_Definition defl  Heap_Ptr
 574+ EBE8             >
 574+ EBE8             >                // dummy db directives used to calculate length of namec
 574+ EBE8 23          >                db      "#"
 574+ EBE9             >len_NFA         defl    $ - temp_NFA
 574+ EBE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EBE8             >
 574+ EBE8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EBE9 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EBEA             >                org     $-1                 // alter last byte of Name just above to set
 574+ EBE9 A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EBEA             >
 574+ EBEA DF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EBEC             >Prev_Ptr        defl    Heap_Ptr
 574+ EBEC             >
 574+ EBEC             >mirror_Ptr      defl    $
 574+ EBEC             >
 574+ EBEC 2A 3C       >                dw      Dict_Ptr + 2        // xt
 574+ EBEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EBEE             >
 574+ EBEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EBEE             >
 574+ EBEE             >//              ______________________________________________________________________
 574+ EBEE             >//              Dictionary part
 574+ EBEE             >
 574+ EBEE             >                org     Dict_Ptr
 574+ 3C28             >
 574+ 3C28 EC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 3C2A             >
 574+ 3C2A             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 3C2A CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 3C2D             >
 574+ 3C2D             >
 574+ 3C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 3C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 3C2D             >
 574+ 3C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 3C2D 1D 28 55 26                  dw      BASE, FETCH
 576+ 3C31
 577+ 3C31 17 25                        dw      TO_R                    // >r           ( ud1 )
 578+ 3C33 4C 27 2D 25                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 3C37 9A 24
 579+ 3C39 22 25 DD 25                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 3C3D 17 25
 580+ 3C3F 9A 24                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 3C41 22 25                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 3C43
 583+ 3C43 EB 25                        dw      ROT
 584+ 3C45 3D 20 09 00                  dw      LIT, 9, OVER, LESS
 584+ 3C49 C0 25 D5 28
 585+ 3C4D 8F 20                        dw      ZBRANCH
 586+ 3C4F 08 00                        dw      Dash_Endif - $
 587+ 3C51 3D 20 07 00                  dw          LIT, 7, PLUS
 587+ 3C55 5F 25
 588+ 3C57              Dash_Endif:
 589+ 3C57
 590+ 3C57 3D 20 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 3C5B 5F 25 6D 2D
 591+ 3C5F 0D 25                        dw      EXIT
 592+ 3C61
 593+ 3C61              //  ______________________________________________________________________
 594+ 3C61              //
 595+ 3C61              // #s           d1 -- d2
 596+ 3C61                              Colon_Def DASHES, "#S", is_normal
 596+ 3C61             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 3C61             >
 596+ 3C61             >Dict_Ptr        defl    $
 596+ 3C61             >
 596+ 3C61             >//              ______________________________________________________________________
 596+ 3C61             >//              Heap part
 596+ 3C61             >
 596+ 3C61             >
 596+ 3C61             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EBEE             >
 596+ EBEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EBEE             >Latest_Definition defl  Heap_Ptr
 596+ EBEE             >
 596+ EBEE             >                // dummy db directives used to calculate length of namec
 596+ EBEE 23 53       >                db      "#S"
 596+ EBF0             >len_NFA         defl    $ - temp_NFA
 596+ EBF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EBEE             >
 596+ EBEE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EBEF 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EBF1             >                org     $-1                 // alter last byte of Name just above to set
 596+ EBF0 D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EBF1             >
 596+ EBF1 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EBF3             >Prev_Ptr        defl    Heap_Ptr
 596+ EBF3             >
 596+ EBF3             >mirror_Ptr      defl    $
 596+ EBF3             >
 596+ EBF3 63 3C       >                dw      Dict_Ptr + 2        // xt
 596+ EBF5             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EBF5             >
 596+ EBF5             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EBF5             >
 596+ EBF5             >//              ______________________________________________________________________
 596+ EBF5             >//              Dictionary part
 596+ EBF5             >
 596+ EBF5             >                org     Dict_Ptr
 596+ 3C61             >
 596+ 3C61 F3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 3C63             >
 596+ 3C63             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 3C63 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 3C66             >
 596+ 3C66             >
 596+ 3C66             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 3C66             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 3C66             >
 596+ 3C66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 3C66              Dashes_Begin:
 598+ 3C66 2A 3C 33 26                  dw      DASH, TWO_DUP
 599+ 3C6A DC 24 32 25                  dw          OR_OP, ZEQUAL
 600+ 3C6E 8F 20                        dw      ZBRANCH
 601+ 3C70 F6 FF                        dw      Dashes_Begin - $
 602+ 3C72 0D 25                        dw      EXIT
 603+ 3C74
 604+ 3C74              //  ______________________________________________________________________
 605+ 3C74              //
 606+ 3C74              // d.r          d n --
 607+ 3C74                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 3C74             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 3C74             >
 607+ 3C74             >Dict_Ptr        defl    $
 607+ 3C74             >
 607+ 3C74             >//              ______________________________________________________________________
 607+ 3C74             >//              Heap part
 607+ 3C74             >
 607+ 3C74             >
 607+ 3C74             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EBF5             >
 607+ EBF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EBF5             >Latest_Definition defl  Heap_Ptr
 607+ EBF5             >
 607+ EBF5             >                // dummy db directives used to calculate length of namec
 607+ EBF5 44 2E 52    >                db      "D.R"
 607+ EBF8             >len_NFA         defl    $ - temp_NFA
 607+ EBF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EBF5             >
 607+ EBF5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EBF6 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EBF9             >                org     $-1                 // alter last byte of Name just above to set
 607+ EBF8 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EBF9             >
 607+ EBF9 EE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EBFB             >Prev_Ptr        defl    Heap_Ptr
 607+ EBFB             >
 607+ EBFB             >mirror_Ptr      defl    $
 607+ EBFB             >
 607+ EBFB 76 3C       >                dw      Dict_Ptr + 2        // xt
 607+ EBFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EBFD             >
 607+ EBFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EBFD             >
 607+ EBFD             >//              ______________________________________________________________________
 607+ EBFD             >//              Dictionary part
 607+ EBFD             >
 607+ EBFD             >                org     Dict_Ptr
 607+ 3C74             >
 607+ 3C74 FB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 3C76             >
 607+ 3C76             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 3C76 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 3C79             >
 607+ 3C79             >
 607+ 3C79             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 3C79             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 3C79             >
 607+ 3C79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 3C79 17 25                        dw      TO_R
 609+ 3C7B D4 25 99 34                  dw      TUCK, DABS
 610+ 3C7F F7 3B 63 3C                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 3C83 EB 25 17 3C
 610+ 3C87 04 3C
 611+ 3C89 22 25                        dw      R_TO
 612+ 3C8B C0 25 B0 28                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 3C8F E0 3B 3D 2C
 613+ 3C93 0D 25                        dw      EXIT
 614+ 3C95
 615+ 3C95              //  ______________________________________________________________________
 616+ 3C95              //
 617+ 3C95              // .r           n1 n2 --
 618+ 3C95                              Colon_Def DOT_R, ".R", is_normal
 618+ 3C95             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 3C95             >
 618+ 3C95             >Dict_Ptr        defl    $
 618+ 3C95             >
 618+ 3C95             >//              ______________________________________________________________________
 618+ 3C95             >//              Heap part
 618+ 3C95             >
 618+ 3C95             >
 618+ 3C95             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EBFD             >
 618+ EBFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EBFD             >Latest_Definition defl  Heap_Ptr
 618+ EBFD             >
 618+ EBFD             >                // dummy db directives used to calculate length of namec
 618+ EBFD 2E 52       >                db      ".R"
 618+ EBFF             >len_NFA         defl    $ - temp_NFA
 618+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EBFD             >
 618+ EBFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EBFE 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 618+ EBFF D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC00             >
 618+ EC00 F5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC02             >Prev_Ptr        defl    Heap_Ptr
 618+ EC02             >
 618+ EC02             >mirror_Ptr      defl    $
 618+ EC02             >
 618+ EC02 97 3C       >                dw      Dict_Ptr + 2        // xt
 618+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC04             >
 618+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC04             >
 618+ EC04             >//              ______________________________________________________________________
 618+ EC04             >//              Dictionary part
 618+ EC04             >
 618+ EC04             >                org     Dict_Ptr
 618+ 3C95             >
 618+ 3C95 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 3C97             >
 618+ 3C97             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 3C97 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 3C9A             >
 618+ 3C9A             >
 618+ 3C9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 3C9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 3C9A             >
 618+ 3C9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 3C9A 17 25                        dw      TO_R
 620+ 3C9C A5 28 22 25                  dw      S_TO_D, R_TO
 621+ 3CA0 76 3C                        dw      D_DOT_R
 622+ 3CA2 0D 25                        dw      EXIT
 623+ 3CA4
 624+ 3CA4              //  ______________________________________________________________________
 625+ 3CA4              //
 626+ 3CA4              // d.           d --
 627+ 3CA4                              Colon_Def D_DOT, "D.", is_normal
 627+ 3CA4             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 3CA4             >
 627+ 3CA4             >Dict_Ptr        defl    $
 627+ 3CA4             >
 627+ 3CA4             >//              ______________________________________________________________________
 627+ 3CA4             >//              Heap part
 627+ 3CA4             >
 627+ 3CA4             >
 627+ 3CA4             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC04             >
 627+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC04             >Latest_Definition defl  Heap_Ptr
 627+ EC04             >
 627+ EC04             >                // dummy db directives used to calculate length of namec
 627+ EC04 44 2E       >                db      "D."
 627+ EC06             >len_NFA         defl    $ - temp_NFA
 627+ EC06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC04             >
 627+ EC04 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC05 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC07             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC06 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC07             >
 627+ EC07 FD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC09             >Prev_Ptr        defl    Heap_Ptr
 627+ EC09             >
 627+ EC09             >mirror_Ptr      defl    $
 627+ EC09             >
 627+ EC09 A6 3C       >                dw      Dict_Ptr + 2        // xt
 627+ EC0B             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC0B             >
 627+ EC0B             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC0B             >
 627+ EC0B             >//              ______________________________________________________________________
 627+ EC0B             >//              Dictionary part
 627+ EC0B             >
 627+ EC0B             >                org     Dict_Ptr
 627+ 3CA4             >
 627+ 3CA4 09 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 3CA6             >
 627+ 3CA6             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 3CA6 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 3CA9             >
 627+ 3CA9             >
 627+ 3CA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 3CA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 3CA9             >
 627+ 3CA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 3CA9 4C 27 76 3C                  dw      ZERO, D_DOT_R, SPACE
 628+ 3CAD 42 29
 629+ 3CAF 0D 25                        dw      EXIT
 630+ 3CB1
 631+ 3CB1              //  ______________________________________________________________________
 632+ 3CB1              //
 633+ 3CB1              // .            n --
 634+ 3CB1                              Colon_Def DOT, ".", is_normal
 634+ 3CB1             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 3CB1             >
 634+ 3CB1             >Dict_Ptr        defl    $
 634+ 3CB1             >
 634+ 3CB1             >//              ______________________________________________________________________
 634+ 3CB1             >//              Heap part
 634+ 3CB1             >
 634+ 3CB1             >
 634+ 3CB1             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC0B             >
 634+ EC0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC0B             >Latest_Definition defl  Heap_Ptr
 634+ EC0B             >
 634+ EC0B             >                // dummy db directives used to calculate length of namec
 634+ EC0B 2E          >                db      "."
 634+ EC0C             >len_NFA         defl    $ - temp_NFA
 634+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC0B             >
 634+ EC0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC0C 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC0C AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC0D             >
 634+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 634+ EC0F             >
 634+ EC0F             >mirror_Ptr      defl    $
 634+ EC0F             >
 634+ EC0F B3 3C       >                dw      Dict_Ptr + 2        // xt
 634+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC11             >
 634+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC11             >
 634+ EC11             >//              ______________________________________________________________________
 634+ EC11             >//              Dictionary part
 634+ EC11             >
 634+ EC11             >                org     Dict_Ptr
 634+ 3CB1             >
 634+ 3CB1 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 3CB3             >
 634+ 3CB3             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 3CB3 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 3CB6             >
 634+ 3CB6             >
 634+ 3CB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 3CB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 3CB6             >
 634+ 3CB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 3CB6 A5 28 A6 3C                  dw      S_TO_D, D_DOT
 636+ 3CBA 0D 25                        dw      EXIT
 637+ 3CBC
 638+ 3CBC              //  ______________________________________________________________________
 639+ 3CBC              //
 640+ 3CBC              // ?            n --
 641+ 3CBC                              Colon_Def QUESTION, "?", is_normal
 641+ 3CBC             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 3CBC             >
 641+ 3CBC             >Dict_Ptr        defl    $
 641+ 3CBC             >
 641+ 3CBC             >//              ______________________________________________________________________
 641+ 3CBC             >//              Heap part
 641+ 3CBC             >
 641+ 3CBC             >
 641+ 3CBC             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC11             >
 641+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC11             >Latest_Definition defl  Heap_Ptr
 641+ EC11             >
 641+ EC11             >                // dummy db directives used to calculate length of namec
 641+ EC11 3F          >                db      "?"
 641+ EC12             >len_NFA         defl    $ - temp_NFA
 641+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC11             >
 641+ EC11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC12 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC12 BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC13             >
 641+ EC13 0B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC15             >Prev_Ptr        defl    Heap_Ptr
 641+ EC15             >
 641+ EC15             >mirror_Ptr      defl    $
 641+ EC15             >
 641+ EC15 BE 3C       >                dw      Dict_Ptr + 2        // xt
 641+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC17             >
 641+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC17             >
 641+ EC17             >//              ______________________________________________________________________
 641+ EC17             >//              Dictionary part
 641+ EC17             >
 641+ EC17             >                org     Dict_Ptr
 641+ 3CBC             >
 641+ 3CBC 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 3CBE             >
 641+ 3CBE             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 3CBE CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 3CC1             >
 641+ 3CC1             >
 641+ 3CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 3CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 3CC1             >
 641+ 3CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 3CC1 55 26 B3 3C                  dw      FETCH, DOT
 643+ 3CC5 0D 25                        dw      EXIT
 644+ 3CC7
 645+ 3CC7              //  ______________________________________________________________________
 646+ 3CC7              //
 647+ 3CC7              // u.           u --
 648+ 3CC7                              Colon_Def U_DOT, "U.", is_normal
 648+ 3CC7             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 3CC7             >
 648+ 3CC7             >Dict_Ptr        defl    $
 648+ 3CC7             >
 648+ 3CC7             >//              ______________________________________________________________________
 648+ 3CC7             >//              Heap part
 648+ 3CC7             >
 648+ 3CC7             >
 648+ 3CC7             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC17             >
 648+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC17             >Latest_Definition defl  Heap_Ptr
 648+ EC17             >
 648+ EC17             >                // dummy db directives used to calculate length of namec
 648+ EC17 55 2E       >                db      "U."
 648+ EC19             >len_NFA         defl    $ - temp_NFA
 648+ EC19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC17             >
 648+ EC17 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC18 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC1A             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC19 AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC1A             >
 648+ EC1A 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC1C             >Prev_Ptr        defl    Heap_Ptr
 648+ EC1C             >
 648+ EC1C             >mirror_Ptr      defl    $
 648+ EC1C             >
 648+ EC1C C9 3C       >                dw      Dict_Ptr + 2        // xt
 648+ EC1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC1E             >
 648+ EC1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC1E             >
 648+ EC1E             >//              ______________________________________________________________________
 648+ EC1E             >//              Dictionary part
 648+ EC1E             >
 648+ EC1E             >                org     Dict_Ptr
 648+ 3CC7             >
 648+ 3CC7 1C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 3CC9             >
 648+ 3CC9             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 3CC9 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 3CCC             >
 648+ 3CCC             >
 648+ 3CCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 3CCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 3CCC             >
 648+ 3CCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 3CCC 4C 27 A6 3C                  dw      ZERO, D_DOT
 650+ 3CD0 0D 25                        dw      EXIT
 651+ 3CD2
 652+ 3CD2              //  ______________________________________________________________________
 653+ 3CD2              //
 654+ 3CD2              // words        --
 655+ 3CD2                              Colon_Def WORDS, "WORDS", is_normal
 655+ 3CD2             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 3CD2             >
 655+ 3CD2             >Dict_Ptr        defl    $
 655+ 3CD2             >
 655+ 3CD2             >//              ______________________________________________________________________
 655+ 3CD2             >//              Heap part
 655+ 3CD2             >
 655+ 3CD2             >
 655+ 3CD2             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC1E             >
 655+ EC1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC1E             >Latest_Definition defl  Heap_Ptr
 655+ EC1E             >
 655+ EC1E             >                // dummy db directives used to calculate length of namec
 655+ EC1E 57 4F 52 44 >                db      "WORDS"
 655+ EC22 53          >
 655+ EC23             >len_NFA         defl    $ - temp_NFA
 655+ EC23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC1E             >
 655+ EC1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC1F 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC23 53          >
 655+ EC24             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC23 D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC24             >
 655+ EC24 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC26             >Prev_Ptr        defl    Heap_Ptr
 655+ EC26             >
 655+ EC26             >mirror_Ptr      defl    $
 655+ EC26             >
 655+ EC26 D4 3C       >                dw      Dict_Ptr + 2        // xt
 655+ EC28             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC28             >
 655+ EC28             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC28             >
 655+ EC28             >//              ______________________________________________________________________
 655+ EC28             >//              Dictionary part
 655+ EC28             >
 655+ EC28             >                org     Dict_Ptr
 655+ 3CD2             >
 655+ 3CD2 26 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 3CD4             >
 655+ 3CD4             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 3CD4 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 3CD7             >
 655+ 3CD7             >
 655+ 3CD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 3CD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 3CD7             >
 655+ 3CD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 3CD7 3D 20 80 00                  dw      LIT, 128, OUT, STORE
 656+ 3CDB F9 27 5F 26
 657+ 3CDF 0B 28 55 26                  dw      CONTEXT, FETCH, FETCH
 657+ 3CE3 55 26
 658+ 3CE5              Words_Begin:
 659+ 3CE5 B3 29                        dw          FAR // Q TO HEAP
 660+ 3CE7 E4 25 6A 26                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 3CEB 3D 20 1F 00
 660+ 3CEF CD 24
 661+ 3CF1 F9 27 55 26                  dw          OUT, FETCH, PLUS
 661+ 3CF5 5F 25
 662+ 3CF7 76 27 D5 28                  dw          CL, LESS, ZEQUAL
 662+ 3CFB 32 25
 663+ 3CFD 8F 20                        dw          ZBRANCH
 664+ 3CFF 0A 00                        dw          Words_Endif - $
 665+ 3D01 4D 22 4C 27                  dw              CR, ZERO, OUT, STORE
 665+ 3D05 F9 27 5F 26
 666+ 3D09              Words_Endif:
 667+ 3D09 E4 25 1D 30                  dw          DUP, ID_DOT
 668+ 3D0D 53 27 4D 29                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 3D11 78 25 55 26
 669+ 3D15 E4 25 32 25                  dw          DUP, ZEQUAL
 670+ 3D19 57 23 DC 24                  dw          QTERMINAL, OR_OP
 671+ 3D1D 8F 20                        dw      ZBRANCH
 672+ 3D1F C6 FF                        dw      Words_Begin - $
 673+ 3D21 C9 25                        dw      DROP
 674+ 3D23 0D 25                        dw      EXIT
 675+ 3D25
 676+ 3D25              //  ______________________________________________________________________
 677+ 3D25              //
 678+ 3D25              // list         n --
 679+ 3D25                              Colon_Def LIST, "LIST", is_normal
 679+ 3D25             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 3D25             >
 679+ 3D25             >Dict_Ptr        defl    $
 679+ 3D25             >
 679+ 3D25             >//              ______________________________________________________________________
 679+ 3D25             >//              Heap part
 679+ 3D25             >
 679+ 3D25             >
 679+ 3D25             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC28             >
 679+ EC28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC28             >Latest_Definition defl  Heap_Ptr
 679+ EC28             >
 679+ EC28             >                // dummy db directives used to calculate length of namec
 679+ EC28 4C 49 53 54 >                db      "LIST"
 679+ EC2C             >len_NFA         defl    $ - temp_NFA
 679+ EC2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC28             >
 679+ EC28 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC29 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC2D             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC2C D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC2D             >
 679+ EC2D 1E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC2F             >Prev_Ptr        defl    Heap_Ptr
 679+ EC2F             >
 679+ EC2F             >mirror_Ptr      defl    $
 679+ EC2F             >
 679+ EC2F 27 3D       >                dw      Dict_Ptr + 2        // xt
 679+ EC31             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC31             >
 679+ EC31             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC31             >
 679+ EC31             >//              ______________________________________________________________________
 679+ EC31             >//              Dictionary part
 679+ EC31             >
 679+ EC31             >                org     Dict_Ptr
 679+ 3D25             >
 679+ 3D25 2F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 3D27             >
 679+ 3D27             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 3D27 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 3D2A             >
 679+ 3D2A             >
 679+ 3D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 3D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 3D2A             >
 679+ 3D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 3D2A 86 2B 4D 22                  dw      DECIMAL, CR
 681+ 3D2E E4 25 FF 27                  dw      DUP, SCR, STORE
 681+ 3D32 5F 26
 682+ 3D34 DA 2D                        dw      C_DOT_QUOTE
 683+ 3D36 05 53 63 72                  db      5, "Scr# "
 683+ 3D3A 23 20
 684+ 3D3C B3 3C                        dw      DOT
 685+ 3D3E 8B 27 4C 27                  dw      LSCR, ZERO, C_DO
 685+ 3D42 CE 20
 686+ 3D44              List_Loop:
 687+ 3D44 4D 22                        dw          CR
 688+ 3D46 D4 20 61 27                  dw          I, THREE
 689+ 3D4A 97 3C 42 29                  dw          DOT_R, SPACE
 690+ 3D4E D4 20 FF 27                  dw          I, SCR, FETCH, DOT_LINE
 690+ 3D52 55 26 94 35
 691+ 3D56 57 23                        dw          QTERMINAL
 692+ 3D58 8F 20                        dw          ZBRANCH
 693+ 3D5A 06 00                        dw          List_Endif - $
 694+ 3D5C 9A 20                        dw              C_LEAVE
 695+ 3D5E 06 00                        dw              List_Leave - $
 696+ 3D60              List_Endif:
 697+ 3D60 7A 20                        dw      C_LOOP
 698+ 3D62 E2 FF                        dw      List_Loop - $
 699+ 3D64              List_Leave:
 700+ 3D64 4D 22                        dw      CR
 701+ 3D66 0D 25                        dw      EXIT
 702+ 3D68
 703+ 3D68              //  ______________________________________________________________________
 704+ 3D68              //
 705+ 3D68              // index        n1 n2 --
 706+ 3D68                              Colon_Def INDEX, "INDEX", is_normal
 706+ 3D68             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 3D68             >
 706+ 3D68             >Dict_Ptr        defl    $
 706+ 3D68             >
 706+ 3D68             >//              ______________________________________________________________________
 706+ 3D68             >//              Heap part
 706+ 3D68             >
 706+ 3D68             >
 706+ 3D68             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC31             >
 706+ EC31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC31             >Latest_Definition defl  Heap_Ptr
 706+ EC31             >
 706+ EC31             >                // dummy db directives used to calculate length of namec
 706+ EC31 49 4E 44 45 >                db      "INDEX"
 706+ EC35 58          >
 706+ EC36             >len_NFA         defl    $ - temp_NFA
 706+ EC36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC31             >
 706+ EC31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC32 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC36 58          >
 706+ EC37             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC36 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC37             >
 706+ EC37 28 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC39             >Prev_Ptr        defl    Heap_Ptr
 706+ EC39             >
 706+ EC39             >mirror_Ptr      defl    $
 706+ EC39             >
 706+ EC39 6A 3D       >                dw      Dict_Ptr + 2        // xt
 706+ EC3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC3B             >
 706+ EC3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC3B             >
 706+ EC3B             >//              ______________________________________________________________________
 706+ EC3B             >//              Dictionary part
 706+ EC3B             >
 706+ EC3B             >                org     Dict_Ptr
 706+ 3D68             >
 706+ 3D68 39 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 3D6A             >
 706+ 3D6A             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 3D6A CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 3D6D             >
 706+ 3D6D             >
 706+ 3D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 3D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 3D6D             >
 706+ 3D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 3D6D 78 25 DD 25                  dw      ONE_PLUS, SWAP, C_DO
 707+ 3D71 CE 20
 708+ 3D73              Index_Loop:
 709+ 3D73 4D 22 D4 20                  dw          CR, I, THREE
 709+ 3D77 61 27
 710+ 3D79 97 3C 42 29                  dw          DOT_R, SPACE
 711+ 3D7D 4C 27 D4 20                  dw          ZERO, I, DOT_LINE
 711+ 3D81 94 35
 712+ 3D83 57 23                        dw          QTERMINAL
 713+ 3D85 8F 20                        dw          ZBRANCH
 714+ 3D87 06 00                        dw          Index_Endif - $
 715+ 3D89 9A 20                        dw              C_LEAVE
 716+ 3D8B 06 00                        dw              Index_Leave - $
 717+ 3D8D              Index_Endif:
 718+ 3D8D 7A 20                        dw      C_LOOP
 719+ 3D8F E4 FF                        dw      Index_Loop - $
 720+ 3D91              Index_Leave:
 721+ 3D91 4D 22                        dw      CR
 722+ 3D93 0D 25                        dw      EXIT
 723+ 3D95
 724+ 3D95              //  ______________________________________________________________________
 725+ 3D95              //
 726+ 3D95              // cls          --
 727+ 3D95                              Colon_Def CLS, "CLS", is_normal
 727+ 3D95             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 3D95             >
 727+ 3D95             >Dict_Ptr        defl    $
 727+ 3D95             >
 727+ 3D95             >//              ______________________________________________________________________
 727+ 3D95             >//              Heap part
 727+ 3D95             >
 727+ 3D95             >
 727+ 3D95             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC3B             >
 727+ EC3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC3B             >Latest_Definition defl  Heap_Ptr
 727+ EC3B             >
 727+ EC3B             >                // dummy db directives used to calculate length of namec
 727+ EC3B 43 4C 53    >                db      "CLS"
 727+ EC3E             >len_NFA         defl    $ - temp_NFA
 727+ EC3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC3B             >
 727+ EC3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC3C 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC3F             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC3E D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC3F             >
 727+ EC3F 31 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC41             >Prev_Ptr        defl    Heap_Ptr
 727+ EC41             >
 727+ EC41             >mirror_Ptr      defl    $
 727+ EC41             >
 727+ EC41 97 3D       >                dw      Dict_Ptr + 2        // xt
 727+ EC43             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC43             >
 727+ EC43             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC43             >
 727+ EC43             >//              ______________________________________________________________________
 727+ EC43             >//              Dictionary part
 727+ EC43             >
 727+ EC43             >                org     Dict_Ptr
 727+ 3D95             >
 727+ 3D95 41 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 3D97             >
 727+ 3D97             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 3D97 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 3D9A             >
 727+ 3D9A             >
 727+ 3D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 3D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 3D9A             >
 727+ 3D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 3D9A 3D 20 0E 00                  dw      LIT, $0E, EMITC
 728+ 3D9E 3C 22
 729+ 3DA0 0D 25                        dw      EXIT
 730+ 3DA2
 731+ 3DA2              //  ______________________________________________________________________
 732+ 3DA2              //
 733+ 3DA2              // splash       --
 734+ 3DA2              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 3DA2              //              dw      CLS
 736+ 3DA2              //              dw      C_DOT_QUOTE
 737+ 3DA2              //              db      87
 738+ 3DA2              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 3DA2              //              db      "Heap Vocabulary - build 20231119", 13  // 33
 740+ 3DA2              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 3DA2              //              dw      EXIT
 742+ 3DA2
 743+ 3DA2              //  ______________________________________________________________________
 744+ 3DA2              //
 745+ 3DA2              // splash       --
 746+ 3DA2                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 3DA2             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 3DA2             >
 746+ 3DA2             >Dict_Ptr        defl    $
 746+ 3DA2             >
 746+ 3DA2             >//              ______________________________________________________________________
 746+ 3DA2             >//              Heap part
 746+ 3DA2             >
 746+ 3DA2             >
 746+ 3DA2             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC43             >
 746+ EC43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC43             >Latest_Definition defl  Heap_Ptr
 746+ EC43             >
 746+ EC43             >                // dummy db directives used to calculate length of namec
 746+ EC43 53 50 4C 41 >                db      "SPLASH"
 746+ EC47 53 48       >
 746+ EC49             >len_NFA         defl    $ - temp_NFA
 746+ EC49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC43             >
 746+ EC43 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC44 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC48 53 48       >
 746+ EC4A             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC49 C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC4A             >
 746+ EC4A 3B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC4C             >Prev_Ptr        defl    Heap_Ptr
 746+ EC4C             >
 746+ EC4C             >mirror_Ptr      defl    $
 746+ EC4C             >
 746+ EC4C A4 3D       >                dw      Dict_Ptr + 2        // xt
 746+ EC4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC4E             >
 746+ EC4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC4E             >
 746+ EC4E             >//              ______________________________________________________________________
 746+ EC4E             >//              Dictionary part
 746+ EC4E             >
 746+ EC4E             >                org     Dict_Ptr
 746+ 3DA2             >
 746+ 3DA2 4C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 3DA4             >
 746+ 3DA4             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 3DA4 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 3DA7             >
 746+ 3DA7             >
 746+ 3DA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 3DA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 3DA7             >
 746+ 3DA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 3DA7 97 3D                        dw      CLS
 748+ 3DA9 3D 20 02 00                  dw      LIT, Splash_Ptr
 749+ 3DAD B3 29                        dw      FAR
 750+ 3DAF E9 2B 3D 2C                  dw      COUNT, TYPE
 751+ 3DB3 0D 25                        dw      EXIT
 752+ 3DB5
 753+ 3DB5              //  ______________________________________________________________________
 754+ 3DB5              //
 755+ 3DB5              // video        --
 756+ 3DB5                              Colon_Def VIDEO, "VIDEO", is_normal
 756+ 3DB5             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 756+ 3DB5             >
 756+ 3DB5             >Dict_Ptr        defl    $
 756+ 3DB5             >
 756+ 3DB5             >//              ______________________________________________________________________
 756+ 3DB5             >//              Heap part
 756+ 3DB5             >
 756+ 3DB5             >
 756+ 3DB5             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ EC4E             >
 756+ EC4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ EC4E             >Latest_Definition defl  Heap_Ptr
 756+ EC4E             >
 756+ EC4E             >                // dummy db directives used to calculate length of namec
 756+ EC4E 56 49 44 45 >                db      "VIDEO"
 756+ EC52 4F          >
 756+ EC53             >len_NFA         defl    $ - temp_NFA
 756+ EC53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ EC4E             >
 756+ EC4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ EC4F 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 756+ EC53 4F          >
 756+ EC54             >                org     $-1                 // alter last byte of Name just above to set
 756+ EC53 CF          >                db      {b $} | END_BIT     // msb as name end
 756+ EC54             >
 756+ EC54 43 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ EC56             >Prev_Ptr        defl    Heap_Ptr
 756+ EC56             >
 756+ EC56             >mirror_Ptr      defl    $
 756+ EC56             >
 756+ EC56 B7 3D       >                dw      Dict_Ptr + 2        // xt
 756+ EC58             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ EC58             >
 756+ EC58             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ EC58             >
 756+ EC58             >//              ______________________________________________________________________
 756+ EC58             >//              Dictionary part
 756+ EC58             >
 756+ EC58             >                org     Dict_Ptr
 756+ 3DB5             >
 756+ 3DB5 56 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 3DB7             >
 756+ 3DB7             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 3DB7 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 756+ 3DBA             >
 756+ 3DBA             >
 756+ 3DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 3DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 3DBA             >
 756+ 3DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 3DBA 5A 27 E4 25                  dw      TWO, DUP, DEVICE, STORE
 757+ 3DBE C9 35 5F 26
 758+ 3DC2 6B 23                        dw      SELECT
 759+ 3DC4 0D 25                        dw      EXIT
 760+ 3DC6
 761+ 3DC6              //  ______________________________________________________________________
 762+ 3DC6              //
 763+ 3DC6              // autoexec     --
 764+ 3DC6              // this word is called the first time the Forth system boot to
 765+ 3DC6              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 766+ 3DC6                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 766+ 3DC6             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 766+ 3DC6             >
 766+ 3DC6             >Dict_Ptr        defl    $
 766+ 3DC6             >
 766+ 3DC6             >//              ______________________________________________________________________
 766+ 3DC6             >//              Heap part
 766+ 3DC6             >
 766+ 3DC6             >
 766+ 3DC6             >                org     (Heap_Ptr & $1FFF) + $E000
 766+ EC58             >
 766+ EC58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ EC58             >Latest_Definition defl  Heap_Ptr
 766+ EC58             >
 766+ EC58             >                // dummy db directives used to calculate length of namec
 766+ EC58 41 55 54 4F >                db      "AUTOEXEC"
 766+ EC5C 45 58 45 43 >
 766+ EC60             >len_NFA         defl    $ - temp_NFA
 766+ EC60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ EC58             >
 766+ EC58 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ EC59 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 766+ EC5D 45 58 45 43 >
 766+ EC61             >                org     $-1                 // alter last byte of Name just above to set
 766+ EC60 C3          >                db      {b $} | END_BIT     // msb as name end
 766+ EC61             >
 766+ EC61 4E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 766+ EC63             >Prev_Ptr        defl    Heap_Ptr
 766+ EC63             >
 766+ EC63             >mirror_Ptr      defl    $
 766+ EC63             >
 766+ EC63 C8 3D       >                dw      Dict_Ptr + 2        // xt
 766+ EC65             >Heap_Ptr        defl    $ - $E000           // save current HP
 766+ EC65             >
 766+ EC65             >Current_HP      defl  $ - $E000             // used to set HP once!
 766+ EC65             >
 766+ EC65             >//              ______________________________________________________________________
 766+ EC65             >//              Dictionary part
 766+ EC65             >
 766+ EC65             >                org     Dict_Ptr
 766+ 3DC6             >
 766+ 3DC6 63 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 766+ 3DC8             >
 766+ 3DC8             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 3DC8 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 3DCB             >
 766+ 3DCB             >
 766+ 3DCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 3DCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 3DCB             >
 766+ 3DCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 3DCB 3D 20 0B 00                  dw      LIT, 11
 768+ 3DCF 3D 20 13 27                  dw      LIT, NOOP
 769+ 3DD3 3D 20 8C 32                  dw      LIT, Autoexec_Ptr
 770+ 3DD7 5F 26                        dw      STORE
 771+ 3DD9 CD 3A                        dw      LOAD
 772+ 3DDB 33 32                        dw      QUIT
 773+ 3DDD 0D 25                        dw      EXIT
 774+ 3DDF
 775+ 3DDF
 776+ 3DDF              //  ______________________________________________________________________
 777+ 3DDF              //
 778+ 3DDF              // bye     --
 779+ 3DDF              //
 780+ 3DDF                              Colon_Def BYE, "BYE", is_normal
 780+ 3DDF             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 780+ 3DDF             >
 780+ 3DDF             >Dict_Ptr        defl    $
 780+ 3DDF             >
 780+ 3DDF             >//              ______________________________________________________________________
 780+ 3DDF             >//              Heap part
 780+ 3DDF             >
 780+ 3DDF             >
 780+ 3DDF             >                org     (Heap_Ptr & $1FFF) + $E000
 780+ EC65             >
 780+ EC65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 780+ EC65             >Latest_Definition defl  Heap_Ptr
 780+ EC65             >
 780+ EC65             >                // dummy db directives used to calculate length of namec
 780+ EC65 42 59 45    >                db      "BYE"
 780+ EC68             >len_NFA         defl    $ - temp_NFA
 780+ EC68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 780+ EC65             >
 780+ EC65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 780+ EC66 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 780+ EC69             >                org     $-1                 // alter last byte of Name just above to set
 780+ EC68 C5          >                db      {b $} | END_BIT     // msb as name end
 780+ EC69             >
 780+ EC69 58 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 780+ EC6B             >Prev_Ptr        defl    Heap_Ptr
 780+ EC6B             >
 780+ EC6B             >mirror_Ptr      defl    $
 780+ EC6B             >
 780+ EC6B E1 3D       >                dw      Dict_Ptr + 2        // xt
 780+ EC6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 780+ EC6D             >
 780+ EC6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 780+ EC6D             >
 780+ EC6D             >//              ______________________________________________________________________
 780+ EC6D             >//              Dictionary part
 780+ EC6D             >
 780+ EC6D             >                org     Dict_Ptr
 780+ 3DDF             >
 780+ 3DDF 6B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 780+ 3DE1             >
 780+ 3DE1             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 780+ 3DE1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 780+ 3DE4             >
 780+ 3DE4             >
 780+ 3DE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 780+ 3DE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 780+ 3DE4             >
 780+ 3DE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 781+ 3DE4 BA 37                        dw      FLUSH
 782+ 3DE6 08 37                        dw      EMPTY_BUFFERS
 783+ 3DE8 6B 3F 55 26                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 783+ 3DEC A6 23 C9 25
 784+ 3DF0 4C 27 92 27                  dw      ZERO, PLUS_ORIGIN
 785+ 3DF4 29 34                        dw      BASIC
 786+ 3DF6
 787+ 3DF6              //  ______________________________________________________________________
 788+ 3DF6              //
 789+ 3DF6              // invv     --
 790+ 3DF6              //
 791+ 3DF6              //              Colon_Def INVV, "INVV", is_normal
 792+ 3DF6              //              dw      LIT, 20, EMITC, ONE, EMITC
 793+ 3DF6              //              dw      EXIT
 794+ 3DF6
 795+ 3DF6              //  ______________________________________________________________________
 796+ 3DF6              //
 797+ 3DF6              // truv     --
 798+ 3DF6              //
 799+ 3DF6              //              Colon_Def TRUV, "TRUV", is_normal
 800+ 3DF6              //              dw      LIT, 20, EMITC, ZERO, EMITC
 801+ 3DF6              //              dw      EXIT
 802+ 3DF6
 803+ 3DF6              //  ______________________________________________________________________
 804+ 3DF6              //
 805+ 3DF6              // mark     --
 806+ 3DF6              //
 807+ 3DF6              //              Colon_Def MARK, "MARK", is_normal
 808+ 3DF6              //              dw      INVV, TYPE, TRUV
 809+ 3DF6              //              dw      EXIT
 810+ 3DF6
 811+ 3DF6              //  ______________________________________________________________________
 812+ 3DF6              //
 813+ 3DF6              // back     --
 814+ 3DF6              //
 815+ 3DF6                              Colon_Def BACK, "BACK", is_normal
 815+ 3DF6             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 815+ 3DF6             >
 815+ 3DF6             >Dict_Ptr        defl    $
 815+ 3DF6             >
 815+ 3DF6             >//              ______________________________________________________________________
 815+ 3DF6             >//              Heap part
 815+ 3DF6             >
 815+ 3DF6             >
 815+ 3DF6             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ EC6D             >
 815+ EC6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ EC6D             >Latest_Definition defl  Heap_Ptr
 815+ EC6D             >
 815+ EC6D             >                // dummy db directives used to calculate length of namec
 815+ EC6D 42 41 43 4B >                db      "BACK"
 815+ EC71             >len_NFA         defl    $ - temp_NFA
 815+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ EC6D             >
 815+ EC6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ EC6E 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 815+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 815+ EC71 CB          >                db      {b $} | END_BIT     // msb as name end
 815+ EC72             >
 815+ EC72 65 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ EC74             >Prev_Ptr        defl    Heap_Ptr
 815+ EC74             >
 815+ EC74             >mirror_Ptr      defl    $
 815+ EC74             >
 815+ EC74 F8 3D       >                dw      Dict_Ptr + 2        // xt
 815+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ EC76             >
 815+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ EC76             >
 815+ EC76             >//              ______________________________________________________________________
 815+ EC76             >//              Dictionary part
 815+ EC76             >
 815+ EC76             >                org     Dict_Ptr
 815+ 3DF6             >
 815+ 3DF6 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 3DF8             >
 815+ 3DF8             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 3DF8 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 3DFB             >
 815+ 3DFB             >
 815+ 3DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 3DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 3DFB             >
 815+ 3DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 3DFB 71 28 B0 28                  dw      HERE, SUBTRACT, COMMA
 816+ 3DFF 87 28
 817+ 3E01 0D 25                        dw      EXIT
 818+ 3E03
 819+ 3E03              //  ______________________________________________________________________
 820+ 3E03              //
 821+ 3E03              // if          ( -- a 2 ) \ compile-time
 822+ 3E03              // IF ... THEN
 823+ 3E03              // IF ... ELSE ... ENDIF
 824+ 3E03                              Colon_Def IF, "IF", is_immediate
 824+ 3E03             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 824+ 3E03             >
 824+ 3E03             >Dict_Ptr        defl    $
 824+ 3E03             >
 824+ 3E03             >//              ______________________________________________________________________
 824+ 3E03             >//              Heap part
 824+ 3E03             >
 824+ 3E03             >
 824+ 3E03             >                org     (Heap_Ptr & $1FFF) + $E000
 824+ EC76             >
 824+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ EC76             >Latest_Definition defl  Heap_Ptr
 824+ EC76             >
 824+ EC76             >                // dummy db directives used to calculate length of namec
 824+ EC76 49 46       >                db      "IF"
 824+ EC78             >len_NFA         defl    $ - temp_NFA
 824+ EC78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ EC76             >
 824+ EC76 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ EC77 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 824+ EC79             >                org     $-1                 // alter last byte of Name just above to set
 824+ EC78 C6          >                db      {b $} | END_BIT     // msb as name end
 824+ EC79             >
 824+ EC79 6D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 824+ EC7B             >Prev_Ptr        defl    Heap_Ptr
 824+ EC7B             >
 824+ EC7B             >mirror_Ptr      defl    $
 824+ EC7B             >
 824+ EC7B 05 3E       >                dw      Dict_Ptr + 2        // xt
 824+ EC7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 824+ EC7D             >
 824+ EC7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 824+ EC7D             >
 824+ EC7D             >//              ______________________________________________________________________
 824+ EC7D             >//              Dictionary part
 824+ EC7D             >
 824+ EC7D             >                org     Dict_Ptr
 824+ 3E03             >
 824+ 3E03 7B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 824+ 3E05             >
 824+ 3E05             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 3E05 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 824+ 3E08             >
 824+ 3E08             >
 824+ 3E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 3E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 3E08             >
 824+ 3E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 3E08 1D 2B 8F 20                  dw      COMPILE, ZBRANCH
 826+ 3E0C 71 28 4C 27                  dw      HERE, ZERO, COMMA
 826+ 3E10 87 28
 827+ 3E12 5A 27                        dw      TWO
 828+ 3E14 0D 25                        dw      EXIT
 829+ 3E16
 830+ 3E16              //  ______________________________________________________________________
 831+ 3E16              //
 832+ 3E16              // then        ( a 2 -- ) \ compile-time
 833+ 3E16              //
 834+ 3E16                              Colon_Def THEN, "THEN", is_immediate
 834+ 3E16             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 834+ 3E16             >
 834+ 3E16             >Dict_Ptr        defl    $
 834+ 3E16             >
 834+ 3E16             >//              ______________________________________________________________________
 834+ 3E16             >//              Heap part
 834+ 3E16             >
 834+ 3E16             >
 834+ 3E16             >                org     (Heap_Ptr & $1FFF) + $E000
 834+ EC7D             >
 834+ EC7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ EC7D             >Latest_Definition defl  Heap_Ptr
 834+ EC7D             >
 834+ EC7D             >                // dummy db directives used to calculate length of namec
 834+ EC7D 54 48 45 4E >                db      "THEN"
 834+ EC81             >len_NFA         defl    $ - temp_NFA
 834+ EC81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ EC7D             >
 834+ EC7D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ EC7E 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 834+ EC82             >                org     $-1                 // alter last byte of Name just above to set
 834+ EC81 CE          >                db      {b $} | END_BIT     // msb as name end
 834+ EC82             >
 834+ EC82 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 834+ EC84             >Prev_Ptr        defl    Heap_Ptr
 834+ EC84             >
 834+ EC84             >mirror_Ptr      defl    $
 834+ EC84             >
 834+ EC84 18 3E       >                dw      Dict_Ptr + 2        // xt
 834+ EC86             >Heap_Ptr        defl    $ - $E000           // save current HP
 834+ EC86             >
 834+ EC86             >Current_HP      defl  $ - $E000             // used to set HP once!
 834+ EC86             >
 834+ EC86             >//              ______________________________________________________________________
 834+ EC86             >//              Dictionary part
 834+ EC86             >
 834+ EC86             >                org     Dict_Ptr
 834+ 3E16             >
 834+ 3E16 84 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 834+ 3E18             >
 834+ 3E18             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 3E18 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 834+ 3E1B             >
 834+ 3E1B             >
 834+ 3E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 3E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 3E1B             >
 834+ 3E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 3E1B C2 2A                        dw      QCOMP
 836+ 3E1D 5A 27 E6 2A                  dw      TWO, QPAIRS
 837+ 3E21 71 28 C0 25                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 837+ 3E25 B0 28 DD 25
 837+ 3E29 5F 26
 838+ 3E2B 0D 25                        dw      EXIT
 839+ 3E2D
 840+ 3E2D              //  ______________________________________________________________________
 841+ 3E2D              //
 842+ 3E2D              // endif       ( a 2 -- ) \ compile-time
 843+ 3E2D              //
 844+ 3E2D                              Colon_Def ENDIF, "ENDIF", is_immediate
 844+ 3E2D             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 844+ 3E2D             >
 844+ 3E2D             >Dict_Ptr        defl    $
 844+ 3E2D             >
 844+ 3E2D             >//              ______________________________________________________________________
 844+ 3E2D             >//              Heap part
 844+ 3E2D             >
 844+ 3E2D             >
 844+ 3E2D             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ EC86             >
 844+ EC86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ EC86             >Latest_Definition defl  Heap_Ptr
 844+ EC86             >
 844+ EC86             >                // dummy db directives used to calculate length of namec
 844+ EC86 45 4E 44 49 >                db      "ENDIF"
 844+ EC8A 46          >
 844+ EC8B             >len_NFA         defl    $ - temp_NFA
 844+ EC8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ EC86             >
 844+ EC86 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ EC87 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 844+ EC8B 46          >
 844+ EC8C             >                org     $-1                 // alter last byte of Name just above to set
 844+ EC8B C6          >                db      {b $} | END_BIT     // msb as name end
 844+ EC8C             >
 844+ EC8C 7D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ EC8E             >Prev_Ptr        defl    Heap_Ptr
 844+ EC8E             >
 844+ EC8E             >mirror_Ptr      defl    $
 844+ EC8E             >
 844+ EC8E 2F 3E       >                dw      Dict_Ptr + 2        // xt
 844+ EC90             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ EC90             >
 844+ EC90             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ EC90             >
 844+ EC90             >//              ______________________________________________________________________
 844+ EC90             >//              Dictionary part
 844+ EC90             >
 844+ EC90             >                org     Dict_Ptr
 844+ 3E2D             >
 844+ 3E2D 8E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 3E2F             >
 844+ 3E2F             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 3E2F CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 3E32             >
 844+ 3E32             >
 844+ 3E32             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 3E32             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 3E32             >
 844+ 3E32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 3E32 18 3E                        dw      THEN
 846+ 3E34 0D 25                        dw      EXIT
 847+ 3E36
 848+ 3E36              //  ______________________________________________________________________
 849+ 3E36              //
 850+ 3E36              // else        ( a1 2 -- a2 2 ) \ compile-time
 851+ 3E36              //
 852+ 3E36                              Colon_Def ELSE, "ELSE", is_immediate
 852+ 3E36             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 852+ 3E36             >
 852+ 3E36             >Dict_Ptr        defl    $
 852+ 3E36             >
 852+ 3E36             >//              ______________________________________________________________________
 852+ 3E36             >//              Heap part
 852+ 3E36             >
 852+ 3E36             >
 852+ 3E36             >                org     (Heap_Ptr & $1FFF) + $E000
 852+ EC90             >
 852+ EC90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ EC90             >Latest_Definition defl  Heap_Ptr
 852+ EC90             >
 852+ EC90             >                // dummy db directives used to calculate length of namec
 852+ EC90 45 4C 53 45 >                db      "ELSE"
 852+ EC94             >len_NFA         defl    $ - temp_NFA
 852+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ EC90             >
 852+ EC90 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ EC91 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 852+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 852+ EC94 C5          >                db      {b $} | END_BIT     // msb as name end
 852+ EC95             >
 852+ EC95 86 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 852+ EC97             >Prev_Ptr        defl    Heap_Ptr
 852+ EC97             >
 852+ EC97             >mirror_Ptr      defl    $
 852+ EC97             >
 852+ EC97 38 3E       >                dw      Dict_Ptr + 2        // xt
 852+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 852+ EC99             >
 852+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 852+ EC99             >
 852+ EC99             >//              ______________________________________________________________________
 852+ EC99             >//              Dictionary part
 852+ EC99             >
 852+ EC99             >                org     Dict_Ptr
 852+ 3E36             >
 852+ 3E36 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 852+ 3E38             >
 852+ 3E38             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 3E38 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 3E3B             >
 852+ 3E3B             >
 852+ 3E3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 3E3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 3E3B             >
 852+ 3E3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 3E3B C2 2A                        dw      QCOMP
 854+ 3E3D 5A 27 E6 2A                  dw      TWO, QPAIRS
 855+ 3E41 1D 2B 82 20                  dw      COMPILE, BRANCH
 856+ 3E45 71 28 4C 27                  dw      HERE, ZERO, COMMA
 856+ 3E49 87 28
 857+ 3E4B DD 25 5A 27                  dw      SWAP, TWO, THEN
 857+ 3E4F 18 3E
 858+ 3E51 5A 27                        dw      TWO
 859+ 3E53 0D 25                        dw      EXIT
 860+ 3E55
 861+ 3E55              //  ______________________________________________________________________
 862+ 3E55              //
 863+ 3E55              // begin        ( -- a 1 ) \ compile-time
 864+ 3E55              // BEGIN ... AGAIN
 865+ 3E55              // BEGIN ... f UNTIL
 866+ 3E55              // BEGIN ... f WHILE ... REPEAT
 867+ 3E55                              Colon_Def BEGIN, "BEGIN", is_immediate
 867+ 3E55             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 867+ 3E55             >
 867+ 3E55             >Dict_Ptr        defl    $
 867+ 3E55             >
 867+ 3E55             >//              ______________________________________________________________________
 867+ 3E55             >//              Heap part
 867+ 3E55             >
 867+ 3E55             >
 867+ 3E55             >                org     (Heap_Ptr & $1FFF) + $E000
 867+ EC99             >
 867+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ EC99             >Latest_Definition defl  Heap_Ptr
 867+ EC99             >
 867+ EC99             >                // dummy db directives used to calculate length of namec
 867+ EC99 42 45 47 49 >                db      "BEGIN"
 867+ EC9D 4E          >
 867+ EC9E             >len_NFA         defl    $ - temp_NFA
 867+ EC9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ EC99             >
 867+ EC99 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ EC9A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 867+ EC9E 4E          >
 867+ EC9F             >                org     $-1                 // alter last byte of Name just above to set
 867+ EC9E CE          >                db      {b $} | END_BIT     // msb as name end
 867+ EC9F             >
 867+ EC9F 90 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 867+ ECA1             >Prev_Ptr        defl    Heap_Ptr
 867+ ECA1             >
 867+ ECA1             >mirror_Ptr      defl    $
 867+ ECA1             >
 867+ ECA1 57 3E       >                dw      Dict_Ptr + 2        // xt
 867+ ECA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 867+ ECA3             >
 867+ ECA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 867+ ECA3             >
 867+ ECA3             >//              ______________________________________________________________________
 867+ ECA3             >//              Dictionary part
 867+ ECA3             >
 867+ ECA3             >                org     Dict_Ptr
 867+ 3E55             >
 867+ 3E55 A1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 867+ 3E57             >
 867+ 3E57             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 3E57 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 867+ 3E5A             >
 867+ 3E5A             >
 867+ 3E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 3E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 3E5A             >
 867+ 3E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 3E5A C2 2A                        dw      QCOMP
 869+ 3E5C 71 28                        dw      HERE
 870+ 3E5E 5A 27                        dw      TWO
 871+ 3E60 0D 25                        dw      EXIT
 872+ 3E62
 873+ 3E62              //  ______________________________________________________________________
 874+ 3E62              //
 875+ 3E62              // again        ( a 1 -- ) \ compile-time
 876+ 3E62                              Colon_Def AGAIN, "AGAIN", is_immediate
 876+ 3E62             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 876+ 3E62             >
 876+ 3E62             >Dict_Ptr        defl    $
 876+ 3E62             >
 876+ 3E62             >//              ______________________________________________________________________
 876+ 3E62             >//              Heap part
 876+ 3E62             >
 876+ 3E62             >
 876+ 3E62             >                org     (Heap_Ptr & $1FFF) + $E000
 876+ ECA3             >
 876+ ECA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 876+ ECA3             >Latest_Definition defl  Heap_Ptr
 876+ ECA3             >
 876+ ECA3             >                // dummy db directives used to calculate length of namec
 876+ ECA3 41 47 41 49 >                db      "AGAIN"
 876+ ECA7 4E          >
 876+ ECA8             >len_NFA         defl    $ - temp_NFA
 876+ ECA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 876+ ECA3             >
 876+ ECA3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 876+ ECA4 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 876+ ECA8 4E          >
 876+ ECA9             >                org     $-1                 // alter last byte of Name just above to set
 876+ ECA8 CE          >                db      {b $} | END_BIT     // msb as name end
 876+ ECA9             >
 876+ ECA9 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 876+ ECAB             >Prev_Ptr        defl    Heap_Ptr
 876+ ECAB             >
 876+ ECAB             >mirror_Ptr      defl    $
 876+ ECAB             >
 876+ ECAB 64 3E       >                dw      Dict_Ptr + 2        // xt
 876+ ECAD             >Heap_Ptr        defl    $ - $E000           // save current HP
 876+ ECAD             >
 876+ ECAD             >Current_HP      defl  $ - $E000             // used to set HP once!
 876+ ECAD             >
 876+ ECAD             >//              ______________________________________________________________________
 876+ ECAD             >//              Dictionary part
 876+ ECAD             >
 876+ ECAD             >                org     Dict_Ptr
 876+ 3E62             >
 876+ 3E62 AB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 876+ 3E64             >
 876+ 3E64             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 876+ 3E64 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 876+ 3E67             >
 876+ 3E67             >
 876+ 3E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 876+ 3E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 876+ 3E67             >
 876+ 3E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 877+ 3E67 C2 2A                        dw      QCOMP
 878+ 3E69 5A 27 E6 2A                  dw      TWO, QPAIRS
 879+ 3E6D 1D 2B 82 20                  dw      COMPILE, BRANCH
 880+ 3E71 F8 3D                        dw      BACK
 881+ 3E73 0D 25                        dw      EXIT
 882+ 3E75
 883+ 3E75              //  ______________________________________________________________________
 884+ 3E75              //
 885+ 3E75              // until        ( a 1 -- ) \ compile-time
 886+ 3E75                              Colon_Def UNTIL, "UNTIL", is_immediate
 886+ 3E75             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 886+ 3E75             >
 886+ 3E75             >Dict_Ptr        defl    $
 886+ 3E75             >
 886+ 3E75             >//              ______________________________________________________________________
 886+ 3E75             >//              Heap part
 886+ 3E75             >
 886+ 3E75             >
 886+ 3E75             >                org     (Heap_Ptr & $1FFF) + $E000
 886+ ECAD             >
 886+ ECAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 886+ ECAD             >Latest_Definition defl  Heap_Ptr
 886+ ECAD             >
 886+ ECAD             >                // dummy db directives used to calculate length of namec
 886+ ECAD 55 4E 54 49 >                db      "UNTIL"
 886+ ECB1 4C          >
 886+ ECB2             >len_NFA         defl    $ - temp_NFA
 886+ ECB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 886+ ECAD             >
 886+ ECAD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 886+ ECAE 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 886+ ECB2 4C          >
 886+ ECB3             >                org     $-1                 // alter last byte of Name just above to set
 886+ ECB2 CC          >                db      {b $} | END_BIT     // msb as name end
 886+ ECB3             >
 886+ ECB3 A3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 886+ ECB5             >Prev_Ptr        defl    Heap_Ptr
 886+ ECB5             >
 886+ ECB5             >mirror_Ptr      defl    $
 886+ ECB5             >
 886+ ECB5 77 3E       >                dw      Dict_Ptr + 2        // xt
 886+ ECB7             >Heap_Ptr        defl    $ - $E000           // save current HP
 886+ ECB7             >
 886+ ECB7             >Current_HP      defl  $ - $E000             // used to set HP once!
 886+ ECB7             >
 886+ ECB7             >//              ______________________________________________________________________
 886+ ECB7             >//              Dictionary part
 886+ ECB7             >
 886+ ECB7             >                org     Dict_Ptr
 886+ 3E75             >
 886+ 3E75 B5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 886+ 3E77             >
 886+ 3E77             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 886+ 3E77 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 886+ 3E7A             >
 886+ 3E7A             >
 886+ 3E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 886+ 3E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 886+ 3E7A             >
 886+ 3E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 887+ 3E7A C2 2A                        dw      QCOMP
 888+ 3E7C 5A 27 E6 2A                  dw      TWO, QPAIRS
 889+ 3E80 1D 2B 8F 20                  dw      COMPILE, ZBRANCH
 890+ 3E84 F8 3D                        dw      BACK
 891+ 3E86 0D 25                        dw      EXIT
 892+ 3E88
 893+ 3E88              //  ______________________________________________________________________
 894+ 3E88              //
 895+ 3E88              // end          ( a 1 -- ) \ compile-time
 896+ 3E88                              Colon_Def END, "END", is_immediate
 896+ 3E88             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 896+ 3E88             >
 896+ 3E88             >Dict_Ptr        defl    $
 896+ 3E88             >
 896+ 3E88             >//              ______________________________________________________________________
 896+ 3E88             >//              Heap part
 896+ 3E88             >
 896+ 3E88             >
 896+ 3E88             >                org     (Heap_Ptr & $1FFF) + $E000
 896+ ECB7             >
 896+ ECB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 896+ ECB7             >Latest_Definition defl  Heap_Ptr
 896+ ECB7             >
 896+ ECB7             >                // dummy db directives used to calculate length of namec
 896+ ECB7 45 4E 44    >                db      "END"
 896+ ECBA             >len_NFA         defl    $ - temp_NFA
 896+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 896+ ECB7             >
 896+ ECB7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 896+ ECB8 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 896+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 896+ ECBA C4          >                db      {b $} | END_BIT     // msb as name end
 896+ ECBB             >
 896+ ECBB AD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 896+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 896+ ECBD             >
 896+ ECBD             >mirror_Ptr      defl    $
 896+ ECBD             >
 896+ ECBD 8A 3E       >                dw      Dict_Ptr + 2        // xt
 896+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 896+ ECBF             >
 896+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 896+ ECBF             >
 896+ ECBF             >//              ______________________________________________________________________
 896+ ECBF             >//              Dictionary part
 896+ ECBF             >
 896+ ECBF             >                org     Dict_Ptr
 896+ 3E88             >
 896+ 3E88 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 896+ 3E8A             >
 896+ 3E8A             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 896+ 3E8A CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 896+ 3E8D             >
 896+ 3E8D             >
 896+ 3E8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 896+ 3E8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 896+ 3E8D             >
 896+ 3E8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 897+ 3E8D 77 3E                        dw      UNTIL
 898+ 3E8F 0D 25                        dw      EXIT
 899+ 3E91
 900+ 3E91              //  ______________________________________________________________________
 901+ 3E91              //
 902+ 3E91              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 903+ 3E91                              Colon_Def WHILE, "WHILE", is_immediate
 903+ 3E91             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 903+ 3E91             >
 903+ 3E91             >Dict_Ptr        defl    $
 903+ 3E91             >
 903+ 3E91             >//              ______________________________________________________________________
 903+ 3E91             >//              Heap part
 903+ 3E91             >
 903+ 3E91             >
 903+ 3E91             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ ECBF             >
 903+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ ECBF             >Latest_Definition defl  Heap_Ptr
 903+ ECBF             >
 903+ ECBF             >                // dummy db directives used to calculate length of namec
 903+ ECBF 57 48 49 4C >                db      "WHILE"
 903+ ECC3 45          >
 903+ ECC4             >len_NFA         defl    $ - temp_NFA
 903+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ ECBF             >
 903+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ ECC0 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 903+ ECC4 45          >
 903+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 903+ ECC4 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ ECC5             >
 903+ ECC5 B7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 903+ ECC7             >
 903+ ECC7             >mirror_Ptr      defl    $
 903+ ECC7             >
 903+ ECC7 93 3E       >                dw      Dict_Ptr + 2        // xt
 903+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ ECC9             >
 903+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ ECC9             >
 903+ ECC9             >//              ______________________________________________________________________
 903+ ECC9             >//              Dictionary part
 903+ ECC9             >
 903+ ECC9             >                org     Dict_Ptr
 903+ 3E91             >
 903+ 3E91 C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 3E93             >
 903+ 3E93             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 3E93 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 3E96             >
 903+ 3E96             >
 903+ 3E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 3E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 3E96             >
 903+ 3E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 3E96 05 3E                        dw      IF
 905+ 3E98              //              dw      TWO_PLUS // ( that is 4 )
 906+ 3E98 26 26                        dw      TWO_SWAP
 907+ 3E9A 0D 25                        dw      EXIT
 908+ 3E9C
 909+ 3E9C              //  ______________________________________________________________________
 910+ 3E9C              //
 911+ 3E9C              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 912+ 3E9C                              Colon_Def REPEAT, "REPEAT", is_immediate
 912+ 3E9C             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 912+ 3E9C             >
 912+ 3E9C             >Dict_Ptr        defl    $
 912+ 3E9C             >
 912+ 3E9C             >//              ______________________________________________________________________
 912+ 3E9C             >//              Heap part
 912+ 3E9C             >
 912+ 3E9C             >
 912+ 3E9C             >                org     (Heap_Ptr & $1FFF) + $E000
 912+ ECC9             >
 912+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ ECC9             >Latest_Definition defl  Heap_Ptr
 912+ ECC9             >
 912+ ECC9             >                // dummy db directives used to calculate length of namec
 912+ ECC9 52 45 50 45 >                db      "REPEAT"
 912+ ECCD 41 54       >
 912+ ECCF             >len_NFA         defl    $ - temp_NFA
 912+ ECCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ ECC9             >
 912+ ECC9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ ECCA 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 912+ ECCE 41 54       >
 912+ ECD0             >                org     $-1                 // alter last byte of Name just above to set
 912+ ECCF D4          >                db      {b $} | END_BIT     // msb as name end
 912+ ECD0             >
 912+ ECD0 BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 912+ ECD2             >Prev_Ptr        defl    Heap_Ptr
 912+ ECD2             >
 912+ ECD2             >mirror_Ptr      defl    $
 912+ ECD2             >
 912+ ECD2 9E 3E       >                dw      Dict_Ptr + 2        // xt
 912+ ECD4             >Heap_Ptr        defl    $ - $E000           // save current HP
 912+ ECD4             >
 912+ ECD4             >Current_HP      defl  $ - $E000             // used to set HP once!
 912+ ECD4             >
 912+ ECD4             >//              ______________________________________________________________________
 912+ ECD4             >//              Dictionary part
 912+ ECD4             >
 912+ ECD4             >                org     Dict_Ptr
 912+ 3E9C             >
 912+ 3E9C D2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 912+ 3E9E             >
 912+ 3E9E             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 3E9E CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 3EA1             >
 912+ 3EA1             >
 912+ 3EA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 3EA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 3EA1             >
 912+ 3EA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 3EA1 64 3E                        dw      AGAIN
 914+ 3EA3              //              dw      TWO_MINUS
 915+ 3EA3 18 3E                        dw      THEN
 916+ 3EA5 0D 25                        dw      EXIT
 917+ 3EA7
 918+ 3EA7              //  ______________________________________________________________________
 919+ 3EA7              //
 920+ 3EA7              // ?do-
 921+ 3EA7              // special version of "BACK" used by ?DO and LOOP
 922+ 3EA7                              Colon_Def C_DO_BACK, "?DO-", is_normal
 922+ 3EA7             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 922+ 3EA7             >
 922+ 3EA7             >Dict_Ptr        defl    $
 922+ 3EA7             >
 922+ 3EA7             >//              ______________________________________________________________________
 922+ 3EA7             >//              Heap part
 922+ 3EA7             >
 922+ 3EA7             >
 922+ 3EA7             >                org     (Heap_Ptr & $1FFF) + $E000
 922+ ECD4             >
 922+ ECD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ ECD4             >Latest_Definition defl  Heap_Ptr
 922+ ECD4             >
 922+ ECD4             >                // dummy db directives used to calculate length of namec
 922+ ECD4 3F 44 4F 2D >                db      "?DO-"
 922+ ECD8             >len_NFA         defl    $ - temp_NFA
 922+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ ECD4             >
 922+ ECD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ ECD5 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 922+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 922+ ECD8 AD          >                db      {b $} | END_BIT     // msb as name end
 922+ ECD9             >
 922+ ECD9 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 922+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 922+ ECDB             >
 922+ ECDB             >mirror_Ptr      defl    $
 922+ ECDB             >
 922+ ECDB A9 3E       >                dw      Dict_Ptr + 2        // xt
 922+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 922+ ECDD             >
 922+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 922+ ECDD             >
 922+ ECDD             >//              ______________________________________________________________________
 922+ ECDD             >//              Dictionary part
 922+ ECDD             >
 922+ ECDD             >                org     Dict_Ptr
 922+ 3EA7             >
 922+ 3EA7 DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 922+ 3EA9             >
 922+ 3EA9             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 3EA9 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 3EAC             >
 922+ 3EAC             >
 922+ 3EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 3EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 3EAC             >
 922+ 3EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 3EAC F8 3D                        dw      BACK
 924+ 3EAE              CDoBack_Begin:
 925+ 3EAE F4 24 2F 28                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 925+ 3EB2 55 26 B0 28
 926+ 3EB6 8F 20                        dw      ZBRANCH
 927+ 3EB8 0A 00                        dw      CDoBack_While - $
 928+ 3EBA 86 25 18 3E                  dw          TWO_PLUS, THEN
 929+ 3EBE 82 20                        dw      BRANCH
 930+ 3EC0 EE FF                        dw      CDoBack_Begin - $
 931+ 3EC2              CDoBack_While:
 932+ 3EC2 F5 2A 2F 28                  dw      QCSP, CSP, STORE
 932+ 3EC6 5F 26
 933+ 3EC8 0D 25                        dw      EXIT
 934+ 3ECA
 935+ 3ECA              //  ______________________________________________________________________
 936+ 3ECA              //
 937+ 3ECA              // do
 938+ 3ECA              // DO  ... LOOP
 939+ 3ECA              // DO  ... n +LOOP
 940+ 3ECA              // ?DO ... LOOP
 941+ 3ECA              // ?DO ... n +LOOP
 942+ 3ECA                              Colon_Def DO, "DO", is_immediate
 942+ 3ECA             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 942+ 3ECA             >
 942+ 3ECA             >Dict_Ptr        defl    $
 942+ 3ECA             >
 942+ 3ECA             >//              ______________________________________________________________________
 942+ 3ECA             >//              Heap part
 942+ 3ECA             >
 942+ 3ECA             >
 942+ 3ECA             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ ECDD             >
 942+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ ECDD             >Latest_Definition defl  Heap_Ptr
 942+ ECDD             >
 942+ ECDD             >                // dummy db directives used to calculate length of namec
 942+ ECDD 44 4F       >                db      "DO"
 942+ ECDF             >len_NFA         defl    $ - temp_NFA
 942+ ECDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ ECDD             >
 942+ ECDD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ ECDE 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 942+ ECE0             >                org     $-1                 // alter last byte of Name just above to set
 942+ ECDF CF          >                db      {b $} | END_BIT     // msb as name end
 942+ ECE0             >
 942+ ECE0 D4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ ECE2             >Prev_Ptr        defl    Heap_Ptr
 942+ ECE2             >
 942+ ECE2             >mirror_Ptr      defl    $
 942+ ECE2             >
 942+ ECE2 CC 3E       >                dw      Dict_Ptr + 2        // xt
 942+ ECE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ ECE4             >
 942+ ECE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ ECE4             >
 942+ ECE4             >//              ______________________________________________________________________
 942+ ECE4             >//              Dictionary part
 942+ ECE4             >
 942+ ECE4             >                org     Dict_Ptr
 942+ 3ECA             >
 942+ 3ECA E2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 3ECC             >
 942+ 3ECC             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 3ECC CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 3ECF             >
 942+ 3ECF             >
 942+ 3ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 3ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 3ECF             >
 942+ 3ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 3ECF 1D 2B CE 20                  dw      COMPILE, C_DO
 944+ 3ED3 2F 28 55 26                  dw      CSP, FETCH, STORE_CSP
 944+ 3ED7 A0 2A
 945+ 3ED9 71 28 61 27                  dw      HERE, THREE
 946+ 3EDD 0D 25                        dw      EXIT
 947+ 3EDF
 948+ 3EDF              //  ______________________________________________________________________
 949+ 3EDF              //
 950+ 3EDF              // loop
 951+ 3EDF                              Colon_Def LOOP, "LOOP", is_immediate
 951+ 3EDF             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 951+ 3EDF             >
 951+ 3EDF             >Dict_Ptr        defl    $
 951+ 3EDF             >
 951+ 3EDF             >//              ______________________________________________________________________
 951+ 3EDF             >//              Heap part
 951+ 3EDF             >
 951+ 3EDF             >
 951+ 3EDF             >                org     (Heap_Ptr & $1FFF) + $E000
 951+ ECE4             >
 951+ ECE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ ECE4             >Latest_Definition defl  Heap_Ptr
 951+ ECE4             >
 951+ ECE4             >                // dummy db directives used to calculate length of namec
 951+ ECE4 4C 4F 4F 50 >                db      "LOOP"
 951+ ECE8             >len_NFA         defl    $ - temp_NFA
 951+ ECE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ ECE4             >
 951+ ECE4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ ECE5 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 951+ ECE9             >                org     $-1                 // alter last byte of Name just above to set
 951+ ECE8 D0          >                db      {b $} | END_BIT     // msb as name end
 951+ ECE9             >
 951+ ECE9 DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 951+ ECEB             >Prev_Ptr        defl    Heap_Ptr
 951+ ECEB             >
 951+ ECEB             >mirror_Ptr      defl    $
 951+ ECEB             >
 951+ ECEB E1 3E       >                dw      Dict_Ptr + 2        // xt
 951+ ECED             >Heap_Ptr        defl    $ - $E000           // save current HP
 951+ ECED             >
 951+ ECED             >Current_HP      defl  $ - $E000             // used to set HP once!
 951+ ECED             >
 951+ ECED             >//              ______________________________________________________________________
 951+ ECED             >//              Dictionary part
 951+ ECED             >
 951+ ECED             >                org     Dict_Ptr
 951+ 3EDF             >
 951+ 3EDF EB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 951+ 3EE1             >
 951+ 3EE1             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 3EE1 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 3EE4             >
 951+ 3EE4             >
 951+ 3EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 3EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 3EE4             >
 951+ 3EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 3EE4 61 27 E6 2A                  dw      THREE, QPAIRS
 953+ 3EE8 1D 2B 7A 20                  dw      COMPILE, C_LOOP
 954+ 3EEC A9 3E                        dw      C_DO_BACK
 955+ 3EEE 0D 25                        dw      EXIT
 956+ 3EF0
 957+ 3EF0              //  ______________________________________________________________________
 958+ 3EF0              //
 959+ 3EF0              // +loop
 960+ 3EF0                              Colon_Def PLOOP, "+LOOP", is_immediate
 960+ 3EF0             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 960+ 3EF0             >
 960+ 3EF0             >Dict_Ptr        defl    $
 960+ 3EF0             >
 960+ 3EF0             >//              ______________________________________________________________________
 960+ 3EF0             >//              Heap part
 960+ 3EF0             >
 960+ 3EF0             >
 960+ 3EF0             >                org     (Heap_Ptr & $1FFF) + $E000
 960+ ECED             >
 960+ ECED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ ECED             >Latest_Definition defl  Heap_Ptr
 960+ ECED             >
 960+ ECED             >                // dummy db directives used to calculate length of namec
 960+ ECED 2B 4C 4F 4F >                db      "+LOOP"
 960+ ECF1 50          >
 960+ ECF2             >len_NFA         defl    $ - temp_NFA
 960+ ECF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ ECED             >
 960+ ECED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ ECEE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 960+ ECF2 50          >
 960+ ECF3             >                org     $-1                 // alter last byte of Name just above to set
 960+ ECF2 D0          >                db      {b $} | END_BIT     // msb as name end
 960+ ECF3             >
 960+ ECF3 E4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 960+ ECF5             >Prev_Ptr        defl    Heap_Ptr
 960+ ECF5             >
 960+ ECF5             >mirror_Ptr      defl    $
 960+ ECF5             >
 960+ ECF5 F2 3E       >                dw      Dict_Ptr + 2        // xt
 960+ ECF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 960+ ECF7             >
 960+ ECF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 960+ ECF7             >
 960+ ECF7             >//              ______________________________________________________________________
 960+ ECF7             >//              Dictionary part
 960+ ECF7             >
 960+ ECF7             >                org     Dict_Ptr
 960+ 3EF0             >
 960+ 3EF0 F5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 960+ 3EF2             >
 960+ 3EF2             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 3EF2 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 960+ 3EF5             >
 960+ 3EF5             >
 960+ 3EF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 3EF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 3EF5             >
 960+ 3EF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 3EF5 61 27 E6 2A                  dw      THREE, QPAIRS
 962+ 3EF9 1D 2B 4B 20                  dw      COMPILE, C_PLOOP
 963+ 3EFD A9 3E                        dw      C_DO_BACK
 964+ 3EFF 0D 25                        dw      EXIT
 965+ 3F01
 966+ 3F01              //  ______________________________________________________________________
 967+ 3F01              //
 968+ 3F01              // ?do
 969+ 3F01                              Colon_Def QDO, "?DO", is_immediate
 969+ 3F01             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 969+ 3F01             >
 969+ 3F01             >Dict_Ptr        defl    $
 969+ 3F01             >
 969+ 3F01             >//              ______________________________________________________________________
 969+ 3F01             >//              Heap part
 969+ 3F01             >
 969+ 3F01             >
 969+ 3F01             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ ECF7             >
 969+ ECF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ ECF7             >Latest_Definition defl  Heap_Ptr
 969+ ECF7             >
 969+ ECF7             >                // dummy db directives used to calculate length of namec
 969+ ECF7 3F 44 4F    >                db      "?DO"
 969+ ECFA             >len_NFA         defl    $ - temp_NFA
 969+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ ECF7             >
 969+ ECF7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ ECF8 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 969+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
 969+ ECFA CF          >                db      {b $} | END_BIT     // msb as name end
 969+ ECFB             >
 969+ ECFB ED 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 969+ ECFD             >Prev_Ptr        defl    Heap_Ptr
 969+ ECFD             >
 969+ ECFD             >mirror_Ptr      defl    $
 969+ ECFD             >
 969+ ECFD 03 3F       >                dw      Dict_Ptr + 2        // xt
 969+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ ECFF             >
 969+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ ECFF             >
 969+ ECFF             >//              ______________________________________________________________________
 969+ ECFF             >//              Dictionary part
 969+ ECFF             >
 969+ ECFF             >                org     Dict_Ptr
 969+ 3F01             >
 969+ 3F01 FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 969+ 3F03             >
 969+ 3F03             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 3F03 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 3F06             >
 969+ 3F06             >
 969+ 3F06             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 3F06             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 3F06             >
 969+ 3F06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 3F06 1D 2B A6 20                  dw      COMPILE, C_Q_DO
 971+ 3F0A 2F 28 55 26                  dw      CSP, FETCH, STORE_CSP
 971+ 3F0E A0 2A
 972+ 3F10 71 28 4C 27                  dw      HERE, ZERO, COMMA, ZERO
 972+ 3F14 87 28 4C 27
 973+ 3F18 71 28 61 27                  dw      HERE, THREE
 974+ 3F1C 0D 25                        dw      EXIT
 975+ 3F1E
 976+ 3F1E              //  ______________________________________________________________________
 977+ 3F1E              //
 978+ 3F1E              // \
 979+ 3F1E                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 979+ 3F1E             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 979+ 3F1E             >
 979+ 3F1E             >Dict_Ptr        defl    $
 979+ 3F1E             >
 979+ 3F1E             >//              ______________________________________________________________________
 979+ 3F1E             >//              Heap part
 979+ 3F1E             >
 979+ 3F1E             >
 979+ 3F1E             >                org     (Heap_Ptr & $1FFF) + $E000
 979+ ECFF             >
 979+ ECFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ ECFF             >Latest_Definition defl  Heap_Ptr
 979+ ECFF             >
 979+ ECFF             >                // dummy db directives used to calculate length of namec
 979+ ECFF 5C          >                db      "\\"
 979+ ED00             >len_NFA         defl    $ - temp_NFA
 979+ ED00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ ECFF             >
 979+ ECFF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ ED00 5C          >                db      "\\"               // name string in 7-bit ascii, but
 979+ ED01             >                org     $-1                 // alter last byte of Name just above to set
 979+ ED00 DC          >                db      {b $} | END_BIT     // msb as name end
 979+ ED01             >
 979+ ED01 F7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 979+ ED03             >Prev_Ptr        defl    Heap_Ptr
 979+ ED03             >
 979+ ED03             >mirror_Ptr      defl    $
 979+ ED03             >
 979+ ED03 20 3F       >                dw      Dict_Ptr + 2        // xt
 979+ ED05             >Heap_Ptr        defl    $ - $E000           // save current HP
 979+ ED05             >
 979+ ED05             >Current_HP      defl  $ - $E000             // used to set HP once!
 979+ ED05             >
 979+ ED05             >//              ______________________________________________________________________
 979+ ED05             >//              Dictionary part
 979+ ED05             >
 979+ ED05             >                org     Dict_Ptr
 979+ 3F1E             >
 979+ 3F1E 03 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 979+ 3F20             >
 979+ 3F20             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 3F20 CD F7 26    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 979+ 3F23             >
 979+ 3F23             >
 979+ 3F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 3F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 3F23             >
 979+ 3F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 3F23 ED 27 55 26                  dw      BLK, FETCH
 981+ 3F27 8F 20                        dw      ZBRANCH
 982+ 3F29 30 00                        dw      Backslash_Else_1 - $
 983+ 3F2B ED 27 55 26                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 983+ 3F2F 53 27 EA 28
 984+ 3F33 8F 20                        dw          ZBRANCH
 985+ 3F35 18 00                        dw          Backslash_Else_2 - $
 986+ 3F37 F3 27 55 26                  dw              TO_IN, FETCH, CL, MOD, CL
 986+ 3F3B 76 27 52 35
 986+ 3F3F 76 27
 987+ 3F41 DD 25 B0 28                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 987+ 3F45 F3 27 3D 26
 988+ 3F49 82 20                        dw          BRANCH
 989+ 3F4B 0A 00                        dw          Backslash_Endif_2 - $
 990+ 3F4D              Backslash_Else_2:
 991+ 3F4D 7D 27 92 25                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 991+ 3F51 F3 27 5F 26
 992+ 3F55              Backslash_Endif_2:
 993+ 3F55 82 20                        dw      BRANCH
 994+ 3F57 10 00                        dw      Backslash_Endif_1 - $
 995+ 3F59              Backslash_Else_1:
 996+ 3F59 4C 27 B1 27                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 996+ 3F5D 55 26 F3 27
 996+ 3F61 55 26 5F 25
 996+ 3F65 5F 26
 997+ 3F67              Backslash_Endif_1:
 998+ 3F67 0D 25                        dw      EXIT
 999+ 3F69
1000+ 3F69              //  ______________________________________________________________________
1001+ 3F69              //
1002+ 3F69              // blk-fh
1003+ 3F69                              Variable_Def BLK_FH,   "BLK-FH",   1
1003+ 3F69             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
1003+ 3F69             >
1003+ 3F69             >Dict_Ptr        defl    $
1003+ 3F69             >
1003+ 3F69             >//              ______________________________________________________________________
1003+ 3F69             >//              Heap part
1003+ 3F69             >
1003+ 3F69             >
1003+ 3F69             >                org     (Heap_Ptr & $1FFF) + $E000
1003+ ED05             >
1003+ ED05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1003+ ED05             >Latest_Definition defl  Heap_Ptr
1003+ ED05             >
1003+ ED05             >                // dummy db directives used to calculate length of namec
1003+ ED05 42 4C 4B 2D >                db      "BLK-FH"
1003+ ED09 46 48       >
1003+ ED0B             >len_NFA         defl    $ - temp_NFA
1003+ ED0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1003+ ED05             >
1003+ ED05 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1003+ ED06 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
1003+ ED0A 46 48       >
1003+ ED0C             >                org     $-1                 // alter last byte of Name just above to set
1003+ ED0B C8          >                db      {b $} | END_BIT     // msb as name end
1003+ ED0C             >
1003+ ED0C FF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1003+ ED0E             >Prev_Ptr        defl    Heap_Ptr
1003+ ED0E             >
1003+ ED0E             >mirror_Ptr      defl    $
1003+ ED0E             >
1003+ ED0E 6B 3F       >                dw      Dict_Ptr + 2        // xt
1003+ ED10             >Heap_Ptr        defl    $ - $E000           // save current HP
1003+ ED10             >
1003+ ED10             >Current_HP      defl  $ - $E000             // used to set HP once!
1003+ ED10             >
1003+ ED10             >//              ______________________________________________________________________
1003+ ED10             >//              Dictionary part
1003+ ED10             >
1003+ ED10             >                org     Dict_Ptr
1003+ 3F69             >
1003+ 3F69 0E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1003+ 3F6B             >
1003+ 3F6B             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1003+ 3F6B CD 33 27    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
1003+ 3F6E             >
1003+ 3F6E             >
1003+ 3F6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1003+ 3F6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1003+ 3F6E             >
1003+ 3F6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 3F6E 01 00       >                dw      1
1004+ 3F70
1005+ 3F70                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
1005+ 3F70             >
1005+ 3F70             >Dict_Ptr        defl    $
1005+ 3F70             >
1005+ 3F70             >//              ______________________________________________________________________
1005+ 3F70             >//              Heap part
1005+ 3F70             >
1005+ 3F70             >
1005+ 3F70             >                org     (Heap_Ptr & $1FFF) + $E000
1005+ ED10             >
1005+ ED10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ ED10             >Latest_Definition defl  Heap_Ptr
1005+ ED10             >
1005+ ED10             >                // dummy db directives used to calculate length of namec
1005+ ED10 42 4C 4B 2D >                db      "BLK-FNAME"
1005+ ED14 46 4E 41 4D >
1005+ ED18 45          >
1005+ ED19             >len_NFA         defl    $ - temp_NFA
1005+ ED19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ ED10             >
1005+ ED10 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ ED11 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
1005+ ED15 46 4E 41 4D >
1005+ ED19 45          >
1005+ ED1A             >                org     $-1                 // alter last byte of Name just above to set
1005+ ED19 C5          >                db      {b $} | END_BIT     // msb as name end
1005+ ED1A             >
1005+ ED1A 05 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1005+ ED1C             >Prev_Ptr        defl    Heap_Ptr
1005+ ED1C             >
1005+ ED1C             >mirror_Ptr      defl    $
1005+ ED1C             >
1005+ ED1C 72 3F       >                dw      Dict_Ptr + 2        // xt
1005+ ED1E             >Heap_Ptr        defl    $ - $E000           // save current HP
1005+ ED1E             >
1005+ ED1E             >Current_HP      defl  $ - $E000             // used to set HP once!
1005+ ED1E             >
1005+ ED1E             >//              ______________________________________________________________________
1005+ ED1E             >//              Dictionary part
1005+ ED1E             >
1005+ ED1E             >                org     Dict_Ptr
1005+ 3F70             >
1005+ 3F70 1C 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
1005+ 3F72             >
1005+ 3F72             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 3F72 CD D6 30    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1005+ 3F75             >
1005+ 3F75             >
1005+ 3F75             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 3F75             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 3F75             >
1005+ 3F75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 3F75 1E           Len_Filename:   db      30
1007+ 3F76 63 3A 2F 74  Blk_filename:   db      "c:/tools/vforth/!Blocks-64.bin", 0
1007+ 3F7A 6F 6F 6C 73
1007+ 3F7E 2F 76 66 6F
1007+ 3F82 72 74 68 2F
1007+ 3F86 21 42 6C 6F
1007+ 3F8A 63 6B 73 2D
1007+ 3F8E 36 34 2E 62
1007+ 3F92 69 6E 00
1008+ 3F95 00 00 00...                  ds      32
1009+ 3FB5
1010+ 3FB5              Fence_Word:
1011+ 3FB5              //  ______________________________________________________________________
1012+ 3FB5              //
1013+ 3FB5
1014+ 3FB5 00           Here_Dictionary db      0
1015+ 3FB6
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/L3.asm
 126  3FB6
 127  3FB6              // now we save the compiled file so we can either run it or debug it
 128  3FB6                              SAVENEX OPEN "output/main.nex", ORIGIN
 129  3FB6                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 130  3FB6                              SAVENEX CFG  0
 131  3FB6                              SAVENEX BANK 2, 0
 132  3FB6                              SAVENEX AUTO
 133  3FB6                              SAVENEX CLOSE
 134  3FB6
 135  3FB6              //              PAGE 7 ;set 7 page to current slot
 136  3FB6              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 137  3FB6              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 138  3FB6
 139  3FB6                      ////    SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, $2000
 140  3FB6                      ////    SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 141  3FB6
 142  3FB6                      ////    SAVEBIN "output/vforth", ORIGIN, $2000
 143  3FB6                      ////    SAVEBIN "output/vforth.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 144  3FB6
 145  3FB6                              SAVEBIN "output/vforth.1", ORIGIN, $2000
 146  3FB6                              SAVEBIN "output/vforth.2", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 147  3FB6
 148  3FB6                              // To run must copy vforth and vforth.bin to /dot directory
 149  3FB6                              // then start with
 150  3FB6                              //      .vforth
 151  3FB6
 152  3FB6                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_DOT/source/main.asm
